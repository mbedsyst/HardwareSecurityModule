
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001145c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000026c  080116a8  080116a8  000126a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011914  08011914  00013180  2**0
                  CONTENTS
  4 .ARM          00000008  08011914  08011914  00012914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801191c  0801191c  00013180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801191c  0801191c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011920  08011920  00012920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  08011924  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011234  20000180  08011aa4  00013180  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200113b4  08011aa4  000133b4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00013180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026703  00000000  00000000  000131b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f6e  00000000  00000000  000398b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e18  00000000  00000000  0003e828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000170c  00000000  00000000  00040640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00008437  00000000  00000000  00041d4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aae5  00000000  00000000  0004a183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014bc62  00000000  00000000  00074c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c08ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088e4  00000000  00000000  001c0910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001c91f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	08011690 	.word	0x08011690

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	08011690 	.word	0x08011690

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <PacketParser_Parse>:
#include "../../PacketParser/Inc/PacketParser.h"
#include "constants.h"
#include <string.h>

ParseStatus_t PacketParser_Parse(const uint8_t* rawData, uint16_t rawLength, ParsedPacket_t* parsedPacket)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	60f8      	str	r0, [r7, #12]
 80005ac:	460b      	mov	r3, r1
 80005ae:	607a      	str	r2, [r7, #4]
 80005b0:	817b      	strh	r3, [r7, #10]
	// Check if Data Stream or Packet structure is NULL
    if (!rawData || !parsedPacket)
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <PacketParser_Parse+0x1a>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d101      	bne.n	80005c2 <PacketParser_Parse+0x1e>
    {
    	return PARSE_NULL_POINTER;
 80005be:	2303      	movs	r3, #3
 80005c0:	e08b      	b.n	80006da <PacketParser_Parse+0x136>
    }
    // Check if Data Stream contains Data of valid length
    if (rawLength < 12)
 80005c2:	897b      	ldrh	r3, [r7, #10]
 80005c4:	2b0b      	cmp	r3, #11
 80005c6:	d801      	bhi.n	80005cc <PacketParser_Parse+0x28>
    {
    	return PARSE_INVALID_LENGTH;
 80005c8:	2301      	movs	r3, #1
 80005ca:	e086      	b.n	80006da <PacketParser_Parse+0x136>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	82fb      	strh	r3, [r7, #22]
    // Retrieve Transaction ID from Data Stream
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80005d0:	8afb      	ldrh	r3, [r7, #22]
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	061a      	lsls	r2, r3, #24
                                  (rawData[index + 1] << 16) |
 80005da:	8afb      	ldrh	r3, [r7, #22]
 80005dc:	3301      	adds	r3, #1
 80005de:	68f9      	ldr	r1, [r7, #12]
 80005e0:	440b      	add	r3, r1
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	041b      	lsls	r3, r3, #16
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80005e6:	431a      	orrs	r2, r3
                                  (rawData[index + 2] << 8)  |
 80005e8:	8afb      	ldrh	r3, [r7, #22]
 80005ea:	3302      	adds	r3, #2
 80005ec:	68f9      	ldr	r1, [r7, #12]
 80005ee:	440b      	add	r3, r1
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	021b      	lsls	r3, r3, #8
                                  (rawData[index + 1] << 16) |
 80005f4:	4313      	orrs	r3, r2
                                  (rawData[index + 3]);
 80005f6:	8afa      	ldrh	r2, [r7, #22]
 80005f8:	3203      	adds	r2, #3
 80005fa:	68f9      	ldr	r1, [r7, #12]
 80005fc:	440a      	add	r2, r1
 80005fe:	7812      	ldrb	r2, [r2, #0]
                                  (rawData[index + 2] << 8)  |
 8000600:	4313      	orrs	r3, r2
 8000602:	461a      	mov	r2, r3
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	601a      	str	r2, [r3, #0]
    // Set Index to point CMD byte
    index += 4;
 8000608:	8afb      	ldrh	r3, [r7, #22]
 800060a:	3304      	adds	r3, #4
 800060c:	82fb      	strh	r3, [r7, #22]
    // Retrieve CMD byte from Data Stream
    parsedPacket->cmd = rawData[index++];
 800060e:	8afb      	ldrh	r3, [r7, #22]
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	82fa      	strh	r2, [r7, #22]
 8000614:	461a      	mov	r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	4413      	add	r3, r2
 800061a:	781a      	ldrb	r2, [r3, #0]
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	711a      	strb	r2, [r3, #4]
    // Retrieve OPTION byte from Data Stream
    parsedPacket->option = rawData[index++];
 8000620:	8afb      	ldrh	r3, [r7, #22]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	82fa      	strh	r2, [r7, #22]
 8000626:	461a      	mov	r2, r3
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	4413      	add	r3, r2
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	715a      	strb	r2, [r3, #5]
    // Retrieve INPUT_SIZE half-word from Data Stream
    parsedPacket->inputSize = (rawData[index] << 8) | rawData[index + 1];
 8000632:	8afb      	ldrh	r3, [r7, #22]
 8000634:	68fa      	ldr	r2, [r7, #12]
 8000636:	4413      	add	r3, r2
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	b21a      	sxth	r2, r3
 800063e:	8afb      	ldrh	r3, [r7, #22]
 8000640:	3301      	adds	r3, #1
 8000642:	68f9      	ldr	r1, [r7, #12]
 8000644:	440b      	add	r3, r1
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b21b      	sxth	r3, r3
 800064a:	4313      	orrs	r3, r2
 800064c:	b21b      	sxth	r3, r3
 800064e:	b29a      	uxth	r2, r3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	80da      	strh	r2, [r3, #6]
    // Set Index to point INPUT_DATA
    index += 2;
 8000654:	8afb      	ldrh	r3, [r7, #22]
 8000656:	3302      	adds	r3, #2
 8000658:	82fb      	strh	r3, [r7, #22]
    // Check if INPUT_SIZE is under the prescribed limit
    if (parsedPacket->inputSize > MAX_INPUT_DATA_SIZE || (index + parsedPacket->inputSize + 4) > rawLength)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	88db      	ldrh	r3, [r3, #6]
 800065e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000662:	d807      	bhi.n	8000674 <PacketParser_Parse+0xd0>
 8000664:	8afb      	ldrh	r3, [r7, #22]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	88d2      	ldrh	r2, [r2, #6]
 800066a:	4413      	add	r3, r2
 800066c:	1cda      	adds	r2, r3, #3
 800066e:	897b      	ldrh	r3, [r7, #10]
 8000670:	429a      	cmp	r2, r3
 8000672:	db01      	blt.n	8000678 <PacketParser_Parse+0xd4>
    {
        return PARSE_INPUT_TOO_LARGE;
 8000674:	2304      	movs	r3, #4
 8000676:	e030      	b.n	80006da <PacketParser_Parse+0x136>
    }
    // Copy INPUT_DATA array from Data Stream to Packet structure
    memcpy(parsedPacket->inputData, &rawData[index], parsedPacket->inputSize);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f103 0008 	add.w	r0, r3, #8
 800067e:	8afb      	ldrh	r3, [r7, #22]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	18d1      	adds	r1, r2, r3
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	88db      	ldrh	r3, [r3, #6]
 8000688:	461a      	mov	r2, r3
 800068a:	f010 f89e 	bl	80107ca <memcpy>
    // Set Index to point EOD Flag
    index += parsedPacket->inputSize;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	88da      	ldrh	r2, [r3, #6]
 8000692:	8afb      	ldrh	r3, [r7, #22]
 8000694:	4413      	add	r3, r2
 8000696:	82fb      	strh	r3, [r7, #22]
    // Retrieve EOD Flag from Data Stream
    uint32_t receivedEOD = (rawData[index]     << 24) |
 8000698:	8afb      	ldrh	r3, [r7, #22]
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	4413      	add	r3, r2
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	061a      	lsls	r2, r3, #24
                           (rawData[index + 1] << 16) |
 80006a2:	8afb      	ldrh	r3, [r7, #22]
 80006a4:	3301      	adds	r3, #1
 80006a6:	68f9      	ldr	r1, [r7, #12]
 80006a8:	440b      	add	r3, r1
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	041b      	lsls	r3, r3, #16
    uint32_t receivedEOD = (rawData[index]     << 24) |
 80006ae:	431a      	orrs	r2, r3
                           (rawData[index + 2] << 8)  |
 80006b0:	8afb      	ldrh	r3, [r7, #22]
 80006b2:	3302      	adds	r3, #2
 80006b4:	68f9      	ldr	r1, [r7, #12]
 80006b6:	440b      	add	r3, r1
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	021b      	lsls	r3, r3, #8
                           (rawData[index + 1] << 16) |
 80006bc:	4313      	orrs	r3, r2
                           (rawData[index + 3]);
 80006be:	8afa      	ldrh	r2, [r7, #22]
 80006c0:	3203      	adds	r2, #3
 80006c2:	68f9      	ldr	r1, [r7, #12]
 80006c4:	440a      	add	r2, r1
 80006c6:	7812      	ldrb	r2, [r2, #0]
                           (rawData[index + 2] << 8)  |
 80006c8:	4313      	orrs	r3, r2
    uint32_t receivedEOD = (rawData[index]     << 24) |
 80006ca:	613b      	str	r3, [r7, #16]
    // Check if EOD Flag is valid
    if (receivedEOD != EOD_FLAG)
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	4a05      	ldr	r2, [pc, #20]	@ (80006e4 <PacketParser_Parse+0x140>)
 80006d0:	4293      	cmp	r3, r2
 80006d2:	d001      	beq.n	80006d8 <PacketParser_Parse+0x134>
    {
        return PARSE_EOD_MISMATCH;
 80006d4:	2302      	movs	r3, #2
 80006d6:	e000      	b.n	80006da <PacketParser_Parse+0x136>
    }
    // Return to Indicate successful parsing
    return PARSE_SUCCESS;
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	deaddead 	.word	0xdeaddead

080006e8 <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	4603      	mov	r3, r0
 80006f0:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 80006f2:	4a04      	ldr	r2, [pc, #16]	@ (8000704 <log_init+0x1c>)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	7013      	strb	r3, [r2, #0]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	20000000 	.word	0x20000000

08000708 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b0c7      	sub	sp, #284	@ 0x11c
 800070c:	af02      	add	r7, sp, #8
 800070e:	4604      	mov	r4, r0
 8000710:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000714:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8000718:	6001      	str	r1, [r0, #0]
 800071a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800071e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000722:	600a      	str	r2, [r1, #0]
 8000724:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000728:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800072c:	6013      	str	r3, [r2, #0]
 800072e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000732:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000736:	4622      	mov	r2, r4
 8000738:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 800073a:	4b16      	ldr	r3, [pc, #88]	@ (8000794 <log_generic+0x8c>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000742:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 8000746:	7812      	ldrb	r2, [r2, #0]
 8000748:	429a      	cmp	r2, r3
 800074a:	d31e      	bcc.n	800078a <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 800074c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000750:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000754:	f107 0010 	add.w	r0, r7, #16
 8000758:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800075c:	6812      	ldr	r2, [r2, #0]
 800075e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000762:	f00f ffa9 	bl	80106b8 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800076e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000772:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000776:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800077a:	4807      	ldr	r0, [pc, #28]	@ (8000798 <log_generic+0x90>)
 800077c:	9000      	str	r0, [sp, #0]
 800077e:	6812      	ldr	r2, [r2, #0]
 8000780:	6809      	ldr	r1, [r1, #0]
 8000782:	4806      	ldr	r0, [pc, #24]	@ (800079c <log_generic+0x94>)
 8000784:	f00f ff18 	bl	80105b8 <iprintf>
 8000788:	e000      	b.n	800078c <log_generic+0x84>
        return;
 800078a:	bf00      	nop
}
 800078c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000790:	46bd      	mov	sp, r7
 8000792:	bd90      	pop	{r4, r7, pc}
 8000794:	20000000 	.word	0x20000000
 8000798:	080116b8 	.word	0x080116b8
 800079c:	080116a8 	.word	0x080116a8

080007a0 <log_debug>:

void log_debug(const char *fmt, ...)
{
 80007a0:	b40f      	push	{r0, r1, r2, r3}
 80007a2:	b580      	push	{r7, lr}
 80007a4:	b084      	sub	sp, #16
 80007a6:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	9300      	str	r3, [sp, #0]
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <log_debug+0x2c>)
 80007b6:	4906      	ldr	r1, [pc, #24]	@ (80007d0 <log_debug+0x30>)
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff ffa5 	bl	8000708 <log_generic>
    va_end(args);
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007c8:	b004      	add	sp, #16
 80007ca:	4770      	bx	lr
 80007cc:	080116c0 	.word	0x080116c0
 80007d0:	080116c8 	.word	0x080116c8

080007d4 <log_info>:

void log_info(const char *fmt, ...)
{
 80007d4:	b40f      	push	{r0, r1, r2, r3}
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b084      	sub	sp, #16
 80007da:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	693b      	ldr	r3, [r7, #16]
 80007e8:	4a05      	ldr	r2, [pc, #20]	@ (8000800 <log_info+0x2c>)
 80007ea:	4906      	ldr	r1, [pc, #24]	@ (8000804 <log_info+0x30>)
 80007ec:	2001      	movs	r0, #1
 80007ee:	f7ff ff8b 	bl	8000708 <log_generic>
    va_end(args);
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007fc:	b004      	add	sp, #16
 80007fe:	4770      	bx	lr
 8000800:	080116d0 	.word	0x080116d0
 8000804:	080116d8 	.word	0x080116d8

08000808 <log_error>:
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
    va_end(args);
}

void log_error(const char *fmt, ...)
{
 8000808:	b40f      	push	{r0, r1, r2, r3}
 800080a:	b580      	push	{r7, lr}
 800080c:	b084      	sub	sp, #16
 800080e:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	4a05      	ldr	r2, [pc, #20]	@ (8000834 <log_error+0x2c>)
 800081e:	4906      	ldr	r1, [pc, #24]	@ (8000838 <log_error+0x30>)
 8000820:	2003      	movs	r0, #3
 8000822:	f7ff ff71 	bl	8000708 <log_generic>
    va_end(args);
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000830:	b004      	add	sp, #16
 8000832:	4770      	bx	lr
 8000834:	080116f0 	.word	0x080116f0
 8000838:	080116f8 	.word	0x080116f8

0800083c <fill_test_packet>:
static void MX_RNG_Init(void);
static void MX_HASH_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
void fill_test_packet(uint8_t *buffer, uint16_t *length)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
    if (!buffer || !length) return;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d04a      	beq.n	80008e2 <fill_test_packet+0xa6>
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d047      	beq.n	80008e2 <fill_test_packet+0xa6>

    // Transaction ID: 0x12345678
    buffer[0] = 0x12;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2212      	movs	r2, #18
 8000856:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0x34;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3301      	adds	r3, #1
 800085c:	2234      	movs	r2, #52	@ 0x34
 800085e:	701a      	strb	r2, [r3, #0]
    buffer[2] = 0x56;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3302      	adds	r3, #2
 8000864:	2256      	movs	r2, #86	@ 0x56
 8000866:	701a      	strb	r2, [r3, #0]
    buffer[3] = 0x78;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3303      	adds	r3, #3
 800086c:	2278      	movs	r2, #120	@ 0x78
 800086e:	701a      	strb	r2, [r3, #0]

    // CMD
    buffer[4] = 0xA1;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3304      	adds	r3, #4
 8000874:	22a1      	movs	r2, #161	@ 0xa1
 8000876:	701a      	strb	r2, [r3, #0]

    // OPTION
    buffer[5] = 0x01;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3305      	adds	r3, #5
 800087c:	2201      	movs	r2, #1
 800087e:	701a      	strb	r2, [r3, #0]

    // INPUT SIZE: 188 bytes (0x00BC)
    buffer[6] = 0x00;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3306      	adds	r3, #6
 8000884:	2200      	movs	r2, #0
 8000886:	701a      	strb	r2, [r3, #0]
    buffer[7] = 0xBC;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	3307      	adds	r3, #7
 800088c:	22bc      	movs	r2, #188	@ 0xbc
 800088e:	701a      	strb	r2, [r3, #0]

    // Input Data: 188 bytes of pseudo-random values
    for (uint16_t i = 0; i < 188; ++i)
 8000890:	2300      	movs	r3, #0
 8000892:	81fb      	strh	r3, [r7, #14]
 8000894:	e00e      	b.n	80008b4 <fill_test_packet+0x78>
    {
        buffer[8 + i] = (uint8_t)((i ^ 0xAA) & 0xFF);
 8000896:	89fb      	ldrh	r3, [r7, #14]
 8000898:	b2db      	uxtb	r3, r3
 800089a:	89fa      	ldrh	r2, [r7, #14]
 800089c:	3208      	adds	r2, #8
 800089e:	4611      	mov	r1, r2
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	440a      	add	r2, r1
 80008a4:	f083 0355 	eor.w	r3, r3, #85	@ 0x55
 80008a8:	43db      	mvns	r3, r3
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	7013      	strb	r3, [r2, #0]
    for (uint16_t i = 0; i < 188; ++i)
 80008ae:	89fb      	ldrh	r3, [r7, #14]
 80008b0:	3301      	adds	r3, #1
 80008b2:	81fb      	strh	r3, [r7, #14]
 80008b4:	89fb      	ldrh	r3, [r7, #14]
 80008b6:	2bbb      	cmp	r3, #187	@ 0xbb
 80008b8:	d9ed      	bls.n	8000896 <fill_test_packet+0x5a>
    }

    // EOD Flag: 0xDEADBEEF
    buffer[196] = 0xDE;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	33c4      	adds	r3, #196	@ 0xc4
 80008be:	22de      	movs	r2, #222	@ 0xde
 80008c0:	701a      	strb	r2, [r3, #0]
    buffer[197] = 0xAD;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	33c5      	adds	r3, #197	@ 0xc5
 80008c6:	22ad      	movs	r2, #173	@ 0xad
 80008c8:	701a      	strb	r2, [r3, #0]
    buffer[198] = 0xBE;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	33c6      	adds	r3, #198	@ 0xc6
 80008ce:	22be      	movs	r2, #190	@ 0xbe
 80008d0:	701a      	strb	r2, [r3, #0]
    buffer[199] = 0xEF;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	33c7      	adds	r3, #199	@ 0xc7
 80008d6:	22ef      	movs	r2, #239	@ 0xef
 80008d8:	701a      	strb	r2, [r3, #0]

    *length = TEST_PACKET_SIZE;
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	22c8      	movs	r2, #200	@ 0xc8
 80008de:	801a      	strh	r2, [r3, #0]
 80008e0:	e000      	b.n	80008e4 <fill_test_packet+0xa8>
    if (!buffer || !length) return;
 80008e2:	bf00      	nop
}
 80008e4:	3714      	adds	r7, #20
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
	...

080008f0 <test_parse_packet>:

void test_parse_packet(const uint8_t *buffer, uint16_t length)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	f843 0c14 	str.w	r0, [r3, #-20]
 8000902:	460a      	mov	r2, r1
 8000904:	f107 0318 	add.w	r3, r7, #24
 8000908:	f823 2c16 	strh.w	r2, [r3, #-22]
    ParsedPacket_t parsedPacket;
    ParseStatus_t status = PacketParser_Parse(buffer, length, &parsedPacket);
 800090c:	f107 0318 	add.w	r3, r7, #24
 8000910:	3b0c      	subs	r3, #12
 8000912:	f107 0218 	add.w	r2, r7, #24
 8000916:	f832 1c16 	ldrh.w	r1, [r2, #-22]
 800091a:	f107 0218 	add.w	r2, r7, #24
 800091e:	4610      	mov	r0, r2
 8000920:	461a      	mov	r2, r3
 8000922:	f850 0c14 	ldr.w	r0, [r0, #-20]
 8000926:	f7ff fe3d 	bl	80005a4 <PacketParser_Parse>
 800092a:	4603      	mov	r3, r0
 800092c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000930:	f102 0215 	add.w	r2, r2, #21
 8000934:	7013      	strb	r3, [r2, #0]

    if (status == PARSE_SUCCESS)
 8000936:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800093a:	f103 0315 	add.w	r3, r3, #21
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d15d      	bne.n	8000a00 <test_parse_packet+0x110>
    {
        log_info("=== Parser Test Successful ===");
 8000944:	4836      	ldr	r0, [pc, #216]	@ (8000a20 <test_parse_packet+0x130>)
 8000946:	f7ff ff45 	bl	80007d4 <log_info>
        log_debug("Transaction ID : 0x%08X", parsedPacket.transactionID);
 800094a:	f107 0318 	add.w	r3, r7, #24
 800094e:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000952:	4619      	mov	r1, r3
 8000954:	4833      	ldr	r0, [pc, #204]	@ (8000a24 <test_parse_packet+0x134>)
 8000956:	f7ff ff23 	bl	80007a0 <log_debug>
        log_debug("Command        : 0x%02X", parsedPacket.cmd);
 800095a:	f107 0318 	add.w	r3, r7, #24
 800095e:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000962:	4619      	mov	r1, r3
 8000964:	4830      	ldr	r0, [pc, #192]	@ (8000a28 <test_parse_packet+0x138>)
 8000966:	f7ff ff1b 	bl	80007a0 <log_debug>
        log_debug("Option         : 0x%02X", parsedPacket.option);
 800096a:	f107 0318 	add.w	r3, r7, #24
 800096e:	f813 3c07 	ldrb.w	r3, [r3, #-7]
 8000972:	4619      	mov	r1, r3
 8000974:	482d      	ldr	r0, [pc, #180]	@ (8000a2c <test_parse_packet+0x13c>)
 8000976:	f7ff ff13 	bl	80007a0 <log_debug>
        log_debug("Input Size     : %d bytes", parsedPacket.inputSize);
 800097a:	f107 0318 	add.w	r3, r7, #24
 800097e:	f833 3c06 	ldrh.w	r3, [r3, #-6]
 8000982:	4619      	mov	r1, r3
 8000984:	482a      	ldr	r0, [pc, #168]	@ (8000a30 <test_parse_packet+0x140>)
 8000986:	f7ff ff0b 	bl	80007a0 <log_debug>

        log_debug("First 16 Input Data bytes:");
 800098a:	482a      	ldr	r0, [pc, #168]	@ (8000a34 <test_parse_packet+0x144>)
 800098c:	f7ff ff08 	bl	80007a0 <log_debug>
        for (uint16_t i = 0; i < 16 && i < parsedPacket.inputSize; ++i)
 8000990:	2300      	movs	r3, #0
 8000992:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000996:	f102 0216 	add.w	r2, r2, #22
 800099a:	8013      	strh	r3, [r2, #0]
 800099c:	e01d      	b.n	80009da <test_parse_packet+0xea>
        {
            log_debug("  Byte[%02d] = 0x%02X", i, parsedPacket.inputData[i]);
 800099e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80009a2:	f103 0316 	add.w	r3, r3, #22
 80009a6:	8819      	ldrh	r1, [r3, #0]
 80009a8:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80009ac:	f103 0316 	add.w	r3, r3, #22
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	f107 0218 	add.w	r2, r7, #24
 80009b6:	4413      	add	r3, r2
 80009b8:	f813 3c04 	ldrb.w	r3, [r3, #-4]
 80009bc:	461a      	mov	r2, r3
 80009be:	481e      	ldr	r0, [pc, #120]	@ (8000a38 <test_parse_packet+0x148>)
 80009c0:	f7ff feee 	bl	80007a0 <log_debug>
        for (uint16_t i = 0; i < 16 && i < parsedPacket.inputSize; ++i)
 80009c4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80009c8:	f103 0316 	add.w	r3, r3, #22
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	3301      	adds	r3, #1
 80009d0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80009d4:	f102 0216 	add.w	r2, r2, #22
 80009d8:	8013      	strh	r3, [r2, #0]
 80009da:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80009de:	f103 0316 	add.w	r3, r3, #22
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d814      	bhi.n	8000a12 <test_parse_packet+0x122>
 80009e8:	f107 0318 	add.w	r3, r7, #24
 80009ec:	f833 3c06 	ldrh.w	r3, [r3, #-6]
 80009f0:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80009f4:	f102 0216 	add.w	r2, r2, #22
 80009f8:	8812      	ldrh	r2, [r2, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3cf      	bcc.n	800099e <test_parse_packet+0xae>
    }
    else
    {
        log_error("Parser failed with error code: %d", status);
    }
}
 80009fe:	e008      	b.n	8000a12 <test_parse_packet+0x122>
        log_error("Parser failed with error code: %d", status);
 8000a00:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000a04:	f103 0315 	add.w	r3, r3, #21
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480b      	ldr	r0, [pc, #44]	@ (8000a3c <test_parse_packet+0x14c>)
 8000a0e:	f7ff fefb 	bl	8000808 <log_error>
}
 8000a12:	bf00      	nop
 8000a14:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	08011700 	.word	0x08011700
 8000a24:	08011720 	.word	0x08011720
 8000a28:	08011738 	.word	0x08011738
 8000a2c:	08011750 	.word	0x08011750
 8000a30:	08011768 	.word	0x08011768
 8000a34:	08011784 	.word	0x08011784
 8000a38:	080117a0 	.word	0x080117a0
 8000a3c:	080117b8 	.word	0x080117b8

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0b4      	sub	sp, #208	@ 0xd0
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a46:	f001 fcc1 	bl	80023cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a4a:	f000 f8cd 	bl	8000be8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4e:	f000 fbcf 	bl	80011f0 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000a52:	f000 fb6b 	bl	800112c <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000a56:	f000 fa85 	bl	8000f64 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000a5a:	f000 f955 	bl	8000d08 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000a5e:	f000 fa2b 	bl	8000eb8 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000a62:	f000 fb17 	bl	8001094 <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000a66:	f000 f9a5 	bl	8000db4 <MX_RTC_Init>
  MX_RNG_Init();
 8000a6a:	f000 f98d 	bl	8000d88 <MX_RNG_Init>
  MX_HASH_Init();
 8000a6e:	f000 f931 	bl	8000cd4 <MX_HASH_Init>
  MX_USART3_UART_Init();
 8000a72:	f000 fac3 	bl	8000ffc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 8000a76:	bf00      	nop
 8000a78:	4b54      	ldr	r3, [pc, #336]	@ (8000bcc <main+0x18c>)
 8000a7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0fa      	beq.n	8000a78 <main+0x38>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000a82:	2000      	movs	r0, #0
 8000a84:	f001 fa88 	bl	8001f98 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000a88:	2001      	movs	r0, #1
 8000a8a:	f001 fa85 	bl	8001f98 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f001 fa82 	bl	8001f98 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000a94:	2101      	movs	r1, #1
 8000a96:	2000      	movs	r0, #0
 8000a98:	f001 fb1e 	bl	80020d8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8000bd0 <main+0x190>)
 8000a9e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000aa4:	4b4a      	ldr	r3, [pc, #296]	@ (8000bd0 <main+0x190>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000aaa:	4b49      	ldr	r3, [pc, #292]	@ (8000bd0 <main+0x190>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000ab0:	4b47      	ldr	r3, [pc, #284]	@ (8000bd0 <main+0x190>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000ab6:	4b46      	ldr	r3, [pc, #280]	@ (8000bd0 <main+0x190>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000abc:	4944      	ldr	r1, [pc, #272]	@ (8000bd0 <main+0x190>)
 8000abe:	2000      	movs	r0, #0
 8000ac0:	f001 fba4 	bl	800220c <BSP_COM_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <main+0x8e>
  {
    Error_Handler();
 8000aca:	f000 fc8d 	bl	80013e8 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  log_init(LOG_LEVEL_DEBUG);
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f7ff fe0a 	bl	80006e8 <log_init>
  log_info("Turning LED ON.");
 8000ad4:	483f      	ldr	r0, [pc, #252]	@ (8000bd4 <main+0x194>)
 8000ad6:	f7ff fe7d 	bl	80007d4 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f001 fad2 	bl	8002084 <BSP_LED_Toggle>
 8000ae0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ae4:	f001 fd30 	bl	8002548 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f001 facb 	bl	8002084 <BSP_LED_Toggle>
 8000aee:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000af2:	f001 fd29 	bl	8002548 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f001 fac4 	bl	8002084 <BSP_LED_Toggle>
 8000afc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b00:	f001 fd22 	bl	8002548 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000b04:	4834      	ldr	r0, [pc, #208]	@ (8000bd8 <main+0x198>)
 8000b06:	f7ff fe65 	bl	80007d4 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b0a:	2000      	movs	r0, #0
 8000b0c:	f001 faba 	bl	8002084 <BSP_LED_Toggle>
 8000b10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b14:	f001 fd18 	bl	8002548 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b18:	2002      	movs	r0, #2
 8000b1a:	f001 fab3 	bl	8002084 <BSP_LED_Toggle>
 8000b1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b22:	f001 fd11 	bl	8002548 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b26:	2001      	movs	r0, #1
 8000b28:	f001 faac 	bl	8002084 <BSP_LED_Toggle>
 8000b2c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b30:	f001 fd0a 	bl	8002548 <HAL_Delay>
  log_info("Turning LED ON.");
 8000b34:	4827      	ldr	r0, [pc, #156]	@ (8000bd4 <main+0x194>)
 8000b36:	f7ff fe4d 	bl	80007d4 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f001 faa2 	bl	8002084 <BSP_LED_Toggle>
 8000b40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b44:	f001 fd00 	bl	8002548 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f001 fa9b 	bl	8002084 <BSP_LED_Toggle>
 8000b4e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b52:	f001 fcf9 	bl	8002548 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f001 fa94 	bl	8002084 <BSP_LED_Toggle>
 8000b5c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b60:	f001 fcf2 	bl	8002548 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000b64:	481c      	ldr	r0, [pc, #112]	@ (8000bd8 <main+0x198>)
 8000b66:	f7ff fe35 	bl	80007d4 <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f001 fa8a 	bl	8002084 <BSP_LED_Toggle>
 8000b70:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b74:	f001 fce8 	bl	8002548 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b78:	2002      	movs	r0, #2
 8000b7a:	f001 fa83 	bl	8002084 <BSP_LED_Toggle>
 8000b7e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b82:	f001 fce1 	bl	8002548 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f001 fa7c 	bl	8002084 <BSP_LED_Toggle>
 8000b8c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b90:	f001 fcda 	bl	8002548 <HAL_Delay>

  uint8_t test_packet[TEST_PACKET_SIZE];
  uint16_t test_length = 0;
 8000b94:	2300      	movs	r3, #0
 8000b96:	80fb      	strh	r3, [r7, #6]
  log_info("Filling Test Packet");
 8000b98:	4810      	ldr	r0, [pc, #64]	@ (8000bdc <main+0x19c>)
 8000b9a:	f7ff fe1b 	bl	80007d4 <log_info>
  fill_test_packet(test_packet, &test_length);
 8000b9e:	1dba      	adds	r2, r7, #6
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	4611      	mov	r1, r2
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff fe48 	bl	800083c <fill_test_packet>
  log_info("Parsing Test Packet");
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <main+0x1a0>)
 8000bae:	f7ff fe11 	bl	80007d4 <log_info>
  test_parse_packet(test_packet, test_length);
 8000bb2:	88fa      	ldrh	r2, [r7, #6]
 8000bb4:	f107 0308 	add.w	r3, r7, #8
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fe98 	bl	80008f0 <test_parse_packet>
  log_info("Logic Completed");
 8000bc0:	4808      	ldr	r0, [pc, #32]	@ (8000be4 <main+0x1a4>)
 8000bc2:	f7ff fe07 	bl	80007d4 <log_info>

  while (1)
 8000bc6:	bf00      	nop
 8000bc8:	e7fd      	b.n	8000bc6 <main+0x186>
 8000bca:	bf00      	nop
 8000bcc:	200007b4 	.word	0x200007b4
 8000bd0:	2000019c 	.word	0x2000019c
 8000bd4:	080117dc 	.word	0x080117dc
 8000bd8:	080117ec 	.word	0x080117ec
 8000bdc:	08011800 	.word	0x08011800
 8000be0:	08011814 	.word	0x08011814
 8000be4:	08011828 	.word	0x08011828

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b09c      	sub	sp, #112	@ 0x70
 8000bec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	2250      	movs	r2, #80	@ 0x50
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f00f fd6c 	bl	80106d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]
 8000c0a:	611a      	str	r2, [r3, #16]
 8000c0c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000ccc <SystemClock_Config+0xe4>)
 8000c10:	691b      	ldr	r3, [r3, #16]
 8000c12:	4a2e      	ldr	r2, [pc, #184]	@ (8000ccc <SystemClock_Config+0xe4>)
 8000c14:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000c18:	6113      	str	r3, [r2, #16]
 8000c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ccc <SystemClock_Config+0xe4>)
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c26:	bf00      	nop
 8000c28:	4b28      	ldr	r3, [pc, #160]	@ (8000ccc <SystemClock_Config+0xe4>)
 8000c2a:	695b      	ldr	r3, [r3, #20]
 8000c2c:	f003 0308 	and.w	r3, r3, #8
 8000c30:	2b08      	cmp	r3, #8
 8000c32:	d1f9      	bne.n	8000c28 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000c34:	2329      	movs	r3, #41	@ 0x29
 8000c36:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c38:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c3e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000c42:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c48:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c52:	2304      	movs	r3, #4
 8000c54:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000c56:	23fa      	movs	r3, #250	@ 0xfa
 8000c58:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c62:	2302      	movs	r3, #2
 8000c64:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000c66:	2304      	movs	r3, #4
 8000c68:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c72:	f107 0320 	add.w	r3, r7, #32
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 fe94 	bl	80049a4 <HAL_RCC_OscConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c82:	f000 fbb1 	bl	80013e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c86:	231f      	movs	r3, #31
 8000c88:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c9e:	f107 0308 	add.w	r3, r7, #8
 8000ca2:	2105      	movs	r1, #5
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 fab5 	bl	8005214 <HAL_RCC_ClockConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000cb0:	f000 fb9a 	bl	80013e8 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000cb4:	4b06      	ldr	r3, [pc, #24]	@ (8000cd0 <SystemClock_Config+0xe8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000cbc:	4a04      	ldr	r2, [pc, #16]	@ (8000cd0 <SystemClock_Config+0xe8>)
 8000cbe:	f043 0320 	orr.w	r3, r3, #32
 8000cc2:	6013      	str	r3, [r2, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	3770      	adds	r7, #112	@ 0x70
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	44020800 	.word	0x44020800
 8000cd0:	40022000 	.word	0x40022000

08000cd4 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	@ (8000d00 <MX_HASH_Init+0x2c>)
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <MX_HASH_Init+0x30>)
 8000cdc:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 8000cde:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <MX_HASH_Init+0x2c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <MX_HASH_Init+0x2c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	@ (8000d00 <MX_HASH_Init+0x2c>)
 8000cec:	f001 ffec 	bl	8002cc8 <HAL_HASH_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_HASH_Init+0x26>
  {
    Error_Handler();
 8000cf6:	f000 fb77 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	200001ac 	.word	0x200001ac
 8000d04:	420c0400 	.word	0x420c0400

08000d08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000d7c <MX_I2C1_Init+0x74>)
 8000d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000d80 <MX_I2C1_Init+0x78>)
 8000d10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_I2C1_Init+0x74>)
 8000d14:	4a1b      	ldr	r2, [pc, #108]	@ (8000d84 <MX_I2C1_Init+0x7c>)
 8000d16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d18:	4b18      	ldr	r3, [pc, #96]	@ (8000d7c <MX_I2C1_Init+0x74>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <MX_I2C1_Init+0x74>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <MX_I2C1_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2a:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <MX_I2C1_Init+0x74>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d30:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <MX_I2C1_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d36:	4b11      	ldr	r3, [pc, #68]	@ (8000d7c <MX_I2C1_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <MX_I2C1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d42:	480e      	ldr	r0, [pc, #56]	@ (8000d7c <MX_I2C1_Init+0x74>)
 8000d44:	f001 fff8 	bl	8002d38 <HAL_I2C_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d4e:	f000 fb4b 	bl	80013e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d52:	2100      	movs	r1, #0
 8000d54:	4809      	ldr	r0, [pc, #36]	@ (8000d7c <MX_I2C1_Init+0x74>)
 8000d56:	f002 f88a 	bl	8002e6e <HAL_I2CEx_ConfigAnalogFilter>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d60:	f000 fb42 	bl	80013e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d64:	2100      	movs	r1, #0
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <MX_I2C1_Init+0x74>)
 8000d68:	f002 f8cc 	bl	8002f04 <HAL_I2CEx_ConfigDigitalFilter>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d72:	f000 fb39 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	200001ec 	.word	0x200001ec
 8000d80:	40005400 	.word	0x40005400
 8000d84:	10c043e5 	.word	0x10c043e5

08000d88 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <MX_RNG_Init+0x24>)
 8000d8e:	4a08      	ldr	r2, [pc, #32]	@ (8000db0 <MX_RNG_Init+0x28>)
 8000d90:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_RNG_Init+0x24>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	@ (8000dac <MX_RNG_Init+0x24>)
 8000d9a:	f009 fdd5 	bl	800a948 <HAL_RNG_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000da4:	f000 fb20 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000240 	.word	0x20000240
 8000db0:	420c0800 	.word	0x420c0800

08000db4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	@ 0x38
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
 8000dca:	615a      	str	r2, [r3, #20]
 8000dcc:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 8000dce:	f107 0308 	add.w	r3, r7, #8
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000de2:	4b33      	ldr	r3, [pc, #204]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000de4:	4a33      	ldr	r2, [pc, #204]	@ (8000eb4 <MX_RTC_Init+0x100>)
 8000de6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000de8:	4b31      	ldr	r3, [pc, #196]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000dee:	4b30      	ldr	r3, [pc, #192]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000df0:	227f      	movs	r2, #127	@ 0x7f
 8000df2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000df4:	4b2e      	ldr	r3, [pc, #184]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000df6:	22ff      	movs	r2, #255	@ 0xff
 8000df8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000e00:	4b2b      	ldr	r3, [pc, #172]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e0c:	4b28      	ldr	r3, [pc, #160]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000e0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e12:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000e14:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000e1a:	4b25      	ldr	r3, [pc, #148]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e20:	4823      	ldr	r0, [pc, #140]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000e22:	f009 fe2f 	bl	800aa84 <HAL_RTC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000e2c:	f000 fadc 	bl	80013e8 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4619      	mov	r1, r3
 8000e46:	481a      	ldr	r0, [pc, #104]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000e48:	f00a f882 	bl	800af50 <HAL_RTCEx_PrivilegeModeSet>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000e52:	f000 fac9 	bl	80013e8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4619      	mov	r1, r3
 8000e72:	480f      	ldr	r0, [pc, #60]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000e74:	f009 fe88 	bl	800ab88 <HAL_RTC_SetTime>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000e7e:	f000 fab3 	bl	80013e8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000e82:	2301      	movs	r3, #1
 8000e84:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000e86:	2301      	movs	r3, #1
 8000e88:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	2201      	movs	r2, #1
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_RTC_Init+0xfc>)
 8000e9a:	f009 ff07 	bl	800acac <HAL_RTC_SetDate>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000ea4:	f000 faa0 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3738      	adds	r7, #56	@ 0x38
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000254 	.word	0x20000254
 8000eb4:	44007800 	.word	0x44007800

08000eb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ebc:	4b27      	ldr	r3, [pc, #156]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ebe:	4a28      	ldr	r2, [pc, #160]	@ (8000f60 <MX_SPI1_Init+0xa8>)
 8000ec0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ec4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ec8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eca:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ed0:	4b22      	ldr	r3, [pc, #136]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ed2:	2207      	movs	r2, #7
 8000ed4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ed6:	4b21      	ldr	r3, [pc, #132]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000edc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ee4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ee8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000eec:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000ef0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000efe:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f06:	2207      	movs	r2, #7
 8000f08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f10:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f12:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f18:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	@ (8000f5c <MX_SPI1_Init+0xa4>)
 8000f4a:	f00a f82f 	bl	800afac <HAL_SPI_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000f54:	f000 fa48 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000284 	.word	0x20000284
 8000f60:	40013000 	.word	0x40013000

08000f64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f68:	4b22      	ldr	r3, [pc, #136]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f6a:	4a23      	ldr	r2, [pc, #140]	@ (8000ff8 <MX_USART2_UART_Init+0x94>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f94:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f9a:	4b16      	ldr	r3, [pc, #88]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fa6:	4b13      	ldr	r3, [pc, #76]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fac:	4811      	ldr	r0, [pc, #68]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000fae:	f00a f988 	bl	800b2c2 <HAL_UART_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000fb8:	f000 fa16 	bl	80013e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	480d      	ldr	r0, [pc, #52]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000fc0:	f00a feb4 	bl	800bd2c <HAL_UARTEx_SetTxFifoThreshold>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000fca:	f000 fa0d 	bl	80013e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fce:	2100      	movs	r1, #0
 8000fd0:	4808      	ldr	r0, [pc, #32]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000fd2:	f00a fee9 	bl	800bda8 <HAL_UARTEx_SetRxFifoThreshold>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000fdc:	f000 fa04 	bl	80013e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000fe0:	4804      	ldr	r0, [pc, #16]	@ (8000ff4 <MX_USART2_UART_Init+0x90>)
 8000fe2:	f00a fe6a 	bl	800bcba <HAL_UARTEx_DisableFifoMode>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000fec:	f000 f9fc 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000314 	.word	0x20000314
 8000ff8:	40004400 	.word	0x40004400

08000ffc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001000:	4b22      	ldr	r3, [pc, #136]	@ (800108c <MX_USART3_UART_Init+0x90>)
 8001002:	4a23      	ldr	r2, [pc, #140]	@ (8001090 <MX_USART3_UART_Init+0x94>)
 8001004:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001006:	4b21      	ldr	r3, [pc, #132]	@ (800108c <MX_USART3_UART_Init+0x90>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800100c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800100e:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <MX_USART3_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001014:	4b1d      	ldr	r3, [pc, #116]	@ (800108c <MX_USART3_UART_Init+0x90>)
 8001016:	2200      	movs	r2, #0
 8001018:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	@ (800108c <MX_USART3_UART_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001020:	4b1a      	ldr	r3, [pc, #104]	@ (800108c <MX_USART3_UART_Init+0x90>)
 8001022:	220c      	movs	r2, #12
 8001024:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001026:	4b19      	ldr	r3, [pc, #100]	@ (800108c <MX_USART3_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MX_USART3_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001032:	4b16      	ldr	r3, [pc, #88]	@ (800108c <MX_USART3_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001038:	4b14      	ldr	r3, [pc, #80]	@ (800108c <MX_USART3_UART_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800103e:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MX_USART3_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001044:	4811      	ldr	r0, [pc, #68]	@ (800108c <MX_USART3_UART_Init+0x90>)
 8001046:	f00a f93c 	bl	800b2c2 <HAL_UART_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001050:	f000 f9ca 	bl	80013e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001054:	2100      	movs	r1, #0
 8001056:	480d      	ldr	r0, [pc, #52]	@ (800108c <MX_USART3_UART_Init+0x90>)
 8001058:	f00a fe68 	bl	800bd2c <HAL_UARTEx_SetTxFifoThreshold>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001062:	f000 f9c1 	bl	80013e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001066:	2100      	movs	r1, #0
 8001068:	4808      	ldr	r0, [pc, #32]	@ (800108c <MX_USART3_UART_Init+0x90>)
 800106a:	f00a fe9d 	bl	800bda8 <HAL_UARTEx_SetRxFifoThreshold>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001074:	f000 f9b8 	bl	80013e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	@ (800108c <MX_USART3_UART_Init+0x90>)
 800107a:	f00a fe1e 	bl	800bcba <HAL_UARTEx_DisableFifoMode>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001084:	f000 f9b0 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200003a8 	.word	0x200003a8
 8001090:	40004800 	.word	0x40004800

08001094 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001098:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 800109a:	4a23      	ldr	r2, [pc, #140]	@ (8001128 <MX_USART6_UART_Init+0x94>)
 800109c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800109e:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b19      	ldr	r3, [pc, #100]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010dc:	4811      	ldr	r0, [pc, #68]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 80010de:	f00a f8f0 	bl	800b2c2 <HAL_UART_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80010e8:	f000 f97e 	bl	80013e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	480d      	ldr	r0, [pc, #52]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 80010f0:	f00a fe1c 	bl	800bd2c <HAL_UARTEx_SetTxFifoThreshold>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80010fa:	f000 f975 	bl	80013e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4808      	ldr	r0, [pc, #32]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 8001102:	f00a fe51 	bl	800bda8 <HAL_UARTEx_SetRxFifoThreshold>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800110c:	f000 f96c 	bl	80013e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	@ (8001124 <MX_USART6_UART_Init+0x90>)
 8001112:	f00a fdd2 	bl	800bcba <HAL_UARTEx_DisableFifoMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800111c:	f000 f964 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	2000043c 	.word	0x2000043c
 8001128:	40006400 	.word	0x40006400

0800112c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8001130:	4b29      	ldr	r3, [pc, #164]	@ (80011d8 <MX_USB_PCD_Init+0xac>)
 8001132:	4a2a      	ldr	r2, [pc, #168]	@ (80011dc <MX_USB_PCD_Init+0xb0>)
 8001134:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001138:	4b27      	ldr	r3, [pc, #156]	@ (80011d8 <MX_USB_PCD_Init+0xac>)
 800113a:	4a29      	ldr	r2, [pc, #164]	@ (80011e0 <MX_USB_PCD_Init+0xb4>)
 800113c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800113e:	4b26      	ldr	r3, [pc, #152]	@ (80011d8 <MX_USB_PCD_Init+0xac>)
 8001140:	2208      	movs	r2, #8
 8001142:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8001144:	4b24      	ldr	r3, [pc, #144]	@ (80011d8 <MX_USB_PCD_Init+0xac>)
 8001146:	2202      	movs	r2, #2
 8001148:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800114a:	4b23      	ldr	r3, [pc, #140]	@ (80011d8 <MX_USB_PCD_Init+0xac>)
 800114c:	2202      	movs	r2, #2
 800114e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001150:	4b21      	ldr	r3, [pc, #132]	@ (80011d8 <MX_USB_PCD_Init+0xac>)
 8001152:	2200      	movs	r2, #0
 8001154:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001156:	4b20      	ldr	r3, [pc, #128]	@ (80011d8 <MX_USB_PCD_Init+0xac>)
 8001158:	2200      	movs	r2, #0
 800115a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800115c:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <MX_USB_PCD_Init+0xac>)
 800115e:	2200      	movs	r2, #0
 8001160:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001162:	4b1d      	ldr	r3, [pc, #116]	@ (80011d8 <MX_USB_PCD_Init+0xac>)
 8001164:	2200      	movs	r2, #0
 8001166:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001168:	4b1b      	ldr	r3, [pc, #108]	@ (80011d8 <MX_USB_PCD_Init+0xac>)
 800116a:	2200      	movs	r2, #0
 800116c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 800116e:	4b1a      	ldr	r3, [pc, #104]	@ (80011d8 <MX_USB_PCD_Init+0xac>)
 8001170:	2200      	movs	r2, #0
 8001172:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001174:	4b18      	ldr	r3, [pc, #96]	@ (80011d8 <MX_USB_PCD_Init+0xac>)
 8001176:	2200      	movs	r2, #0
 8001178:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800117a:	4817      	ldr	r0, [pc, #92]	@ (80011d8 <MX_USB_PCD_Init+0xac>)
 800117c:	f001 ff71 	bl	8003062 <HAL_PCD_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8001186:	f000 f92f 	bl	80013e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 800118a:	2200      	movs	r2, #0
 800118c:	4915      	ldr	r1, [pc, #84]	@ (80011e4 <MX_USB_PCD_Init+0xb8>)
 800118e:	4813      	ldr	r0, [pc, #76]	@ (80011dc <MX_USB_PCD_Init+0xb0>)
 8001190:	f00d fe12 	bl	800edb8 <USBD_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USB_PCD_Init+0x72>
        Error_Handler();
 800119a:	f000 f925 	bl	80013e8 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800119e:	4912      	ldr	r1, [pc, #72]	@ (80011e8 <MX_USB_PCD_Init+0xbc>)
 80011a0:	480e      	ldr	r0, [pc, #56]	@ (80011dc <MX_USB_PCD_Init+0xb0>)
 80011a2:	f00d fe39 	bl	800ee18 <USBD_RegisterClass>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 80011ac:	f000 f91c 	bl	80013e8 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 80011b0:	490e      	ldr	r1, [pc, #56]	@ (80011ec <MX_USB_PCD_Init+0xc0>)
 80011b2:	480a      	ldr	r0, [pc, #40]	@ (80011dc <MX_USB_PCD_Init+0xb0>)
 80011b4:	f00d fa58 	bl	800e668 <USBD_CDC_RegisterInterface>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 80011be:	f000 f913 	bl	80013e8 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80011c2:	4806      	ldr	r0, [pc, #24]	@ (80011dc <MX_USB_PCD_Init+0xb0>)
 80011c4:	f00d fe5e 	bl	800ee84 <USBD_Start>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 80011ce:	f000 f90b 	bl	80013e8 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200004d0 	.word	0x200004d0
 80011dc:	200007b4 	.word	0x200007b4
 80011e0:	40016000 	.word	0x40016000
 80011e4:	200000d4 	.word	0x200000d4
 80011e8:	20000038 	.word	0x20000038
 80011ec:	200000b8 	.word	0x200000b8

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08c      	sub	sp, #48	@ 0x30
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001206:	4b72      	ldr	r3, [pc, #456]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 8001208:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800120c:	4a70      	ldr	r2, [pc, #448]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001216:	4b6e      	ldr	r3, [pc, #440]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 8001218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	61bb      	str	r3, [r7, #24]
 8001222:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001224:	4b6a      	ldr	r3, [pc, #424]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 8001226:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800122a:	4a69      	ldr	r2, [pc, #420]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 800122c:	f043 0304 	orr.w	r3, r3, #4
 8001230:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001234:	4b66      	ldr	r3, [pc, #408]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 8001236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	4b63      	ldr	r3, [pc, #396]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 8001244:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001248:	4a61      	ldr	r2, [pc, #388]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 800124a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800124e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001252:	4b5f      	ldr	r3, [pc, #380]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 8001254:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001258:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b5b      	ldr	r3, [pc, #364]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 8001262:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001266:	4a5a      	ldr	r2, [pc, #360]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001270:	4b57      	ldr	r3, [pc, #348]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 8001272:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	4b54      	ldr	r3, [pc, #336]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 8001280:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001284:	4a52      	ldr	r2, [pc, #328]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 8001286:	f043 0302 	orr.w	r3, r3, #2
 800128a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800128e:	4b50      	ldr	r3, [pc, #320]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 8001290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800129c:	4b4c      	ldr	r3, [pc, #304]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 800129e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012a2:	4a4b      	ldr	r2, [pc, #300]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 80012a4:	f043 0308 	orr.w	r3, r3, #8
 80012a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ac:	4b48      	ldr	r3, [pc, #288]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 80012ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ba:	4b45      	ldr	r3, [pc, #276]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 80012bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012c0:	4a43      	ldr	r2, [pc, #268]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 80012c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012ca:	4b41      	ldr	r3, [pc, #260]	@ (80013d0 <MX_GPIO_Init+0x1e0>)
 80012cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012d8:	2332      	movs	r3, #50	@ 0x32
 80012da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012e4:	2302      	movs	r3, #2
 80012e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e8:	230b      	movs	r3, #11
 80012ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4838      	ldr	r0, [pc, #224]	@ (80013d4 <MX_GPIO_Init+0x1e4>)
 80012f4:	f001 fb64 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012f8:	2384      	movs	r3, #132	@ 0x84
 80012fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fc:	2302      	movs	r3, #2
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001304:	2302      	movs	r3, #2
 8001306:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001308:	230b      	movs	r3, #11
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 031c 	add.w	r3, r7, #28
 8001310:	4619      	mov	r1, r3
 8001312:	4831      	ldr	r0, [pc, #196]	@ (80013d8 <MX_GPIO_Init+0x1e8>)
 8001314:	f001 fb54 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001318:	2310      	movs	r3, #16
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131c:	2303      	movs	r3, #3
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	482b      	ldr	r0, [pc, #172]	@ (80013d8 <MX_GPIO_Init+0x1e8>)
 800132c:	f001 fb48 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8001330:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001336:	2303      	movs	r3, #3
 8001338:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4619      	mov	r1, r3
 8001344:	4825      	ldr	r0, [pc, #148]	@ (80013dc <MX_GPIO_Init+0x1ec>)
 8001346:	f001 fb3b 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800134a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800134e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001358:	2302      	movs	r3, #2
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800135c:	230b      	movs	r3, #11
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	481d      	ldr	r0, [pc, #116]	@ (80013dc <MX_GPIO_Init+0x1ec>)
 8001368:	f001 fb2a 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001370:	4b1b      	ldr	r3, [pc, #108]	@ (80013e0 <MX_GPIO_Init+0x1f0>)
 8001372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	4819      	ldr	r0, [pc, #100]	@ (80013e4 <MX_GPIO_Init+0x1f4>)
 8001380:	f001 fb1e 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8001384:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001392:	2302      	movs	r3, #2
 8001394:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001396:	230b      	movs	r3, #11
 8001398:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	4810      	ldr	r0, [pc, #64]	@ (80013e4 <MX_GPIO_Init+0x1f4>)
 80013a2:	f001 fb0d 	bl	80029c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 80013a6:	23c0      	movs	r3, #192	@ 0xc0
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80013b6:	2308      	movs	r3, #8
 80013b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	4619      	mov	r1, r3
 80013c0:	4806      	ldr	r0, [pc, #24]	@ (80013dc <MX_GPIO_Init+0x1ec>)
 80013c2:	f001 fafd 	bl	80029c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c6:	bf00      	nop
 80013c8:	3730      	adds	r7, #48	@ 0x30
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	44020c00 	.word	0x44020c00
 80013d4:	42020800 	.word	0x42020800
 80013d8:	42020000 	.word	0x42020000
 80013dc:	42020400 	.word	0x42020400
 80013e0:	10110000 	.word	0x10110000
 80013e4:	42021800 	.word	0x42021800

080013e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013ec:	b672      	cpsid	i
}
 80013ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <Error_Handler+0x8>

080013f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
	...

08001404 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 800140c:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HAL_HASH_MspInit+0x34>)
 800140e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001412:	4a09      	ldr	r2, [pc, #36]	@ (8001438 <HAL_HASH_MspInit+0x34>)
 8001414:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001418:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_HASH_MspInit+0x34>)
 800141e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	44020c00 	.word	0x44020c00

0800143c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b0cc      	sub	sp, #304	@ 0x130
 8001440:	af00      	add	r7, sp, #0
 8001442:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001446:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800144a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800145c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001460:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001464:	4618      	mov	r0, r3
 8001466:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800146a:	461a      	mov	r2, r3
 800146c:	2100      	movs	r1, #0
 800146e:	f00f f931 	bl	80106d4 <memset>
  if(hi2c->Instance==I2C1)
 8001472:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001476:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a33      	ldr	r2, [pc, #204]	@ (800154c <HAL_I2C_MspInit+0x110>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d15e      	bne.n	8001542 <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001484:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001488:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800148c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001498:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800149c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80014a0:	2200      	movs	r2, #0
 80014a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a6:	f107 0310 	add.w	r3, r7, #16
 80014aa:	4618      	mov	r0, r3
 80014ac:	f004 f9f4 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 80014b6:	f7ff ff97 	bl	80013e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ba:	4b25      	ldr	r3, [pc, #148]	@ (8001550 <HAL_I2C_MspInit+0x114>)
 80014bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c0:	4a23      	ldr	r2, [pc, #140]	@ (8001550 <HAL_I2C_MspInit+0x114>)
 80014c2:	f043 0302 	orr.w	r3, r3, #2
 80014c6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014ca:	4b21      	ldr	r3, [pc, #132]	@ (8001550 <HAL_I2C_MspInit+0x114>)
 80014cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014d0:	f003 0202 	and.w	r2, r3, #2
 80014d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014d8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80014e2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80014e6:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014f0:	2312      	movs	r3, #18
 80014f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001502:	2304      	movs	r3, #4
 8001504:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 800150c:	4619      	mov	r1, r3
 800150e:	4811      	ldr	r0, [pc, #68]	@ (8001554 <HAL_I2C_MspInit+0x118>)
 8001510:	f001 fa56 	bl	80029c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001514:	4b0e      	ldr	r3, [pc, #56]	@ (8001550 <HAL_I2C_MspInit+0x114>)
 8001516:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800151a:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <HAL_I2C_MspInit+0x114>)
 800151c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001520:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001524:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <HAL_I2C_MspInit+0x114>)
 8001526:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800152a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800152e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001532:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800153c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001540:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001542:	bf00      	nop
 8001544:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40005400 	.word	0x40005400
 8001550:	44020c00 	.word	0x44020c00
 8001554:	42020400 	.word	0x42020400

08001558 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0c6      	sub	sp, #280	@ 0x118
 800155c:	af00      	add	r7, sp, #0
 800155e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001562:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001566:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001568:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800156c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001570:	4618      	mov	r0, r3
 8001572:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001576:	461a      	mov	r2, r3
 8001578:	2100      	movs	r1, #0
 800157a:	f00f f8ab 	bl	80106d4 <memset>
  if(hrng->Instance==RNG)
 800157e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001582:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1d      	ldr	r2, [pc, #116]	@ (8001600 <HAL_RNG_MspInit+0xa8>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d131      	bne.n	80015f4 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001590:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001594:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001598:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80015a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80015ac:	2200      	movs	r2, #0
 80015ae:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b2:	f107 0310 	add.w	r3, r7, #16
 80015b6:	4618      	mov	r0, r3
 80015b8:	f004 f96e 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 80015c2:	f7ff ff11 	bl	80013e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80015c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001604 <HAL_RNG_MspInit+0xac>)
 80015c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <HAL_RNG_MspInit+0xac>)
 80015ce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80015d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_RNG_MspInit+0xac>)
 80015d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80015dc:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 80015e0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015e4:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015ee:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015f2:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80015f4:	bf00      	nop
 80015f6:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	420c0800 	.word	0x420c0800
 8001604:	44020c00 	.word	0x44020c00

08001608 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0c6      	sub	sp, #280	@ 0x118
 800160c:	af00      	add	r7, sp, #0
 800160e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001612:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001616:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001618:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800161c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001620:	4618      	mov	r0, r3
 8001622:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001626:	461a      	mov	r2, r3
 8001628:	2100      	movs	r1, #0
 800162a:	f00f f853 	bl	80106d4 <memset>
  if(hrtc->Instance==RTC)
 800162e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001632:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a21      	ldr	r2, [pc, #132]	@ (80016c0 <HAL_RTC_MspInit+0xb8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d13a      	bne.n	80016b6 <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001640:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001644:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001648:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800164c:	f04f 0300 	mov.w	r3, #0
 8001650:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001654:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800165c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001660:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	4618      	mov	r0, r3
 800166a:	f004 f915 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8001674:	f7ff feb8 	bl	80013e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001678:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <HAL_RTC_MspInit+0xbc>)
 800167a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800167e:	4a11      	ldr	r2, [pc, #68]	@ (80016c4 <HAL_RTC_MspInit+0xbc>)
 8001680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001684:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001688:	4b0e      	ldr	r3, [pc, #56]	@ (80016c4 <HAL_RTC_MspInit+0xbc>)
 800168a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800168e:	4a0d      	ldr	r2, [pc, #52]	@ (80016c4 <HAL_RTC_MspInit+0xbc>)
 8001690:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001694:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <HAL_RTC_MspInit+0xbc>)
 800169a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800169e:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80016a2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80016a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80016b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016b4:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80016b6:	bf00      	nop
 80016b8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	44007800 	.word	0x44007800
 80016c4:	44020c00 	.word	0x44020c00

080016c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b0ce      	sub	sp, #312	@ 0x138
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016d2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80016d6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80016ec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80016f0:	4618      	mov	r0, r3
 80016f2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80016f6:	461a      	mov	r2, r3
 80016f8:	2100      	movs	r1, #0
 80016fa:	f00e ffeb 	bl	80106d4 <memset>
  if(hspi->Instance==SPI1)
 80016fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001702:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a49      	ldr	r2, [pc, #292]	@ (8001830 <HAL_SPI_MspInit+0x168>)
 800170c:	4293      	cmp	r3, r2
 800170e:	f040 808a 	bne.w	8001826 <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001712:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001716:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800171a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001726:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800172a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800172e:	2200      	movs	r2, #0
 8001730:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001734:	f107 0318 	add.w	r3, r7, #24
 8001738:	4618      	mov	r0, r3
 800173a:	f004 f8ad 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8001744:	f7ff fe50 	bl	80013e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001748:	4b3a      	ldr	r3, [pc, #232]	@ (8001834 <HAL_SPI_MspInit+0x16c>)
 800174a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800174e:	4a39      	ldr	r2, [pc, #228]	@ (8001834 <HAL_SPI_MspInit+0x16c>)
 8001750:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001754:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001758:	4b36      	ldr	r3, [pc, #216]	@ (8001834 <HAL_SPI_MspInit+0x16c>)
 800175a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800175e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001762:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001766:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001770:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001774:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	4b2f      	ldr	r3, [pc, #188]	@ (8001834 <HAL_SPI_MspInit+0x16c>)
 8001778:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800177c:	4a2d      	ldr	r2, [pc, #180]	@ (8001834 <HAL_SPI_MspInit+0x16c>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001786:	4b2b      	ldr	r3, [pc, #172]	@ (8001834 <HAL_SPI_MspInit+0x16c>)
 8001788:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178c:	f003 0201 	and.w	r2, r3, #1
 8001790:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001794:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800179e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80017a2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017a4:	4b23      	ldr	r3, [pc, #140]	@ (8001834 <HAL_SPI_MspInit+0x16c>)
 80017a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017aa:	4a22      	ldr	r2, [pc, #136]	@ (8001834 <HAL_SPI_MspInit+0x16c>)
 80017ac:	f043 0308 	orr.w	r3, r3, #8
 80017b0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001834 <HAL_SPI_MspInit+0x16c>)
 80017b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017ba:	f003 0208 	and.w	r2, r3, #8
 80017be:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80017cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80017d0:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80017d2:	2360      	movs	r3, #96	@ 0x60
 80017d4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	2300      	movs	r3, #0
 80017e6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017ea:	2305      	movs	r3, #5
 80017ec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f0:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80017f4:	4619      	mov	r1, r3
 80017f6:	4810      	ldr	r0, [pc, #64]	@ (8001838 <HAL_SPI_MspInit+0x170>)
 80017f8:	f001 f8e2 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017fc:	2380      	movs	r3, #128	@ 0x80
 80017fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001802:	2302      	movs	r3, #2
 8001804:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001814:	2305      	movs	r3, #5
 8001816:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800181a:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800181e:	4619      	mov	r1, r3
 8001820:	4806      	ldr	r0, [pc, #24]	@ (800183c <HAL_SPI_MspInit+0x174>)
 8001822:	f001 f8cd 	bl	80029c0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001826:	bf00      	nop
 8001828:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40013000 	.word	0x40013000
 8001834:	44020c00 	.word	0x44020c00
 8001838:	42020000 	.word	0x42020000
 800183c:	42020c00 	.word	0x42020c00

08001840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b0d2      	sub	sp, #328	@ 0x148
 8001844:	af00      	add	r7, sp, #0
 8001846:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800184a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800184e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001860:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001864:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001868:	4618      	mov	r0, r3
 800186a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800186e:	461a      	mov	r2, r3
 8001870:	2100      	movs	r1, #0
 8001872:	f00e ff2f 	bl	80106d4 <memset>
  if(huart->Instance==USART2)
 8001876:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800187a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4ac7      	ldr	r2, [pc, #796]	@ (8001ba0 <HAL_UART_MspInit+0x360>)
 8001884:	4293      	cmp	r3, r2
 8001886:	f040 808a 	bne.w	800199e <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800188a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800188e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001892:	f04f 0202 	mov.w	r2, #2
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800189e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80018a6:	2200      	movs	r2, #0
 80018a8:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 fff2 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 80018ba:	f7ff fd95 	bl	80013e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018be:	4bb9      	ldr	r3, [pc, #740]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 80018c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018c4:	4ab7      	ldr	r2, [pc, #732]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 80018c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ca:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80018ce:	4bb5      	ldr	r3, [pc, #724]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 80018d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80018d4:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 80018d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80018e6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80018ea:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4bad      	ldr	r3, [pc, #692]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 80018ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f2:	4aac      	ldr	r2, [pc, #688]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018fc:	4ba9      	ldr	r3, [pc, #676]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 80018fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001902:	f003 0201 	and.w	r2, r3, #1
 8001906:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800190a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001914:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001918:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800191a:	4ba2      	ldr	r3, [pc, #648]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 800191c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001920:	4aa0      	ldr	r2, [pc, #640]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 8001922:	f043 0308 	orr.w	r3, r3, #8
 8001926:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800192a:	4b9e      	ldr	r3, [pc, #632]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 800192c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001930:	f003 0208 	and.w	r2, r3, #8
 8001934:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001938:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001942:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001946:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001948:	2308      	movs	r3, #8
 800194a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001960:	2307      	movs	r3, #7
 8001962:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800196a:	4619      	mov	r1, r3
 800196c:	488e      	ldr	r0, [pc, #568]	@ (8001ba8 <HAL_UART_MspInit+0x368>)
 800196e:	f001 f827 	bl	80029c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001972:	2320      	movs	r3, #32
 8001974:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198a:	2307      	movs	r3, #7
 800198c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001990:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001994:	4619      	mov	r1, r3
 8001996:	4885      	ldr	r0, [pc, #532]	@ (8001bac <HAL_UART_MspInit+0x36c>)
 8001998:	f001 f812 	bl	80029c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800199c:	e0fb      	b.n	8001b96 <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART3)
 800199e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019a2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a81      	ldr	r2, [pc, #516]	@ (8001bb0 <HAL_UART_MspInit+0x370>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	f040 808c 	bne.w	8001aca <HAL_UART_MspInit+0x28a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019b6:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80019ba:	f04f 0204 	mov.w	r2, #4
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80019ca:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80019ce:	2200      	movs	r2, #0
 80019d0:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019d6:	4618      	mov	r0, r3
 80019d8:	f003 ff5e 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 80019e2:	f7ff fd01 	bl	80013e8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019e6:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 80019e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019ec:	4a6d      	ldr	r2, [pc, #436]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 80019ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80019f6:	4b6b      	ldr	r3, [pc, #428]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 80019f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019fc:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001a00:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a04:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a0e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a12:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a14:	4b63      	ldr	r3, [pc, #396]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 8001a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a1a:	4a62      	ldr	r2, [pc, #392]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a24:	4b5f      	ldr	r3, [pc, #380]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 8001a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a2a:	f003 0202 	and.w	r2, r3, #2
 8001a2e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a32:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a3c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a40:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a42:	4b58      	ldr	r3, [pc, #352]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 8001a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a48:	4a56      	ldr	r2, [pc, #344]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 8001a4a:	f043 0308 	orr.w	r3, r3, #8
 8001a4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a52:	4b54      	ldr	r3, [pc, #336]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 8001a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a58:	f003 0208 	and.w	r2, r3, #8
 8001a5c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a60:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001a6a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a6e:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a70:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a74:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a90:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001a94:	4619      	mov	r1, r3
 8001a96:	4847      	ldr	r0, [pc, #284]	@ (8001bb4 <HAL_UART_MspInit+0x374>)
 8001a98:	f000 ff92 	bl	80029c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a9c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aa0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001abc:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	483a      	ldr	r0, [pc, #232]	@ (8001bac <HAL_UART_MspInit+0x36c>)
 8001ac4:	f000 ff7c 	bl	80029c0 <HAL_GPIO_Init>
}
 8001ac8:	e065      	b.n	8001b96 <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART6)
 8001aca:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001ace:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a38      	ldr	r2, [pc, #224]	@ (8001bb8 <HAL_UART_MspInit+0x378>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d15c      	bne.n	8001b96 <HAL_UART_MspInit+0x356>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001adc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001ae0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001ae4:	f04f 0220 	mov.w	r2, #32
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8001af0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001af4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001af8:	2200      	movs	r2, #0
 8001afa:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001afc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 fec9 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 8001b0c:	f7ff fc6c 	bl	80013e8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b10:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 8001b12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b16:	4a23      	ldr	r2, [pc, #140]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 8001b18:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001b1c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b20:	4b20      	ldr	r3, [pc, #128]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 8001b22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b26:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8001b2a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b2e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b38:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001b3c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 8001b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b44:	4a17      	ldr	r2, [pc, #92]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <HAL_UART_MspInit+0x364>)
 8001b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b54:	f003 0204 	and.w	r2, r3, #4
 8001b58:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b5c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001b66:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b6a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b6c:	23c0      	movs	r3, #192	@ 0xc0
 8001b6e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b72:	2302      	movs	r3, #2
 8001b74:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001b84:	2307      	movs	r3, #7
 8001b86:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8a:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001b8e:	4619      	mov	r1, r3
 8001b90:	480a      	ldr	r0, [pc, #40]	@ (8001bbc <HAL_UART_MspInit+0x37c>)
 8001b92:	f000 ff15 	bl	80029c0 <HAL_GPIO_Init>
}
 8001b96:	bf00      	nop
 8001b98:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40004400 	.word	0x40004400
 8001ba4:	44020c00 	.word	0x44020c00
 8001ba8:	42020000 	.word	0x42020000
 8001bac:	42020c00 	.word	0x42020c00
 8001bb0:	40004800 	.word	0x40004800
 8001bb4:	42020400 	.word	0x42020400
 8001bb8:	40006400 	.word	0x40006400
 8001bbc:	42020800 	.word	0x42020800

08001bc0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b0c6      	sub	sp, #280	@ 0x118
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001bce:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bd0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001bde:	461a      	mov	r2, r3
 8001be0:	2100      	movs	r1, #0
 8001be2:	f00e fd77 	bl	80106d4 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8001be6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a22      	ldr	r2, [pc, #136]	@ (8001c7c <HAL_PCD_MspInit+0xbc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d13b      	bne.n	8001c70 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001bf8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bfc:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0310 	mov.w	r3, #16
 8001c08:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001c0c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c14:	2230      	movs	r2, #48	@ 0x30
 8001c16:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1a:	f107 0310 	add.w	r3, r7, #16
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 fe3a 	bl	8005898 <HAL_RCCEx_PeriphCLKConfig>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8001c2a:	f7ff fbdd 	bl	80013e8 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8001c2e:	f002 fea9 	bl	8004984 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001c32:	4b13      	ldr	r3, [pc, #76]	@ (8001c80 <HAL_PCD_MspInit+0xc0>)
 8001c34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c38:	4a11      	ldr	r2, [pc, #68]	@ (8001c80 <HAL_PCD_MspInit+0xc0>)
 8001c3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c3e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001c42:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <HAL_PCD_MspInit+0xc0>)
 8001c44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001c48:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001c4c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c50:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c5e:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	204a      	movs	r0, #74	@ 0x4a
 8001c66:	f000 fd4b 	bl	8002700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8001c6a:	204a      	movs	r0, #74	@ 0x4a
 8001c6c:	f000 fd62 	bl	8002734 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001c70:	bf00      	nop
 8001c72:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40016000 	.word	0x40016000
 8001c80:	44020c00 	.word	0x44020c00

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c88:	bf00      	nop
 8001c8a:	e7fd      	b.n	8001c88 <NMI_Handler+0x4>

08001c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <HardFault_Handler+0x4>

08001c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <MemManage_Handler+0x4>

08001c9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <BusFault_Handler+0x4>

08001ca4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <UsageFault_Handler+0x4>

08001cac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cda:	f000 fc15 	bl	8002508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001ce6:	2000      	movs	r0, #0
 8001ce8:	f000 fa6e 	bl	80021c8 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8001cf4:	4802      	ldr	r0, [pc, #8]	@ (8001d00 <USB_DRD_FS_IRQHandler+0x10>)
 8001cf6:	f001 fad7 	bl	80032a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200004d0 	.word	0x200004d0

08001d04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	e00a      	b.n	8001d2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d16:	f3af 8000 	nop.w
 8001d1a:	4601      	mov	r1, r0
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	60ba      	str	r2, [r7, #8]
 8001d22:	b2ca      	uxtb	r2, r1
 8001d24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	dbf0      	blt.n	8001d16 <_read+0x12>
  }

  return len;
 8001d34:	687b      	ldr	r3, [r7, #4]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b086      	sub	sp, #24
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e009      	b.n	8001d64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	60ba      	str	r2, [r7, #8]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fabb 	bl	80022d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dbf1      	blt.n	8001d50 <_write+0x12>
  }
  return len;
 8001d6c:	687b      	ldr	r3, [r7, #4]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_close>:

int _close(int file)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d9e:	605a      	str	r2, [r3, #4]
  return 0;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <_isatty>:

int _isatty(int file)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001de8:	4a14      	ldr	r2, [pc, #80]	@ (8001e3c <_sbrk+0x5c>)
 8001dea:	4b15      	ldr	r3, [pc, #84]	@ (8001e40 <_sbrk+0x60>)
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001df4:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <_sbrk+0x64>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d102      	bne.n	8001e02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <_sbrk+0x64>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	@ (8001e48 <_sbrk+0x68>)
 8001e00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <_sbrk+0x64>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d207      	bcs.n	8001e20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e10:	f00e fcae 	bl	8010770 <__errno>
 8001e14:	4603      	mov	r3, r0
 8001e16:	220c      	movs	r2, #12
 8001e18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1e:	e009      	b.n	8001e34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e20:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e26:	4b07      	ldr	r3, [pc, #28]	@ (8001e44 <_sbrk+0x64>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a05      	ldr	r2, [pc, #20]	@ (8001e44 <_sbrk+0x64>)
 8001e30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e32:	68fb      	ldr	r3, [r7, #12]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	200a0000 	.word	0x200a0000
 8001e40:	00000500 	.word	0x00000500
 8001e44:	20000a90 	.word	0x20000a90
 8001e48:	200113b8 	.word	0x200113b8

08001e4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e52:	4b35      	ldr	r3, [pc, #212]	@ (8001f28 <SystemInit+0xdc>)
 8001e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e58:	4a33      	ldr	r2, [pc, #204]	@ (8001f28 <SystemInit+0xdc>)
 8001e5a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e5e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 8001e62:	4b32      	ldr	r3, [pc, #200]	@ (8001f2c <SystemInit+0xe0>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001e68:	4b30      	ldr	r3, [pc, #192]	@ (8001f2c <SystemInit+0xe0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8001f2c <SystemInit+0xe0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001e74:	4b2d      	ldr	r3, [pc, #180]	@ (8001f2c <SystemInit+0xe0>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	492c      	ldr	r1, [pc, #176]	@ (8001f2c <SystemInit+0xe0>)
 8001e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f30 <SystemInit+0xe4>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8001e80:	4b2a      	ldr	r3, [pc, #168]	@ (8001f2c <SystemInit+0xe0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001e86:	4b29      	ldr	r3, [pc, #164]	@ (8001f2c <SystemInit+0xe0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001e8c:	4b27      	ldr	r3, [pc, #156]	@ (8001f2c <SystemInit+0xe0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 8001e92:	4b26      	ldr	r3, [pc, #152]	@ (8001f2c <SystemInit+0xe0>)
 8001e94:	4a27      	ldr	r2, [pc, #156]	@ (8001f34 <SystemInit+0xe8>)
 8001e96:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001e98:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <SystemInit+0xe0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8001e9e:	4b23      	ldr	r3, [pc, #140]	@ (8001f2c <SystemInit+0xe0>)
 8001ea0:	4a24      	ldr	r2, [pc, #144]	@ (8001f34 <SystemInit+0xe8>)
 8001ea2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001ea4:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <SystemInit+0xe0>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001eaa:	4b20      	ldr	r3, [pc, #128]	@ (8001f2c <SystemInit+0xe0>)
 8001eac:	4a21      	ldr	r2, [pc, #132]	@ (8001f34 <SystemInit+0xe8>)
 8001eae:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <SystemInit+0xe0>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <SystemInit+0xe0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1c      	ldr	r2, [pc, #112]	@ (8001f2c <SystemInit+0xe0>)
 8001ebc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ec0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f2c <SystemInit+0xe0>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ec8:	4b17      	ldr	r3, [pc, #92]	@ (8001f28 <SystemInit+0xdc>)
 8001eca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ece:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8001ed0:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <SystemInit+0xec>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001ed8:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8001ee0:	d003      	beq.n	8001eea <SystemInit+0x9e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001ee8:	d117      	bne.n	8001f1a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001eea:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <SystemInit+0xec>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d005      	beq.n	8001f02 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <SystemInit+0xec>)
 8001ef8:	4a10      	ldr	r2, [pc, #64]	@ (8001f3c <SystemInit+0xf0>)
 8001efa:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001efc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f38 <SystemInit+0xec>)
 8001efe:	4a10      	ldr	r2, [pc, #64]	@ (8001f40 <SystemInit+0xf4>)
 8001f00:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8001f02:	4b0d      	ldr	r3, [pc, #52]	@ (8001f38 <SystemInit+0xec>)
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	4a0c      	ldr	r2, [pc, #48]	@ (8001f38 <SystemInit+0xec>)
 8001f08:	f043 0302 	orr.w	r3, r3, #2
 8001f0c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <SystemInit+0xec>)
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	4a09      	ldr	r2, [pc, #36]	@ (8001f38 <SystemInit+0xec>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	61d3      	str	r3, [r2, #28]
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	e000ed00 	.word	0xe000ed00
 8001f2c:	44020c00 	.word	0x44020c00
 8001f30:	eae2eae3 	.word	0xeae2eae3
 8001f34:	01010280 	.word	0x01010280
 8001f38:	40022000 	.word	0x40022000
 8001f3c:	08192a3b 	.word	0x08192a3b
 8001f40:	4c5d6e7f 	.word	0x4c5d6e7f

08001f44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f44:	480d      	ldr	r0, [pc, #52]	@ (8001f7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f46:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f48:	f7ff ff80 	bl	8001e4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f4c:	480c      	ldr	r0, [pc, #48]	@ (8001f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f4e:	490d      	ldr	r1, [pc, #52]	@ (8001f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f50:	4a0d      	ldr	r2, [pc, #52]	@ (8001f88 <LoopForever+0xe>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f54:	e002      	b.n	8001f5c <LoopCopyDataInit>

08001f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5a:	3304      	adds	r3, #4

08001f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f60:	d3f9      	bcc.n	8001f56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f62:	4a0a      	ldr	r2, [pc, #40]	@ (8001f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f64:	4c0a      	ldr	r4, [pc, #40]	@ (8001f90 <LoopForever+0x16>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f68:	e001      	b.n	8001f6e <LoopFillZerobss>

08001f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f6c:	3204      	adds	r2, #4

08001f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f70:	d3fb      	bcc.n	8001f6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f72:	f00e fc03 	bl	801077c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f76:	f7fe fd63 	bl	8000a40 <main>

08001f7a <LoopForever>:

LoopForever:
    b LoopForever
 8001f7a:	e7fe      	b.n	8001f7a <LoopForever>
  ldr   r0, =_estack
 8001f7c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f84:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8001f88:	08011924 	.word	0x08011924
  ldr r2, =_sbss
 8001f8c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8001f90:	200113b4 	.word	0x200113b4

08001f94 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC1_IRQHandler>
	...

08001f98 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	@ 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d009      	beq.n	8001fc0 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <BSP_LED_Init+0x28>
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d003      	beq.n	8001fc0 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001fb8:	f06f 0301 	mvn.w	r3, #1
 8001fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fbe:	e055      	b.n	800206c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8001fc0:	79fb      	ldrb	r3, [r7, #7]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10f      	bne.n	8001fe6 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8001fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8002078 <BSP_LED_Init+0xe0>)
 8001fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8002078 <BSP_LED_Init+0xe0>)
 8001fce:	f043 0320 	orr.w	r3, r3, #32
 8001fd2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001fd6:	4b28      	ldr	r3, [pc, #160]	@ (8002078 <BSP_LED_Init+0xe0>)
 8001fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	e021      	b.n	800202a <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10f      	bne.n	800200c <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8001fec:	4b22      	ldr	r3, [pc, #136]	@ (8002078 <BSP_LED_Init+0xe0>)
 8001fee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ff2:	4a21      	ldr	r2, [pc, #132]	@ (8002078 <BSP_LED_Init+0xe0>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <BSP_LED_Init+0xe0>)
 8001ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	e00e      	b.n	800202a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800200c:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <BSP_LED_Init+0xe0>)
 800200e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002012:	4a19      	ldr	r2, [pc, #100]	@ (8002078 <BSP_LED_Init+0xe0>)
 8002014:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002018:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800201c:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <BSP_LED_Init+0xe0>)
 800201e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	4a13      	ldr	r2, [pc, #76]	@ (800207c <BSP_LED_Init+0xe4>)
 800202e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002032:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002034:	2301      	movs	r3, #1
 8002036:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	4a0f      	ldr	r2, [pc, #60]	@ (8002080 <BSP_LED_Init+0xe8>)
 8002044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002048:	f107 0218 	add.w	r2, r7, #24
 800204c:	4611      	mov	r1, r2
 800204e:	4618      	mov	r0, r3
 8002050:	f000 fcb6 	bl	80029c0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002054:	79fb      	ldrb	r3, [r7, #7]
 8002056:	4a0a      	ldr	r2, [pc, #40]	@ (8002080 <BSP_LED_Init+0xe8>)
 8002058:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	4a07      	ldr	r2, [pc, #28]	@ (800207c <BSP_LED_Init+0xe4>)
 8002060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002064:	2200      	movs	r2, #0
 8002066:	4619      	mov	r1, r3
 8002068:	f000 fdfc 	bl	8002c64 <HAL_GPIO_WritePin>
  }

  return ret;
 800206c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800206e:	4618      	mov	r0, r3
 8002070:	3730      	adds	r7, #48	@ 0x30
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	44020c00 	.word	0x44020c00
 800207c:	080118ac 	.word	0x080118ac
 8002080:	2000000c 	.word	0x2000000c

08002084 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d009      	beq.n	80020ac <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d006      	beq.n	80020ac <BSP_LED_Toggle+0x28>
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d003      	beq.n	80020ac <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80020a4:	f06f 0301 	mvn.w	r3, #1
 80020a8:	60fb      	str	r3, [r7, #12]
 80020aa:	e00b      	b.n	80020c4 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	4a08      	ldr	r2, [pc, #32]	@ (80020d0 <BSP_LED_Toggle+0x4c>)
 80020b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020b4:	79fb      	ldrb	r3, [r7, #7]
 80020b6:	4907      	ldr	r1, [pc, #28]	@ (80020d4 <BSP_LED_Toggle+0x50>)
 80020b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80020bc:	4619      	mov	r1, r3
 80020be:	4610      	mov	r0, r2
 80020c0:	f000 fde8 	bl	8002c94 <HAL_GPIO_TogglePin>
  }

  return ret;
 80020c4:	68fb      	ldr	r3, [r7, #12]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000000c 	.word	0x2000000c
 80020d4:	080118ac 	.word	0x080118ac

080020d8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	460a      	mov	r2, r1
 80020e2:	71fb      	strb	r3, [r7, #7]
 80020e4:	4613      	mov	r3, r2
 80020e6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80020e8:	4b30      	ldr	r3, [pc, #192]	@ (80021ac <BSP_PB_Init+0xd4>)
 80020ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ee:	4a2f      	ldr	r2, [pc, #188]	@ (80021ac <BSP_PB_Init+0xd4>)
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020f8:	4b2c      	ldr	r3, [pc, #176]	@ (80021ac <BSP_PB_Init+0xd4>)
 80020fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002106:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800210a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800210c:	2302      	movs	r3, #2
 800210e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002110:	2302      	movs	r3, #2
 8002112:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002114:	79bb      	ldrb	r3, [r7, #6]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10c      	bne.n	8002134 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	4a23      	ldr	r2, [pc, #140]	@ (80021b0 <BSP_PB_Init+0xd8>)
 8002122:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002126:	f107 020c 	add.w	r2, r7, #12
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f000 fc47 	bl	80029c0 <HAL_GPIO_Init>
 8002132:	e036      	b.n	80021a2 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002134:	4b1f      	ldr	r3, [pc, #124]	@ (80021b4 <BSP_PB_Init+0xdc>)
 8002136:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002138:	79fb      	ldrb	r3, [r7, #7]
 800213a:	4a1d      	ldr	r2, [pc, #116]	@ (80021b0 <BSP_PB_Init+0xd8>)
 800213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002140:	f107 020c 	add.w	r2, r7, #12
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f000 fc3a 	bl	80029c0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800214c:	79fa      	ldrb	r2, [r7, #7]
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4a18      	ldr	r2, [pc, #96]	@ (80021b8 <BSP_PB_Init+0xe0>)
 8002158:	441a      	add	r2, r3
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	4917      	ldr	r1, [pc, #92]	@ (80021bc <BSP_PB_Init+0xe4>)
 800215e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002162:	4619      	mov	r1, r3
 8002164:	4610      	mov	r0, r2
 8002166:	f000 fbcf 	bl	8002908 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800216a:	79fa      	ldrb	r2, [r7, #7]
 800216c:	4613      	mov	r3, r2
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4a10      	ldr	r2, [pc, #64]	@ (80021b8 <BSP_PB_Init+0xe0>)
 8002176:	1898      	adds	r0, r3, r2
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	4a11      	ldr	r2, [pc, #68]	@ (80021c0 <BSP_PB_Init+0xe8>)
 800217c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002180:	461a      	mov	r2, r3
 8002182:	2100      	movs	r1, #0
 8002184:	f000 fb94 	bl	80028b0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002188:	2018      	movs	r0, #24
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	4a0d      	ldr	r2, [pc, #52]	@ (80021c4 <BSP_PB_Init+0xec>)
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	2200      	movs	r2, #0
 8002194:	4619      	mov	r1, r3
 8002196:	f000 fab3 	bl	8002700 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800219a:	2318      	movs	r3, #24
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fac9 	bl	8002734 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	44020c00 	.word	0x44020c00
 80021b0:	20000018 	.word	0x20000018
 80021b4:	10110000 	.word	0x10110000
 80021b8:	20000a94 	.word	0x20000a94
 80021bc:	080118b4 	.word	0x080118b4
 80021c0:	2000001c 	.word	0x2000001c
 80021c4:	20000020 	.word	0x20000020

080021c8 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80021d2:	79fa      	ldrb	r2, [r7, #7]
 80021d4:	4613      	mov	r3, r2
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	4a04      	ldr	r2, [pc, #16]	@ (80021f0 <BSP_PB_IRQHandler+0x28>)
 80021de:	4413      	add	r3, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 fba5 	bl	8002930 <HAL_EXTI_IRQHandler>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000a94 	.word	0x20000a94

080021f4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
	...

0800220c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002222:	f06f 0301 	mvn.w	r3, #1
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e018      	b.n	800225c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2294      	movs	r2, #148	@ 0x94
 800222e:	fb02 f303 	mul.w	r3, r2, r3
 8002232:	4a0d      	ldr	r2, [pc, #52]	@ (8002268 <BSP_COM_Init+0x5c>)
 8002234:	4413      	add	r3, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f870 	bl	800231c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2294      	movs	r2, #148	@ 0x94
 8002240:	fb02 f303 	mul.w	r3, r2, r3
 8002244:	4a08      	ldr	r2, [pc, #32]	@ (8002268 <BSP_COM_Init+0x5c>)
 8002246:	4413      	add	r3, r2
 8002248:	6839      	ldr	r1, [r7, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f80e 	bl	800226c <MX_USART_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d002      	beq.n	800225c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002256:	f06f 0303 	mvn.w	r3, #3
 800225a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800225c:	68fb      	ldr	r3, [r7, #12]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000aa0 	.word	0x20000aa0

0800226c <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8002276:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <MX_USART_Init+0x64>)
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	220c      	movs	r2, #12
 800228a:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	895b      	ldrh	r3, [r3, #10]
 8002290:	461a      	mov	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	891b      	ldrh	r3, [r3, #8]
 80022a2:	461a      	mov	r2, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	899b      	ldrh	r3, [r3, #12]
 80022ac:	461a      	mov	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80022b8:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f008 fffe 	bl	800b2c2 <HAL_UART_Init>
 80022c6:	4603      	mov	r3, r0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000008 	.word	0x20000008

080022d4 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80022dc:	4b09      	ldr	r3, [pc, #36]	@ (8002304 <__io_putchar+0x30>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	2394      	movs	r3, #148	@ 0x94
 80022e4:	fb02 f303 	mul.w	r3, r2, r3
 80022e8:	4a07      	ldr	r2, [pc, #28]	@ (8002308 <__io_putchar+0x34>)
 80022ea:	1898      	adds	r0, r3, r2
 80022ec:	1d39      	adds	r1, r7, #4
 80022ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022f2:	2201      	movs	r2, #1
 80022f4:	f009 f835 	bl	800b362 <HAL_UART_Transmit>
  return ch;
 80022f8:	687b      	ldr	r3, [r7, #4]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000b34 	.word	0x20000b34
 8002308:	20000aa0 	.word	0x20000aa0

0800230c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002310:	2000      	movs	r0, #0
 8002312:	f7ff ff6f 	bl	80021f4 <BSP_PB_Callback>
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002324:	4b27      	ldr	r3, [pc, #156]	@ (80023c4 <COM1_MspInit+0xa8>)
 8002326:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800232a:	4a26      	ldr	r2, [pc, #152]	@ (80023c4 <COM1_MspInit+0xa8>)
 800232c:	f043 0308 	orr.w	r3, r3, #8
 8002330:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002334:	4b23      	ldr	r3, [pc, #140]	@ (80023c4 <COM1_MspInit+0xa8>)
 8002336:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002342:	4b20      	ldr	r3, [pc, #128]	@ (80023c4 <COM1_MspInit+0xa8>)
 8002344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002348:	4a1e      	ldr	r2, [pc, #120]	@ (80023c4 <COM1_MspInit+0xa8>)
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002352:	4b1c      	ldr	r3, [pc, #112]	@ (80023c4 <COM1_MspInit+0xa8>)
 8002354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002360:	4b18      	ldr	r3, [pc, #96]	@ (80023c4 <COM1_MspInit+0xa8>)
 8002362:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002366:	4a17      	ldr	r2, [pc, #92]	@ (80023c4 <COM1_MspInit+0xa8>)
 8002368:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800236c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002370:	4b14      	ldr	r3, [pc, #80]	@ (80023c4 <COM1_MspInit+0xa8>)
 8002372:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002376:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800237e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002382:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002388:	2302      	movs	r3, #2
 800238a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800238c:	2301      	movs	r3, #1
 800238e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002390:	2307      	movs	r3, #7
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4619      	mov	r1, r3
 800239a:	480b      	ldr	r0, [pc, #44]	@ (80023c8 <COM1_MspInit+0xac>)
 800239c:	f000 fb10 	bl	80029c0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 80023a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023a4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80023aa:	2307      	movs	r3, #7
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4619      	mov	r1, r3
 80023b4:	4804      	ldr	r0, [pc, #16]	@ (80023c8 <COM1_MspInit+0xac>)
 80023b6:	f000 fb03 	bl	80029c0 <HAL_GPIO_Init>
}
 80023ba:	bf00      	nop
 80023bc:	3728      	adds	r7, #40	@ 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	44020c00 	.word	0x44020c00
 80023c8:	42020c00 	.word	0x42020c00

080023cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d0:	2003      	movs	r0, #3
 80023d2:	f000 f98a 	bl	80026ea <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80023d6:	f003 f8d5 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 80023da:	4602      	mov	r2, r0
 80023dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <HAL_Init+0x44>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f003 030f 	and.w	r3, r3, #15
 80023e4:	490b      	ldr	r1, [pc, #44]	@ (8002414 <HAL_Init+0x48>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002418 <HAL_Init+0x4c>)
 80023ee:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80023f0:	2004      	movs	r0, #4
 80023f2:	f000 f9cf 	bl	8002794 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023f6:	200f      	movs	r0, #15
 80023f8:	f000 f810 	bl	800241c <HAL_InitTick>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e002      	b.n	800240c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002406:	f7fe fff5 	bl	80013f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	bd80      	pop	{r7, pc}
 8002410:	44020c00 	.word	0x44020c00
 8002414:	08011894 	.word	0x08011894
 8002418:	20000004 	.word	0x20000004

0800241c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002428:	4b33      	ldr	r3, [pc, #204]	@ (80024f8 <HAL_InitTick+0xdc>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e05c      	b.n	80024ee <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002434:	4b31      	ldr	r3, [pc, #196]	@ (80024fc <HAL_InitTick+0xe0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b04      	cmp	r3, #4
 800243e:	d10c      	bne.n	800245a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002440:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <HAL_InitTick+0xe4>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b2c      	ldr	r3, [pc, #176]	@ (80024f8 <HAL_InitTick+0xdc>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	4619      	mov	r1, r3
 800244a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800244e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002452:	fbb2 f3f3 	udiv	r3, r2, r3
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	e037      	b.n	80024ca <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800245a:	f000 f9f3 	bl	8002844 <HAL_SYSTICK_GetCLKSourceConfig>
 800245e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d023      	beq.n	80024ae <HAL_InitTick+0x92>
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b02      	cmp	r3, #2
 800246a:	d82d      	bhi.n	80024c8 <HAL_InitTick+0xac>
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_InitTick+0x5e>
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d00d      	beq.n	8002494 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002478:	e026      	b.n	80024c8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800247a:	4b21      	ldr	r3, [pc, #132]	@ (8002500 <HAL_InitTick+0xe4>)
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <HAL_InitTick+0xdc>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	4619      	mov	r1, r3
 8002484:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002488:	fbb3 f3f1 	udiv	r3, r3, r1
 800248c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002490:	60fb      	str	r3, [r7, #12]
        break;
 8002492:	e01a      	b.n	80024ca <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002494:	4b18      	ldr	r3, [pc, #96]	@ (80024f8 <HAL_InitTick+0xdc>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	461a      	mov	r2, r3
 800249a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800249e:	fbb3 f3f2 	udiv	r3, r3, r2
 80024a2:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80024a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024aa:	60fb      	str	r3, [r7, #12]
        break;
 80024ac:	e00d      	b.n	80024ca <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80024ae:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <HAL_InitTick+0xdc>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80024bc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80024c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c4:	60fb      	str	r3, [r7, #12]
        break;
 80024c6:	e000      	b.n	80024ca <HAL_InitTick+0xae>
        break;
 80024c8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f940 	bl	8002750 <HAL_SYSTICK_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e009      	b.n	80024ee <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024da:	2200      	movs	r2, #0
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	f04f 30ff 	mov.w	r0, #4294967295
 80024e2:	f000 f90d 	bl	8002700 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80024e6:	4a07      	ldr	r2, [pc, #28]	@ (8002504 <HAL_InitTick+0xe8>)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80024ec:	2300      	movs	r3, #0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000028 	.word	0x20000028
 80024fc:	e000e010 	.word	0xe000e010
 8002500:	20000004 	.word	0x20000004
 8002504:	20000024 	.word	0x20000024

08002508 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800250c:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <HAL_IncTick+0x20>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4b06      	ldr	r3, [pc, #24]	@ (800252c <HAL_IncTick+0x24>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4413      	add	r3, r2
 8002518:	4a04      	ldr	r2, [pc, #16]	@ (800252c <HAL_IncTick+0x24>)
 800251a:	6013      	str	r3, [r2, #0]
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	20000028 	.word	0x20000028
 800252c:	20000b38 	.word	0x20000b38

08002530 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  return uwTick;
 8002534:	4b03      	ldr	r3, [pc, #12]	@ (8002544 <HAL_GetTick+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000b38 	.word	0x20000b38

08002548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff ffee 	bl	8002530 <HAL_GetTick>
 8002554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002560:	d005      	beq.n	800256e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002562:	4b0a      	ldr	r3, [pc, #40]	@ (800258c <HAL_Delay+0x44>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800256e:	bf00      	nop
 8002570:	f7ff ffde 	bl	8002530 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	429a      	cmp	r2, r3
 800257e:	d8f7      	bhi.n	8002570 <HAL_Delay+0x28>
  {
  }
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000028 	.word	0x20000028

08002590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a0:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c2:	4a04      	ldr	r2, [pc, #16]	@ (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025dc:	4b04      	ldr	r3, [pc, #16]	@ (80025f0 <__NVIC_GetPriorityGrouping+0x18>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	f003 0307 	and.w	r3, r3, #7
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002602:	2b00      	cmp	r3, #0
 8002604:	db0b      	blt.n	800261e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	4907      	ldr	r1, [pc, #28]	@ (800262c <__NVIC_EnableIRQ+0x38>)
 800260e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	2001      	movs	r0, #1
 8002616:	fa00 f202 	lsl.w	r2, r0, r2
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	e000e100 	.word	0xe000e100

08002630 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800263c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0a      	blt.n	800265a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	b2da      	uxtb	r2, r3
 8002648:	490c      	ldr	r1, [pc, #48]	@ (800267c <__NVIC_SetPriority+0x4c>)
 800264a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800264e:	0112      	lsls	r2, r2, #4
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	440b      	add	r3, r1
 8002654:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002658:	e00a      	b.n	8002670 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4908      	ldr	r1, [pc, #32]	@ (8002680 <__NVIC_SetPriority+0x50>)
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	3b04      	subs	r3, #4
 8002668:	0112      	lsls	r2, r2, #4
 800266a:	b2d2      	uxtb	r2, r2
 800266c:	440b      	add	r3, r1
 800266e:	761a      	strb	r2, [r3, #24]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	e000e100 	.word	0xe000e100
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f003 0307 	and.w	r3, r3, #7
 8002696:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	bf28      	it	cs
 80026a2:	2304      	movcs	r3, #4
 80026a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2b06      	cmp	r3, #6
 80026ac:	d902      	bls.n	80026b4 <NVIC_EncodePriority+0x30>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b03      	subs	r3, #3
 80026b2:	e000      	b.n	80026b6 <NVIC_EncodePriority+0x32>
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b8:	f04f 32ff 	mov.w	r2, #4294967295
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43da      	mvns	r2, r3
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	401a      	ands	r2, r3
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026cc:	f04f 31ff 	mov.w	r1, #4294967295
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	fa01 f303 	lsl.w	r3, r1, r3
 80026d6:	43d9      	mvns	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026dc:	4313      	orrs	r3, r2
         );
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3724      	adds	r7, #36	@ 0x24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ff4c 	bl	8002590 <__NVIC_SetPriorityGrouping>
}
 80026f8:	bf00      	nop
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
 800270c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800270e:	f7ff ff63 	bl	80025d8 <__NVIC_GetPriorityGrouping>
 8002712:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68b9      	ldr	r1, [r7, #8]
 8002718:	6978      	ldr	r0, [r7, #20]
 800271a:	f7ff ffb3 	bl	8002684 <NVIC_EncodePriority>
 800271e:	4602      	mov	r2, r0
 8002720:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ff82 	bl	8002630 <__NVIC_SetPriority>
}
 800272c:	bf00      	nop
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800273e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff ff56 	bl	80025f4 <__NVIC_EnableIRQ>
}
 8002748:	bf00      	nop
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3b01      	subs	r3, #1
 800275c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002760:	d301      	bcc.n	8002766 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002762:	2301      	movs	r3, #1
 8002764:	e00d      	b.n	8002782 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002766:	4a0a      	ldr	r2, [pc, #40]	@ (8002790 <HAL_SYSTICK_Config+0x40>)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	3b01      	subs	r3, #1
 800276c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 800276e:	4b08      	ldr	r3, [pc, #32]	@ (8002790 <HAL_SYSTICK_Config+0x40>)
 8002770:	2200      	movs	r2, #0
 8002772:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002774:	4b06      	ldr	r3, [pc, #24]	@ (8002790 <HAL_SYSTICK_Config+0x40>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a05      	ldr	r2, [pc, #20]	@ (8002790 <HAL_SYSTICK_Config+0x40>)
 800277a:	f043 0303 	orr.w	r3, r3, #3
 800277e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000e010 	.word	0xe000e010

08002794 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d844      	bhi.n	800282c <HAL_SYSTICK_CLKSourceConfig+0x98>
 80027a2:	a201      	add	r2, pc, #4	@ (adr r2, 80027a8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	080027cb 	.word	0x080027cb
 80027ac:	080027e9 	.word	0x080027e9
 80027b0:	0800280b 	.word	0x0800280b
 80027b4:	0800282d 	.word	0x0800282d
 80027b8:	080027bd 	.word	0x080027bd
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80027bc:	4b1f      	ldr	r3, [pc, #124]	@ (800283c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a1e      	ldr	r2, [pc, #120]	@ (800283c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	6013      	str	r3, [r2, #0]
      break;
 80027c8:	e031      	b.n	800282e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80027ca:	4b1c      	ldr	r3, [pc, #112]	@ (800283c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a1b      	ldr	r2, [pc, #108]	@ (800283c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027d0:	f023 0304 	bic.w	r3, r3, #4
 80027d4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80027d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002840 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80027dc:	4a18      	ldr	r2, [pc, #96]	@ (8002840 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027de:	f023 030c 	bic.w	r3, r3, #12
 80027e2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80027e6:	e022      	b.n	800282e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80027e8:	4b14      	ldr	r3, [pc, #80]	@ (800283c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a13      	ldr	r2, [pc, #76]	@ (800283c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80027ee:	f023 0304 	bic.w	r3, r3, #4
 80027f2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80027f4:	4b12      	ldr	r3, [pc, #72]	@ (8002840 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80027f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80027fa:	f023 030c 	bic.w	r3, r3, #12
 80027fe:	4a10      	ldr	r2, [pc, #64]	@ (8002840 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002800:	f043 0304 	orr.w	r3, r3, #4
 8002804:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002808:	e011      	b.n	800282e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800280a:	4b0c      	ldr	r3, [pc, #48]	@ (800283c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a0b      	ldr	r2, [pc, #44]	@ (800283c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002810:	f023 0304 	bic.w	r3, r3, #4
 8002814:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002816:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002818:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800281c:	f023 030c 	bic.w	r3, r3, #12
 8002820:	4a07      	ldr	r2, [pc, #28]	@ (8002840 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002822:	f043 0308 	orr.w	r3, r3, #8
 8002826:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800282a:	e000      	b.n	800282e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 800282c:	bf00      	nop
  }
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e010 	.word	0xe000e010
 8002840:	44020c00 	.word	0x44020c00

08002844 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800284a:	4b17      	ldr	r3, [pc, #92]	@ (80028a8 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d002      	beq.n	800285c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002856:	2304      	movs	r3, #4
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	e01e      	b.n	800289a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 800285c:	4b13      	ldr	r3, [pc, #76]	@ (80028ac <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 800285e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002862:	f003 030c 	and.w	r3, r3, #12
 8002866:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b08      	cmp	r3, #8
 800286c:	d00f      	beq.n	800288e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b08      	cmp	r3, #8
 8002872:	d80f      	bhi.n	8002894 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d003      	beq.n	8002888 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002880:	e008      	b.n	8002894 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002882:	2300      	movs	r3, #0
 8002884:	607b      	str	r3, [r7, #4]
        break;
 8002886:	e008      	b.n	800289a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002888:	2301      	movs	r3, #1
 800288a:	607b      	str	r3, [r7, #4]
        break;
 800288c:	e005      	b.n	800289a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 800288e:	2302      	movs	r3, #2
 8002890:	607b      	str	r3, [r7, #4]
        break;
 8002892:	e002      	b.n	800289a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002894:	2300      	movs	r3, #0
 8002896:	607b      	str	r3, [r7, #4]
        break;
 8002898:	bf00      	nop
    }
  }
  return systick_source;
 800289a:	687b      	ldr	r3, [r7, #4]
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000e010 	.word	0xe000e010
 80028ac:	44020c00 	.word	0x44020c00

080028b0 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	460b      	mov	r3, r1
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80028c2:	7afb      	ldrb	r3, [r7, #11]
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d011      	beq.n	80028ec <HAL_EXTI_RegisterCallback+0x3c>
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	dc13      	bgt.n	80028f4 <HAL_EXTI_RegisterCallback+0x44>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <HAL_EXTI_RegisterCallback+0x26>
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d007      	beq.n	80028e4 <HAL_EXTI_RegisterCallback+0x34>
 80028d4:	e00e      	b.n	80028f4 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	609a      	str	r2, [r3, #8]
      break;
 80028e2:	e00a      	b.n	80028fa <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	605a      	str	r2, [r3, #4]
      break;
 80028ea:	e006      	b.n	80028fa <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	609a      	str	r2, [r3, #8]
      break;
 80028f2:	e002      	b.n	80028fa <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	75fb      	strb	r3, [r7, #23]
      break;
 80028f8:	bf00      	nop
  }

  return status;
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e003      	b.n	8002924 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002922:	2300      	movs	r3, #0
  }
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2201      	movs	r2, #1
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	4b17      	ldr	r3, [pc, #92]	@ (80029b8 <HAL_EXTI_IRQHandler+0x88>)
 800295a:	4413      	add	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4013      	ands	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d009      	beq.n	8002982 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	4b0d      	ldr	r3, [pc, #52]	@ (80029bc <HAL_EXTI_IRQHandler+0x8c>)
 8002988:	4413      	add	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4013      	ands	r3, r2
 8002994:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	4798      	blx	r3
    }
  }
}
 80029b0:	bf00      	nop
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	4402200c 	.word	0x4402200c
 80029bc:	44022010 	.word	0x44022010

080029c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b087      	sub	sp, #28
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80029ce:	e136      	b.n	8002c3e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2101      	movs	r1, #1
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	4013      	ands	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8128 	beq.w	8002c38 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x38>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b12      	cmp	r3, #18
 80029f6:	d125      	bne.n	8002a44 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	08da      	lsrs	r2, r3, #3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3208      	adds	r2, #8
 8002a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a04:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	220f      	movs	r2, #15
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 020f 	and.w	r2, r3, #15
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	08da      	lsrs	r2, r3, #3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	3208      	adds	r2, #8
 8002a3e:	6979      	ldr	r1, [r7, #20]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0203 	and.w	r2, r3, #3
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d00b      	beq.n	8002a98 <HAL_GPIO_Init+0xd8>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d007      	beq.n	8002a98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a8c:	2b11      	cmp	r3, #17
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	2b12      	cmp	r3, #18
 8002a96:	d130      	bne.n	8002afa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4013      	ands	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ace:	2201      	movs	r2, #1
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	4013      	ands	r3, r2
 8002adc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	f003 0201 	and.w	r2, r3, #1
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d017      	beq.n	8002b32 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	2203      	movs	r2, #3
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	4013      	ands	r3, r2
 8002b18:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d07c      	beq.n	8002c38 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002b3e:	4a47      	ldr	r2, [pc, #284]	@ (8002c5c <HAL_GPIO_Init+0x29c>)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3318      	adds	r3, #24
 8002b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	220f      	movs	r2, #15
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0a9a      	lsrs	r2, r3, #10
 8002b66:	4b3e      	ldr	r3, [pc, #248]	@ (8002c60 <HAL_GPIO_Init+0x2a0>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	f002 0203 	and.w	r2, r2, #3
 8002b70:	00d2      	lsls	r2, r2, #3
 8002b72:	4093      	lsls	r3, r2
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002b7a:	4938      	ldr	r1, [pc, #224]	@ (8002c5c <HAL_GPIO_Init+0x29c>)
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	3318      	adds	r3, #24
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002b88:	4b34      	ldr	r3, [pc, #208]	@ (8002c5c <HAL_GPIO_Init+0x29c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4013      	ands	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002bac:	4a2b      	ldr	r2, [pc, #172]	@ (8002c5c <HAL_GPIO_Init+0x29c>)
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002bb2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c5c <HAL_GPIO_Init+0x29c>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002bce:	697a      	ldr	r2, [r7, #20]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002bd6:	4a21      	ldr	r2, [pc, #132]	@ (8002c5c <HAL_GPIO_Init+0x29c>)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c5c <HAL_GPIO_Init+0x29c>)
 8002bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002be2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	4013      	ands	r3, r2
 8002bec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002c02:	4a16      	ldr	r2, [pc, #88]	@ (8002c5c <HAL_GPIO_Init+0x29c>)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8002c0a:	4b14      	ldr	r3, [pc, #80]	@ (8002c5c <HAL_GPIO_Init+0x29c>)
 8002c0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c10:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	43db      	mvns	r3, r3
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002c30:	4a0a      	ldr	r2, [pc, #40]	@ (8002c5c <HAL_GPIO_Init+0x29c>)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f47f aec1 	bne.w	80029d0 <HAL_GPIO_Init+0x10>
  }
}
 8002c4e:	bf00      	nop
 8002c50:	bf00      	nop
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	44022000 	.word	0x44022000
 8002c60:	002f7f7f 	.word	0x002f7f7f

08002c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	807b      	strh	r3, [r7, #2]
 8002c70:	4613      	mov	r3, r2
 8002c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c74:	787b      	ldrb	r3, [r7, #1]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c7a:	887a      	ldrh	r2, [r7, #2]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c80:	e002      	b.n	8002c88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ca6:	887a      	ldrh	r2, [r7, #2]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4013      	ands	r3, r2
 8002cac:	041a      	lsls	r2, r3, #16
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	43d9      	mvns	r1, r3
 8002cb2:	887b      	ldrh	r3, [r7, #2]
 8002cb4:	400b      	ands	r3, r1
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	619a      	str	r2, [r3, #24]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d101      	bne.n	8002cda <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e02a      	b.n	8002d30 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d106      	bne.n	8002cf4 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe fb88 	bl	8001404 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 8002d0a:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	68f9      	ldr	r1, [r7, #12]
 8002d14:	430b      	orrs	r3, r1
 8002d16:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 8002d2e:	2300      	movs	r3, #0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e08d      	b.n	8002e66 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7fe fb6c 	bl	800143c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2224      	movs	r2, #36	@ 0x24
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689a      	ldr	r2, [r3, #8]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002dae:	609a      	str	r2, [r3, #8]
 8002db0:	e006      	b.n	8002dc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002dbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d108      	bne.n	8002dda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002dd6:	605a      	str	r2, [r3, #4]
 8002dd8:	e007      	b.n	8002dea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002de8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002df8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002dfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68da      	ldr	r2, [r3, #12]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69d9      	ldr	r1, [r3, #28]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1a      	ldr	r2, [r3, #32]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2220      	movs	r2, #32
 8002e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b083      	sub	sp, #12
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d138      	bne.n	8002ef6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e032      	b.n	8002ef8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2224      	movs	r2, #36	@ 0x24
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0201 	bic.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ec0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6819      	ldr	r1, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	e000      	b.n	8002ef8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ef6:	2302      	movs	r3, #2
  }
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d139      	bne.n	8002f8e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e033      	b.n	8002f90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	@ 0x24
 8002f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f56:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f042 0201 	orr.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
  }
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002fa8:	230a      	movs	r3, #10
 8002faa:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002fac:	e002      	b.n	8002fb4 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f9      	bne.n	8002fae <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8002fba:	887b      	ldrh	r3, [r7, #2]
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fd0:	b29b      	uxth	r3, r3
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002fea:	230a      	movs	r3, #10
 8002fec:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002fee:	e002      	b.n	8002ff6 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f9      	bne.n	8002ff0 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8002ffc:	887b      	ldrh	r3, [r7, #2]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003004:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	b29b      	uxth	r3, r3
 800300e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003012:	b29b      	uxth	r3, r3
}
 8003014:	4618      	mov	r0, r3
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800302c:	230a      	movs	r3, #10
 800302e:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8003030:	e002      	b.n	8003038 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3b01      	subs	r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f9      	bne.n	8003032 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800303e:	887b      	ldrh	r3, [r7, #2]
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003046:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	0c1b      	lsrs	r3, r3, #16
 800304e:	b29b      	uxth	r3, r3
 8003050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003054:	b29b      	uxth	r3, r3
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b086      	sub	sp, #24
 8003066:	af02      	add	r7, sp, #8
 8003068:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0f3      	b.n	800325c <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d106      	bne.n	800308e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f7fe fd99 	bl	8001bc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2203      	movs	r2, #3
 8003092:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f008 ff59 	bl	800bf52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	7c1a      	ldrb	r2, [r3, #16]
 80030a8:	f88d 2000 	strb.w	r2, [sp]
 80030ac:	3304      	adds	r3, #4
 80030ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030b0:	f008 ff1d 	bl	800beee <USB_CoreInit>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d005      	beq.n	80030c6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e0ca      	b.n	800325c <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f008 ff55 	bl	800bf7c <USB_SetCurrentMode>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d005      	beq.n	80030e4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0bb      	b.n	800325c <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030e4:	2300      	movs	r3, #0
 80030e6:	73fb      	strb	r3, [r7, #15]
 80030e8:	e03f      	b.n	800316a <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80030ea:	7bfa      	ldrb	r2, [r7, #15]
 80030ec:	6879      	ldr	r1, [r7, #4]
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	440b      	add	r3, r1
 80030f8:	3315      	adds	r3, #21
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80030fe:	7bfa      	ldrb	r2, [r7, #15]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4413      	add	r3, r2
 8003108:	00db      	lsls	r3, r3, #3
 800310a:	440b      	add	r3, r1
 800310c:	3314      	adds	r3, #20
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003112:	7bfa      	ldrb	r2, [r7, #15]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	440b      	add	r3, r1
 8003120:	3317      	adds	r3, #23
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003126:	7bfa      	ldrb	r2, [r7, #15]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4413      	add	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	440b      	add	r3, r1
 8003134:	3324      	adds	r3, #36	@ 0x24
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	440b      	add	r3, r1
 8003148:	3328      	adds	r3, #40	@ 0x28
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	3304      	adds	r3, #4
 8003160:	2200      	movs	r2, #0
 8003162:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003164:	7bfb      	ldrb	r3, [r7, #15]
 8003166:	3301      	adds	r3, #1
 8003168:	73fb      	strb	r3, [r7, #15]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	791b      	ldrb	r3, [r3, #4]
 800316e:	7bfa      	ldrb	r2, [r7, #15]
 8003170:	429a      	cmp	r2, r3
 8003172:	d3ba      	bcc.n	80030ea <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003174:	2300      	movs	r3, #0
 8003176:	73fb      	strb	r3, [r7, #15]
 8003178:	e044      	b.n	8003204 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	440b      	add	r3, r1
 8003188:	f203 1355 	addw	r3, r3, #341	@ 0x155
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003190:	7bfa      	ldrb	r2, [r7, #15]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80031a2:	7bfa      	ldrb	r2, [r7, #15]
 80031a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031a6:	7bfa      	ldrb	r2, [r7, #15]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	f203 1357 	addw	r3, r3, #343	@ 0x157
 80031b8:	2200      	movs	r2, #0
 80031ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031bc:	7bfa      	ldrb	r2, [r7, #15]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	440b      	add	r3, r1
 80031ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80031d2:	7bfa      	ldrb	r2, [r7, #15]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80031e8:	7bfa      	ldrb	r2, [r7, #15]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4413      	add	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	440b      	add	r3, r1
 80031f6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80031fa:	2200      	movs	r2, #0
 80031fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
 8003200:	3301      	adds	r3, #1
 8003202:	73fb      	strb	r3, [r7, #15]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	791b      	ldrb	r3, [r3, #4]
 8003208:	7bfa      	ldrb	r2, [r7, #15]
 800320a:	429a      	cmp	r2, r3
 800320c:	d3b5      	bcc.n	800317a <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6818      	ldr	r0, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	7c1a      	ldrb	r2, [r3, #16]
 8003216:	f88d 2000 	strb.w	r2, [sp]
 800321a:	3304      	adds	r3, #4
 800321c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800321e:	f008 fed0 	bl	800bfc2 <USB_DevInit>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e013      	b.n	800325c <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	7b1b      	ldrb	r3, [r3, #12]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d102      	bne.n	8003250 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f001 fb6b 	bl	8004926 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f00a fd29 	bl	800dcac <USB_DevDisconnect>

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_PCD_Start+0x16>
 8003276:	2302      	movs	r3, #2
 8003278:	e012      	b.n	80032a0 <HAL_PCD_Start+0x3c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f008 fe4f 	bl	800bf2a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f00a fcfa 	bl	800dc8a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f00a fd0a 	bl	800dcce <USB_ReadInterrupts>
 80032ba:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 faf2 	bl	80038b0 <PCD_EP_ISR_Handler>

    return;
 80032cc:	e0de      	b.n	800348c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d010      	beq.n	80032fa <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 80032e6:	400b      	ands	r3, r1
 80032e8:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f00b fbb9 	bl	800ea62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80032f0:	2100      	movs	r1, #0
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f8e1 	bl	80034ba <HAL_PCD_SetAddress>

    return;
 80032f8:	e0c8      	b.n	800348c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8003312:	400b      	ands	r3, r1
 8003314:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003316:	e0b9      	b.n	800348c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8003330:	400b      	ands	r3, r1
 8003332:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003334:	e0aa      	b.n	800348c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d029      	beq.n	8003394 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0204 	bic.w	r2, r2, #4
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f022 0208 	bic.w	r2, r2, #8
 800335e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8003366:	2b01      	cmp	r3, #1
 8003368:	d107      	bne.n	800337a <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003372:	2100      	movs	r1, #0
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f001 faf8 	bl	800496a <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f893 	bl	80034a6 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800338e:	400b      	ands	r3, r1
 8003390:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003392:	e07b      	b.n	800348c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800339a:	2b00      	cmp	r3, #0
 800339c:	d01c      	beq.n	80033d8 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f042 0208 	orr.w	r2, r2, #8
 80033ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 80033bc:	400b      	ands	r3, r1
 80033be:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0204 	orr.w	r2, r2, #4
 80033ce:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f85e 	bl	8003492 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80033d6:	e059      	b.n	800348c <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d033      	beq.n	800344a <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80033f0:	400b      	ands	r3, r1
 80033f2:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d121      	bne.n	8003442 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0204 	orr.w	r2, r2, #4
 800340c:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0208 	orr.w	r2, r2, #8
 800341c:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800342c:	089b      	lsrs	r3, r3, #2
 800342e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003438:	2101      	movs	r1, #1
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f001 fa95 	bl	800496a <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003440:	e024      	b.n	800348c <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f825 	bl	8003492 <HAL_PCD_SuspendCallback>
    return;
 8003448:	e020      	b.n	800348c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00c      	beq.n	800346e <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8003462:	400b      	ands	r3, r1
 8003464:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f00b faed 	bl	800ea46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800346c:	e00e      	b.n	800348c <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d009      	beq.n	800348c <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8003486:	400b      	ands	r3, r1
 8003488:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800348a:	bf00      	nop
  }
}
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b082      	sub	sp, #8
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
 80034c2:	460b      	mov	r3, r1
 80034c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d101      	bne.n	80034d4 <HAL_PCD_SetAddress+0x1a>
 80034d0:	2302      	movs	r3, #2
 80034d2:	e012      	b.n	80034fa <HAL_PCD_SetAddress+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	4611      	mov	r1, r2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f00a fbba 	bl	800dc64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	4608      	mov	r0, r1
 800350c:	4611      	mov	r1, r2
 800350e:	461a      	mov	r2, r3
 8003510:	4603      	mov	r3, r0
 8003512:	70fb      	strb	r3, [r7, #3]
 8003514:	460b      	mov	r3, r1
 8003516:	803b      	strh	r3, [r7, #0]
 8003518:	4613      	mov	r3, r2
 800351a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800351c:	2300      	movs	r3, #0
 800351e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003520:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003524:	2b00      	cmp	r3, #0
 8003526:	da0f      	bge.n	8003548 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	f003 0207 	and.w	r2, r3, #7
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	3310      	adds	r3, #16
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4413      	add	r3, r2
 800353c:	3304      	adds	r3, #4
 800353e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2201      	movs	r2, #1
 8003544:	705a      	strb	r2, [r3, #1]
 8003546:	e00f      	b.n	8003568 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f003 0207 	and.w	r2, r3, #7
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	3304      	adds	r3, #4
 8003560:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003568:	78fb      	ldrb	r3, [r7, #3]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	b2da      	uxtb	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003574:	883b      	ldrh	r3, [r7, #0]
 8003576:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	78ba      	ldrb	r2, [r7, #2]
 8003582:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003584:	78bb      	ldrb	r3, [r7, #2]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d102      	bne.n	8003590 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_PCD_EP_Open+0x9c>
 800359a:	2302      	movs	r3, #2
 800359c:	e00e      	b.n	80035bc <HAL_PCD_EP_Open+0xba>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68f9      	ldr	r1, [r7, #12]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f008 fd2b 	bl	800c008 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 80035ba:	7afb      	ldrb	r3, [r7, #11]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80035d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	da0f      	bge.n	80035f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	f003 0207 	and.w	r2, r3, #7
 80035de:	4613      	mov	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	4413      	add	r3, r2
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	3310      	adds	r3, #16
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	4413      	add	r3, r2
 80035ec:	3304      	adds	r3, #4
 80035ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2201      	movs	r2, #1
 80035f4:	705a      	strb	r2, [r3, #1]
 80035f6:	e00f      	b.n	8003618 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	f003 0207 	and.w	r2, r3, #7
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	3304      	adds	r3, #4
 8003610:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2200      	movs	r2, #0
 8003616:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_PCD_EP_Close+0x6e>
 800362e:	2302      	movs	r3, #2
 8003630:	e00e      	b.n	8003650 <HAL_PCD_EP_Close+0x8c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68f9      	ldr	r1, [r7, #12]
 8003640:	4618      	mov	r0, r3
 8003642:	f009 f841 	bl	800c6c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3710      	adds	r7, #16
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	460b      	mov	r3, r1
 8003666:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003668:	7afb      	ldrb	r3, [r7, #11]
 800366a:	f003 0207 	and.w	r2, r3, #7
 800366e:	4613      	mov	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4413      	add	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4413      	add	r3, r2
 800367e:	3304      	adds	r3, #4
 8003680:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	683a      	ldr	r2, [r7, #0]
 800368c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2200      	movs	r2, #0
 8003692:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	2200      	movs	r2, #0
 8003698:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800369a:	7afb      	ldrb	r3, [r7, #11]
 800369c:	f003 0307 	and.w	r3, r3, #7
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6979      	ldr	r1, [r7, #20]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f009 f995 	bl	800c9dc <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	f003 0207 	and.w	r2, r3, #7
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	440b      	add	r3, r1
 80036da:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80036de:	681b      	ldr	r3, [r3, #0]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	607a      	str	r2, [r7, #4]
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	460b      	mov	r3, r1
 80036fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036fc:	7afb      	ldrb	r3, [r7, #11]
 80036fe:	f003 0207 	and.w	r2, r3, #7
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	3310      	adds	r3, #16
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	3304      	adds	r3, #4
 8003712:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2200      	movs	r2, #0
 8003732:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	2201      	movs	r2, #1
 8003738:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800373a:	7afb      	ldrb	r3, [r7, #11]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	b2da      	uxtb	r2, r3
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6979      	ldr	r1, [r7, #20]
 800374c:	4618      	mov	r0, r3
 800374e:	f009 f945 	bl	800c9dc <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	460b      	mov	r3, r1
 8003766:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003768:	78fb      	ldrb	r3, [r7, #3]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	7912      	ldrb	r2, [r2, #4]
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e040      	b.n	80037fc <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800377a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800377e:	2b00      	cmp	r3, #0
 8003780:	da0f      	bge.n	80037a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	f003 0207 	and.w	r2, r3, #7
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	3310      	adds	r3, #16
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	3304      	adds	r3, #4
 8003798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2201      	movs	r2, #1
 800379e:	705a      	strb	r2, [r3, #1]
 80037a0:	e00d      	b.n	80037be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	4613      	mov	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	4413      	add	r3, r2
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	4413      	add	r3, r2
 80037b4:	3304      	adds	r3, #4
 80037b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_PCD_EP_SetStall+0x82>
 80037da:	2302      	movs	r3, #2
 80037dc:	e00e      	b.n	80037fc <HAL_PCD_EP_SetStall+0xa0>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68f9      	ldr	r1, [r7, #12]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f00a f95f 	bl	800dab0 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	f003 030f 	and.w	r3, r3, #15
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	7912      	ldrb	r2, [r2, #4]
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e042      	b.n	80038a8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003822:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003826:	2b00      	cmp	r3, #0
 8003828:	da0f      	bge.n	800384a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800382a:	78fb      	ldrb	r3, [r7, #3]
 800382c:	f003 0207 	and.w	r2, r3, #7
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	3310      	adds	r3, #16
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	4413      	add	r3, r2
 800383e:	3304      	adds	r3, #4
 8003840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	705a      	strb	r2, [r3, #1]
 8003848:	e00f      	b.n	800386a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800384a:	78fb      	ldrb	r3, [r7, #3]
 800384c:	f003 0207 	and.w	r2, r3, #7
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	00db      	lsls	r3, r3, #3
 8003858:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	4413      	add	r3, r2
 8003860:	3304      	adds	r3, #4
 8003862:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	b2da      	uxtb	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_PCD_EP_ClrStall+0x86>
 8003886:	2302      	movs	r3, #2
 8003888:	e00e      	b.n	80038a8 <HAL_PCD_EP_ClrStall+0xa4>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68f9      	ldr	r1, [r7, #12]
 8003898:	4618      	mov	r0, r3
 800389a:	f00a f94f 	bl	800db3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08e      	sub	sp, #56	@ 0x38
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80038b8:	e326      	b.n	8003f08 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c0:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 80038c2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 80038ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f040 8124 	bne.w	8003b20 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80038d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80038da:	f003 0310 	and.w	r3, r3, #16
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d13e      	bne.n	8003960 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b89      	ldr	r3, [pc, #548]	@ (8003b10 <PCD_EP_ISR_Handler+0x260>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038f8:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3314      	adds	r3, #20
 80038fe:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800390a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	0c1b      	lsrs	r3, r3, #16
 8003912:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003918:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800391a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800391c:	695a      	ldr	r2, [r3, #20]
 800391e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003920:	69db      	ldr	r3, [r3, #28]
 8003922:	441a      	add	r2, r3
 8003924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003926:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003928:	2100      	movs	r1, #0
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f00b f871 	bl	800ea12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7c5b      	ldrb	r3, [r3, #17]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 82e6 	beq.w	8003f08 <PCD_EP_ISR_Handler+0x658>
 800393c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	f040 82e1 	bne.w	8003f08 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	7c5b      	ldrb	r3, [r3, #17]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003950:	b2da      	uxtb	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	745a      	strb	r2, [r3, #17]
 800395e:	e2d3      	b.n	8003f08 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003966:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003970:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003972:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003976:	2b00      	cmp	r3, #0
 8003978:	d027      	beq.n	80039ca <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	4619      	mov	r1, r3
 8003984:	4610      	mov	r0, r2
 8003986:	f7ff fb09 	bl	8002f9c <PCD_GET_EP_RX_CNT>
 800398a:	4603      	mov	r3, r0
 800398c:	461a      	mov	r2, r3
 800398e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003990:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6818      	ldr	r0, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 800399c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800399e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80039a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039a2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	f00a fa01 	bl	800ddac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b58      	ldr	r3, [pc, #352]	@ (8003b14 <PCD_EP_ISR_Handler+0x264>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039c0:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f00a fff8 	bl	800e9b8 <HAL_PCD_SetupStageCallback>
 80039c8:	e29e      	b.n	8003f08 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 80039ca:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f280 829a 	bge.w	8003f08 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	4b4e      	ldr	r3, [pc, #312]	@ (8003b14 <PCD_EP_ISR_Handler+0x264>)
 80039dc:	4013      	ands	r3, r2
 80039de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039e6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80039ea:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4619      	mov	r1, r3
 80039f6:	4610      	mov	r0, r2
 80039f8:	f7ff fad0 	bl	8002f9c <PCD_GET_EP_RX_CNT>
 80039fc:	4603      	mov	r3, r0
 80039fe:	461a      	mov	r2, r3
 8003a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a02:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d019      	beq.n	8003a40 <PCD_EP_ISR_Handler+0x190>
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1a:	6959      	ldr	r1, [r3, #20]
 8003a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a22:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f00a f9c1 	bl	800ddac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003a2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	441a      	add	r2, r3
 8003a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a36:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003a38:	2100      	movs	r1, #0
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f00a ffce 	bl	800e9dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003a48:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f040 825a 	bne.w	8003f08 <PCD_EP_ISR_Handler+0x658>
 8003a54:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003a56:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003a5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003a5e:	f000 8253 	beq.w	8003f08 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003a62:	4b2d      	ldr	r3, [pc, #180]	@ (8003b18 <PCD_EP_ISR_Handler+0x268>)
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4a2c      	ldr	r2, [pc, #176]	@ (8003b18 <PCD_EP_ISR_Handler+0x268>)
 8003a68:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003a6c:	6053      	str	r3, [r2, #4]
 8003a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d106      	bne.n	8003a84 <PCD_EP_ISR_Handler+0x1d4>
 8003a76:	4b28      	ldr	r3, [pc, #160]	@ (8003b18 <PCD_EP_ISR_Handler+0x268>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	4a27      	ldr	r2, [pc, #156]	@ (8003b18 <PCD_EP_ISR_Handler+0x268>)
 8003a7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003a80:	6053      	str	r3, [r2, #4]
 8003a82:	e02e      	b.n	8003ae2 <PCD_EP_ISR_Handler+0x232>
 8003a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2b3e      	cmp	r3, #62	@ 0x3e
 8003a8a:	d814      	bhi.n	8003ab6 <PCD_EP_ISR_Handler+0x206>
 8003a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	085b      	lsrs	r3, r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <PCD_EP_ISR_Handler+0x1f6>
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
 8003aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8003b18 <PCD_EP_ISR_Handler+0x268>)
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	069b      	lsls	r3, r3, #26
 8003aae:	491a      	ldr	r1, [pc, #104]	@ (8003b18 <PCD_EP_ISR_Handler+0x268>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	604b      	str	r3, [r1, #4]
 8003ab4:	e015      	b.n	8003ae2 <PCD_EP_ISR_Handler+0x232>
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	617b      	str	r3, [r7, #20]
 8003abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f003 031f 	and.w	r3, r3, #31
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d102      	bne.n	8003ad0 <PCD_EP_ISR_Handler+0x220>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	4b11      	ldr	r3, [pc, #68]	@ (8003b18 <PCD_EP_ISR_Handler+0x268>)
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	069b      	lsls	r3, r3, #26
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	4a0f      	ldr	r2, [pc, #60]	@ (8003b18 <PCD_EP_ISR_Handler+0x268>)
 8003adc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ae0:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b1c <PCD_EP_ISR_Handler+0x26c>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e1fb      	b.n	8003f08 <PCD_EP_ISR_Handler+0x658>
 8003b10:	07ff8f0f 	.word	0x07ff8f0f
 8003b14:	07ff0f8f 	.word	0x07ff0f8f
 8003b18:	40016400 	.word	0x40016400
 8003b1c:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	461a      	mov	r2, r3
 8003b26:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8003b32:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f280 80bd 	bge.w	8003cb6 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	461a      	mov	r2, r3
 8003b42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b9e      	ldr	r3, [pc, #632]	@ (8003dc8 <PCD_EP_ISR_Handler+0x518>)
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	69fa      	ldr	r2, [r7, #28]
 8003b62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b66:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003b68:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b82:	7b1b      	ldrb	r3, [r3, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d116      	bne.n	8003bb6 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f7ff fa02 	bl	8002f9c <PCD_GET_EP_RX_CNT>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8003b9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d067      	beq.n	8003c72 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba8:	6959      	ldr	r1, [r3, #20]
 8003baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bac:	88da      	ldrh	r2, [r3, #6]
 8003bae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bb0:	f00a f8fc 	bl	800ddac <USB_ReadPMA>
 8003bb4:	e05d      	b.n	8003c72 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb8:	78db      	ldrb	r3, [r3, #3]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d108      	bne.n	8003bd0 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003bbe:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f9ad 	bl	8003f24 <HAL_PCD_EP_DB_Receive>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003bce:	e050      	b.n	8003c72 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	4413      	add	r3, r2
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4b7a      	ldr	r3, [pc, #488]	@ (8003dcc <PCD_EP_ISR_Handler+0x51c>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	461a      	mov	r2, r3
 8003bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	441a      	add	r2, r3
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003bfe:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	461a      	mov	r2, r3
 8003c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d016      	beq.n	8003c46 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	4619      	mov	r1, r3
 8003c22:	4610      	mov	r0, r2
 8003c24:	f7ff f9db 	bl	8002fde <PCD_GET_EP_DBUF0_CNT>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003c2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01f      	beq.n	8003c72 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c38:	6959      	ldr	r1, [r3, #20]
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3c:	891a      	ldrh	r2, [r3, #8]
 8003c3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c40:	f00a f8b4 	bl	800ddac <USB_ReadPMA>
 8003c44:	e015      	b.n	8003c72 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4610      	mov	r0, r2
 8003c52:	f7ff f9e5 	bl	8003020 <PCD_GET_EP_DBUF1_CNT>
 8003c56:	4603      	mov	r3, r0
 8003c58:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003c5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d008      	beq.n	8003c72 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6818      	ldr	r0, [r3, #0]
 8003c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c66:	6959      	ldr	r1, [r3, #20]
 8003c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c6a:	895a      	ldrh	r2, [r3, #10]
 8003c6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c6e:	f00a f89d 	bl	800ddac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c74:	69da      	ldr	r2, [r3, #28]
 8003c76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c78:	441a      	add	r2, r3
 8003c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c80:	695a      	ldr	r2, [r3, #20]
 8003c82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003c84:	441a      	add	r2, r3
 8003c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c88:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <PCD_EP_ISR_Handler+0x3ec>
 8003c92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d206      	bcs.n	8003caa <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f00a fe9a 	bl	800e9dc <HAL_PCD_DataOutStageCallback>
 8003ca8:	e005      	b.n	8003cb6 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f008 fe93 	bl	800c9dc <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8003cb6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8123 	beq.w	8003f08 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8003cc2:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	4413      	add	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	3310      	adds	r3, #16
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	4413      	add	r3, r2
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b39      	ldr	r3, [pc, #228]	@ (8003dd0 <PCD_EP_ISR_Handler+0x520>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003cfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d02:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d06:	78db      	ldrb	r3, [r3, #3]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	f040 80b8 	bne.w	8003e7e <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d10:	2200      	movs	r2, #0
 8003d12:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d16:	7b1b      	ldrb	r3, [r3, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80a9 	beq.w	8003e70 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003d1e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d055      	beq.n	8003dd4 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d124      	bne.n	8003d7a <PCD_EP_ISR_Handler+0x4ca>
 8003d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d4e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003d52:	601a      	str	r2, [r3, #0]
 8003d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d72:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	e07a      	b.n	8003e70 <PCD_EP_ISR_Handler+0x5c0>
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d7c:	785b      	ldrb	r3, [r3, #1]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d176      	bne.n	8003e70 <PCD_EP_ISR_Handler+0x5c0>
 8003d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003da0:	b292      	uxth	r2, r2
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	00db      	lsls	r3, r3, #3
 8003daa:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003dae:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dc0:	6812      	ldr	r2, [r2, #0]
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e054      	b.n	8003e70 <PCD_EP_ISR_Handler+0x5c0>
 8003dc6:	bf00      	nop
 8003dc8:	07ff0f8f 	.word	0x07ff0f8f
 8003dcc:	07ff8f8f 	.word	0x07ff8f8f
 8003dd0:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dd6:	785b      	ldrb	r3, [r3, #1]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d124      	bne.n	8003e26 <PCD_EP_ISR_Handler+0x576>
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003de6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003df6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dfa:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003dfe:	605a      	str	r2, [r3, #4]
 8003e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e1e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003e22:	605a      	str	r2, [r3, #4]
 8003e24:	e024      	b.n	8003e70 <PCD_EP_ISR_Handler+0x5c0>
 8003e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e28:	785b      	ldrb	r3, [r3, #1]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d120      	bne.n	8003e70 <PCD_EP_ISR_Handler+0x5c0>
 8003e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e4c:	b292      	uxth	r2, r2
 8003e4e:	605a      	str	r2, [r3, #4]
 8003e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003e5a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e6c:	6852      	ldr	r2, [r2, #4]
 8003e6e:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f00a fdcb 	bl	800ea12 <HAL_PCD_DataInStageCallback>
 8003e7c:	e044      	b.n	8003f08 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003e7e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d139      	bne.n	8003efc <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ea0:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d906      	bls.n	8003eba <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8003eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003eb2:	1ad2      	subs	r2, r2, r3
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb6:	619a      	str	r2, [r3, #24]
 8003eb8:	e002      	b.n	8003ec0 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8003eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d106      	bne.n	8003ed6 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f00a fd9f 	bl	800ea12 <HAL_PCD_DataInStageCallback>
 8003ed4:	e018      	b.n	8003f08 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003edc:	441a      	add	r2, r3
 8003ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee4:	69da      	ldr	r2, [r3, #28]
 8003ee6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003ee8:	441a      	add	r2, r3
 8003eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eec:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f008 fd71 	bl	800c9dc <USB_EPStartXfer>
 8003efa:	e005      	b.n	8003f08 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003efc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003efe:	461a      	mov	r2, r3
 8003f00:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f8e8 	bl	80040d8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f47f acd1 	bne.w	80038ba <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3738      	adds	r7, #56	@ 0x38
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop

08003f24 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08a      	sub	sp, #40	@ 0x28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d062      	beq.n	8004002 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	4619      	mov	r1, r3
 8003f46:	4610      	mov	r0, r2
 8003f48:	f7ff f849 	bl	8002fde <PCD_GET_EP_DBUF0_CNT>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	699a      	ldr	r2, [r3, #24]
 8003f54:	8bfb      	ldrh	r3, [r7, #30]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d306      	bcc.n	8003f68 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	699a      	ldr	r2, [r3, #24]
 8003f5e:	8bfb      	ldrh	r3, [r7, #30]
 8003f60:	1ad2      	subs	r2, r2, r3
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	619a      	str	r2, [r3, #24]
 8003f66:	e002      	b.n	8003f6e <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d11b      	bne.n	8003fae <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	4b52      	ldr	r3, [pc, #328]	@ (80040d0 <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003f92:	61bb      	str	r3, [r7, #24]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	441a      	add	r2, r3
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fac:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d017      	beq.n	8003fe8 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	4b42      	ldr	r3, [pc, #264]	@ (80040d4 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	441a      	add	r2, r3
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fe2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003fe6:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003fe8:	8bfb      	ldrh	r3, [r7, #30]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d06b      	beq.n	80040c6 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	6959      	ldr	r1, [r3, #20]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	891a      	ldrh	r2, [r3, #8]
 8003ffa:	8bfb      	ldrh	r3, [r7, #30]
 8003ffc:	f009 fed6 	bl	800ddac <USB_ReadPMA>
 8004000:	e061      	b.n	80040c6 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	4619      	mov	r1, r3
 800400c:	4610      	mov	r0, r2
 800400e:	f7ff f807 	bl	8003020 <PCD_GET_EP_DBUF1_CNT>
 8004012:	4603      	mov	r3, r0
 8004014:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	699a      	ldr	r2, [r3, #24]
 800401a:	8bfb      	ldrh	r3, [r7, #30]
 800401c:	429a      	cmp	r2, r3
 800401e:	d306      	bcc.n	800402e <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	699a      	ldr	r2, [r3, #24]
 8004024:	8bfb      	ldrh	r3, [r7, #30]
 8004026:	1ad2      	subs	r2, r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	619a      	str	r2, [r3, #24]
 800402c:	e002      	b.n	8004034 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	2200      	movs	r2, #0
 8004032:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d11b      	bne.n	8004074 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b20      	ldr	r3, [pc, #128]	@ (80040d0 <HAL_PCD_EP_DB_Receive+0x1ac>)
 800404e:	4013      	ands	r3, r2
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
 8004052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004054:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	441a      	add	r2, r3
 8004068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800406a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800406e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004072:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004074:	88fb      	ldrh	r3, [r7, #6]
 8004076:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407a:	2b00      	cmp	r3, #0
 800407c:	d117      	bne.n	80040ae <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4b11      	ldr	r3, [pc, #68]	@ (80040d4 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8004090:	4013      	ands	r3, r2
 8004092:	623b      	str	r3, [r7, #32]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	781b      	ldrb	r3, [r3, #0]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	441a      	add	r2, r3
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80040a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80040ac:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80040ae:	8bfb      	ldrh	r3, [r7, #30]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6818      	ldr	r0, [r3, #0]
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	6959      	ldr	r1, [r3, #20]
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	895a      	ldrh	r2, [r3, #10]
 80040c0:	8bfb      	ldrh	r3, [r7, #30]
 80040c2:	f009 fe73 	bl	800ddac <USB_ReadPMA>
    }
  }

  return count;
 80040c6:	8bfb      	ldrh	r3, [r7, #30]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3728      	adds	r7, #40	@ 0x28
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	07ffbf8f 	.word	0x07ffbf8f
 80040d4:	07ff8f8f 	.word	0x07ff8f8f

080040d8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b08e      	sub	sp, #56	@ 0x38
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040e6:	88fb      	ldrh	r3, [r7, #6]
 80040e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 81d5 	beq.w	800449c <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	4619      	mov	r1, r3
 80040fc:	4610      	mov	r0, r2
 80040fe:	f7fe ff6e 	bl	8002fde <PCD_GET_EP_DBUF0_CNT>
 8004102:	4603      	mov	r3, r0
 8004104:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	8bfb      	ldrh	r3, [r7, #30]
 800410c:	429a      	cmp	r2, r3
 800410e:	d906      	bls.n	800411e <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	699a      	ldr	r2, [r3, #24]
 8004114:	8bfb      	ldrh	r3, [r7, #30]
 8004116:	1ad2      	subs	r2, r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	619a      	str	r2, [r3, #24]
 800411c:	e002      	b.n	8004124 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2200      	movs	r2, #0
 8004122:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f040 80c1 	bne.w	80042b0 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	785b      	ldrb	r3, [r3, #1]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d124      	bne.n	8004180 <HAL_PCD_EP_DB_Transmit+0xa8>
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004140:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004150:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004154:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004164:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004174:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004178:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	e024      	b.n	80041ca <HAL_PCD_EP_DB_Transmit+0xf2>
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d120      	bne.n	80041ca <HAL_PCD_EP_DB_Transmit+0xf2>
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004192:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041a6:	b292      	uxth	r2, r2
 80041a8:	601a      	str	r2, [r3, #0]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80041b4:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	785b      	ldrb	r3, [r3, #1]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d124      	bne.n	800421c <HAL_PCD_EP_DB_Transmit+0x144>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041f0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80041f4:	605a      	str	r2, [r3, #4]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004200:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	00db      	lsls	r3, r3, #3
 800420c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004210:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004214:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	e024      	b.n	8004266 <HAL_PCD_EP_DB_Transmit+0x18e>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	785b      	ldrb	r3, [r3, #1]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d120      	bne.n	8004266 <HAL_PCD_EP_DB_Transmit+0x18e>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800422e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800423e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004242:	b292      	uxth	r2, r2
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004250:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800425e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004262:	6852      	ldr	r2, [r2, #4]
 8004264:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	4619      	mov	r1, r3
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f00a fbd0 	bl	800ea12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 82e5 	beq.w	8004848 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	4b8e      	ldr	r3, [pc, #568]	@ (80044c8 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8004290:	4013      	ands	r3, r2
 8004292:	637b      	str	r3, [r7, #52]	@ 0x34
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	441a      	add	r2, r3
 80042a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042ac:	6013      	str	r3, [r2, #0]
 80042ae:	e2cb      	b.n	8004848 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042b0:	88fb      	ldrh	r3, [r7, #6]
 80042b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d017      	beq.n	80042ea <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	4413      	add	r3, r2
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4b7f      	ldr	r3, [pc, #508]	@ (80044c8 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80042cc:	4013      	ands	r3, r2
 80042ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	441a      	add	r2, r3
 80042de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80042e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042e8:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	f040 82a9 	bne.w	8004848 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	8bfb      	ldrh	r3, [r7, #30]
 80042fc:	441a      	add	r2, r3
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	69da      	ldr	r2, [r3, #28]
 8004306:	8bfb      	ldrh	r3, [r7, #30]
 8004308:	441a      	add	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	6a1a      	ldr	r2, [r3, #32]
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	429a      	cmp	r2, r3
 8004318:	d309      	bcc.n	800432e <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	6a1a      	ldr	r2, [r3, #32]
 8004324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004326:	1ad2      	subs	r2, r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	621a      	str	r2, [r3, #32]
 800432c:	e014      	b.n	8004358 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8004336:	8bfb      	ldrh	r3, [r7, #30]
 8004338:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004342:	e009      	b.n	8004358 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2200      	movs	r2, #0
 8004348:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	2200      	movs	r2, #0
 8004356:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	785b      	ldrb	r3, [r3, #1]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d16a      	bne.n	8004436 <HAL_PCD_EP_DB_Transmit+0x35e>
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800436a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800437a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800437e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004386:	2b00      	cmp	r3, #0
 8004388:	d112      	bne.n	80043b0 <HAL_PCD_EP_DB_Transmit+0x2d8>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004394:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043a8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e06a      	b.n	8004486 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80043b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80043b4:	d81e      	bhi.n	80043f4 <HAL_PCD_EP_DB_Transmit+0x31c>
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	085b      	lsrs	r3, r3, #1
 80043ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_PCD_EP_DB_Transmit+0x2f4>
 80043c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c8:	3301      	adds	r3, #1
 80043ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043da:	6819      	ldr	r1, [r3, #0]
 80043dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043de:	069a      	lsls	r2, r3, #26
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043ee:	430a      	orrs	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	e048      	b.n	8004486 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fc:	f003 031f 	and.w	r3, r3, #31
 8004400:	2b00      	cmp	r3, #0
 8004402:	d102      	bne.n	800440a <HAL_PCD_EP_DB_Transmit+0x332>
 8004404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004406:	3b01      	subs	r3, #1
 8004408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004414:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800441c:	069b      	lsls	r3, r3, #26
 800441e:	431a      	orrs	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800442a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800442e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e027      	b.n	8004486 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	785b      	ldrb	r3, [r3, #1]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d123      	bne.n	8004486 <HAL_PCD_EP_DB_Transmit+0x3ae>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004448:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004458:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800445c:	b292      	uxth	r2, r2
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800446a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	041a      	lsls	r2, r3, #16
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	00db      	lsls	r3, r3, #3
 800447a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800447e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004482:	430a      	orrs	r2, r1
 8004484:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	6959      	ldr	r1, [r3, #20]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	891a      	ldrh	r2, [r3, #8]
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	b29b      	uxth	r3, r3
 8004496:	f009 fc28 	bl	800dcea <USB_WritePMA>
 800449a:	e1d5      	b.n	8004848 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f7fe fdba 	bl	8003020 <PCD_GET_EP_DBUF1_CNT>
 80044ac:	4603      	mov	r3, r0
 80044ae:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	699a      	ldr	r2, [r3, #24]
 80044b4:	8bfb      	ldrh	r3, [r7, #30]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d308      	bcc.n	80044cc <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	8bfb      	ldrh	r3, [r7, #30]
 80044c0:	1ad2      	subs	r2, r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	619a      	str	r2, [r3, #24]
 80044c6:	e004      	b.n	80044d2 <HAL_PCD_EP_DB_Transmit+0x3fa>
 80044c8:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2200      	movs	r2, #0
 80044d0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f040 80c1 	bne.w	800465e <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	785b      	ldrb	r3, [r3, #1]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d124      	bne.n	800452e <HAL_PCD_EP_DB_Transmit+0x456>
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004502:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004512:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004522:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004526:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	e024      	b.n	8004578 <HAL_PCD_EP_DB_Transmit+0x4a0>
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	785b      	ldrb	r3, [r3, #1]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d120      	bne.n	8004578 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004540:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004550:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004554:	b292      	uxth	r2, r2
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004562:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	00db      	lsls	r3, r3, #3
 800456c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004570:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	785b      	ldrb	r3, [r3, #1]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d124      	bne.n	80045ca <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	00db      	lsls	r3, r3, #3
 8004586:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800458a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800459a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800459e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80045a2:	605a      	str	r2, [r3, #4]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80045c2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80045c6:	605a      	str	r2, [r3, #4]
 80045c8:	e024      	b.n	8004614 <HAL_PCD_EP_DB_Transmit+0x53c>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	785b      	ldrb	r3, [r3, #1]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d120      	bne.n	8004614 <HAL_PCD_EP_DB_Transmit+0x53c>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80045f0:	b292      	uxth	r2, r2
 80045f2:	605a      	str	r2, [r3, #4]
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80045fe:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800460c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004610:	6852      	ldr	r2, [r2, #4]
 8004612:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	4619      	mov	r1, r3
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f00a f9f9 	bl	800ea12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004620:	88fb      	ldrh	r3, [r7, #6]
 8004622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 810e 	bne.w	8004848 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	461a      	mov	r2, r3
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4413      	add	r3, r2
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	4b95      	ldr	r3, [pc, #596]	@ (8004894 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800463e:	4013      	ands	r3, r2
 8004640:	623b      	str	r3, [r7, #32]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	441a      	add	r2, r3
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	e0f4      	b.n	8004848 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800465e:	88fb      	ldrh	r3, [r7, #6]
 8004660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d117      	bne.n	8004698 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	4b86      	ldr	r3, [pc, #536]	@ (8004894 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800467a:	4013      	ands	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	441a      	add	r2, r3
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004696:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800469e:	2b01      	cmp	r3, #1
 80046a0:	f040 80d2 	bne.w	8004848 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	695a      	ldr	r2, [r3, #20]
 80046a8:	8bfb      	ldrh	r3, [r7, #30]
 80046aa:	441a      	add	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	8bfb      	ldrh	r3, [r7, #30]
 80046b6:	441a      	add	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	6a1a      	ldr	r2, [r3, #32]
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d309      	bcc.n	80046dc <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	6a1a      	ldr	r2, [r3, #32]
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	1ad2      	subs	r2, r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	621a      	str	r2, [r3, #32]
 80046da:	e014      	b.n	8004706 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d106      	bne.n	80046f2 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 80046e4:	8bfb      	ldrh	r3, [r7, #30]
 80046e6:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80046f0:	e009      	b.n	8004706 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2200      	movs	r2, #0
 80046fc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	785b      	ldrb	r3, [r3, #1]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d16a      	bne.n	80047e4 <HAL_PCD_EP_DB_Transmit+0x70c>
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004718:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004728:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800472c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004730:	605a      	str	r2, [r3, #4]
 8004732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004734:	2b00      	cmp	r3, #0
 8004736:	d112      	bne.n	800475e <HAL_PCD_EP_DB_Transmit+0x686>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004742:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004752:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004756:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800475a:	605a      	str	r2, [r3, #4]
 800475c:	e06a      	b.n	8004834 <HAL_PCD_EP_DB_Transmit+0x75c>
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	2b3e      	cmp	r3, #62	@ 0x3e
 8004762:	d81e      	bhi.n	80047a2 <HAL_PCD_EP_DB_Transmit+0x6ca>
 8004764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_PCD_EP_DB_Transmit+0x6a2>
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	3301      	adds	r3, #1
 8004778:	61bb      	str	r3, [r7, #24]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004784:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	069a      	lsls	r2, r3, #26
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004798:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]
 80047a0:	e048      	b.n	8004834 <HAL_PCD_EP_DB_Transmit+0x75c>
 80047a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	61bb      	str	r3, [r7, #24]
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	f003 031f 	and.w	r3, r3, #31
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d102      	bne.n	80047b8 <HAL_PCD_EP_DB_Transmit+0x6e0>
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	3b01      	subs	r3, #1
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	00db      	lsls	r3, r3, #3
 80047be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	069b      	lsls	r3, r3, #26
 80047cc:	431a      	orrs	r2, r3
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	00db      	lsls	r3, r3, #3
 80047d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047dc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80047e0:	605a      	str	r2, [r3, #4]
 80047e2:	e027      	b.n	8004834 <HAL_PCD_EP_DB_Transmit+0x75c>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	785b      	ldrb	r3, [r3, #1]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d123      	bne.n	8004834 <HAL_PCD_EP_DB_Transmit+0x75c>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004806:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800480a:	b292      	uxth	r2, r2
 800480c:	605a      	str	r2, [r3, #4]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004818:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800481c:	6859      	ldr	r1, [r3, #4]
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	041a      	lsls	r2, r3, #16
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800482c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6818      	ldr	r0, [r3, #0]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	6959      	ldr	r1, [r3, #20]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	895a      	ldrh	r2, [r3, #10]
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	b29b      	uxth	r3, r3
 8004844:	f009 fa51 	bl	800dcea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	4b0f      	ldr	r3, [pc, #60]	@ (8004898 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 800485a:	4013      	ands	r3, r2
 800485c:	633b      	str	r3, [r7, #48]	@ 0x30
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	f083 0310 	eor.w	r3, r3, #16
 8004864:	633b      	str	r3, [r7, #48]	@ 0x30
 8004866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004868:	f083 0320 	eor.w	r3, r3, #32
 800486c:	633b      	str	r3, [r7, #48]	@ 0x30
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	441a      	add	r2, r3
 800487c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004886:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3738      	adds	r7, #56	@ 0x38
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	07ff8f8f 	.word	0x07ff8f8f
 8004898:	07ff8fbf 	.word	0x07ff8fbf

0800489c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	460b      	mov	r3, r1
 80048a8:	817b      	strh	r3, [r7, #10]
 80048aa:	4613      	mov	r3, r2
 80048ac:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80048ae:	897b      	ldrh	r3, [r7, #10]
 80048b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048ba:	897b      	ldrh	r3, [r7, #10]
 80048bc:	f003 0207 	and.w	r2, r3, #7
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	00db      	lsls	r3, r3, #3
 80048c8:	3310      	adds	r3, #16
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4413      	add	r3, r2
 80048ce:	3304      	adds	r3, #4
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	e00a      	b.n	80048ea <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048d4:	897a      	ldrh	r2, [r7, #10]
 80048d6:	4613      	mov	r3, r2
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	4413      	add	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	3304      	adds	r3, #4
 80048e8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80048ea:	893b      	ldrh	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d107      	bne.n	8004900 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	2200      	movs	r2, #0
 80048f4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	80da      	strh	r2, [r3, #6]
 80048fe:	e00b      	b.n	8004918 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	2201      	movs	r2, #1
 8004904:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	b29a      	uxth	r2, r3
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	b29a      	uxth	r2, r3
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	371c      	adds	r7, #28
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004926:	b480      	push	{r7}
 8004928:	b085      	sub	sp, #20
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004948:	f043 0201 	orr.w	r2, r3, #1
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004954:	f043 0202 	orr.w	r2, r3, #2
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
	...

08004984 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8004988:	4b05      	ldr	r3, [pc, #20]	@ (80049a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	4a04      	ldr	r2, [pc, #16]	@ (80049a0 <HAL_PWREx_EnableVddUSB+0x1c>)
 800498e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004992:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	44020800 	.word	0x44020800

080049a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b088      	sub	sp, #32
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d102      	bne.n	80049b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	f000 bc28 	b.w	8005208 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049b8:	4b94      	ldr	r3, [pc, #592]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	f003 0318 	and.w	r3, r3, #24
 80049c0:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80049c2:	4b92      	ldr	r3, [pc, #584]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 80049c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d05b      	beq.n	8004a90 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d005      	beq.n	80049ea <HAL_RCC_OscConfig+0x46>
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2b18      	cmp	r3, #24
 80049e2:	d114      	bne.n	8004a0e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d111      	bne.n	8004a0e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d102      	bne.n	80049f8 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	f000 bc08 	b.w	8005208 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80049f8:	4b84      	ldr	r3, [pc, #528]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	041b      	lsls	r3, r3, #16
 8004a06:	4981      	ldr	r1, [pc, #516]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004a0c:	e040      	b.n	8004a90 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d023      	beq.n	8004a5e <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a16:	4b7d      	ldr	r3, [pc, #500]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a7c      	ldr	r2, [pc, #496]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a22:	f7fd fd85 	bl	8002530 <HAL_GetTick>
 8004a26:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004a2a:	f7fd fd81 	bl	8002530 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e3e5      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004a3c:	4b73      	ldr	r3, [pc, #460]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004a48:	4b70      	ldr	r3, [pc, #448]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004a4a:	699b      	ldr	r3, [r3, #24]
 8004a4c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	496d      	ldr	r1, [pc, #436]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	618b      	str	r3, [r1, #24]
 8004a5c:	e018      	b.n	8004a90 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a5e:	4b6b      	ldr	r3, [pc, #428]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a6a      	ldr	r2, [pc, #424]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004a64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a6a:	f7fd fd61 	bl	8002530 <HAL_GetTick>
 8004a6e:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004a72:	f7fd fd5d 	bl	8002530 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e3c1      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004a84:	4b61      	ldr	r3, [pc, #388]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1f0      	bne.n	8004a72 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 80a0 	beq.w	8004bde <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	2b10      	cmp	r3, #16
 8004aa2:	d005      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x10c>
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b18      	cmp	r3, #24
 8004aa8:	d109      	bne.n	8004abe <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	d106      	bne.n	8004abe <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f040 8092 	bne.w	8004bde <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e3a4      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac6:	d106      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x132>
 8004ac8:	4b50      	ldr	r3, [pc, #320]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a4f      	ldr	r2, [pc, #316]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	e058      	b.n	8004b88 <HAL_RCC_OscConfig+0x1e4>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d112      	bne.n	8004b04 <HAL_RCC_OscConfig+0x160>
 8004ade:	4b4b      	ldr	r3, [pc, #300]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a4a      	ldr	r2, [pc, #296]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004ae4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	4b48      	ldr	r3, [pc, #288]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a47      	ldr	r2, [pc, #284]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004af0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	4b45      	ldr	r3, [pc, #276]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a44      	ldr	r2, [pc, #272]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004afc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	e041      	b.n	8004b88 <HAL_RCC_OscConfig+0x1e4>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b0c:	d112      	bne.n	8004b34 <HAL_RCC_OscConfig+0x190>
 8004b0e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a3e      	ldr	r2, [pc, #248]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a3b      	ldr	r2, [pc, #236]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b20:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b39      	ldr	r3, [pc, #228]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a38      	ldr	r2, [pc, #224]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e029      	b.n	8004b88 <HAL_RCC_OscConfig+0x1e4>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8004b3c:	d112      	bne.n	8004b64 <HAL_RCC_OscConfig+0x1c0>
 8004b3e:	4b33      	ldr	r3, [pc, #204]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a32      	ldr	r2, [pc, #200]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	4b30      	ldr	r3, [pc, #192]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a2f      	ldr	r2, [pc, #188]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	4b2d      	ldr	r3, [pc, #180]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e011      	b.n	8004b88 <HAL_RCC_OscConfig+0x1e4>
 8004b64:	4b29      	ldr	r3, [pc, #164]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a28      	ldr	r2, [pc, #160]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	4b26      	ldr	r3, [pc, #152]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a25      	ldr	r2, [pc, #148]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b7a:	6013      	str	r3, [r2, #0]
 8004b7c:	4b23      	ldr	r3, [pc, #140]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a22      	ldr	r2, [pc, #136]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004b82:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d013      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b90:	f7fd fcce 	bl	8002530 <HAL_GetTick>
 8004b94:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b96:	e008      	b.n	8004baa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004b98:	f7fd fcca 	bl	8002530 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	2b64      	cmp	r3, #100	@ 0x64
 8004ba4:	d901      	bls.n	8004baa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e32e      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004baa:	4b18      	ldr	r3, [pc, #96]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0f0      	beq.n	8004b98 <HAL_RCC_OscConfig+0x1f4>
 8004bb6:	e012      	b.n	8004bde <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fd fcba 	bl	8002530 <HAL_GetTick>
 8004bbc:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004bc0:	f7fd fcb6 	bl	8002530 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b64      	cmp	r3, #100	@ 0x64
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e31a      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8004c0c <HAL_RCC_OscConfig+0x268>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 809a 	beq.w	8004d20 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_RCC_OscConfig+0x25a>
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	2b18      	cmp	r3, #24
 8004bf6:	d149      	bne.n	8004c8c <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d146      	bne.n	8004c8c <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e2fe      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
 8004c0a:	bf00      	nop
 8004c0c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d11c      	bne.n	8004c50 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004c16:	4b9a      	ldr	r3, [pc, #616]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0218 	and.w	r2, r3, #24
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d014      	beq.n	8004c50 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004c26:	4b96      	ldr	r3, [pc, #600]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f023 0218 	bic.w	r2, r3, #24
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	4993      	ldr	r1, [pc, #588]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8004c38:	f000 fdd0 	bl	80057dc <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c3c:	4b91      	ldr	r3, [pc, #580]	@ (8004e84 <HAL_RCC_OscConfig+0x4e0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7fd fbeb 	bl	800241c <HAL_InitTick>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e2db      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c50:	f7fd fc6e 	bl	8002530 <HAL_GetTick>
 8004c54:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004c58:	f7fd fc6a 	bl	8002530 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e2ce      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c6a:	4b85      	ldr	r3, [pc, #532]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004c76:	4b82      	ldr	r3, [pc, #520]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	041b      	lsls	r3, r3, #16
 8004c84:	497e      	ldr	r1, [pc, #504]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004c8a:	e049      	b.n	8004d20 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d02c      	beq.n	8004cee <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004c94:	4b7a      	ldr	r3, [pc, #488]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f023 0218 	bic.w	r2, r3, #24
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691b      	ldr	r3, [r3, #16]
 8004ca0:	4977      	ldr	r1, [pc, #476]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004ca6:	4b76      	ldr	r3, [pc, #472]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a75      	ldr	r2, [pc, #468]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb2:	f7fd fc3d 	bl	8002530 <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004cba:	f7fd fc39 	bl	8002530 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e29d      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ccc:	4b6c      	ldr	r3, [pc, #432]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004cd8:	4b69      	ldr	r3, [pc, #420]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	4966      	ldr	r1, [pc, #408]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	610b      	str	r3, [r1, #16]
 8004cec:	e018      	b.n	8004d20 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cee:	4b64      	ldr	r3, [pc, #400]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a63      	ldr	r2, [pc, #396]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004cf4:	f023 0301 	bic.w	r3, r3, #1
 8004cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfa:	f7fd fc19 	bl	8002530 <HAL_GetTick>
 8004cfe:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004d02:	f7fd fc15 	bl	8002530 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e279      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d14:	4b5a      	ldr	r3, [pc, #360]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f0      	bne.n	8004d02 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d03c      	beq.n	8004da6 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01c      	beq.n	8004d6e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d34:	4b52      	ldr	r3, [pc, #328]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d3a:	4a51      	ldr	r2, [pc, #324]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004d3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fd fbf4 	bl	8002530 <HAL_GetTick>
 8004d48:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004d4c:	f7fd fbf0 	bl	8002530 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e254      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004d5e:	4b48      	ldr	r3, [pc, #288]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d0ef      	beq.n	8004d4c <HAL_RCC_OscConfig+0x3a8>
 8004d6c:	e01b      	b.n	8004da6 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d6e:	4b44      	ldr	r3, [pc, #272]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d74:	4a42      	ldr	r2, [pc, #264]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004d76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7e:	f7fd fbd7 	bl	8002530 <HAL_GetTick>
 8004d82:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004d86:	f7fd fbd3 	bl	8002530 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e237      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004d98:	4b39      	ldr	r3, [pc, #228]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004d9a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004d9e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1ef      	bne.n	8004d86 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80d2 	beq.w	8004f58 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004db4:	4b34      	ldr	r3, [pc, #208]	@ (8004e88 <HAL_RCC_OscConfig+0x4e4>)
 8004db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d118      	bne.n	8004df2 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004dc0:	4b31      	ldr	r3, [pc, #196]	@ (8004e88 <HAL_RCC_OscConfig+0x4e4>)
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	4a30      	ldr	r2, [pc, #192]	@ (8004e88 <HAL_RCC_OscConfig+0x4e4>)
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dcc:	f7fd fbb0 	bl	8002530 <HAL_GetTick>
 8004dd0:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd4:	f7fd fbac 	bl	8002530 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e210      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004de6:	4b28      	ldr	r3, [pc, #160]	@ (8004e88 <HAL_RCC_OscConfig+0x4e4>)
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	f003 0301 	and.w	r3, r3, #1
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d108      	bne.n	8004e0c <HAL_RCC_OscConfig+0x468>
 8004dfa:	4b21      	ldr	r3, [pc, #132]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e00:	4a1f      	ldr	r2, [pc, #124]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e0a:	e074      	b.n	8004ef6 <HAL_RCC_OscConfig+0x552>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d118      	bne.n	8004e46 <HAL_RCC_OscConfig+0x4a2>
 8004e14:	4b1a      	ldr	r3, [pc, #104]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e1a:	4a19      	ldr	r2, [pc, #100]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004e1c:	f023 0301 	bic.w	r3, r3, #1
 8004e20:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e24:	4b16      	ldr	r3, [pc, #88]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004e26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e2a:	4a15      	ldr	r2, [pc, #84]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004e2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e30:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e34:	4b12      	ldr	r3, [pc, #72]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e3a:	4a11      	ldr	r2, [pc, #68]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004e3c:	f023 0304 	bic.w	r3, r3, #4
 8004e40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e44:	e057      	b.n	8004ef6 <HAL_RCC_OscConfig+0x552>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	2b05      	cmp	r3, #5
 8004e4c:	d11e      	bne.n	8004e8c <HAL_RCC_OscConfig+0x4e8>
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e54:	4a0a      	ldr	r2, [pc, #40]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004e56:	f043 0304 	orr.w	r3, r3, #4
 8004e5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e5e:	4b08      	ldr	r3, [pc, #32]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e64:	4a06      	ldr	r2, [pc, #24]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e6a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e6e:	4b04      	ldr	r3, [pc, #16]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e74:	4a02      	ldr	r2, [pc, #8]	@ (8004e80 <HAL_RCC_OscConfig+0x4dc>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004e7e:	e03a      	b.n	8004ef6 <HAL_RCC_OscConfig+0x552>
 8004e80:	44020c00 	.word	0x44020c00
 8004e84:	20000024 	.word	0x20000024
 8004e88:	44020800 	.word	0x44020800
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	2b85      	cmp	r3, #133	@ 0x85
 8004e92:	d118      	bne.n	8004ec6 <HAL_RCC_OscConfig+0x522>
 8004e94:	4ba2      	ldr	r3, [pc, #648]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004e96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004e9a:	4aa1      	ldr	r2, [pc, #644]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004e9c:	f043 0304 	orr.w	r3, r3, #4
 8004ea0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ea4:	4b9e      	ldr	r3, [pc, #632]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004ea6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eaa:	4a9d      	ldr	r2, [pc, #628]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004eb0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004eb4:	4b9a      	ldr	r3, [pc, #616]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004eb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eba:	4a99      	ldr	r2, [pc, #612]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004ebc:	f043 0301 	orr.w	r3, r3, #1
 8004ec0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ec4:	e017      	b.n	8004ef6 <HAL_RCC_OscConfig+0x552>
 8004ec6:	4b96      	ldr	r3, [pc, #600]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004ec8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ecc:	4a94      	ldr	r2, [pc, #592]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ed6:	4b92      	ldr	r3, [pc, #584]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004edc:	4a90      	ldr	r2, [pc, #576]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004ede:	f023 0304 	bic.w	r3, r3, #4
 8004ee2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004ee6:	4b8e      	ldr	r3, [pc, #568]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004ee8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004eec:	4a8c      	ldr	r2, [pc, #560]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ef2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d016      	beq.n	8004f2c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004efe:	f7fd fb17 	bl	8002530 <HAL_GetTick>
 8004f02:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f04:	e00a      	b.n	8004f1c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7fd fb13 	bl	8002530 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e175      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f1c:	4b80      	ldr	r3, [pc, #512]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0ed      	beq.n	8004f06 <HAL_RCC_OscConfig+0x562>
 8004f2a:	e015      	b.n	8004f58 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2c:	f7fd fb00 	bl	8002530 <HAL_GetTick>
 8004f30:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f32:	e00a      	b.n	8004f4a <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f34:	f7fd fafc 	bl	8002530 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e15e      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f4a:	4b75      	ldr	r3, [pc, #468]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004f4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1ed      	bne.n	8004f34 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d036      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d019      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a6b      	ldr	r2, [pc, #428]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004f72:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f78:	f7fd fada 	bl	8002530 <HAL_GetTick>
 8004f7c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004f80:	f7fd fad6 	bl	8002530 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e13a      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004f92:	4b63      	ldr	r3, [pc, #396]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0f0      	beq.n	8004f80 <HAL_RCC_OscConfig+0x5dc>
 8004f9e:	e018      	b.n	8004fd2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004fa0:	4b5f      	ldr	r3, [pc, #380]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a5e      	ldr	r2, [pc, #376]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004fa6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004faa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fac:	f7fd fac0 	bl	8002530 <HAL_GetTick>
 8004fb0:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004fb2:	e008      	b.n	8004fc6 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004fb4:	f7fd fabc 	bl	8002530 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e120      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004fc6:	4b56      	ldr	r3, [pc, #344]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8115 	beq.w	8005206 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	2b18      	cmp	r3, #24
 8004fe0:	f000 80af 	beq.w	8005142 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe8:	2b02      	cmp	r3, #2
 8004fea:	f040 8086 	bne.w	80050fa <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004fee:	4b4c      	ldr	r3, [pc, #304]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a4b      	ldr	r2, [pc, #300]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8004ff4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7fd fa99 	bl	8002530 <HAL_GetTick>
 8004ffe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005002:	f7fd fa95 	bl	8002530 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e0f9      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005014:	4b42      	ldr	r3, [pc, #264]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8005020:	4b3f      	ldr	r3, [pc, #252]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8005022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005024:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005028:	f023 0303 	bic.w	r3, r3, #3
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005034:	0212      	lsls	r2, r2, #8
 8005036:	430a      	orrs	r2, r1
 8005038:	4939      	ldr	r1, [pc, #228]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 800503a:	4313      	orrs	r3, r2
 800503c:	628b      	str	r3, [r1, #40]	@ 0x28
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005042:	3b01      	subs	r3, #1
 8005044:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504c:	3b01      	subs	r3, #1
 800504e:	025b      	lsls	r3, r3, #9
 8005050:	b29b      	uxth	r3, r3
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005058:	3b01      	subs	r3, #1
 800505a:	041b      	lsls	r3, r3, #16
 800505c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005060:	431a      	orrs	r2, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005066:	3b01      	subs	r3, #1
 8005068:	061b      	lsls	r3, r3, #24
 800506a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800506e:	492c      	ldr	r1, [pc, #176]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8005070:	4313      	orrs	r3, r2
 8005072:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005074:	4b2a      	ldr	r3, [pc, #168]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	4a29      	ldr	r2, [pc, #164]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 800507a:	f023 0310 	bic.w	r3, r3, #16
 800507e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005084:	4a26      	ldr	r2, [pc, #152]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800508a:	4b25      	ldr	r3, [pc, #148]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 800508c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508e:	4a24      	ldr	r2, [pc, #144]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8005090:	f043 0310 	orr.w	r3, r3, #16
 8005094:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8005096:	4b22      	ldr	r3, [pc, #136]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8005098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509a:	f023 020c 	bic.w	r2, r3, #12
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a2:	491f      	ldr	r1, [pc, #124]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80050a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	f023 0220 	bic.w	r2, r3, #32
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050b4:	491a      	ldr	r1, [pc, #104]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050ba:	4b19      	ldr	r3, [pc, #100]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 80050bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050be:	4a18      	ldr	r2, [pc, #96]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 80050c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050c4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80050c6:	4b16      	ldr	r3, [pc, #88]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a15      	ldr	r2, [pc, #84]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 80050cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d2:	f7fd fa2d 	bl	8002530 <HAL_GetTick>
 80050d6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80050da:	f7fd fa29 	bl	8002530 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e08d      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80050ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0f0      	beq.n	80050da <HAL_RCC_OscConfig+0x736>
 80050f8:	e085      	b.n	8005206 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80050fa:	4b09      	ldr	r3, [pc, #36]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a08      	ldr	r2, [pc, #32]	@ (8005120 <HAL_RCC_OscConfig+0x77c>)
 8005100:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005106:	f7fd fa13 	bl	8002530 <HAL_GetTick>
 800510a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800510c:	e00a      	b.n	8005124 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800510e:	f7fd fa0f 	bl	8002530 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b02      	cmp	r3, #2
 800511a:	d903      	bls.n	8005124 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e073      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
 8005120:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005124:	4b3a      	ldr	r3, [pc, #232]	@ (8005210 <HAL_RCC_OscConfig+0x86c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1ee      	bne.n	800510e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005130:	4b37      	ldr	r3, [pc, #220]	@ (8005210 <HAL_RCC_OscConfig+0x86c>)
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	4a36      	ldr	r2, [pc, #216]	@ (8005210 <HAL_RCC_OscConfig+0x86c>)
 8005136:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800513a:	f023 0303 	bic.w	r3, r3, #3
 800513e:	6293      	str	r3, [r2, #40]	@ 0x28
 8005140:	e061      	b.n	8005206 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005142:	4b33      	ldr	r3, [pc, #204]	@ (8005210 <HAL_RCC_OscConfig+0x86c>)
 8005144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005146:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005148:	4b31      	ldr	r3, [pc, #196]	@ (8005210 <HAL_RCC_OscConfig+0x86c>)
 800514a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514c:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005152:	2b01      	cmp	r3, #1
 8005154:	d031      	beq.n	80051ba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f003 0203 	and.w	r2, r3, #3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005160:	429a      	cmp	r2, r3
 8005162:	d12a      	bne.n	80051ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	0a1b      	lsrs	r3, r3, #8
 8005168:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005170:	429a      	cmp	r2, r3
 8005172:	d122      	bne.n	80051ba <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800517e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005180:	429a      	cmp	r2, r3
 8005182:	d11a      	bne.n	80051ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	0a5b      	lsrs	r3, r3, #9
 8005188:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005190:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005192:	429a      	cmp	r2, r3
 8005194:	d111      	bne.n	80051ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	0c1b      	lsrs	r3, r3, #16
 800519a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d108      	bne.n	80051ba <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	0e1b      	lsrs	r3, r3, #24
 80051ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d001      	beq.n	80051be <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e024      	b.n	8005208 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80051be:	4b14      	ldr	r3, [pc, #80]	@ (8005210 <HAL_RCC_OscConfig+0x86c>)
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	08db      	lsrs	r3, r3, #3
 80051c4:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d01a      	beq.n	8005206 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80051d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005210 <HAL_RCC_OscConfig+0x86c>)
 80051d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d4:	4a0e      	ldr	r2, [pc, #56]	@ (8005210 <HAL_RCC_OscConfig+0x86c>)
 80051d6:	f023 0310 	bic.w	r3, r3, #16
 80051da:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051dc:	f7fd f9a8 	bl	8002530 <HAL_GetTick>
 80051e0:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80051e2:	bf00      	nop
 80051e4:	f7fd f9a4 	bl	8002530 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d0f9      	beq.n	80051e4 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051f4:	4a06      	ldr	r2, [pc, #24]	@ (8005210 <HAL_RCC_OscConfig+0x86c>)
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80051fa:	4b05      	ldr	r3, [pc, #20]	@ (8005210 <HAL_RCC_OscConfig+0x86c>)
 80051fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051fe:	4a04      	ldr	r2, [pc, #16]	@ (8005210 <HAL_RCC_OscConfig+0x86c>)
 8005200:	f043 0310 	orr.w	r3, r3, #16
 8005204:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3720      	adds	r7, #32
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	44020c00 	.word	0x44020c00

08005214 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e19e      	b.n	8005566 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005228:	4b83      	ldr	r3, [pc, #524]	@ (8005438 <HAL_RCC_ClockConfig+0x224>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d910      	bls.n	8005258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005236:	4b80      	ldr	r3, [pc, #512]	@ (8005438 <HAL_RCC_ClockConfig+0x224>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f023 020f 	bic.w	r2, r3, #15
 800523e:	497e      	ldr	r1, [pc, #504]	@ (8005438 <HAL_RCC_ClockConfig+0x224>)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	4313      	orrs	r3, r2
 8005244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005246:	4b7c      	ldr	r3, [pc, #496]	@ (8005438 <HAL_RCC_ClockConfig+0x224>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d001      	beq.n	8005258 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e186      	b.n	8005566 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	2b00      	cmp	r3, #0
 8005262:	d012      	beq.n	800528a <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	695a      	ldr	r2, [r3, #20]
 8005268:	4b74      	ldr	r3, [pc, #464]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	0a1b      	lsrs	r3, r3, #8
 800526e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005272:	429a      	cmp	r2, r3
 8005274:	d909      	bls.n	800528a <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005276:	4b71      	ldr	r3, [pc, #452]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	496d      	ldr	r1, [pc, #436]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 8005286:	4313      	orrs	r3, r2
 8005288:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b00      	cmp	r3, #0
 8005294:	d012      	beq.n	80052bc <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	4b68      	ldr	r3, [pc, #416]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 800529c:	6a1b      	ldr	r3, [r3, #32]
 800529e:	091b      	lsrs	r3, r3, #4
 80052a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d909      	bls.n	80052bc <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80052a8:	4b64      	ldr	r3, [pc, #400]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 80052aa:	6a1b      	ldr	r3, [r3, #32]
 80052ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	4961      	ldr	r1, [pc, #388]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d010      	beq.n	80052ea <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	4b5b      	ldr	r3, [pc, #364]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d908      	bls.n	80052ea <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80052d8:	4b58      	ldr	r3, [pc, #352]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	4955      	ldr	r1, [pc, #340]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0302 	and.w	r3, r3, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d010      	beq.n	8005318 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	4b50      	ldr	r3, [pc, #320]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f003 030f 	and.w	r3, r3, #15
 8005302:	429a      	cmp	r2, r3
 8005304:	d908      	bls.n	8005318 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005306:	4b4d      	ldr	r3, [pc, #308]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f023 020f 	bic.w	r2, r3, #15
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	494a      	ldr	r1, [pc, #296]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 8005314:	4313      	orrs	r3, r2
 8005316:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0301 	and.w	r3, r3, #1
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8093 	beq.w	800544c <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b03      	cmp	r3, #3
 800532c:	d107      	bne.n	800533e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800532e:	4b43      	ldr	r3, [pc, #268]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d121      	bne.n	800537e <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e113      	b.n	8005566 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005346:	4b3d      	ldr	r3, [pc, #244]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d115      	bne.n	800537e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e107      	b.n	8005566 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d107      	bne.n	800536e <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800535e:	4b37      	ldr	r3, [pc, #220]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005366:	2b00      	cmp	r3, #0
 8005368:	d109      	bne.n	800537e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e0fb      	b.n	8005566 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800536e:	4b33      	ldr	r3, [pc, #204]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e0f3      	b.n	8005566 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800537e:	4b2f      	ldr	r3, [pc, #188]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	f023 0203 	bic.w	r2, r3, #3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	492c      	ldr	r1, [pc, #176]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 800538c:	4313      	orrs	r3, r2
 800538e:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005390:	f7fd f8ce 	bl	8002530 <HAL_GetTick>
 8005394:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b03      	cmp	r3, #3
 800539c:	d112      	bne.n	80053c4 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800539e:	e00a      	b.n	80053b6 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80053a0:	f7fd f8c6 	bl	8002530 <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e0d7      	b.n	8005566 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053b6:	4b21      	ldr	r3, [pc, #132]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 80053b8:	69db      	ldr	r3, [r3, #28]
 80053ba:	f003 0318 	and.w	r3, r3, #24
 80053be:	2b18      	cmp	r3, #24
 80053c0:	d1ee      	bne.n	80053a0 <HAL_RCC_ClockConfig+0x18c>
 80053c2:	e043      	b.n	800544c <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d112      	bne.n	80053f2 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80053ce:	f7fd f8af 	bl	8002530 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e0c0      	b.n	8005566 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80053e4:	4b15      	ldr	r3, [pc, #84]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	f003 0318 	and.w	r3, r3, #24
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d1ee      	bne.n	80053ce <HAL_RCC_ClockConfig+0x1ba>
 80053f0:	e02c      	b.n	800544c <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d122      	bne.n	8005440 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80053fa:	e00a      	b.n	8005412 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80053fc:	f7fd f898 	bl	8002530 <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	f241 3288 	movw	r2, #5000	@ 0x1388
 800540a:	4293      	cmp	r3, r2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e0a9      	b.n	8005566 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005412:	4b0a      	ldr	r3, [pc, #40]	@ (800543c <HAL_RCC_ClockConfig+0x228>)
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	f003 0318 	and.w	r3, r3, #24
 800541a:	2b08      	cmp	r3, #8
 800541c:	d1ee      	bne.n	80053fc <HAL_RCC_ClockConfig+0x1e8>
 800541e:	e015      	b.n	800544c <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005420:	f7fd f886 	bl	8002530 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800542e:	4293      	cmp	r3, r2
 8005430:	d906      	bls.n	8005440 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e097      	b.n	8005566 <HAL_RCC_ClockConfig+0x352>
 8005436:	bf00      	nop
 8005438:	40022000 	.word	0x40022000
 800543c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005440:	4b4b      	ldr	r3, [pc, #300]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f003 0318 	and.w	r3, r3, #24
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1e9      	bne.n	8005420 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d010      	beq.n	800547a <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689a      	ldr	r2, [r3, #8]
 800545c:	4b44      	ldr	r3, [pc, #272]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	429a      	cmp	r2, r3
 8005466:	d208      	bcs.n	800547a <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005468:	4b41      	ldr	r3, [pc, #260]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f023 020f 	bic.w	r2, r3, #15
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	493e      	ldr	r1, [pc, #248]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 8005476:	4313      	orrs	r3, r2
 8005478:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800547a:	4b3e      	ldr	r3, [pc, #248]	@ (8005574 <HAL_RCC_ClockConfig+0x360>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d210      	bcs.n	80054aa <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005488:	4b3a      	ldr	r3, [pc, #232]	@ (8005574 <HAL_RCC_ClockConfig+0x360>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f023 020f 	bic.w	r2, r3, #15
 8005490:	4938      	ldr	r1, [pc, #224]	@ (8005574 <HAL_RCC_ClockConfig+0x360>)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	4313      	orrs	r3, r2
 8005496:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005498:	4b36      	ldr	r3, [pc, #216]	@ (8005574 <HAL_RCC_ClockConfig+0x360>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d001      	beq.n	80054aa <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e05d      	b.n	8005566 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0304 	and.w	r3, r3, #4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d010      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68da      	ldr	r2, [r3, #12]
 80054ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d208      	bcs.n	80054d8 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80054c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	4927      	ldr	r1, [pc, #156]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d012      	beq.n	800550a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	4b21      	ldr	r3, [pc, #132]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 80054ea:	6a1b      	ldr	r3, [r3, #32]
 80054ec:	091b      	lsrs	r3, r3, #4
 80054ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d209      	bcs.n	800550a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80054f6:	4b1e      	ldr	r3, [pc, #120]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	011b      	lsls	r3, r3, #4
 8005504:	491a      	ldr	r1, [pc, #104]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 8005506:	4313      	orrs	r3, r2
 8005508:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	d012      	beq.n	800553c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695a      	ldr	r2, [r3, #20]
 800551a:	4b15      	ldr	r3, [pc, #84]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005524:	429a      	cmp	r2, r3
 8005526:	d209      	bcs.n	800553c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005528:	4b11      	ldr	r3, [pc, #68]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	695b      	ldr	r3, [r3, #20]
 8005534:	021b      	lsls	r3, r3, #8
 8005536:	490e      	ldr	r1, [pc, #56]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 8005538:	4313      	orrs	r3, r2
 800553a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800553c:	f000 f822 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 8005540:	4602      	mov	r2, r0
 8005542:	4b0b      	ldr	r3, [pc, #44]	@ (8005570 <HAL_RCC_ClockConfig+0x35c>)
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f003 030f 	and.w	r3, r3, #15
 800554a:	490b      	ldr	r1, [pc, #44]	@ (8005578 <HAL_RCC_ClockConfig+0x364>)
 800554c:	5ccb      	ldrb	r3, [r1, r3]
 800554e:	fa22 f303 	lsr.w	r3, r2, r3
 8005552:	4a0a      	ldr	r2, [pc, #40]	@ (800557c <HAL_RCC_ClockConfig+0x368>)
 8005554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005556:	4b0a      	ldr	r3, [pc, #40]	@ (8005580 <HAL_RCC_ClockConfig+0x36c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f7fc ff5e 	bl	800241c <HAL_InitTick>
 8005560:	4603      	mov	r3, r0
 8005562:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005564:	7afb      	ldrb	r3, [r7, #11]
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	44020c00 	.word	0x44020c00
 8005574:	40022000 	.word	0x40022000
 8005578:	08011894 	.word	0x08011894
 800557c:	20000004 	.word	0x20000004
 8005580:	20000024 	.word	0x20000024

08005584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005584:	b480      	push	{r7}
 8005586:	b089      	sub	sp, #36	@ 0x24
 8005588:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800558a:	4b8c      	ldr	r3, [pc, #560]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	f003 0318 	and.w	r3, r3, #24
 8005592:	2b08      	cmp	r3, #8
 8005594:	d102      	bne.n	800559c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005596:	4b8a      	ldr	r3, [pc, #552]	@ (80057c0 <HAL_RCC_GetSysClockFreq+0x23c>)
 8005598:	61fb      	str	r3, [r7, #28]
 800559a:	e107      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800559c:	4b87      	ldr	r3, [pc, #540]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 800559e:	69db      	ldr	r3, [r3, #28]
 80055a0:	f003 0318 	and.w	r3, r3, #24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d112      	bne.n	80055ce <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80055a8:	4b84      	ldr	r3, [pc, #528]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0320 	and.w	r3, r3, #32
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d009      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80055b4:	4b81      	ldr	r3, [pc, #516]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	08db      	lsrs	r3, r3, #3
 80055ba:	f003 0303 	and.w	r3, r3, #3
 80055be:	4a81      	ldr	r2, [pc, #516]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x240>)
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
 80055c4:	61fb      	str	r3, [r7, #28]
 80055c6:	e0f1      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80055c8:	4b7e      	ldr	r3, [pc, #504]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x240>)
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	e0ee      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055ce:	4b7b      	ldr	r3, [pc, #492]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f003 0318 	and.w	r3, r3, #24
 80055d6:	2b10      	cmp	r3, #16
 80055d8:	d102      	bne.n	80055e0 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055da:	4b7b      	ldr	r3, [pc, #492]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x244>)
 80055dc:	61fb      	str	r3, [r7, #28]
 80055de:	e0e5      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055e0:	4b76      	ldr	r3, [pc, #472]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f003 0318 	and.w	r3, r3, #24
 80055e8:	2b18      	cmp	r3, #24
 80055ea:	f040 80dd 	bne.w	80057a8 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80055ee:	4b73      	ldr	r3, [pc, #460]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 80055f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80055f8:	4b70      	ldr	r3, [pc, #448]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 80055fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055fc:	0a1b      	lsrs	r3, r3, #8
 80055fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005602:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005604:	4b6d      	ldr	r3, [pc, #436]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 8005606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005608:	091b      	lsrs	r3, r3, #4
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005610:	4b6a      	ldr	r3, [pc, #424]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 8005612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8005614:	08db      	lsrs	r3, r3, #3
 8005616:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	fb02 f303 	mul.w	r3, r2, r3
 8005620:	ee07 3a90 	vmov	s15, r3
 8005624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005628:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80b7 	beq.w	80057a2 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d003      	beq.n	8005642 <HAL_RCC_GetSysClockFreq+0xbe>
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b03      	cmp	r3, #3
 800563e:	d056      	beq.n	80056ee <HAL_RCC_GetSysClockFreq+0x16a>
 8005640:	e077      	b.n	8005732 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005642:	4b5e      	ldr	r3, [pc, #376]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d02d      	beq.n	80056aa <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800564e:	4b5b      	ldr	r3, [pc, #364]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	08db      	lsrs	r3, r3, #3
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	4a5a      	ldr	r2, [pc, #360]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x240>)
 800565a:	fa22 f303 	lsr.w	r3, r2, r3
 800565e:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	ee07 3a90 	vmov	s15, r3
 8005670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005674:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005678:	4b50      	ldr	r3, [pc, #320]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 800567a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005680:	ee07 3a90 	vmov	s15, r3
 8005684:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005688:	ed97 6a02 	vldr	s12, [r7, #8]
 800568c:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80057cc <HAL_RCC_GetSysClockFreq+0x248>
 8005690:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005694:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005698:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800569c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a4:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80056a8:	e065      	b.n	8005776 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	ee07 3a90 	vmov	s15, r3
 80056b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b4:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80057d0 <HAL_RCC_GetSysClockFreq+0x24c>
 80056b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056bc:	4b3f      	ldr	r3, [pc, #252]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 80056be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c4:	ee07 3a90 	vmov	s15, r3
 80056c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80056cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80056d0:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80057cc <HAL_RCC_GetSysClockFreq+0x248>
 80056d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80056dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e8:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80056ec:	e043      	b.n	8005776 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	ee07 3a90 	vmov	s15, r3
 80056f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f8:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80057d4 <HAL_RCC_GetSysClockFreq+0x250>
 80056fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005700:	4b2e      	ldr	r3, [pc, #184]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 8005702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005708:	ee07 3a90 	vmov	s15, r3
 800570c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005710:	ed97 6a02 	vldr	s12, [r7, #8]
 8005714:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80057cc <HAL_RCC_GetSysClockFreq+0x248>
 8005718:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800571c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005720:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005724:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8005730:	e021      	b.n	8005776 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	ee07 3a90 	vmov	s15, r3
 8005738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80057d8 <HAL_RCC_GetSysClockFreq+0x254>
 8005740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005744:	4b1d      	ldr	r3, [pc, #116]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 8005746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005754:	ed97 6a02 	vldr	s12, [r7, #8]
 8005758:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80057cc <HAL_RCC_GetSysClockFreq+0x248>
 800575c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005760:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005764:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005768:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800576c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005770:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005774:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8005776:	4b11      	ldr	r3, [pc, #68]	@ (80057bc <HAL_RCC_GetSysClockFreq+0x238>)
 8005778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577a:	0a5b      	lsrs	r3, r3, #9
 800577c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005780:	3301      	adds	r3, #1
 8005782:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800578e:	edd7 6a06 	vldr	s13, [r7, #24]
 8005792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579a:	ee17 3a90 	vmov	r3, s15
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	e004      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	61fb      	str	r3, [r7, #28]
 80057a6:	e001      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80057a8:	4b06      	ldr	r3, [pc, #24]	@ (80057c4 <HAL_RCC_GetSysClockFreq+0x240>)
 80057aa:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80057ac:	69fb      	ldr	r3, [r7, #28]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3724      	adds	r7, #36	@ 0x24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	44020c00 	.word	0x44020c00
 80057c0:	003d0900 	.word	0x003d0900
 80057c4:	03d09000 	.word	0x03d09000
 80057c8:	007a1200 	.word	0x007a1200
 80057cc:	46000000 	.word	0x46000000
 80057d0:	4c742400 	.word	0x4c742400
 80057d4:	4af42400 	.word	0x4af42400
 80057d8:	4a742400 	.word	0x4a742400

080057dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80057e0:	f7ff fed0 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 80057e4:	4602      	mov	r2, r0
 80057e6:	4b08      	ldr	r3, [pc, #32]	@ (8005808 <HAL_RCC_GetHCLKFreq+0x2c>)
 80057e8:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80057ea:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80057ee:	4907      	ldr	r1, [pc, #28]	@ (800580c <HAL_RCC_GetHCLKFreq+0x30>)
 80057f0:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80057f2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80057f6:	fa22 f303 	lsr.w	r3, r2, r3
 80057fa:	4a05      	ldr	r2, [pc, #20]	@ (8005810 <HAL_RCC_GetHCLKFreq+0x34>)
 80057fc:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80057fe:	4b04      	ldr	r3, [pc, #16]	@ (8005810 <HAL_RCC_GetHCLKFreq+0x34>)
 8005800:	681b      	ldr	r3, [r3, #0]
}
 8005802:	4618      	mov	r0, r3
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	44020c00 	.word	0x44020c00
 800580c:	08011894 	.word	0x08011894
 8005810:	20000004 	.word	0x20000004

08005814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8005818:	f7ff ffe0 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 800581c:	4602      	mov	r2, r0
 800581e:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	091b      	lsrs	r3, r3, #4
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	4904      	ldr	r1, [pc, #16]	@ (800583c <HAL_RCC_GetPCLK1Freq+0x28>)
 800582a:	5ccb      	ldrb	r3, [r1, r3]
 800582c:	f003 031f 	and.w	r3, r3, #31
 8005830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005834:	4618      	mov	r0, r3
 8005836:	bd80      	pop	{r7, pc}
 8005838:	44020c00 	.word	0x44020c00
 800583c:	080118a4 	.word	0x080118a4

08005840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8005844:	f7ff ffca 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 8005848:	4602      	mov	r2, r0
 800584a:	4b06      	ldr	r3, [pc, #24]	@ (8005864 <HAL_RCC_GetPCLK2Freq+0x24>)
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	0a1b      	lsrs	r3, r3, #8
 8005850:	f003 0307 	and.w	r3, r3, #7
 8005854:	4904      	ldr	r1, [pc, #16]	@ (8005868 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005856:	5ccb      	ldrb	r3, [r1, r3]
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005860:	4618      	mov	r0, r3
 8005862:	bd80      	pop	{r7, pc}
 8005864:	44020c00 	.word	0x44020c00
 8005868:	080118a4 	.word	0x080118a4

0800586c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005870:	f7ff ffb4 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 8005874:	4602      	mov	r2, r0
 8005876:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	0b1b      	lsrs	r3, r3, #12
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	4904      	ldr	r1, [pc, #16]	@ (8005894 <HAL_RCC_GetPCLK3Freq+0x28>)
 8005882:	5ccb      	ldrb	r3, [r1, r3]
 8005884:	f003 031f 	and.w	r3, r3, #31
 8005888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800588c:	4618      	mov	r0, r3
 800588e:	bd80      	pop	{r7, pc}
 8005890:	44020c00 	.word	0x44020c00
 8005894:	080118a4 	.word	0x080118a4

08005898 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800589c:	b0d8      	sub	sp, #352	@ 0x160
 800589e:	af00      	add	r7, sp, #0
 80058a0:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058a4:	2300      	movs	r3, #0
 80058a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058aa:	2300      	movs	r3, #0
 80058ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80058b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 80058bc:	2500      	movs	r5, #0
 80058be:	ea54 0305 	orrs.w	r3, r4, r5
 80058c2:	d00b      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80058c4:	4bcd      	ldr	r3, [pc, #820]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80058c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80058ca:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 80058ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058d4:	4ac9      	ldr	r2, [pc, #804]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80058d6:	430b      	orrs	r3, r1
 80058d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	f002 0801 	and.w	r8, r2, #1
 80058e8:	f04f 0900 	mov.w	r9, #0
 80058ec:	ea58 0309 	orrs.w	r3, r8, r9
 80058f0:	d042      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 80058f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058f8:	2b05      	cmp	r3, #5
 80058fa:	d823      	bhi.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80058fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005904 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80058fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005902:	bf00      	nop
 8005904:	0800594d 	.word	0x0800594d
 8005908:	0800591d 	.word	0x0800591d
 800590c:	08005931 	.word	0x08005931
 8005910:	0800594d 	.word	0x0800594d
 8005914:	0800594d 	.word	0x0800594d
 8005918:	0800594d 	.word	0x0800594d
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800591c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005920:	3308      	adds	r3, #8
 8005922:	4618      	mov	r0, r3
 8005924:	f004 fee0 	bl	800a6e8 <RCCEx_PLL2_Config>
 8005928:	4603      	mov	r3, r0
 800592a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 800592e:	e00e      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005930:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005934:	3330      	adds	r3, #48	@ 0x30
 8005936:	4618      	mov	r0, r3
 8005938:	f004 ff6e 	bl	800a818 <RCCEx_PLL3_Config>
 800593c:	4603      	mov	r3, r0
 800593e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8005942:	e004      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800594a:	e000      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 800594c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800594e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005952:	2b00      	cmp	r3, #0
 8005954:	d10c      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005956:	4ba9      	ldr	r3, [pc, #676]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005958:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800595c:	f023 0107 	bic.w	r1, r3, #7
 8005960:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005966:	4aa5      	ldr	r2, [pc, #660]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005968:	430b      	orrs	r3, r1
 800596a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800596e:	e003      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005970:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005974:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005978:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800597c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005980:	f002 0a02 	and.w	sl, r2, #2
 8005984:	f04f 0b00 	mov.w	fp, #0
 8005988:	ea5a 030b 	orrs.w	r3, sl, fp
 800598c:	f000 8088 	beq.w	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8005990:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005996:	2b28      	cmp	r3, #40	@ 0x28
 8005998:	d868      	bhi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800599a:	a201      	add	r2, pc, #4	@ (adr r2, 80059a0 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	08005a75 	.word	0x08005a75
 80059a4:	08005a6d 	.word	0x08005a6d
 80059a8:	08005a6d 	.word	0x08005a6d
 80059ac:	08005a6d 	.word	0x08005a6d
 80059b0:	08005a6d 	.word	0x08005a6d
 80059b4:	08005a6d 	.word	0x08005a6d
 80059b8:	08005a6d 	.word	0x08005a6d
 80059bc:	08005a6d 	.word	0x08005a6d
 80059c0:	08005a45 	.word	0x08005a45
 80059c4:	08005a6d 	.word	0x08005a6d
 80059c8:	08005a6d 	.word	0x08005a6d
 80059cc:	08005a6d 	.word	0x08005a6d
 80059d0:	08005a6d 	.word	0x08005a6d
 80059d4:	08005a6d 	.word	0x08005a6d
 80059d8:	08005a6d 	.word	0x08005a6d
 80059dc:	08005a6d 	.word	0x08005a6d
 80059e0:	08005a59 	.word	0x08005a59
 80059e4:	08005a6d 	.word	0x08005a6d
 80059e8:	08005a6d 	.word	0x08005a6d
 80059ec:	08005a6d 	.word	0x08005a6d
 80059f0:	08005a6d 	.word	0x08005a6d
 80059f4:	08005a6d 	.word	0x08005a6d
 80059f8:	08005a6d 	.word	0x08005a6d
 80059fc:	08005a6d 	.word	0x08005a6d
 8005a00:	08005a75 	.word	0x08005a75
 8005a04:	08005a6d 	.word	0x08005a6d
 8005a08:	08005a6d 	.word	0x08005a6d
 8005a0c:	08005a6d 	.word	0x08005a6d
 8005a10:	08005a6d 	.word	0x08005a6d
 8005a14:	08005a6d 	.word	0x08005a6d
 8005a18:	08005a6d 	.word	0x08005a6d
 8005a1c:	08005a6d 	.word	0x08005a6d
 8005a20:	08005a75 	.word	0x08005a75
 8005a24:	08005a6d 	.word	0x08005a6d
 8005a28:	08005a6d 	.word	0x08005a6d
 8005a2c:	08005a6d 	.word	0x08005a6d
 8005a30:	08005a6d 	.word	0x08005a6d
 8005a34:	08005a6d 	.word	0x08005a6d
 8005a38:	08005a6d 	.word	0x08005a6d
 8005a3c:	08005a6d 	.word	0x08005a6d
 8005a40:	08005a75 	.word	0x08005a75
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a48:	3308      	adds	r3, #8
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f004 fe4c 	bl	800a6e8 <RCCEx_PLL2_Config>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005a56:	e00e      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a5c:	3330      	adds	r3, #48	@ 0x30
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f004 feda 	bl	800a818 <RCCEx_PLL3_Config>
 8005a64:	4603      	mov	r3, r0
 8005a66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8005a6a:	e004      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a72:	e000      	b.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8005a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10c      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005a7e:	4b5f      	ldr	r3, [pc, #380]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005a80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a84:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005a88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a8e:	4a5b      	ldr	r2, [pc, #364]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005a90:	430b      	orrs	r3, r1
 8005a92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005a96:	e003      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a98:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a9c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa8:	f002 0304 	and.w	r3, r2, #4
 8005aac:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8005ab6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8005aba:	460b      	mov	r3, r1
 8005abc:	4313      	orrs	r3, r2
 8005abe:	d04e      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005ac0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ac4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ac6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005aca:	d02c      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005acc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005ad0:	d825      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005ad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ad6:	d028      	beq.n	8005b2a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005ad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005adc:	d81f      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ae0:	d025      	beq.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005ae2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ae4:	d81b      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005ae6:	2b80      	cmp	r3, #128	@ 0x80
 8005ae8:	d00f      	beq.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x272>
 8005aea:	2b80      	cmp	r3, #128	@ 0x80
 8005aec:	d817      	bhi.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d01f      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8005af2:	2b40      	cmp	r3, #64	@ 0x40
 8005af4:	d113      	bne.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005af6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005afa:	3308      	adds	r3, #8
 8005afc:	4618      	mov	r0, r3
 8005afe:	f004 fdf3 	bl	800a6e8 <RCCEx_PLL2_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005b08:	e014      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b0e:	3330      	adds	r3, #48	@ 0x30
 8005b10:	4618      	mov	r0, r3
 8005b12:	f004 fe81 	bl	800a818 <RCCEx_PLL3_Config>
 8005b16:	4603      	mov	r3, r0
 8005b18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8005b1c:	e00a      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b24:	e006      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b26:	bf00      	nop
 8005b28:	e004      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b2a:	bf00      	nop
 8005b2c:	e002      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b2e:	bf00      	nop
 8005b30:	e000      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8005b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b34:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10c      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005b3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005b42:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005b46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b4c:	4a2b      	ldr	r2, [pc, #172]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005b54:	e003      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b56:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b5a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	f002 0308 	and.w	r3, r2, #8
 8005b6a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8005b6e:	2300      	movs	r3, #0
 8005b70:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8005b74:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	d056      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8005b7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b84:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005b88:	d031      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005b8a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005b8e:	d82a      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b94:	d02d      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8005b96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b9a:	d824      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005b9c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ba0:	d029      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005ba2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005ba6:	d81e      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005ba8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bac:	d011      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bb2:	d818      	bhi.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d023      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bbc:	d113      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005bbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f004 fd8f 	bl	800a6e8 <RCCEx_PLL2_Config>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005bd0:	e017      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005bd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bd6:	3330      	adds	r3, #48	@ 0x30
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f004 fe1d 	bl	800a818 <RCCEx_PLL3_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005be4:	e00d      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005bec:	e009      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005bee:	bf00      	nop
 8005bf0:	e007      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005bf2:	bf00      	nop
 8005bf4:	e005      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005bf6:	bf00      	nop
 8005bf8:	e003      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8005bfa:	bf00      	nop
 8005bfc:	44020c00 	.word	0x44020c00
        break;
 8005c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c02:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10c      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005c0a:	4bbb      	ldr	r3, [pc, #748]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005c0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005c10:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8005c14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005c1a:	4ab7      	ldr	r2, [pc, #732]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005c22:	e003      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c24:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c28:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c34:	f002 0310 	and.w	r3, r2, #16
 8005c38:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005c42:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8005c46:	460b      	mov	r3, r1
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	d053      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005c4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c52:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005c56:	d031      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005c58:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005c5c:	d82a      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c62:	d02d      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005c64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c68:	d824      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c6e:	d029      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005c70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005c74:	d81e      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c7a:	d011      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005c7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c80:	d818      	bhi.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d020      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c8a:	d113      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c90:	3308      	adds	r3, #8
 8005c92:	4618      	mov	r0, r3
 8005c94:	f004 fd28 	bl	800a6e8 <RCCEx_PLL2_Config>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005c9e:	e014      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ca4:	3330      	adds	r3, #48	@ 0x30
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f004 fdb6 	bl	800a818 <RCCEx_PLL3_Config>
 8005cac:	4603      	mov	r3, r0
 8005cae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005cb2:	e00a      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005cba:	e006      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005cbc:	bf00      	nop
 8005cbe:	e004      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005cc0:	bf00      	nop
 8005cc2:	e002      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005cc4:	bf00      	nop
 8005cc6:	e000      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10c      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005cd2:	4b89      	ldr	r3, [pc, #548]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005cd8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ce0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ce2:	4a85      	ldr	r2, [pc, #532]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005ce4:	430b      	orrs	r3, r1
 8005ce6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005cea:	e003      	b.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cf0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f002 0320 	and.w	r3, r2, #32
 8005d00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005d04:	2300      	movs	r3, #0
 8005d06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8005d0a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4313      	orrs	r3, r2
 8005d12:	d053      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8005d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005d1e:	d031      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8005d20:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8005d24:	d82a      	bhi.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d2a:	d02d      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005d2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005d30:	d824      	bhi.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d32:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005d36:	d029      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8005d38:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8005d3c:	d81e      	bhi.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d42:	d011      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d48:	d818      	bhi.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d020      	beq.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8005d4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d52:	d113      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d58:	3308      	adds	r3, #8
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f004 fcc4 	bl	800a6e8 <RCCEx_PLL2_Config>
 8005d60:	4603      	mov	r3, r0
 8005d62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005d66:	e014      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d6c:	3330      	adds	r3, #48	@ 0x30
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f004 fd52 	bl	800a818 <RCCEx_PLL3_Config>
 8005d74:	4603      	mov	r3, r0
 8005d76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005d7a:	e00a      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d82:	e006      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005d84:	bf00      	nop
 8005d86:	e004      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005d88:	bf00      	nop
 8005d8a:	e002      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005d8c:	bf00      	nop
 8005d8e:	e000      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005d90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10c      	bne.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005d9a:	4b57      	ldr	r3, [pc, #348]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005d9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005da0:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005da4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005daa:	4a53      	ldr	r2, [pc, #332]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005dac:	430b      	orrs	r3, r1
 8005dae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005db2:	e003      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005db4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005db8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005dbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005dc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005dcc:	2300      	movs	r3, #0
 8005dce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005dd2:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	d053      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005de2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005de6:	d031      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005de8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005dec:	d82a      	bhi.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005dee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df2:	d02d      	beq.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005df4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005df8:	d824      	bhi.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005dfa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005dfe:	d029      	beq.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005e00:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005e04:	d81e      	bhi.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005e06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e0a:	d011      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005e0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e10:	d818      	bhi.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d020      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005e1a:	d113      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e20:	3308      	adds	r3, #8
 8005e22:	4618      	mov	r0, r3
 8005e24:	f004 fc60 	bl	800a6e8 <RCCEx_PLL2_Config>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005e2e:	e014      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e34:	3330      	adds	r3, #48	@ 0x30
 8005e36:	4618      	mov	r0, r3
 8005e38:	f004 fcee 	bl	800a818 <RCCEx_PLL3_Config>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 8005e42:	e00a      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e4a:	e006      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005e4c:	bf00      	nop
 8005e4e:	e004      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005e50:	bf00      	nop
 8005e52:	e002      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005e54:	bf00      	nop
 8005e56:	e000      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10c      	bne.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005e62:	4b25      	ldr	r3, [pc, #148]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005e64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005e68:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8005e6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e72:	4a21      	ldr	r2, [pc, #132]	@ (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005e74:	430b      	orrs	r3, r1
 8005e76:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005e7a:	e003      	b.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005e84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005e90:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005e94:	2300      	movs	r3, #0
 8005e96:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005e9a:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8005e9e:	460b      	mov	r3, r1
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	d055      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ea8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005eaa:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005eae:	d033      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005eb0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005eb4:	d82c      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005eb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005eba:	d02f      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005ebc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005ec0:	d826      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005ec2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ec6:	d02b      	beq.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005ec8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005ecc:	d820      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005ece:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ed2:	d013      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005ed4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ed8:	d81a      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d022      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005ede:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005ee2:	d115      	bne.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ee8:	3308      	adds	r3, #8
 8005eea:	4618      	mov	r0, r3
 8005eec:	f004 fbfc 	bl	800a6e8 <RCCEx_PLL2_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005ef6:	e016      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005ef8:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005efc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f00:	3330      	adds	r3, #48	@ 0x30
 8005f02:	4618      	mov	r0, r3
 8005f04:	f004 fc88 	bl	800a818 <RCCEx_PLL3_Config>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005f0e:	e00a      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f16:	e006      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f18:	bf00      	nop
 8005f1a:	e004      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f1c:	bf00      	nop
 8005f1e:	e002      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f20:	bf00      	nop
 8005f22:	e000      	b.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005f24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d10c      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8005f2e:	4bbb      	ldr	r3, [pc, #748]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005f30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005f34:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005f38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f3e:	4ab7      	ldr	r2, [pc, #732]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005f40:	430b      	orrs	r3, r1
 8005f42:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005f46:	e003      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f48:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f4c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005f50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005f5c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005f60:	2300      	movs	r3, #0
 8005f62:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005f66:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	d053      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f76:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005f7a:	d031      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005f7c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005f80:	d82a      	bhi.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005f82:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f86:	d02d      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005f88:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f8c:	d824      	bhi.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005f8e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f92:	d029      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005f94:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005f98:	d81e      	bhi.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005f9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005f9e:	d011      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005fa0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fa4:	d818      	bhi.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d020      	beq.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005faa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fae:	d113      	bne.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005fb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f004 fb96 	bl	800a6e8 <RCCEx_PLL2_Config>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005fc2:	e014      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005fc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fc8:	3330      	adds	r3, #48	@ 0x30
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f004 fc24 	bl	800a818 <RCCEx_PLL3_Config>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005fd6:	e00a      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fde:	e006      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005fe0:	bf00      	nop
 8005fe2:	e004      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005fe4:	bf00      	nop
 8005fe6:	e002      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005fe8:	bf00      	nop
 8005fea:	e000      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10c      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005ff6:	4b89      	ldr	r3, [pc, #548]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005ff8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005ffc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006000:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006004:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006006:	4a85      	ldr	r2, [pc, #532]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006008:	430b      	orrs	r3, r1
 800600a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800600e:	e003      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006010:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006014:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8006018:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006024:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800602e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d055      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8006038:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800603c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006040:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8006044:	d031      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x812>
 8006046:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800604a:	d82a      	bhi.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800604c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006050:	d02d      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x816>
 8006052:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006056:	d824      	bhi.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006058:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800605c:	d029      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800605e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8006062:	d81e      	bhi.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006064:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006068:	d011      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800606a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800606e:	d818      	bhi.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d020      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8006074:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006078:	d113      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800607a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800607e:	3308      	adds	r3, #8
 8006080:	4618      	mov	r0, r3
 8006082:	f004 fb31 	bl	800a6e8 <RCCEx_PLL2_Config>
 8006086:	4603      	mov	r3, r0
 8006088:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800608c:	e014      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800608e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006092:	3330      	adds	r3, #48	@ 0x30
 8006094:	4618      	mov	r0, r3
 8006096:	f004 fbbf 	bl	800a818 <RCCEx_PLL3_Config>
 800609a:	4603      	mov	r3, r0
 800609c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80060a0:	e00a      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80060a8:	e006      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80060aa:	bf00      	nop
 80060ac:	e004      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80060ae:	bf00      	nop
 80060b0:	e002      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80060b2:	bf00      	nop
 80060b4:	e000      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80060b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10d      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80060c0:	4b56      	ldr	r3, [pc, #344]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80060c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80060c6:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80060ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060d2:	4a52      	ldr	r2, [pc, #328]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80060d4:	430b      	orrs	r3, r1
 80060d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80060da:	e003      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060e0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80060e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80060f0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80060f4:	2300      	movs	r3, #0
 80060f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80060fa:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80060fe:	460b      	mov	r3, r1
 8006100:	4313      	orrs	r3, r2
 8006102:	d044      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8006104:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800610c:	2b05      	cmp	r3, #5
 800610e:	d823      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006110:	a201      	add	r2, pc, #4	@ (adr r2, 8006118 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006116:	bf00      	nop
 8006118:	08006161 	.word	0x08006161
 800611c:	08006131 	.word	0x08006131
 8006120:	08006145 	.word	0x08006145
 8006124:	08006161 	.word	0x08006161
 8006128:	08006161 	.word	0x08006161
 800612c:	08006161 	.word	0x08006161
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006130:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006134:	3308      	adds	r3, #8
 8006136:	4618      	mov	r0, r3
 8006138:	f004 fad6 	bl	800a6e8 <RCCEx_PLL2_Config>
 800613c:	4603      	mov	r3, r0
 800613e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006142:	e00e      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006144:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006148:	3330      	adds	r3, #48	@ 0x30
 800614a:	4618      	mov	r0, r3
 800614c:	f004 fb64 	bl	800a818 <RCCEx_PLL3_Config>
 8006150:	4603      	mov	r3, r0
 8006152:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8006156:	e004      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800615e:	e000      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8006160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006162:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10d      	bne.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800616a:	4b2c      	ldr	r3, [pc, #176]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800616c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006170:	f023 0107 	bic.w	r1, r3, #7
 8006174:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006178:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800617c:	4a27      	ldr	r2, [pc, #156]	@ (800621c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800617e:	430b      	orrs	r3, r1
 8006180:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006184:	e003      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006186:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800618a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800618e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800619a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800619e:	2300      	movs	r3, #0
 80061a0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80061a4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80061a8:	460b      	mov	r3, r1
 80061aa:	4313      	orrs	r3, r2
 80061ac:	d04f      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80061ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061b6:	2b50      	cmp	r3, #80	@ 0x50
 80061b8:	d029      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80061ba:	2b50      	cmp	r3, #80	@ 0x50
 80061bc:	d823      	bhi.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80061be:	2b40      	cmp	r3, #64	@ 0x40
 80061c0:	d027      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80061c2:	2b40      	cmp	r3, #64	@ 0x40
 80061c4:	d81f      	bhi.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80061c6:	2b30      	cmp	r3, #48	@ 0x30
 80061c8:	d025      	beq.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80061ca:	2b30      	cmp	r3, #48	@ 0x30
 80061cc:	d81b      	bhi.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80061ce:	2b20      	cmp	r3, #32
 80061d0:	d00f      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d817      	bhi.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d022      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80061da:	2b10      	cmp	r3, #16
 80061dc:	d113      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061e2:	3308      	adds	r3, #8
 80061e4:	4618      	mov	r0, r3
 80061e6:	f004 fa7f 	bl	800a6e8 <RCCEx_PLL2_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80061f0:	e017      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061f6:	3330      	adds	r3, #48	@ 0x30
 80061f8:	4618      	mov	r0, r3
 80061fa:	f004 fb0d 	bl	800a818 <RCCEx_PLL3_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006204:	e00d      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800620c:	e009      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800620e:	bf00      	nop
 8006210:	e007      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006212:	bf00      	nop
 8006214:	e005      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006216:	bf00      	nop
 8006218:	e003      	b.n	8006222 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800621a:	bf00      	nop
 800621c:	44020c00 	.word	0x44020c00
        break;
 8006220:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006222:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10d      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800622a:	4baf      	ldr	r3, [pc, #700]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800622c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006230:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006234:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800623c:	4aaa      	ldr	r2, [pc, #680]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800623e:	430b      	orrs	r3, r1
 8006240:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006244:	e003      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006246:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800624a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800624e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800625a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800625e:	2300      	movs	r3, #0
 8006260:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006264:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006268:	460b      	mov	r3, r1
 800626a:	4313      	orrs	r3, r2
 800626c:	d055      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800626e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006272:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006276:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800627a:	d031      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 800627c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006280:	d82a      	bhi.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006282:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006286:	d02d      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8006288:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800628c:	d824      	bhi.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800628e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006292:	d029      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8006294:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006298:	d81e      	bhi.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800629a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800629e:	d011      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80062a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80062a4:	d818      	bhi.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d020      	beq.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80062aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062ae:	d113      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062b4:	3308      	adds	r3, #8
 80062b6:	4618      	mov	r0, r3
 80062b8:	f004 fa16 	bl	800a6e8 <RCCEx_PLL2_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80062c2:	e014      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062c8:	3330      	adds	r3, #48	@ 0x30
 80062ca:	4618      	mov	r0, r3
 80062cc:	f004 faa4 	bl	800a818 <RCCEx_PLL3_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80062d6:	e00a      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80062de:	e006      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80062e0:	bf00      	nop
 80062e2:	e004      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80062e4:	bf00      	nop
 80062e6:	e002      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80062e8:	bf00      	nop
 80062ea:	e000      	b.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80062ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10d      	bne.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80062f6:	4b7c      	ldr	r3, [pc, #496]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80062f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80062fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006300:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006304:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006308:	4a77      	ldr	r2, [pc, #476]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800630a:	430b      	orrs	r3, r1
 800630c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006310:	e003      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006312:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006316:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800631a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006326:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800632a:	2300      	movs	r3, #0
 800632c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006330:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006334:	460b      	mov	r3, r1
 8006336:	4313      	orrs	r3, r2
 8006338:	d03d      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800633a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006342:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006346:	d01b      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8006348:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800634c:	d814      	bhi.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800634e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006352:	d017      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8006354:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006358:	d80e      	bhi.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800635a:	2b00      	cmp	r3, #0
 800635c:	d014      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800635e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006362:	d109      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006368:	3330      	adds	r3, #48	@ 0x30
 800636a:	4618      	mov	r0, r3
 800636c:	f004 fa54 	bl	800a818 <RCCEx_PLL3_Config>
 8006370:	4603      	mov	r3, r0
 8006372:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8006376:	e008      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800637e:	e004      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006380:	bf00      	nop
 8006382:	e002      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006384:	bf00      	nop
 8006386:	e000      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8006388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10d      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006392:	4b55      	ldr	r3, [pc, #340]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006394:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006398:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800639c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a4:	4a50      	ldr	r2, [pc, #320]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80063a6:	430b      	orrs	r3, r1
 80063a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80063ac:	e003      	b.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063b2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80063c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063c6:	2300      	movs	r3, #0
 80063c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063cc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80063d0:	460b      	mov	r3, r1
 80063d2:	4313      	orrs	r3, r2
 80063d4:	d03d      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80063d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80063e2:	d01b      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80063e4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80063e8:	d814      	bhi.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80063ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80063ee:	d017      	beq.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80063f0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80063f4:	d80e      	bhi.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d014      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80063fa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063fe:	d109      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006400:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006404:	3330      	adds	r3, #48	@ 0x30
 8006406:	4618      	mov	r0, r3
 8006408:	f004 fa06 	bl	800a818 <RCCEx_PLL3_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006412:	e008      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800641a:	e004      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800641c:	bf00      	nop
 800641e:	e002      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006420:	bf00      	nop
 8006422:	e000      	b.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006426:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10d      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800642e:	4b2e      	ldr	r3, [pc, #184]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006430:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006434:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006438:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800643c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006440:	4a29      	ldr	r2, [pc, #164]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006442:	430b      	orrs	r3, r1
 8006444:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006448:	e003      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800644e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006452:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800645e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006462:	2300      	movs	r3, #0
 8006464:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006468:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800646c:	460b      	mov	r3, r1
 800646e:	4313      	orrs	r3, r2
 8006470:	d040      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8006472:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006476:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800647a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800647e:	d01b      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8006480:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006484:	d814      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006486:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800648a:	d017      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800648c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006490:	d80e      	bhi.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d014      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800649a:	d109      	bne.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800649c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064a0:	3330      	adds	r3, #48	@ 0x30
 80064a2:	4618      	mov	r0, r3
 80064a4:	f004 f9b8 	bl	800a818 <RCCEx_PLL3_Config>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80064ae:	e008      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80064b6:	e004      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80064b8:	bf00      	nop
 80064ba:	e002      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80064bc:	bf00      	nop
 80064be:	e000      	b.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80064c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d110      	bne.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80064ca:	4b07      	ldr	r3, [pc, #28]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80064cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064d0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80064d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064dc:	4a02      	ldr	r2, [pc, #8]	@ (80064e8 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80064de:	430b      	orrs	r3, r1
 80064e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80064e4:	e006      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80064e6:	bf00      	nop
 80064e8:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	2100      	movs	r1, #0
 80064fe:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8006502:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800650a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800650e:	460b      	mov	r3, r1
 8006510:	4313      	orrs	r3, r2
 8006512:	d03d      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8006514:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006518:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800651c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006520:	d01b      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006522:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006526:	d814      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006528:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800652c:	d017      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800652e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006532:	d80e      	bhi.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006534:	2b00      	cmp	r3, #0
 8006536:	d014      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8006538:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800653c:	d109      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800653e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006542:	3330      	adds	r3, #48	@ 0x30
 8006544:	4618      	mov	r0, r3
 8006546:	f004 f967 	bl	800a818 <RCCEx_PLL3_Config>
 800654a:	4603      	mov	r3, r0
 800654c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8006550:	e008      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006558:	e004      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800655a:	bf00      	nop
 800655c:	e002      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800655e:	bf00      	nop
 8006560:	e000      	b.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006562:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006564:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006568:	2b00      	cmp	r3, #0
 800656a:	d10d      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800656c:	4bbe      	ldr	r3, [pc, #760]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800656e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006572:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006576:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800657a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800657e:	4aba      	ldr	r2, [pc, #744]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006580:	430b      	orrs	r3, r1
 8006582:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006586:	e003      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006588:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800658c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8006590:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006598:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800659c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80065a0:	2300      	movs	r3, #0
 80065a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80065a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80065aa:	460b      	mov	r3, r1
 80065ac:	4313      	orrs	r3, r2
 80065ae:	d035      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80065b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80065b8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065bc:	d015      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80065be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065c2:	d80e      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d012      	beq.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80065c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065cc:	d109      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065d2:	3330      	adds	r3, #48	@ 0x30
 80065d4:	4618      	mov	r0, r3
 80065d6:	f004 f91f 	bl	800a818 <RCCEx_PLL3_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80065e0:	e006      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065e8:	e002      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80065ea:	bf00      	nop
 80065ec:	e000      	b.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80065ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10d      	bne.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80065f8:	4b9b      	ldr	r3, [pc, #620]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80065fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80065fe:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8006602:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006606:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800660a:	4a97      	ldr	r2, [pc, #604]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800660c:	430b      	orrs	r3, r1
 800660e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006612:	e003      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006614:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006618:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800661c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006624:	2100      	movs	r1, #0
 8006626:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 800662a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800662e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006632:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006636:	460b      	mov	r3, r1
 8006638:	4313      	orrs	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800663c:	4b8a      	ldr	r3, [pc, #552]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	4a89      	ldr	r2, [pc, #548]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006642:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006646:	61d3      	str	r3, [r2, #28]
 8006648:	4b87      	ldr	r3, [pc, #540]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800664a:	69d9      	ldr	r1, [r3, #28]
 800664c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006650:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006654:	4a84      	ldr	r2, [pc, #528]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006656:	430b      	orrs	r3, r1
 8006658:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800665a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006666:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800666a:	2300      	movs	r3, #0
 800666c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006670:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006674:	460b      	mov	r3, r1
 8006676:	4313      	orrs	r3, r2
 8006678:	d055      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 800667a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800667e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006682:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006686:	d031      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8006688:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800668c:	d82a      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800668e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006692:	d02d      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006698:	d824      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 800669a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800669e:	d029      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80066a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066a4:	d81e      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80066a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066aa:	d011      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80066ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066b0:	d818      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d020      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80066b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ba:	d113      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066c0:	3308      	adds	r3, #8
 80066c2:	4618      	mov	r0, r3
 80066c4:	f004 f810 	bl	800a6e8 <RCCEx_PLL2_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80066ce:	e014      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066d4:	3330      	adds	r3, #48	@ 0x30
 80066d6:	4618      	mov	r0, r3
 80066d8:	f004 f89e 	bl	800a818 <RCCEx_PLL3_Config>
 80066dc:	4603      	mov	r3, r0
 80066de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80066e2:	e00a      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80066ea:	e006      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80066ec:	bf00      	nop
 80066ee:	e004      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80066f0:	bf00      	nop
 80066f2:	e002      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80066f4:	bf00      	nop
 80066f6:	e000      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 80066f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d10d      	bne.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006702:	4b59      	ldr	r3, [pc, #356]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006704:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006708:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800670c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006710:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006714:	4a54      	ldr	r2, [pc, #336]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006716:	430b      	orrs	r3, r1
 8006718:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800671c:	e003      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006722:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006726:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006732:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006736:	2300      	movs	r3, #0
 8006738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800673c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006740:	460b      	mov	r3, r1
 8006742:	4313      	orrs	r3, r2
 8006744:	d055      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006746:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800674a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800674e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006752:	d031      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8006754:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006758:	d82a      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800675a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800675e:	d02d      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8006760:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006764:	d824      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006766:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800676a:	d029      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 800676c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006770:	d81e      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006776:	d011      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8006778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800677c:	d818      	bhi.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800677e:	2b00      	cmp	r3, #0
 8006780:	d020      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006786:	d113      	bne.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006788:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800678c:	3308      	adds	r3, #8
 800678e:	4618      	mov	r0, r3
 8006790:	f003 ffaa 	bl	800a6e8 <RCCEx_PLL2_Config>
 8006794:	4603      	mov	r3, r0
 8006796:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800679a:	e014      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800679c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067a0:	3330      	adds	r3, #48	@ 0x30
 80067a2:	4618      	mov	r0, r3
 80067a4:	f004 f838 	bl	800a818 <RCCEx_PLL3_Config>
 80067a8:	4603      	mov	r3, r0
 80067aa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80067ae:	e00a      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80067b6:	e006      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80067b8:	bf00      	nop
 80067ba:	e004      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80067bc:	bf00      	nop
 80067be:	e002      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80067c0:	bf00      	nop
 80067c2:	e000      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80067c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10d      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80067ce:	4b26      	ldr	r3, [pc, #152]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80067d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80067d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80067d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80067e0:	4a21      	ldr	r2, [pc, #132]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80067e2:	430b      	orrs	r3, r1
 80067e4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80067e8:	e003      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067ee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80067f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	2100      	movs	r1, #0
 80067fc:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8006800:	f003 0320 	and.w	r3, r3, #32
 8006804:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006808:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800680c:	460b      	mov	r3, r1
 800680e:	4313      	orrs	r3, r2
 8006810:	d057      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8006812:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006816:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800681a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800681e:	d033      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8006820:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006824:	d82c      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006826:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800682a:	d02f      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xff4>
 800682c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006830:	d826      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006832:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006836:	d02b      	beq.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8006838:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800683c:	d820      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800683e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006842:	d013      	beq.n	800686c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006844:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006848:	d81a      	bhi.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 800684a:	2b00      	cmp	r3, #0
 800684c:	d022      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 800684e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006852:	d115      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006854:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006858:	3308      	adds	r3, #8
 800685a:	4618      	mov	r0, r3
 800685c:	f003 ff44 	bl	800a6e8 <RCCEx_PLL2_Config>
 8006860:	4603      	mov	r3, r0
 8006862:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8006866:	e016      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8006868:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800686c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006870:	3330      	adds	r3, #48	@ 0x30
 8006872:	4618      	mov	r0, r3
 8006874:	f003 ffd0 	bl	800a818 <RCCEx_PLL3_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800687e:	e00a      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006880:	2301      	movs	r3, #1
 8006882:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006886:	e006      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006888:	bf00      	nop
 800688a:	e004      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800688c:	bf00      	nop
 800688e:	e002      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006890:	bf00      	nop
 8006892:	e000      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006896:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10d      	bne.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800689e:	4bbb      	ldr	r3, [pc, #748]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80068a0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80068a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80068a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068ac:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80068b0:	4ab6      	ldr	r2, [pc, #728]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80068b2:	430b      	orrs	r3, r1
 80068b4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80068b8:	e003      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068be:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80068c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ca:	2100      	movs	r1, #0
 80068cc:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 80068d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80068d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80068dc:	460b      	mov	r3, r1
 80068de:	4313      	orrs	r3, r2
 80068e0:	d055      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 80068e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80068ea:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80068ee:	d031      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80068f0:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80068f4:	d82a      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80068f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068fa:	d02d      	beq.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80068fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006900:	d824      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006902:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006906:	d029      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8006908:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800690c:	d81e      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800690e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006912:	d011      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8006914:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006918:	d818      	bhi.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d020      	beq.n	8006960 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 800691e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006922:	d113      	bne.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006924:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006928:	3308      	adds	r3, #8
 800692a:	4618      	mov	r0, r3
 800692c:	f003 fedc 	bl	800a6e8 <RCCEx_PLL2_Config>
 8006930:	4603      	mov	r3, r0
 8006932:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006936:	e014      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006938:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800693c:	3330      	adds	r3, #48	@ 0x30
 800693e:	4618      	mov	r0, r3
 8006940:	f003 ff6a 	bl	800a818 <RCCEx_PLL3_Config>
 8006944:	4603      	mov	r3, r0
 8006946:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 800694a:	e00a      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006952:	e006      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006954:	bf00      	nop
 8006956:	e004      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006958:	bf00      	nop
 800695a:	e002      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 800695c:	bf00      	nop
 800695e:	e000      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006962:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10d      	bne.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800696a:	4b88      	ldr	r3, [pc, #544]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800696c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006970:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8006974:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006978:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800697c:	4a83      	ldr	r2, [pc, #524]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 800697e:	430b      	orrs	r3, r1
 8006980:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006984:	e003      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006986:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800698a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800698e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	2100      	movs	r1, #0
 8006998:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 800699c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80069a4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80069a8:	460b      	mov	r3, r1
 80069aa:	4313      	orrs	r3, r2
 80069ac:	d055      	beq.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 80069ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069b6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80069ba:	d031      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 80069bc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80069c0:	d82a      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80069c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069c6:	d02d      	beq.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 80069c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069cc:	d824      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80069ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80069d2:	d029      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 80069d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80069d8:	d81e      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80069da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069de:	d011      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 80069e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069e4:	d818      	bhi.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d020      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 80069ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069ee:	d113      	bne.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069f4:	3308      	adds	r3, #8
 80069f6:	4618      	mov	r0, r3
 80069f8:	f003 fe76 	bl	800a6e8 <RCCEx_PLL2_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006a02:	e014      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a04:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a08:	3330      	adds	r3, #48	@ 0x30
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f003 ff04 	bl	800a818 <RCCEx_PLL3_Config>
 8006a10:	4603      	mov	r3, r0
 8006a12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8006a16:	e00a      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a1e:	e006      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a20:	bf00      	nop
 8006a22:	e004      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a24:	bf00      	nop
 8006a26:	e002      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a28:	bf00      	nop
 8006a2a:	e000      	b.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8006a2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10d      	bne.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8006a36:	4b55      	ldr	r3, [pc, #340]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006a38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006a3c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006a40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006a48:	4a50      	ldr	r2, [pc, #320]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006a4a:	430b      	orrs	r3, r1
 8006a4c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006a50:	e003      	b.n	8006a5a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a56:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006a5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	2100      	movs	r1, #0
 8006a64:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8006a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006a70:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006a74:	460b      	mov	r3, r1
 8006a76:	4313      	orrs	r3, r2
 8006a78:	d055      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006a7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a7e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a86:	d031      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8006a88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a8c:	d82a      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a92:	d02d      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a98:	d824      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006a9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006a9e:	d029      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006aa0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006aa4:	d81e      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006aaa:	d011      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006aac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006ab0:	d818      	bhi.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d020      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8006ab6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006aba:	d113      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006abc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f003 fe10 	bl	800a6e8 <RCCEx_PLL2_Config>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006ace:	e014      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ad0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ad4:	3330      	adds	r3, #48	@ 0x30
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f003 fe9e 	bl	800a818 <RCCEx_PLL3_Config>
 8006adc:	4603      	mov	r3, r0
 8006ade:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006ae2:	e00a      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006aea:	e006      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006aec:	bf00      	nop
 8006aee:	e004      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006af0:	bf00      	nop
 8006af2:	e002      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006af4:	bf00      	nop
 8006af6:	e000      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006af8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006afa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d10d      	bne.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8006b02:	4b22      	ldr	r3, [pc, #136]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006b08:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006b0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006b14:	4a1d      	ldr	r2, [pc, #116]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b16:	430b      	orrs	r3, r1
 8006b18:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006b1c:	e003      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b22:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006b26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006b32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b36:	2300      	movs	r3, #0
 8006b38:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006b3c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006b40:	460b      	mov	r3, r1
 8006b42:	4313      	orrs	r3, r2
 8006b44:	d055      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006b46:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b4a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006b4e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b52:	d035      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8006b54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b58:	d82e      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006b5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b5e:	d031      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8006b60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006b64:	d828      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006b66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b6a:	d01b      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006b6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b70:	d822      	bhi.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8006b76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b7a:	d009      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006b7c:	e01c      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b7e:	4b03      	ldr	r3, [pc, #12]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	4a02      	ldr	r2, [pc, #8]	@ (8006b8c <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b88:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006b8a:	e01c      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006b8c:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b94:	3308      	adds	r3, #8
 8006b96:	4618      	mov	r0, r3
 8006b98:	f003 fda6 	bl	800a6e8 <RCCEx_PLL2_Config>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006ba2:	e010      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ba8:	3330      	adds	r3, #48	@ 0x30
 8006baa:	4618      	mov	r0, r3
 8006bac:	f003 fe34 	bl	800a818 <RCCEx_PLL3_Config>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006bb6:	e006      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006bbe:	e002      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006bc0:	bf00      	nop
 8006bc2:	e000      	b.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10d      	bne.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006bce:	4bc3      	ldr	r3, [pc, #780]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006bd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bd4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006bd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bdc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006be0:	4abe      	ldr	r2, [pc, #760]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006be2:	430b      	orrs	r3, r1
 8006be4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006be8:	e003      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006bf2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfa:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006bfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c02:	2300      	movs	r3, #0
 8006c04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c08:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006c0c:	460b      	mov	r3, r1
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	d051      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006c12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c16:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006c1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c1e:	d033      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006c20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c24:	d82c      	bhi.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006c26:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c2a:	d02d      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8006c2c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006c30:	d826      	bhi.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006c32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c36:	d019      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8006c38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c3c:	d820      	bhi.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8006c42:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006c46:	d007      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8006c48:	e01a      	b.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c4a:	4ba4      	ldr	r3, [pc, #656]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	4aa3      	ldr	r2, [pc, #652]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c54:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006c56:	e018      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c5c:	3308      	adds	r3, #8
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f003 fd42 	bl	800a6e8 <RCCEx_PLL2_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006c6a:	e00e      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c70:	3330      	adds	r3, #48	@ 0x30
 8006c72:	4618      	mov	r0, r3
 8006c74:	f003 fdd0 	bl	800a818 <RCCEx_PLL3_Config>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006c7e:	e004      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c86:	e000      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10d      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006c92:	4b92      	ldr	r3, [pc, #584]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006c94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006c98:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8006c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ca0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006ca4:	4a8d      	ldr	r2, [pc, #564]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ca6:	430b      	orrs	r3, r1
 8006ca8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006cac:	e003      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cb2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006cb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006cc2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006cc8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	d032      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006cd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cd6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006cda:	2b05      	cmp	r3, #5
 8006cdc:	d80f      	bhi.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d211      	bcs.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d911      	bls.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d109      	bne.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cee:	3308      	adds	r3, #8
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f003 fcf9 	bl	800a6e8 <RCCEx_PLL2_Config>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006cfc:	e006      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d04:	e002      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006d06:	bf00      	nop
 8006d08:	e000      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8006d0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d0c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10d      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006d14:	4b71      	ldr	r3, [pc, #452]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d1a:	f023 0107 	bic.w	r1, r3, #7
 8006d1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006d26:	4a6d      	ldr	r2, [pc, #436]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d28:	430b      	orrs	r3, r1
 8006d2a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006d2e:	e003      	b.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d30:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d34:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006d38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d40:	2100      	movs	r1, #0
 8006d42:	6739      	str	r1, [r7, #112]	@ 0x70
 8006d44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d48:	677b      	str	r3, [r7, #116]	@ 0x74
 8006d4a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4313      	orrs	r3, r2
 8006d52:	d024      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006d54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d005      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d005      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d6a:	e002      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006d6c:	bf00      	nop
 8006d6e:	e000      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006d70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10d      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006d7a:	4b58      	ldr	r3, [pc, #352]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006d80:	f023 0108 	bic.w	r1, r3, #8
 8006d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d8c:	4a53      	ldr	r2, [pc, #332]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006d8e:	430b      	orrs	r3, r1
 8006d90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006d94:	e003      	b.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d96:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d9a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006d9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da6:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006daa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006dac:	2300      	movs	r3, #0
 8006dae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006db0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006db4:	460b      	mov	r3, r1
 8006db6:	4313      	orrs	r3, r2
 8006db8:	f000 80b9 	beq.w	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006dbc:	4b48      	ldr	r3, [pc, #288]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc0:	4a47      	ldr	r2, [pc, #284]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006dc2:	f043 0301 	orr.w	r3, r3, #1
 8006dc6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006dc8:	f7fb fbb2 	bl	8002530 <HAL_GetTick>
 8006dcc:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006dd0:	e00b      	b.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dd2:	f7fb fbad 	bl	8002530 <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d903      	bls.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006de8:	e005      	b.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006dea:	4b3d      	ldr	r3, [pc, #244]	@ (8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0ed      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8006df6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f040 8093 	bne.w	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006e00:	4b36      	ldr	r3, [pc, #216]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e0a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006e0e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d023      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8006e16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e1a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 8006e1e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d01b      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006e26:	4b2d      	ldr	r3, [pc, #180]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e30:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006e34:	4b29      	ldr	r3, [pc, #164]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e3a:	4a28      	ldr	r2, [pc, #160]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006e44:	4b25      	ldr	r3, [pc, #148]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e4a:	4a24      	ldr	r2, [pc, #144]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e50:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006e54:	4a21      	ldr	r2, [pc, #132]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e56:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006e5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006e5e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d019      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6a:	f7fb fb61 	bl	8002530 <HAL_GetTick>
 8006e6e:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e72:	e00d      	b.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e74:	f7fb fb5c 	bl	8002530 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d903      	bls.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8006e8e:	e006      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006e90:	4b12      	ldr	r3, [pc, #72]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d0ea      	beq.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006e9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d13a      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006ea6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eaa:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006eae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006eb6:	d115      	bne.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006eb8:	4b08      	ldr	r3, [pc, #32]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ec4:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006ec8:	091b      	lsrs	r3, r3, #4
 8006eca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006ece:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006ed2:	4a02      	ldr	r2, [pc, #8]	@ (8006edc <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006ed4:	430b      	orrs	r3, r1
 8006ed6:	61d3      	str	r3, [r2, #28]
 8006ed8:	e00a      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006eda:	bf00      	nop
 8006edc:	44020c00 	.word	0x44020c00
 8006ee0:	44020800 	.word	0x44020800
 8006ee4:	4b9f      	ldr	r3, [pc, #636]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ee6:	69db      	ldr	r3, [r3, #28]
 8006ee8:	4a9e      	ldr	r2, [pc, #632]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006eea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006eee:	61d3      	str	r3, [r2, #28]
 8006ef0:	4b9c      	ldr	r3, [pc, #624]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ef2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ef6:	4a9b      	ldr	r2, [pc, #620]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006ef8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006efc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006f00:	4b98      	ldr	r3, [pc, #608]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f02:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006f06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f0a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006f0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f12:	4a94      	ldr	r2, [pc, #592]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f14:	430b      	orrs	r3, r1
 8006f16:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006f1a:	e008      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006f1c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f20:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8006f24:	e003      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f2a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f36:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006f3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006f44:	460b      	mov	r3, r1
 8006f46:	4313      	orrs	r3, r2
 8006f48:	d035      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006f4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f4e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006f52:	2b30      	cmp	r3, #48	@ 0x30
 8006f54:	d014      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006f56:	2b30      	cmp	r3, #48	@ 0x30
 8006f58:	d80e      	bhi.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006f5a:	2b20      	cmp	r3, #32
 8006f5c:	d012      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d80a      	bhi.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d010      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006f66:	2b10      	cmp	r3, #16
 8006f68:	d106      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f6a:	4b7e      	ldr	r3, [pc, #504]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6e:	4a7d      	ldr	r2, [pc, #500]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f74:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006f76:	e008      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f7e:	e004      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006f80:	bf00      	nop
 8006f82:	e002      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006f84:	bf00      	nop
 8006f86:	e000      	b.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10d      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006f92:	4b74      	ldr	r3, [pc, #464]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006f94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f98:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006f9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fa0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006fa4:	4a6f      	ldr	r2, [pc, #444]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006fac:	e003      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fb2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006fb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fc8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	d033      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006fd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fd6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d002      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006fde:	2b40      	cmp	r3, #64	@ 0x40
 8006fe0:	d007      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8006fe2:	e010      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fe4:	4b5f      	ldr	r3, [pc, #380]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fe8:	4a5e      	ldr	r2, [pc, #376]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006fea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fee:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006ff0:	e00d      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ff2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f003 fb75 	bl	800a6e8 <RCCEx_PLL2_Config>
 8006ffe:	4603      	mov	r3, r0
 8007000:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007004:	e003      	b.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800700c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800700e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10d      	bne.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8007016:	4b53      	ldr	r3, [pc, #332]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007018:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800701c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007020:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007024:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007028:	4a4e      	ldr	r2, [pc, #312]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800702a:	430b      	orrs	r3, r1
 800702c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007030:	e003      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007032:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007036:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800703a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007046:	653b      	str	r3, [r7, #80]	@ 0x50
 8007048:	2300      	movs	r3, #0
 800704a:	657b      	str	r3, [r7, #84]	@ 0x54
 800704c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007050:	460b      	mov	r3, r1
 8007052:	4313      	orrs	r3, r2
 8007054:	d033      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8007056:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800705a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d002      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8007062:	2b80      	cmp	r3, #128	@ 0x80
 8007064:	d007      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8007066:	e010      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007068:	4b3e      	ldr	r3, [pc, #248]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800706a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800706c:	4a3d      	ldr	r2, [pc, #244]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800706e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007072:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007074:	e00d      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007076:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800707a:	3308      	adds	r3, #8
 800707c:	4618      	mov	r0, r3
 800707e:	f003 fb33 	bl	800a6e8 <RCCEx_PLL2_Config>
 8007082:	4603      	mov	r3, r0
 8007084:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8007088:	e003      	b.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007090:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007092:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10d      	bne.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800709a:	4b32      	ldr	r3, [pc, #200]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800709c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80070a0:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80070a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070a8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80070ac:	4a2d      	ldr	r2, [pc, #180]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80070ae:	430b      	orrs	r3, r1
 80070b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80070b4:	e003      	b.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80070be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80070ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80070cc:	2300      	movs	r3, #0
 80070ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070d0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80070d4:	460b      	mov	r3, r1
 80070d6:	4313      	orrs	r3, r2
 80070d8:	d04a      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80070da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d827      	bhi.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80070e6:	a201      	add	r2, pc, #4	@ (adr r2, 80070ec <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80070e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ec:	08007101 	.word	0x08007101
 80070f0:	0800710f 	.word	0x0800710f
 80070f4:	08007123 	.word	0x08007123
 80070f8:	0800713f 	.word	0x0800713f
 80070fc:	0800713f 	.word	0x0800713f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007100:	4b18      	ldr	r3, [pc, #96]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007104:	4a17      	ldr	r2, [pc, #92]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800710a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800710c:	e018      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800710e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007112:	3308      	adds	r3, #8
 8007114:	4618      	mov	r0, r3
 8007116:	f003 fae7 	bl	800a6e8 <RCCEx_PLL2_Config>
 800711a:	4603      	mov	r3, r0
 800711c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007120:	e00e      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007122:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007126:	3330      	adds	r3, #48	@ 0x30
 8007128:	4618      	mov	r0, r3
 800712a:	f003 fb75 	bl	800a818 <RCCEx_PLL3_Config>
 800712e:	4603      	mov	r3, r0
 8007130:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007134:	e004      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800713c:	e000      	b.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800713e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007140:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007144:	2b00      	cmp	r3, #0
 8007146:	d10f      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007148:	4b06      	ldr	r3, [pc, #24]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800714a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800714e:	f023 0107 	bic.w	r1, r3, #7
 8007152:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800715a:	4a02      	ldr	r2, [pc, #8]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800715c:	430b      	orrs	r3, r1
 800715e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007162:	e005      	b.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8007164:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007168:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800716c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007170:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800717c:	643b      	str	r3, [r7, #64]	@ 0x40
 800717e:	2300      	movs	r3, #0
 8007180:	647b      	str	r3, [r7, #68]	@ 0x44
 8007182:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007186:	460b      	mov	r3, r1
 8007188:	4313      	orrs	r3, r2
 800718a:	f000 8081 	beq.w	8007290 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800718e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007192:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007196:	2b20      	cmp	r3, #32
 8007198:	d85f      	bhi.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 800719a:	a201      	add	r2, pc, #4	@ (adr r2, 80071a0 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 800719c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071a0:	08007225 	.word	0x08007225
 80071a4:	0800725b 	.word	0x0800725b
 80071a8:	0800725b 	.word	0x0800725b
 80071ac:	0800725b 	.word	0x0800725b
 80071b0:	0800725b 	.word	0x0800725b
 80071b4:	0800725b 	.word	0x0800725b
 80071b8:	0800725b 	.word	0x0800725b
 80071bc:	0800725b 	.word	0x0800725b
 80071c0:	08007233 	.word	0x08007233
 80071c4:	0800725b 	.word	0x0800725b
 80071c8:	0800725b 	.word	0x0800725b
 80071cc:	0800725b 	.word	0x0800725b
 80071d0:	0800725b 	.word	0x0800725b
 80071d4:	0800725b 	.word	0x0800725b
 80071d8:	0800725b 	.word	0x0800725b
 80071dc:	0800725b 	.word	0x0800725b
 80071e0:	08007247 	.word	0x08007247
 80071e4:	0800725b 	.word	0x0800725b
 80071e8:	0800725b 	.word	0x0800725b
 80071ec:	0800725b 	.word	0x0800725b
 80071f0:	0800725b 	.word	0x0800725b
 80071f4:	0800725b 	.word	0x0800725b
 80071f8:	0800725b 	.word	0x0800725b
 80071fc:	0800725b 	.word	0x0800725b
 8007200:	08007263 	.word	0x08007263
 8007204:	0800725b 	.word	0x0800725b
 8007208:	0800725b 	.word	0x0800725b
 800720c:	0800725b 	.word	0x0800725b
 8007210:	0800725b 	.word	0x0800725b
 8007214:	0800725b 	.word	0x0800725b
 8007218:	0800725b 	.word	0x0800725b
 800721c:	0800725b 	.word	0x0800725b
 8007220:	08007263 	.word	0x08007263
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007224:	4bab      	ldr	r3, [pc, #684]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007228:	4aaa      	ldr	r2, [pc, #680]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800722a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800722e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007230:	e018      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007232:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007236:	3308      	adds	r3, #8
 8007238:	4618      	mov	r0, r3
 800723a:	f003 fa55 	bl	800a6e8 <RCCEx_PLL2_Config>
 800723e:	4603      	mov	r3, r0
 8007240:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007244:	e00e      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007246:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800724a:	3330      	adds	r3, #48	@ 0x30
 800724c:	4618      	mov	r0, r3
 800724e:	f003 fae3 	bl	800a818 <RCCEx_PLL3_Config>
 8007252:	4603      	mov	r3, r0
 8007254:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007258:	e004      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007260:	e000      	b.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8007262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007264:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10d      	bne.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800726c:	4b99      	ldr	r3, [pc, #612]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800726e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007272:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007276:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800727a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800727e:	4a95      	ldr	r2, [pc, #596]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007280:	430b      	orrs	r3, r1
 8007282:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007286:	e003      	b.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007288:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800728c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007290:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800729c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800729e:	2300      	movs	r3, #0
 80072a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80072a6:	460b      	mov	r3, r1
 80072a8:	4313      	orrs	r3, r2
 80072aa:	d04e      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80072ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072b8:	d02e      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80072ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072be:	d827      	bhi.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80072c0:	2bc0      	cmp	r3, #192	@ 0xc0
 80072c2:	d02b      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80072c4:	2bc0      	cmp	r3, #192	@ 0xc0
 80072c6:	d823      	bhi.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80072c8:	2b80      	cmp	r3, #128	@ 0x80
 80072ca:	d017      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80072cc:	2b80      	cmp	r3, #128	@ 0x80
 80072ce:	d81f      	bhi.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d002      	beq.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80072d4:	2b40      	cmp	r3, #64	@ 0x40
 80072d6:	d007      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80072d8:	e01a      	b.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072da:	4b7e      	ldr	r3, [pc, #504]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80072dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072de:	4a7d      	ldr	r2, [pc, #500]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80072e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072e4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80072e6:	e01a      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072ec:	3308      	adds	r3, #8
 80072ee:	4618      	mov	r0, r3
 80072f0:	f003 f9fa 	bl	800a6e8 <RCCEx_PLL2_Config>
 80072f4:	4603      	mov	r3, r0
 80072f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80072fa:	e010      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007300:	3330      	adds	r3, #48	@ 0x30
 8007302:	4618      	mov	r0, r3
 8007304:	f003 fa88 	bl	800a818 <RCCEx_PLL3_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800730e:	e006      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007316:	e002      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007318:	bf00      	nop
 800731a:	e000      	b.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800731c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800731e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10d      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007326:	4b6b      	ldr	r3, [pc, #428]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800732c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007330:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007334:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007338:	4a66      	ldr	r2, [pc, #408]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800733a:	430b      	orrs	r3, r1
 800733c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007340:	e003      	b.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007342:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007346:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800734a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007356:	633b      	str	r3, [r7, #48]	@ 0x30
 8007358:	2300      	movs	r3, #0
 800735a:	637b      	str	r3, [r7, #52]	@ 0x34
 800735c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007360:	460b      	mov	r3, r1
 8007362:	4313      	orrs	r3, r2
 8007364:	d055      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8007366:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800736a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800736e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007372:	d031      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8007374:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007378:	d82a      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800737a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800737e:	d02d      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8007380:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007384:	d824      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007386:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800738a:	d029      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 800738c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007390:	d81e      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8007392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007396:	d011      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8007398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800739c:	d818      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d020      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80073a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073a6:	d113      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073ac:	3308      	adds	r3, #8
 80073ae:	4618      	mov	r0, r3
 80073b0:	f003 f99a 	bl	800a6e8 <RCCEx_PLL2_Config>
 80073b4:	4603      	mov	r3, r0
 80073b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80073ba:	e014      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80073bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073c0:	3330      	adds	r3, #48	@ 0x30
 80073c2:	4618      	mov	r0, r3
 80073c4:	f003 fa28 	bl	800a818 <RCCEx_PLL3_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80073ce:	e00a      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80073d6:	e006      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80073d8:	bf00      	nop
 80073da:	e004      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80073dc:	bf00      	nop
 80073de:	e002      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80073e0:	bf00      	nop
 80073e2:	e000      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80073e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10d      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80073ee:	4b39      	ldr	r3, [pc, #228]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80073f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80073f4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80073f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007400:	4a34      	ldr	r2, [pc, #208]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007402:	430b      	orrs	r3, r1
 8007404:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007408:	e003      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800740e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8007412:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800741e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007420:	2300      	movs	r3, #0
 8007422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007424:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007428:	460b      	mov	r3, r1
 800742a:	4313      	orrs	r3, r2
 800742c:	d058      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800742e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007432:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007436:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800743a:	d031      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 800743c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007440:	d82a      	bhi.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007446:	d02d      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8007448:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800744c:	d824      	bhi.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800744e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007452:	d029      	beq.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8007454:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007458:	d81e      	bhi.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800745a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800745e:	d011      	beq.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8007460:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007464:	d818      	bhi.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007466:	2b00      	cmp	r3, #0
 8007468:	d020      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 800746a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800746e:	d113      	bne.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007470:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007474:	3308      	adds	r3, #8
 8007476:	4618      	mov	r0, r3
 8007478:	f003 f936 	bl	800a6e8 <RCCEx_PLL2_Config>
 800747c:	4603      	mov	r3, r0
 800747e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007482:	e014      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007484:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007488:	3330      	adds	r3, #48	@ 0x30
 800748a:	4618      	mov	r0, r3
 800748c:	f003 f9c4 	bl	800a818 <RCCEx_PLL3_Config>
 8007490:	4603      	mov	r3, r0
 8007492:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007496:	e00a      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800749e:	e006      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80074a0:	bf00      	nop
 80074a2:	e004      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80074a4:	bf00      	nop
 80074a6:	e002      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80074a8:	bf00      	nop
 80074aa:	e000      	b.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80074ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d110      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80074b6:	4b07      	ldr	r3, [pc, #28]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80074b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80074bc:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80074c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074c8:	4902      	ldr	r1, [pc, #8]	@ (80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80074d0:	e006      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80074d2:	bf00      	nop
 80074d4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80074dc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80074e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	2100      	movs	r1, #0
 80074ea:	6239      	str	r1, [r7, #32]
 80074ec:	f003 0301 	and.w	r3, r3, #1
 80074f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80074f6:	460b      	mov	r3, r1
 80074f8:	4313      	orrs	r3, r2
 80074fa:	d055      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80074fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007500:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007504:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007508:	d031      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 800750a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800750e:	d82a      	bhi.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007514:	d02d      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8007516:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800751a:	d824      	bhi.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800751c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007520:	d029      	beq.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8007522:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007526:	d81e      	bhi.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800752c:	d011      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800752e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007532:	d818      	bhi.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007534:	2b00      	cmp	r3, #0
 8007536:	d020      	beq.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8007538:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800753c:	d113      	bne.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800753e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007542:	3308      	adds	r3, #8
 8007544:	4618      	mov	r0, r3
 8007546:	f003 f8cf 	bl	800a6e8 <RCCEx_PLL2_Config>
 800754a:	4603      	mov	r3, r0
 800754c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007550:	e014      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007552:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007556:	3330      	adds	r3, #48	@ 0x30
 8007558:	4618      	mov	r0, r3
 800755a:	f003 f95d 	bl	800a818 <RCCEx_PLL3_Config>
 800755e:	4603      	mov	r3, r0
 8007560:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007564:	e00a      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800756c:	e006      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800756e:	bf00      	nop
 8007570:	e004      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007572:	bf00      	nop
 8007574:	e002      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007576:	bf00      	nop
 8007578:	e000      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800757a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800757c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10d      	bne.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8007584:	4b88      	ldr	r3, [pc, #544]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007586:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800758a:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800758e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007592:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007596:	4984      	ldr	r1, [pc, #528]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007598:	4313      	orrs	r3, r2
 800759a:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800759e:	e003      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075a4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80075a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b0:	2100      	movs	r1, #0
 80075b2:	61b9      	str	r1, [r7, #24]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	61fb      	str	r3, [r7, #28]
 80075ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80075be:	460b      	mov	r3, r1
 80075c0:	4313      	orrs	r3, r2
 80075c2:	d03d      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80075c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80075cc:	2b03      	cmp	r3, #3
 80075ce:	d81c      	bhi.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80075d0:	a201      	add	r2, pc, #4	@ (adr r2, 80075d8 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80075d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d6:	bf00      	nop
 80075d8:	08007613 	.word	0x08007613
 80075dc:	080075e9 	.word	0x080075e9
 80075e0:	080075f7 	.word	0x080075f7
 80075e4:	08007613 	.word	0x08007613
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075e8:	4b6f      	ldr	r3, [pc, #444]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80075ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ec:	4a6e      	ldr	r2, [pc, #440]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80075ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075f2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80075f4:	e00e      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80075f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075fa:	3308      	adds	r3, #8
 80075fc:	4618      	mov	r0, r3
 80075fe:	f003 f873 	bl	800a6e8 <RCCEx_PLL2_Config>
 8007602:	4603      	mov	r3, r0
 8007604:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007608:	e004      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800760a:	2301      	movs	r3, #1
 800760c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007610:	e000      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8007612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007614:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10d      	bne.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800761c:	4b62      	ldr	r3, [pc, #392]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800761e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007622:	f023 0203 	bic.w	r2, r3, #3
 8007626:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800762a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800762e:	495e      	ldr	r1, [pc, #376]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007630:	4313      	orrs	r3, r2
 8007632:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007636:	e003      	b.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007638:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800763c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007640:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	2100      	movs	r1, #0
 800764a:	6139      	str	r1, [r7, #16]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007656:	460b      	mov	r3, r1
 8007658:	4313      	orrs	r3, r2
 800765a:	d03a      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 800765c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007660:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007668:	d00e      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 800766a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800766e:	d815      	bhi.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8007670:	2b00      	cmp	r3, #0
 8007672:	d017      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8007674:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007678:	d110      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800767a:	4b4b      	ldr	r3, [pc, #300]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800767c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800767e:	4a4a      	ldr	r2, [pc, #296]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007680:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007684:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007686:	e00e      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007688:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800768c:	3308      	adds	r3, #8
 800768e:	4618      	mov	r0, r3
 8007690:	f003 f82a 	bl	800a6e8 <RCCEx_PLL2_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800769a:	e004      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80076a2:	e000      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80076a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10d      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80076ae:	4b3e      	ldr	r3, [pc, #248]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80076b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80076c0:	4939      	ldr	r1, [pc, #228]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80076c8:	e003      	b.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80076d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	2100      	movs	r1, #0
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	f003 0310 	and.w	r3, r3, #16
 80076e2:	60fb      	str	r3, [r7, #12]
 80076e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80076e8:	460b      	mov	r3, r1
 80076ea:	4313      	orrs	r3, r2
 80076ec:	d038      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 80076ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80076f6:	2b30      	cmp	r3, #48	@ 0x30
 80076f8:	d01b      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 80076fa:	2b30      	cmp	r3, #48	@ 0x30
 80076fc:	d815      	bhi.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 80076fe:	2b10      	cmp	r3, #16
 8007700:	d002      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8007702:	2b20      	cmp	r3, #32
 8007704:	d007      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8007706:	e010      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007708:	4b27      	ldr	r3, [pc, #156]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800770a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800770c:	4a26      	ldr	r2, [pc, #152]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800770e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007712:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007714:	e00e      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007716:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800771a:	3330      	adds	r3, #48	@ 0x30
 800771c:	4618      	mov	r0, r3
 800771e:	f003 f87b 	bl	800a818 <RCCEx_PLL3_Config>
 8007722:	4603      	mov	r3, r0
 8007724:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007728:	e004      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007730:	e000      	b.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8007732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007734:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10d      	bne.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 800773c:	4b1a      	ldr	r3, [pc, #104]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800773e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007742:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007746:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800774a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800774e:	4916      	ldr	r1, [pc, #88]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007750:	4313      	orrs	r3, r2
 8007752:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007756:	e003      	b.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007758:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800775c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007760:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007768:	2100      	movs	r1, #0
 800776a:	6039      	str	r1, [r7, #0]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	607b      	str	r3, [r7, #4]
 8007772:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007776:	460b      	mov	r3, r1
 8007778:	4313      	orrs	r3, r2
 800777a:	d00c      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800777c:	4b0a      	ldr	r3, [pc, #40]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800777e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007782:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007786:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800778a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 800778e:	4906      	ldr	r1, [pc, #24]	@ (80077a8 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007790:	4313      	orrs	r3, r2
 8007792:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8007796:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800779a:	4618      	mov	r0, r3
 800779c:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80077a0:	46bd      	mov	sp, r7
 80077a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077a6:	bf00      	nop
 80077a8:	44020c00 	.word	0x44020c00

080077ac <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b08b      	sub	sp, #44	@ 0x2c
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80077b4:	4bae      	ldr	r3, [pc, #696]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80077b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077bc:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80077be:	4bac      	ldr	r3, [pc, #688]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80077c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c2:	f003 0303 	and.w	r3, r3, #3
 80077c6:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80077c8:	4ba9      	ldr	r3, [pc, #676]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80077ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077cc:	0a1b      	lsrs	r3, r3, #8
 80077ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077d2:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80077d4:	4ba6      	ldr	r3, [pc, #664]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80077d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077d8:	091b      	lsrs	r3, r3, #4
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80077e0:	4ba3      	ldr	r3, [pc, #652]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80077e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e4:	08db      	lsrs	r3, r3, #3
 80077e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	fb02 f303 	mul.w	r3, r2, r3
 80077f0:	ee07 3a90 	vmov	s15, r3
 80077f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 8126 	beq.w	8007a50 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	2b03      	cmp	r3, #3
 8007808:	d053      	beq.n	80078b2 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	2b03      	cmp	r3, #3
 800780e:	d86f      	bhi.n	80078f0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d003      	beq.n	800781e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	2b02      	cmp	r3, #2
 800781a:	d02b      	beq.n	8007874 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 800781c:	e068      	b.n	80078f0 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800781e:	4b94      	ldr	r3, [pc, #592]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	08db      	lsrs	r3, r3, #3
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	4a92      	ldr	r2, [pc, #584]	@ (8007a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800782a:	fa22 f303 	lsr.w	r3, r2, r3
 800782e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	ee07 3a90 	vmov	s15, r3
 8007836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	ee07 3a90 	vmov	s15, r3
 8007840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007848:	6a3b      	ldr	r3, [r7, #32]
 800784a:	ee07 3a90 	vmov	s15, r3
 800784e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007852:	ed97 6a04 	vldr	s12, [r7, #16]
 8007856:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800785a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800786a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007872:	e068      	b.n	8007946 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8007882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007890:	ed97 6a04 	vldr	s12, [r7, #16]
 8007894:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007898:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80078b0:	e049      	b.n	8007946 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	ee07 3a90 	vmov	s15, r3
 80078b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078bc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007a80 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 80078c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ce:	ed97 6a04 	vldr	s12, [r7, #16]
 80078d2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80078d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80078ee:	e02a      	b.n	8007946 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078f0:	4b5f      	ldr	r3, [pc, #380]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	08db      	lsrs	r3, r3, #3
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	4a5e      	ldr	r2, [pc, #376]	@ (8007a74 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80078fc:	fa22 f303 	lsr.w	r3, r2, r3
 8007900:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	ee07 3a90 	vmov	s15, r3
 8007908:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	ee07 3a90 	vmov	s15, r3
 8007920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007924:	ed97 6a04 	vldr	s12, [r7, #16]
 8007928:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800792c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007930:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007934:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007938:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007940:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007944:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007946:	4b4a      	ldr	r3, [pc, #296]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800794e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007952:	d121      	bne.n	8007998 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007954:	4b46      	ldr	r3, [pc, #280]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007958:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d017      	beq.n	8007990 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007960:	4b43      	ldr	r3, [pc, #268]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007964:	0a5b      	lsrs	r3, r3, #9
 8007966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8007972:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007976:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800797a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800797e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007986:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
 800798e:	e006      	b.n	800799e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	e002      	b.n	800799e <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800799e:	4b34      	ldr	r3, [pc, #208]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079aa:	d121      	bne.n	80079f0 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80079ac:	4b30      	ldr	r3, [pc, #192]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d017      	beq.n	80079e8 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80079b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079bc:	0c1b      	lsrs	r3, r3, #16
 80079be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80079ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80079ce:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80079d2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80079d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079de:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	605a      	str	r2, [r3, #4]
 80079e6:	e006      	b.n	80079f6 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	605a      	str	r2, [r3, #4]
 80079ee:	e002      	b.n	80079f6 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079f6:	4b1e      	ldr	r3, [pc, #120]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a02:	d121      	bne.n	8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8007a04:	4b1a      	ldr	r3, [pc, #104]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a08:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d017      	beq.n	8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007a10:	4b17      	ldr	r3, [pc, #92]	@ (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a14:	0e1b      	lsrs	r3, r3, #24
 8007a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007a22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a26:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007a2a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a36:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007a3e:	e010      	b.n	8007a62 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	609a      	str	r2, [r3, #8]
}
 8007a46:	e00c      	b.n	8007a62 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	609a      	str	r2, [r3, #8]
}
 8007a4e:	e008      	b.n	8007a62 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	609a      	str	r2, [r3, #8]
}
 8007a62:	bf00      	nop
 8007a64:	372c      	adds	r7, #44	@ 0x2c
 8007a66:	46bd      	mov	sp, r7
 8007a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop
 8007a70:	44020c00 	.word	0x44020c00
 8007a74:	03d09000 	.word	0x03d09000
 8007a78:	46000000 	.word	0x46000000
 8007a7c:	4a742400 	.word	0x4a742400
 8007a80:	4af42400 	.word	0x4af42400

08007a84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b08b      	sub	sp, #44	@ 0x2c
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007a8c:	4bae      	ldr	r3, [pc, #696]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a94:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007a96:	4bac      	ldr	r3, [pc, #688]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007aa0:	4ba9      	ldr	r3, [pc, #676]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa4:	0a1b      	lsrs	r3, r3, #8
 8007aa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007aaa:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007aac:	4ba6      	ldr	r3, [pc, #664]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab0:	091b      	lsrs	r3, r3, #4
 8007ab2:	f003 0301 	and.w	r3, r3, #1
 8007ab6:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007ab8:	4ba3      	ldr	r3, [pc, #652]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007abc:	08db      	lsrs	r3, r3, #3
 8007abe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	fb02 f303 	mul.w	r3, r2, r3
 8007ac8:	ee07 3a90 	vmov	s15, r3
 8007acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ad0:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 8126 	beq.w	8007d28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d053      	beq.n	8007b8a <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	2b03      	cmp	r3, #3
 8007ae6:	d86f      	bhi.n	8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d003      	beq.n	8007af6 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	2b02      	cmp	r3, #2
 8007af2:	d02b      	beq.n	8007b4c <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007af4:	e068      	b.n	8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007af6:	4b94      	ldr	r3, [pc, #592]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	08db      	lsrs	r3, r3, #3
 8007afc:	f003 0303 	and.w	r3, r3, #3
 8007b00:	4a92      	ldr	r2, [pc, #584]	@ (8007d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007b02:	fa22 f303 	lsr.w	r3, r2, r3
 8007b06:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	ee07 3a90 	vmov	s15, r3
 8007b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	ee07 3a90 	vmov	s15, r3
 8007b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b20:	6a3b      	ldr	r3, [r7, #32]
 8007b22:	ee07 3a90 	vmov	s15, r3
 8007b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b2a:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b2e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b46:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007b4a:	e068      	b.n	8007c1e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b4c:	69bb      	ldr	r3, [r7, #24]
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b56:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007d54 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8007b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	ee07 3a90 	vmov	s15, r3
 8007b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b68:	ed97 6a04 	vldr	s12, [r7, #16]
 8007b6c:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007b70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b84:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007b88:	e049      	b.n	8007c1e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	ee07 3a90 	vmov	s15, r3
 8007b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b94:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007d58 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8007b98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	ee07 3a90 	vmov	s15, r3
 8007ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba6:	ed97 6a04 	vldr	s12, [r7, #16]
 8007baa:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007bc6:	e02a      	b.n	8007c1e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007bc8:	4b5f      	ldr	r3, [pc, #380]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	08db      	lsrs	r3, r3, #3
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	4a5e      	ldr	r2, [pc, #376]	@ (8007d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bd8:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	ee07 3a90 	vmov	s15, r3
 8007be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	ee07 3a90 	vmov	s15, r3
 8007bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bfc:	ed97 6a04 	vldr	s12, [r7, #16]
 8007c00:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c0c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c18:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007c1c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c1e:	4b4a      	ldr	r3, [pc, #296]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c2a:	d121      	bne.n	8007c70 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007c2c:	4b46      	ldr	r3, [pc, #280]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d017      	beq.n	8007c68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c38:	4b43      	ldr	r3, [pc, #268]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c3c:	0a5b      	lsrs	r3, r3, #9
 8007c3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007c4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007c4e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007c52:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007c56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c5e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	601a      	str	r2, [r3, #0]
 8007c66:	e006      	b.n	8007c76 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	601a      	str	r2, [r3, #0]
 8007c6e:	e002      	b.n	8007c76 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007c76:	4b34      	ldr	r3, [pc, #208]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c7e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c82:	d121      	bne.n	8007cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007c84:	4b30      	ldr	r3, [pc, #192]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d017      	beq.n	8007cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c90:	4b2d      	ldr	r3, [pc, #180]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c94:	0c1b      	lsrs	r3, r3, #16
 8007c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007c9a:	ee07 3a90 	vmov	s15, r3
 8007c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007ca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007caa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cb6:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	605a      	str	r2, [r3, #4]
 8007cbe:	e006      	b.n	8007cce <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	605a      	str	r2, [r3, #4]
 8007cc6:	e002      	b.n	8007cce <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cce:	4b1e      	ldr	r3, [pc, #120]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007cda:	d121      	bne.n	8007d20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d017      	beq.n	8007d18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007ce8:	4b17      	ldr	r3, [pc, #92]	@ (8007d48 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cec:	0e1b      	lsrs	r3, r3, #24
 8007cee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cf2:	ee07 3a90 	vmov	s15, r3
 8007cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007cfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007cfe:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007d02:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007d06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d0e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d16:	e010      	b.n	8007d3a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	609a      	str	r2, [r3, #8]
}
 8007d1e:	e00c      	b.n	8007d3a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	609a      	str	r2, [r3, #8]
}
 8007d26:	e008      	b.n	8007d3a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	609a      	str	r2, [r3, #8]
}
 8007d3a:	bf00      	nop
 8007d3c:	372c      	adds	r7, #44	@ 0x2c
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	44020c00 	.word	0x44020c00
 8007d4c:	03d09000 	.word	0x03d09000
 8007d50:	46000000 	.word	0x46000000
 8007d54:	4a742400 	.word	0x4a742400
 8007d58:	4af42400 	.word	0x4af42400

08007d5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b08b      	sub	sp, #44	@ 0x2c
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007d64:	4bae      	ldr	r3, [pc, #696]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6c:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007d6e:	4bac      	ldr	r3, [pc, #688]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007d78:	4ba9      	ldr	r3, [pc, #676]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d7c:	0a1b      	lsrs	r3, r3, #8
 8007d7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d82:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007d84:	4ba6      	ldr	r3, [pc, #664]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d88:	091b      	lsrs	r3, r3, #4
 8007d8a:	f003 0301 	and.w	r3, r3, #1
 8007d8e:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007d90:	4ba3      	ldr	r3, [pc, #652]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d94:	08db      	lsrs	r3, r3, #3
 8007d96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	fb02 f303 	mul.w	r3, r2, r3
 8007da0:	ee07 3a90 	vmov	s15, r3
 8007da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007da8:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	f000 8126 	beq.w	8008000 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	2b03      	cmp	r3, #3
 8007db8:	d053      	beq.n	8007e62 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d86f      	bhi.n	8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d003      	beq.n	8007dce <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	2b02      	cmp	r3, #2
 8007dca:	d02b      	beq.n	8007e24 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007dcc:	e068      	b.n	8007ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007dce:	4b94      	ldr	r3, [pc, #592]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	08db      	lsrs	r3, r3, #3
 8007dd4:	f003 0303 	and.w	r3, r3, #3
 8007dd8:	4a92      	ldr	r2, [pc, #584]	@ (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007dda:	fa22 f303 	lsr.w	r3, r2, r3
 8007dde:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	ee07 3a90 	vmov	s15, r3
 8007df0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	ee07 3a90 	vmov	s15, r3
 8007dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e02:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e06:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e1e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007e22:	e068      	b.n	8007ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800802c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8007e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	ee07 3a90 	vmov	s15, r3
 8007e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e40:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e44:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e5c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007e60:	e049      	b.n	8007ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	ee07 3a90 	vmov	s15, r3
 8007e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e6c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008030 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	ee07 3a90 	vmov	s15, r3
 8007e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e7e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007e82:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e9a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007e9e:	e02a      	b.n	8007ef6 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ea0:	4b5f      	ldr	r3, [pc, #380]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	08db      	lsrs	r3, r3, #3
 8007ea6:	f003 0303 	and.w	r3, r3, #3
 8007eaa:	4a5e      	ldr	r2, [pc, #376]	@ (8008024 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007eac:	fa22 f303 	lsr.w	r3, r2, r3
 8007eb0:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	ee07 3a90 	vmov	s15, r3
 8007eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	ee07 3a90 	vmov	s15, r3
 8007ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007eca:	6a3b      	ldr	r3, [r7, #32]
 8007ecc:	ee07 3a90 	vmov	s15, r3
 8007ed0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ed4:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ed8:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007edc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ee4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ef0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007ef4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ef6:	4b4a      	ldr	r3, [pc, #296]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f02:	d121      	bne.n	8007f48 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007f04:	4b46      	ldr	r3, [pc, #280]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d017      	beq.n	8007f40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f10:	4b43      	ldr	r3, [pc, #268]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f14:	0a5b      	lsrs	r3, r3, #9
 8007f16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f1a:	ee07 3a90 	vmov	s15, r3
 8007f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007f22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f26:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007f2a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007f2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f36:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	e006      	b.n	8007f4e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	601a      	str	r2, [r3, #0]
 8007f46:	e002      	b.n	8007f4e <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f4e:	4b34      	ldr	r3, [pc, #208]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f5a:	d121      	bne.n	8007fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007f5c:	4b30      	ldr	r3, [pc, #192]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d017      	beq.n	8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f68:	4b2d      	ldr	r3, [pc, #180]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007f6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f6c:	0c1b      	lsrs	r3, r3, #16
 8007f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f72:	ee07 3a90 	vmov	s15, r3
 8007f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007f7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007f82:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f8e:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	605a      	str	r2, [r3, #4]
 8007f96:	e006      	b.n	8007fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	605a      	str	r2, [r3, #4]
 8007f9e:	e002      	b.n	8007fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fb2:	d121      	bne.n	8007ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d017      	beq.n	8007ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007fc0:	4b17      	ldr	r3, [pc, #92]	@ (8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fc4:	0e1b      	lsrs	r3, r3, #24
 8007fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007fd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007fda:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fe6:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007fee:	e010      	b.n	8008012 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	609a      	str	r2, [r3, #8]
}
 8007ff6:	e00c      	b.n	8008012 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	609a      	str	r2, [r3, #8]
}
 8007ffe:	e008      	b.n	8008012 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	609a      	str	r2, [r3, #8]
}
 8008012:	bf00      	nop
 8008014:	372c      	adds	r7, #44	@ 0x2c
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	44020c00 	.word	0x44020c00
 8008024:	03d09000 	.word	0x03d09000
 8008028:	46000000 	.word	0x46000000
 800802c:	4a742400 	.word	0x4a742400
 8008030:	4af42400 	.word	0x4af42400

08008034 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008034:	b590      	push	{r4, r7, lr}
 8008036:	b08f      	sub	sp, #60	@ 0x3c
 8008038:	af00      	add	r7, sp, #0
 800803a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800803e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008042:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8008046:	4321      	orrs	r1, r4
 8008048:	d150      	bne.n	80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800804a:	4b26      	ldr	r3, [pc, #152]	@ (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800804c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008054:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008056:	4b23      	ldr	r3, [pc, #140]	@ (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b02      	cmp	r3, #2
 8008062:	d108      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800806a:	d104      	bne.n	8008076 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 800806c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008070:	637b      	str	r3, [r7, #52]	@ 0x34
 8008072:	f002 bb2a 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008076:	4b1b      	ldr	r3, [pc, #108]	@ (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008078:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800807c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008080:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008084:	d108      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800808c:	d104      	bne.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800808e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008092:	637b      	str	r3, [r7, #52]	@ 0x34
 8008094:	f002 bb19 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8008098:	4b12      	ldr	r3, [pc, #72]	@ (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080a4:	d119      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080ac:	d115      	bne.n	80080da <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80080ae:	4b0d      	ldr	r3, [pc, #52]	@ (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80080b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080ba:	d30a      	bcc.n	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80080bc:	4b09      	ldr	r3, [pc, #36]	@ (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80080be:	69db      	ldr	r3, [r3, #28]
 80080c0:	0a1b      	lsrs	r3, r3, #8
 80080c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080c6:	4a08      	ldr	r2, [pc, #32]	@ (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80080c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80080cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80080ce:	f002 bafc 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80080d6:	f002 baf8 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80080da:	2300      	movs	r3, #0
 80080dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80080de:	f002 baf4 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80080e2:	bf00      	nop
 80080e4:	44020c00 	.word	0x44020c00
 80080e8:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80080ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80080f0:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80080f4:	ea50 0104 	orrs.w	r1, r0, r4
 80080f8:	f001 8275 	beq.w	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80080fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008100:	2801      	cmp	r0, #1
 8008102:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8008106:	f082 82dd 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800810a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800810e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8008112:	ea50 0104 	orrs.w	r1, r0, r4
 8008116:	f001 816c 	beq.w	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800811a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800811e:	2801      	cmp	r0, #1
 8008120:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8008124:	f082 82ce 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008128:	e9d7 0100 	ldrd	r0, r1, [r7]
 800812c:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8008130:	ea50 0104 	orrs.w	r1, r0, r4
 8008134:	f001 8602 	beq.w	8009d3c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8008138:	e9d7 0100 	ldrd	r0, r1, [r7]
 800813c:	2801      	cmp	r0, #1
 800813e:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 8008142:	f082 82bf 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008146:	e9d7 0100 	ldrd	r0, r1, [r7]
 800814a:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800814e:	ea50 0104 	orrs.w	r1, r0, r4
 8008152:	f001 854c 	beq.w	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8008156:	e9d7 0100 	ldrd	r0, r1, [r7]
 800815a:	2801      	cmp	r0, #1
 800815c:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8008160:	f082 82b0 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008164:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008168:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 800816c:	ea50 0104 	orrs.w	r1, r0, r4
 8008170:	f001 849e 	beq.w	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8008174:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008178:	2801      	cmp	r0, #1
 800817a:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800817e:	f082 82a1 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008182:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008186:	f1a1 0420 	sub.w	r4, r1, #32
 800818a:	ea50 0104 	orrs.w	r1, r0, r4
 800818e:	f001 83e8 	beq.w	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8008192:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008196:	2801      	cmp	r0, #1
 8008198:	f171 0120 	sbcs.w	r1, r1, #32
 800819c:	f082 8292 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081a4:	f1a1 0410 	sub.w	r4, r1, #16
 80081a8:	ea50 0104 	orrs.w	r1, r0, r4
 80081ac:	f002 8256 	beq.w	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80081b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081b4:	2801      	cmp	r0, #1
 80081b6:	f171 0110 	sbcs.w	r1, r1, #16
 80081ba:	f082 8283 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081c2:	f1a1 0408 	sub.w	r4, r1, #8
 80081c6:	ea50 0104 	orrs.w	r1, r0, r4
 80081ca:	f002 81cc 	beq.w	800a566 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80081ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081d2:	2801      	cmp	r0, #1
 80081d4:	f171 0108 	sbcs.w	r1, r1, #8
 80081d8:	f082 8274 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081e0:	1f0c      	subs	r4, r1, #4
 80081e2:	ea50 0104 	orrs.w	r1, r0, r4
 80081e6:	f001 8648 	beq.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80081ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081ee:	2801      	cmp	r0, #1
 80081f0:	f171 0104 	sbcs.w	r1, r1, #4
 80081f4:	f082 8266 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80081f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80081fc:	1e8c      	subs	r4, r1, #2
 80081fe:	ea50 0104 	orrs.w	r1, r0, r4
 8008202:	f002 8143 	beq.w	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8008206:	e9d7 0100 	ldrd	r0, r1, [r7]
 800820a:	2801      	cmp	r0, #1
 800820c:	f171 0102 	sbcs.w	r1, r1, #2
 8008210:	f082 8258 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008214:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008218:	1e4c      	subs	r4, r1, #1
 800821a:	ea50 0104 	orrs.w	r1, r0, r4
 800821e:	f002 80ce 	beq.w	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8008222:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008226:	2801      	cmp	r0, #1
 8008228:	f171 0101 	sbcs.w	r1, r1, #1
 800822c:	f082 824a 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008230:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008234:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8008238:	4321      	orrs	r1, r4
 800823a:	f002 8059 	beq.w	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800823e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008242:	4cd9      	ldr	r4, [pc, #868]	@ (80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8008244:	42a0      	cmp	r0, r4
 8008246:	f171 0100 	sbcs.w	r1, r1, #0
 800824a:	f082 823b 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800824e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008252:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8008256:	4321      	orrs	r1, r4
 8008258:	f001 87d9 	beq.w	800a20e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 800825c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008260:	4cd2      	ldr	r4, [pc, #840]	@ (80085ac <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8008262:	42a0      	cmp	r0, r4
 8008264:	f171 0100 	sbcs.w	r1, r1, #0
 8008268:	f082 822c 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800826c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008270:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8008274:	4321      	orrs	r1, r4
 8008276:	f001 8751 	beq.w	800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 800827a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800827e:	4ccc      	ldr	r4, [pc, #816]	@ (80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8008280:	42a0      	cmp	r0, r4
 8008282:	f171 0100 	sbcs.w	r1, r1, #0
 8008286:	f082 821d 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800828a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800828e:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8008292:	4321      	orrs	r1, r4
 8008294:	f001 869a 	beq.w	8009fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8008298:	e9d7 0100 	ldrd	r0, r1, [r7]
 800829c:	4cc5      	ldr	r4, [pc, #788]	@ (80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800829e:	42a0      	cmp	r0, r4
 80082a0:	f171 0100 	sbcs.w	r1, r1, #0
 80082a4:	f082 820e 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082ac:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80082b0:	4321      	orrs	r1, r4
 80082b2:	f001 8612 	beq.w	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80082b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082ba:	4cbf      	ldr	r4, [pc, #764]	@ (80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80082bc:	42a0      	cmp	r0, r4
 80082be:	f171 0100 	sbcs.w	r1, r1, #0
 80082c2:	f082 81ff 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082ca:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80082ce:	4321      	orrs	r1, r4
 80082d0:	f002 817e 	beq.w	800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80082d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082d8:	4cb8      	ldr	r4, [pc, #736]	@ (80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80082da:	42a0      	cmp	r0, r4
 80082dc:	f171 0100 	sbcs.w	r1, r1, #0
 80082e0:	f082 81f0 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80082e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082e8:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 80082ec:	4321      	orrs	r1, r4
 80082ee:	f000 829e 	beq.w	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80082f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082f6:	4cb2      	ldr	r4, [pc, #712]	@ (80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80082f8:	42a0      	cmp	r0, r4
 80082fa:	f171 0100 	sbcs.w	r1, r1, #0
 80082fe:	f082 81e1 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008302:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008306:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800830a:	4321      	orrs	r1, r4
 800830c:	f000 826d 	beq.w	80087ea <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008310:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008314:	4cab      	ldr	r4, [pc, #684]	@ (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008316:	42a0      	cmp	r0, r4
 8008318:	f171 0100 	sbcs.w	r1, r1, #0
 800831c:	f082 81d2 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008320:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008324:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8008328:	4321      	orrs	r1, r4
 800832a:	f001 800d 	beq.w	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800832e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008332:	4ca5      	ldr	r4, [pc, #660]	@ (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008334:	42a0      	cmp	r0, r4
 8008336:	f171 0100 	sbcs.w	r1, r1, #0
 800833a:	f082 81c3 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800833e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008342:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8008346:	4321      	orrs	r1, r4
 8008348:	f000 81d0 	beq.w	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 800834c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008350:	4c9e      	ldr	r4, [pc, #632]	@ (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8008352:	42a0      	cmp	r0, r4
 8008354:	f171 0100 	sbcs.w	r1, r1, #0
 8008358:	f082 81b4 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800835c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008360:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8008364:	4321      	orrs	r1, r4
 8008366:	f000 8142 	beq.w	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 800836a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800836e:	4c98      	ldr	r4, [pc, #608]	@ (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8008370:	42a0      	cmp	r0, r4
 8008372:	f171 0100 	sbcs.w	r1, r1, #0
 8008376:	f082 81a5 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800837a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800837e:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8008382:	4321      	orrs	r1, r4
 8008384:	f001 824e 	beq.w	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8008388:	e9d7 0100 	ldrd	r0, r1, [r7]
 800838c:	4c91      	ldr	r4, [pc, #580]	@ (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800838e:	42a0      	cmp	r0, r4
 8008390:	f171 0100 	sbcs.w	r1, r1, #0
 8008394:	f082 8196 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008398:	e9d7 0100 	ldrd	r0, r1, [r7]
 800839c:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80083a0:	4321      	orrs	r1, r4
 80083a2:	f001 8197 	beq.w	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80083a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083aa:	4c8b      	ldr	r4, [pc, #556]	@ (80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80083ac:	42a0      	cmp	r0, r4
 80083ae:	f171 0100 	sbcs.w	r1, r1, #0
 80083b2:	f082 8187 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083ba:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80083be:	4321      	orrs	r1, r4
 80083c0:	f001 8154 	beq.w	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 80083c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083c8:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80083cc:	f171 0100 	sbcs.w	r1, r1, #0
 80083d0:	f082 8178 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083d8:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80083dc:	4321      	orrs	r1, r4
 80083de:	f001 80b7 	beq.w	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80083e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083e6:	f248 0401 	movw	r4, #32769	@ 0x8001
 80083ea:	42a0      	cmp	r0, r4
 80083ec:	f171 0100 	sbcs.w	r1, r1, #0
 80083f0:	f082 8168 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80083f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80083f8:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80083fc:	4321      	orrs	r1, r4
 80083fe:	f001 8064 	beq.w	80094ca <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8008402:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008406:	f244 0401 	movw	r4, #16385	@ 0x4001
 800840a:	42a0      	cmp	r0, r4
 800840c:	f171 0100 	sbcs.w	r1, r1, #0
 8008410:	f082 8158 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008418:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 800841c:	4321      	orrs	r1, r4
 800841e:	f001 8011 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8008422:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008426:	f242 0401 	movw	r4, #8193	@ 0x2001
 800842a:	42a0      	cmp	r0, r4
 800842c:	f171 0100 	sbcs.w	r1, r1, #0
 8008430:	f082 8148 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008434:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008438:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 800843c:	4321      	orrs	r1, r4
 800843e:	f000 871e 	beq.w	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8008442:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008446:	f241 0401 	movw	r4, #4097	@ 0x1001
 800844a:	42a0      	cmp	r0, r4
 800844c:	f171 0100 	sbcs.w	r1, r1, #0
 8008450:	f082 8138 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008454:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008458:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 800845c:	4321      	orrs	r1, r4
 800845e:	f000 86a8 	beq.w	80091b2 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8008462:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008466:	f640 0401 	movw	r4, #2049	@ 0x801
 800846a:	42a0      	cmp	r0, r4
 800846c:	f171 0100 	sbcs.w	r1, r1, #0
 8008470:	f082 8128 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008474:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008478:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 800847c:	4321      	orrs	r1, r4
 800847e:	f000 8632 	beq.w	80090e6 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8008482:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008486:	f240 4401 	movw	r4, #1025	@ 0x401
 800848a:	42a0      	cmp	r0, r4
 800848c:	f171 0100 	sbcs.w	r1, r1, #0
 8008490:	f082 8118 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008494:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008498:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 800849c:	4321      	orrs	r1, r4
 800849e:	f000 85b0 	beq.w	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80084a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084a6:	f240 2401 	movw	r4, #513	@ 0x201
 80084aa:	42a0      	cmp	r0, r4
 80084ac:	f171 0100 	sbcs.w	r1, r1, #0
 80084b0:	f082 8108 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084b8:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 80084bc:	4321      	orrs	r1, r4
 80084be:	f000 8535 	beq.w	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80084c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084c6:	f240 1401 	movw	r4, #257	@ 0x101
 80084ca:	42a0      	cmp	r0, r4
 80084cc:	f171 0100 	sbcs.w	r1, r1, #0
 80084d0:	f082 80f8 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084d8:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 80084dc:	4321      	orrs	r1, r4
 80084de:	f000 84ba 	beq.w	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80084e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084e6:	2881      	cmp	r0, #129	@ 0x81
 80084e8:	f171 0100 	sbcs.w	r1, r1, #0
 80084ec:	f082 80ea 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80084f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084f4:	2821      	cmp	r0, #33	@ 0x21
 80084f6:	f171 0100 	sbcs.w	r1, r1, #0
 80084fa:	d26f      	bcs.n	80085dc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80084fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008500:	4301      	orrs	r1, r0
 8008502:	f002 80df 	beq.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008506:	e9d7 0100 	ldrd	r0, r1, [r7]
 800850a:	1e42      	subs	r2, r0, #1
 800850c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008510:	2a20      	cmp	r2, #32
 8008512:	f173 0100 	sbcs.w	r1, r3, #0
 8008516:	f082 80d5 	bcs.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800851a:	2a1f      	cmp	r2, #31
 800851c:	f202 80d2 	bhi.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008520:	a101      	add	r1, pc, #4	@ (adr r1, 8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008522:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008526:	bf00      	nop
 8008528:	08008889 	.word	0x08008889
 800852c:	08008955 	.word	0x08008955
 8008530:	0800a6c5 	.word	0x0800a6c5
 8008534:	08008a15 	.word	0x08008a15
 8008538:	0800a6c5 	.word	0x0800a6c5
 800853c:	0800a6c5 	.word	0x0800a6c5
 8008540:	0800a6c5 	.word	0x0800a6c5
 8008544:	08008ae5 	.word	0x08008ae5
 8008548:	0800a6c5 	.word	0x0800a6c5
 800854c:	0800a6c5 	.word	0x0800a6c5
 8008550:	0800a6c5 	.word	0x0800a6c5
 8008554:	0800a6c5 	.word	0x0800a6c5
 8008558:	0800a6c5 	.word	0x0800a6c5
 800855c:	0800a6c5 	.word	0x0800a6c5
 8008560:	0800a6c5 	.word	0x0800a6c5
 8008564:	08008bc7 	.word	0x08008bc7
 8008568:	0800a6c5 	.word	0x0800a6c5
 800856c:	0800a6c5 	.word	0x0800a6c5
 8008570:	0800a6c5 	.word	0x0800a6c5
 8008574:	0800a6c5 	.word	0x0800a6c5
 8008578:	0800a6c5 	.word	0x0800a6c5
 800857c:	0800a6c5 	.word	0x0800a6c5
 8008580:	0800a6c5 	.word	0x0800a6c5
 8008584:	0800a6c5 	.word	0x0800a6c5
 8008588:	0800a6c5 	.word	0x0800a6c5
 800858c:	0800a6c5 	.word	0x0800a6c5
 8008590:	0800a6c5 	.word	0x0800a6c5
 8008594:	0800a6c5 	.word	0x0800a6c5
 8008598:	0800a6c5 	.word	0x0800a6c5
 800859c:	0800a6c5 	.word	0x0800a6c5
 80085a0:	0800a6c5 	.word	0x0800a6c5
 80085a4:	08008c9d 	.word	0x08008c9d
 80085a8:	80000001 	.word	0x80000001
 80085ac:	40000001 	.word	0x40000001
 80085b0:	20000001 	.word	0x20000001
 80085b4:	10000001 	.word	0x10000001
 80085b8:	08000001 	.word	0x08000001
 80085bc:	04000001 	.word	0x04000001
 80085c0:	00800001 	.word	0x00800001
 80085c4:	00400001 	.word	0x00400001
 80085c8:	00200001 	.word	0x00200001
 80085cc:	00100001 	.word	0x00100001
 80085d0:	00080001 	.word	0x00080001
 80085d4:	00040001 	.word	0x00040001
 80085d8:	00020001 	.word	0x00020001
 80085dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085e0:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80085e4:	430b      	orrs	r3, r1
 80085e6:	f000 83c4 	beq.w	8008d72 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80085ea:	f002 b86b 	b.w	800a6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80085ee:	4ba1      	ldr	r3, [pc, #644]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80085f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80085f4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80085f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008600:	d036      	beq.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008604:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008608:	d86b      	bhi.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008610:	d02b      	beq.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008614:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008618:	d863      	bhi.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800861a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008620:	d01b      	beq.n	800865a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008628:	d85b      	bhi.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	2b00      	cmp	r3, #0
 800862e:	d004      	beq.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8008630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008632:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008636:	d008      	beq.n	800864a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8008638:	e053      	b.n	80086e2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800863a:	f107 0320 	add.w	r3, r7, #32
 800863e:	4618      	mov	r0, r3
 8008640:	f7ff f8b4 	bl	80077ac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008646:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008648:	e04e      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800864a:	f107 0314 	add.w	r3, r7, #20
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff fa18 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008658:	e046      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800865a:	f107 0308 	add.w	r3, r7, #8
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff fb7c 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008668:	e03e      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800866a:	4b83      	ldr	r3, [pc, #524]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800866c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800866e:	e03b      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008670:	4b80      	ldr	r3, [pc, #512]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008676:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800867a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800867c:	4b7d      	ldr	r3, [pc, #500]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0302 	and.w	r3, r3, #2
 8008684:	2b02      	cmp	r3, #2
 8008686:	d10c      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868a:	2b00      	cmp	r3, #0
 800868c:	d109      	bne.n	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800868e:	4b79      	ldr	r3, [pc, #484]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	08db      	lsrs	r3, r3, #3
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	4a78      	ldr	r2, [pc, #480]	@ (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800869a:	fa22 f303 	lsr.w	r3, r2, r3
 800869e:	637b      	str	r3, [r7, #52]	@ 0x34
 80086a0:	e01e      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086a2:	4b74      	ldr	r3, [pc, #464]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086ae:	d106      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80086b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086b6:	d102      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80086b8:	4b71      	ldr	r3, [pc, #452]	@ (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80086ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80086bc:	e010      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086be:	4b6d      	ldr	r3, [pc, #436]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80086c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086ca:	d106      	bne.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80086cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086d2:	d102      	bne.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80086d4:	4b6b      	ldr	r3, [pc, #428]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d8:	e002      	b.n	80086e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80086da:	2300      	movs	r3, #0
 80086dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80086de:	e003      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80086e0:	e002      	b.n	80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80086e6:	bf00      	nop
          }
        }
        break;
 80086e8:	f001 bfef 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80086ec:	4b61      	ldr	r3, [pc, #388]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80086ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80086f2:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 80086f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80086f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086fe:	d036      	beq.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008702:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008706:	d86b      	bhi.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800870a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800870e:	d02b      	beq.n	8008768 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008712:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008716:	d863      	bhi.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800871a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800871e:	d01b      	beq.n	8008758 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008726:	d85b      	bhi.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800872a:	2b00      	cmp	r3, #0
 800872c:	d004      	beq.n	8008738 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800872e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008730:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008734:	d008      	beq.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8008736:	e053      	b.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008738:	f107 0320 	add.w	r3, r7, #32
 800873c:	4618      	mov	r0, r3
 800873e:	f7ff f835 	bl	80077ac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008744:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008746:	e04e      	b.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008748:	f107 0314 	add.w	r3, r7, #20
 800874c:	4618      	mov	r0, r3
 800874e:	f7ff f999 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008756:	e046      	b.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008758:	f107 0308 	add.w	r3, r7, #8
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff fafd 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008766:	e03e      	b.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008768:	4b43      	ldr	r3, [pc, #268]	@ (8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800876a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800876c:	e03b      	b.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800876e:	4b41      	ldr	r3, [pc, #260]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008774:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008778:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800877a:	4b3e      	ldr	r3, [pc, #248]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b02      	cmp	r3, #2
 8008784:	d10c      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8008786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d109      	bne.n	80087a0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800878c:	4b39      	ldr	r3, [pc, #228]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	08db      	lsrs	r3, r3, #3
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	4a39      	ldr	r2, [pc, #228]	@ (800887c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008798:	fa22 f303 	lsr.w	r3, r2, r3
 800879c:	637b      	str	r3, [r7, #52]	@ 0x34
 800879e:	e01e      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087a0:	4b34      	ldr	r3, [pc, #208]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80087a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087ac:	d106      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80087ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087b4:	d102      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80087b6:	4b32      	ldr	r3, [pc, #200]	@ (8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80087b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ba:	e010      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087bc:	4b2d      	ldr	r3, [pc, #180]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80087c8:	d106      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80087ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087d0:	d102      	bne.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80087d2:	4b2c      	ldr	r3, [pc, #176]	@ (8008884 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80087d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d6:	e002      	b.n	80087de <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80087d8:	2300      	movs	r3, #0
 80087da:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80087dc:	e003      	b.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80087de:	e002      	b.n	80087e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80087e0:	2300      	movs	r3, #0
 80087e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80087e4:	bf00      	nop
          }
        }
        break;
 80087e6:	f001 bf70 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80087ea:	4b22      	ldr	r3, [pc, #136]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80087ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087f4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80087f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d108      	bne.n	800880e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087fc:	f107 0320 	add.w	r3, r7, #32
 8008800:	4618      	mov	r0, r3
 8008802:	f7fe ffd3 	bl	80077ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008808:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800880a:	f001 bf5e 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 800880e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008810:	2b40      	cmp	r3, #64	@ 0x40
 8008812:	d108      	bne.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008814:	f107 0314 	add.w	r3, r7, #20
 8008818:	4618      	mov	r0, r3
 800881a:	f7ff f933 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008822:	f001 bf52 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800882a:	f001 bf4e 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800882e:	4b11      	ldr	r3, [pc, #68]	@ (8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008830:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008838:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 800883a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883c:	2b00      	cmp	r3, #0
 800883e:	d108      	bne.n	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008840:	f107 0320 	add.w	r3, r7, #32
 8008844:	4618      	mov	r0, r3
 8008846:	f7fe ffb1 	bl	80077ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800884a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800884e:	f001 bf3c 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8008852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008854:	2b80      	cmp	r3, #128	@ 0x80
 8008856:	d108      	bne.n	800886a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008858:	f107 0314 	add.w	r3, r7, #20
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff f911 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008866:	f001 bf30 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800886e:	f001 bf2c 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008872:	bf00      	nop
 8008874:	44020c00 	.word	0x44020c00
 8008878:	00bb8000 	.word	0x00bb8000
 800887c:	03d09000 	.word	0x03d09000
 8008880:	003d0900 	.word	0x003d0900
 8008884:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008888:	4b9d      	ldr	r3, [pc, #628]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800888a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800888e:	f003 0307 	and.w	r3, r3, #7
 8008892:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008896:	2b00      	cmp	r3, #0
 8008898:	d104      	bne.n	80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800889a:	f7fc ffd1 	bl	8005840 <HAL_RCC_GetPCLK2Freq>
 800889e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80088a0:	f001 bf13 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80088a4:	4b96      	ldr	r3, [pc, #600]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088b0:	d10a      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d107      	bne.n	80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088b8:	f107 0314 	add.w	r3, r7, #20
 80088bc:	4618      	mov	r0, r3
 80088be:	f7ff f8e1 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80088c6:	e043      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80088c8:	4b8d      	ldr	r3, [pc, #564]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088d4:	d10a      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d107      	bne.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088dc:	f107 0308 	add.w	r3, r7, #8
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7ff fa3b 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088ea:	e031      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80088ec:	4b84      	ldr	r3, [pc, #528]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f003 0302 	and.w	r3, r3, #2
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d10c      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80088f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d109      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088fe:	4b80      	ldr	r3, [pc, #512]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	08db      	lsrs	r3, r3, #3
 8008904:	f003 0303 	and.w	r3, r3, #3
 8008908:	4a7e      	ldr	r2, [pc, #504]	@ (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800890a:	fa22 f303 	lsr.w	r3, r2, r3
 800890e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008910:	e01e      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008912:	4b7b      	ldr	r3, [pc, #492]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800891a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800891e:	d105      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8008920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008922:	2b04      	cmp	r3, #4
 8008924:	d102      	bne.n	800892c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8008926:	4b78      	ldr	r3, [pc, #480]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008928:	637b      	str	r3, [r7, #52]	@ 0x34
 800892a:	e011      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800892c:	4b74      	ldr	r3, [pc, #464]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800892e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008932:	f003 0302 	and.w	r3, r3, #2
 8008936:	2b02      	cmp	r3, #2
 8008938:	d106      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 800893a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893c:	2b05      	cmp	r3, #5
 800893e:	d103      	bne.n	8008948 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008940:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008944:	637b      	str	r3, [r7, #52]	@ 0x34
 8008946:	e003      	b.n	8008950 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8008948:	2300      	movs	r3, #0
 800894a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800894c:	f001 bebd 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008950:	f001 bebb 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008954:	4b6a      	ldr	r3, [pc, #424]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008956:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800895a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800895e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008962:	2b00      	cmp	r3, #0
 8008964:	d104      	bne.n	8008970 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008966:	f7fc ff55 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 800896a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 800896c:	f001 bead 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008970:	4b63      	ldr	r3, [pc, #396]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008978:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800897c:	d10a      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 800897e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008980:	2b08      	cmp	r3, #8
 8008982:	d107      	bne.n	8008994 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008984:	f107 0314 	add.w	r3, r7, #20
 8008988:	4618      	mov	r0, r3
 800898a:	f7ff f87b 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	637b      	str	r3, [r7, #52]	@ 0x34
 8008992:	e03d      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	2b10      	cmp	r3, #16
 8008998:	d108      	bne.n	80089ac <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800899a:	f107 0308 	add.w	r3, r7, #8
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff f9dc 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089a8:	f001 be8f 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80089ac:	4b54      	ldr	r3, [pc, #336]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d10c      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80089b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ba:	2b18      	cmp	r3, #24
 80089bc:	d109      	bne.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089be:	4b50      	ldr	r3, [pc, #320]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	08db      	lsrs	r3, r3, #3
 80089c4:	f003 0303 	and.w	r3, r3, #3
 80089c8:	4a4e      	ldr	r2, [pc, #312]	@ (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80089ca:	fa22 f303 	lsr.w	r3, r2, r3
 80089ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80089d0:	e01e      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 80089d2:	4b4b      	ldr	r3, [pc, #300]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089de:	d105      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80089e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e2:	2b20      	cmp	r3, #32
 80089e4:	d102      	bne.n	80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 80089e6:	4b48      	ldr	r3, [pc, #288]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80089e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ea:	e011      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80089ec:	4b44      	ldr	r3, [pc, #272]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80089ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089f2:	f003 0302 	and.w	r3, r3, #2
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d106      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 80089fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fc:	2b28      	cmp	r3, #40	@ 0x28
 80089fe:	d103      	bne.n	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8008a00:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a06:	e003      	b.n	8008a10 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a0c:	f001 be5d 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a10:	f001 be5b 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008a14:	4b3a      	ldr	r3, [pc, #232]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008a1a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8008a1e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d104      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a26:	f7fc fef5 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8008a2a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a2c:	f001 be4d 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008a30:	4b33      	ldr	r3, [pc, #204]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a38:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a3c:	d10a      	bne.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a40:	2b40      	cmp	r3, #64	@ 0x40
 8008a42:	d107      	bne.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a44:	f107 0314 	add.w	r3, r7, #20
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f7ff f81b 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a52:	e045      	b.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8008a54:	4b2a      	ldr	r3, [pc, #168]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a60:	d10a      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8008a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a64:	2b80      	cmp	r3, #128	@ 0x80
 8008a66:	d107      	bne.n	8008a78 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a68:	f107 0308 	add.w	r3, r7, #8
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7ff f975 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a76:	e033      	b.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008a78:	4b21      	ldr	r3, [pc, #132]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0302 	and.w	r3, r3, #2
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d10c      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8008a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a86:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a88:	d109      	bne.n	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	08db      	lsrs	r3, r3, #3
 8008a90:	f003 0303 	and.w	r3, r3, #3
 8008a94:	4a1b      	ldr	r2, [pc, #108]	@ (8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008a96:	fa22 f303 	lsr.w	r3, r2, r3
 8008a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a9c:	e020      	b.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008a9e:	4b18      	ldr	r3, [pc, #96]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008aa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aaa:	d106      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ab2:	d102      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008ab4:	4b14      	ldr	r3, [pc, #80]	@ (8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab8:	e012      	b.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008aba:	4b11      	ldr	r3, [pc, #68]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ac0:	f003 0302 	and.w	r3, r3, #2
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d107      	bne.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aca:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008ace:	d103      	bne.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008ad0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ad6:	e003      	b.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008adc:	f001 bdf5 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ae0:	f001 bdf3 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008ae4:	4b06      	ldr	r3, [pc, #24]	@ (8008b00 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008aea:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008aee:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10a      	bne.n	8008b0c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008af6:	f7fc fe8d 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8008afa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008afc:	f001 bde5 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b00:	44020c00 	.word	0x44020c00
 8008b04:	03d09000 	.word	0x03d09000
 8008b08:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008b0c:	4ba0      	ldr	r3, [pc, #640]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b18:	d10b      	bne.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b20:	d107      	bne.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b22:	f107 0314 	add.w	r3, r7, #20
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7fe ffac 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b30:	e047      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008b32:	4b97      	ldr	r3, [pc, #604]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b3e:	d10b      	bne.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8008b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b46:	d107      	bne.n	8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b48:	f107 0308 	add.w	r3, r7, #8
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7ff f905 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b56:	e034      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008b58:	4b8d      	ldr	r3, [pc, #564]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0302 	and.w	r3, r3, #2
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d10d      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b66:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008b6a:	d109      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b6c:	4b88      	ldr	r3, [pc, #544]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	08db      	lsrs	r3, r3, #3
 8008b72:	f003 0303 	and.w	r3, r3, #3
 8008b76:	4a87      	ldr	r2, [pc, #540]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008b78:	fa22 f303 	lsr.w	r3, r2, r3
 8008b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b7e:	e020      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008b80:	4b83      	ldr	r3, [pc, #524]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b8c:	d106      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8008b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b94:	d102      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8008b96:	4b80      	ldr	r3, [pc, #512]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b9a:	e012      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008b9c:	4b7c      	ldr	r3, [pc, #496]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b02      	cmp	r3, #2
 8008ba8:	d107      	bne.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8008baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bac:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008bb0:	d103      	bne.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8008bb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bb8:	e003      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008bbe:	f001 bd84 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bc2:	f001 bd82 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008bc6:	4b72      	ldr	r3, [pc, #456]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008bcc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008bd0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008bd8:	f7fc fe1c 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8008bdc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008bde:	f001 bd74 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008be2:	4b6b      	ldr	r3, [pc, #428]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008bea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008bee:	d10b      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008bf6:	d107      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bf8:	f107 0314 	add.w	r3, r7, #20
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fe ff41 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c06:	e047      	b.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008c08:	4b61      	ldr	r3, [pc, #388]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c14:	d10b      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c1c:	d107      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c1e:	f107 0308 	add.w	r3, r7, #8
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7ff f89a 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c2c:	e034      	b.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008c2e:	4b58      	ldr	r3, [pc, #352]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d10d      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c3c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c40:	d109      	bne.n	8008c56 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c42:	4b53      	ldr	r3, [pc, #332]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	08db      	lsrs	r3, r3, #3
 8008c48:	f003 0303 	and.w	r3, r3, #3
 8008c4c:	4a51      	ldr	r2, [pc, #324]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8008c52:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c54:	e020      	b.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008c56:	4b4e      	ldr	r3, [pc, #312]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c62:	d106      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c6a:	d102      	bne.n	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8008c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c70:	e012      	b.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008c72:	4b47      	ldr	r3, [pc, #284]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c78:	f003 0302 	and.w	r3, r3, #2
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d107      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8008c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c82:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008c86:	d103      	bne.n	8008c90 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008c88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c8e:	e003      	b.n	8008c98 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c94:	f001 bd19 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c98:	f001 bd17 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008c9c:	4b3c      	ldr	r3, [pc, #240]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008c9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008ca2:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008ca6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d104      	bne.n	8008cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008cae:	f7fc fdb1 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8008cb2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008cb4:	f001 bd09 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008cb8:	4b35      	ldr	r3, [pc, #212]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cc4:	d10b      	bne.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ccc:	d107      	bne.n	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008cce:	f107 0314 	add.w	r3, r7, #20
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7fe fed6 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cdc:	e047      	b.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008cde:	4b2c      	ldr	r3, [pc, #176]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ce6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cea:	d10b      	bne.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8008cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cf2:	d107      	bne.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cf4:	f107 0308 	add.w	r3, r7, #8
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7ff f82f 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d02:	e034      	b.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008d04:	4b22      	ldr	r3, [pc, #136]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d10d      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8008d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d12:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008d16:	d109      	bne.n	8008d2c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d18:	4b1d      	ldr	r3, [pc, #116]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	08db      	lsrs	r3, r3, #3
 8008d1e:	f003 0303 	and.w	r3, r3, #3
 8008d22:	4a1c      	ldr	r2, [pc, #112]	@ (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8008d24:	fa22 f303 	lsr.w	r3, r2, r3
 8008d28:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d2a:	e020      	b.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008d2c:	4b18      	ldr	r3, [pc, #96]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d38:	d106      	bne.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d40:	d102      	bne.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8008d42:	4b15      	ldr	r3, [pc, #84]	@ (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d46:	e012      	b.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008d48:	4b11      	ldr	r3, [pc, #68]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d4e:	f003 0302 	and.w	r3, r3, #2
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d107      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d58:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008d5c:	d103      	bne.n	8008d66 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8008d5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d64:	e003      	b.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008d66:	2300      	movs	r3, #0
 8008d68:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d6a:	f001 bcae 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d6e:	f001 bcac 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8008d72:	4b07      	ldr	r3, [pc, #28]	@ (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008d74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008d78:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8008d7c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10b      	bne.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d84:	f7fc fd46 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8008d88:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d8a:	f001 bc9e 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d8e:	bf00      	nop
 8008d90:	44020c00 	.word	0x44020c00
 8008d94:	03d09000 	.word	0x03d09000
 8008d98:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008d9c:	4ba0      	ldr	r3, [pc, #640]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008da4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008da8:	d10b      	bne.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008db0:	d107      	bne.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008db2:	f107 0314 	add.w	r3, r7, #20
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7fe fe64 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008dbc:	69bb      	ldr	r3, [r7, #24]
 8008dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dc0:	e047      	b.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008dc2:	4b97      	ldr	r3, [pc, #604]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008dca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008dce:	d10b      	bne.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008dd6:	d107      	bne.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008dd8:	f107 0308 	add.w	r3, r7, #8
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fe ffbd 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de6:	e034      	b.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008de8:	4b8d      	ldr	r3, [pc, #564]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0302 	and.w	r3, r3, #2
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d10d      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8008df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008df6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008dfa:	d109      	bne.n	8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008dfc:	4b88      	ldr	r3, [pc, #544]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	08db      	lsrs	r3, r3, #3
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	4a87      	ldr	r2, [pc, #540]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008e08:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e0e:	e020      	b.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008e10:	4b83      	ldr	r3, [pc, #524]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e1c:	d106      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8008e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e24:	d102      	bne.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8008e26:	4b80      	ldr	r3, [pc, #512]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008e28:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e2a:	e012      	b.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008e2c:	4b7c      	ldr	r3, [pc, #496]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008e32:	f003 0302 	and.w	r3, r3, #2
 8008e36:	2b02      	cmp	r3, #2
 8008e38:	d107      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8008e40:	d103      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 8008e42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e48:	e003      	b.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e4e:	f001 bc3c 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e52:	f001 bc3a 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008e56:	4b72      	ldr	r3, [pc, #456]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008e5c:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008e60:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d104      	bne.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008e68:	f7fc fcd4 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8008e6c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e6e:	f001 bc2c 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008e72:	4b6b      	ldr	r3, [pc, #428]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e7e:	d10b      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e82:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e86:	d107      	bne.n	8008e98 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e88:	f107 0314 	add.w	r3, r7, #20
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7fe fdf9 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e96:	e047      	b.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008e98:	4b61      	ldr	r3, [pc, #388]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ea0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ea4:	d10b      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008eac:	d107      	bne.n	8008ebe <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eae:	f107 0308 	add.w	r3, r7, #8
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe ff52 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ebc:	e034      	b.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008ebe:	4b58      	ldr	r3, [pc, #352]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 0302 	and.w	r3, r3, #2
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d10d      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ecc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008ed0:	d109      	bne.n	8008ee6 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ed2:	4b53      	ldr	r3, [pc, #332]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	08db      	lsrs	r3, r3, #3
 8008ed8:	f003 0303 	and.w	r3, r3, #3
 8008edc:	4a51      	ldr	r2, [pc, #324]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008ede:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ee4:	e020      	b.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008eee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ef2:	d106      	bne.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008efa:	d102      	bne.n	8008f02 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008efc:	4b4a      	ldr	r3, [pc, #296]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008efe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f00:	e012      	b.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008f02:	4b47      	ldr	r3, [pc, #284]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f08:	f003 0302 	and.w	r3, r3, #2
 8008f0c:	2b02      	cmp	r3, #2
 8008f0e:	d107      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8008f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f12:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008f16:	d103      	bne.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008f18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f1e:	e003      	b.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8008f20:	2300      	movs	r3, #0
 8008f22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f24:	f001 bbd1 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f28:	f001 bbcf 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008f32:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008f36:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d104      	bne.n	8008f48 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f3e:	f7fc fc69 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8008f42:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f44:	f001 bbc1 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008f48:	4b35      	ldr	r3, [pc, #212]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f54:	d10b      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f5c:	d107      	bne.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f5e:	f107 0314 	add.w	r3, r7, #20
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fe fd8e 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f6c:	e047      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f7a:	d10b      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f82:	d107      	bne.n	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f84:	f107 0308 	add.w	r3, r7, #8
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f7fe fee7 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f92:	e034      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008f94:	4b22      	ldr	r3, [pc, #136]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f003 0302 	and.w	r3, r3, #2
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d10d      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008fa6:	d109      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	08db      	lsrs	r3, r3, #3
 8008fae:	f003 0303 	and.w	r3, r3, #3
 8008fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fba:	e020      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008fbc:	4b18      	ldr	r3, [pc, #96]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008fc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fc8:	d106      	bne.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008fd0:	d102      	bne.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008fd2:	4b15      	ldr	r3, [pc, #84]	@ (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008fd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fd6:	e012      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008fd8:	4b11      	ldr	r3, [pc, #68]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d107      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008fec:	d103      	bne.n	8008ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ff2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff4:	e003      	b.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ffa:	f001 bb66 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ffe:	f001 bb64 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8009002:	4b07      	ldr	r3, [pc, #28]	@ (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009004:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009008:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800900c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800900e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10b      	bne.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009014:	f7fc fbfe 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8009018:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800901a:	f001 bb56 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800901e:	bf00      	nop
 8009020:	44020c00 	.word	0x44020c00
 8009024:	03d09000 	.word	0x03d09000
 8009028:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800902c:	4ba1      	ldr	r3, [pc, #644]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009034:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009038:	d10b      	bne.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800903a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800903c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009040:	d107      	bne.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009042:	f107 0314 	add.w	r3, r7, #20
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fd1c 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800904c:	69bb      	ldr	r3, [r7, #24]
 800904e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009050:	e047      	b.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8009052:	4b98      	ldr	r3, [pc, #608]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800905a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800905e:	d10b      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8009060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009066:	d107      	bne.n	8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009068:	f107 0308 	add.w	r3, r7, #8
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe fe75 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	637b      	str	r3, [r7, #52]	@ 0x34
 8009076:	e034      	b.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8009078:	4b8e      	ldr	r3, [pc, #568]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0302 	and.w	r3, r3, #2
 8009080:	2b02      	cmp	r3, #2
 8009082:	d10d      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8009084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009086:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800908a:	d109      	bne.n	80090a0 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800908c:	4b89      	ldr	r3, [pc, #548]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	08db      	lsrs	r3, r3, #3
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	4a88      	ldr	r2, [pc, #544]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009098:	fa22 f303 	lsr.w	r3, r2, r3
 800909c:	637b      	str	r3, [r7, #52]	@ 0x34
 800909e:	e020      	b.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80090a0:	4b84      	ldr	r3, [pc, #528]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090ac:	d106      	bne.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80090ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090b4:	d102      	bne.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 80090b6:	4b81      	ldr	r3, [pc, #516]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80090b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090ba:	e012      	b.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80090bc:	4b7d      	ldr	r3, [pc, #500]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	d107      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 80090ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090cc:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80090d0:	d103      	bne.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 80090d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d8:	e003      	b.n	80090e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80090de:	f001 baf4 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80090e2:	f001 baf2 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80090e6:	4b73      	ldr	r3, [pc, #460]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80090e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80090ec:	f003 0307 	and.w	r3, r3, #7
 80090f0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80090f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d104      	bne.n	8009102 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80090f8:	f7fc fb8c 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 80090fc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80090fe:	f001 bae4 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8009102:	4b6c      	ldr	r3, [pc, #432]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800910a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800910e:	d10a      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8009110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009112:	2b01      	cmp	r3, #1
 8009114:	d107      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009116:	f107 0314 	add.w	r3, r7, #20
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe fcb2 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009120:	69bb      	ldr	r3, [r7, #24]
 8009122:	637b      	str	r3, [r7, #52]	@ 0x34
 8009124:	e043      	b.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8009126:	4b63      	ldr	r3, [pc, #396]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800912e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009132:	d10a      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8009134:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009136:	2b02      	cmp	r3, #2
 8009138:	d107      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800913a:	f107 0308 	add.w	r3, r7, #8
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe fe0c 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	637b      	str	r3, [r7, #52]	@ 0x34
 8009148:	e031      	b.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800914a:	4b5a      	ldr	r3, [pc, #360]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 0302 	and.w	r3, r3, #2
 8009152:	2b02      	cmp	r3, #2
 8009154:	d10c      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8009156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009158:	2b03      	cmp	r3, #3
 800915a:	d109      	bne.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800915c:	4b55      	ldr	r3, [pc, #340]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	08db      	lsrs	r3, r3, #3
 8009162:	f003 0303 	and.w	r3, r3, #3
 8009166:	4a54      	ldr	r2, [pc, #336]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009168:	fa22 f303 	lsr.w	r3, r2, r3
 800916c:	637b      	str	r3, [r7, #52]	@ 0x34
 800916e:	e01e      	b.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8009170:	4b50      	ldr	r3, [pc, #320]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009178:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800917c:	d105      	bne.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800917e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009180:	2b04      	cmp	r3, #4
 8009182:	d102      	bne.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8009184:	4b4d      	ldr	r3, [pc, #308]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009186:	637b      	str	r3, [r7, #52]	@ 0x34
 8009188:	e011      	b.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800918a:	4b4a      	ldr	r3, [pc, #296]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800918c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009190:	f003 0302 	and.w	r3, r3, #2
 8009194:	2b02      	cmp	r3, #2
 8009196:	d106      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8009198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919a:	2b05      	cmp	r3, #5
 800919c:	d103      	bne.n	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800919e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80091a4:	e003      	b.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80091aa:	f001 ba8e 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80091ae:	f001 ba8c 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80091b2:	4b40      	ldr	r3, [pc, #256]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091b4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80091b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80091bc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d104      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80091c4:	f7fc fb26 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 80091c8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 80091ca:	f001 ba7e 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 80091ce:	4b39      	ldr	r3, [pc, #228]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091da:	d10a      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 80091dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091de:	2b10      	cmp	r3, #16
 80091e0:	d107      	bne.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091e2:	f107 0314 	add.w	r3, r7, #20
 80091e6:	4618      	mov	r0, r3
 80091e8:	f7fe fc4c 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f0:	e043      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80091f2:	4b30      	ldr	r3, [pc, #192]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091fe:	d10a      	bne.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8009200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009202:	2b20      	cmp	r3, #32
 8009204:	d107      	bne.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009206:	f107 0308 	add.w	r3, r7, #8
 800920a:	4618      	mov	r0, r3
 800920c:	f7fe fda6 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	637b      	str	r3, [r7, #52]	@ 0x34
 8009214:	e031      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8009216:	4b27      	ldr	r3, [pc, #156]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b02      	cmp	r3, #2
 8009220:	d10c      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8009222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009224:	2b30      	cmp	r3, #48	@ 0x30
 8009226:	d109      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009228:	4b22      	ldr	r3, [pc, #136]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	08db      	lsrs	r3, r3, #3
 800922e:	f003 0303 	and.w	r3, r3, #3
 8009232:	4a21      	ldr	r2, [pc, #132]	@ (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009234:	fa22 f303 	lsr.w	r3, r2, r3
 8009238:	637b      	str	r3, [r7, #52]	@ 0x34
 800923a:	e01e      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800923c:	4b1d      	ldr	r3, [pc, #116]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009248:	d105      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800924a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800924c:	2b40      	cmp	r3, #64	@ 0x40
 800924e:	d102      	bne.n	8009256 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8009250:	4b1a      	ldr	r3, [pc, #104]	@ (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009252:	637b      	str	r3, [r7, #52]	@ 0x34
 8009254:	e011      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8009256:	4b17      	ldr	r3, [pc, #92]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009258:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800925c:	f003 0302 	and.w	r3, r3, #2
 8009260:	2b02      	cmp	r3, #2
 8009262:	d106      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8009264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009266:	2b50      	cmp	r3, #80	@ 0x50
 8009268:	d103      	bne.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800926a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800926e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009270:	e003      	b.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8009272:	2300      	movs	r3, #0
 8009274:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009276:	f001 ba28 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800927a:	f001 ba26 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800927e:	4b0d      	ldr	r3, [pc, #52]	@ (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009284:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009288:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800928a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800928c:	2b00      	cmp	r3, #0
 800928e:	d104      	bne.n	800929a <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009290:	f7fc faec 	bl	800586c <HAL_RCC_GetPCLK3Freq>
 8009294:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009296:	f001 ba18 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800929a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80092a0:	d10e      	bne.n	80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092a2:	f107 0314 	add.w	r3, r7, #20
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe fbec 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80092ac:	69bb      	ldr	r3, [r7, #24]
 80092ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092b0:	f001 ba0b 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80092b4:	44020c00 	.word	0x44020c00
 80092b8:	03d09000 	.word	0x03d09000
 80092bc:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80092c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80092c6:	d108      	bne.n	80092da <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092c8:	f107 0308 	add.w	r3, r7, #8
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fe fd45 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092d6:	f001 b9f8 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80092da:	4ba4      	ldr	r3, [pc, #656]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f003 0302 	and.w	r3, r3, #2
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	d10d      	bne.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80092e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80092ec:	d109      	bne.n	8009302 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092ee:	4b9f      	ldr	r3, [pc, #636]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	08db      	lsrs	r3, r3, #3
 80092f4:	f003 0303 	and.w	r3, r3, #3
 80092f8:	4a9d      	ldr	r2, [pc, #628]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80092fa:	fa22 f303 	lsr.w	r3, r2, r3
 80092fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009300:	e020      	b.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8009302:	4b9a      	ldr	r3, [pc, #616]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800930a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800930e:	d106      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8009310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009312:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009316:	d102      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8009318:	4b96      	ldr	r3, [pc, #600]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800931a:	637b      	str	r3, [r7, #52]	@ 0x34
 800931c:	e012      	b.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800931e:	4b93      	ldr	r3, [pc, #588]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009324:	f003 0302 	and.w	r3, r3, #2
 8009328:	2b02      	cmp	r3, #2
 800932a:	d107      	bne.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800932c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800932e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009332:	d103      	bne.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8009334:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009338:	637b      	str	r3, [r7, #52]	@ 0x34
 800933a:	e003      	b.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009340:	f001 b9c3 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009344:	f001 b9c1 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009348:	4b88      	ldr	r3, [pc, #544]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800934a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800934e:	f003 0307 	and.w	r3, r3, #7
 8009352:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009356:	2b00      	cmp	r3, #0
 8009358:	d104      	bne.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800935a:	f7fc fa3f 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 800935e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8009360:	f001 b9b3 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009366:	2b01      	cmp	r3, #1
 8009368:	d104      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800936a:	f7fc f90b 	bl	8005584 <HAL_RCC_GetSysClockFreq>
 800936e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8009370:	f001 b9ab 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8009374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009376:	2b02      	cmp	r3, #2
 8009378:	d108      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800937a:	f107 0314 	add.w	r3, r7, #20
 800937e:	4618      	mov	r0, r3
 8009380:	f7fe fb80 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009384:	69fb      	ldr	r3, [r7, #28]
 8009386:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009388:	f001 b99f 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800938c:	4b77      	ldr	r3, [pc, #476]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009398:	d105      	bne.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	2b03      	cmp	r3, #3
 800939e:	d102      	bne.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80093a0:	4b75      	ldr	r3, [pc, #468]	@ (8009578 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80093a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a4:	e023      	b.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80093a6:	4b71      	ldr	r3, [pc, #452]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d10c      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80093b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b4:	2b04      	cmp	r3, #4
 80093b6:	d109      	bne.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093b8:	4b6c      	ldr	r3, [pc, #432]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	08db      	lsrs	r3, r3, #3
 80093be:	f003 0303 	and.w	r3, r3, #3
 80093c2:	4a6b      	ldr	r2, [pc, #428]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80093c4:	fa22 f303 	lsr.w	r3, r2, r3
 80093c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80093ca:	e010      	b.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80093cc:	4b67      	ldr	r3, [pc, #412]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80093d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80093d8:	d105      	bne.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 80093da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093dc:	2b05      	cmp	r3, #5
 80093de:	d102      	bne.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 80093e0:	4b64      	ldr	r3, [pc, #400]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093e4:	e003      	b.n	80093ee <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80093e6:	2300      	movs	r3, #0
 80093e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093ea:	f001 b96e 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093ee:	f001 b96c 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80093f2:	4b5e      	ldr	r3, [pc, #376]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80093f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80093f8:	f003 0308 	and.w	r3, r3, #8
 80093fc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80093fe:	4b5b      	ldr	r3, [pc, #364]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009400:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b02      	cmp	r3, #2
 800940a:	d106      	bne.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800940c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940e:	2b00      	cmp	r3, #0
 8009410:	d103      	bne.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8009412:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009416:	637b      	str	r3, [r7, #52]	@ 0x34
 8009418:	e012      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800941a:	4b54      	ldr	r3, [pc, #336]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800941c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009420:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009424:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009428:	d106      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800942a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942c:	2b08      	cmp	r3, #8
 800942e:	d103      	bne.n	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8009430:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009434:	637b      	str	r3, [r7, #52]	@ 0x34
 8009436:	e003      	b.n	8009440 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8009438:	2300      	movs	r3, #0
 800943a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800943c:	f001 b945 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009440:	f001 b943 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009444:	4b49      	ldr	r3, [pc, #292]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009446:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800944a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800944e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009452:	2b00      	cmp	r3, #0
 8009454:	d104      	bne.n	8009460 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009456:	f7fc f9dd 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 800945a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800945c:	f001 b935 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8009460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009462:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009466:	d108      	bne.n	800947a <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009468:	f107 0308 	add.w	r3, r7, #8
 800946c:	4618      	mov	r0, r3
 800946e:	f7fe fc75 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009476:	f001 b928 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800947a:	4b3c      	ldr	r3, [pc, #240]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f003 0302 	and.w	r3, r3, #2
 8009482:	2b02      	cmp	r3, #2
 8009484:	d10d      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8009486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009488:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800948c:	d109      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800948e:	4b37      	ldr	r3, [pc, #220]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	08db      	lsrs	r3, r3, #3
 8009494:	f003 0303 	and.w	r3, r3, #3
 8009498:	4a35      	ldr	r2, [pc, #212]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800949a:	fa22 f303 	lsr.w	r3, r2, r3
 800949e:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a0:	e011      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80094a2:	4b32      	ldr	r3, [pc, #200]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094ae:	d106      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80094b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80094b6:	d102      	bne.n	80094be <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 80094b8:	4b2e      	ldr	r3, [pc, #184]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80094ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80094bc:	e003      	b.n	80094c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 80094be:	2300      	movs	r3, #0
 80094c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094c2:	f001 b902 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094c6:	f001 b900 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80094ca:	4b28      	ldr	r3, [pc, #160]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80094cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80094d0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80094d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80094d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d104      	bne.n	80094e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80094dc:	f7fc f99a 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 80094e0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 80094e2:	f001 b8f2 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80094e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80094ec:	d108      	bne.n	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094ee:	f107 0308 	add.w	r3, r7, #8
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7fe fc32 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094fc:	f001 b8e5 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009500:	4b1a      	ldr	r3, [pc, #104]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 0302 	and.w	r3, r3, #2
 8009508:	2b02      	cmp	r3, #2
 800950a:	d10d      	bne.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800950c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009512:	d109      	bne.n	8009528 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009514:	4b15      	ldr	r3, [pc, #84]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	08db      	lsrs	r3, r3, #3
 800951a:	f003 0303 	and.w	r3, r3, #3
 800951e:	4a14      	ldr	r2, [pc, #80]	@ (8009570 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009520:	fa22 f303 	lsr.w	r3, r2, r3
 8009524:	637b      	str	r3, [r7, #52]	@ 0x34
 8009526:	e011      	b.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8009528:	4b10      	ldr	r3, [pc, #64]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009534:	d106      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8009536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009538:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800953c:	d102      	bne.n	8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800953e:	4b0d      	ldr	r3, [pc, #52]	@ (8009574 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009540:	637b      	str	r3, [r7, #52]	@ 0x34
 8009542:	e003      	b.n	800954c <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8009544:	2300      	movs	r3, #0
 8009546:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009548:	f001 b8bf 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800954c:	f001 b8bd 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009550:	4b06      	ldr	r3, [pc, #24]	@ (800956c <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009552:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009556:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800955a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800955c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955e:	2b00      	cmp	r3, #0
 8009560:	d10c      	bne.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009562:	f7fc f983 	bl	800586c <HAL_RCC_GetPCLK3Freq>
 8009566:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009568:	f001 b8af 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800956c:	44020c00 	.word	0x44020c00
 8009570:	03d09000 	.word	0x03d09000
 8009574:	003d0900 	.word	0x003d0900
 8009578:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800957c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009582:	d108      	bne.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009584:	f107 0308 	add.w	r3, r7, #8
 8009588:	4618      	mov	r0, r3
 800958a:	f7fe fbe7 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009592:	f001 b89a 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8009596:	4b9f      	ldr	r3, [pc, #636]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0302 	and.w	r3, r3, #2
 800959e:	2b02      	cmp	r3, #2
 80095a0:	d10d      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80095a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80095a8:	d109      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80095aa:	4b9a      	ldr	r3, [pc, #616]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	08db      	lsrs	r3, r3, #3
 80095b0:	f003 0303 	and.w	r3, r3, #3
 80095b4:	4a98      	ldr	r2, [pc, #608]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80095b6:	fa22 f303 	lsr.w	r3, r2, r3
 80095ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80095bc:	e011      	b.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 80095be:	4b95      	ldr	r3, [pc, #596]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095ca:	d106      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 80095cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80095d2:	d102      	bne.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 80095d4:	4b91      	ldr	r3, [pc, #580]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80095d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095d8:	e003      	b.n	80095e2 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 80095da:	2300      	movs	r3, #0
 80095dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80095de:	f001 b874 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80095e2:	f001 b872 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80095e6:	4b8b      	ldr	r3, [pc, #556]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80095e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80095ec:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80095f0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80095f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d104      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80095f8:	f7fc f938 	bl	800586c <HAL_RCC_GetPCLK3Freq>
 80095fc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80095fe:	f001 b864 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8009602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009604:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009608:	d108      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800960a:	f107 0308 	add.w	r3, r7, #8
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fba4 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009618:	f001 b857 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800961c:	4b7d      	ldr	r3, [pc, #500]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0302 	and.w	r3, r3, #2
 8009624:	2b02      	cmp	r3, #2
 8009626:	d10d      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8009628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800962e:	d109      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009630:	4b78      	ldr	r3, [pc, #480]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	08db      	lsrs	r3, r3, #3
 8009636:	f003 0303 	and.w	r3, r3, #3
 800963a:	4a77      	ldr	r2, [pc, #476]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800963c:	fa22 f303 	lsr.w	r3, r2, r3
 8009640:	637b      	str	r3, [r7, #52]	@ 0x34
 8009642:	e011      	b.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8009644:	4b73      	ldr	r3, [pc, #460]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800964c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009650:	d106      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8009652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009654:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009658:	d102      	bne.n	8009660 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800965a:	4b70      	ldr	r3, [pc, #448]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800965c:	637b      	str	r3, [r7, #52]	@ 0x34
 800965e:	e003      	b.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8009660:	2300      	movs	r3, #0
 8009662:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009664:	f001 b831 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009668:	f001 b82f 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800966c:	4b69      	ldr	r3, [pc, #420]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800966e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009672:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009676:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8009678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967a:	2b00      	cmp	r3, #0
 800967c:	d104      	bne.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800967e:	f7fc f8c9 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8009682:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009684:	f001 b821 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8009688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800968e:	d108      	bne.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009690:	f107 0308 	add.w	r3, r7, #8
 8009694:	4618      	mov	r0, r3
 8009696:	f7fe fb61 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800969e:	f001 b814 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80096a2:	4b5c      	ldr	r3, [pc, #368]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f003 0302 	and.w	r3, r3, #2
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d10e      	bne.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80096ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096b4:	d10a      	bne.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096b6:	4b57      	ldr	r3, [pc, #348]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	08db      	lsrs	r3, r3, #3
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	4a55      	ldr	r2, [pc, #340]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80096c2:	fa22 f303 	lsr.w	r3, r2, r3
 80096c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096c8:	f000 bfff 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80096cc:	2300      	movs	r3, #0
 80096ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096d0:	f000 bffb 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80096d4:	4b4f      	ldr	r3, [pc, #316]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80096d6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80096da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80096de:	633b      	str	r3, [r7, #48]	@ 0x30
 80096e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80096e6:	d056      	beq.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 80096e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ea:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80096ee:	f200 808b 	bhi.w	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 80096f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096f8:	d03e      	beq.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009700:	f200 8082 	bhi.w	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800970a:	d027      	beq.n	800975c <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800970c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800970e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009712:	d879      	bhi.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800971a:	d017      	beq.n	800974c <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800971c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800971e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009722:	d871      	bhi.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009726:	2b00      	cmp	r3, #0
 8009728:	d004      	beq.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800972a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009730:	d004      	beq.n	800973c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8009732:	e069      	b.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009734:	f7fc f89a 	bl	800586c <HAL_RCC_GetPCLK3Freq>
 8009738:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800973a:	e068      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800973c:	f107 0314 	add.w	r3, r7, #20
 8009740:	4618      	mov	r0, r3
 8009742:	f7fe f99f 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800974a:	e060      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800974c:	f107 0308 	add.w	r3, r7, #8
 8009750:	4618      	mov	r0, r3
 8009752:	f7fe fb03 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800975a:	e058      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800975c:	4b2d      	ldr	r3, [pc, #180]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800975e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009762:	f003 0302 	and.w	r3, r3, #2
 8009766:	2b02      	cmp	r3, #2
 8009768:	d103      	bne.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800976a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800976e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009770:	e04d      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009776:	e04a      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009778:	4b26      	ldr	r3, [pc, #152]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800977a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800977e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009782:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009786:	d103      	bne.n	8009790 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8009788:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800978c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800978e:	e03e      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009790:	2300      	movs	r3, #0
 8009792:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009794:	e03b      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009796:	4b1f      	ldr	r3, [pc, #124]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800979c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80097a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097a2:	4b1c      	ldr	r3, [pc, #112]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	2b02      	cmp	r3, #2
 80097ac:	d10c      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80097ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d109      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097b4:	4b17      	ldr	r3, [pc, #92]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	08db      	lsrs	r3, r3, #3
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	4a16      	ldr	r2, [pc, #88]	@ (8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80097c0:	fa22 f303 	lsr.w	r3, r2, r3
 80097c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097c6:	e01e      	b.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097c8:	4b12      	ldr	r3, [pc, #72]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097d4:	d106      	bne.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 80097d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097dc:	d102      	bne.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80097de:	4b0f      	ldr	r3, [pc, #60]	@ (800981c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80097e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e2:	e010      	b.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097f0:	d106      	bne.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 80097f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097f8:	d102      	bne.n	8009800 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80097fa:	4b09      	ldr	r3, [pc, #36]	@ (8009820 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80097fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80097fe:	e002      	b.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009800:	2300      	movs	r3, #0
 8009802:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009804:	e003      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8009806:	e002      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8009808:	2300      	movs	r3, #0
 800980a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800980c:	bf00      	nop
          }
        }
        break;
 800980e:	f000 bf5c 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009812:	bf00      	nop
 8009814:	44020c00 	.word	0x44020c00
 8009818:	03d09000 	.word	0x03d09000
 800981c:	003d0900 	.word	0x003d0900
 8009820:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009824:	4b9e      	ldr	r3, [pc, #632]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009826:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800982a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800982e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009832:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009836:	d056      	beq.n	80098e6 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8009838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800983e:	f200 808b 	bhi.w	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009844:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009848:	d03e      	beq.n	80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800984a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009850:	f200 8082 	bhi.w	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009856:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800985a:	d027      	beq.n	80098ac <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800985c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800985e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009862:	d879      	bhi.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009866:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800986a:	d017      	beq.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800986c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800986e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009872:	d871      	bhi.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009876:	2b00      	cmp	r3, #0
 8009878:	d004      	beq.n	8009884 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009880:	d004      	beq.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8009882:	e069      	b.n	8009958 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009884:	f7fb ffc6 	bl	8005814 <HAL_RCC_GetPCLK1Freq>
 8009888:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800988a:	e068      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800988c:	f107 0314 	add.w	r3, r7, #20
 8009890:	4618      	mov	r0, r3
 8009892:	f7fe f8f7 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800989a:	e060      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800989c:	f107 0308 	add.w	r3, r7, #8
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fe fa5b 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098aa:	e058      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80098ac:	4b7c      	ldr	r3, [pc, #496]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098b2:	f003 0302 	and.w	r3, r3, #2
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d103      	bne.n	80098c2 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 80098ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098be:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80098c0:	e04d      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80098c2:	2300      	movs	r3, #0
 80098c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098c6:	e04a      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80098c8:	4b75      	ldr	r3, [pc, #468]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80098d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098d6:	d103      	bne.n	80098e0 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 80098d8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80098dc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80098de:	e03e      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80098e4:	e03b      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098e6:	4b6e      	ldr	r3, [pc, #440]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098ec:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80098f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098f2:	4b6b      	ldr	r3, [pc, #428]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0302 	and.w	r3, r3, #2
 80098fa:	2b02      	cmp	r3, #2
 80098fc:	d10c      	bne.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80098fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009900:	2b00      	cmp	r3, #0
 8009902:	d109      	bne.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009904:	4b66      	ldr	r3, [pc, #408]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	08db      	lsrs	r3, r3, #3
 800990a:	f003 0303 	and.w	r3, r3, #3
 800990e:	4a65      	ldr	r2, [pc, #404]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009910:	fa22 f303 	lsr.w	r3, r2, r3
 8009914:	637b      	str	r3, [r7, #52]	@ 0x34
 8009916:	e01e      	b.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009918:	4b61      	ldr	r3, [pc, #388]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009924:	d106      	bne.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8009926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800992c:	d102      	bne.n	8009934 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800992e:	4b5e      	ldr	r3, [pc, #376]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009930:	637b      	str	r3, [r7, #52]	@ 0x34
 8009932:	e010      	b.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009934:	4b5a      	ldr	r3, [pc, #360]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800993c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009940:	d106      	bne.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8009942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009944:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009948:	d102      	bne.n	8009950 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800994a:	4b58      	ldr	r3, [pc, #352]	@ (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800994c:	637b      	str	r3, [r7, #52]	@ 0x34
 800994e:	e002      	b.n	8009956 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009950:	2300      	movs	r3, #0
 8009952:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009954:	e003      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8009956:	e002      	b.n	800995e <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8009958:	2300      	movs	r3, #0
 800995a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800995c:	bf00      	nop
          }
        }
        break;
 800995e:	f000 beb4 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009962:	4b4f      	ldr	r3, [pc, #316]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009964:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009968:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800996c:	633b      	str	r3, [r7, #48]	@ 0x30
 800996e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009974:	d056      	beq.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8009976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800997c:	f200 808b 	bhi.w	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009982:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009986:	d03e      	beq.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8009988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800998e:	f200 8082 	bhi.w	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009994:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009998:	d027      	beq.n	80099ea <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800999a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800999c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80099a0:	d879      	bhi.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80099a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099a8:	d017      	beq.n	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 80099aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099b0:	d871      	bhi.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 80099b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d004      	beq.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 80099b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099be:	d004      	beq.n	80099ca <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 80099c0:	e069      	b.n	8009a96 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80099c2:	f7fb ff53 	bl	800586c <HAL_RCC_GetPCLK3Freq>
 80099c6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80099c8:	e068      	b.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099ca:	f107 0314 	add.w	r3, r7, #20
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe f858 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099d8:	e060      	b.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099da:	f107 0308 	add.w	r3, r7, #8
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe f9bc 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099e8:	e058      	b.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80099ea:	4b2d      	ldr	r3, [pc, #180]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80099ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099f0:	f003 0302 	and.w	r3, r3, #2
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d103      	bne.n	8009a00 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 80099f8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099fc:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80099fe:	e04d      	b.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009a00:	2300      	movs	r3, #0
 8009a02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a04:	e04a      	b.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009a06:	4b26      	ldr	r3, [pc, #152]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a14:	d103      	bne.n	8009a1e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8009a16:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009a1a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009a1c:	e03e      	b.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a22:	e03b      	b.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a24:	4b1e      	ldr	r3, [pc, #120]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a2a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a30:	4b1b      	ldr	r3, [pc, #108]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f003 0302 	and.w	r3, r3, #2
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	d10c      	bne.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8009a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d109      	bne.n	8009a56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a42:	4b17      	ldr	r3, [pc, #92]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	08db      	lsrs	r3, r3, #3
 8009a48:	f003 0303 	and.w	r3, r3, #3
 8009a4c:	4a15      	ldr	r2, [pc, #84]	@ (8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a54:	e01e      	b.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a56:	4b12      	ldr	r3, [pc, #72]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a62:	d106      	bne.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8009a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a6a:	d102      	bne.n	8009a72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009a6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a70:	e010      	b.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a72:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a7e:	d106      	bne.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8009a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a86:	d102      	bne.n	8009a8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009a88:	4b08      	ldr	r3, [pc, #32]	@ (8009aac <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a8c:	e002      	b.n	8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009a92:	e003      	b.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009a94:	e002      	b.n	8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a9a:	bf00      	nop
          }
        }
        break;
 8009a9c:	f000 be15 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009aa0:	44020c00 	.word	0x44020c00
 8009aa4:	03d09000 	.word	0x03d09000
 8009aa8:	003d0900 	.word	0x003d0900
 8009aac:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009ab0:	4b9e      	ldr	r3, [pc, #632]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009ab2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009ab6:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8009aba:	633b      	str	r3, [r7, #48]	@ 0x30
 8009abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abe:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009ac2:	d056      	beq.n	8009b72 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009aca:	f200 808b 	bhi.w	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009ad4:	d03e      	beq.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8009ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009adc:	f200 8082 	bhi.w	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009ae6:	d027      	beq.n	8009b38 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8009ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009aee:	d879      	bhi.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009af6:	d017      	beq.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8009af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009afe:	d871      	bhi.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d004      	beq.n	8009b10 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8009b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b0c:	d004      	beq.n	8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8009b0e:	e069      	b.n	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009b10:	f7fb feac 	bl	800586c <HAL_RCC_GetPCLK3Freq>
 8009b14:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009b16:	e068      	b.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b18:	f107 0314 	add.w	r3, r7, #20
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fd ffb1 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b26:	e060      	b.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b28:	f107 0308 	add.w	r3, r7, #8
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fe f915 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b36:	e058      	b.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009b38:	4b7c      	ldr	r3, [pc, #496]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b3e:	f003 0302 	and.w	r3, r3, #2
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d103      	bne.n	8009b4e <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8009b46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b4a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009b4c:	e04d      	b.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b52:	e04a      	b.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009b54:	4b75      	ldr	r3, [pc, #468]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b62:	d103      	bne.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009b64:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009b68:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009b6a:	e03e      	b.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009b70:	e03b      	b.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009b72:	4b6e      	ldr	r3, [pc, #440]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009b78:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009b7e:	4b6b      	ldr	r3, [pc, #428]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f003 0302 	and.w	r3, r3, #2
 8009b86:	2b02      	cmp	r3, #2
 8009b88:	d10c      	bne.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8009b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d109      	bne.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b90:	4b66      	ldr	r3, [pc, #408]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	08db      	lsrs	r3, r3, #3
 8009b96:	f003 0303 	and.w	r3, r3, #3
 8009b9a:	4a65      	ldr	r2, [pc, #404]	@ (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ba2:	e01e      	b.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ba4:	4b61      	ldr	r3, [pc, #388]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bb0:	d106      	bne.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8009bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bb8:	d102      	bne.n	8009bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009bba:	4b5e      	ldr	r3, [pc, #376]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009bbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bbe:	e010      	b.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009bc0:	4b5a      	ldr	r3, [pc, #360]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bcc:	d106      	bne.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8009bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bd4:	d102      	bne.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009bd6:	4b58      	ldr	r3, [pc, #352]	@ (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bda:	e002      	b.n	8009be2 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009be0:	e003      	b.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8009be2:	e002      	b.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009be4:	2300      	movs	r3, #0
 8009be6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009be8:	bf00      	nop
          }
        }
        break;
 8009bea:	f000 bd6e 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009bee:	4b4f      	ldr	r3, [pc, #316]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009bf0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009bf4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009bf8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009c00:	d056      	beq.n	8009cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8009c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c04:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009c08:	f200 808b 	bhi.w	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c12:	d03e      	beq.n	8009c92 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8009c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009c1a:	f200 8082 	bhi.w	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009c24:	d027      	beq.n	8009c76 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8009c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c28:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009c2c:	d879      	bhi.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c34:	d017      	beq.n	8009c66 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8009c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c3c:	d871      	bhi.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d004      	beq.n	8009c4e <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8009c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c4a:	d004      	beq.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8009c4c:	e069      	b.n	8009d22 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009c4e:	f7fb fe0d 	bl	800586c <HAL_RCC_GetPCLK3Freq>
 8009c52:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009c54:	e068      	b.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c56:	f107 0314 	add.w	r3, r7, #20
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fd ff12 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c64:	e060      	b.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c66:	f107 0308 	add.w	r3, r7, #8
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7fe f876 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c74:	e058      	b.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009c76:	4b2d      	ldr	r3, [pc, #180]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c7c:	f003 0302 	and.w	r3, r3, #2
 8009c80:	2b02      	cmp	r3, #2
 8009c82:	d103      	bne.n	8009c8c <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009c84:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c88:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009c8a:	e04d      	b.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009c90:	e04a      	b.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009c92:	4b26      	ldr	r3, [pc, #152]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ca0:	d103      	bne.n	8009caa <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8009ca2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009ca6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009ca8:	e03e      	b.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009caa:	2300      	movs	r3, #0
 8009cac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009cae:	e03b      	b.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009cb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009cb6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009cba:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0302 	and.w	r3, r3, #2
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d10c      	bne.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d109      	bne.n	8009ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009cce:	4b17      	ldr	r3, [pc, #92]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	08db      	lsrs	r3, r3, #3
 8009cd4:	f003 0303 	and.w	r3, r3, #3
 8009cd8:	4a15      	ldr	r2, [pc, #84]	@ (8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009cda:	fa22 f303 	lsr.w	r3, r2, r3
 8009cde:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ce0:	e01e      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ce2:	4b12      	ldr	r3, [pc, #72]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cee:	d106      	bne.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009cf6:	d102      	bne.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cfc:	e010      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d0a:	d106      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8009d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d12:	d102      	bne.n	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009d14:	4b08      	ldr	r3, [pc, #32]	@ (8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8009d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d18:	e002      	b.n	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009d1e:	e003      	b.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8009d20:	e002      	b.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8009d22:	2300      	movs	r3, #0
 8009d24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d26:	bf00      	nop
          }
        }
        break;
 8009d28:	f000 bccf 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d2c:	44020c00 	.word	0x44020c00
 8009d30:	03d09000 	.word	0x03d09000
 8009d34:	003d0900 	.word	0x003d0900
 8009d38:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8009d3c:	4b9e      	ldr	r3, [pc, #632]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009d3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009d42:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009d46:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d4e:	d056      	beq.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8009d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009d56:	f200 808b 	bhi.w	8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d60:	d03e      	beq.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8009d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d68:	f200 8082 	bhi.w	8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d72:	d027      	beq.n	8009dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009d7a:	d879      	bhi.n	8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d82:	d017      	beq.n	8009db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d8a:	d871      	bhi.n	8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d004      	beq.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8009d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d98:	d004      	beq.n	8009da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009d9a:	e069      	b.n	8009e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009d9c:	f7fb fd66 	bl	800586c <HAL_RCC_GetPCLK3Freq>
 8009da0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009da2:	e068      	b.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009da4:	f107 0314 	add.w	r3, r7, #20
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fd fe6b 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009db2:	e060      	b.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009db4:	f107 0308 	add.w	r3, r7, #8
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7fd ffcf 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dc2:	e058      	b.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009dc4:	4b7c      	ldr	r3, [pc, #496]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dca:	f003 0302 	and.w	r3, r3, #2
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d103      	bne.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8009dd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dd6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009dd8:	e04d      	b.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dde:	e04a      	b.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009de0:	4b75      	ldr	r3, [pc, #468]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009de2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009de6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009dea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dee:	d103      	bne.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009df0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009df4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009df6:	e03e      	b.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dfc:	e03b      	b.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009dfe:	4b6e      	ldr	r3, [pc, #440]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e04:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009e08:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e0a:	4b6b      	ldr	r3, [pc, #428]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 0302 	and.w	r3, r3, #2
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d10c      	bne.n	8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8009e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d109      	bne.n	8009e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e1c:	4b66      	ldr	r3, [pc, #408]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	08db      	lsrs	r3, r3, #3
 8009e22:	f003 0303 	and.w	r3, r3, #3
 8009e26:	4a65      	ldr	r2, [pc, #404]	@ (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009e28:	fa22 f303 	lsr.w	r3, r2, r3
 8009e2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e2e:	e01e      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e30:	4b61      	ldr	r3, [pc, #388]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e3c:	d106      	bne.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 8009e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e44:	d102      	bne.n	8009e4c <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009e46:	4b5e      	ldr	r3, [pc, #376]	@ (8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009e48:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e4a:	e010      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e4c:	4b5a      	ldr	r3, [pc, #360]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e58:	d106      	bne.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8009e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e60:	d102      	bne.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009e62:	4b58      	ldr	r3, [pc, #352]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e66:	e002      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009e6c:	e003      	b.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8009e6e:	e002      	b.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009e70:	2300      	movs	r3, #0
 8009e72:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e74:	bf00      	nop
          }
        }
        break;
 8009e76:	f000 bc28 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e84:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009e86:	4b4c      	ldr	r3, [pc, #304]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e92:	d106      	bne.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d103      	bne.n	8009ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009e9c:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009e9e:	f000 bc14 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ea8:	d108      	bne.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eaa:	f107 0320 	add.w	r3, r7, #32
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7fd fc7c 	bl	80077ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009eb8:	f000 bc07 	b.w	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ec2:	d107      	bne.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ec4:	f107 0314 	add.w	r3, r7, #20
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fd fddb 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ed2:	e3fa      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ed8:	e3f7      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009eda:	4b37      	ldr	r3, [pc, #220]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ee0:	f003 0307 	and.w	r3, r3, #7
 8009ee4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee8:	2b04      	cmp	r3, #4
 8009eea:	d861      	bhi.n	8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009eec:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef2:	bf00      	nop
 8009ef4:	08009f09 	.word	0x08009f09
 8009ef8:	08009f19 	.word	0x08009f19
 8009efc:	08009f29 	.word	0x08009f29
 8009f00:	08009f39 	.word	0x08009f39
 8009f04:	08009f3f 	.word	0x08009f3f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f08:	f107 0320 	add.w	r3, r7, #32
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f7fd fc4d 	bl	80077ac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f16:	e04e      	b.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f18:	f107 0314 	add.w	r3, r7, #20
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fd fdb1 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f26:	e046      	b.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f28:	f107 0308 	add.w	r3, r7, #8
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fd ff15 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f36:	e03e      	b.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009f38:	4b23      	ldr	r3, [pc, #140]	@ (8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8009f3a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f3c:	e03b      	b.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f44:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009f48:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f4a:	4b1b      	ldr	r3, [pc, #108]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f003 0302 	and.w	r3, r3, #2
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	d10c      	bne.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d109      	bne.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f5c:	4b16      	ldr	r3, [pc, #88]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	08db      	lsrs	r3, r3, #3
 8009f62:	f003 0303 	and.w	r3, r3, #3
 8009f66:	4a15      	ldr	r2, [pc, #84]	@ (8009fbc <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009f68:	fa22 f303 	lsr.w	r3, r2, r3
 8009f6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f6e:	e01e      	b.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f70:	4b11      	ldr	r3, [pc, #68]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f7c:	d106      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8009f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f84:	d102      	bne.n	8009f8c <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009f86:	4b0e      	ldr	r3, [pc, #56]	@ (8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f8a:	e010      	b.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f98:	d106      	bne.n	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fa0:	d102      	bne.n	8009fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009fa2:	4b08      	ldr	r3, [pc, #32]	@ (8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fa6:	e002      	b.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009fac:	e003      	b.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009fae:	e002      	b.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009fb4:	bf00      	nop
          }
        }
        break;
 8009fb6:	e388      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009fb8:	44020c00 	.word	0x44020c00
 8009fbc:	03d09000 	.word	0x03d09000
 8009fc0:	003d0900 	.word	0x003d0900
 8009fc4:	007a1200 	.word	0x007a1200
 8009fc8:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009fcc:	4ba9      	ldr	r3, [pc, #676]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009fd2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fda:	2b20      	cmp	r3, #32
 8009fdc:	f200 809a 	bhi.w	800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe6:	bf00      	nop
 8009fe8:	0800a06d 	.word	0x0800a06d
 8009fec:	0800a115 	.word	0x0800a115
 8009ff0:	0800a115 	.word	0x0800a115
 8009ff4:	0800a115 	.word	0x0800a115
 8009ff8:	0800a115 	.word	0x0800a115
 8009ffc:	0800a115 	.word	0x0800a115
 800a000:	0800a115 	.word	0x0800a115
 800a004:	0800a115 	.word	0x0800a115
 800a008:	0800a07d 	.word	0x0800a07d
 800a00c:	0800a115 	.word	0x0800a115
 800a010:	0800a115 	.word	0x0800a115
 800a014:	0800a115 	.word	0x0800a115
 800a018:	0800a115 	.word	0x0800a115
 800a01c:	0800a115 	.word	0x0800a115
 800a020:	0800a115 	.word	0x0800a115
 800a024:	0800a115 	.word	0x0800a115
 800a028:	0800a08d 	.word	0x0800a08d
 800a02c:	0800a115 	.word	0x0800a115
 800a030:	0800a115 	.word	0x0800a115
 800a034:	0800a115 	.word	0x0800a115
 800a038:	0800a115 	.word	0x0800a115
 800a03c:	0800a115 	.word	0x0800a115
 800a040:	0800a115 	.word	0x0800a115
 800a044:	0800a115 	.word	0x0800a115
 800a048:	0800a09d 	.word	0x0800a09d
 800a04c:	0800a115 	.word	0x0800a115
 800a050:	0800a115 	.word	0x0800a115
 800a054:	0800a115 	.word	0x0800a115
 800a058:	0800a115 	.word	0x0800a115
 800a05c:	0800a115 	.word	0x0800a115
 800a060:	0800a115 	.word	0x0800a115
 800a064:	0800a115 	.word	0x0800a115
 800a068:	0800a0a3 	.word	0x0800a0a3
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a06c:	f107 0320 	add.w	r3, r7, #32
 800a070:	4618      	mov	r0, r3
 800a072:	f7fd fb9b 	bl	80077ac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a07a:	e04e      	b.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a07c:	f107 0314 	add.w	r3, r7, #20
 800a080:	4618      	mov	r0, r3
 800a082:	f7fd fcff 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a08a:	e046      	b.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a08c:	f107 0308 	add.w	r3, r7, #8
 800a090:	4618      	mov	r0, r3
 800a092:	f7fd fe63 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a09a:	e03e      	b.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a09c:	4b76      	ldr	r3, [pc, #472]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a09e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0a0:	e03b      	b.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0a2:	4b74      	ldr	r3, [pc, #464]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a0a8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0ae:	4b71      	ldr	r3, [pc, #452]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0302 	and.w	r3, r3, #2
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	d10c      	bne.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800a0ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d109      	bne.n	800a0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0c0:	4b6c      	ldr	r3, [pc, #432]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	08db      	lsrs	r3, r3, #3
 800a0c6:	f003 0303 	and.w	r3, r3, #3
 800a0ca:	4a6c      	ldr	r2, [pc, #432]	@ (800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a0cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0d2:	e01e      	b.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0d4:	4b67      	ldr	r3, [pc, #412]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0e0:	d106      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800a0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0e8:	d102      	bne.n	800a0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a0ea:	4b65      	ldr	r3, [pc, #404]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a0ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0ee:	e010      	b.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0f0:	4b60      	ldr	r3, [pc, #384]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0fc:	d106      	bne.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800a0fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a100:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a104:	d102      	bne.n	800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a106:	4b5f      	ldr	r3, [pc, #380]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a108:	637b      	str	r3, [r7, #52]	@ 0x34
 800a10a:	e002      	b.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a10c:	2300      	movs	r3, #0
 800a10e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a110:	e003      	b.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800a112:	e002      	b.n	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800a114:	2300      	movs	r3, #0
 800a116:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a118:	bf00      	nop
          }
        }
        break;
 800a11a:	e2d6      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a11c:	4b55      	ldr	r3, [pc, #340]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a11e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a122:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a126:	633b      	str	r3, [r7, #48]	@ 0x30
 800a128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a12e:	d031      	beq.n	800a194 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800a130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a136:	d866      	bhi.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a13c:	d027      	beq.n	800a18e <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800a13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a140:	2bc0      	cmp	r3, #192	@ 0xc0
 800a142:	d860      	bhi.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a146:	2b80      	cmp	r3, #128	@ 0x80
 800a148:	d019      	beq.n	800a17e <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800a14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14c:	2b80      	cmp	r3, #128	@ 0x80
 800a14e:	d85a      	bhi.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a152:	2b00      	cmp	r3, #0
 800a154:	d003      	beq.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800a156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a158:	2b40      	cmp	r3, #64	@ 0x40
 800a15a:	d008      	beq.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800a15c:	e053      	b.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a15e:	f107 0320 	add.w	r3, r7, #32
 800a162:	4618      	mov	r0, r3
 800a164:	f7fd fb22 	bl	80077ac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a16c:	e04e      	b.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a16e:	f107 0314 	add.w	r3, r7, #20
 800a172:	4618      	mov	r0, r3
 800a174:	f7fd fc86 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a17c:	e046      	b.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a17e:	f107 0308 	add.w	r3, r7, #8
 800a182:	4618      	mov	r0, r3
 800a184:	f7fd fdea 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a18c:	e03e      	b.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a18e:	4b3a      	ldr	r3, [pc, #232]	@ (800a278 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a190:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a192:	e03b      	b.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a194:	4b37      	ldr	r3, [pc, #220]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a196:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a19a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a19e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1a0:	4b34      	ldr	r3, [pc, #208]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0302 	and.w	r3, r3, #2
 800a1a8:	2b02      	cmp	r3, #2
 800a1aa:	d10c      	bne.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800a1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d109      	bne.n	800a1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a1b2:	4b30      	ldr	r3, [pc, #192]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	08db      	lsrs	r3, r3, #3
 800a1b8:	f003 0303 	and.w	r3, r3, #3
 800a1bc:	4a2f      	ldr	r2, [pc, #188]	@ (800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a1be:	fa22 f303 	lsr.w	r3, r2, r3
 800a1c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1c4:	e01e      	b.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1c6:	4b2b      	ldr	r3, [pc, #172]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1ce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1d2:	d106      	bne.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800a1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1da:	d102      	bne.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a1dc:	4b28      	ldr	r3, [pc, #160]	@ (800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a1de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1e0:	e010      	b.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1e2:	4b24      	ldr	r3, [pc, #144]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1ee:	d106      	bne.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800a1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1f6:	d102      	bne.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a1f8:	4b22      	ldr	r3, [pc, #136]	@ (800a284 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a1fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1fc:	e002      	b.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a202:	e003      	b.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800a204:	e002      	b.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800a206:	2300      	movs	r3, #0
 800a208:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a20a:	bf00      	nop
          }
        }
        break;
 800a20c:	e25d      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800a20e:	4b19      	ldr	r3, [pc, #100]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a214:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a218:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800a21a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d103      	bne.n	800a228 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a220:	f7fb fb0e 	bl	8005840 <HAL_RCC_GetPCLK2Freq>
 800a224:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a226:	e250      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800a228:	4b12      	ldr	r3, [pc, #72]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a230:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a234:	d10b      	bne.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800a236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a23c:	d107      	bne.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a23e:	f107 0314 	add.w	r3, r7, #20
 800a242:	4618      	mov	r0, r3
 800a244:	f7fd fc1e 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a24c:	e04f      	b.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800a24e:	4b09      	ldr	r3, [pc, #36]	@ (800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a256:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a25a:	d115      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800a25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a262:	d111      	bne.n	800a288 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a264:	f107 0308 	add.w	r3, r7, #8
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fd fd77 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	637b      	str	r3, [r7, #52]	@ 0x34
 800a272:	e03c      	b.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800a274:	44020c00 	.word	0x44020c00
 800a278:	00bb8000 	.word	0x00bb8000
 800a27c:	03d09000 	.word	0x03d09000
 800a280:	003d0900 	.word	0x003d0900
 800a284:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800a288:	4b94      	ldr	r3, [pc, #592]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 0302 	and.w	r3, r3, #2
 800a290:	2b02      	cmp	r3, #2
 800a292:	d10d      	bne.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800a294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a296:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a29a:	d109      	bne.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a29c:	4b8f      	ldr	r3, [pc, #572]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	08db      	lsrs	r3, r3, #3
 800a2a2:	f003 0303 	and.w	r3, r3, #3
 800a2a6:	4a8e      	ldr	r2, [pc, #568]	@ (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a2a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ae:	e01e      	b.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800a2b0:	4b8a      	ldr	r3, [pc, #552]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2bc:	d106      	bne.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800a2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a2c4:	d102      	bne.n	800a2cc <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800a2c6:	4b87      	ldr	r3, [pc, #540]	@ (800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a2c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ca:	e010      	b.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800a2cc:	4b83      	ldr	r3, [pc, #524]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a2d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2d8:	d106      	bne.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800a2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2dc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a2e0:	d102      	bne.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800a2e2:	4b81      	ldr	r3, [pc, #516]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a2e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2e6:	e002      	b.n	800a2ee <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2ec:	e1ed      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a2ee:	e1ec      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800a2f0:	4b7a      	ldr	r3, [pc, #488]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a2f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a2f6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a2fa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d103      	bne.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a302:	f7fb fab3 	bl	800586c <HAL_RCC_GetPCLK3Freq>
 800a306:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a308:	e1df      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800a30a:	4b74      	ldr	r3, [pc, #464]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a312:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a316:	d10b      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800a318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a31a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a31e:	d107      	bne.n	800a330 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a320:	f107 0314 	add.w	r3, r7, #20
 800a324:	4618      	mov	r0, r3
 800a326:	f7fd fbad 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a32e:	e045      	b.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800a330:	4b6a      	ldr	r3, [pc, #424]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a33c:	d10b      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a344:	d107      	bne.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a346:	f107 0308 	add.w	r3, r7, #8
 800a34a:	4618      	mov	r0, r3
 800a34c:	f7fd fd06 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	637b      	str	r3, [r7, #52]	@ 0x34
 800a354:	e032      	b.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800a356:	4b61      	ldr	r3, [pc, #388]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f003 0302 	and.w	r3, r3, #2
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d10d      	bne.n	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800a362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a364:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a368:	d109      	bne.n	800a37e <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a36a:	4b5c      	ldr	r3, [pc, #368]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	08db      	lsrs	r3, r3, #3
 800a370:	f003 0303 	and.w	r3, r3, #3
 800a374:	4a5a      	ldr	r2, [pc, #360]	@ (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a376:	fa22 f303 	lsr.w	r3, r2, r3
 800a37a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a37c:	e01e      	b.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800a37e:	4b57      	ldr	r3, [pc, #348]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a386:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a38a:	d106      	bne.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800a38c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a392:	d102      	bne.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800a394:	4b53      	ldr	r3, [pc, #332]	@ (800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a396:	637b      	str	r3, [r7, #52]	@ 0x34
 800a398:	e010      	b.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800a39a:	4b50      	ldr	r3, [pc, #320]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3a6:	d106      	bne.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800a3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3aa:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800a3ae:	d102      	bne.n	800a3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800a3b0:	4b4d      	ldr	r3, [pc, #308]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a3b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3b4:	e002      	b.n	800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3ba:	e186      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a3bc:	e185      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a3be:	4b47      	ldr	r3, [pc, #284]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a3c4:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800a3c8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800a3ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d103      	bne.n	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a3d0:	f7fb fa36 	bl	8005840 <HAL_RCC_GetPCLK2Freq>
 800a3d4:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a3d6:	e178      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800a3d8:	4b40      	ldr	r3, [pc, #256]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3e4:	d10b      	bne.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3ec:	d107      	bne.n	800a3fe <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3ee:	f107 0314 	add.w	r3, r7, #20
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fd fb46 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a3f8:	69bb      	ldr	r3, [r7, #24]
 800a3fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3fc:	e045      	b.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800a3fe:	4b37      	ldr	r3, [pc, #220]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a40a:	d10b      	bne.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800a40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a40e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a412:	d107      	bne.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a414:	f107 0308 	add.w	r3, r7, #8
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fd fc9f 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	637b      	str	r3, [r7, #52]	@ 0x34
 800a422:	e032      	b.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800a424:	4b2d      	ldr	r3, [pc, #180]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 0302 	and.w	r3, r3, #2
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d10d      	bne.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800a430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a432:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800a436:	d109      	bne.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a438:	4b28      	ldr	r3, [pc, #160]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	08db      	lsrs	r3, r3, #3
 800a43e:	f003 0303 	and.w	r3, r3, #3
 800a442:	4a27      	ldr	r2, [pc, #156]	@ (800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a444:	fa22 f303 	lsr.w	r3, r2, r3
 800a448:	637b      	str	r3, [r7, #52]	@ 0x34
 800a44a:	e01e      	b.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800a44c:	4b23      	ldr	r3, [pc, #140]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a458:	d106      	bne.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800a45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a45c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a460:	d102      	bne.n	800a468 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800a462:	4b20      	ldr	r3, [pc, #128]	@ (800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a464:	637b      	str	r3, [r7, #52]	@ 0x34
 800a466:	e010      	b.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800a468:	4b1c      	ldr	r3, [pc, #112]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a470:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a474:	d106      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800a476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a478:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800a47c:	d102      	bne.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800a47e:	4b1a      	ldr	r3, [pc, #104]	@ (800a4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a480:	637b      	str	r3, [r7, #52]	@ 0x34
 800a482:	e002      	b.n	800a48a <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800a484:	2300      	movs	r3, #0
 800a486:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a488:	e11f      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a48a:	e11e      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a48c:	4b13      	ldr	r3, [pc, #76]	@ (800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a48e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a492:	f003 0303 	and.w	r3, r3, #3
 800a496:	633b      	str	r3, [r7, #48]	@ 0x30
 800a498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49a:	2b03      	cmp	r3, #3
 800a49c:	d85f      	bhi.n	800a55e <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800a49e:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800a4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a4:	0800a4b5 	.word	0x0800a4b5
 800a4a8:	0800a4bd 	.word	0x0800a4bd
 800a4ac:	0800a4cd 	.word	0x0800a4cd
 800a4b0:	0800a4ed 	.word	0x0800a4ed

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800a4b4:	f7fb f992 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 800a4b8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a4ba:	e053      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4bc:	f107 0320 	add.w	r3, r7, #32
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7fd f973 	bl	80077ac <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a4ca:	e04b      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4cc:	f107 0314 	add.w	r3, r7, #20
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7fd fad7 	bl	8007a84 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a4da:	e043      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a4dc:	44020c00 	.word	0x44020c00
 800a4e0:	03d09000 	.word	0x03d09000
 800a4e4:	003d0900 	.word	0x003d0900
 800a4e8:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4ec:	4b79      	ldr	r3, [pc, #484]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a4ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a4f2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a4f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4f8:	4b76      	ldr	r3, [pc, #472]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0302 	and.w	r3, r3, #2
 800a500:	2b02      	cmp	r3, #2
 800a502:	d10c      	bne.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800a504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a506:	2b00      	cmp	r3, #0
 800a508:	d109      	bne.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a50a:	4b72      	ldr	r3, [pc, #456]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	08db      	lsrs	r3, r3, #3
 800a510:	f003 0303 	and.w	r3, r3, #3
 800a514:	4a70      	ldr	r2, [pc, #448]	@ (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800a516:	fa22 f303 	lsr.w	r3, r2, r3
 800a51a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a51c:	e01e      	b.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a51e:	4b6d      	ldr	r3, [pc, #436]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a52a:	d106      	bne.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800a52c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a52e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a532:	d102      	bne.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a534:	4b69      	ldr	r3, [pc, #420]	@ (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800a536:	637b      	str	r3, [r7, #52]	@ 0x34
 800a538:	e010      	b.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a53a:	4b66      	ldr	r3, [pc, #408]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a542:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a546:	d106      	bne.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800a548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a54e:	d102      	bne.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a550:	4b63      	ldr	r3, [pc, #396]	@ (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800a552:	637b      	str	r3, [r7, #52]	@ 0x34
 800a554:	e002      	b.n	800a55c <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800a556:	2300      	movs	r3, #0
 800a558:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a55a:	e003      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800a55c:	e002      	b.n	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800a55e:	2300      	movs	r3, #0
 800a560:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a562:	bf00      	nop
          }
        }
        break;
 800a564:	e0b1      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800a566:	4b5b      	ldr	r3, [pc, #364]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a568:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a56c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a570:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800a572:	4b58      	ldr	r3, [pc, #352]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a578:	f003 0302 	and.w	r3, r3, #2
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d106      	bne.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800a580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a582:	2b00      	cmp	r3, #0
 800a584:	d103      	bne.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800a586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a58a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a58c:	e01f      	b.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800a58e:	4b51      	ldr	r3, [pc, #324]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a590:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a594:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a598:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a59c:	d106      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800a59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a0:	2b40      	cmp	r3, #64	@ 0x40
 800a5a2:	d103      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800a5a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a5a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5aa:	e010      	b.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800a5ac:	4b49      	ldr	r3, [pc, #292]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5b8:	d106      	bne.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800a5ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5bc:	2b80      	cmp	r3, #128	@ 0x80
 800a5be:	d103      	bne.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800a5c0:	f248 0312 	movw	r3, #32786	@ 0x8012
 800a5c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5c6:	e002      	b.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a5cc:	e07d      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a5ce:	e07c      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a5d0:	4b40      	ldr	r3, [pc, #256]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a5d6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a5da:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a5dc:	4b3d      	ldr	r3, [pc, #244]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a5e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5e8:	d105      	bne.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d102      	bne.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800a5f0:	4b3c      	ldr	r3, [pc, #240]	@ (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a5f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5f4:	e031      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800a5f6:	4b37      	ldr	r3, [pc, #220]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a5fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a602:	d10a      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800a604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a606:	2b10      	cmp	r3, #16
 800a608:	d107      	bne.n	800a61a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a60a:	f107 0320 	add.w	r3, r7, #32
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fd f8cc 	bl	80077ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a616:	637b      	str	r3, [r7, #52]	@ 0x34
 800a618:	e01f      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800a61a:	4b2e      	ldr	r3, [pc, #184]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a61c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a620:	f003 0302 	and.w	r3, r3, #2
 800a624:	2b02      	cmp	r3, #2
 800a626:	d106      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800a628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62a:	2b20      	cmp	r3, #32
 800a62c:	d103      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800a62e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a632:	637b      	str	r3, [r7, #52]	@ 0x34
 800a634:	e011      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800a636:	4b27      	ldr	r3, [pc, #156]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a63c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a644:	d106      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800a646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a648:	2b30      	cmp	r3, #48	@ 0x30
 800a64a:	d103      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800a64c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a650:	637b      	str	r3, [r7, #52]	@ 0x34
 800a652:	e002      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800a654:	2300      	movs	r3, #0
 800a656:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a658:	e037      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a65a:	e036      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800a65c:	4b1d      	ldr	r3, [pc, #116]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a65e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a662:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a666:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66a:	2b10      	cmp	r3, #16
 800a66c:	d107      	bne.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a66e:	f107 0320 	add.w	r3, r7, #32
 800a672:	4618      	mov	r0, r3
 800a674:	f7fd f89a 	bl	80077ac <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a67a:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800a67c:	e025      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800a67e:	4b15      	ldr	r3, [pc, #84]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a686:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a68a:	d10a      	bne.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800a68c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a68e:	2b20      	cmp	r3, #32
 800a690:	d107      	bne.n	800a6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a692:	f107 0308 	add.w	r3, r7, #8
 800a696:	4618      	mov	r0, r3
 800a698:	f7fd fb60 	bl	8007d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6a0:	e00f      	b.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800a6a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a6aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a6ae:	d105      	bne.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b2:	2b30      	cmp	r3, #48	@ 0x30
 800a6b4:	d102      	bne.n	800a6bc <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800a6b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800a6b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ba:	e002      	b.n	800a6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800a6c0:	e003      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a6c2:	e002      	b.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a6c8:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	373c      	adds	r7, #60	@ 0x3c
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd90      	pop	{r4, r7, pc}
 800a6d4:	44020c00 	.word	0x44020c00
 800a6d8:	03d09000 	.word	0x03d09000
 800a6dc:	003d0900 	.word	0x003d0900
 800a6e0:	007a1200 	.word	0x007a1200
 800a6e4:	02dc6c00 	.word	0x02dc6c00

0800a6e8 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800a6f0:	4b48      	ldr	r3, [pc, #288]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	4a47      	ldr	r2, [pc, #284]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a6f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a6fa:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a6fc:	f7f7 ff18 	bl	8002530 <HAL_GetTick>
 800a700:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a702:	e008      	b.n	800a716 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a704:	f7f7 ff14 	bl	8002530 <HAL_GetTick>
 800a708:	4602      	mov	r2, r0
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	1ad3      	subs	r3, r2, r3
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d901      	bls.n	800a716 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a712:	2303      	movs	r3, #3
 800a714:	e07a      	b.n	800a80c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a716:	4b3f      	ldr	r3, [pc, #252]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1f0      	bne.n	800a704 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a722:	4b3c      	ldr	r3, [pc, #240]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a726:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a72a:	f023 0303 	bic.w	r3, r3, #3
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	6811      	ldr	r1, [r2, #0]
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	6852      	ldr	r2, [r2, #4]
 800a736:	0212      	lsls	r2, r2, #8
 800a738:	430a      	orrs	r2, r1
 800a73a:	4936      	ldr	r1, [pc, #216]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a73c:	4313      	orrs	r3, r2
 800a73e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	689b      	ldr	r3, [r3, #8]
 800a744:	3b01      	subs	r3, #1
 800a746:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	3b01      	subs	r3, #1
 800a750:	025b      	lsls	r3, r3, #9
 800a752:	b29b      	uxth	r3, r3
 800a754:	431a      	orrs	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	3b01      	subs	r3, #1
 800a75c:	041b      	lsls	r3, r3, #16
 800a75e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a762:	431a      	orrs	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	695b      	ldr	r3, [r3, #20]
 800a768:	3b01      	subs	r3, #1
 800a76a:	061b      	lsls	r3, r3, #24
 800a76c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a770:	4928      	ldr	r1, [pc, #160]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a772:	4313      	orrs	r3, r2
 800a774:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a776:	4b27      	ldr	r3, [pc, #156]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a77a:	f023 020c 	bic.w	r2, r3, #12
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	4924      	ldr	r1, [pc, #144]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a784:	4313      	orrs	r3, r2
 800a786:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a788:	4b22      	ldr	r3, [pc, #136]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a78a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a78c:	f023 0220 	bic.w	r2, r3, #32
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	69db      	ldr	r3, [r3, #28]
 800a794:	491f      	ldr	r1, [pc, #124]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a796:	4313      	orrs	r3, r2
 800a798:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a79a:	4b1e      	ldr	r3, [pc, #120]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a79c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a2:	491c      	ldr	r1, [pc, #112]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a7a8:	4b1a      	ldr	r3, [pc, #104]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ac:	4a19      	ldr	r2, [pc, #100]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a7ae:	f023 0310 	bic.w	r3, r3, #16
 800a7b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a7b4:	4b17      	ldr	r3, [pc, #92]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a7b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7bc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	6a12      	ldr	r2, [r2, #32]
 800a7c4:	00d2      	lsls	r2, r2, #3
 800a7c6:	4913      	ldr	r1, [pc, #76]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a7cc:	4b11      	ldr	r3, [pc, #68]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7d0:	4a10      	ldr	r2, [pc, #64]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a7d2:	f043 0310 	orr.w	r3, r3, #16
 800a7d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a7d8:	4b0e      	ldr	r3, [pc, #56]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a0d      	ldr	r2, [pc, #52]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a7de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a7e2:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a7e4:	f7f7 fea4 	bl	8002530 <HAL_GetTick>
 800a7e8:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a7ea:	e008      	b.n	800a7fe <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a7ec:	f7f7 fea0 	bl	8002530 <HAL_GetTick>
 800a7f0:	4602      	mov	r2, r0
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d901      	bls.n	800a7fe <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a7fa:	2303      	movs	r3, #3
 800a7fc:	e006      	b.n	800a80c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a7fe:	4b05      	ldr	r3, [pc, #20]	@ (800a814 <RCCEx_PLL2_Config+0x12c>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a806:	2b00      	cmp	r3, #0
 800a808:	d0f0      	beq.n	800a7ec <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a80a:	2300      	movs	r3, #0

}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	44020c00 	.word	0x44020c00

0800a818 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a820:	4b48      	ldr	r3, [pc, #288]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4a47      	ldr	r2, [pc, #284]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a826:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a82a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a82c:	f7f7 fe80 	bl	8002530 <HAL_GetTick>
 800a830:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a832:	e008      	b.n	800a846 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a834:	f7f7 fe7c 	bl	8002530 <HAL_GetTick>
 800a838:	4602      	mov	r2, r0
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	2b02      	cmp	r3, #2
 800a840:	d901      	bls.n	800a846 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a842:	2303      	movs	r3, #3
 800a844:	e07a      	b.n	800a93c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a846:	4b3f      	ldr	r3, [pc, #252]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1f0      	bne.n	800a834 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a852:	4b3c      	ldr	r3, [pc, #240]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a856:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a85a:	f023 0303 	bic.w	r3, r3, #3
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	6811      	ldr	r1, [r2, #0]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6852      	ldr	r2, [r2, #4]
 800a866:	0212      	lsls	r2, r2, #8
 800a868:	430a      	orrs	r2, r1
 800a86a:	4936      	ldr	r1, [pc, #216]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a86c:	4313      	orrs	r3, r2
 800a86e:	630b      	str	r3, [r1, #48]	@ 0x30
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	3b01      	subs	r3, #1
 800a876:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	3b01      	subs	r3, #1
 800a880:	025b      	lsls	r3, r3, #9
 800a882:	b29b      	uxth	r3, r3
 800a884:	431a      	orrs	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	041b      	lsls	r3, r3, #16
 800a88e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a892:	431a      	orrs	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	695b      	ldr	r3, [r3, #20]
 800a898:	3b01      	subs	r3, #1
 800a89a:	061b      	lsls	r3, r3, #24
 800a89c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a8a0:	4928      	ldr	r1, [pc, #160]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8a6:	4b27      	ldr	r3, [pc, #156]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a8a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8aa:	f023 020c 	bic.w	r2, r3, #12
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	4924      	ldr	r1, [pc, #144]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a8b8:	4b22      	ldr	r3, [pc, #136]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a8ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8bc:	f023 0220 	bic.w	r2, r3, #32
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	69db      	ldr	r3, [r3, #28]
 800a8c4:	491f      	ldr	r1, [pc, #124]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a8ca:	4b1e      	ldr	r3, [pc, #120]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a8cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d2:	491c      	ldr	r1, [pc, #112]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a8d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a8da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8dc:	4a19      	ldr	r2, [pc, #100]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a8de:	f023 0310 	bic.w	r3, r3, #16
 800a8e2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a8e4:	4b17      	ldr	r3, [pc, #92]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a8e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8ec:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a8f0:	687a      	ldr	r2, [r7, #4]
 800a8f2:	6a12      	ldr	r2, [r2, #32]
 800a8f4:	00d2      	lsls	r2, r2, #3
 800a8f6:	4913      	ldr	r1, [pc, #76]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a8fc:	4b11      	ldr	r3, [pc, #68]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a8fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a900:	4a10      	ldr	r2, [pc, #64]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a902:	f043 0310 	orr.w	r3, r3, #16
 800a906:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a908:	4b0e      	ldr	r3, [pc, #56]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a0d      	ldr	r2, [pc, #52]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a90e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a912:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a914:	f7f7 fe0c 	bl	8002530 <HAL_GetTick>
 800a918:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a91a:	e008      	b.n	800a92e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a91c:	f7f7 fe08 	bl	8002530 <HAL_GetTick>
 800a920:	4602      	mov	r2, r0
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	2b02      	cmp	r3, #2
 800a928:	d901      	bls.n	800a92e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e006      	b.n	800a93c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a92e:	4b05      	ldr	r3, [pc, #20]	@ (800a944 <RCCEx_PLL3_Config+0x12c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0f0      	beq.n	800a91c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	44020c00 	.word	0x44020c00

0800a948 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d101      	bne.n	800a95a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e08c      	b.n	800aa74 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	7a5b      	ldrb	r3, [r3, #9]
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	2b00      	cmp	r3, #0
 800a962:	d105      	bne.n	800a970 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f7f6 fdf4 	bl	8001558 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2202      	movs	r2, #2
 800a974:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f022 0204 	bic.w	r2, r2, #4
 800a984:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6859      	ldr	r1, [r3, #4]
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	4b3b      	ldr	r3, [pc, #236]	@ (800aa7c <HAL_RNG_Init+0x134>)
 800a990:	430b      	orrs	r3, r1
 800a992:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800a99c:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a37      	ldr	r2, [pc, #220]	@ (800aa80 <HAL_RNG_Init+0x138>)
 800a9a4:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800a9b4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a9b6:	f7f7 fdbb 	bl	8002530 <HAL_GetTick>
 800a9ba:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a9bc:	e016      	b.n	800a9ec <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a9be:	f7f7 fdb7 	bl	8002530 <HAL_GetTick>
 800a9c2:	4602      	mov	r2, r0
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	1ad3      	subs	r3, r2, r3
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d90f      	bls.n	800a9ec <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9da:	d107      	bne.n	800a9ec <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e043      	b.n	800aa74 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a9f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9fa:	d0e0      	beq.n	800a9be <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f042 0204 	orr.w	r2, r2, #4
 800aa0a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa16:	2b40      	cmp	r3, #64	@ 0x40
 800aa18:	d104      	bne.n	800aa24 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2204      	movs	r2, #4
 800aa1e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800aa20:	2301      	movs	r3, #1
 800aa22:	e027      	b.n	800aa74 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800aa24:	f7f7 fd84 	bl	8002530 <HAL_GetTick>
 800aa28:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800aa2a:	e015      	b.n	800aa58 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800aa2c:	f7f7 fd80 	bl	8002530 <HAL_GetTick>
 800aa30:	4602      	mov	r2, r0
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	1ad3      	subs	r3, r2, r3
 800aa36:	2b04      	cmp	r3, #4
 800aa38:	d90e      	bls.n	800aa58 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	f003 0301 	and.w	r3, r3, #1
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d007      	beq.n	800aa58 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2204      	movs	r2, #4
 800aa4c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2202      	movs	r2, #2
 800aa52:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	e00d      	b.n	800aa74 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d1e2      	bne.n	800aa2c <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	40f00e00 	.word	0x40f00e00
 800aa80:	0003af66 	.word	0x0003af66

0800aa84 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d071      	beq.n	800ab7a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d106      	bne.n	800aab0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f7f6 fdac 	bl	8001608 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2202      	movs	r2, #2
 800aab4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800aab8:	4b32      	ldr	r3, [pc, #200]	@ (800ab84 <HAL_RTC_Init+0x100>)
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	f003 0310 	and.w	r3, r3, #16
 800aac0:	2b10      	cmp	r3, #16
 800aac2:	d051      	beq.n	800ab68 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aac4:	4b2f      	ldr	r3, [pc, #188]	@ (800ab84 <HAL_RTC_Init+0x100>)
 800aac6:	22ca      	movs	r2, #202	@ 0xca
 800aac8:	625a      	str	r2, [r3, #36]	@ 0x24
 800aaca:	4b2e      	ldr	r3, [pc, #184]	@ (800ab84 <HAL_RTC_Init+0x100>)
 800aacc:	2253      	movs	r2, #83	@ 0x53
 800aace:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f9a3 	bl	800ae1c <RTC_EnterInitMode>
 800aad6:	4603      	mov	r3, r0
 800aad8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800aada:	7bfb      	ldrb	r3, [r7, #15]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d13f      	bne.n	800ab60 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800aae0:	4b28      	ldr	r3, [pc, #160]	@ (800ab84 <HAL_RTC_Init+0x100>)
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	4a27      	ldr	r2, [pc, #156]	@ (800ab84 <HAL_RTC_Init+0x100>)
 800aae6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800aaea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aaee:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800aaf0:	4b24      	ldr	r3, [pc, #144]	@ (800ab84 <HAL_RTC_Init+0x100>)
 800aaf2:	699a      	ldr	r2, [r3, #24]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6859      	ldr	r1, [r3, #4]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	691b      	ldr	r3, [r3, #16]
 800aafc:	4319      	orrs	r1, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	699b      	ldr	r3, [r3, #24]
 800ab02:	430b      	orrs	r3, r1
 800ab04:	491f      	ldr	r1, [pc, #124]	@ (800ab84 <HAL_RTC_Init+0x100>)
 800ab06:	4313      	orrs	r3, r2
 800ab08:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	68da      	ldr	r2, [r3, #12]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	041b      	lsls	r3, r3, #16
 800ab14:	491b      	ldr	r1, [pc, #108]	@ (800ab84 <HAL_RTC_Init+0x100>)
 800ab16:	4313      	orrs	r3, r2
 800ab18:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800ab1a:	4b1a      	ldr	r3, [pc, #104]	@ (800ab84 <HAL_RTC_Init+0x100>)
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab2a:	430b      	orrs	r3, r1
 800ab2c:	4915      	ldr	r1, [pc, #84]	@ (800ab84 <HAL_RTC_Init+0x100>)
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f9ae 	bl	800ae94 <RTC_ExitInitMode>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800ab3c:	7bfb      	ldrb	r3, [r7, #15]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10e      	bne.n	800ab60 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800ab42:	4b10      	ldr	r3, [pc, #64]	@ (800ab84 <HAL_RTC_Init+0x100>)
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a19      	ldr	r1, [r3, #32]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	69db      	ldr	r3, [r3, #28]
 800ab52:	4319      	orrs	r1, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	430b      	orrs	r3, r1
 800ab5a:	490a      	ldr	r1, [pc, #40]	@ (800ab84 <HAL_RTC_Init+0x100>)
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab60:	4b08      	ldr	r3, [pc, #32]	@ (800ab84 <HAL_RTC_Init+0x100>)
 800ab62:	22ff      	movs	r2, #255	@ 0xff
 800ab64:	625a      	str	r2, [r3, #36]	@ 0x24
 800ab66:	e001      	b.n	800ab6c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d103      	bne.n	800ab7a <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2201      	movs	r2, #1
 800ab76:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	44007800 	.word	0x44007800

0800ab88 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ab88:	b590      	push	{r4, r7, lr}
 800ab8a:	b087      	sub	sp, #28
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d101      	bne.n	800aba2 <HAL_RTC_SetTime+0x1a>
 800ab9e:	2302      	movs	r3, #2
 800aba0:	e07e      	b.n	800aca0 <HAL_RTC_SetTime+0x118>
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	2201      	movs	r2, #1
 800aba6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2202      	movs	r2, #2
 800abae:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800abb2:	4b3d      	ldr	r3, [pc, #244]	@ (800aca8 <HAL_RTC_SetTime+0x120>)
 800abb4:	22ca      	movs	r2, #202	@ 0xca
 800abb6:	625a      	str	r2, [r3, #36]	@ 0x24
 800abb8:	4b3b      	ldr	r3, [pc, #236]	@ (800aca8 <HAL_RTC_SetTime+0x120>)
 800abba:	2253      	movs	r2, #83	@ 0x53
 800abbc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f000 f92c 	bl	800ae1c <RTC_EnterInitMode>
 800abc4:	4603      	mov	r3, r0
 800abc6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800abc8:	7cfb      	ldrb	r3, [r7, #19]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d159      	bne.n	800ac82 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800abce:	4b36      	ldr	r3, [pc, #216]	@ (800aca8 <HAL_RTC_SetTime+0x120>)
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abda:	d04d      	beq.n	800ac78 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d125      	bne.n	800ac2e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800abe2:	4b31      	ldr	r3, [pc, #196]	@ (800aca8 <HAL_RTC_SetTime+0x120>)
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abea:	2b00      	cmp	r3, #0
 800abec:	d102      	bne.n	800abf4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	2200      	movs	r2, #0
 800abf2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 f989 	bl	800af10 <RTC_ByteToBcd2>
 800abfe:	4603      	mov	r3, r0
 800ac00:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	785b      	ldrb	r3, [r3, #1]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f000 f982 	bl	800af10 <RTC_ByteToBcd2>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ac10:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	789b      	ldrb	r3, [r3, #2]
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 f97a 	bl	800af10 <RTC_ByteToBcd2>
 800ac1c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ac1e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	78db      	ldrb	r3, [r3, #3]
 800ac26:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ac28:	4313      	orrs	r3, r2
 800ac2a:	617b      	str	r3, [r7, #20]
 800ac2c:	e017      	b.n	800ac5e <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800ac2e:	4b1e      	ldr	r3, [pc, #120]	@ (800aca8 <HAL_RTC_SetTime+0x120>)
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d102      	bne.n	800ac40 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	785b      	ldrb	r3, [r3, #1]
 800ac4a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ac4c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ac52:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	78db      	ldrb	r3, [r3, #3]
 800ac58:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800ac5e:	4a12      	ldr	r2, [pc, #72]	@ (800aca8 <HAL_RTC_SetTime+0x120>)
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800ac66:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800ac6a:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800ac6c:	4b0e      	ldr	r3, [pc, #56]	@ (800aca8 <HAL_RTC_SetTime+0x120>)
 800ac6e:	699b      	ldr	r3, [r3, #24]
 800ac70:	4a0d      	ldr	r2, [pc, #52]	@ (800aca8 <HAL_RTC_SetTime+0x120>)
 800ac72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac76:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ac78:	68f8      	ldr	r0, [r7, #12]
 800ac7a:	f000 f90b 	bl	800ae94 <RTC_ExitInitMode>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac82:	4b09      	ldr	r3, [pc, #36]	@ (800aca8 <HAL_RTC_SetTime+0x120>)
 800ac84:	22ff      	movs	r2, #255	@ 0xff
 800ac86:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800ac88:	7cfb      	ldrb	r3, [r7, #19]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d103      	bne.n	800ac96 <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2201      	movs	r2, #1
 800ac92:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2200      	movs	r2, #0
 800ac9a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800ac9e:	7cfb      	ldrb	r3, [r7, #19]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	371c      	adds	r7, #28
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd90      	pop	{r4, r7, pc}
 800aca8:	44007800 	.word	0x44007800

0800acac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800acac:	b590      	push	{r4, r7, lr}
 800acae:	b087      	sub	sp, #28
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d101      	bne.n	800acc6 <HAL_RTC_SetDate+0x1a>
 800acc2:	2302      	movs	r3, #2
 800acc4:	e071      	b.n	800adaa <HAL_RTC_SetDate+0xfe>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2201      	movs	r2, #1
 800acca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	2202      	movs	r2, #2
 800acd2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10e      	bne.n	800acfa <HAL_RTC_SetDate+0x4e>
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	785b      	ldrb	r3, [r3, #1]
 800ace0:	f003 0310 	and.w	r3, r3, #16
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d008      	beq.n	800acfa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	785b      	ldrb	r3, [r3, #1]
 800acec:	f023 0310 	bic.w	r3, r3, #16
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	330a      	adds	r3, #10
 800acf4:	b2da      	uxtb	r2, r3
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d11c      	bne.n	800ad3a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	78db      	ldrb	r3, [r3, #3]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f000 f903 	bl	800af10 <RTC_ByteToBcd2>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	785b      	ldrb	r3, [r3, #1]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f000 f8fc 	bl	800af10 <RTC_ByteToBcd2>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ad1c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	789b      	ldrb	r3, [r3, #2]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 f8f4 	bl	800af10 <RTC_ByteToBcd2>
 800ad28:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ad2a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800ad34:	4313      	orrs	r3, r2
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	e00e      	b.n	800ad58 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	78db      	ldrb	r3, [r3, #3]
 800ad3e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	785b      	ldrb	r3, [r3, #1]
 800ad44:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ad46:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800ad48:	68ba      	ldr	r2, [r7, #8]
 800ad4a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800ad4c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	781b      	ldrb	r3, [r3, #0]
 800ad52:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800ad54:	4313      	orrs	r3, r2
 800ad56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad58:	4b16      	ldr	r3, [pc, #88]	@ (800adb4 <HAL_RTC_SetDate+0x108>)
 800ad5a:	22ca      	movs	r2, #202	@ 0xca
 800ad5c:	625a      	str	r2, [r3, #36]	@ 0x24
 800ad5e:	4b15      	ldr	r3, [pc, #84]	@ (800adb4 <HAL_RTC_SetDate+0x108>)
 800ad60:	2253      	movs	r2, #83	@ 0x53
 800ad62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ad64:	68f8      	ldr	r0, [r7, #12]
 800ad66:	f000 f859 	bl	800ae1c <RTC_EnterInitMode>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800ad6e:	7cfb      	ldrb	r3, [r7, #19]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10b      	bne.n	800ad8c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800ad74:	4a0f      	ldr	r2, [pc, #60]	@ (800adb4 <HAL_RTC_SetDate+0x108>)
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ad7c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ad80:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f000 f886 	bl	800ae94 <RTC_ExitInitMode>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad8c:	4b09      	ldr	r3, [pc, #36]	@ (800adb4 <HAL_RTC_SetDate+0x108>)
 800ad8e:	22ff      	movs	r2, #255	@ 0xff
 800ad90:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800ad92:	7cfb      	ldrb	r3, [r7, #19]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d103      	bne.n	800ada0 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800ada8:	7cfb      	ldrb	r3, [r7, #19]
}
 800adaa:	4618      	mov	r0, r3
 800adac:	371c      	adds	r7, #28
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd90      	pop	{r4, r7, pc}
 800adb2:	bf00      	nop
 800adb4:	44007800 	.word	0x44007800

0800adb8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800adc0:	4b15      	ldr	r3, [pc, #84]	@ (800ae18 <HAL_RTC_WaitForSynchro+0x60>)
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	4a14      	ldr	r2, [pc, #80]	@ (800ae18 <HAL_RTC_WaitForSynchro+0x60>)
 800adc6:	f023 0320 	bic.w	r3, r3, #32
 800adca:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800adcc:	f7f7 fbb0 	bl	8002530 <HAL_GetTick>
 800add0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800add2:	e013      	b.n	800adfc <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800add4:	f7f7 fbac 	bl	8002530 <HAL_GetTick>
 800add8:	4602      	mov	r2, r0
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ade2:	d90b      	bls.n	800adfc <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800ade4:	4b0c      	ldr	r3, [pc, #48]	@ (800ae18 <HAL_RTC_WaitForSynchro+0x60>)
 800ade6:	68db      	ldr	r3, [r3, #12]
 800ade8:	f003 0320 	and.w	r3, r3, #32
 800adec:	2b00      	cmp	r3, #0
 800adee:	d10c      	bne.n	800ae0a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2203      	movs	r2, #3
 800adf4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800adf8:	2303      	movs	r3, #3
 800adfa:	e008      	b.n	800ae0e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800adfc:	4b06      	ldr	r3, [pc, #24]	@ (800ae18 <HAL_RTC_WaitForSynchro+0x60>)
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	f003 0320 	and.w	r3, r3, #32
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d0e5      	beq.n	800add4 <HAL_RTC_WaitForSynchro+0x1c>
 800ae08:	e000      	b.n	800ae0c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800ae0a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800ae0c:	2300      	movs	r3, #0
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	44007800 	.word	0x44007800

0800ae1c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ae28:	4b19      	ldr	r3, [pc, #100]	@ (800ae90 <RTC_EnterInitMode+0x74>)
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d128      	bne.n	800ae86 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800ae34:	4b16      	ldr	r3, [pc, #88]	@ (800ae90 <RTC_EnterInitMode+0x74>)
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	4a15      	ldr	r2, [pc, #84]	@ (800ae90 <RTC_EnterInitMode+0x74>)
 800ae3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae3e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800ae40:	f7f7 fb76 	bl	8002530 <HAL_GetTick>
 800ae44:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ae46:	e013      	b.n	800ae70 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ae48:	f7f7 fb72 	bl	8002530 <HAL_GetTick>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	1ad3      	subs	r3, r2, r3
 800ae52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ae56:	d90b      	bls.n	800ae70 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800ae58:	4b0d      	ldr	r3, [pc, #52]	@ (800ae90 <RTC_EnterInitMode+0x74>)
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10f      	bne.n	800ae84 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800ae64:	2303      	movs	r3, #3
 800ae66:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2203      	movs	r2, #3
 800ae6c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800ae70:	4b07      	ldr	r3, [pc, #28]	@ (800ae90 <RTC_EnterInitMode+0x74>)
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d104      	bne.n	800ae86 <RTC_EnterInitMode+0x6a>
 800ae7c:	7bfb      	ldrb	r3, [r7, #15]
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	d1e2      	bne.n	800ae48 <RTC_EnterInitMode+0x2c>
 800ae82:	e000      	b.n	800ae86 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800ae84:	bf00      	nop
        }
      }
    }
  }

  return status;
 800ae86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	44007800 	.word	0x44007800

0800ae94 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800aea0:	4b1a      	ldr	r3, [pc, #104]	@ (800af0c <RTC_ExitInitMode+0x78>)
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	4a19      	ldr	r2, [pc, #100]	@ (800af0c <RTC_ExitInitMode+0x78>)
 800aea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aeaa:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800aeac:	4b17      	ldr	r3, [pc, #92]	@ (800af0c <RTC_ExitInitMode+0x78>)
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	f003 0320 	and.w	r3, r3, #32
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d10c      	bne.n	800aed2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f7ff ff7d 	bl	800adb8 <HAL_RTC_WaitForSynchro>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d01e      	beq.n	800af02 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2203      	movs	r2, #3
 800aec8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800aecc:	2303      	movs	r3, #3
 800aece:	73fb      	strb	r3, [r7, #15]
 800aed0:	e017      	b.n	800af02 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aed2:	4b0e      	ldr	r3, [pc, #56]	@ (800af0c <RTC_ExitInitMode+0x78>)
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	4a0d      	ldr	r2, [pc, #52]	@ (800af0c <RTC_ExitInitMode+0x78>)
 800aed8:	f023 0320 	bic.w	r3, r3, #32
 800aedc:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f7ff ff6a 	bl	800adb8 <HAL_RTC_WaitForSynchro>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d005      	beq.n	800aef6 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2203      	movs	r2, #3
 800aeee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800aef2:	2303      	movs	r3, #3
 800aef4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aef6:	4b05      	ldr	r3, [pc, #20]	@ (800af0c <RTC_ExitInitMode+0x78>)
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	4a04      	ldr	r2, [pc, #16]	@ (800af0c <RTC_ExitInitMode+0x78>)
 800aefc:	f043 0320 	orr.w	r3, r3, #32
 800af00:	6193      	str	r3, [r2, #24]
  }
  return status;
 800af02:	7bfb      	ldrb	r3, [r7, #15]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	44007800 	.word	0x44007800

0800af10 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	4603      	mov	r3, r0
 800af18:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800af1a:	2300      	movs	r3, #0
 800af1c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800af1e:	79fb      	ldrb	r3, [r7, #7]
 800af20:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800af22:	e005      	b.n	800af30 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	3301      	adds	r3, #1
 800af28:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800af2a:	7afb      	ldrb	r3, [r7, #11]
 800af2c:	3b0a      	subs	r3, #10
 800af2e:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800af30:	7afb      	ldrb	r3, [r7, #11]
 800af32:	2b09      	cmp	r3, #9
 800af34:	d8f6      	bhi.n	800af24 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	011b      	lsls	r3, r3, #4
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	7afb      	ldrb	r3, [r7, #11]
 800af40:	4313      	orrs	r3, r2
 800af42:	b2db      	uxtb	r3, r3
}
 800af44:	4618      	mov	r0, r3
 800af46:	3714      	adds	r7, #20
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800af50:	b480      	push	{r7}
 800af52:	b083      	sub	sp, #12
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	4910      	ldr	r1, [pc, #64]	@ (800afa4 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800af64:	4313      	orrs	r3, r2
 800af66:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	689a      	ldr	r2, [r3, #8]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	68db      	ldr	r3, [r3, #12]
 800af70:	431a      	orrs	r2, r3
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	699b      	ldr	r3, [r3, #24]
 800af76:	490c      	ldr	r1, [pc, #48]	@ (800afa8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800af78:	4313      	orrs	r3, r2
 800af7a:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800af7c:	4b0a      	ldr	r3, [pc, #40]	@ (800afa8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800af7e:	6a1b      	ldr	r3, [r3, #32]
 800af80:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	6919      	ldr	r1, [r3, #16]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	695b      	ldr	r3, [r3, #20]
 800af8c:	041b      	lsls	r3, r3, #16
 800af8e:	430b      	orrs	r3, r1
 800af90:	4905      	ldr	r1, [pc, #20]	@ (800afa8 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800af92:	4313      	orrs	r3, r2
 800af94:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	370c      	adds	r7, #12
 800af9c:	46bd      	mov	sp, r7
 800af9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa2:	4770      	bx	lr
 800afa4:	44007800 	.word	0x44007800
 800afa8:	44007c00 	.word	0x44007c00

0800afac <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e162      	b.n	800b284 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4a70      	ldr	r2, [pc, #448]	@ (800b184 <HAL_SPI_Init+0x1d8>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d018      	beq.n	800affa <HAL_SPI_Init+0x4e>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a6e      	ldr	r2, [pc, #440]	@ (800b188 <HAL_SPI_Init+0x1dc>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d013      	beq.n	800affa <HAL_SPI_Init+0x4e>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a6d      	ldr	r2, [pc, #436]	@ (800b18c <HAL_SPI_Init+0x1e0>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d00e      	beq.n	800affa <HAL_SPI_Init+0x4e>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a6b      	ldr	r2, [pc, #428]	@ (800b190 <HAL_SPI_Init+0x1e4>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d009      	beq.n	800affa <HAL_SPI_Init+0x4e>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a6a      	ldr	r2, [pc, #424]	@ (800b194 <HAL_SPI_Init+0x1e8>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d004      	beq.n	800affa <HAL_SPI_Init+0x4e>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a68      	ldr	r2, [pc, #416]	@ (800b198 <HAL_SPI_Init+0x1ec>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	e000      	b.n	800affc <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800affa:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2200      	movs	r2, #0
 800b000:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a5f      	ldr	r2, [pc, #380]	@ (800b184 <HAL_SPI_Init+0x1d8>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d018      	beq.n	800b03e <HAL_SPI_Init+0x92>
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a5d      	ldr	r2, [pc, #372]	@ (800b188 <HAL_SPI_Init+0x1dc>)
 800b012:	4293      	cmp	r3, r2
 800b014:	d013      	beq.n	800b03e <HAL_SPI_Init+0x92>
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	4a5c      	ldr	r2, [pc, #368]	@ (800b18c <HAL_SPI_Init+0x1e0>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d00e      	beq.n	800b03e <HAL_SPI_Init+0x92>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a5a      	ldr	r2, [pc, #360]	@ (800b190 <HAL_SPI_Init+0x1e4>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d009      	beq.n	800b03e <HAL_SPI_Init+0x92>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	4a59      	ldr	r2, [pc, #356]	@ (800b194 <HAL_SPI_Init+0x1e8>)
 800b030:	4293      	cmp	r3, r2
 800b032:	d004      	beq.n	800b03e <HAL_SPI_Init+0x92>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a57      	ldr	r2, [pc, #348]	@ (800b198 <HAL_SPI_Init+0x1ec>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d105      	bne.n	800b04a <HAL_SPI_Init+0x9e>
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	2b0f      	cmp	r3, #15
 800b044:	d901      	bls.n	800b04a <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	e11c      	b.n	800b284 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f000 f91e 	bl	800b28c <SPI_GetPacketSize>
 800b050:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4a4b      	ldr	r2, [pc, #300]	@ (800b184 <HAL_SPI_Init+0x1d8>)
 800b058:	4293      	cmp	r3, r2
 800b05a:	d018      	beq.n	800b08e <HAL_SPI_Init+0xe2>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a49      	ldr	r2, [pc, #292]	@ (800b188 <HAL_SPI_Init+0x1dc>)
 800b062:	4293      	cmp	r3, r2
 800b064:	d013      	beq.n	800b08e <HAL_SPI_Init+0xe2>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a48      	ldr	r2, [pc, #288]	@ (800b18c <HAL_SPI_Init+0x1e0>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d00e      	beq.n	800b08e <HAL_SPI_Init+0xe2>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	4a46      	ldr	r2, [pc, #280]	@ (800b190 <HAL_SPI_Init+0x1e4>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d009      	beq.n	800b08e <HAL_SPI_Init+0xe2>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a45      	ldr	r2, [pc, #276]	@ (800b194 <HAL_SPI_Init+0x1e8>)
 800b080:	4293      	cmp	r3, r2
 800b082:	d004      	beq.n	800b08e <HAL_SPI_Init+0xe2>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a43      	ldr	r2, [pc, #268]	@ (800b198 <HAL_SPI_Init+0x1ec>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d102      	bne.n	800b094 <HAL_SPI_Init+0xe8>
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b08      	cmp	r3, #8
 800b092:	d820      	bhi.n	800b0d6 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b098:	4a40      	ldr	r2, [pc, #256]	@ (800b19c <HAL_SPI_Init+0x1f0>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d018      	beq.n	800b0d0 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a3f      	ldr	r2, [pc, #252]	@ (800b1a0 <HAL_SPI_Init+0x1f4>)
 800b0a4:	4293      	cmp	r3, r2
 800b0a6:	d013      	beq.n	800b0d0 <HAL_SPI_Init+0x124>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a3d      	ldr	r2, [pc, #244]	@ (800b1a4 <HAL_SPI_Init+0x1f8>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d00e      	beq.n	800b0d0 <HAL_SPI_Init+0x124>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a3c      	ldr	r2, [pc, #240]	@ (800b1a8 <HAL_SPI_Init+0x1fc>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d009      	beq.n	800b0d0 <HAL_SPI_Init+0x124>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a3a      	ldr	r2, [pc, #232]	@ (800b1ac <HAL_SPI_Init+0x200>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d004      	beq.n	800b0d0 <HAL_SPI_Init+0x124>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a39      	ldr	r2, [pc, #228]	@ (800b1b0 <HAL_SPI_Init+0x204>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d104      	bne.n	800b0da <HAL_SPI_Init+0x12e>
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	2b10      	cmp	r3, #16
 800b0d4:	d901      	bls.n	800b0da <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e0d4      	b.n	800b284 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d106      	bne.n	800b0f4 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b0ee:	6878      	ldr	r0, [r7, #4]
 800b0f0:	f7f6 faea 	bl	80016c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	681a      	ldr	r2, [r3, #0]
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f022 0201 	bic.w	r2, r2, #1
 800b10a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b116:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b120:	d119      	bne.n	800b156 <HAL_SPI_Init+0x1aa>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b12a:	d103      	bne.n	800b134 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b130:	2b00      	cmp	r3, #0
 800b132:	d008      	beq.n	800b146 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10c      	bne.n	800b156 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b140:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b144:	d107      	bne.n	800b156 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b154:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d028      	beq.n	800b1b4 <HAL_SPI_Init+0x208>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	2b06      	cmp	r3, #6
 800b168:	d924      	bls.n	800b1b4 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	430a      	orrs	r2, r1
 800b17e:	601a      	str	r2, [r3, #0]
 800b180:	e020      	b.n	800b1c4 <HAL_SPI_Init+0x218>
 800b182:	bf00      	nop
 800b184:	40014c00 	.word	0x40014c00
 800b188:	50014c00 	.word	0x50014c00
 800b18c:	44002000 	.word	0x44002000
 800b190:	54002000 	.word	0x54002000
 800b194:	40015000 	.word	0x40015000
 800b198:	50015000 	.word	0x50015000
 800b19c:	40013000 	.word	0x40013000
 800b1a0:	50013000 	.word	0x50013000
 800b1a4:	40003800 	.word	0x40003800
 800b1a8:	50003800 	.word	0x50003800
 800b1ac:	40003c00 	.word	0x40003c00
 800b1b0:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b1c2:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	69da      	ldr	r2, [r3, #28]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1cc:	431a      	orrs	r2, r3
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1d6:	ea42 0103 	orr.w	r1, r2, r3
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	68da      	ldr	r2, [r3, #12]
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	430a      	orrs	r2, r1
 800b1e4:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1f4:	431a      	orrs	r2, r3
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	699b      	ldr	r3, [r3, #24]
 800b1fa:	431a      	orrs	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	691b      	ldr	r3, [r3, #16]
 800b200:	431a      	orrs	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	695b      	ldr	r3, [r3, #20]
 800b206:	431a      	orrs	r2, r3
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a1b      	ldr	r3, [r3, #32]
 800b20c:	431a      	orrs	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	431a      	orrs	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b218:	431a      	orrs	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	431a      	orrs	r2, r3
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b224:	431a      	orrs	r2, r3
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b22a:	431a      	orrs	r2, r3
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b230:	ea42 0103 	orr.w	r1, r2, r3
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	430a      	orrs	r2, r1
 800b23e:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f022 0201 	bic.w	r2, r2, #1
 800b24e:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d00a      	beq.n	800b272 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	430a      	orrs	r2, r1
 800b270:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2200      	movs	r2, #0
 800b276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2201      	movs	r2, #1
 800b27e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800b282:	2300      	movs	r3, #0
}
 800b284:	4618      	mov	r0, r3
 800b286:	3710      	adds	r7, #16
 800b288:	46bd      	mov	sp, r7
 800b28a:	bd80      	pop	{r7, pc}

0800b28c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b298:	095b      	lsrs	r3, r3, #5
 800b29a:	3301      	adds	r3, #1
 800b29c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	3307      	adds	r3, #7
 800b2aa:	08db      	lsrs	r3, r3, #3
 800b2ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	fb02 f303 	mul.w	r3, r2, r3
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3714      	adds	r7, #20
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr

0800b2c2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b2c2:	b580      	push	{r7, lr}
 800b2c4:	b082      	sub	sp, #8
 800b2c6:	af00      	add	r7, sp, #0
 800b2c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e042      	b.n	800b35a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d106      	bne.n	800b2ec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f7f6 faaa 	bl	8001840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2224      	movs	r2, #36	@ 0x24
 800b2f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	f022 0201 	bic.w	r2, r2, #1
 800b302:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fab5 	bl	800b87c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 f8c4 	bl	800b4a0 <UART_SetConfig>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b01      	cmp	r3, #1
 800b31c:	d101      	bne.n	800b322 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	e01b      	b.n	800b35a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	685a      	ldr	r2, [r3, #4]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b330:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	689a      	ldr	r2, [r3, #8]
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b340:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f042 0201 	orr.w	r2, r2, #1
 800b350:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 fb34 	bl	800b9c0 <UART_CheckIdleState>
 800b358:	4603      	mov	r3, r0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3708      	adds	r7, #8
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}

0800b362 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b362:	b580      	push	{r7, lr}
 800b364:	b08a      	sub	sp, #40	@ 0x28
 800b366:	af02      	add	r7, sp, #8
 800b368:	60f8      	str	r0, [r7, #12]
 800b36a:	60b9      	str	r1, [r7, #8]
 800b36c:	603b      	str	r3, [r7, #0]
 800b36e:	4613      	mov	r3, r2
 800b370:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b378:	2b20      	cmp	r3, #32
 800b37a:	f040 808b 	bne.w	800b494 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d002      	beq.n	800b38a <HAL_UART_Transmit+0x28>
 800b384:	88fb      	ldrh	r3, [r7, #6]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d101      	bne.n	800b38e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	e083      	b.n	800b496 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b398:	2b80      	cmp	r3, #128	@ 0x80
 800b39a:	d107      	bne.n	800b3ac <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	689a      	ldr	r2, [r3, #8]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b3aa:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2221      	movs	r2, #33	@ 0x21
 800b3b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b3bc:	f7f7 f8b8 	bl	8002530 <HAL_GetTick>
 800b3c0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	88fa      	ldrh	r2, [r7, #6]
 800b3c6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	88fa      	ldrh	r2, [r7, #6]
 800b3ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b3da:	d108      	bne.n	800b3ee <HAL_UART_Transmit+0x8c>
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d104      	bne.n	800b3ee <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	61bb      	str	r3, [r7, #24]
 800b3ec:	e003      	b.n	800b3f6 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b3f6:	e030      	b.n	800b45a <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	9300      	str	r3, [sp, #0]
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	2200      	movs	r2, #0
 800b400:	2180      	movs	r1, #128	@ 0x80
 800b402:	68f8      	ldr	r0, [r7, #12]
 800b404:	f000 fb86 	bl	800bb14 <UART_WaitOnFlagUntilTimeout>
 800b408:	4603      	mov	r3, r0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d005      	beq.n	800b41a <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2220      	movs	r2, #32
 800b412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b416:	2303      	movs	r3, #3
 800b418:	e03d      	b.n	800b496 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10b      	bne.n	800b438 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	461a      	mov	r2, r3
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b42e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	3302      	adds	r3, #2
 800b434:	61bb      	str	r3, [r7, #24]
 800b436:	e007      	b.n	800b448 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	781a      	ldrb	r2, [r3, #0]
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b442:	69fb      	ldr	r3, [r7, #28]
 800b444:	3301      	adds	r3, #1
 800b446:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b44e:	b29b      	uxth	r3, r3
 800b450:	3b01      	subs	r3, #1
 800b452:	b29a      	uxth	r2, r3
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b460:	b29b      	uxth	r3, r3
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1c8      	bne.n	800b3f8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	2200      	movs	r2, #0
 800b46e:	2140      	movs	r1, #64	@ 0x40
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f000 fb4f 	bl	800bb14 <UART_WaitOnFlagUntilTimeout>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d005      	beq.n	800b488 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	2220      	movs	r2, #32
 800b480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	e006      	b.n	800b496 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2220      	movs	r2, #32
 800b48c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	e000      	b.n	800b496 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b494:	2302      	movs	r3, #2
  }
}
 800b496:	4618      	mov	r0, r3
 800b498:	3720      	adds	r7, #32
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
	...

0800b4a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4a4:	b094      	sub	sp, #80	@ 0x50
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800b4b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	4b78      	ldr	r3, [pc, #480]	@ (800b698 <UART_SetConfig+0x1f8>)
 800b4b6:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ba:	689a      	ldr	r2, [r3, #8]
 800b4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	431a      	orrs	r2, r3
 800b4c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4c4:	695b      	ldr	r3, [r3, #20]
 800b4c6:	431a      	orrs	r2, r3
 800b4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4ca:	69db      	ldr	r3, [r3, #28]
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	4971      	ldr	r1, [pc, #452]	@ (800b69c <UART_SetConfig+0x1fc>)
 800b4d8:	4019      	ands	r1, r3
 800b4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b4e0:	430b      	orrs	r3, r1
 800b4e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f0:	68d9      	ldr	r1, [r3, #12]
 800b4f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	ea40 0301 	orr.w	r3, r0, r1
 800b4fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b4fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	4b64      	ldr	r3, [pc, #400]	@ (800b698 <UART_SetConfig+0x1f8>)
 800b508:	429a      	cmp	r2, r3
 800b50a:	d009      	beq.n	800b520 <UART_SetConfig+0x80>
 800b50c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b50e:	681a      	ldr	r2, [r3, #0]
 800b510:	4b63      	ldr	r3, [pc, #396]	@ (800b6a0 <UART_SetConfig+0x200>)
 800b512:	429a      	cmp	r2, r3
 800b514:	d004      	beq.n	800b520 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b518:	6a1a      	ldr	r2, [r3, #32]
 800b51a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b51c:	4313      	orrs	r3, r2
 800b51e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800b52a:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800b52e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b534:	430b      	orrs	r3, r1
 800b536:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b53e:	f023 000f 	bic.w	r0, r3, #15
 800b542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b544:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	ea40 0301 	orr.w	r3, r0, r1
 800b54e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b552:	681a      	ldr	r2, [r3, #0]
 800b554:	4b53      	ldr	r3, [pc, #332]	@ (800b6a4 <UART_SetConfig+0x204>)
 800b556:	429a      	cmp	r2, r3
 800b558:	d102      	bne.n	800b560 <UART_SetConfig+0xc0>
 800b55a:	2301      	movs	r3, #1
 800b55c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b55e:	e066      	b.n	800b62e <UART_SetConfig+0x18e>
 800b560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b562:	681a      	ldr	r2, [r3, #0]
 800b564:	4b50      	ldr	r3, [pc, #320]	@ (800b6a8 <UART_SetConfig+0x208>)
 800b566:	429a      	cmp	r2, r3
 800b568:	d102      	bne.n	800b570 <UART_SetConfig+0xd0>
 800b56a:	2302      	movs	r3, #2
 800b56c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b56e:	e05e      	b.n	800b62e <UART_SetConfig+0x18e>
 800b570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	4b4d      	ldr	r3, [pc, #308]	@ (800b6ac <UART_SetConfig+0x20c>)
 800b576:	429a      	cmp	r2, r3
 800b578:	d102      	bne.n	800b580 <UART_SetConfig+0xe0>
 800b57a:	2304      	movs	r3, #4
 800b57c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b57e:	e056      	b.n	800b62e <UART_SetConfig+0x18e>
 800b580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	4b4a      	ldr	r3, [pc, #296]	@ (800b6b0 <UART_SetConfig+0x210>)
 800b586:	429a      	cmp	r2, r3
 800b588:	d102      	bne.n	800b590 <UART_SetConfig+0xf0>
 800b58a:	2308      	movs	r3, #8
 800b58c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b58e:	e04e      	b.n	800b62e <UART_SetConfig+0x18e>
 800b590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	4b47      	ldr	r3, [pc, #284]	@ (800b6b4 <UART_SetConfig+0x214>)
 800b596:	429a      	cmp	r2, r3
 800b598:	d102      	bne.n	800b5a0 <UART_SetConfig+0x100>
 800b59a:	2310      	movs	r3, #16
 800b59c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b59e:	e046      	b.n	800b62e <UART_SetConfig+0x18e>
 800b5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5a2:	681a      	ldr	r2, [r3, #0]
 800b5a4:	4b44      	ldr	r3, [pc, #272]	@ (800b6b8 <UART_SetConfig+0x218>)
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d102      	bne.n	800b5b0 <UART_SetConfig+0x110>
 800b5aa:	2320      	movs	r3, #32
 800b5ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5ae:	e03e      	b.n	800b62e <UART_SetConfig+0x18e>
 800b5b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b2:	681a      	ldr	r2, [r3, #0]
 800b5b4:	4b41      	ldr	r3, [pc, #260]	@ (800b6bc <UART_SetConfig+0x21c>)
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	d102      	bne.n	800b5c0 <UART_SetConfig+0x120>
 800b5ba:	2340      	movs	r3, #64	@ 0x40
 800b5bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5be:	e036      	b.n	800b62e <UART_SetConfig+0x18e>
 800b5c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	4b3e      	ldr	r3, [pc, #248]	@ (800b6c0 <UART_SetConfig+0x220>)
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d102      	bne.n	800b5d0 <UART_SetConfig+0x130>
 800b5ca:	2380      	movs	r3, #128	@ 0x80
 800b5cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5ce:	e02e      	b.n	800b62e <UART_SetConfig+0x18e>
 800b5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	4b3b      	ldr	r3, [pc, #236]	@ (800b6c4 <UART_SetConfig+0x224>)
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d103      	bne.n	800b5e2 <UART_SetConfig+0x142>
 800b5da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b5de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5e0:	e025      	b.n	800b62e <UART_SetConfig+0x18e>
 800b5e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	4b38      	ldr	r3, [pc, #224]	@ (800b6c8 <UART_SetConfig+0x228>)
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d103      	bne.n	800b5f4 <UART_SetConfig+0x154>
 800b5ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5f2:	e01c      	b.n	800b62e <UART_SetConfig+0x18e>
 800b5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	4b34      	ldr	r3, [pc, #208]	@ (800b6cc <UART_SetConfig+0x22c>)
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d103      	bne.n	800b606 <UART_SetConfig+0x166>
 800b5fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b602:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b604:	e013      	b.n	800b62e <UART_SetConfig+0x18e>
 800b606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	4b31      	ldr	r3, [pc, #196]	@ (800b6d0 <UART_SetConfig+0x230>)
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d103      	bne.n	800b618 <UART_SetConfig+0x178>
 800b610:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b614:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b616:	e00a      	b.n	800b62e <UART_SetConfig+0x18e>
 800b618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	4b1e      	ldr	r3, [pc, #120]	@ (800b698 <UART_SetConfig+0x1f8>)
 800b61e:	429a      	cmp	r2, r3
 800b620:	d103      	bne.n	800b62a <UART_SetConfig+0x18a>
 800b622:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b626:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b628:	e001      	b.n	800b62e <UART_SetConfig+0x18e>
 800b62a:	2300      	movs	r3, #0
 800b62c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b630:	681a      	ldr	r2, [r3, #0]
 800b632:	4b19      	ldr	r3, [pc, #100]	@ (800b698 <UART_SetConfig+0x1f8>)
 800b634:	429a      	cmp	r2, r3
 800b636:	d005      	beq.n	800b644 <UART_SetConfig+0x1a4>
 800b638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b63a:	681a      	ldr	r2, [r3, #0]
 800b63c:	4b18      	ldr	r3, [pc, #96]	@ (800b6a0 <UART_SetConfig+0x200>)
 800b63e:	429a      	cmp	r2, r3
 800b640:	f040 8094 	bne.w	800b76c <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b646:	2200      	movs	r2, #0
 800b648:	623b      	str	r3, [r7, #32]
 800b64a:	627a      	str	r2, [r7, #36]	@ 0x24
 800b64c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800b650:	f7fc fcf0 	bl	8008034 <HAL_RCCEx_GetPeriphCLKFreq>
 800b654:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800b656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b658:	2b00      	cmp	r3, #0
 800b65a:	f000 80f7 	beq.w	800b84c <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b662:	4a1c      	ldr	r2, [pc, #112]	@ (800b6d4 <UART_SetConfig+0x234>)
 800b664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b668:	461a      	mov	r2, r3
 800b66a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b66c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b670:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	4613      	mov	r3, r2
 800b678:	005b      	lsls	r3, r3, #1
 800b67a:	4413      	add	r3, r2
 800b67c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b67e:	429a      	cmp	r2, r3
 800b680:	d305      	bcc.n	800b68e <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b684:	685b      	ldr	r3, [r3, #4]
 800b686:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b688:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d924      	bls.n	800b6d8 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b694:	e069      	b.n	800b76a <UART_SetConfig+0x2ca>
 800b696:	bf00      	nop
 800b698:	44002400 	.word	0x44002400
 800b69c:	cfff69f3 	.word	0xcfff69f3
 800b6a0:	54002400 	.word	0x54002400
 800b6a4:	40013800 	.word	0x40013800
 800b6a8:	40004400 	.word	0x40004400
 800b6ac:	40004800 	.word	0x40004800
 800b6b0:	40004c00 	.word	0x40004c00
 800b6b4:	40005000 	.word	0x40005000
 800b6b8:	40006400 	.word	0x40006400
 800b6bc:	40007800 	.word	0x40007800
 800b6c0:	40007c00 	.word	0x40007c00
 800b6c4:	40008000 	.word	0x40008000
 800b6c8:	40006800 	.word	0x40006800
 800b6cc:	40006c00 	.word	0x40006c00
 800b6d0:	40008400 	.word	0x40008400
 800b6d4:	080118b8 	.word	0x080118b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b6da:	2200      	movs	r2, #0
 800b6dc:	61bb      	str	r3, [r7, #24]
 800b6de:	61fa      	str	r2, [r7, #28]
 800b6e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6e4:	4a64      	ldr	r2, [pc, #400]	@ (800b878 <UART_SetConfig+0x3d8>)
 800b6e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	613b      	str	r3, [r7, #16]
 800b6f0:	617a      	str	r2, [r7, #20]
 800b6f2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b6f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800b6fa:	f7f4 fdc7 	bl	800028c <__aeabi_uldivmod>
 800b6fe:	4602      	mov	r2, r0
 800b700:	460b      	mov	r3, r1
 800b702:	4610      	mov	r0, r2
 800b704:	4619      	mov	r1, r3
 800b706:	f04f 0200 	mov.w	r2, #0
 800b70a:	f04f 0300 	mov.w	r3, #0
 800b70e:	020b      	lsls	r3, r1, #8
 800b710:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b714:	0202      	lsls	r2, r0, #8
 800b716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b718:	6849      	ldr	r1, [r1, #4]
 800b71a:	0849      	lsrs	r1, r1, #1
 800b71c:	2000      	movs	r0, #0
 800b71e:	460c      	mov	r4, r1
 800b720:	4605      	mov	r5, r0
 800b722:	eb12 0804 	adds.w	r8, r2, r4
 800b726:	eb43 0905 	adc.w	r9, r3, r5
 800b72a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	60bb      	str	r3, [r7, #8]
 800b732:	60fa      	str	r2, [r7, #12]
 800b734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b738:	4640      	mov	r0, r8
 800b73a:	4649      	mov	r1, r9
 800b73c:	f7f4 fda6 	bl	800028c <__aeabi_uldivmod>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4613      	mov	r3, r2
 800b746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b74a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b74e:	d308      	bcc.n	800b762 <UART_SetConfig+0x2c2>
 800b750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b756:	d204      	bcs.n	800b762 <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800b758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800b75e:	60da      	str	r2, [r3, #12]
 800b760:	e003      	b.n	800b76a <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800b768:	e070      	b.n	800b84c <UART_SetConfig+0x3ac>
 800b76a:	e06f      	b.n	800b84c <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b76e:	69db      	ldr	r3, [r3, #28]
 800b770:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b774:	d13c      	bne.n	800b7f0 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b778:	2200      	movs	r2, #0
 800b77a:	603b      	str	r3, [r7, #0]
 800b77c:	607a      	str	r2, [r7, #4]
 800b77e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b782:	f7fc fc57 	bl	8008034 <HAL_RCCEx_GetPeriphCLKFreq>
 800b786:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b788:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d05e      	beq.n	800b84c <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b792:	4a39      	ldr	r2, [pc, #228]	@ (800b878 <UART_SetConfig+0x3d8>)
 800b794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b798:	461a      	mov	r2, r3
 800b79a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b79c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7a0:	005a      	lsls	r2, r3, #1
 800b7a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	085b      	lsrs	r3, r3, #1
 800b7a8:	441a      	add	r2, r3
 800b7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7ac:	685b      	ldr	r3, [r3, #4]
 800b7ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7b6:	2b0f      	cmp	r3, #15
 800b7b8:	d916      	bls.n	800b7e8 <UART_SetConfig+0x348>
 800b7ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7c0:	d212      	bcs.n	800b7e8 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7c4:	b29b      	uxth	r3, r3
 800b7c6:	f023 030f 	bic.w	r3, r3, #15
 800b7ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ce:	085b      	lsrs	r3, r3, #1
 800b7d0:	b29b      	uxth	r3, r3
 800b7d2:	f003 0307 	and.w	r3, r3, #7
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800b7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800b7e4:	60da      	str	r2, [r3, #12]
 800b7e6:	e031      	b.n	800b84c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800b7ee:	e02d      	b.n	800b84c <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b7f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	469a      	mov	sl, r3
 800b7f6:	4693      	mov	fp, r2
 800b7f8:	4650      	mov	r0, sl
 800b7fa:	4659      	mov	r1, fp
 800b7fc:	f7fc fc1a 	bl	8008034 <HAL_RCCEx_GetPeriphCLKFreq>
 800b800:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800b802:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b804:	2b00      	cmp	r3, #0
 800b806:	d021      	beq.n	800b84c <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b80c:	4a1a      	ldr	r2, [pc, #104]	@ (800b878 <UART_SetConfig+0x3d8>)
 800b80e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b812:	461a      	mov	r2, r3
 800b814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b816:	fbb3 f2f2 	udiv	r2, r3, r2
 800b81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b81c:	685b      	ldr	r3, [r3, #4]
 800b81e:	085b      	lsrs	r3, r3, #1
 800b820:	441a      	add	r2, r3
 800b822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	fbb2 f3f3 	udiv	r3, r2, r3
 800b82a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b82c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b82e:	2b0f      	cmp	r3, #15
 800b830:	d909      	bls.n	800b846 <UART_SetConfig+0x3a6>
 800b832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b838:	d205      	bcs.n	800b846 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b83a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b83c:	b29a      	uxth	r2, r3
 800b83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	60da      	str	r2, [r3, #12]
 800b844:	e002      	b.n	800b84c <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b84c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b84e:	2201      	movs	r2, #1
 800b850:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b856:	2201      	movs	r2, #1
 800b858:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b85e:	2200      	movs	r2, #0
 800b860:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b864:	2200      	movs	r2, #0
 800b866:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b868:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3750      	adds	r7, #80	@ 0x50
 800b870:	46bd      	mov	sp, r7
 800b872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b876:	bf00      	nop
 800b878:	080118b8 	.word	0x080118b8

0800b87c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b888:	f003 0308 	and.w	r3, r3, #8
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00a      	beq.n	800b8a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	430a      	orrs	r2, r1
 800b8a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8aa:	f003 0301 	and.w	r3, r3, #1
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d00a      	beq.n	800b8c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	685b      	ldr	r3, [r3, #4]
 800b8b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	430a      	orrs	r2, r1
 800b8c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8cc:	f003 0302 	and.w	r3, r3, #2
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00a      	beq.n	800b8ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	430a      	orrs	r2, r1
 800b8e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8ee:	f003 0304 	and.w	r3, r3, #4
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00a      	beq.n	800b90c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	430a      	orrs	r2, r1
 800b90a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b910:	f003 0310 	and.w	r3, r3, #16
 800b914:	2b00      	cmp	r3, #0
 800b916:	d00a      	beq.n	800b92e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	430a      	orrs	r2, r1
 800b92c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b932:	f003 0320 	and.w	r3, r3, #32
 800b936:	2b00      	cmp	r3, #0
 800b938:	d00a      	beq.n	800b950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	689b      	ldr	r3, [r3, #8]
 800b940:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	430a      	orrs	r2, r1
 800b94e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d01a      	beq.n	800b992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	430a      	orrs	r2, r1
 800b970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b97a:	d10a      	bne.n	800b992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	430a      	orrs	r2, r1
 800b990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00a      	beq.n	800b9b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	685b      	ldr	r3, [r3, #4]
 800b9a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	430a      	orrs	r2, r1
 800b9b2:	605a      	str	r2, [r3, #4]
  }
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b098      	sub	sp, #96	@ 0x60
 800b9c4:	af02      	add	r7, sp, #8
 800b9c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b9d0:	f7f6 fdae 	bl	8002530 <HAL_GetTick>
 800b9d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 0308 	and.w	r3, r3, #8
 800b9e0:	2b08      	cmp	r3, #8
 800b9e2:	d12f      	bne.n	800ba44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 f88e 	bl	800bb14 <UART_WaitOnFlagUntilTimeout>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d022      	beq.n	800ba44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba06:	e853 3f00 	ldrex	r3, [r3]
 800ba0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ba0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ba12:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	461a      	mov	r2, r3
 800ba1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ba1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ba22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ba24:	e841 2300 	strex	r3, r2, [r1]
 800ba28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ba2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d1e6      	bne.n	800b9fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2220      	movs	r2, #32
 800ba34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba40:	2303      	movs	r3, #3
 800ba42:	e063      	b.n	800bb0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f003 0304 	and.w	r3, r3, #4
 800ba4e:	2b04      	cmp	r3, #4
 800ba50:	d149      	bne.n	800bae6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 f857 	bl	800bb14 <UART_WaitOnFlagUntilTimeout>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d03c      	beq.n	800bae6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba74:	e853 3f00 	ldrex	r3, [r3]
 800ba78:	623b      	str	r3, [r7, #32]
   return(result);
 800ba7a:	6a3b      	ldr	r3, [r7, #32]
 800ba7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	461a      	mov	r2, r3
 800ba88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba8a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba92:	e841 2300 	strex	r3, r2, [r1]
 800ba96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1e6      	bne.n	800ba6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3308      	adds	r3, #8
 800baa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	e853 3f00 	ldrex	r3, [r3]
 800baac:	60fb      	str	r3, [r7, #12]
   return(result);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f023 0301 	bic.w	r3, r3, #1
 800bab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	3308      	adds	r3, #8
 800babc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800babe:	61fa      	str	r2, [r7, #28]
 800bac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac2:	69b9      	ldr	r1, [r7, #24]
 800bac4:	69fa      	ldr	r2, [r7, #28]
 800bac6:	e841 2300 	strex	r3, r2, [r1]
 800baca:	617b      	str	r3, [r7, #20]
   return(result);
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1e5      	bne.n	800ba9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2220      	movs	r2, #32
 800bad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2200      	movs	r2, #0
 800bade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bae2:	2303      	movs	r3, #3
 800bae4:	e012      	b.n	800bb0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2220      	movs	r2, #32
 800baea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2220      	movs	r2, #32
 800baf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb0a:	2300      	movs	r3, #0
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3758      	adds	r7, #88	@ 0x58
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	603b      	str	r3, [r7, #0]
 800bb20:	4613      	mov	r3, r2
 800bb22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb24:	e04f      	b.n	800bbc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb2c:	d04b      	beq.n	800bbc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb2e:	f7f6 fcff 	bl	8002530 <HAL_GetTick>
 800bb32:	4602      	mov	r2, r0
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	69ba      	ldr	r2, [r7, #24]
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d302      	bcc.n	800bb44 <UART_WaitOnFlagUntilTimeout+0x30>
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d101      	bne.n	800bb48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bb44:	2303      	movs	r3, #3
 800bb46:	e04e      	b.n	800bbe6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f003 0304 	and.w	r3, r3, #4
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d037      	beq.n	800bbc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	2b80      	cmp	r3, #128	@ 0x80
 800bb5a:	d034      	beq.n	800bbc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	2b40      	cmp	r3, #64	@ 0x40
 800bb60:	d031      	beq.n	800bbc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	69db      	ldr	r3, [r3, #28]
 800bb68:	f003 0308 	and.w	r3, r3, #8
 800bb6c:	2b08      	cmp	r3, #8
 800bb6e:	d110      	bne.n	800bb92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2208      	movs	r2, #8
 800bb76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bb78:	68f8      	ldr	r0, [r7, #12]
 800bb7a:	f000 f838 	bl	800bbee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2208      	movs	r2, #8
 800bb82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	e029      	b.n	800bbe6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	69db      	ldr	r3, [r3, #28]
 800bb98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bb9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bba0:	d111      	bne.n	800bbc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bbaa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f000 f81e 	bl	800bbee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2220      	movs	r2, #32
 800bbb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e00f      	b.n	800bbe6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	69da      	ldr	r2, [r3, #28]
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	4013      	ands	r3, r2
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	bf0c      	ite	eq
 800bbd6:	2301      	moveq	r3, #1
 800bbd8:	2300      	movne	r3, #0
 800bbda:	b2db      	uxtb	r3, r3
 800bbdc:	461a      	mov	r2, r3
 800bbde:	79fb      	ldrb	r3, [r7, #7]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d0a0      	beq.n	800bb26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbee:	b480      	push	{r7}
 800bbf0:	b095      	sub	sp, #84	@ 0x54
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbfe:	e853 3f00 	ldrex	r3, [r3]
 800bc02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	461a      	mov	r2, r3
 800bc12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc14:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc1c:	e841 2300 	strex	r3, r2, [r1]
 800bc20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d1e6      	bne.n	800bbf6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	3308      	adds	r3, #8
 800bc2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc30:	6a3b      	ldr	r3, [r7, #32]
 800bc32:	e853 3f00 	ldrex	r3, [r3]
 800bc36:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc3e:	f023 0301 	bic.w	r3, r3, #1
 800bc42:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	3308      	adds	r3, #8
 800bc4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc54:	e841 2300 	strex	r3, r2, [r1]
 800bc58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d1e3      	bne.n	800bc28 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d118      	bne.n	800bc9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	e853 3f00 	ldrex	r3, [r3]
 800bc74:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	f023 0310 	bic.w	r3, r3, #16
 800bc7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	461a      	mov	r2, r3
 800bc84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc86:	61bb      	str	r3, [r7, #24]
 800bc88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8a:	6979      	ldr	r1, [r7, #20]
 800bc8c:	69ba      	ldr	r2, [r7, #24]
 800bc8e:	e841 2300 	strex	r3, r2, [r1]
 800bc92:	613b      	str	r3, [r7, #16]
   return(result);
 800bc94:	693b      	ldr	r3, [r7, #16]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d1e6      	bne.n	800bc68 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2220      	movs	r2, #32
 800bc9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bcae:	bf00      	nop
 800bcb0:	3754      	adds	r7, #84	@ 0x54
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bcba:	b480      	push	{r7}
 800bcbc:	b085      	sub	sp, #20
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d101      	bne.n	800bcd0 <HAL_UARTEx_DisableFifoMode+0x16>
 800bccc:	2302      	movs	r3, #2
 800bcce:	e027      	b.n	800bd20 <HAL_UARTEx_DisableFifoMode+0x66>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2224      	movs	r2, #36	@ 0x24
 800bcdc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f022 0201 	bic.w	r2, r2, #1
 800bcf6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bcfe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2220      	movs	r2, #32
 800bd12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2200      	movs	r2, #0
 800bd1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3714      	adds	r7, #20
 800bd24:	46bd      	mov	sp, r7
 800bd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2a:	4770      	bx	lr

0800bd2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d101      	bne.n	800bd44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bd40:	2302      	movs	r3, #2
 800bd42:	e02d      	b.n	800bda0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2224      	movs	r2, #36	@ 0x24
 800bd50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f022 0201 	bic.w	r2, r2, #1
 800bd6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	689b      	ldr	r3, [r3, #8]
 800bd72:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	683a      	ldr	r2, [r7, #0]
 800bd7c:	430a      	orrs	r2, r1
 800bd7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f000 f84f 	bl	800be24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68fa      	ldr	r2, [r7, #12]
 800bd8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2220      	movs	r2, #32
 800bd92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
 800bdb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d101      	bne.n	800bdc0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bdbc:	2302      	movs	r3, #2
 800bdbe:	e02d      	b.n	800be1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2224      	movs	r2, #36	@ 0x24
 800bdcc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	681a      	ldr	r2, [r3, #0]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f022 0201 	bic.w	r2, r2, #1
 800bde6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	430a      	orrs	r2, r1
 800bdfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 f811 	bl	800be24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2220      	movs	r2, #32
 800be0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800be1a:	2300      	movs	r3, #0
}
 800be1c:	4618      	mov	r0, r3
 800be1e:	3710      	adds	r7, #16
 800be20:	46bd      	mov	sp, r7
 800be22:	bd80      	pop	{r7, pc}

0800be24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800be30:	2b00      	cmp	r3, #0
 800be32:	d108      	bne.n	800be46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2201      	movs	r2, #1
 800be38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800be44:	e031      	b.n	800beaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800be46:	2308      	movs	r3, #8
 800be48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800be4a:	2308      	movs	r3, #8
 800be4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	0e5b      	lsrs	r3, r3, #25
 800be56:	b2db      	uxtb	r3, r3
 800be58:	f003 0307 	and.w	r3, r3, #7
 800be5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	0f5b      	lsrs	r3, r3, #29
 800be66:	b2db      	uxtb	r3, r3
 800be68:	f003 0307 	and.w	r3, r3, #7
 800be6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be6e:	7bbb      	ldrb	r3, [r7, #14]
 800be70:	7b3a      	ldrb	r2, [r7, #12]
 800be72:	4911      	ldr	r1, [pc, #68]	@ (800beb8 <UARTEx_SetNbDataToProcess+0x94>)
 800be74:	5c8a      	ldrb	r2, [r1, r2]
 800be76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be7a:	7b3a      	ldrb	r2, [r7, #12]
 800be7c:	490f      	ldr	r1, [pc, #60]	@ (800bebc <UARTEx_SetNbDataToProcess+0x98>)
 800be7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be80:	fb93 f3f2 	sdiv	r3, r3, r2
 800be84:	b29a      	uxth	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be8c:	7bfb      	ldrb	r3, [r7, #15]
 800be8e:	7b7a      	ldrb	r2, [r7, #13]
 800be90:	4909      	ldr	r1, [pc, #36]	@ (800beb8 <UARTEx_SetNbDataToProcess+0x94>)
 800be92:	5c8a      	ldrb	r2, [r1, r2]
 800be94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be98:	7b7a      	ldrb	r2, [r7, #13]
 800be9a:	4908      	ldr	r1, [pc, #32]	@ (800bebc <UARTEx_SetNbDataToProcess+0x98>)
 800be9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800beaa:	bf00      	nop
 800beac:	3714      	adds	r7, #20
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	080118d0 	.word	0x080118d0
 800bebc:	080118d8 	.word	0x080118d8

0800bec0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800becc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bed8:	f043 0201 	orr.w	r2, r3, #1
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	370c      	adds	r7, #12
 800bee6:	46bd      	mov	sp, r7
 800bee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beec:	4770      	bx	lr

0800beee <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800beee:	b084      	sub	sp, #16
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b084      	sub	sp, #16
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
 800bef8:	f107 001c 	add.w	r0, r7, #28
 800befc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d101      	bne.n	800bf0a <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e008      	b.n	800bf1c <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f7ff ffd8 	bl	800bec0 <USB_CoreReset>
 800bf10:	4603      	mov	r3, r0
 800bf12:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800bf1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3710      	adds	r7, #16
 800bf20:	46bd      	mov	sp, r7
 800bf22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf26:	b004      	add	sp, #16
 800bf28:	4770      	bx	lr

0800bf2a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bf2a:	b480      	push	{r7}
 800bf2c:	b085      	sub	sp, #20
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bf38:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bf3c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bf44:	2300      	movs	r3, #0
}
 800bf46:	4618      	mov	r0, r3
 800bf48:	3714      	adds	r7, #20
 800bf4a:	46bd      	mov	sp, r7
 800bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf50:	4770      	bx	lr

0800bf52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800bf52:	b480      	push	{r7}
 800bf54:	b085      	sub	sp, #20
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bf5a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bf5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	43db      	mvns	r3, r3
 800bf68:	401a      	ands	r2, r3
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3714      	adds	r7, #20
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b083      	sub	sp, #12
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	460b      	mov	r3, r1
 800bf86:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800bf88:	78fb      	ldrb	r3, [r7, #3]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d106      	bne.n	800bf9c <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	641a      	str	r2, [r3, #64]	@ 0x40
 800bf9a:	e00b      	b.n	800bfb4 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800bf9c:	78fb      	ldrb	r3, [r7, #3]
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d106      	bne.n	800bfb0 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfa6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	641a      	str	r2, [r3, #64]	@ 0x40
 800bfae:	e001      	b.n	800bfb4 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	e000      	b.n	800bfb6 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800bfb4:	2300      	movs	r3, #0
}
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	370c      	adds	r7, #12
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc0:	4770      	bx	lr

0800bfc2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800bfc2:	b084      	sub	sp, #16
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	f107 001c 	add.w	r0, r7, #28
 800bfd0:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfde:	f023 0201 	bic.w	r2, r3, #1
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800bfe6:	2100      	movs	r1, #0
 800bfe8:	6878      	ldr	r0, [r7, #4]
 800bfea:	f7ff ffc7 	bl	800bf7c <USB_SetCurrentMode>
 800bfee:	4603      	mov	r3, r0
 800bff0:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2200      	movs	r2, #0
 800bff6:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800bff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c004:	b004      	add	sp, #16
 800c006:	4770      	bx	lr

0800c008 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c008:	b480      	push	{r7}
 800c00a:	b09f      	sub	sp, #124	@ 0x7c
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c012:	2300      	movs	r3, #0
 800c014:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	781b      	ldrb	r3, [r3, #0]
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	4413      	add	r3, r2
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	4ba0      	ldr	r3, [pc, #640]	@ (800c2a8 <USB_ActivateEndpoint+0x2a0>)
 800c026:	4013      	ands	r3, r2
 800c028:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	78db      	ldrb	r3, [r3, #3]
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d819      	bhi.n	800c066 <USB_ActivateEndpoint+0x5e>
 800c032:	a201      	add	r2, pc, #4	@ (adr r2, 800c038 <USB_ActivateEndpoint+0x30>)
 800c034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c038:	0800c049 	.word	0x0800c049
 800c03c:	0800c05d 	.word	0x0800c05d
 800c040:	0800c06f 	.word	0x0800c06f
 800c044:	0800c053 	.word	0x0800c053
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c048:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c04a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c04e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c050:	e00e      	b.n	800c070 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c052:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c054:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c058:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c05a:	e009      	b.n	800c070 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c05c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c05e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c062:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c064:	e004      	b.n	800c070 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800c066:	2301      	movs	r3, #1
 800c068:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800c06c:	e000      	b.n	800c070 <USB_ActivateEndpoint+0x68>
      break;
 800c06e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	441a      	add	r2, r3
 800c07a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c07c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c080:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c084:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c086:	687a      	ldr	r2, [r7, #4]
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	4413      	add	r3, r2
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	4b86      	ldr	r3, [pc, #536]	@ (800c2ac <USB_ActivateEndpoint+0x2a4>)
 800c094:	4013      	ands	r3, r2
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	7812      	ldrb	r2, [r2, #0]
 800c09a:	4313      	orrs	r3, r2
 800c09c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	441a      	add	r2, r3
 800c0a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0b2:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	7b1b      	ldrb	r3, [r3, #12]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f040 8177 	bne.w	800c3ac <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	785b      	ldrb	r3, [r3, #1]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d079      	beq.n	800c1ba <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0d4:	681a      	ldr	r2, [r3, #0]
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0e4:	0c12      	lsrs	r2, r2, #16
 800c0e6:	0412      	lsls	r2, r2, #16
 800c0e8:	601a      	str	r2, [r3, #0]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	00db      	lsls	r3, r3, #3
 800c0f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0f8:	6819      	ldr	r1, [r3, #0]
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	88db      	ldrh	r3, [r3, #6]
 800c0fe:	089b      	lsrs	r3, r3, #2
 800c100:	b29b      	uxth	r3, r3
 800c102:	009a      	lsls	r2, r3, #2
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	00db      	lsls	r3, r3, #3
 800c10a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c10e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c112:	430a      	orrs	r2, r1
 800c114:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	61bb      	str	r3, [r7, #24]
 800c124:	69bb      	ldr	r3, [r7, #24]
 800c126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d013      	beq.n	800c156 <USB_ActivateEndpoint+0x14e>
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	4413      	add	r3, r2
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	4b5c      	ldr	r3, [pc, #368]	@ (800c2ac <USB_ActivateEndpoint+0x2a4>)
 800c13c:	4013      	ands	r3, r2
 800c13e:	617b      	str	r3, [r7, #20]
 800c140:	687a      	ldr	r2, [r7, #4]
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	441a      	add	r2, r3
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c150:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c154:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	78db      	ldrb	r3, [r3, #3]
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d018      	beq.n	800c190 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	4413      	add	r3, r2
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	4b51      	ldr	r3, [pc, #324]	@ (800c2b0 <USB_ActivateEndpoint+0x2a8>)
 800c16c:	4013      	ands	r3, r2
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f083 0320 	eor.w	r3, r3, #32
 800c176:	60fb      	str	r3, [r7, #12]
 800c178:	687a      	ldr	r2, [r7, #4]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	441a      	add	r2, r3
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c18c:	6013      	str	r3, [r2, #0]
 800c18e:	e28c      	b.n	800c6aa <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c190:	687a      	ldr	r2, [r7, #4]
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	781b      	ldrb	r3, [r3, #0]
 800c196:	009b      	lsls	r3, r3, #2
 800c198:	4413      	add	r3, r2
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	4b44      	ldr	r3, [pc, #272]	@ (800c2b0 <USB_ActivateEndpoint+0x2a8>)
 800c19e:	4013      	ands	r3, r2
 800c1a0:	613b      	str	r3, [r7, #16]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	441a      	add	r2, r3
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1b6:	6013      	str	r3, [r2, #0]
 800c1b8:	e277      	b.n	800c6aa <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	00db      	lsls	r3, r3, #3
 800c1c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1c8:	685a      	ldr	r2, [r3, #4]
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	00db      	lsls	r3, r3, #3
 800c1d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1d8:	0c12      	lsrs	r2, r2, #16
 800c1da:	0412      	lsls	r2, r2, #16
 800c1dc:	605a      	str	r2, [r3, #4]
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	00db      	lsls	r3, r3, #3
 800c1e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1ec:	6859      	ldr	r1, [r3, #4]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	88db      	ldrh	r3, [r3, #6]
 800c1f2:	089b      	lsrs	r3, r3, #2
 800c1f4:	b29b      	uxth	r3, r3
 800c1f6:	009a      	lsls	r2, r3, #2
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	00db      	lsls	r3, r3, #3
 800c1fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c202:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c206:	430a      	orrs	r2, r1
 800c208:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	781b      	ldrb	r3, [r3, #0]
 800c20e:	00db      	lsls	r3, r3, #3
 800c210:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c214:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c218:	685a      	ldr	r2, [r3, #4]
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	781b      	ldrb	r3, [r3, #0]
 800c21e:	00db      	lsls	r3, r3, #3
 800c220:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c224:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c228:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c22c:	605a      	str	r2, [r3, #4]
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d112      	bne.n	800c25c <USB_ActivateEndpoint+0x254>
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	781b      	ldrb	r3, [r3, #0]
 800c23a:	00db      	lsls	r3, r3, #3
 800c23c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c240:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c244:	685a      	ldr	r2, [r3, #4]
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	00db      	lsls	r3, r3, #3
 800c24c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c250:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c254:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c258:	605a      	str	r2, [r3, #4]
 800c25a:	e04d      	b.n	800c2f8 <USB_ActivateEndpoint+0x2f0>
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	691b      	ldr	r3, [r3, #16]
 800c260:	2b3e      	cmp	r3, #62	@ 0x3e
 800c262:	d827      	bhi.n	800c2b4 <USB_ActivateEndpoint+0x2ac>
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	691b      	ldr	r3, [r3, #16]
 800c268:	085b      	lsrs	r3, r3, #1
 800c26a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	691b      	ldr	r3, [r3, #16]
 800c270:	f003 0301 	and.w	r3, r3, #1
 800c274:	2b00      	cmp	r3, #0
 800c276:	d002      	beq.n	800c27e <USB_ActivateEndpoint+0x276>
 800c278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c27a:	3301      	adds	r3, #1
 800c27c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c288:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c28c:	6859      	ldr	r1, [r3, #4]
 800c28e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c290:	069a      	lsls	r2, r3, #26
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c29c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2a0:	430a      	orrs	r2, r1
 800c2a2:	605a      	str	r2, [r3, #4]
 800c2a4:	e028      	b.n	800c2f8 <USB_ActivateEndpoint+0x2f0>
 800c2a6:	bf00      	nop
 800c2a8:	07ff898f 	.word	0x07ff898f
 800c2ac:	07ff8f8f 	.word	0x07ff8f8f
 800c2b0:	07ff8fbf 	.word	0x07ff8fbf
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	691b      	ldr	r3, [r3, #16]
 800c2b8:	095b      	lsrs	r3, r3, #5
 800c2ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	691b      	ldr	r3, [r3, #16]
 800c2c0:	f003 031f 	and.w	r3, r3, #31
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d102      	bne.n	800c2ce <USB_ActivateEndpoint+0x2c6>
 800c2c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	00db      	lsls	r3, r3, #3
 800c2d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2dc:	685a      	ldr	r2, [r3, #4]
 800c2de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2e0:	069b      	lsls	r3, r3, #26
 800c2e2:	431a      	orrs	r2, r3
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	781b      	ldrb	r3, [r3, #0]
 800c2e8:	00db      	lsls	r3, r3, #3
 800c2ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2f2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c2f6:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c2f8:	687a      	ldr	r2, [r7, #4]
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	781b      	ldrb	r3, [r3, #0]
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	4413      	add	r3, r2
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c308:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d013      	beq.n	800c338 <USB_ActivateEndpoint+0x330>
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	009b      	lsls	r3, r3, #2
 800c318:	4413      	add	r3, r2
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	4b9c      	ldr	r3, [pc, #624]	@ (800c590 <USB_ActivateEndpoint+0x588>)
 800c31e:	4013      	ands	r3, r2
 800c320:	627b      	str	r3, [r7, #36]	@ 0x24
 800c322:	687a      	ldr	r2, [r7, #4]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	781b      	ldrb	r3, [r3, #0]
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	441a      	add	r2, r3
 800c32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c336:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d11c      	bne.n	800c37a <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4413      	add	r3, r2
 800c34a:	681a      	ldr	r2, [r3, #0]
 800c34c:	4b91      	ldr	r3, [pc, #580]	@ (800c594 <USB_ActivateEndpoint+0x58c>)
 800c34e:	4013      	ands	r3, r2
 800c350:	61fb      	str	r3, [r7, #28]
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c358:	61fb      	str	r3, [r7, #28]
 800c35a:	69fb      	ldr	r3, [r7, #28]
 800c35c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c360:	61fb      	str	r3, [r7, #28]
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	441a      	add	r2, r3
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c376:	6013      	str	r3, [r2, #0]
 800c378:	e197      	b.n	800c6aa <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4413      	add	r3, r2
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	4b83      	ldr	r3, [pc, #524]	@ (800c594 <USB_ActivateEndpoint+0x58c>)
 800c388:	4013      	ands	r3, r2
 800c38a:	623b      	str	r3, [r7, #32]
 800c38c:	6a3b      	ldr	r3, [r7, #32]
 800c38e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c392:	623b      	str	r3, [r7, #32]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	441a      	add	r2, r3
 800c39e:	6a3b      	ldr	r3, [r7, #32]
 800c3a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3a8:	6013      	str	r3, [r2, #0]
 800c3aa:	e17e      	b.n	800c6aa <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	78db      	ldrb	r3, [r3, #3]
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	d114      	bne.n	800c3de <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	4413      	add	r3, r2
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	4b73      	ldr	r3, [pc, #460]	@ (800c590 <USB_ActivateEndpoint+0x588>)
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	663b      	str	r3, [r7, #96]	@ 0x60
 800c3c6:	687a      	ldr	r2, [r7, #4]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	441a      	add	r2, r3
 800c3d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3d2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c3d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3da:	6013      	str	r3, [r2, #0]
 800c3dc:	e013      	b.n	800c406 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c3de:	687a      	ldr	r2, [r7, #4]
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	781b      	ldrb	r3, [r3, #0]
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	4413      	add	r3, r2
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	4b6b      	ldr	r3, [pc, #428]	@ (800c598 <USB_ActivateEndpoint+0x590>)
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	667b      	str	r3, [r7, #100]	@ 0x64
 800c3f0:	687a      	ldr	r2, [r7, #4]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	009b      	lsls	r3, r3, #2
 800c3f8:	441a      	add	r2, r3
 800c3fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c3fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c404:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	00db      	lsls	r3, r3, #3
 800c40c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c410:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c414:	681a      	ldr	r2, [r3, #0]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	00db      	lsls	r3, r3, #3
 800c41c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c420:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c424:	0c12      	lsrs	r2, r2, #16
 800c426:	0412      	lsls	r2, r2, #16
 800c428:	601a      	str	r2, [r3, #0]
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	00db      	lsls	r3, r3, #3
 800c430:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c434:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c438:	6819      	ldr	r1, [r3, #0]
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	891b      	ldrh	r3, [r3, #8]
 800c43e:	089b      	lsrs	r3, r3, #2
 800c440:	b29b      	uxth	r3, r3
 800c442:	009a      	lsls	r2, r3, #2
 800c444:	683b      	ldr	r3, [r7, #0]
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	00db      	lsls	r3, r3, #3
 800c44a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c44e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c452:	430a      	orrs	r2, r1
 800c454:	601a      	str	r2, [r3, #0]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c460:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c464:	685a      	ldr	r2, [r3, #4]
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	00db      	lsls	r3, r3, #3
 800c46c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c470:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c474:	0c12      	lsrs	r2, r2, #16
 800c476:	0412      	lsls	r2, r2, #16
 800c478:	605a      	str	r2, [r3, #4]
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	00db      	lsls	r3, r3, #3
 800c480:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c484:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c488:	6859      	ldr	r1, [r3, #4]
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	895b      	ldrh	r3, [r3, #10]
 800c48e:	089b      	lsrs	r3, r3, #2
 800c490:	b29b      	uxth	r3, r3
 800c492:	009a      	lsls	r2, r3, #2
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	00db      	lsls	r3, r3, #3
 800c49a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c49e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4a2:	430a      	orrs	r2, r1
 800c4a4:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	785b      	ldrb	r3, [r3, #1]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d178      	bne.n	800c5a0 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	4413      	add	r3, r2
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800c4bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d013      	beq.n	800c4ee <USB_ActivateEndpoint+0x4e6>
 800c4c6:	687a      	ldr	r2, [r7, #4]
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	4413      	add	r3, r2
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	4b2f      	ldr	r3, [pc, #188]	@ (800c590 <USB_ActivateEndpoint+0x588>)
 800c4d4:	4013      	ands	r3, r2
 800c4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	441a      	add	r2, r3
 800c4e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c4e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c4e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4ec:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	4413      	add	r3, r2
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c502:	2b00      	cmp	r3, #0
 800c504:	d013      	beq.n	800c52e <USB_ActivateEndpoint+0x526>
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	4413      	add	r3, r2
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	4b1f      	ldr	r3, [pc, #124]	@ (800c590 <USB_ActivateEndpoint+0x588>)
 800c514:	4013      	ands	r3, r2
 800c516:	637b      	str	r3, [r7, #52]	@ 0x34
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	441a      	add	r2, r3
 800c522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c524:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c528:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c52c:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	4413      	add	r3, r2
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	4b16      	ldr	r3, [pc, #88]	@ (800c594 <USB_ActivateEndpoint+0x58c>)
 800c53c:	4013      	ands	r3, r2
 800c53e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c542:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c546:	633b      	str	r3, [r7, #48]	@ 0x30
 800c548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c54e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	009b      	lsls	r3, r3, #2
 800c558:	441a      	add	r2, r3
 800c55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c55c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c560:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c564:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	4413      	add	r3, r2
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	4b0a      	ldr	r3, [pc, #40]	@ (800c59c <USB_ActivateEndpoint+0x594>)
 800c574:	4013      	ands	r3, r2
 800c576:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	441a      	add	r2, r3
 800c582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c584:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c588:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c58c:	6013      	str	r3, [r2, #0]
 800c58e:	e08c      	b.n	800c6aa <USB_ActivateEndpoint+0x6a2>
 800c590:	07ff8f8f 	.word	0x07ff8f8f
 800c594:	07ffbf8f 	.word	0x07ffbf8f
 800c598:	07ff8e8f 	.word	0x07ff8e8f
 800c59c:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	4413      	add	r3, r2
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c5ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c5b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d013      	beq.n	800c5e0 <USB_ActivateEndpoint+0x5d8>
 800c5b8:	687a      	ldr	r2, [r7, #4]
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4413      	add	r3, r2
 800c5c2:	681a      	ldr	r2, [r3, #0]
 800c5c4:	4b3d      	ldr	r3, [pc, #244]	@ (800c6bc <USB_ActivateEndpoint+0x6b4>)
 800c5c6:	4013      	ands	r3, r2
 800c5c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	441a      	add	r2, r3
 800c5d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c5d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c5da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5de:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	4413      	add	r3, r2
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	657b      	str	r3, [r7, #84]	@ 0x54
 800c5ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d013      	beq.n	800c620 <USB_ActivateEndpoint+0x618>
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	4413      	add	r3, r2
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	4b2d      	ldr	r3, [pc, #180]	@ (800c6bc <USB_ActivateEndpoint+0x6b4>)
 800c606:	4013      	ands	r3, r2
 800c608:	653b      	str	r3, [r7, #80]	@ 0x50
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	441a      	add	r2, r3
 800c614:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c61a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c61e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	78db      	ldrb	r3, [r3, #3]
 800c624:	2b01      	cmp	r3, #1
 800c626:	d018      	beq.n	800c65a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	009b      	lsls	r3, r3, #2
 800c630:	4413      	add	r3, r2
 800c632:	681a      	ldr	r2, [r3, #0]
 800c634:	4b22      	ldr	r3, [pc, #136]	@ (800c6c0 <USB_ActivateEndpoint+0x6b8>)
 800c636:	4013      	ands	r3, r2
 800c638:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c63a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c63c:	f083 0320 	eor.w	r3, r3, #32
 800c640:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	441a      	add	r2, r3
 800c64c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c64e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c656:	6013      	str	r3, [r2, #0]
 800c658:	e013      	b.n	800c682 <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4413      	add	r3, r2
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	4b16      	ldr	r3, [pc, #88]	@ (800c6c0 <USB_ActivateEndpoint+0x6b8>)
 800c668:	4013      	ands	r3, r2
 800c66a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	441a      	add	r2, r3
 800c676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c67c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c680:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	009b      	lsls	r3, r3, #2
 800c68a:	4413      	add	r3, r2
 800c68c:	681a      	ldr	r2, [r3, #0]
 800c68e:	4b0d      	ldr	r3, [pc, #52]	@ (800c6c4 <USB_ActivateEndpoint+0x6bc>)
 800c690:	4013      	ands	r3, r2
 800c692:	647b      	str	r3, [r7, #68]	@ 0x44
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	441a      	add	r2, r3
 800c69e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6a8:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c6aa:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	377c      	adds	r7, #124	@ 0x7c
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr
 800c6ba:	bf00      	nop
 800c6bc:	07ff8f8f 	.word	0x07ff8f8f
 800c6c0:	07ff8fbf 	.word	0x07ff8fbf
 800c6c4:	07ffbf8f 	.word	0x07ffbf8f

0800c6c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b097      	sub	sp, #92	@ 0x5c
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	7b1b      	ldrb	r3, [r3, #12]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d16d      	bne.n	800c7b6 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	785b      	ldrb	r3, [r3, #1]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d034      	beq.n	800c74c <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	009b      	lsls	r3, r3, #2
 800c6ea:	4413      	add	r3, r2
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	613b      	str	r3, [r7, #16]
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d013      	beq.n	800c722 <USB_DeactivateEndpoint+0x5a>
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	4413      	add	r3, r2
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	4b6d      	ldr	r3, [pc, #436]	@ (800c8bc <USB_DeactivateEndpoint+0x1f4>)
 800c708:	4013      	ands	r3, r2
 800c70a:	60fb      	str	r3, [r7, #12]
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	441a      	add	r2, r3
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c71c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c720:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	4413      	add	r3, r2
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	4b64      	ldr	r3, [pc, #400]	@ (800c8c0 <USB_DeactivateEndpoint+0x1f8>)
 800c730:	4013      	ands	r3, r2
 800c732:	60bb      	str	r3, [r7, #8]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	441a      	add	r2, r3
 800c73e:	68bb      	ldr	r3, [r7, #8]
 800c740:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c744:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c748:	6013      	str	r3, [r2, #0]
 800c74a:	e139      	b.n	800c9c0 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	4413      	add	r3, r2
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	61fb      	str	r3, [r7, #28]
 800c75a:	69fb      	ldr	r3, [r7, #28]
 800c75c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c760:	2b00      	cmp	r3, #0
 800c762:	d013      	beq.n	800c78c <USB_DeactivateEndpoint+0xc4>
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	4413      	add	r3, r2
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	4b52      	ldr	r3, [pc, #328]	@ (800c8bc <USB_DeactivateEndpoint+0x1f4>)
 800c772:	4013      	ands	r3, r2
 800c774:	61bb      	str	r3, [r7, #24]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	441a      	add	r2, r3
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c78a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c78c:	687a      	ldr	r2, [r7, #4]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4413      	add	r3, r2
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	4b4a      	ldr	r3, [pc, #296]	@ (800c8c4 <USB_DeactivateEndpoint+0x1fc>)
 800c79a:	4013      	ands	r3, r2
 800c79c:	617b      	str	r3, [r7, #20]
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	441a      	add	r2, r3
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7b2:	6013      	str	r3, [r2, #0]
 800c7b4:	e104      	b.n	800c9c0 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	785b      	ldrb	r3, [r3, #1]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f040 8084 	bne.w	800c8c8 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	683b      	ldr	r3, [r7, #0]
 800c7c4:	781b      	ldrb	r3, [r3, #0]
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4413      	add	r3, r2
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d013      	beq.n	800c800 <USB_DeactivateEndpoint+0x138>
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	4413      	add	r3, r2
 800c7e2:	681a      	ldr	r2, [r3, #0]
 800c7e4:	4b35      	ldr	r3, [pc, #212]	@ (800c8bc <USB_DeactivateEndpoint+0x1f4>)
 800c7e6:	4013      	ands	r3, r2
 800c7e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	441a      	add	r2, r3
 800c7f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c7fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7fe:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	4413      	add	r3, r2
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	633b      	str	r3, [r7, #48]	@ 0x30
 800c80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c814:	2b00      	cmp	r3, #0
 800c816:	d013      	beq.n	800c840 <USB_DeactivateEndpoint+0x178>
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	4413      	add	r3, r2
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	4b25      	ldr	r3, [pc, #148]	@ (800c8bc <USB_DeactivateEndpoint+0x1f4>)
 800c826:	4013      	ands	r3, r2
 800c828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	009b      	lsls	r3, r3, #2
 800c832:	441a      	add	r2, r3
 800c834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c83a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c83e:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	4413      	add	r3, r2
 800c84a:	681a      	ldr	r2, [r3, #0]
 800c84c:	4b1b      	ldr	r3, [pc, #108]	@ (800c8bc <USB_DeactivateEndpoint+0x1f4>)
 800c84e:	4013      	ands	r3, r2
 800c850:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	441a      	add	r2, r3
 800c85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c85e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c862:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c866:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	4413      	add	r3, r2
 800c872:	681a      	ldr	r2, [r3, #0]
 800c874:	4b13      	ldr	r3, [pc, #76]	@ (800c8c4 <USB_DeactivateEndpoint+0x1fc>)
 800c876:	4013      	ands	r3, r2
 800c878:	627b      	str	r3, [r7, #36]	@ 0x24
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	441a      	add	r2, r3
 800c884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c88a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c88e:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c890:	687a      	ldr	r2, [r7, #4]
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	4413      	add	r3, r2
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	4b08      	ldr	r3, [pc, #32]	@ (800c8c0 <USB_DeactivateEndpoint+0x1f8>)
 800c89e:	4013      	ands	r3, r2
 800c8a0:	623b      	str	r3, [r7, #32]
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	441a      	add	r2, r3
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8b6:	6013      	str	r3, [r2, #0]
 800c8b8:	e082      	b.n	800c9c0 <USB_DeactivateEndpoint+0x2f8>
 800c8ba:	bf00      	nop
 800c8bc:	07ff8f8f 	.word	0x07ff8f8f
 800c8c0:	07ff8fbf 	.word	0x07ff8fbf
 800c8c4:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	4413      	add	r3, r2
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	657b      	str	r3, [r7, #84]	@ 0x54
 800c8d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d013      	beq.n	800c908 <USB_DeactivateEndpoint+0x240>
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	009b      	lsls	r3, r3, #2
 800c8e8:	4413      	add	r3, r2
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	4b38      	ldr	r3, [pc, #224]	@ (800c9d0 <USB_DeactivateEndpoint+0x308>)
 800c8ee:	4013      	ands	r3, r2
 800c8f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	441a      	add	r2, r3
 800c8fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c8fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c906:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c908:	687a      	ldr	r2, [r7, #4]
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	009b      	lsls	r3, r3, #2
 800c910:	4413      	add	r3, r2
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d013      	beq.n	800c948 <USB_DeactivateEndpoint+0x280>
 800c920:	687a      	ldr	r2, [r7, #4]
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	4413      	add	r3, r2
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	4b28      	ldr	r3, [pc, #160]	@ (800c9d0 <USB_DeactivateEndpoint+0x308>)
 800c92e:	4013      	ands	r3, r2
 800c930:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c932:	687a      	ldr	r2, [r7, #4]
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	009b      	lsls	r3, r3, #2
 800c93a:	441a      	add	r2, r3
 800c93c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c93e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c942:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c946:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	4413      	add	r3, r2
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	4b1e      	ldr	r3, [pc, #120]	@ (800c9d0 <USB_DeactivateEndpoint+0x308>)
 800c956:	4013      	ands	r3, r2
 800c958:	647b      	str	r3, [r7, #68]	@ 0x44
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	009b      	lsls	r3, r3, #2
 800c962:	441a      	add	r2, r3
 800c964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c966:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c96a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c96e:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	4413      	add	r3, r2
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	4b15      	ldr	r3, [pc, #84]	@ (800c9d4 <USB_DeactivateEndpoint+0x30c>)
 800c97e:	4013      	ands	r3, r2
 800c980:	643b      	str	r3, [r7, #64]	@ 0x40
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	441a      	add	r2, r3
 800c98c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c98e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c996:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	4413      	add	r3, r2
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c9d8 <USB_DeactivateEndpoint+0x310>)
 800c9a6:	4013      	ands	r3, r2
 800c9a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	683b      	ldr	r3, [r7, #0]
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	009b      	lsls	r3, r3, #2
 800c9b2:	441a      	add	r2, r3
 800c9b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9be:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c9c0:	2300      	movs	r3, #0
}
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	375c      	adds	r7, #92	@ 0x5c
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	07ff8f8f 	.word	0x07ff8f8f
 800c9d4:	07ff8fbf 	.word	0x07ff8fbf
 800c9d8:	07ffbf8f 	.word	0x07ffbf8f

0800c9dc <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	b096      	sub	sp, #88	@ 0x58
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	785b      	ldrb	r3, [r3, #1]
 800c9ea:	2b01      	cmp	r3, #1
 800c9ec:	f040 84ed 	bne.w	800d3ca <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	699a      	ldr	r2, [r3, #24]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	691b      	ldr	r3, [r3, #16]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d903      	bls.n	800ca04 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	691b      	ldr	r3, [r3, #16]
 800ca00:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca02:	e002      	b.n	800ca0a <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	699b      	ldr	r3, [r3, #24]
 800ca08:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	7b1b      	ldrb	r3, [r3, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d12e      	bne.n	800ca70 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	6959      	ldr	r1, [r3, #20]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	88da      	ldrh	r2, [r3, #6]
 800ca1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f001 f963 	bl	800dcea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	00db      	lsls	r3, r3, #3
 800ca2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	00db      	lsls	r3, r3, #3
 800ca3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca42:	b292      	uxth	r2, r2
 800ca44:	601a      	str	r2, [r3, #0]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	781b      	ldrb	r3, [r3, #0]
 800ca4a:	00db      	lsls	r3, r3, #3
 800ca4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca54:	6819      	ldr	r1, [r3, #0]
 800ca56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca58:	041a      	lsls	r2, r3, #16
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	00db      	lsls	r3, r3, #3
 800ca60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca68:	430a      	orrs	r2, r1
 800ca6a:	601a      	str	r2, [r3, #0]
 800ca6c:	f000 bc90 	b.w	800d390 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	78db      	ldrb	r3, [r3, #3]
 800ca74:	2b02      	cmp	r3, #2
 800ca76:	f040 8332 	bne.w	800d0de <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	6a1a      	ldr	r2, [r3, #32]
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	691b      	ldr	r3, [r3, #16]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	f240 82e4 	bls.w	800d050 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	4413      	add	r3, r2
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	4ba4      	ldr	r3, [pc, #656]	@ (800cd28 <USB_EPStartXfer+0x34c>)
 800ca96:	4013      	ands	r3, r2
 800ca98:	613b      	str	r3, [r7, #16]
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	781b      	ldrb	r3, [r3, #0]
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	441a      	add	r2, r3
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800caaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caae:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cab0:	683b      	ldr	r3, [r7, #0]
 800cab2:	6a1a      	ldr	r2, [r3, #32]
 800cab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cab6:	1ad2      	subs	r2, r2, r3
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cabc:	687a      	ldr	r2, [r7, #4]
 800cabe:	683b      	ldr	r3, [r7, #0]
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	4413      	add	r3, r2
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f000 8161 	beq.w	800cd94 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	785b      	ldrb	r3, [r3, #1]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d16a      	bne.n	800cbb0 <USB_EPStartXfer+0x1d4>
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	00db      	lsls	r3, r3, #3
 800cae0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cae4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cae8:	685a      	ldr	r2, [r3, #4]
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	00db      	lsls	r3, r3, #3
 800caf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caf4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caf8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cafc:	605a      	str	r2, [r3, #4]
 800cafe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d112      	bne.n	800cb2a <USB_EPStartXfer+0x14e>
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	00db      	lsls	r3, r3, #3
 800cb0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb12:	685a      	ldr	r2, [r3, #4]
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	00db      	lsls	r3, r3, #3
 800cb1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb22:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cb26:	605a      	str	r2, [r3, #4]
 800cb28:	e06a      	b.n	800cc00 <USB_EPStartXfer+0x224>
 800cb2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb2c:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb2e:	d81e      	bhi.n	800cb6e <USB_EPStartXfer+0x192>
 800cb30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb32:	085b      	lsrs	r3, r3, #1
 800cb34:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb38:	f003 0301 	and.w	r3, r3, #1
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d002      	beq.n	800cb46 <USB_EPStartXfer+0x16a>
 800cb40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb42:	3301      	adds	r3, #1
 800cb44:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	00db      	lsls	r3, r3, #3
 800cb4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb54:	6859      	ldr	r1, [r3, #4]
 800cb56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb58:	069a      	lsls	r2, r3, #26
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb68:	430a      	orrs	r2, r1
 800cb6a:	605a      	str	r2, [r3, #4]
 800cb6c:	e048      	b.n	800cc00 <USB_EPStartXfer+0x224>
 800cb6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb70:	095b      	lsrs	r3, r3, #5
 800cb72:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb76:	f003 031f 	and.w	r3, r3, #31
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d102      	bne.n	800cb84 <USB_EPStartXfer+0x1a8>
 800cb7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb80:	3b01      	subs	r3, #1
 800cb82:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	00db      	lsls	r3, r3, #3
 800cb8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb92:	685a      	ldr	r2, [r3, #4]
 800cb94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb96:	069b      	lsls	r3, r3, #26
 800cb98:	431a      	orrs	r2, r3
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	00db      	lsls	r3, r3, #3
 800cba0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cba4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cba8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cbac:	605a      	str	r2, [r3, #4]
 800cbae:	e027      	b.n	800cc00 <USB_EPStartXfer+0x224>
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	785b      	ldrb	r3, [r3, #1]
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d123      	bne.n	800cc00 <USB_EPStartXfer+0x224>
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	00db      	lsls	r3, r3, #3
 800cbbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbc6:	685a      	ldr	r2, [r3, #4]
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	00db      	lsls	r3, r3, #3
 800cbce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbd6:	b292      	uxth	r2, r2
 800cbd8:	605a      	str	r2, [r3, #4]
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	00db      	lsls	r3, r3, #3
 800cbe0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbe4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbe8:	6859      	ldr	r1, [r3, #4]
 800cbea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbec:	041a      	lsls	r2, r3, #16
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	00db      	lsls	r3, r3, #3
 800cbf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbfc:	430a      	orrs	r2, r1
 800cbfe:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	895b      	ldrh	r3, [r3, #10]
 800cc04:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	6959      	ldr	r1, [r3, #20]
 800cc0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	8b7a      	ldrh	r2, [r7, #26]
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f001 f86a 	bl	800dcea <USB_WritePMA>
            ep->xfer_buff += len;
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	695a      	ldr	r2, [r3, #20]
 800cc1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc1c:	441a      	add	r2, r3
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	6a1a      	ldr	r2, [r3, #32]
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	d906      	bls.n	800cc3c <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	6a1a      	ldr	r2, [r3, #32]
 800cc32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc34:	1ad2      	subs	r2, r2, r3
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	621a      	str	r2, [r3, #32]
 800cc3a:	e005      	b.n	800cc48 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	6a1b      	ldr	r3, [r3, #32]
 800cc40:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	2200      	movs	r2, #0
 800cc46:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	785b      	ldrb	r3, [r3, #1]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d16d      	bne.n	800cd2c <USB_EPStartXfer+0x350>
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	00db      	lsls	r3, r3, #3
 800cc56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	00db      	lsls	r3, r3, #3
 800cc66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc6e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d112      	bne.n	800cca0 <USB_EPStartXfer+0x2c4>
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	00db      	lsls	r3, r3, #3
 800cc80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc98:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cc9c:	601a      	str	r2, [r3, #0]
 800cc9e:	e06d      	b.n	800cd7c <USB_EPStartXfer+0x3a0>
 800cca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cca2:	2b3e      	cmp	r3, #62	@ 0x3e
 800cca4:	d81e      	bhi.n	800cce4 <USB_EPStartXfer+0x308>
 800cca6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cca8:	085b      	lsrs	r3, r3, #1
 800ccaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccae:	f003 0301 	and.w	r3, r3, #1
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d002      	beq.n	800ccbc <USB_EPStartXfer+0x2e0>
 800ccb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccb8:	3301      	adds	r3, #1
 800ccba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	00db      	lsls	r3, r3, #3
 800ccc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccca:	6819      	ldr	r1, [r3, #0]
 800cccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccce:	069a      	lsls	r2, r3, #26
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	00db      	lsls	r3, r3, #3
 800ccd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccde:	430a      	orrs	r2, r1
 800cce0:	601a      	str	r2, [r3, #0]
 800cce2:	e04b      	b.n	800cd7c <USB_EPStartXfer+0x3a0>
 800cce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cce6:	095b      	lsrs	r3, r3, #5
 800cce8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccec:	f003 031f 	and.w	r3, r3, #31
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <USB_EPStartXfer+0x31e>
 800ccf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	00db      	lsls	r3, r3, #3
 800cd00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd08:	681a      	ldr	r2, [r3, #0]
 800cd0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cd0c:	069b      	lsls	r3, r3, #26
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	00db      	lsls	r3, r3, #3
 800cd16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd1e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd22:	601a      	str	r2, [r3, #0]
 800cd24:	e02a      	b.n	800cd7c <USB_EPStartXfer+0x3a0>
 800cd26:	bf00      	nop
 800cd28:	07ff8f8f 	.word	0x07ff8f8f
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	785b      	ldrb	r3, [r3, #1]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d123      	bne.n	800cd7c <USB_EPStartXfer+0x3a0>
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	00db      	lsls	r3, r3, #3
 800cd3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	00db      	lsls	r3, r3, #3
 800cd4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd52:	b292      	uxth	r2, r2
 800cd54:	601a      	str	r2, [r3, #0]
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	00db      	lsls	r3, r3, #3
 800cd5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd64:	6819      	ldr	r1, [r3, #0]
 800cd66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd68:	041a      	lsls	r2, r3, #16
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	00db      	lsls	r3, r3, #3
 800cd70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd78:	430a      	orrs	r2, r1
 800cd7a:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	891b      	ldrh	r3, [r3, #8]
 800cd80:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	6959      	ldr	r1, [r3, #20]
 800cd86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	8b7a      	ldrh	r2, [r7, #26]
 800cd8c:	6878      	ldr	r0, [r7, #4]
 800cd8e:	f000 ffac 	bl	800dcea <USB_WritePMA>
 800cd92:	e2fd      	b.n	800d390 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	785b      	ldrb	r3, [r3, #1]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d16a      	bne.n	800ce72 <USB_EPStartXfer+0x496>
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	00db      	lsls	r3, r3, #3
 800cda2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cda6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	00db      	lsls	r3, r3, #3
 800cdb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdba:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cdbe:	601a      	str	r2, [r3, #0]
 800cdc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d112      	bne.n	800cdec <USB_EPStartXfer+0x410>
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	00db      	lsls	r3, r3, #3
 800cdcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	781b      	ldrb	r3, [r3, #0]
 800cdda:	00db      	lsls	r3, r3, #3
 800cddc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cde0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cde4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cde8:	601a      	str	r2, [r3, #0]
 800cdea:	e06a      	b.n	800cec2 <USB_EPStartXfer+0x4e6>
 800cdec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdee:	2b3e      	cmp	r3, #62	@ 0x3e
 800cdf0:	d81e      	bhi.n	800ce30 <USB_EPStartXfer+0x454>
 800cdf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdf4:	085b      	lsrs	r3, r3, #1
 800cdf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cdf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdfa:	f003 0301 	and.w	r3, r3, #1
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d002      	beq.n	800ce08 <USB_EPStartXfer+0x42c>
 800ce02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce04:	3301      	adds	r3, #1
 800ce06:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	00db      	lsls	r3, r3, #3
 800ce0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce16:	6819      	ldr	r1, [r3, #0]
 800ce18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce1a:	069a      	lsls	r2, r3, #26
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	00db      	lsls	r3, r3, #3
 800ce22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce2a:	430a      	orrs	r2, r1
 800ce2c:	601a      	str	r2, [r3, #0]
 800ce2e:	e048      	b.n	800cec2 <USB_EPStartXfer+0x4e6>
 800ce30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce32:	095b      	lsrs	r3, r3, #5
 800ce34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce38:	f003 031f 	and.w	r3, r3, #31
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d102      	bne.n	800ce46 <USB_EPStartXfer+0x46a>
 800ce40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce42:	3b01      	subs	r3, #1
 800ce44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	781b      	ldrb	r3, [r3, #0]
 800ce4a:	00db      	lsls	r3, r3, #3
 800ce4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce58:	069b      	lsls	r3, r3, #26
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	00db      	lsls	r3, r3, #3
 800ce62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce6a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ce6e:	601a      	str	r2, [r3, #0]
 800ce70:	e027      	b.n	800cec2 <USB_EPStartXfer+0x4e6>
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	785b      	ldrb	r3, [r3, #1]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d123      	bne.n	800cec2 <USB_EPStartXfer+0x4e6>
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	00db      	lsls	r3, r3, #3
 800ce80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce88:	681a      	ldr	r2, [r3, #0]
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	00db      	lsls	r3, r3, #3
 800ce90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce98:	b292      	uxth	r2, r2
 800ce9a:	601a      	str	r2, [r3, #0]
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	00db      	lsls	r3, r3, #3
 800cea2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cea6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ceaa:	6819      	ldr	r1, [r3, #0]
 800ceac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ceae:	041a      	lsls	r2, r3, #16
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	00db      	lsls	r3, r3, #3
 800ceb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ceba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cebe:	430a      	orrs	r2, r1
 800cec0:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	891b      	ldrh	r3, [r3, #8]
 800cec6:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	6959      	ldr	r1, [r3, #20]
 800cecc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cece:	b29b      	uxth	r3, r3
 800ced0:	8b7a      	ldrh	r2, [r7, #26]
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 ff09 	bl	800dcea <USB_WritePMA>
            ep->xfer_buff += len;
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	695a      	ldr	r2, [r3, #20]
 800cedc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cede:	441a      	add	r2, r3
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	6a1a      	ldr	r2, [r3, #32]
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	691b      	ldr	r3, [r3, #16]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d906      	bls.n	800cefe <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	6a1a      	ldr	r2, [r3, #32]
 800cef4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cef6:	1ad2      	subs	r2, r2, r3
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	621a      	str	r2, [r3, #32]
 800cefc:	e005      	b.n	800cf0a <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	6a1b      	ldr	r3, [r3, #32]
 800cf02:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	2200      	movs	r2, #0
 800cf08:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	785b      	ldrb	r3, [r3, #1]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d16a      	bne.n	800cfe8 <USB_EPStartXfer+0x60c>
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	00db      	lsls	r3, r3, #3
 800cf18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf20:	685a      	ldr	r2, [r3, #4]
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	00db      	lsls	r3, r3, #3
 800cf28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf30:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cf34:	605a      	str	r2, [r3, #4]
 800cf36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d112      	bne.n	800cf62 <USB_EPStartXfer+0x586>
 800cf3c:	683b      	ldr	r3, [r7, #0]
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	00db      	lsls	r3, r3, #3
 800cf42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf4a:	685a      	ldr	r2, [r3, #4]
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	00db      	lsls	r3, r3, #3
 800cf52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf5a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cf5e:	605a      	str	r2, [r3, #4]
 800cf60:	e06a      	b.n	800d038 <USB_EPStartXfer+0x65c>
 800cf62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf64:	2b3e      	cmp	r3, #62	@ 0x3e
 800cf66:	d81e      	bhi.n	800cfa6 <USB_EPStartXfer+0x5ca>
 800cf68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf6a:	085b      	lsrs	r3, r3, #1
 800cf6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf70:	f003 0301 	and.w	r3, r3, #1
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d002      	beq.n	800cf7e <USB_EPStartXfer+0x5a2>
 800cf78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf7a:	3301      	adds	r3, #1
 800cf7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	00db      	lsls	r3, r3, #3
 800cf84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf8c:	6859      	ldr	r1, [r3, #4]
 800cf8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf90:	069a      	lsls	r2, r3, #26
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	781b      	ldrb	r3, [r3, #0]
 800cf96:	00db      	lsls	r3, r3, #3
 800cf98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfa0:	430a      	orrs	r2, r1
 800cfa2:	605a      	str	r2, [r3, #4]
 800cfa4:	e048      	b.n	800d038 <USB_EPStartXfer+0x65c>
 800cfa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfa8:	095b      	lsrs	r3, r3, #5
 800cfaa:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfae:	f003 031f 	and.w	r3, r3, #31
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d102      	bne.n	800cfbc <USB_EPStartXfer+0x5e0>
 800cfb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfb8:	3b01      	subs	r3, #1
 800cfba:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	781b      	ldrb	r3, [r3, #0]
 800cfc0:	00db      	lsls	r3, r3, #3
 800cfc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfca:	685a      	ldr	r2, [r3, #4]
 800cfcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfce:	069b      	lsls	r3, r3, #26
 800cfd0:	431a      	orrs	r2, r3
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	00db      	lsls	r3, r3, #3
 800cfd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfdc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfe0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cfe4:	605a      	str	r2, [r3, #4]
 800cfe6:	e027      	b.n	800d038 <USB_EPStartXfer+0x65c>
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	785b      	ldrb	r3, [r3, #1]
 800cfec:	2b01      	cmp	r3, #1
 800cfee:	d123      	bne.n	800d038 <USB_EPStartXfer+0x65c>
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	00db      	lsls	r3, r3, #3
 800cff6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cffa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cffe:	685a      	ldr	r2, [r3, #4]
 800d000:	683b      	ldr	r3, [r7, #0]
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	00db      	lsls	r3, r3, #3
 800d006:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d00a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d00e:	b292      	uxth	r2, r2
 800d010:	605a      	str	r2, [r3, #4]
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	00db      	lsls	r3, r3, #3
 800d018:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d01c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d020:	6859      	ldr	r1, [r3, #4]
 800d022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d024:	041a      	lsls	r2, r3, #16
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d030:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d034:	430a      	orrs	r2, r1
 800d036:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	895b      	ldrh	r3, [r3, #10]
 800d03c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	6959      	ldr	r1, [r3, #20]
 800d042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d044:	b29b      	uxth	r3, r3
 800d046:	8b7a      	ldrh	r2, [r7, #26]
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 fe4e 	bl	800dcea <USB_WritePMA>
 800d04e:	e19f      	b.n	800d390 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	6a1b      	ldr	r3, [r3, #32]
 800d054:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	4413      	add	r3, r2
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	4ba0      	ldr	r3, [pc, #640]	@ (800d2e4 <USB_EPStartXfer+0x908>)
 800d064:	4013      	ands	r3, r2
 800d066:	617b      	str	r3, [r7, #20]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	441a      	add	r2, r3
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d078:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d07c:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	00db      	lsls	r3, r3, #3
 800d084:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d088:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	781b      	ldrb	r3, [r3, #0]
 800d092:	00db      	lsls	r3, r3, #3
 800d094:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d098:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d09c:	b292      	uxth	r2, r2
 800d09e:	601a      	str	r2, [r3, #0]
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	00db      	lsls	r3, r3, #3
 800d0a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0ae:	6819      	ldr	r1, [r3, #0]
 800d0b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0b2:	041a      	lsls	r2, r3, #16
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	781b      	ldrb	r3, [r3, #0]
 800d0b8:	00db      	lsls	r3, r3, #3
 800d0ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0c2:	430a      	orrs	r2, r1
 800d0c4:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	891b      	ldrh	r3, [r3, #8]
 800d0ca:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	6959      	ldr	r1, [r3, #20]
 800d0d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	8b7a      	ldrh	r2, [r7, #26]
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 fe07 	bl	800dcea <USB_WritePMA>
 800d0dc:	e158      	b.n	800d390 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	6a1a      	ldr	r2, [r3, #32]
 800d0e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0e4:	1ad2      	subs	r2, r2, r3
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	009b      	lsls	r3, r3, #2
 800d0f2:	4413      	add	r3, r2
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	f000 80a3 	beq.w	800d246 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	785b      	ldrb	r3, [r3, #1]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d16a      	bne.n	800d1de <USB_EPStartXfer+0x802>
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	00db      	lsls	r3, r3, #3
 800d10e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d112:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	00db      	lsls	r3, r3, #3
 800d11e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d122:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d126:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d12a:	605a      	str	r2, [r3, #4]
 800d12c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d112      	bne.n	800d158 <USB_EPStartXfer+0x77c>
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d13c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d140:	685a      	ldr	r2, [r3, #4]
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d14c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d150:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d154:	605a      	str	r2, [r3, #4]
 800d156:	e06a      	b.n	800d22e <USB_EPStartXfer+0x852>
 800d158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d15a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d15c:	d81e      	bhi.n	800d19c <USB_EPStartXfer+0x7c0>
 800d15e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d160:	085b      	lsrs	r3, r3, #1
 800d162:	643b      	str	r3, [r7, #64]	@ 0x40
 800d164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d166:	f003 0301 	and.w	r3, r3, #1
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d002      	beq.n	800d174 <USB_EPStartXfer+0x798>
 800d16e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d170:	3301      	adds	r3, #1
 800d172:	643b      	str	r3, [r7, #64]	@ 0x40
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	00db      	lsls	r3, r3, #3
 800d17a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d17e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d182:	6859      	ldr	r1, [r3, #4]
 800d184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d186:	069a      	lsls	r2, r3, #26
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	781b      	ldrb	r3, [r3, #0]
 800d18c:	00db      	lsls	r3, r3, #3
 800d18e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d192:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d196:	430a      	orrs	r2, r1
 800d198:	605a      	str	r2, [r3, #4]
 800d19a:	e048      	b.n	800d22e <USB_EPStartXfer+0x852>
 800d19c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d19e:	095b      	lsrs	r3, r3, #5
 800d1a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1a4:	f003 031f 	and.w	r3, r3, #31
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d102      	bne.n	800d1b2 <USB_EPStartXfer+0x7d6>
 800d1ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1ae:	3b01      	subs	r3, #1
 800d1b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	00db      	lsls	r3, r3, #3
 800d1b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1c0:	685a      	ldr	r2, [r3, #4]
 800d1c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1c4:	069b      	lsls	r3, r3, #26
 800d1c6:	431a      	orrs	r2, r3
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	00db      	lsls	r3, r3, #3
 800d1ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d1da:	605a      	str	r2, [r3, #4]
 800d1dc:	e027      	b.n	800d22e <USB_EPStartXfer+0x852>
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	785b      	ldrb	r3, [r3, #1]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d123      	bne.n	800d22e <USB_EPStartXfer+0x852>
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	00db      	lsls	r3, r3, #3
 800d1ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1f4:	685a      	ldr	r2, [r3, #4]
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d200:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d204:	b292      	uxth	r2, r2
 800d206:	605a      	str	r2, [r3, #4]
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	00db      	lsls	r3, r3, #3
 800d20e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d212:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d216:	6859      	ldr	r1, [r3, #4]
 800d218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d21a:	041a      	lsls	r2, r3, #16
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	781b      	ldrb	r3, [r3, #0]
 800d220:	00db      	lsls	r3, r3, #3
 800d222:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d226:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d22a:	430a      	orrs	r2, r1
 800d22c:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	895b      	ldrh	r3, [r3, #10]
 800d232:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	6959      	ldr	r1, [r3, #20]
 800d238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	8b7a      	ldrh	r2, [r7, #26]
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 fd53 	bl	800dcea <USB_WritePMA>
 800d244:	e0a4      	b.n	800d390 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	785b      	ldrb	r3, [r3, #1]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d16d      	bne.n	800d32a <USB_EPStartXfer+0x94e>
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	00db      	lsls	r3, r3, #3
 800d254:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d258:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	00db      	lsls	r3, r3, #3
 800d264:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d268:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d26c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d270:	601a      	str	r2, [r3, #0]
 800d272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d274:	2b00      	cmp	r3, #0
 800d276:	d112      	bne.n	800d29e <USB_EPStartXfer+0x8c2>
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	00db      	lsls	r3, r3, #3
 800d27e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d282:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d286:	681a      	ldr	r2, [r3, #0]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	00db      	lsls	r3, r3, #3
 800d28e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d292:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d296:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d29a:	601a      	str	r2, [r3, #0]
 800d29c:	e06d      	b.n	800d37a <USB_EPStartXfer+0x99e>
 800d29e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d2a2:	d821      	bhi.n	800d2e8 <USB_EPStartXfer+0x90c>
 800d2a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2a6:	085b      	lsrs	r3, r3, #1
 800d2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2ac:	f003 0301 	and.w	r3, r3, #1
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d002      	beq.n	800d2ba <USB_EPStartXfer+0x8de>
 800d2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	00db      	lsls	r3, r3, #3
 800d2c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2c8:	6819      	ldr	r1, [r3, #0]
 800d2ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2cc:	069a      	lsls	r2, r3, #26
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	781b      	ldrb	r3, [r3, #0]
 800d2d2:	00db      	lsls	r3, r3, #3
 800d2d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2dc:	430a      	orrs	r2, r1
 800d2de:	601a      	str	r2, [r3, #0]
 800d2e0:	e04b      	b.n	800d37a <USB_EPStartXfer+0x99e>
 800d2e2:	bf00      	nop
 800d2e4:	07ff8e8f 	.word	0x07ff8e8f
 800d2e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2ea:	095b      	lsrs	r3, r3, #5
 800d2ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2f0:	f003 031f 	and.w	r3, r3, #31
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d102      	bne.n	800d2fe <USB_EPStartXfer+0x922>
 800d2f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	00db      	lsls	r3, r3, #3
 800d304:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d308:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d310:	069b      	lsls	r3, r3, #26
 800d312:	431a      	orrs	r2, r3
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	00db      	lsls	r3, r3, #3
 800d31a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d31e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d322:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d326:	601a      	str	r2, [r3, #0]
 800d328:	e027      	b.n	800d37a <USB_EPStartXfer+0x99e>
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	785b      	ldrb	r3, [r3, #1]
 800d32e:	2b01      	cmp	r3, #1
 800d330:	d123      	bne.n	800d37a <USB_EPStartXfer+0x99e>
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	00db      	lsls	r3, r3, #3
 800d338:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d33c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	00db      	lsls	r3, r3, #3
 800d348:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d34c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d350:	b292      	uxth	r2, r2
 800d352:	601a      	str	r2, [r3, #0]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	781b      	ldrb	r3, [r3, #0]
 800d358:	00db      	lsls	r3, r3, #3
 800d35a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d35e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d362:	6819      	ldr	r1, [r3, #0]
 800d364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d366:	041a      	lsls	r2, r3, #16
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	00db      	lsls	r3, r3, #3
 800d36e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d372:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d376:	430a      	orrs	r2, r1
 800d378:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	891b      	ldrh	r3, [r3, #8]
 800d37e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	6959      	ldr	r1, [r3, #20]
 800d384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d386:	b29b      	uxth	r3, r3
 800d388:	8b7a      	ldrh	r2, [r7, #26]
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 fcad 	bl	800dcea <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	681a      	ldr	r2, [r3, #0]
 800d39c:	4b8b      	ldr	r3, [pc, #556]	@ (800d5cc <USB_EPStartXfer+0xbf0>)
 800d39e:	4013      	ands	r3, r2
 800d3a0:	60fb      	str	r3, [r7, #12]
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	f083 0310 	eor.w	r3, r3, #16
 800d3a8:	60fb      	str	r3, [r7, #12]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f083 0320 	eor.w	r3, r3, #32
 800d3b0:	60fb      	str	r3, [r7, #12]
 800d3b2:	687a      	ldr	r2, [r7, #4]
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	441a      	add	r2, r3
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3c6:	6013      	str	r3, [r2, #0]
 800d3c8:	e36b      	b.n	800daa2 <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	7b1b      	ldrb	r3, [r3, #12]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	f040 8081 	bne.w	800d4d6 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	699a      	ldr	r2, [r3, #24]
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	691b      	ldr	r3, [r3, #16]
 800d3dc:	429a      	cmp	r2, r3
 800d3de:	d909      	bls.n	800d3f4 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	691b      	ldr	r3, [r3, #16]
 800d3e4:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	699a      	ldr	r2, [r3, #24]
 800d3ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3ec:	1ad2      	subs	r2, r2, r3
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	619a      	str	r2, [r3, #24]
 800d3f2:	e005      	b.n	800d400 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	699b      	ldr	r3, [r3, #24]
 800d3f8:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	00db      	lsls	r3, r3, #3
 800d406:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d40a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d40e:	685a      	ldr	r2, [r3, #4]
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	00db      	lsls	r3, r3, #3
 800d416:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d41a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d41e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d422:	605a      	str	r2, [r3, #4]
 800d424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d426:	2b00      	cmp	r3, #0
 800d428:	d112      	bne.n	800d450 <USB_EPStartXfer+0xa74>
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	00db      	lsls	r3, r3, #3
 800d430:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d434:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d438:	685a      	ldr	r2, [r3, #4]
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	781b      	ldrb	r3, [r3, #0]
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d444:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d448:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d44c:	605a      	str	r2, [r3, #4]
 800d44e:	e30c      	b.n	800da6a <USB_EPStartXfer+0x108e>
 800d450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d452:	2b3e      	cmp	r3, #62	@ 0x3e
 800d454:	d81e      	bhi.n	800d494 <USB_EPStartXfer+0xab8>
 800d456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d458:	085b      	lsrs	r3, r3, #1
 800d45a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d45c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d45e:	f003 0301 	and.w	r3, r3, #1
 800d462:	2b00      	cmp	r3, #0
 800d464:	d002      	beq.n	800d46c <USB_EPStartXfer+0xa90>
 800d466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d468:	3301      	adds	r3, #1
 800d46a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	00db      	lsls	r3, r3, #3
 800d472:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d476:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d47a:	6859      	ldr	r1, [r3, #4]
 800d47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47e:	069a      	lsls	r2, r3, #26
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	00db      	lsls	r3, r3, #3
 800d486:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d48a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d48e:	430a      	orrs	r2, r1
 800d490:	605a      	str	r2, [r3, #4]
 800d492:	e2ea      	b.n	800da6a <USB_EPStartXfer+0x108e>
 800d494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d496:	095b      	lsrs	r3, r3, #5
 800d498:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d49a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d49c:	f003 031f 	and.w	r3, r3, #31
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d102      	bne.n	800d4aa <USB_EPStartXfer+0xace>
 800d4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4a6:	3b01      	subs	r3, #1
 800d4a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	00db      	lsls	r3, r3, #3
 800d4b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4b8:	685a      	ldr	r2, [r3, #4]
 800d4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4bc:	069b      	lsls	r3, r3, #26
 800d4be:	431a      	orrs	r2, r3
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	00db      	lsls	r3, r3, #3
 800d4c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4ce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d4d2:	605a      	str	r2, [r3, #4]
 800d4d4:	e2c9      	b.n	800da6a <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	78db      	ldrb	r3, [r3, #3]
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	f040 8176 	bne.w	800d7cc <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	785b      	ldrb	r3, [r3, #1]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d173      	bne.n	800d5d0 <USB_EPStartXfer+0xbf4>
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	00db      	lsls	r3, r3, #3
 800d4ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4f6:	681a      	ldr	r2, [r3, #0]
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	00db      	lsls	r3, r3, #3
 800d4fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d502:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d506:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d50a:	601a      	str	r2, [r3, #0]
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	691b      	ldr	r3, [r3, #16]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d112      	bne.n	800d53a <USB_EPStartXfer+0xb5e>
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	00db      	lsls	r3, r3, #3
 800d51a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d51e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d522:	681a      	ldr	r2, [r3, #0]
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	781b      	ldrb	r3, [r3, #0]
 800d528:	00db      	lsls	r3, r3, #3
 800d52a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d52e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d532:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d536:	601a      	str	r2, [r3, #0]
 800d538:	e073      	b.n	800d622 <USB_EPStartXfer+0xc46>
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	691b      	ldr	r3, [r3, #16]
 800d53e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d540:	d820      	bhi.n	800d584 <USB_EPStartXfer+0xba8>
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	691b      	ldr	r3, [r3, #16]
 800d546:	085b      	lsrs	r3, r3, #1
 800d548:	637b      	str	r3, [r7, #52]	@ 0x34
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	691b      	ldr	r3, [r3, #16]
 800d54e:	f003 0301 	and.w	r3, r3, #1
 800d552:	2b00      	cmp	r3, #0
 800d554:	d002      	beq.n	800d55c <USB_EPStartXfer+0xb80>
 800d556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d558:	3301      	adds	r3, #1
 800d55a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	00db      	lsls	r3, r3, #3
 800d562:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d566:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d56a:	6819      	ldr	r1, [r3, #0]
 800d56c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d56e:	069a      	lsls	r2, r3, #26
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	00db      	lsls	r3, r3, #3
 800d576:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d57a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d57e:	430a      	orrs	r2, r1
 800d580:	601a      	str	r2, [r3, #0]
 800d582:	e04e      	b.n	800d622 <USB_EPStartXfer+0xc46>
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	691b      	ldr	r3, [r3, #16]
 800d588:	095b      	lsrs	r3, r3, #5
 800d58a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	691b      	ldr	r3, [r3, #16]
 800d590:	f003 031f 	and.w	r3, r3, #31
 800d594:	2b00      	cmp	r3, #0
 800d596:	d102      	bne.n	800d59e <USB_EPStartXfer+0xbc2>
 800d598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d59a:	3b01      	subs	r3, #1
 800d59c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	00db      	lsls	r3, r3, #3
 800d5a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5b0:	069b      	lsls	r3, r3, #26
 800d5b2:	431a      	orrs	r2, r3
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	00db      	lsls	r3, r3, #3
 800d5ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5c2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d5c6:	601a      	str	r2, [r3, #0]
 800d5c8:	e02b      	b.n	800d622 <USB_EPStartXfer+0xc46>
 800d5ca:	bf00      	nop
 800d5cc:	07ff8fbf 	.word	0x07ff8fbf
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	785b      	ldrb	r3, [r3, #1]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d124      	bne.n	800d622 <USB_EPStartXfer+0xc46>
 800d5d8:	683b      	ldr	r3, [r7, #0]
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	00db      	lsls	r3, r3, #3
 800d5de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	00db      	lsls	r3, r3, #3
 800d5ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5f6:	b292      	uxth	r2, r2
 800d5f8:	601a      	str	r2, [r3, #0]
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	00db      	lsls	r3, r3, #3
 800d600:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d604:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d608:	6819      	ldr	r1, [r3, #0]
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	691b      	ldr	r3, [r3, #16]
 800d60e:	041a      	lsls	r2, r3, #16
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	00db      	lsls	r3, r3, #3
 800d616:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d61a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d61e:	430a      	orrs	r2, r1
 800d620:	601a      	str	r2, [r3, #0]
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	785b      	ldrb	r3, [r3, #1]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d170      	bne.n	800d70c <USB_EPStartXfer+0xd30>
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	00db      	lsls	r3, r3, #3
 800d630:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d634:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d638:	685a      	ldr	r2, [r3, #4]
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d644:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d648:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d64c:	605a      	str	r2, [r3, #4]
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	691b      	ldr	r3, [r3, #16]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d112      	bne.n	800d67c <USB_EPStartXfer+0xca0>
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	781b      	ldrb	r3, [r3, #0]
 800d65a:	00db      	lsls	r3, r3, #3
 800d65c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d660:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d664:	685a      	ldr	r2, [r3, #4]
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d670:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d674:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d678:	605a      	str	r2, [r3, #4]
 800d67a:	e070      	b.n	800d75e <USB_EPStartXfer+0xd82>
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	691b      	ldr	r3, [r3, #16]
 800d680:	2b3e      	cmp	r3, #62	@ 0x3e
 800d682:	d820      	bhi.n	800d6c6 <USB_EPStartXfer+0xcea>
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	085b      	lsrs	r3, r3, #1
 800d68a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	691b      	ldr	r3, [r3, #16]
 800d690:	f003 0301 	and.w	r3, r3, #1
 800d694:	2b00      	cmp	r3, #0
 800d696:	d002      	beq.n	800d69e <USB_EPStartXfer+0xcc2>
 800d698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d69a:	3301      	adds	r3, #1
 800d69c:	633b      	str	r3, [r7, #48]	@ 0x30
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	00db      	lsls	r3, r3, #3
 800d6a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6ac:	6859      	ldr	r1, [r3, #4]
 800d6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b0:	069a      	lsls	r2, r3, #26
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	00db      	lsls	r3, r3, #3
 800d6b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6c0:	430a      	orrs	r2, r1
 800d6c2:	605a      	str	r2, [r3, #4]
 800d6c4:	e04b      	b.n	800d75e <USB_EPStartXfer+0xd82>
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	095b      	lsrs	r3, r3, #5
 800d6cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	f003 031f 	and.w	r3, r3, #31
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d102      	bne.n	800d6e0 <USB_EPStartXfer+0xd04>
 800d6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6dc:	3b01      	subs	r3, #1
 800d6de:	633b      	str	r3, [r7, #48]	@ 0x30
 800d6e0:	683b      	ldr	r3, [r7, #0]
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	00db      	lsls	r3, r3, #3
 800d6e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6ee:	685a      	ldr	r2, [r3, #4]
 800d6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f2:	069b      	lsls	r3, r3, #26
 800d6f4:	431a      	orrs	r2, r3
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	00db      	lsls	r3, r3, #3
 800d6fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d700:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d704:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d708:	605a      	str	r2, [r3, #4]
 800d70a:	e028      	b.n	800d75e <USB_EPStartXfer+0xd82>
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	785b      	ldrb	r3, [r3, #1]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d124      	bne.n	800d75e <USB_EPStartXfer+0xd82>
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	00db      	lsls	r3, r3, #3
 800d71a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d71e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d722:	685a      	ldr	r2, [r3, #4]
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	00db      	lsls	r3, r3, #3
 800d72a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d72e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d732:	b292      	uxth	r2, r2
 800d734:	605a      	str	r2, [r3, #4]
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	00db      	lsls	r3, r3, #3
 800d73c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d740:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d744:	6859      	ldr	r1, [r3, #4]
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	691b      	ldr	r3, [r3, #16]
 800d74a:	041a      	lsls	r2, r3, #16
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	00db      	lsls	r3, r3, #3
 800d752:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d756:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d75a:	430a      	orrs	r2, r1
 800d75c:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	69db      	ldr	r3, [r3, #28]
 800d762:	2b00      	cmp	r3, #0
 800d764:	f000 8181 	beq.w	800da6a <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	4413      	add	r3, r2
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d776:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d778:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d004      	beq.n	800d78a <USB_EPStartXfer+0xdae>
 800d780:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d786:	2b00      	cmp	r3, #0
 800d788:	d10b      	bne.n	800d7a2 <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d78a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d78c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d790:	2b00      	cmp	r3, #0
 800d792:	f040 816a 	bne.w	800da6a <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d796:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	f040 8164 	bne.w	800da6a <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	4413      	add	r3, r2
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	4b98      	ldr	r3, [pc, #608]	@ (800da10 <USB_EPStartXfer+0x1034>)
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	623b      	str	r3, [r7, #32]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	441a      	add	r2, r3
 800d7be:	6a3b      	ldr	r3, [r7, #32]
 800d7c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d7c8:	6013      	str	r3, [r2, #0]
 800d7ca:	e14e      	b.n	800da6a <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	78db      	ldrb	r3, [r3, #3]
 800d7d0:	2b01      	cmp	r3, #1
 800d7d2:	f040 8148 	bne.w	800da66 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	699a      	ldr	r2, [r3, #24]
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d909      	bls.n	800d7f6 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	691b      	ldr	r3, [r3, #16]
 800d7e6:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	699a      	ldr	r2, [r3, #24]
 800d7ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7ee:	1ad2      	subs	r2, r2, r3
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	619a      	str	r2, [r3, #24]
 800d7f4:	e005      	b.n	800d802 <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	699b      	ldr	r3, [r3, #24]
 800d7fa:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	2200      	movs	r2, #0
 800d800:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	785b      	ldrb	r3, [r3, #1]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d16a      	bne.n	800d8e0 <USB_EPStartXfer+0xf04>
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	00db      	lsls	r3, r3, #3
 800d810:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d814:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d818:	681a      	ldr	r2, [r3, #0]
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	00db      	lsls	r3, r3, #3
 800d820:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d824:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d828:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d82c:	601a      	str	r2, [r3, #0]
 800d82e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d830:	2b00      	cmp	r3, #0
 800d832:	d112      	bne.n	800d85a <USB_EPStartXfer+0xe7e>
 800d834:	683b      	ldr	r3, [r7, #0]
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	00db      	lsls	r3, r3, #3
 800d83a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d83e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	00db      	lsls	r3, r3, #3
 800d84a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d84e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d852:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d856:	601a      	str	r2, [r3, #0]
 800d858:	e06a      	b.n	800d930 <USB_EPStartXfer+0xf54>
 800d85a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d85c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d85e:	d81e      	bhi.n	800d89e <USB_EPStartXfer+0xec2>
 800d860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d862:	085b      	lsrs	r3, r3, #1
 800d864:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d868:	f003 0301 	and.w	r3, r3, #1
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d002      	beq.n	800d876 <USB_EPStartXfer+0xe9a>
 800d870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d872:	3301      	adds	r3, #1
 800d874:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d880:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d884:	6819      	ldr	r1, [r3, #0]
 800d886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d888:	069a      	lsls	r2, r3, #26
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	00db      	lsls	r3, r3, #3
 800d890:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d894:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d898:	430a      	orrs	r2, r1
 800d89a:	601a      	str	r2, [r3, #0]
 800d89c:	e048      	b.n	800d930 <USB_EPStartXfer+0xf54>
 800d89e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8a0:	095b      	lsrs	r3, r3, #5
 800d8a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8a6:	f003 031f 	and.w	r3, r3, #31
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d102      	bne.n	800d8b4 <USB_EPStartXfer+0xed8>
 800d8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b0:	3b01      	subs	r3, #1
 800d8b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	00db      	lsls	r3, r3, #3
 800d8ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8c6:	069b      	lsls	r3, r3, #26
 800d8c8:	431a      	orrs	r2, r3
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	00db      	lsls	r3, r3, #3
 800d8d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d8dc:	601a      	str	r2, [r3, #0]
 800d8de:	e027      	b.n	800d930 <USB_EPStartXfer+0xf54>
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	785b      	ldrb	r3, [r3, #1]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d123      	bne.n	800d930 <USB_EPStartXfer+0xf54>
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	781b      	ldrb	r3, [r3, #0]
 800d8ec:	00db      	lsls	r3, r3, #3
 800d8ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	00db      	lsls	r3, r3, #3
 800d8fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d902:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d906:	b292      	uxth	r2, r2
 800d908:	601a      	str	r2, [r3, #0]
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	00db      	lsls	r3, r3, #3
 800d910:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d914:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d918:	6819      	ldr	r1, [r3, #0]
 800d91a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d91c:	041a      	lsls	r2, r3, #16
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	00db      	lsls	r3, r3, #3
 800d924:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d928:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d92c:	430a      	orrs	r2, r1
 800d92e:	601a      	str	r2, [r3, #0]
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	785b      	ldrb	r3, [r3, #1]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d16d      	bne.n	800da14 <USB_EPStartXfer+0x1038>
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	00db      	lsls	r3, r3, #3
 800d93e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d942:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d946:	685a      	ldr	r2, [r3, #4]
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	00db      	lsls	r3, r3, #3
 800d94e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d952:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d956:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d95a:	605a      	str	r2, [r3, #4]
 800d95c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d112      	bne.n	800d988 <USB_EPStartXfer+0xfac>
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	00db      	lsls	r3, r3, #3
 800d968:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d96c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d970:	685a      	ldr	r2, [r3, #4]
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	00db      	lsls	r3, r3, #3
 800d978:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d97c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d980:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d984:	605a      	str	r2, [r3, #4]
 800d986:	e070      	b.n	800da6a <USB_EPStartXfer+0x108e>
 800d988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d98a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d98c:	d81e      	bhi.n	800d9cc <USB_EPStartXfer+0xff0>
 800d98e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d990:	085b      	lsrs	r3, r3, #1
 800d992:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d996:	f003 0301 	and.w	r3, r3, #1
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d002      	beq.n	800d9a4 <USB_EPStartXfer+0xfc8>
 800d99e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	781b      	ldrb	r3, [r3, #0]
 800d9a8:	00db      	lsls	r3, r3, #3
 800d9aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9b2:	6859      	ldr	r1, [r3, #4]
 800d9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9b6:	069a      	lsls	r2, r3, #26
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	00db      	lsls	r3, r3, #3
 800d9be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9c6:	430a      	orrs	r2, r1
 800d9c8:	605a      	str	r2, [r3, #4]
 800d9ca:	e04e      	b.n	800da6a <USB_EPStartXfer+0x108e>
 800d9cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9ce:	095b      	lsrs	r3, r3, #5
 800d9d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9d4:	f003 031f 	and.w	r3, r3, #31
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d102      	bne.n	800d9e2 <USB_EPStartXfer+0x1006>
 800d9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9de:	3b01      	subs	r3, #1
 800d9e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	00db      	lsls	r3, r3, #3
 800d9e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9f0:	685a      	ldr	r2, [r3, #4]
 800d9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9f4:	069b      	lsls	r3, r3, #26
 800d9f6:	431a      	orrs	r2, r3
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	00db      	lsls	r3, r3, #3
 800d9fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da06:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800da0a:	605a      	str	r2, [r3, #4]
 800da0c:	e02d      	b.n	800da6a <USB_EPStartXfer+0x108e>
 800da0e:	bf00      	nop
 800da10:	07ff8f8f 	.word	0x07ff8f8f
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	785b      	ldrb	r3, [r3, #1]
 800da18:	2b01      	cmp	r3, #1
 800da1a:	d126      	bne.n	800da6a <USB_EPStartXfer+0x108e>
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	00db      	lsls	r3, r3, #3
 800da22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da2a:	685a      	ldr	r2, [r3, #4]
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	00db      	lsls	r3, r3, #3
 800da32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da3a:	b292      	uxth	r2, r2
 800da3c:	605a      	str	r2, [r3, #4]
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	781b      	ldrb	r3, [r3, #0]
 800da42:	00db      	lsls	r3, r3, #3
 800da44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da4c:	6859      	ldr	r1, [r3, #4]
 800da4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da50:	041a      	lsls	r2, r3, #16
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	00db      	lsls	r3, r3, #3
 800da58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da60:	430a      	orrs	r2, r1
 800da62:	605a      	str	r2, [r3, #4]
 800da64:	e001      	b.n	800da6a <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800da66:	2301      	movs	r3, #1
 800da68:	e01c      	b.n	800daa4 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	4413      	add	r3, r2
 800da74:	681a      	ldr	r2, [r3, #0]
 800da76:	4b0d      	ldr	r3, [pc, #52]	@ (800daac <USB_EPStartXfer+0x10d0>)
 800da78:	4013      	ands	r3, r2
 800da7a:	61fb      	str	r3, [r7, #28]
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800da82:	61fb      	str	r3, [r7, #28]
 800da84:	69fb      	ldr	r3, [r7, #28]
 800da86:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800da8a:	61fb      	str	r3, [r7, #28]
 800da8c:	687a      	ldr	r2, [r7, #4]
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	441a      	add	r2, r3
 800da96:	69fb      	ldr	r3, [r7, #28]
 800da98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daa0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800daa2:	2300      	movs	r3, #0
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3758      	adds	r7, #88	@ 0x58
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	07ffbf8f 	.word	0x07ffbf8f

0800dab0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b085      	sub	sp, #20
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	785b      	ldrb	r3, [r3, #1]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d018      	beq.n	800daf4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800dac2:	687a      	ldr	r2, [r7, #4]
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	781b      	ldrb	r3, [r3, #0]
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	4413      	add	r3, r2
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	4b19      	ldr	r3, [pc, #100]	@ (800db34 <USB_EPSetStall+0x84>)
 800dad0:	4013      	ands	r3, r2
 800dad2:	60bb      	str	r3, [r7, #8]
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	f083 0310 	eor.w	r3, r3, #16
 800dada:	60bb      	str	r3, [r7, #8]
 800dadc:	687a      	ldr	r2, [r7, #4]
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	781b      	ldrb	r3, [r3, #0]
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	441a      	add	r2, r3
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800daec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daf0:	6013      	str	r3, [r2, #0]
 800daf2:	e017      	b.n	800db24 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	4413      	add	r3, r2
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	4b0d      	ldr	r3, [pc, #52]	@ (800db38 <USB_EPSetStall+0x88>)
 800db02:	4013      	ands	r3, r2
 800db04:	60fb      	str	r3, [r7, #12]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800db0c:	60fb      	str	r3, [r7, #12]
 800db0e:	687a      	ldr	r2, [r7, #4]
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	441a      	add	r2, r3
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3714      	adds	r7, #20
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr
 800db32:	bf00      	nop
 800db34:	07ff8fbf 	.word	0x07ff8fbf
 800db38:	07ffbf8f 	.word	0x07ffbf8f

0800db3c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b089      	sub	sp, #36	@ 0x24
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	7b1b      	ldrb	r3, [r3, #12]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d17c      	bne.n	800dc48 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	785b      	ldrb	r3, [r3, #1]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d03c      	beq.n	800dbd0 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4413      	add	r3, r2
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	613b      	str	r3, [r7, #16]
 800db64:	693b      	ldr	r3, [r7, #16]
 800db66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d013      	beq.n	800db96 <USB_EPClearStall+0x5a>
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	009b      	lsls	r3, r3, #2
 800db76:	4413      	add	r3, r2
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	4b37      	ldr	r3, [pc, #220]	@ (800dc58 <USB_EPClearStall+0x11c>)
 800db7c:	4013      	ands	r3, r2
 800db7e:	60fb      	str	r3, [r7, #12]
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	781b      	ldrb	r3, [r3, #0]
 800db86:	009b      	lsls	r3, r3, #2
 800db88:	441a      	add	r2, r3
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800db94:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	78db      	ldrb	r3, [r3, #3]
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d054      	beq.n	800dc48 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	4413      	add	r3, r2
 800dba8:	681a      	ldr	r2, [r3, #0]
 800dbaa:	4b2c      	ldr	r3, [pc, #176]	@ (800dc5c <USB_EPClearStall+0x120>)
 800dbac:	4013      	ands	r3, r2
 800dbae:	60bb      	str	r3, [r7, #8]
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	f083 0320 	eor.w	r3, r3, #32
 800dbb6:	60bb      	str	r3, [r7, #8]
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	441a      	add	r2, r3
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbcc:	6013      	str	r3, [r2, #0]
 800dbce:	e03b      	b.n	800dc48 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4413      	add	r3, r2
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	61fb      	str	r3, [r7, #28]
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d013      	beq.n	800dc10 <USB_EPClearStall+0xd4>
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	4b18      	ldr	r3, [pc, #96]	@ (800dc58 <USB_EPClearStall+0x11c>)
 800dbf6:	4013      	ands	r3, r2
 800dbf8:	61bb      	str	r3, [r7, #24]
 800dbfa:	687a      	ldr	r2, [r7, #4]
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	009b      	lsls	r3, r3, #2
 800dc02:	441a      	add	r2, r3
 800dc04:	69bb      	ldr	r3, [r7, #24]
 800dc06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dc0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc0e:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	4413      	add	r3, r2
 800dc1a:	681a      	ldr	r2, [r3, #0]
 800dc1c:	4b10      	ldr	r3, [pc, #64]	@ (800dc60 <USB_EPClearStall+0x124>)
 800dc1e:	4013      	ands	r3, r2
 800dc20:	617b      	str	r3, [r7, #20]
 800dc22:	697b      	ldr	r3, [r7, #20]
 800dc24:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dc28:	617b      	str	r3, [r7, #20]
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dc30:	617b      	str	r3, [r7, #20]
 800dc32:	687a      	ldr	r2, [r7, #4]
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	441a      	add	r2, r3
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc46:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800dc48:	2300      	movs	r3, #0
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3724      	adds	r7, #36	@ 0x24
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr
 800dc56:	bf00      	nop
 800dc58:	07ff8f8f 	.word	0x07ff8f8f
 800dc5c:	07ff8fbf 	.word	0x07ff8fbf
 800dc60:	07ffbf8f 	.word	0x07ffbf8f

0800dc64 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800dc64:	b480      	push	{r7}
 800dc66:	b083      	sub	sp, #12
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800dc70:	78fb      	ldrb	r3, [r7, #3]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d102      	bne.n	800dc7c <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2280      	movs	r2, #128	@ 0x80
 800dc7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800dc7c:	2300      	movs	r3, #0
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	370c      	adds	r7, #12
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr

0800dc8a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800dc8a:	b480      	push	{r7}
 800dc8c:	b083      	sub	sp, #12
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc96:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	370c      	adds	r7, #12
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dcb8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800dcc0:	2300      	movs	r3, #0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	370c      	adds	r7, #12
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800dcce:	b480      	push	{r7}
 800dcd0:	b085      	sub	sp, #20
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcda:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800dcdc:	68fb      	ldr	r3, [r7, #12]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3714      	adds	r7, #20
 800dce2:	46bd      	mov	sp, r7
 800dce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce8:	4770      	bx	lr

0800dcea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dcea:	b480      	push	{r7}
 800dcec:	b08b      	sub	sp, #44	@ 0x2c
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	60f8      	str	r0, [r7, #12]
 800dcf2:	60b9      	str	r1, [r7, #8]
 800dcf4:	4611      	mov	r1, r2
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	80fb      	strh	r3, [r7, #6]
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800dd00:	88bb      	ldrh	r3, [r7, #4]
 800dd02:	3303      	adds	r3, #3
 800dd04:	089b      	lsrs	r3, r3, #2
 800dd06:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800dd08:	88bb      	ldrh	r3, [r7, #4]
 800dd0a:	f003 0303 	and.w	r3, r3, #3
 800dd0e:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800dd14:	8afb      	ldrh	r3, [r7, #22]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d002      	beq.n	800dd20 <USB_WritePMA+0x36>
  {
    NbWords--;
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	3b01      	subs	r3, #1
 800dd1e:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800dd20:	88fb      	ldrh	r3, [r7, #6]
 800dd22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd2a:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	623b      	str	r3, [r7, #32]
 800dd30:	e015      	b.n	800dd5e <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800dd3a:	69fb      	ldr	r3, [r7, #28]
 800dd3c:	3304      	adds	r3, #4
 800dd3e:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	3301      	adds	r3, #1
 800dd44:	613b      	str	r3, [r7, #16]
    pBuf++;
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	3301      	adds	r3, #1
 800dd4a:	613b      	str	r3, [r7, #16]
    pBuf++;
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	613b      	str	r3, [r7, #16]
    pBuf++;
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	3301      	adds	r3, #1
 800dd56:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800dd58:	6a3b      	ldr	r3, [r7, #32]
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	623b      	str	r3, [r7, #32]
 800dd5e:	6a3b      	ldr	r3, [r7, #32]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d1e6      	bne.n	800dd32 <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800dd64:	8afb      	ldrh	r3, [r7, #22]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d01a      	beq.n	800dda0 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	461a      	mov	r2, r3
 800dd74:	6a3b      	ldr	r3, [r7, #32]
 800dd76:	00db      	lsls	r3, r3, #3
 800dd78:	fa02 f303 	lsl.w	r3, r2, r3
 800dd7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd7e:	4313      	orrs	r3, r2
 800dd80:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800dd82:	6a3b      	ldr	r3, [r7, #32]
 800dd84:	3301      	adds	r3, #1
 800dd86:	623b      	str	r3, [r7, #32]
      pBuf++;
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800dd8e:	8afb      	ldrh	r3, [r7, #22]
 800dd90:	3b01      	subs	r3, #1
 800dd92:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800dd94:	8afb      	ldrh	r3, [r7, #22]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1e9      	bne.n	800dd6e <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dd9e:	601a      	str	r2, [r3, #0]
  }
}
 800dda0:	bf00      	nop
 800dda2:	372c      	adds	r7, #44	@ 0x2c
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b08b      	sub	sp, #44	@ 0x2c
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	60f8      	str	r0, [r7, #12]
 800ddb4:	60b9      	str	r1, [r7, #8]
 800ddb6:	4611      	mov	r1, r2
 800ddb8:	461a      	mov	r2, r3
 800ddba:	460b      	mov	r3, r1
 800ddbc:	80fb      	strh	r3, [r7, #6]
 800ddbe:	4613      	mov	r3, r2
 800ddc0:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800ddc2:	88bb      	ldrh	r3, [r7, #4]
 800ddc4:	3303      	adds	r3, #3
 800ddc6:	089b      	lsrs	r3, r3, #2
 800ddc8:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800ddca:	88bb      	ldrh	r3, [r7, #4]
 800ddcc:	f003 0303 	and.w	r3, r3, #3
 800ddd0:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800ddd6:	88fb      	ldrh	r3, [r7, #6]
 800ddd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dddc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dde0:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800dde2:	8b7b      	ldrh	r3, [r7, #26]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d002      	beq.n	800ddee <USB_ReadPMA+0x42>
  {
    NbWords--;
 800dde8:	69fb      	ldr	r3, [r7, #28]
 800ddea:	3b01      	subs	r3, #1
 800ddec:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800ddee:	69fb      	ldr	r3, [r7, #28]
 800ddf0:	627b      	str	r3, [r7, #36]	@ 0x24
 800ddf2:	e015      	b.n	800de20 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800ddf4:	6a3b      	ldr	r3, [r7, #32]
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	697b      	ldr	r3, [r7, #20]
 800ddfa:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800ddfc:	6a3b      	ldr	r3, [r7, #32]
 800ddfe:	3304      	adds	r3, #4
 800de00:	623b      	str	r3, [r7, #32]
    pBuf++;
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	3301      	adds	r3, #1
 800de06:	617b      	str	r3, [r7, #20]
    pBuf++;
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	3301      	adds	r3, #1
 800de0c:	617b      	str	r3, [r7, #20]
    pBuf++;
 800de0e:	697b      	ldr	r3, [r7, #20]
 800de10:	3301      	adds	r3, #1
 800de12:	617b      	str	r3, [r7, #20]
    pBuf++;
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	3301      	adds	r3, #1
 800de18:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800de1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de1c:	3b01      	subs	r3, #1
 800de1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800de20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de22:	2b00      	cmp	r3, #0
 800de24:	d1e6      	bne.n	800ddf4 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800de26:	8b7b      	ldrh	r3, [r7, #26]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d017      	beq.n	800de5c <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800de2c:	6a3b      	ldr	r3, [r7, #32]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800de32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de34:	b2db      	uxtb	r3, r3
 800de36:	00db      	lsls	r3, r3, #3
 800de38:	693a      	ldr	r2, [r7, #16]
 800de3a:	fa22 f303 	lsr.w	r3, r2, r3
 800de3e:	b2da      	uxtb	r2, r3
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	701a      	strb	r2, [r3, #0]
      count++;
 800de44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de46:	3301      	adds	r3, #1
 800de48:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800de4a:	697b      	ldr	r3, [r7, #20]
 800de4c:	3301      	adds	r3, #1
 800de4e:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800de50:	8b7b      	ldrh	r3, [r7, #26]
 800de52:	3b01      	subs	r3, #1
 800de54:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800de56:	8b7b      	ldrh	r3, [r7, #26]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d1ea      	bne.n	800de32 <USB_ReadPMA+0x86>
  }
}
 800de5c:	bf00      	nop
 800de5e:	372c      	adds	r7, #44	@ 0x2c
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b084      	sub	sp, #16
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	460b      	mov	r3, r1
 800de72:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800de74:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800de78:	f000 ff5a 	bl	800ed30 <USBD_static_malloc>
 800de7c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d109      	bne.n	800de98 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	32b0      	adds	r2, #176	@ 0xb0
 800de8e:	2100      	movs	r1, #0
 800de90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800de94:	2302      	movs	r3, #2
 800de96:	e0d4      	b.n	800e042 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800de98:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800de9c:	2100      	movs	r1, #0
 800de9e:	68f8      	ldr	r0, [r7, #12]
 800dea0:	f002 fc18 	bl	80106d4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	32b0      	adds	r2, #176	@ 0xb0
 800deae:	68f9      	ldr	r1, [r7, #12]
 800deb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	32b0      	adds	r2, #176	@ 0xb0
 800debe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	7c1b      	ldrb	r3, [r3, #16]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d138      	bne.n	800df42 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ded0:	4b5e      	ldr	r3, [pc, #376]	@ (800e04c <USBD_CDC_Init+0x1e4>)
 800ded2:	7819      	ldrb	r1, [r3, #0]
 800ded4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ded8:	2202      	movs	r2, #2
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 fe2f 	bl	800eb3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dee0:	4b5a      	ldr	r3, [pc, #360]	@ (800e04c <USBD_CDC_Init+0x1e4>)
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	f003 020f 	and.w	r2, r3, #15
 800dee8:	6879      	ldr	r1, [r7, #4]
 800deea:	4613      	mov	r3, r2
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	4413      	add	r3, r2
 800def0:	009b      	lsls	r3, r3, #2
 800def2:	440b      	add	r3, r1
 800def4:	3324      	adds	r3, #36	@ 0x24
 800def6:	2201      	movs	r2, #1
 800def8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800defa:	4b55      	ldr	r3, [pc, #340]	@ (800e050 <USBD_CDC_Init+0x1e8>)
 800defc:	7819      	ldrb	r1, [r3, #0]
 800defe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800df02:	2202      	movs	r2, #2
 800df04:	6878      	ldr	r0, [r7, #4]
 800df06:	f000 fe1a 	bl	800eb3e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800df0a:	4b51      	ldr	r3, [pc, #324]	@ (800e050 <USBD_CDC_Init+0x1e8>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	f003 020f 	and.w	r2, r3, #15
 800df12:	6879      	ldr	r1, [r7, #4]
 800df14:	4613      	mov	r3, r2
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	4413      	add	r3, r2
 800df1a:	009b      	lsls	r3, r3, #2
 800df1c:	440b      	add	r3, r1
 800df1e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800df22:	2201      	movs	r2, #1
 800df24:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800df26:	4b4b      	ldr	r3, [pc, #300]	@ (800e054 <USBD_CDC_Init+0x1ec>)
 800df28:	781b      	ldrb	r3, [r3, #0]
 800df2a:	f003 020f 	and.w	r2, r3, #15
 800df2e:	6879      	ldr	r1, [r7, #4]
 800df30:	4613      	mov	r3, r2
 800df32:	009b      	lsls	r3, r3, #2
 800df34:	4413      	add	r3, r2
 800df36:	009b      	lsls	r3, r3, #2
 800df38:	440b      	add	r3, r1
 800df3a:	3326      	adds	r3, #38	@ 0x26
 800df3c:	2210      	movs	r2, #16
 800df3e:	801a      	strh	r2, [r3, #0]
 800df40:	e035      	b.n	800dfae <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800df42:	4b42      	ldr	r3, [pc, #264]	@ (800e04c <USBD_CDC_Init+0x1e4>)
 800df44:	7819      	ldrb	r1, [r3, #0]
 800df46:	2340      	movs	r3, #64	@ 0x40
 800df48:	2202      	movs	r2, #2
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 fdf7 	bl	800eb3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800df50:	4b3e      	ldr	r3, [pc, #248]	@ (800e04c <USBD_CDC_Init+0x1e4>)
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	f003 020f 	and.w	r2, r3, #15
 800df58:	6879      	ldr	r1, [r7, #4]
 800df5a:	4613      	mov	r3, r2
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	4413      	add	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	440b      	add	r3, r1
 800df64:	3324      	adds	r3, #36	@ 0x24
 800df66:	2201      	movs	r2, #1
 800df68:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800df6a:	4b39      	ldr	r3, [pc, #228]	@ (800e050 <USBD_CDC_Init+0x1e8>)
 800df6c:	7819      	ldrb	r1, [r3, #0]
 800df6e:	2340      	movs	r3, #64	@ 0x40
 800df70:	2202      	movs	r2, #2
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 fde3 	bl	800eb3e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800df78:	4b35      	ldr	r3, [pc, #212]	@ (800e050 <USBD_CDC_Init+0x1e8>)
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	f003 020f 	and.w	r2, r3, #15
 800df80:	6879      	ldr	r1, [r7, #4]
 800df82:	4613      	mov	r3, r2
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	4413      	add	r3, r2
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	440b      	add	r3, r1
 800df8c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800df90:	2201      	movs	r2, #1
 800df92:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800df94:	4b2f      	ldr	r3, [pc, #188]	@ (800e054 <USBD_CDC_Init+0x1ec>)
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	f003 020f 	and.w	r2, r3, #15
 800df9c:	6879      	ldr	r1, [r7, #4]
 800df9e:	4613      	mov	r3, r2
 800dfa0:	009b      	lsls	r3, r3, #2
 800dfa2:	4413      	add	r3, r2
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	440b      	add	r3, r1
 800dfa8:	3326      	adds	r3, #38	@ 0x26
 800dfaa:	2210      	movs	r2, #16
 800dfac:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dfae:	4b29      	ldr	r3, [pc, #164]	@ (800e054 <USBD_CDC_Init+0x1ec>)
 800dfb0:	7819      	ldrb	r1, [r3, #0]
 800dfb2:	2308      	movs	r3, #8
 800dfb4:	2203      	movs	r2, #3
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 fdc1 	bl	800eb3e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dfbc:	4b25      	ldr	r3, [pc, #148]	@ (800e054 <USBD_CDC_Init+0x1ec>)
 800dfbe:	781b      	ldrb	r3, [r3, #0]
 800dfc0:	f003 020f 	and.w	r2, r3, #15
 800dfc4:	6879      	ldr	r1, [r7, #4]
 800dfc6:	4613      	mov	r3, r2
 800dfc8:	009b      	lsls	r3, r3, #2
 800dfca:	4413      	add	r3, r2
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	440b      	add	r3, r1
 800dfd0:	3324      	adds	r3, #36	@ 0x24
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	33b0      	adds	r3, #176	@ 0xb0
 800dfe8:	009b      	lsls	r3, r3, #2
 800dfea:	4413      	add	r3, r2
 800dfec:	685b      	ldr	r3, [r3, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	2200      	movs	r2, #0
 800dff6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	2200      	movs	r2, #0
 800dffe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d101      	bne.n	800e010 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e00c:	2302      	movs	r3, #2
 800e00e:	e018      	b.n	800e042 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	7c1b      	ldrb	r3, [r3, #16]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d10a      	bne.n	800e02e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e018:	4b0d      	ldr	r3, [pc, #52]	@ (800e050 <USBD_CDC_Init+0x1e8>)
 800e01a:	7819      	ldrb	r1, [r3, #0]
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e022:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 fe54 	bl	800ecd4 <USBD_LL_PrepareReceive>
 800e02c:	e008      	b.n	800e040 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e02e:	4b08      	ldr	r3, [pc, #32]	@ (800e050 <USBD_CDC_Init+0x1e8>)
 800e030:	7819      	ldrb	r1, [r3, #0]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e038:	2340      	movs	r3, #64	@ 0x40
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f000 fe4a 	bl	800ecd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e040:	2300      	movs	r3, #0
}
 800e042:	4618      	mov	r0, r3
 800e044:	3710      	adds	r7, #16
 800e046:	46bd      	mov	sp, r7
 800e048:	bd80      	pop	{r7, pc}
 800e04a:	bf00      	nop
 800e04c:	200000b3 	.word	0x200000b3
 800e050:	200000b4 	.word	0x200000b4
 800e054:	200000b5 	.word	0x200000b5

0800e058 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b082      	sub	sp, #8
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	460b      	mov	r3, r1
 800e062:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e064:	4b3a      	ldr	r3, [pc, #232]	@ (800e150 <USBD_CDC_DeInit+0xf8>)
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	4619      	mov	r1, r3
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 fd87 	bl	800eb7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e070:	4b37      	ldr	r3, [pc, #220]	@ (800e150 <USBD_CDC_DeInit+0xf8>)
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	f003 020f 	and.w	r2, r3, #15
 800e078:	6879      	ldr	r1, [r7, #4]
 800e07a:	4613      	mov	r3, r2
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	4413      	add	r3, r2
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	440b      	add	r3, r1
 800e084:	3324      	adds	r3, #36	@ 0x24
 800e086:	2200      	movs	r2, #0
 800e088:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e08a:	4b32      	ldr	r3, [pc, #200]	@ (800e154 <USBD_CDC_DeInit+0xfc>)
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	4619      	mov	r1, r3
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 fd74 	bl	800eb7e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e096:	4b2f      	ldr	r3, [pc, #188]	@ (800e154 <USBD_CDC_DeInit+0xfc>)
 800e098:	781b      	ldrb	r3, [r3, #0]
 800e09a:	f003 020f 	and.w	r2, r3, #15
 800e09e:	6879      	ldr	r1, [r7, #4]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	4413      	add	r3, r2
 800e0a6:	009b      	lsls	r3, r3, #2
 800e0a8:	440b      	add	r3, r1
 800e0aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e0b2:	4b29      	ldr	r3, [pc, #164]	@ (800e158 <USBD_CDC_DeInit+0x100>)
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f000 fd60 	bl	800eb7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e0be:	4b26      	ldr	r3, [pc, #152]	@ (800e158 <USBD_CDC_DeInit+0x100>)
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	f003 020f 	and.w	r2, r3, #15
 800e0c6:	6879      	ldr	r1, [r7, #4]
 800e0c8:	4613      	mov	r3, r2
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	4413      	add	r3, r2
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	440b      	add	r3, r1
 800e0d2:	3324      	adds	r3, #36	@ 0x24
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e0d8:	4b1f      	ldr	r3, [pc, #124]	@ (800e158 <USBD_CDC_DeInit+0x100>)
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	f003 020f 	and.w	r2, r3, #15
 800e0e0:	6879      	ldr	r1, [r7, #4]
 800e0e2:	4613      	mov	r3, r2
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	4413      	add	r3, r2
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	440b      	add	r3, r1
 800e0ec:	3326      	adds	r3, #38	@ 0x26
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	32b0      	adds	r2, #176	@ 0xb0
 800e0fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d01f      	beq.n	800e144 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	33b0      	adds	r3, #176	@ 0xb0
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	4413      	add	r3, r2
 800e112:	685b      	ldr	r3, [r3, #4]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	32b0      	adds	r2, #176	@ 0xb0
 800e122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e126:	4618      	mov	r0, r3
 800e128:	f000 fe10 	bl	800ed4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	32b0      	adds	r2, #176	@ 0xb0
 800e136:	2100      	movs	r1, #0
 800e138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2200      	movs	r2, #0
 800e140:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e144:	2300      	movs	r3, #0
}
 800e146:	4618      	mov	r0, r3
 800e148:	3708      	adds	r7, #8
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	200000b3 	.word	0x200000b3
 800e154:	200000b4 	.word	0x200000b4
 800e158:	200000b5 	.word	0x200000b5

0800e15c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b086      	sub	sp, #24
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
 800e164:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	32b0      	adds	r2, #176	@ 0xb0
 800e170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e174:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e176:	2300      	movs	r3, #0
 800e178:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e17a:	2300      	movs	r3, #0
 800e17c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e17e:	2300      	movs	r3, #0
 800e180:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d101      	bne.n	800e18c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e188:	2303      	movs	r3, #3
 800e18a:	e0bf      	b.n	800e30c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e194:	2b00      	cmp	r3, #0
 800e196:	d050      	beq.n	800e23a <USBD_CDC_Setup+0xde>
 800e198:	2b20      	cmp	r3, #32
 800e19a:	f040 80af 	bne.w	800e2fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	88db      	ldrh	r3, [r3, #6]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d03a      	beq.n	800e21c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	b25b      	sxtb	r3, r3
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	da1b      	bge.n	800e1e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	33b0      	adds	r3, #176	@ 0xb0
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	4413      	add	r3, r2
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	689b      	ldr	r3, [r3, #8]
 800e1c2:	683a      	ldr	r2, [r7, #0]
 800e1c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e1c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e1c8:	683a      	ldr	r2, [r7, #0]
 800e1ca:	88d2      	ldrh	r2, [r2, #6]
 800e1cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	88db      	ldrh	r3, [r3, #6]
 800e1d2:	2b07      	cmp	r3, #7
 800e1d4:	bf28      	it	cs
 800e1d6:	2307      	movcs	r3, #7
 800e1d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	89fa      	ldrh	r2, [r7, #14]
 800e1de:	4619      	mov	r1, r3
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f002 f8a6 	bl	8010332 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e1e6:	e090      	b.n	800e30a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	785a      	ldrb	r2, [r3, #1]
 800e1ec:	693b      	ldr	r3, [r7, #16]
 800e1ee:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	88db      	ldrh	r3, [r3, #6]
 800e1f6:	2b3f      	cmp	r3, #63	@ 0x3f
 800e1f8:	d803      	bhi.n	800e202 <USBD_CDC_Setup+0xa6>
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	88db      	ldrh	r3, [r3, #6]
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	e000      	b.n	800e204 <USBD_CDC_Setup+0xa8>
 800e202:	2240      	movs	r2, #64	@ 0x40
 800e204:	693b      	ldr	r3, [r7, #16]
 800e206:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e20a:	6939      	ldr	r1, [r7, #16]
 800e20c:	693b      	ldr	r3, [r7, #16]
 800e20e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e212:	461a      	mov	r2, r3
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f002 f8b8 	bl	801038a <USBD_CtlPrepareRx>
      break;
 800e21a:	e076      	b.n	800e30a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e222:	687a      	ldr	r2, [r7, #4]
 800e224:	33b0      	adds	r3, #176	@ 0xb0
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	4413      	add	r3, r2
 800e22a:	685b      	ldr	r3, [r3, #4]
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	683a      	ldr	r2, [r7, #0]
 800e230:	7850      	ldrb	r0, [r2, #1]
 800e232:	2200      	movs	r2, #0
 800e234:	6839      	ldr	r1, [r7, #0]
 800e236:	4798      	blx	r3
      break;
 800e238:	e067      	b.n	800e30a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	785b      	ldrb	r3, [r3, #1]
 800e23e:	2b0b      	cmp	r3, #11
 800e240:	d851      	bhi.n	800e2e6 <USBD_CDC_Setup+0x18a>
 800e242:	a201      	add	r2, pc, #4	@ (adr r2, 800e248 <USBD_CDC_Setup+0xec>)
 800e244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e248:	0800e279 	.word	0x0800e279
 800e24c:	0800e2f5 	.word	0x0800e2f5
 800e250:	0800e2e7 	.word	0x0800e2e7
 800e254:	0800e2e7 	.word	0x0800e2e7
 800e258:	0800e2e7 	.word	0x0800e2e7
 800e25c:	0800e2e7 	.word	0x0800e2e7
 800e260:	0800e2e7 	.word	0x0800e2e7
 800e264:	0800e2e7 	.word	0x0800e2e7
 800e268:	0800e2e7 	.word	0x0800e2e7
 800e26c:	0800e2e7 	.word	0x0800e2e7
 800e270:	0800e2a3 	.word	0x0800e2a3
 800e274:	0800e2cd 	.word	0x0800e2cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	2b03      	cmp	r3, #3
 800e282:	d107      	bne.n	800e294 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e284:	f107 030a 	add.w	r3, r7, #10
 800e288:	2202      	movs	r2, #2
 800e28a:	4619      	mov	r1, r3
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f002 f850 	bl	8010332 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e292:	e032      	b.n	800e2fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e294:	6839      	ldr	r1, [r7, #0]
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f001 fecd 	bl	8010036 <USBD_CtlError>
            ret = USBD_FAIL;
 800e29c:	2303      	movs	r3, #3
 800e29e:	75fb      	strb	r3, [r7, #23]
          break;
 800e2a0:	e02b      	b.n	800e2fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2a8:	b2db      	uxtb	r3, r3
 800e2aa:	2b03      	cmp	r3, #3
 800e2ac:	d107      	bne.n	800e2be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e2ae:	f107 030d 	add.w	r3, r7, #13
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	6878      	ldr	r0, [r7, #4]
 800e2b8:	f002 f83b 	bl	8010332 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2bc:	e01d      	b.n	800e2fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e2be:	6839      	ldr	r1, [r7, #0]
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f001 feb8 	bl	8010036 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2c6:	2303      	movs	r3, #3
 800e2c8:	75fb      	strb	r3, [r7, #23]
          break;
 800e2ca:	e016      	b.n	800e2fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	2b03      	cmp	r3, #3
 800e2d6:	d00f      	beq.n	800e2f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e2d8:	6839      	ldr	r1, [r7, #0]
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f001 feab 	bl	8010036 <USBD_CtlError>
            ret = USBD_FAIL;
 800e2e0:	2303      	movs	r3, #3
 800e2e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e2e4:	e008      	b.n	800e2f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e2e6:	6839      	ldr	r1, [r7, #0]
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f001 fea4 	bl	8010036 <USBD_CtlError>
          ret = USBD_FAIL;
 800e2ee:	2303      	movs	r3, #3
 800e2f0:	75fb      	strb	r3, [r7, #23]
          break;
 800e2f2:	e002      	b.n	800e2fa <USBD_CDC_Setup+0x19e>
          break;
 800e2f4:	bf00      	nop
 800e2f6:	e008      	b.n	800e30a <USBD_CDC_Setup+0x1ae>
          break;
 800e2f8:	bf00      	nop
      }
      break;
 800e2fa:	e006      	b.n	800e30a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e2fc:	6839      	ldr	r1, [r7, #0]
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f001 fe99 	bl	8010036 <USBD_CtlError>
      ret = USBD_FAIL;
 800e304:	2303      	movs	r3, #3
 800e306:	75fb      	strb	r3, [r7, #23]
      break;
 800e308:	bf00      	nop
  }

  return (uint8_t)ret;
 800e30a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3718      	adds	r7, #24
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	460b      	mov	r3, r1
 800e31e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e326:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	32b0      	adds	r2, #176	@ 0xb0
 800e332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d101      	bne.n	800e33e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e33a:	2303      	movs	r3, #3
 800e33c:	e065      	b.n	800e40a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	32b0      	adds	r2, #176	@ 0xb0
 800e348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e34c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e34e:	78fb      	ldrb	r3, [r7, #3]
 800e350:	f003 020f 	and.w	r2, r3, #15
 800e354:	6879      	ldr	r1, [r7, #4]
 800e356:	4613      	mov	r3, r2
 800e358:	009b      	lsls	r3, r3, #2
 800e35a:	4413      	add	r3, r2
 800e35c:	009b      	lsls	r3, r3, #2
 800e35e:	440b      	add	r3, r1
 800e360:	3318      	adds	r3, #24
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d02f      	beq.n	800e3c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e368:	78fb      	ldrb	r3, [r7, #3]
 800e36a:	f003 020f 	and.w	r2, r3, #15
 800e36e:	6879      	ldr	r1, [r7, #4]
 800e370:	4613      	mov	r3, r2
 800e372:	009b      	lsls	r3, r3, #2
 800e374:	4413      	add	r3, r2
 800e376:	009b      	lsls	r3, r3, #2
 800e378:	440b      	add	r3, r1
 800e37a:	3318      	adds	r3, #24
 800e37c:	681a      	ldr	r2, [r3, #0]
 800e37e:	78fb      	ldrb	r3, [r7, #3]
 800e380:	f003 010f 	and.w	r1, r3, #15
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	460b      	mov	r3, r1
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	440b      	add	r3, r1
 800e38c:	00db      	lsls	r3, r3, #3
 800e38e:	4403      	add	r3, r0
 800e390:	3324      	adds	r3, #36	@ 0x24
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	fbb2 f1f3 	udiv	r1, r2, r3
 800e398:	fb01 f303 	mul.w	r3, r1, r3
 800e39c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d112      	bne.n	800e3c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e3a2:	78fb      	ldrb	r3, [r7, #3]
 800e3a4:	f003 020f 	and.w	r2, r3, #15
 800e3a8:	6879      	ldr	r1, [r7, #4]
 800e3aa:	4613      	mov	r3, r2
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	4413      	add	r3, r2
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	440b      	add	r3, r1
 800e3b4:	3318      	adds	r3, #24
 800e3b6:	2200      	movs	r2, #0
 800e3b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e3ba:	78f9      	ldrb	r1, [r7, #3]
 800e3bc:	2300      	movs	r3, #0
 800e3be:	2200      	movs	r2, #0
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f000 fc6c 	bl	800ec9e <USBD_LL_Transmit>
 800e3c6:	e01f      	b.n	800e408 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	2200      	movs	r2, #0
 800e3cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	33b0      	adds	r3, #176	@ 0xb0
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	4413      	add	r3, r2
 800e3de:	685b      	ldr	r3, [r3, #4]
 800e3e0:	691b      	ldr	r3, [r3, #16]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d010      	beq.n	800e408 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	33b0      	adds	r3, #176	@ 0xb0
 800e3f0:	009b      	lsls	r3, r3, #2
 800e3f2:	4413      	add	r3, r2
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	691b      	ldr	r3, [r3, #16]
 800e3f8:	68ba      	ldr	r2, [r7, #8]
 800e3fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e3fe:	68ba      	ldr	r2, [r7, #8]
 800e400:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e404:	78fa      	ldrb	r2, [r7, #3]
 800e406:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e408:	2300      	movs	r3, #0
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e412:	b580      	push	{r7, lr}
 800e414:	b084      	sub	sp, #16
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	460b      	mov	r3, r1
 800e41c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	32b0      	adds	r2, #176	@ 0xb0
 800e428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e42c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	32b0      	adds	r2, #176	@ 0xb0
 800e438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d101      	bne.n	800e444 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e440:	2303      	movs	r3, #3
 800e442:	e01a      	b.n	800e47a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e444:	78fb      	ldrb	r3, [r7, #3]
 800e446:	4619      	mov	r1, r3
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f000 fc5e 	bl	800ed0a <USBD_LL_GetRxDataSize>
 800e44e:	4602      	mov	r2, r0
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	33b0      	adds	r3, #176	@ 0xb0
 800e460:	009b      	lsls	r3, r3, #2
 800e462:	4413      	add	r3, r2
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	68fa      	ldr	r2, [r7, #12]
 800e46a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e46e:	68fa      	ldr	r2, [r7, #12]
 800e470:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e474:	4611      	mov	r1, r2
 800e476:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e478:	2300      	movs	r3, #0
}
 800e47a:	4618      	mov	r0, r3
 800e47c:	3710      	adds	r7, #16
 800e47e:	46bd      	mov	sp, r7
 800e480:	bd80      	pop	{r7, pc}

0800e482 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e482:	b580      	push	{r7, lr}
 800e484:	b084      	sub	sp, #16
 800e486:	af00      	add	r7, sp, #0
 800e488:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	32b0      	adds	r2, #176	@ 0xb0
 800e494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e498:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d101      	bne.n	800e4a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e4a0:	2303      	movs	r3, #3
 800e4a2:	e024      	b.n	800e4ee <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	33b0      	adds	r3, #176	@ 0xb0
 800e4ae:	009b      	lsls	r3, r3, #2
 800e4b0:	4413      	add	r3, r2
 800e4b2:	685b      	ldr	r3, [r3, #4]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d019      	beq.n	800e4ec <USBD_CDC_EP0_RxReady+0x6a>
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e4be:	2bff      	cmp	r3, #255	@ 0xff
 800e4c0:	d014      	beq.n	800e4ec <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e4c8:	687a      	ldr	r2, [r7, #4]
 800e4ca:	33b0      	adds	r3, #176	@ 0xb0
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	4413      	add	r3, r2
 800e4d0:	685b      	ldr	r3, [r3, #4]
 800e4d2:	689b      	ldr	r3, [r3, #8]
 800e4d4:	68fa      	ldr	r2, [r7, #12]
 800e4d6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e4da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e4dc:	68fa      	ldr	r2, [r7, #12]
 800e4de:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e4e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	22ff      	movs	r2, #255	@ 0xff
 800e4e8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e4ec:	2300      	movs	r3, #0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
	...

0800e4f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	b086      	sub	sp, #24
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e500:	2182      	movs	r1, #130	@ 0x82
 800e502:	4818      	ldr	r0, [pc, #96]	@ (800e564 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e504:	f000 ff61 	bl	800f3ca <USBD_GetEpDesc>
 800e508:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e50a:	2101      	movs	r1, #1
 800e50c:	4815      	ldr	r0, [pc, #84]	@ (800e564 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e50e:	f000 ff5c 	bl	800f3ca <USBD_GetEpDesc>
 800e512:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e514:	2181      	movs	r1, #129	@ 0x81
 800e516:	4813      	ldr	r0, [pc, #76]	@ (800e564 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e518:	f000 ff57 	bl	800f3ca <USBD_GetEpDesc>
 800e51c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d002      	beq.n	800e52a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	2210      	movs	r2, #16
 800e528:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d006      	beq.n	800e53e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e530:	693b      	ldr	r3, [r7, #16]
 800e532:	2200      	movs	r2, #0
 800e534:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e538:	711a      	strb	r2, [r3, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d006      	beq.n	800e552 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2200      	movs	r2, #0
 800e548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e54c:	711a      	strb	r2, [r3, #4]
 800e54e:	2200      	movs	r2, #0
 800e550:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2243      	movs	r2, #67	@ 0x43
 800e556:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e558:	4b02      	ldr	r3, [pc, #8]	@ (800e564 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e55a:	4618      	mov	r0, r3
 800e55c:	3718      	adds	r7, #24
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	20000070 	.word	0x20000070

0800e568 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b086      	sub	sp, #24
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e570:	2182      	movs	r1, #130	@ 0x82
 800e572:	4818      	ldr	r0, [pc, #96]	@ (800e5d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e574:	f000 ff29 	bl	800f3ca <USBD_GetEpDesc>
 800e578:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e57a:	2101      	movs	r1, #1
 800e57c:	4815      	ldr	r0, [pc, #84]	@ (800e5d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e57e:	f000 ff24 	bl	800f3ca <USBD_GetEpDesc>
 800e582:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e584:	2181      	movs	r1, #129	@ 0x81
 800e586:	4813      	ldr	r0, [pc, #76]	@ (800e5d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e588:	f000 ff1f 	bl	800f3ca <USBD_GetEpDesc>
 800e58c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e58e:	697b      	ldr	r3, [r7, #20]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	2210      	movs	r2, #16
 800e598:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e59a:	693b      	ldr	r3, [r7, #16]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d006      	beq.n	800e5ae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e5a0:	693b      	ldr	r3, [r7, #16]
 800e5a2:	2200      	movs	r2, #0
 800e5a4:	711a      	strb	r2, [r3, #4]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	f042 0202 	orr.w	r2, r2, #2
 800e5ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d006      	beq.n	800e5c2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	711a      	strb	r2, [r3, #4]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f042 0202 	orr.w	r2, r2, #2
 800e5c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2243      	movs	r2, #67	@ 0x43
 800e5c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e5c8:	4b02      	ldr	r3, [pc, #8]	@ (800e5d4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3718      	adds	r7, #24
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}
 800e5d2:	bf00      	nop
 800e5d4:	20000070 	.word	0x20000070

0800e5d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b086      	sub	sp, #24
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e5e0:	2182      	movs	r1, #130	@ 0x82
 800e5e2:	4818      	ldr	r0, [pc, #96]	@ (800e644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5e4:	f000 fef1 	bl	800f3ca <USBD_GetEpDesc>
 800e5e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e5ea:	2101      	movs	r1, #1
 800e5ec:	4815      	ldr	r0, [pc, #84]	@ (800e644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5ee:	f000 feec 	bl	800f3ca <USBD_GetEpDesc>
 800e5f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e5f4:	2181      	movs	r1, #129	@ 0x81
 800e5f6:	4813      	ldr	r0, [pc, #76]	@ (800e644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e5f8:	f000 fee7 	bl	800f3ca <USBD_GetEpDesc>
 800e5fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	2210      	movs	r2, #16
 800e608:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d006      	beq.n	800e61e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	2200      	movs	r2, #0
 800e614:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e618:	711a      	strb	r2, [r3, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d006      	beq.n	800e632 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2200      	movs	r2, #0
 800e628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e62c:	711a      	strb	r2, [r3, #4]
 800e62e:	2200      	movs	r2, #0
 800e630:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2243      	movs	r2, #67	@ 0x43
 800e636:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e638:	4b02      	ldr	r3, [pc, #8]	@ (800e644 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	3718      	adds	r7, #24
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	20000070 	.word	0x20000070

0800e648 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e648:	b480      	push	{r7}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	220a      	movs	r2, #10
 800e654:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e656:	4b03      	ldr	r3, [pc, #12]	@ (800e664 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e658:	4618      	mov	r0, r3
 800e65a:	370c      	adds	r7, #12
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr
 800e664:	2000002c 	.word	0x2000002c

0800e668 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e668:	b480      	push	{r7}
 800e66a:	b083      	sub	sp, #12
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d101      	bne.n	800e67c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e678:	2303      	movs	r3, #3
 800e67a:	e009      	b.n	800e690 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e682:	687a      	ldr	r2, [r7, #4]
 800e684:	33b0      	adds	r3, #176	@ 0xb0
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	4413      	add	r3, r2
 800e68a:	683a      	ldr	r2, [r7, #0]
 800e68c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b087      	sub	sp, #28
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	32b0      	adds	r2, #176	@ 0xb0
 800e6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6b6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e6b8:	697b      	ldr	r3, [r7, #20]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d101      	bne.n	800e6c2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e6be:	2303      	movs	r3, #3
 800e6c0:	e008      	b.n	800e6d4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e6c2:	697b      	ldr	r3, [r7, #20]
 800e6c4:	68ba      	ldr	r2, [r7, #8]
 800e6c6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	687a      	ldr	r2, [r7, #4]
 800e6ce:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e6d2:	2300      	movs	r3, #0
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	371c      	adds	r7, #28
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr

0800e6e0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b085      	sub	sp, #20
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	32b0      	adds	r2, #176	@ 0xb0
 800e6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d101      	bne.n	800e704 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e700:	2303      	movs	r3, #3
 800e702:	e004      	b.n	800e70e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	683a      	ldr	r2, [r7, #0]
 800e708:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3714      	adds	r7, #20
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr
	...

0800e71c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	32b0      	adds	r2, #176	@ 0xb0
 800e72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e732:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	32b0      	adds	r2, #176	@ 0xb0
 800e73e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d101      	bne.n	800e74a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e746:	2303      	movs	r3, #3
 800e748:	e018      	b.n	800e77c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	7c1b      	ldrb	r3, [r3, #16]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d10a      	bne.n	800e768 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e752:	4b0c      	ldr	r3, [pc, #48]	@ (800e784 <USBD_CDC_ReceivePacket+0x68>)
 800e754:	7819      	ldrb	r1, [r3, #0]
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e75c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f000 fab7 	bl	800ecd4 <USBD_LL_PrepareReceive>
 800e766:	e008      	b.n	800e77a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e768:	4b06      	ldr	r3, [pc, #24]	@ (800e784 <USBD_CDC_ReceivePacket+0x68>)
 800e76a:	7819      	ldrb	r1, [r3, #0]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e772:	2340      	movs	r3, #64	@ 0x40
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f000 faad 	bl	800ecd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e77a:	2300      	movs	r3, #0
}
 800e77c:	4618      	mov	r0, r3
 800e77e:	3710      	adds	r7, #16
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	200000b4 	.word	0x200000b4

0800e788 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800e788:	b580      	push	{r7, lr}
 800e78a:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e78c:	2200      	movs	r2, #0
 800e78e:	4905      	ldr	r1, [pc, #20]	@ (800e7a4 <TEMPLATE_Init+0x1c>)
 800e790:	4805      	ldr	r0, [pc, #20]	@ (800e7a8 <TEMPLATE_Init+0x20>)
 800e792:	f7ff ff83 	bl	800e69c <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e796:	4905      	ldr	r1, [pc, #20]	@ (800e7ac <TEMPLATE_Init+0x24>)
 800e798:	4803      	ldr	r0, [pc, #12]	@ (800e7a8 <TEMPLATE_Init+0x20>)
 800e79a:	f7ff ffa1 	bl	800e6e0 <USBD_CDC_SetRxBuffer>
      return (0);
 800e79e:	2300      	movs	r3, #0
}
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	bd80      	pop	{r7, pc}
 800e7a4:	20000d3c 	.word	0x20000d3c
 800e7a8:	200007b4 	.word	0x200007b4
 800e7ac:	20000b3c 	.word	0x20000b3c

0800e7b0 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800e7b0:	b480      	push	{r7}
 800e7b2:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800e7b4:	2300      	movs	r3, #0
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b083      	sub	sp, #12
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	6039      	str	r1, [r7, #0]
 800e7ca:	71fb      	strb	r3, [r7, #7]
 800e7cc:	4613      	mov	r3, r2
 800e7ce:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800e7d0:	79fb      	ldrb	r3, [r7, #7]
 800e7d2:	2b23      	cmp	r3, #35	@ 0x23
 800e7d4:	f200 8098 	bhi.w	800e908 <TEMPLATE_Control+0x148>
 800e7d8:	a201      	add	r2, pc, #4	@ (adr r2, 800e7e0 <TEMPLATE_Control+0x20>)
 800e7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7de:	bf00      	nop
 800e7e0:	0800e909 	.word	0x0800e909
 800e7e4:	0800e909 	.word	0x0800e909
 800e7e8:	0800e909 	.word	0x0800e909
 800e7ec:	0800e909 	.word	0x0800e909
 800e7f0:	0800e909 	.word	0x0800e909
 800e7f4:	0800e909 	.word	0x0800e909
 800e7f8:	0800e909 	.word	0x0800e909
 800e7fc:	0800e909 	.word	0x0800e909
 800e800:	0800e909 	.word	0x0800e909
 800e804:	0800e909 	.word	0x0800e909
 800e808:	0800e909 	.word	0x0800e909
 800e80c:	0800e909 	.word	0x0800e909
 800e810:	0800e909 	.word	0x0800e909
 800e814:	0800e909 	.word	0x0800e909
 800e818:	0800e909 	.word	0x0800e909
 800e81c:	0800e909 	.word	0x0800e909
 800e820:	0800e909 	.word	0x0800e909
 800e824:	0800e909 	.word	0x0800e909
 800e828:	0800e909 	.word	0x0800e909
 800e82c:	0800e909 	.word	0x0800e909
 800e830:	0800e909 	.word	0x0800e909
 800e834:	0800e909 	.word	0x0800e909
 800e838:	0800e909 	.word	0x0800e909
 800e83c:	0800e909 	.word	0x0800e909
 800e840:	0800e909 	.word	0x0800e909
 800e844:	0800e909 	.word	0x0800e909
 800e848:	0800e909 	.word	0x0800e909
 800e84c:	0800e909 	.word	0x0800e909
 800e850:	0800e909 	.word	0x0800e909
 800e854:	0800e909 	.word	0x0800e909
 800e858:	0800e909 	.word	0x0800e909
 800e85c:	0800e909 	.word	0x0800e909
 800e860:	0800e871 	.word	0x0800e871
 800e864:	0800e8b5 	.word	0x0800e8b5
 800e868:	0800e909 	.word	0x0800e909
 800e86c:	0800e909 	.word	0x0800e909
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	461a      	mov	r2, r3
 800e876:	683b      	ldr	r3, [r7, #0]
 800e878:	3301      	adds	r3, #1
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	021b      	lsls	r3, r3, #8
 800e87e:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	3302      	adds	r3, #2
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e888:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	3303      	adds	r3, #3
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	061b      	lsls	r3, r3, #24
 800e892:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e894:	461a      	mov	r2, r3
 800e896:	4b20      	ldr	r3, [pc, #128]	@ (800e918 <TEMPLATE_Control+0x158>)
 800e898:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	791a      	ldrb	r2, [r3, #4]
 800e89e:	4b1e      	ldr	r3, [pc, #120]	@ (800e918 <TEMPLATE_Control+0x158>)
 800e8a0:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	795a      	ldrb	r2, [r3, #5]
 800e8a6:	4b1c      	ldr	r3, [pc, #112]	@ (800e918 <TEMPLATE_Control+0x158>)
 800e8a8:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	799a      	ldrb	r2, [r3, #6]
 800e8ae:	4b1a      	ldr	r3, [pc, #104]	@ (800e918 <TEMPLATE_Control+0x158>)
 800e8b0:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800e8b2:	e02a      	b.n	800e90a <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800e8b4:	4b18      	ldr	r3, [pc, #96]	@ (800e918 <TEMPLATE_Control+0x158>)
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	b2da      	uxtb	r2, r3
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800e8be:	4b16      	ldr	r3, [pc, #88]	@ (800e918 <TEMPLATE_Control+0x158>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	0a1a      	lsrs	r2, r3, #8
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	b2d2      	uxtb	r2, r2
 800e8ca:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800e8cc:	4b12      	ldr	r3, [pc, #72]	@ (800e918 <TEMPLATE_Control+0x158>)
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	0c1a      	lsrs	r2, r3, #16
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	3302      	adds	r3, #2
 800e8d6:	b2d2      	uxtb	r2, r2
 800e8d8:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800e8da:	4b0f      	ldr	r3, [pc, #60]	@ (800e918 <TEMPLATE_Control+0x158>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	0e1a      	lsrs	r2, r3, #24
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	3303      	adds	r3, #3
 800e8e4:	b2d2      	uxtb	r2, r2
 800e8e6:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	3304      	adds	r3, #4
 800e8ec:	4a0a      	ldr	r2, [pc, #40]	@ (800e918 <TEMPLATE_Control+0x158>)
 800e8ee:	7912      	ldrb	r2, [r2, #4]
 800e8f0:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	3305      	adds	r3, #5
 800e8f6:	4a08      	ldr	r2, [pc, #32]	@ (800e918 <TEMPLATE_Control+0x158>)
 800e8f8:	7952      	ldrb	r2, [r2, #5]
 800e8fa:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	3306      	adds	r3, #6
 800e900:	4a05      	ldr	r2, [pc, #20]	@ (800e918 <TEMPLATE_Control+0x158>)
 800e902:	7992      	ldrb	r2, [r2, #6]
 800e904:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800e906:	e000      	b.n	800e90a <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800e908:	bf00      	nop
  }

  return (0);
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	370c      	adds	r7, #12
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr
 800e918:	200000cc 	.word	0x200000cc

0800e91c <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800e91c:	b580      	push	{r7, lr}
 800e91e:	b082      	sub	sp, #8
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
    // Don't overflow buffer
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	4b17      	ldr	r3, [pc, #92]	@ (800e988 <TEMPLATE_Receive+0x6c>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4413      	add	r3, r2
 800e930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e934:	d215      	bcs.n	800e962 <TEMPLATE_Receive+0x46>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 800e936:	4b14      	ldr	r3, [pc, #80]	@ (800e988 <TEMPLATE_Receive+0x6c>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4a14      	ldr	r2, [pc, #80]	@ (800e98c <TEMPLATE_Receive+0x70>)
 800e93c:	1898      	adds	r0, r3, r2
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	461a      	mov	r2, r3
 800e944:	6879      	ldr	r1, [r7, #4]
 800e946:	f001 ff40 	bl	80107ca <memcpy>
        usb_rx_index += *Len;
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	4b0e      	ldr	r3, [pc, #56]	@ (800e988 <TEMPLATE_Receive+0x6c>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	4413      	add	r3, r2
 800e954:	4a0c      	ldr	r2, [pc, #48]	@ (800e988 <TEMPLATE_Receive+0x6c>)
 800e956:	6013      	str	r3, [r2, #0]
        return USBD_FAIL;
    }

    // Optional: check for custom end-of-transmission pattern
    // For now, just simulate end if host sends less than 64 bytes
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	2b3f      	cmp	r3, #63	@ 0x3f
 800e95e:	d80b      	bhi.n	800e978 <TEMPLATE_Receive+0x5c>
 800e960:	e007      	b.n	800e972 <TEMPLATE_Receive+0x56>
        usb_rx_index = 0;
 800e962:	4b09      	ldr	r3, [pc, #36]	@ (800e988 <TEMPLATE_Receive+0x6c>)
 800e964:	2200      	movs	r2, #0
 800e966:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 800e968:	4809      	ldr	r0, [pc, #36]	@ (800e990 <TEMPLATE_Receive+0x74>)
 800e96a:	f7f1 ff4d 	bl	8000808 <log_error>
        return USBD_FAIL;
 800e96e:	2303      	movs	r3, #3
 800e970:	e006      	b.n	800e980 <TEMPLATE_Receive+0x64>
    {
        usb_rx_complete = true;
 800e972:	4b08      	ldr	r3, [pc, #32]	@ (800e994 <TEMPLATE_Receive+0x78>)
 800e974:	2201      	movs	r2, #1
 800e976:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e978:	4807      	ldr	r0, [pc, #28]	@ (800e998 <TEMPLATE_Receive+0x7c>)
 800e97a:	f7ff fecf 	bl	800e71c <USBD_CDC_ReceivePacket>
    return USBD_OK;
 800e97e:	2300      	movs	r3, #0
}
 800e980:	4618      	mov	r0, r3
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}
 800e988:	20010f3c 	.word	0x20010f3c
 800e98c:	20000f3c 	.word	0x20000f3c
 800e990:	08011838 	.word	0x08011838
 800e994:	20010f40 	.word	0x20010f40
 800e998:	200007b4 	.word	0x200007b4

0800e99c <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b085      	sub	sp, #20
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	60f8      	str	r0, [r7, #12]
 800e9a4:	60b9      	str	r1, [r7, #8]
 800e9a6:	4613      	mov	r3, r2
 800e9a8:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 800e9aa:	2300      	movs	r3, #0

}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3714      	adds	r7, #20
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr

0800e9b8 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b082      	sub	sp, #8
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800e9cc:	4619      	mov	r1, r3
 800e9ce:	4610      	mov	r0, r2
 800e9d0:	f000 faa5 	bl	800ef1e <USBD_LL_SetupStage>
}
 800e9d4:	bf00      	nop
 800e9d6:	3708      	adds	r7, #8
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}

0800e9dc <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b082      	sub	sp, #8
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
 800e9e4:	460b      	mov	r3, r1
 800e9e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e9ee:	78fa      	ldrb	r2, [r7, #3]
 800e9f0:	6879      	ldr	r1, [r7, #4]
 800e9f2:	4613      	mov	r3, r2
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	00db      	lsls	r3, r3, #3
 800e9fa:	440b      	add	r3, r1
 800e9fc:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	78fb      	ldrb	r3, [r7, #3]
 800ea04:	4619      	mov	r1, r3
 800ea06:	f000 fadf 	bl	800efc8 <USBD_LL_DataOutStage>
}
 800ea0a:	bf00      	nop
 800ea0c:	3708      	adds	r7, #8
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}

0800ea12 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800ea12:	b580      	push	{r7, lr}
 800ea14:	b082      	sub	sp, #8
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
 800ea1a:	460b      	mov	r3, r1
 800ea1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800ea24:	78fa      	ldrb	r2, [r7, #3]
 800ea26:	6879      	ldr	r1, [r7, #4]
 800ea28:	4613      	mov	r3, r2
 800ea2a:	009b      	lsls	r3, r3, #2
 800ea2c:	4413      	add	r3, r2
 800ea2e:	00db      	lsls	r3, r3, #3
 800ea30:	440b      	add	r3, r1
 800ea32:	3328      	adds	r3, #40	@ 0x28
 800ea34:	681a      	ldr	r2, [r3, #0]
 800ea36:	78fb      	ldrb	r3, [r7, #3]
 800ea38:	4619      	mov	r1, r3
 800ea3a:	f000 fb78 	bl	800f12e <USBD_LL_DataInStage>
}
 800ea3e:	bf00      	nop
 800ea40:	3708      	adds	r7, #8
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b082      	sub	sp, #8
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800ea54:	4618      	mov	r0, r3
 800ea56:	f000 fc7e 	bl	800f356 <USBD_LL_SOF>
}
 800ea5a:	bf00      	nop
 800ea5c:	3708      	adds	r7, #8
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}

0800ea62 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800ea62:	b580      	push	{r7, lr}
 800ea64:	b084      	sub	sp, #16
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea6a:	2301      	movs	r3, #1
 800ea6c:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	79db      	ldrb	r3, [r3, #7]
 800ea72:	2b02      	cmp	r3, #2
 800ea74:	d001      	beq.n	800ea7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ea76:	f7f2 fcb7 	bl	80013e8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800ea80:	7bfa      	ldrb	r2, [r7, #15]
 800ea82:	4611      	mov	r1, r2
 800ea84:	4618      	mov	r0, r3
 800ea86:	f000 fc56 	bl	800f336 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800ea90:	4618      	mov	r0, r3
 800ea92:	f000 fbfe 	bl	800f292 <USBD_LL_Reset>
}
 800ea96:	bf00      	nop
 800ea98:	3710      	adds	r7, #16
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
	...

0800eaa0 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	4a19      	ldr	r2, [pc, #100]	@ (800eb10 <USBD_LL_Init+0x70>)
 800eaac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eab6:	2340      	movs	r3, #64	@ 0x40
 800eab8:	2200      	movs	r2, #0
 800eaba:	2100      	movs	r1, #0
 800eabc:	f7f5 feee 	bl	800489c <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eac6:	2380      	movs	r3, #128	@ 0x80
 800eac8:	2200      	movs	r2, #0
 800eaca:	2180      	movs	r1, #128	@ 0x80
 800eacc:	f7f5 fee6 	bl	800489c <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ead6:	23c0      	movs	r3, #192	@ 0xc0
 800ead8:	2200      	movs	r2, #0
 800eada:	2181      	movs	r1, #129	@ 0x81
 800eadc:	f7f5 fede 	bl	800489c <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eae6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eaea:	2200      	movs	r2, #0
 800eaec:	2101      	movs	r1, #1
 800eaee:	f7f5 fed5 	bl	800489c <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eaf8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800eafc:	2200      	movs	r2, #0
 800eafe:	2182      	movs	r1, #130	@ 0x82
 800eb00:	f7f5 fecc 	bl	800489c <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800eb04:	2300      	movs	r3, #0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3708      	adds	r7, #8
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	200004d0 	.word	0x200004d0

0800eb14 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eb22:	4618      	mov	r0, r3
 800eb24:	f7f4 fb9e 	bl	8003264 <HAL_PCD_Start>
 800eb28:	4603      	mov	r3, r0
 800eb2a:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800eb2c:	7bfb      	ldrb	r3, [r7, #15]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f000 f916 	bl	800ed60 <USBD_Get_USB_Status>
 800eb34:	4603      	mov	r3, r0
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3710      	adds	r7, #16
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}

0800eb3e <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800eb3e:	b580      	push	{r7, lr}
 800eb40:	b084      	sub	sp, #16
 800eb42:	af00      	add	r7, sp, #0
 800eb44:	6078      	str	r0, [r7, #4]
 800eb46:	4608      	mov	r0, r1
 800eb48:	4611      	mov	r1, r2
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	70fb      	strb	r3, [r7, #3]
 800eb50:	460b      	mov	r3, r1
 800eb52:	70bb      	strb	r3, [r7, #2]
 800eb54:	4613      	mov	r3, r2
 800eb56:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800eb5e:	78bb      	ldrb	r3, [r7, #2]
 800eb60:	883a      	ldrh	r2, [r7, #0]
 800eb62:	78f9      	ldrb	r1, [r7, #3]
 800eb64:	f7f4 fccd 	bl	8003502 <HAL_PCD_EP_Open>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800eb6c:	7bfb      	ldrb	r3, [r7, #15]
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f000 f8f6 	bl	800ed60 <USBD_Get_USB_Status>
 800eb74:	4603      	mov	r3, r0
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3710      	adds	r7, #16
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800eb7e:	b580      	push	{r7, lr}
 800eb80:	b084      	sub	sp, #16
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	6078      	str	r0, [r7, #4]
 800eb86:	460b      	mov	r3, r1
 800eb88:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eb90:	78fa      	ldrb	r2, [r7, #3]
 800eb92:	4611      	mov	r1, r2
 800eb94:	4618      	mov	r0, r3
 800eb96:	f7f4 fd15 	bl	80035c4 <HAL_PCD_EP_Close>
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800eb9e:	7bfb      	ldrb	r3, [r7, #15]
 800eba0:	4618      	mov	r0, r3
 800eba2:	f000 f8dd 	bl	800ed60 <USBD_Get_USB_Status>
 800eba6:	4603      	mov	r3, r0
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3710      	adds	r7, #16
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b084      	sub	sp, #16
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	460b      	mov	r3, r1
 800ebba:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ebc2:	78fa      	ldrb	r2, [r7, #3]
 800ebc4:	4611      	mov	r1, r2
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	f7f4 fdc8 	bl	800375c <HAL_PCD_EP_SetStall>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ebd0:	7bfb      	ldrb	r3, [r7, #15]
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f000 f8c4 	bl	800ed60 <USBD_Get_USB_Status>
 800ebd8:	4603      	mov	r3, r0
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3710      	adds	r7, #16
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}

0800ebe2 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
 800ebea:	460b      	mov	r3, r1
 800ebec:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ebf4:	78fa      	ldrb	r2, [r7, #3]
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7f4 fe03 	bl	8003804 <HAL_PCD_EP_ClrStall>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ec02:	7bfb      	ldrb	r3, [r7, #15]
 800ec04:	4618      	mov	r0, r3
 800ec06:	f000 f8ab 	bl	800ed60 <USBD_Get_USB_Status>
 800ec0a:	4603      	mov	r3, r0
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec14:	b480      	push	{r7}
 800ec16:	b085      	sub	sp, #20
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	460b      	mov	r3, r1
 800ec1e:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec26:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800ec28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	da0b      	bge.n	800ec48 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ec30:	78fb      	ldrb	r3, [r7, #3]
 800ec32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ec36:	68f9      	ldr	r1, [r7, #12]
 800ec38:	4613      	mov	r3, r2
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	4413      	add	r3, r2
 800ec3e:	00db      	lsls	r3, r3, #3
 800ec40:	440b      	add	r3, r1
 800ec42:	3316      	adds	r3, #22
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	e00b      	b.n	800ec60 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ec48:	78fb      	ldrb	r3, [r7, #3]
 800ec4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ec4e:	68f9      	ldr	r1, [r7, #12]
 800ec50:	4613      	mov	r3, r2
 800ec52:	009b      	lsls	r3, r3, #2
 800ec54:	4413      	add	r3, r2
 800ec56:	00db      	lsls	r3, r3, #3
 800ec58:	440b      	add	r3, r1
 800ec5a:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800ec5e:	781b      	ldrb	r3, [r3, #0]
      }
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3714      	adds	r7, #20
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
 800ec74:	460b      	mov	r3, r1
 800ec76:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec7e:	78fa      	ldrb	r2, [r7, #3]
 800ec80:	4611      	mov	r1, r2
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7f4 fc19 	bl	80034ba <HAL_PCD_SetAddress>
 800ec88:	4603      	mov	r3, r0
 800ec8a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800ec8c:	7bfb      	ldrb	r3, [r7, #15]
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f000 f866 	bl	800ed60 <USBD_Get_USB_Status>
 800ec94:	4603      	mov	r3, r0
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	3710      	adds	r7, #16
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	bd80      	pop	{r7, pc}

0800ec9e <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800ec9e:	b580      	push	{r7, lr}
 800eca0:	b086      	sub	sp, #24
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	60f8      	str	r0, [r7, #12]
 800eca6:	607a      	str	r2, [r7, #4]
 800eca8:	603b      	str	r3, [r7, #0]
 800ecaa:	460b      	mov	r3, r1
 800ecac:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ecb4:	7af9      	ldrb	r1, [r7, #11]
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	f7f4 fd17 	bl	80036ec <HAL_PCD_EP_Transmit>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800ecc2:	7dfb      	ldrb	r3, [r7, #23]
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f000 f84b 	bl	800ed60 <USBD_Get_USB_Status>
 800ecca:	4603      	mov	r3, r0
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3718      	adds	r7, #24
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	bd80      	pop	{r7, pc}

0800ecd4 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b086      	sub	sp, #24
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	60f8      	str	r0, [r7, #12]
 800ecdc:	607a      	str	r2, [r7, #4]
 800ecde:	603b      	str	r3, [r7, #0]
 800ece0:	460b      	mov	r3, r1
 800ece2:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ecea:	7af9      	ldrb	r1, [r7, #11]
 800ecec:	683b      	ldr	r3, [r7, #0]
 800ecee:	687a      	ldr	r2, [r7, #4]
 800ecf0:	f7f4 fcb2 	bl	8003658 <HAL_PCD_EP_Receive>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800ecf8:	7dfb      	ldrb	r3, [r7, #23]
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f000 f830 	bl	800ed60 <USBD_Get_USB_Status>
 800ed00:	4603      	mov	r3, r0
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3718      	adds	r7, #24
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}

0800ed0a <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed0a:	b580      	push	{r7, lr}
 800ed0c:	b082      	sub	sp, #8
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	6078      	str	r0, [r7, #4]
 800ed12:	460b      	mov	r3, r1
 800ed14:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed1c:	78fa      	ldrb	r2, [r7, #3]
 800ed1e:	4611      	mov	r1, r2
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7f4 fccb 	bl	80036bc <HAL_PCD_EP_GetRxCount>
 800ed26:	4603      	mov	r3, r0
}
 800ed28:	4618      	mov	r0, r3
 800ed2a:	3708      	adds	r7, #8
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	bd80      	pop	{r7, pc}

0800ed30 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800ed38:	4b03      	ldr	r3, [pc, #12]	@ (800ed48 <USBD_static_malloc+0x18>)
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	370c      	adds	r7, #12
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop
 800ed48:	20010f44 	.word	0x20010f44

0800ed4c <USBD_static_free>:

void USBD_static_free(void *p)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800ed54:	bf00      	nop
 800ed56:	370c      	adds	r7, #12
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b085      	sub	sp, #20
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	4603      	mov	r3, r0
 800ed68:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800ed6e:	79fb      	ldrb	r3, [r7, #7]
 800ed70:	2b03      	cmp	r3, #3
 800ed72:	d817      	bhi.n	800eda4 <USBD_Get_USB_Status+0x44>
 800ed74:	a201      	add	r2, pc, #4	@ (adr r2, 800ed7c <USBD_Get_USB_Status+0x1c>)
 800ed76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed7a:	bf00      	nop
 800ed7c:	0800ed8d 	.word	0x0800ed8d
 800ed80:	0800ed93 	.word	0x0800ed93
 800ed84:	0800ed99 	.word	0x0800ed99
 800ed88:	0800ed9f 	.word	0x0800ed9f
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	73fb      	strb	r3, [r7, #15]
             break;
 800ed90:	e00b      	b.n	800edaa <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800ed92:	2303      	movs	r3, #3
 800ed94:	73fb      	strb	r3, [r7, #15]
             break;
 800ed96:	e008      	b.n	800edaa <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	73fb      	strb	r3, [r7, #15]
             break;
 800ed9c:	e005      	b.n	800edaa <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800ed9e:	2303      	movs	r3, #3
 800eda0:	73fb      	strb	r3, [r7, #15]
             break;
 800eda2:	e002      	b.n	800edaa <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800eda4:	2303      	movs	r3, #3
 800eda6:	73fb      	strb	r3, [r7, #15]
             break;
 800eda8:	bf00      	nop
      }
      return usb_status;
 800edaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800edac:	4618      	mov	r0, r3
 800edae:	3714      	adds	r7, #20
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b086      	sub	sp, #24
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	60f8      	str	r0, [r7, #12]
 800edc0:	60b9      	str	r1, [r7, #8]
 800edc2:	4613      	mov	r3, r2
 800edc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d101      	bne.n	800edd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800edcc:	2303      	movs	r3, #3
 800edce:	e01f      	b.n	800ee10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2200      	movs	r2, #0
 800edd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	2200      	movs	r2, #0
 800eddc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2200      	movs	r2, #0
 800ede4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ede8:	68bb      	ldr	r3, [r7, #8]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d003      	beq.n	800edf6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	2201      	movs	r2, #1
 800edfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	79fa      	ldrb	r2, [r7, #7]
 800ee02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ee04:	68f8      	ldr	r0, [r7, #12]
 800ee06:	f7ff fe4b 	bl	800eaa0 <USBD_LL_Init>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ee0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee10:	4618      	mov	r0, r3
 800ee12:	3718      	adds	r7, #24
 800ee14:	46bd      	mov	sp, r7
 800ee16:	bd80      	pop	{r7, pc}

0800ee18 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ee18:	b580      	push	{r7, lr}
 800ee1a:	b084      	sub	sp, #16
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
 800ee20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ee22:	2300      	movs	r3, #0
 800ee24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ee26:	683b      	ldr	r3, [r7, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d101      	bne.n	800ee30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ee2c:	2303      	movs	r3, #3
 800ee2e:	e025      	b.n	800ee7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	683a      	ldr	r2, [r7, #0]
 800ee34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	32ae      	adds	r2, #174	@ 0xae
 800ee42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d00f      	beq.n	800ee6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	32ae      	adds	r2, #174	@ 0xae
 800ee56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee5c:	f107 020e 	add.w	r2, r7, #14
 800ee60:	4610      	mov	r0, r2
 800ee62:	4798      	blx	r3
 800ee64:	4602      	mov	r2, r0
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ee72:	1c5a      	adds	r2, r3, #1
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ee7a:	2300      	movs	r3, #0
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f7ff fe41 	bl	800eb14 <USBD_LL_Start>
 800ee92:	4603      	mov	r3, r0
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b083      	sub	sp, #12
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eea4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	370c      	adds	r7, #12
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb0:	4770      	bx	lr

0800eeb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eeb2:	b580      	push	{r7, lr}
 800eeb4:	b084      	sub	sp, #16
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	6078      	str	r0, [r7, #4]
 800eeba:	460b      	mov	r3, r1
 800eebc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eebe:	2300      	movs	r3, #0
 800eec0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d009      	beq.n	800eee0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	78fa      	ldrb	r2, [r7, #3]
 800eed6:	4611      	mov	r1, r2
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	4798      	blx	r3
 800eedc:	4603      	mov	r3, r0
 800eede:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eee0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eee2:	4618      	mov	r0, r3
 800eee4:	3710      	adds	r7, #16
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eeea:	b580      	push	{r7, lr}
 800eeec:	b084      	sub	sp, #16
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
 800eef2:	460b      	mov	r3, r1
 800eef4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eef6:	2300      	movs	r3, #0
 800eef8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef00:	685b      	ldr	r3, [r3, #4]
 800ef02:	78fa      	ldrb	r2, [r7, #3]
 800ef04:	4611      	mov	r1, r2
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	4798      	blx	r3
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ef10:	2303      	movs	r3, #3
 800ef12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3710      	adds	r7, #16
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}

0800ef1e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ef1e:	b580      	push	{r7, lr}
 800ef20:	b084      	sub	sp, #16
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	6078      	str	r0, [r7, #4]
 800ef26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ef2e:	6839      	ldr	r1, [r7, #0]
 800ef30:	4618      	mov	r0, r3
 800ef32:	f001 f846 	bl	800ffc2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	2201      	movs	r2, #1
 800ef3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ef44:	461a      	mov	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ef52:	f003 031f 	and.w	r3, r3, #31
 800ef56:	2b02      	cmp	r3, #2
 800ef58:	d01a      	beq.n	800ef90 <USBD_LL_SetupStage+0x72>
 800ef5a:	2b02      	cmp	r3, #2
 800ef5c:	d822      	bhi.n	800efa4 <USBD_LL_SetupStage+0x86>
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d002      	beq.n	800ef68 <USBD_LL_SetupStage+0x4a>
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d00a      	beq.n	800ef7c <USBD_LL_SetupStage+0x5e>
 800ef66:	e01d      	b.n	800efa4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ef6e:	4619      	mov	r1, r3
 800ef70:	6878      	ldr	r0, [r7, #4]
 800ef72:	f000 fa9d 	bl	800f4b0 <USBD_StdDevReq>
 800ef76:	4603      	mov	r3, r0
 800ef78:	73fb      	strb	r3, [r7, #15]
      break;
 800ef7a:	e020      	b.n	800efbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ef82:	4619      	mov	r1, r3
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f000 fb05 	bl	800f594 <USBD_StdItfReq>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ef8e:	e016      	b.n	800efbe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ef96:	4619      	mov	r1, r3
 800ef98:	6878      	ldr	r0, [r7, #4]
 800ef9a:	f000 fb67 	bl	800f66c <USBD_StdEPReq>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	73fb      	strb	r3, [r7, #15]
      break;
 800efa2:	e00c      	b.n	800efbe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800efaa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	4619      	mov	r1, r3
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f7ff fdfc 	bl	800ebb0 <USBD_LL_StallEP>
 800efb8:	4603      	mov	r3, r0
 800efba:	73fb      	strb	r3, [r7, #15]
      break;
 800efbc:	bf00      	nop
  }

  return ret;
 800efbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3710      	adds	r7, #16
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}

0800efc8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b086      	sub	sp, #24
 800efcc:	af00      	add	r7, sp, #0
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	460b      	mov	r3, r1
 800efd2:	607a      	str	r2, [r7, #4]
 800efd4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800efd6:	2300      	movs	r3, #0
 800efd8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800efda:	7afb      	ldrb	r3, [r7, #11]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d16e      	bne.n	800f0be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800efe6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800efee:	2b03      	cmp	r3, #3
 800eff0:	f040 8098 	bne.w	800f124 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	689a      	ldr	r2, [r3, #8]
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	429a      	cmp	r2, r3
 800effe:	d913      	bls.n	800f028 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	689a      	ldr	r2, [r3, #8]
 800f004:	693b      	ldr	r3, [r7, #16]
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	1ad2      	subs	r2, r2, r3
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	68da      	ldr	r2, [r3, #12]
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	689b      	ldr	r3, [r3, #8]
 800f016:	4293      	cmp	r3, r2
 800f018:	bf28      	it	cs
 800f01a:	4613      	movcs	r3, r2
 800f01c:	461a      	mov	r2, r3
 800f01e:	6879      	ldr	r1, [r7, #4]
 800f020:	68f8      	ldr	r0, [r7, #12]
 800f022:	f001 f9cf 	bl	80103c4 <USBD_CtlContinueRx>
 800f026:	e07d      	b.n	800f124 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f02e:	f003 031f 	and.w	r3, r3, #31
 800f032:	2b02      	cmp	r3, #2
 800f034:	d014      	beq.n	800f060 <USBD_LL_DataOutStage+0x98>
 800f036:	2b02      	cmp	r3, #2
 800f038:	d81d      	bhi.n	800f076 <USBD_LL_DataOutStage+0xae>
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d002      	beq.n	800f044 <USBD_LL_DataOutStage+0x7c>
 800f03e:	2b01      	cmp	r3, #1
 800f040:	d003      	beq.n	800f04a <USBD_LL_DataOutStage+0x82>
 800f042:	e018      	b.n	800f076 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f044:	2300      	movs	r3, #0
 800f046:	75bb      	strb	r3, [r7, #22]
            break;
 800f048:	e018      	b.n	800f07c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f050:	b2db      	uxtb	r3, r3
 800f052:	4619      	mov	r1, r3
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f000 f99e 	bl	800f396 <USBD_CoreFindIF>
 800f05a:	4603      	mov	r3, r0
 800f05c:	75bb      	strb	r3, [r7, #22]
            break;
 800f05e:	e00d      	b.n	800f07c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f066:	b2db      	uxtb	r3, r3
 800f068:	4619      	mov	r1, r3
 800f06a:	68f8      	ldr	r0, [r7, #12]
 800f06c:	f000 f9a0 	bl	800f3b0 <USBD_CoreFindEP>
 800f070:	4603      	mov	r3, r0
 800f072:	75bb      	strb	r3, [r7, #22]
            break;
 800f074:	e002      	b.n	800f07c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f076:	2300      	movs	r3, #0
 800f078:	75bb      	strb	r3, [r7, #22]
            break;
 800f07a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f07c:	7dbb      	ldrb	r3, [r7, #22]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d119      	bne.n	800f0b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f088:	b2db      	uxtb	r3, r3
 800f08a:	2b03      	cmp	r3, #3
 800f08c:	d113      	bne.n	800f0b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f08e:	7dba      	ldrb	r2, [r7, #22]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	32ae      	adds	r2, #174	@ 0xae
 800f094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d00b      	beq.n	800f0b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f09e:	7dba      	ldrb	r2, [r7, #22]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f0a6:	7dba      	ldrb	r2, [r7, #22]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	32ae      	adds	r2, #174	@ 0xae
 800f0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	68f8      	ldr	r0, [r7, #12]
 800f0b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f0b6:	68f8      	ldr	r0, [r7, #12]
 800f0b8:	f001 f995 	bl	80103e6 <USBD_CtlSendStatus>
 800f0bc:	e032      	b.n	800f124 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f0be:	7afb      	ldrb	r3, [r7, #11]
 800f0c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0c4:	b2db      	uxtb	r3, r3
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	68f8      	ldr	r0, [r7, #12]
 800f0ca:	f000 f971 	bl	800f3b0 <USBD_CoreFindEP>
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f0d2:	7dbb      	ldrb	r3, [r7, #22]
 800f0d4:	2bff      	cmp	r3, #255	@ 0xff
 800f0d6:	d025      	beq.n	800f124 <USBD_LL_DataOutStage+0x15c>
 800f0d8:	7dbb      	ldrb	r3, [r7, #22]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d122      	bne.n	800f124 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0e4:	b2db      	uxtb	r3, r3
 800f0e6:	2b03      	cmp	r3, #3
 800f0e8:	d117      	bne.n	800f11a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f0ea:	7dba      	ldrb	r2, [r7, #22]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	32ae      	adds	r2, #174	@ 0xae
 800f0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0f4:	699b      	ldr	r3, [r3, #24]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d00f      	beq.n	800f11a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f0fa:	7dba      	ldrb	r2, [r7, #22]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f102:	7dba      	ldrb	r2, [r7, #22]
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	32ae      	adds	r2, #174	@ 0xae
 800f108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f10c:	699b      	ldr	r3, [r3, #24]
 800f10e:	7afa      	ldrb	r2, [r7, #11]
 800f110:	4611      	mov	r1, r2
 800f112:	68f8      	ldr	r0, [r7, #12]
 800f114:	4798      	blx	r3
 800f116:	4603      	mov	r3, r0
 800f118:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f11a:	7dfb      	ldrb	r3, [r7, #23]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d001      	beq.n	800f124 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f120:	7dfb      	ldrb	r3, [r7, #23]
 800f122:	e000      	b.n	800f126 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f124:	2300      	movs	r3, #0
}
 800f126:	4618      	mov	r0, r3
 800f128:	3718      	adds	r7, #24
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f12e:	b580      	push	{r7, lr}
 800f130:	b086      	sub	sp, #24
 800f132:	af00      	add	r7, sp, #0
 800f134:	60f8      	str	r0, [r7, #12]
 800f136:	460b      	mov	r3, r1
 800f138:	607a      	str	r2, [r7, #4]
 800f13a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f13c:	7afb      	ldrb	r3, [r7, #11]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d16f      	bne.n	800f222 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	3314      	adds	r3, #20
 800f146:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f14e:	2b02      	cmp	r3, #2
 800f150:	d15a      	bne.n	800f208 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f152:	693b      	ldr	r3, [r7, #16]
 800f154:	689a      	ldr	r2, [r3, #8]
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d914      	bls.n	800f188 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	689a      	ldr	r2, [r3, #8]
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	1ad2      	subs	r2, r2, r3
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	689b      	ldr	r3, [r3, #8]
 800f170:	461a      	mov	r2, r3
 800f172:	6879      	ldr	r1, [r7, #4]
 800f174:	68f8      	ldr	r0, [r7, #12]
 800f176:	f001 f8f7 	bl	8010368 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f17a:	2300      	movs	r3, #0
 800f17c:	2200      	movs	r2, #0
 800f17e:	2100      	movs	r1, #0
 800f180:	68f8      	ldr	r0, [r7, #12]
 800f182:	f7ff fda7 	bl	800ecd4 <USBD_LL_PrepareReceive>
 800f186:	e03f      	b.n	800f208 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f188:	693b      	ldr	r3, [r7, #16]
 800f18a:	68da      	ldr	r2, [r3, #12]
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	429a      	cmp	r2, r3
 800f192:	d11c      	bne.n	800f1ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f194:	693b      	ldr	r3, [r7, #16]
 800f196:	685a      	ldr	r2, [r3, #4]
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f19c:	429a      	cmp	r2, r3
 800f19e:	d316      	bcc.n	800f1ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	685a      	ldr	r2, [r3, #4]
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d20f      	bcs.n	800f1ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	2100      	movs	r1, #0
 800f1b2:	68f8      	ldr	r0, [r7, #12]
 800f1b4:	f001 f8d8 	bl	8010368 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	2100      	movs	r1, #0
 800f1c6:	68f8      	ldr	r0, [r7, #12]
 800f1c8:	f7ff fd84 	bl	800ecd4 <USBD_LL_PrepareReceive>
 800f1cc:	e01c      	b.n	800f208 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	2b03      	cmp	r3, #3
 800f1d8:	d10f      	bne.n	800f1fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1e0:	68db      	ldr	r3, [r3, #12]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d009      	beq.n	800f1fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	68f8      	ldr	r0, [r7, #12]
 800f1f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f1fa:	2180      	movs	r1, #128	@ 0x80
 800f1fc:	68f8      	ldr	r0, [r7, #12]
 800f1fe:	f7ff fcd7 	bl	800ebb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f202:	68f8      	ldr	r0, [r7, #12]
 800f204:	f001 f902 	bl	801040c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d03a      	beq.n	800f288 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f212:	68f8      	ldr	r0, [r7, #12]
 800f214:	f7ff fe42 	bl	800ee9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2200      	movs	r2, #0
 800f21c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f220:	e032      	b.n	800f288 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f222:	7afb      	ldrb	r3, [r7, #11]
 800f224:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f228:	b2db      	uxtb	r3, r3
 800f22a:	4619      	mov	r1, r3
 800f22c:	68f8      	ldr	r0, [r7, #12]
 800f22e:	f000 f8bf 	bl	800f3b0 <USBD_CoreFindEP>
 800f232:	4603      	mov	r3, r0
 800f234:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f236:	7dfb      	ldrb	r3, [r7, #23]
 800f238:	2bff      	cmp	r3, #255	@ 0xff
 800f23a:	d025      	beq.n	800f288 <USBD_LL_DataInStage+0x15a>
 800f23c:	7dfb      	ldrb	r3, [r7, #23]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d122      	bne.n	800f288 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	2b03      	cmp	r3, #3
 800f24c:	d11c      	bne.n	800f288 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f24e:	7dfa      	ldrb	r2, [r7, #23]
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	32ae      	adds	r2, #174	@ 0xae
 800f254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f258:	695b      	ldr	r3, [r3, #20]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d014      	beq.n	800f288 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f25e:	7dfa      	ldrb	r2, [r7, #23]
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f266:	7dfa      	ldrb	r2, [r7, #23]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	32ae      	adds	r2, #174	@ 0xae
 800f26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f270:	695b      	ldr	r3, [r3, #20]
 800f272:	7afa      	ldrb	r2, [r7, #11]
 800f274:	4611      	mov	r1, r2
 800f276:	68f8      	ldr	r0, [r7, #12]
 800f278:	4798      	blx	r3
 800f27a:	4603      	mov	r3, r0
 800f27c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f27e:	7dbb      	ldrb	r3, [r7, #22]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d001      	beq.n	800f288 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f284:	7dbb      	ldrb	r3, [r7, #22]
 800f286:	e000      	b.n	800f28a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f288:	2300      	movs	r3, #0
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3718      	adds	r7, #24
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}

0800f292 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f292:	b580      	push	{r7, lr}
 800f294:	b084      	sub	sp, #16
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f29a:	2300      	movs	r3, #0
 800f29c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2201      	movs	r2, #1
 800f2a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d014      	beq.n	800f2f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d00e      	beq.n	800f2f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2e0:	685b      	ldr	r3, [r3, #4]
 800f2e2:	687a      	ldr	r2, [r7, #4]
 800f2e4:	6852      	ldr	r2, [r2, #4]
 800f2e6:	b2d2      	uxtb	r2, r2
 800f2e8:	4611      	mov	r1, r2
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	4798      	blx	r3
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d001      	beq.n	800f2f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f2f4:	2303      	movs	r3, #3
 800f2f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f2f8:	2340      	movs	r3, #64	@ 0x40
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	2100      	movs	r1, #0
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f7ff fc1d 	bl	800eb3e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2201      	movs	r2, #1
 800f308:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	2240      	movs	r2, #64	@ 0x40
 800f310:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f314:	2340      	movs	r3, #64	@ 0x40
 800f316:	2200      	movs	r2, #0
 800f318:	2180      	movs	r1, #128	@ 0x80
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f7ff fc0f 	bl	800eb3e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2201      	movs	r2, #1
 800f324:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2240      	movs	r2, #64	@ 0x40
 800f32a:	621a      	str	r2, [r3, #32]

  return ret;
 800f32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3710      	adds	r7, #16
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}

0800f336 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f336:	b480      	push	{r7}
 800f338:	b083      	sub	sp, #12
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
 800f33e:	460b      	mov	r3, r1
 800f340:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	78fa      	ldrb	r2, [r7, #3]
 800f346:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f348:	2300      	movs	r3, #0
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	370c      	adds	r7, #12
 800f34e:	46bd      	mov	sp, r7
 800f350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f354:	4770      	bx	lr

0800f356 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f356:	b580      	push	{r7, lr}
 800f358:	b082      	sub	sp, #8
 800f35a:	af00      	add	r7, sp, #0
 800f35c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f364:	b2db      	uxtb	r3, r3
 800f366:	2b03      	cmp	r3, #3
 800f368:	d110      	bne.n	800f38c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f370:	2b00      	cmp	r3, #0
 800f372:	d00b      	beq.n	800f38c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f37a:	69db      	ldr	r3, [r3, #28]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d005      	beq.n	800f38c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f386:	69db      	ldr	r3, [r3, #28]
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f38c:	2300      	movs	r3, #0
}
 800f38e:	4618      	mov	r0, r3
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}

0800f396 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f396:	b480      	push	{r7}
 800f398:	b083      	sub	sp, #12
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
 800f39e:	460b      	mov	r3, r1
 800f3a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f3a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	370c      	adds	r7, #12
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ae:	4770      	bx	lr

0800f3b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	460b      	mov	r3, r1
 800f3ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f3bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	370c      	adds	r7, #12
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr

0800f3ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b086      	sub	sp, #24
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
 800f3d2:	460b      	mov	r3, r1
 800f3d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	885b      	ldrh	r3, [r3, #2]
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	68fa      	ldr	r2, [r7, #12]
 800f3ea:	7812      	ldrb	r2, [r2, #0]
 800f3ec:	4293      	cmp	r3, r2
 800f3ee:	d91f      	bls.n	800f430 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f3f6:	e013      	b.n	800f420 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f3f8:	f107 030a 	add.w	r3, r7, #10
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	6978      	ldr	r0, [r7, #20]
 800f400:	f000 f81b 	bl	800f43a <USBD_GetNextDesc>
 800f404:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	785b      	ldrb	r3, [r3, #1]
 800f40a:	2b05      	cmp	r3, #5
 800f40c:	d108      	bne.n	800f420 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f40e:	697b      	ldr	r3, [r7, #20]
 800f410:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	789b      	ldrb	r3, [r3, #2]
 800f416:	78fa      	ldrb	r2, [r7, #3]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d008      	beq.n	800f42e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f41c:	2300      	movs	r3, #0
 800f41e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	885b      	ldrh	r3, [r3, #2]
 800f424:	b29a      	uxth	r2, r3
 800f426:	897b      	ldrh	r3, [r7, #10]
 800f428:	429a      	cmp	r2, r3
 800f42a:	d8e5      	bhi.n	800f3f8 <USBD_GetEpDesc+0x2e>
 800f42c:	e000      	b.n	800f430 <USBD_GetEpDesc+0x66>
          break;
 800f42e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f430:	693b      	ldr	r3, [r7, #16]
}
 800f432:	4618      	mov	r0, r3
 800f434:	3718      	adds	r7, #24
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}

0800f43a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f43a:	b480      	push	{r7}
 800f43c:	b085      	sub	sp, #20
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
 800f442:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	881b      	ldrh	r3, [r3, #0]
 800f44c:	68fa      	ldr	r2, [r7, #12]
 800f44e:	7812      	ldrb	r2, [r2, #0]
 800f450:	4413      	add	r3, r2
 800f452:	b29a      	uxth	r2, r3
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	461a      	mov	r2, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	4413      	add	r3, r2
 800f462:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f464:	68fb      	ldr	r3, [r7, #12]
}
 800f466:	4618      	mov	r0, r3
 800f468:	3714      	adds	r7, #20
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr

0800f472 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f472:	b480      	push	{r7}
 800f474:	b087      	sub	sp, #28
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f47e:	697b      	ldr	r3, [r7, #20]
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f484:	697b      	ldr	r3, [r7, #20]
 800f486:	3301      	adds	r3, #1
 800f488:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f490:	8a3b      	ldrh	r3, [r7, #16]
 800f492:	021b      	lsls	r3, r3, #8
 800f494:	b21a      	sxth	r2, r3
 800f496:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f49a:	4313      	orrs	r3, r2
 800f49c:	b21b      	sxth	r3, r3
 800f49e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f4a0:	89fb      	ldrh	r3, [r7, #14]
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	371c      	adds	r7, #28
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr
	...

0800f4b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f4c6:	2b40      	cmp	r3, #64	@ 0x40
 800f4c8:	d005      	beq.n	800f4d6 <USBD_StdDevReq+0x26>
 800f4ca:	2b40      	cmp	r3, #64	@ 0x40
 800f4cc:	d857      	bhi.n	800f57e <USBD_StdDevReq+0xce>
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d00f      	beq.n	800f4f2 <USBD_StdDevReq+0x42>
 800f4d2:	2b20      	cmp	r3, #32
 800f4d4:	d153      	bne.n	800f57e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	32ae      	adds	r2, #174	@ 0xae
 800f4e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	6839      	ldr	r1, [r7, #0]
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	4798      	blx	r3
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	73fb      	strb	r3, [r7, #15]
      break;
 800f4f0:	e04a      	b.n	800f588 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f4f2:	683b      	ldr	r3, [r7, #0]
 800f4f4:	785b      	ldrb	r3, [r3, #1]
 800f4f6:	2b09      	cmp	r3, #9
 800f4f8:	d83b      	bhi.n	800f572 <USBD_StdDevReq+0xc2>
 800f4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800f500 <USBD_StdDevReq+0x50>)
 800f4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f500:	0800f555 	.word	0x0800f555
 800f504:	0800f569 	.word	0x0800f569
 800f508:	0800f573 	.word	0x0800f573
 800f50c:	0800f55f 	.word	0x0800f55f
 800f510:	0800f573 	.word	0x0800f573
 800f514:	0800f533 	.word	0x0800f533
 800f518:	0800f529 	.word	0x0800f529
 800f51c:	0800f573 	.word	0x0800f573
 800f520:	0800f54b 	.word	0x0800f54b
 800f524:	0800f53d 	.word	0x0800f53d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f528:	6839      	ldr	r1, [r7, #0]
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 fa3c 	bl	800f9a8 <USBD_GetDescriptor>
          break;
 800f530:	e024      	b.n	800f57c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f532:	6839      	ldr	r1, [r7, #0]
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 fba1 	bl	800fc7c <USBD_SetAddress>
          break;
 800f53a:	e01f      	b.n	800f57c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f53c:	6839      	ldr	r1, [r7, #0]
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f000 fbe0 	bl	800fd04 <USBD_SetConfig>
 800f544:	4603      	mov	r3, r0
 800f546:	73fb      	strb	r3, [r7, #15]
          break;
 800f548:	e018      	b.n	800f57c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f54a:	6839      	ldr	r1, [r7, #0]
 800f54c:	6878      	ldr	r0, [r7, #4]
 800f54e:	f000 fc83 	bl	800fe58 <USBD_GetConfig>
          break;
 800f552:	e013      	b.n	800f57c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f554:	6839      	ldr	r1, [r7, #0]
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	f000 fcb4 	bl	800fec4 <USBD_GetStatus>
          break;
 800f55c:	e00e      	b.n	800f57c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f55e:	6839      	ldr	r1, [r7, #0]
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 fce3 	bl	800ff2c <USBD_SetFeature>
          break;
 800f566:	e009      	b.n	800f57c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f568:	6839      	ldr	r1, [r7, #0]
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 fd07 	bl	800ff7e <USBD_ClrFeature>
          break;
 800f570:	e004      	b.n	800f57c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f572:	6839      	ldr	r1, [r7, #0]
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 fd5e 	bl	8010036 <USBD_CtlError>
          break;
 800f57a:	bf00      	nop
      }
      break;
 800f57c:	e004      	b.n	800f588 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f57e:	6839      	ldr	r1, [r7, #0]
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f000 fd58 	bl	8010036 <USBD_CtlError>
      break;
 800f586:	bf00      	nop
  }

  return ret;
 800f588:	7bfb      	ldrb	r3, [r7, #15]
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3710      	adds	r7, #16
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
 800f592:	bf00      	nop

0800f594 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b084      	sub	sp, #16
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f5aa:	2b40      	cmp	r3, #64	@ 0x40
 800f5ac:	d005      	beq.n	800f5ba <USBD_StdItfReq+0x26>
 800f5ae:	2b40      	cmp	r3, #64	@ 0x40
 800f5b0:	d852      	bhi.n	800f658 <USBD_StdItfReq+0xc4>
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d001      	beq.n	800f5ba <USBD_StdItfReq+0x26>
 800f5b6:	2b20      	cmp	r3, #32
 800f5b8:	d14e      	bne.n	800f658 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5c0:	b2db      	uxtb	r3, r3
 800f5c2:	3b01      	subs	r3, #1
 800f5c4:	2b02      	cmp	r3, #2
 800f5c6:	d840      	bhi.n	800f64a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f5c8:	683b      	ldr	r3, [r7, #0]
 800f5ca:	889b      	ldrh	r3, [r3, #4]
 800f5cc:	b2db      	uxtb	r3, r3
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d836      	bhi.n	800f640 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	889b      	ldrh	r3, [r3, #4]
 800f5d6:	b2db      	uxtb	r3, r3
 800f5d8:	4619      	mov	r1, r3
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f7ff fedb 	bl	800f396 <USBD_CoreFindIF>
 800f5e0:	4603      	mov	r3, r0
 800f5e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f5e4:	7bbb      	ldrb	r3, [r7, #14]
 800f5e6:	2bff      	cmp	r3, #255	@ 0xff
 800f5e8:	d01d      	beq.n	800f626 <USBD_StdItfReq+0x92>
 800f5ea:	7bbb      	ldrb	r3, [r7, #14]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d11a      	bne.n	800f626 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f5f0:	7bba      	ldrb	r2, [r7, #14]
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	32ae      	adds	r2, #174	@ 0xae
 800f5f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5fa:	689b      	ldr	r3, [r3, #8]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d00f      	beq.n	800f620 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f600:	7bba      	ldrb	r2, [r7, #14]
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f608:	7bba      	ldrb	r2, [r7, #14]
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	32ae      	adds	r2, #174	@ 0xae
 800f60e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f612:	689b      	ldr	r3, [r3, #8]
 800f614:	6839      	ldr	r1, [r7, #0]
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	4798      	blx	r3
 800f61a:	4603      	mov	r3, r0
 800f61c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f61e:	e004      	b.n	800f62a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f620:	2303      	movs	r3, #3
 800f622:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f624:	e001      	b.n	800f62a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f626:	2303      	movs	r3, #3
 800f628:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	88db      	ldrh	r3, [r3, #6]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d110      	bne.n	800f654 <USBD_StdItfReq+0xc0>
 800f632:	7bfb      	ldrb	r3, [r7, #15]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d10d      	bne.n	800f654 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 fed4 	bl	80103e6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f63e:	e009      	b.n	800f654 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f640:	6839      	ldr	r1, [r7, #0]
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 fcf7 	bl	8010036 <USBD_CtlError>
          break;
 800f648:	e004      	b.n	800f654 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f64a:	6839      	ldr	r1, [r7, #0]
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f000 fcf2 	bl	8010036 <USBD_CtlError>
          break;
 800f652:	e000      	b.n	800f656 <USBD_StdItfReq+0xc2>
          break;
 800f654:	bf00      	nop
      }
      break;
 800f656:	e004      	b.n	800f662 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f658:	6839      	ldr	r1, [r7, #0]
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f000 fceb 	bl	8010036 <USBD_CtlError>
      break;
 800f660:	bf00      	nop
  }

  return ret;
 800f662:	7bfb      	ldrb	r3, [r7, #15]
}
 800f664:	4618      	mov	r0, r3
 800f666:	3710      	adds	r7, #16
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f676:	2300      	movs	r3, #0
 800f678:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	889b      	ldrh	r3, [r3, #4]
 800f67e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f680:	683b      	ldr	r3, [r7, #0]
 800f682:	781b      	ldrb	r3, [r3, #0]
 800f684:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f688:	2b40      	cmp	r3, #64	@ 0x40
 800f68a:	d007      	beq.n	800f69c <USBD_StdEPReq+0x30>
 800f68c:	2b40      	cmp	r3, #64	@ 0x40
 800f68e:	f200 817f 	bhi.w	800f990 <USBD_StdEPReq+0x324>
 800f692:	2b00      	cmp	r3, #0
 800f694:	d02a      	beq.n	800f6ec <USBD_StdEPReq+0x80>
 800f696:	2b20      	cmp	r3, #32
 800f698:	f040 817a 	bne.w	800f990 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f69c:	7bbb      	ldrb	r3, [r7, #14]
 800f69e:	4619      	mov	r1, r3
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f7ff fe85 	bl	800f3b0 <USBD_CoreFindEP>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f6aa:	7b7b      	ldrb	r3, [r7, #13]
 800f6ac:	2bff      	cmp	r3, #255	@ 0xff
 800f6ae:	f000 8174 	beq.w	800f99a <USBD_StdEPReq+0x32e>
 800f6b2:	7b7b      	ldrb	r3, [r7, #13]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	f040 8170 	bne.w	800f99a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f6ba:	7b7a      	ldrb	r2, [r7, #13]
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f6c2:	7b7a      	ldrb	r2, [r7, #13]
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	32ae      	adds	r2, #174	@ 0xae
 800f6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6cc:	689b      	ldr	r3, [r3, #8]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	f000 8163 	beq.w	800f99a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f6d4:	7b7a      	ldrb	r2, [r7, #13]
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	32ae      	adds	r2, #174	@ 0xae
 800f6da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6de:	689b      	ldr	r3, [r3, #8]
 800f6e0:	6839      	ldr	r1, [r7, #0]
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	4798      	blx	r3
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f6ea:	e156      	b.n	800f99a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f6ec:	683b      	ldr	r3, [r7, #0]
 800f6ee:	785b      	ldrb	r3, [r3, #1]
 800f6f0:	2b03      	cmp	r3, #3
 800f6f2:	d008      	beq.n	800f706 <USBD_StdEPReq+0x9a>
 800f6f4:	2b03      	cmp	r3, #3
 800f6f6:	f300 8145 	bgt.w	800f984 <USBD_StdEPReq+0x318>
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	f000 809b 	beq.w	800f836 <USBD_StdEPReq+0x1ca>
 800f700:	2b01      	cmp	r3, #1
 800f702:	d03c      	beq.n	800f77e <USBD_StdEPReq+0x112>
 800f704:	e13e      	b.n	800f984 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	2b02      	cmp	r3, #2
 800f710:	d002      	beq.n	800f718 <USBD_StdEPReq+0xac>
 800f712:	2b03      	cmp	r3, #3
 800f714:	d016      	beq.n	800f744 <USBD_StdEPReq+0xd8>
 800f716:	e02c      	b.n	800f772 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f718:	7bbb      	ldrb	r3, [r7, #14]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00d      	beq.n	800f73a <USBD_StdEPReq+0xce>
 800f71e:	7bbb      	ldrb	r3, [r7, #14]
 800f720:	2b80      	cmp	r3, #128	@ 0x80
 800f722:	d00a      	beq.n	800f73a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f724:	7bbb      	ldrb	r3, [r7, #14]
 800f726:	4619      	mov	r1, r3
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f7ff fa41 	bl	800ebb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f72e:	2180      	movs	r1, #128	@ 0x80
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f7ff fa3d 	bl	800ebb0 <USBD_LL_StallEP>
 800f736:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f738:	e020      	b.n	800f77c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f73a:	6839      	ldr	r1, [r7, #0]
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f000 fc7a 	bl	8010036 <USBD_CtlError>
              break;
 800f742:	e01b      	b.n	800f77c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	885b      	ldrh	r3, [r3, #2]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d10e      	bne.n	800f76a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f74c:	7bbb      	ldrb	r3, [r7, #14]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00b      	beq.n	800f76a <USBD_StdEPReq+0xfe>
 800f752:	7bbb      	ldrb	r3, [r7, #14]
 800f754:	2b80      	cmp	r3, #128	@ 0x80
 800f756:	d008      	beq.n	800f76a <USBD_StdEPReq+0xfe>
 800f758:	683b      	ldr	r3, [r7, #0]
 800f75a:	88db      	ldrh	r3, [r3, #6]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d104      	bne.n	800f76a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f760:	7bbb      	ldrb	r3, [r7, #14]
 800f762:	4619      	mov	r1, r3
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f7ff fa23 	bl	800ebb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 fe3b 	bl	80103e6 <USBD_CtlSendStatus>

              break;
 800f770:	e004      	b.n	800f77c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f772:	6839      	ldr	r1, [r7, #0]
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f000 fc5e 	bl	8010036 <USBD_CtlError>
              break;
 800f77a:	bf00      	nop
          }
          break;
 800f77c:	e107      	b.n	800f98e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f784:	b2db      	uxtb	r3, r3
 800f786:	2b02      	cmp	r3, #2
 800f788:	d002      	beq.n	800f790 <USBD_StdEPReq+0x124>
 800f78a:	2b03      	cmp	r3, #3
 800f78c:	d016      	beq.n	800f7bc <USBD_StdEPReq+0x150>
 800f78e:	e04b      	b.n	800f828 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f790:	7bbb      	ldrb	r3, [r7, #14]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d00d      	beq.n	800f7b2 <USBD_StdEPReq+0x146>
 800f796:	7bbb      	ldrb	r3, [r7, #14]
 800f798:	2b80      	cmp	r3, #128	@ 0x80
 800f79a:	d00a      	beq.n	800f7b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f79c:	7bbb      	ldrb	r3, [r7, #14]
 800f79e:	4619      	mov	r1, r3
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f7ff fa05 	bl	800ebb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f7a6:	2180      	movs	r1, #128	@ 0x80
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f7ff fa01 	bl	800ebb0 <USBD_LL_StallEP>
 800f7ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f7b0:	e040      	b.n	800f834 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f7b2:	6839      	ldr	r1, [r7, #0]
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	f000 fc3e 	bl	8010036 <USBD_CtlError>
              break;
 800f7ba:	e03b      	b.n	800f834 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	885b      	ldrh	r3, [r3, #2]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d136      	bne.n	800f832 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f7c4:	7bbb      	ldrb	r3, [r7, #14]
 800f7c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d004      	beq.n	800f7d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f7ce:	7bbb      	ldrb	r3, [r7, #14]
 800f7d0:	4619      	mov	r1, r3
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f7ff fa05 	bl	800ebe2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f000 fe04 	bl	80103e6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f7de:	7bbb      	ldrb	r3, [r7, #14]
 800f7e0:	4619      	mov	r1, r3
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f7ff fde4 	bl	800f3b0 <USBD_CoreFindEP>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f7ec:	7b7b      	ldrb	r3, [r7, #13]
 800f7ee:	2bff      	cmp	r3, #255	@ 0xff
 800f7f0:	d01f      	beq.n	800f832 <USBD_StdEPReq+0x1c6>
 800f7f2:	7b7b      	ldrb	r3, [r7, #13]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d11c      	bne.n	800f832 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f7f8:	7b7a      	ldrb	r2, [r7, #13]
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f800:	7b7a      	ldrb	r2, [r7, #13]
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	32ae      	adds	r2, #174	@ 0xae
 800f806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f80a:	689b      	ldr	r3, [r3, #8]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d010      	beq.n	800f832 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f810:	7b7a      	ldrb	r2, [r7, #13]
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	32ae      	adds	r2, #174	@ 0xae
 800f816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f81a:	689b      	ldr	r3, [r3, #8]
 800f81c:	6839      	ldr	r1, [r7, #0]
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	4798      	blx	r3
 800f822:	4603      	mov	r3, r0
 800f824:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f826:	e004      	b.n	800f832 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f828:	6839      	ldr	r1, [r7, #0]
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f000 fc03 	bl	8010036 <USBD_CtlError>
              break;
 800f830:	e000      	b.n	800f834 <USBD_StdEPReq+0x1c8>
              break;
 800f832:	bf00      	nop
          }
          break;
 800f834:	e0ab      	b.n	800f98e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	2b02      	cmp	r3, #2
 800f840:	d002      	beq.n	800f848 <USBD_StdEPReq+0x1dc>
 800f842:	2b03      	cmp	r3, #3
 800f844:	d032      	beq.n	800f8ac <USBD_StdEPReq+0x240>
 800f846:	e097      	b.n	800f978 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f848:	7bbb      	ldrb	r3, [r7, #14]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d007      	beq.n	800f85e <USBD_StdEPReq+0x1f2>
 800f84e:	7bbb      	ldrb	r3, [r7, #14]
 800f850:	2b80      	cmp	r3, #128	@ 0x80
 800f852:	d004      	beq.n	800f85e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f854:	6839      	ldr	r1, [r7, #0]
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 fbed 	bl	8010036 <USBD_CtlError>
                break;
 800f85c:	e091      	b.n	800f982 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f85e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f862:	2b00      	cmp	r3, #0
 800f864:	da0b      	bge.n	800f87e <USBD_StdEPReq+0x212>
 800f866:	7bbb      	ldrb	r3, [r7, #14]
 800f868:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f86c:	4613      	mov	r3, r2
 800f86e:	009b      	lsls	r3, r3, #2
 800f870:	4413      	add	r3, r2
 800f872:	009b      	lsls	r3, r3, #2
 800f874:	3310      	adds	r3, #16
 800f876:	687a      	ldr	r2, [r7, #4]
 800f878:	4413      	add	r3, r2
 800f87a:	3304      	adds	r3, #4
 800f87c:	e00b      	b.n	800f896 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f87e:	7bbb      	ldrb	r3, [r7, #14]
 800f880:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f884:	4613      	mov	r3, r2
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	4413      	add	r3, r2
 800f88a:	009b      	lsls	r3, r3, #2
 800f88c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f890:	687a      	ldr	r2, [r7, #4]
 800f892:	4413      	add	r3, r2
 800f894:	3304      	adds	r3, #4
 800f896:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	2200      	movs	r2, #0
 800f89c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	2202      	movs	r2, #2
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f000 fd44 	bl	8010332 <USBD_CtlSendData>
              break;
 800f8aa:	e06a      	b.n	800f982 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f8ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	da11      	bge.n	800f8d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f8b4:	7bbb      	ldrb	r3, [r7, #14]
 800f8b6:	f003 020f 	and.w	r2, r3, #15
 800f8ba:	6879      	ldr	r1, [r7, #4]
 800f8bc:	4613      	mov	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4413      	add	r3, r2
 800f8c2:	009b      	lsls	r3, r3, #2
 800f8c4:	440b      	add	r3, r1
 800f8c6:	3324      	adds	r3, #36	@ 0x24
 800f8c8:	881b      	ldrh	r3, [r3, #0]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d117      	bne.n	800f8fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f8ce:	6839      	ldr	r1, [r7, #0]
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f000 fbb0 	bl	8010036 <USBD_CtlError>
                  break;
 800f8d6:	e054      	b.n	800f982 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f8d8:	7bbb      	ldrb	r3, [r7, #14]
 800f8da:	f003 020f 	and.w	r2, r3, #15
 800f8de:	6879      	ldr	r1, [r7, #4]
 800f8e0:	4613      	mov	r3, r2
 800f8e2:	009b      	lsls	r3, r3, #2
 800f8e4:	4413      	add	r3, r2
 800f8e6:	009b      	lsls	r3, r3, #2
 800f8e8:	440b      	add	r3, r1
 800f8ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f8ee:	881b      	ldrh	r3, [r3, #0]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d104      	bne.n	800f8fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f8f4:	6839      	ldr	r1, [r7, #0]
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f000 fb9d 	bl	8010036 <USBD_CtlError>
                  break;
 800f8fc:	e041      	b.n	800f982 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f902:	2b00      	cmp	r3, #0
 800f904:	da0b      	bge.n	800f91e <USBD_StdEPReq+0x2b2>
 800f906:	7bbb      	ldrb	r3, [r7, #14]
 800f908:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f90c:	4613      	mov	r3, r2
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	4413      	add	r3, r2
 800f912:	009b      	lsls	r3, r3, #2
 800f914:	3310      	adds	r3, #16
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	4413      	add	r3, r2
 800f91a:	3304      	adds	r3, #4
 800f91c:	e00b      	b.n	800f936 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f91e:	7bbb      	ldrb	r3, [r7, #14]
 800f920:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f924:	4613      	mov	r3, r2
 800f926:	009b      	lsls	r3, r3, #2
 800f928:	4413      	add	r3, r2
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f930:	687a      	ldr	r2, [r7, #4]
 800f932:	4413      	add	r3, r2
 800f934:	3304      	adds	r3, #4
 800f936:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f938:	7bbb      	ldrb	r3, [r7, #14]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d002      	beq.n	800f944 <USBD_StdEPReq+0x2d8>
 800f93e:	7bbb      	ldrb	r3, [r7, #14]
 800f940:	2b80      	cmp	r3, #128	@ 0x80
 800f942:	d103      	bne.n	800f94c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	2200      	movs	r2, #0
 800f948:	601a      	str	r2, [r3, #0]
 800f94a:	e00e      	b.n	800f96a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f94c:	7bbb      	ldrb	r3, [r7, #14]
 800f94e:	4619      	mov	r1, r3
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f7ff f95f 	bl	800ec14 <USBD_LL_IsStallEP>
 800f956:	4603      	mov	r3, r0
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d003      	beq.n	800f964 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f95c:	68bb      	ldr	r3, [r7, #8]
 800f95e:	2201      	movs	r2, #1
 800f960:	601a      	str	r2, [r3, #0]
 800f962:	e002      	b.n	800f96a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	2200      	movs	r2, #0
 800f968:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f96a:	68bb      	ldr	r3, [r7, #8]
 800f96c:	2202      	movs	r2, #2
 800f96e:	4619      	mov	r1, r3
 800f970:	6878      	ldr	r0, [r7, #4]
 800f972:	f000 fcde 	bl	8010332 <USBD_CtlSendData>
              break;
 800f976:	e004      	b.n	800f982 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f978:	6839      	ldr	r1, [r7, #0]
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f000 fb5b 	bl	8010036 <USBD_CtlError>
              break;
 800f980:	bf00      	nop
          }
          break;
 800f982:	e004      	b.n	800f98e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f984:	6839      	ldr	r1, [r7, #0]
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f000 fb55 	bl	8010036 <USBD_CtlError>
          break;
 800f98c:	bf00      	nop
      }
      break;
 800f98e:	e005      	b.n	800f99c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f990:	6839      	ldr	r1, [r7, #0]
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f000 fb4f 	bl	8010036 <USBD_CtlError>
      break;
 800f998:	e000      	b.n	800f99c <USBD_StdEPReq+0x330>
      break;
 800f99a:	bf00      	nop
  }

  return ret;
 800f99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
	...

0800f9a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b084      	sub	sp, #16
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f9b2:	2300      	movs	r3, #0
 800f9b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	885b      	ldrh	r3, [r3, #2]
 800f9c2:	0a1b      	lsrs	r3, r3, #8
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	3b01      	subs	r3, #1
 800f9c8:	2b06      	cmp	r3, #6
 800f9ca:	f200 8128 	bhi.w	800fc1e <USBD_GetDescriptor+0x276>
 800f9ce:	a201      	add	r2, pc, #4	@ (adr r2, 800f9d4 <USBD_GetDescriptor+0x2c>)
 800f9d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d4:	0800f9f1 	.word	0x0800f9f1
 800f9d8:	0800fa09 	.word	0x0800fa09
 800f9dc:	0800fa49 	.word	0x0800fa49
 800f9e0:	0800fc1f 	.word	0x0800fc1f
 800f9e4:	0800fc1f 	.word	0x0800fc1f
 800f9e8:	0800fbbf 	.word	0x0800fbbf
 800f9ec:	0800fbeb 	.word	0x0800fbeb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	687a      	ldr	r2, [r7, #4]
 800f9fa:	7c12      	ldrb	r2, [r2, #16]
 800f9fc:	f107 0108 	add.w	r1, r7, #8
 800fa00:	4610      	mov	r0, r2
 800fa02:	4798      	blx	r3
 800fa04:	60f8      	str	r0, [r7, #12]
      break;
 800fa06:	e112      	b.n	800fc2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	7c1b      	ldrb	r3, [r3, #16]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d10d      	bne.n	800fa2c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa18:	f107 0208 	add.w	r2, r7, #8
 800fa1c:	4610      	mov	r0, r2
 800fa1e:	4798      	blx	r3
 800fa20:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	3301      	adds	r3, #1
 800fa26:	2202      	movs	r2, #2
 800fa28:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fa2a:	e100      	b.n	800fc2e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa34:	f107 0208 	add.w	r2, r7, #8
 800fa38:	4610      	mov	r0, r2
 800fa3a:	4798      	blx	r3
 800fa3c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	3301      	adds	r3, #1
 800fa42:	2202      	movs	r2, #2
 800fa44:	701a      	strb	r2, [r3, #0]
      break;
 800fa46:	e0f2      	b.n	800fc2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	885b      	ldrh	r3, [r3, #2]
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	2b05      	cmp	r3, #5
 800fa50:	f200 80ac 	bhi.w	800fbac <USBD_GetDescriptor+0x204>
 800fa54:	a201      	add	r2, pc, #4	@ (adr r2, 800fa5c <USBD_GetDescriptor+0xb4>)
 800fa56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa5a:	bf00      	nop
 800fa5c:	0800fa75 	.word	0x0800fa75
 800fa60:	0800faa9 	.word	0x0800faa9
 800fa64:	0800fadd 	.word	0x0800fadd
 800fa68:	0800fb11 	.word	0x0800fb11
 800fa6c:	0800fb45 	.word	0x0800fb45
 800fa70:	0800fb79 	.word	0x0800fb79
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa7a:	685b      	ldr	r3, [r3, #4]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d00b      	beq.n	800fa98 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa86:	685b      	ldr	r3, [r3, #4]
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	7c12      	ldrb	r2, [r2, #16]
 800fa8c:	f107 0108 	add.w	r1, r7, #8
 800fa90:	4610      	mov	r0, r2
 800fa92:	4798      	blx	r3
 800fa94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fa96:	e091      	b.n	800fbbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fa98:	6839      	ldr	r1, [r7, #0]
 800fa9a:	6878      	ldr	r0, [r7, #4]
 800fa9c:	f000 facb 	bl	8010036 <USBD_CtlError>
            err++;
 800faa0:	7afb      	ldrb	r3, [r7, #11]
 800faa2:	3301      	adds	r3, #1
 800faa4:	72fb      	strb	r3, [r7, #11]
          break;
 800faa6:	e089      	b.n	800fbbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d00b      	beq.n	800facc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faba:	689b      	ldr	r3, [r3, #8]
 800fabc:	687a      	ldr	r2, [r7, #4]
 800fabe:	7c12      	ldrb	r2, [r2, #16]
 800fac0:	f107 0108 	add.w	r1, r7, #8
 800fac4:	4610      	mov	r0, r2
 800fac6:	4798      	blx	r3
 800fac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800faca:	e077      	b.n	800fbbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800facc:	6839      	ldr	r1, [r7, #0]
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f000 fab1 	bl	8010036 <USBD_CtlError>
            err++;
 800fad4:	7afb      	ldrb	r3, [r7, #11]
 800fad6:	3301      	adds	r3, #1
 800fad8:	72fb      	strb	r3, [r7, #11]
          break;
 800fada:	e06f      	b.n	800fbbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fae2:	68db      	ldr	r3, [r3, #12]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d00b      	beq.n	800fb00 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	687a      	ldr	r2, [r7, #4]
 800faf2:	7c12      	ldrb	r2, [r2, #16]
 800faf4:	f107 0108 	add.w	r1, r7, #8
 800faf8:	4610      	mov	r0, r2
 800fafa:	4798      	blx	r3
 800fafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fafe:	e05d      	b.n	800fbbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb00:	6839      	ldr	r1, [r7, #0]
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f000 fa97 	bl	8010036 <USBD_CtlError>
            err++;
 800fb08:	7afb      	ldrb	r3, [r7, #11]
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	72fb      	strb	r3, [r7, #11]
          break;
 800fb0e:	e055      	b.n	800fbbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb16:	691b      	ldr	r3, [r3, #16]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d00b      	beq.n	800fb34 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb22:	691b      	ldr	r3, [r3, #16]
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	7c12      	ldrb	r2, [r2, #16]
 800fb28:	f107 0108 	add.w	r1, r7, #8
 800fb2c:	4610      	mov	r0, r2
 800fb2e:	4798      	blx	r3
 800fb30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb32:	e043      	b.n	800fbbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb34:	6839      	ldr	r1, [r7, #0]
 800fb36:	6878      	ldr	r0, [r7, #4]
 800fb38:	f000 fa7d 	bl	8010036 <USBD_CtlError>
            err++;
 800fb3c:	7afb      	ldrb	r3, [r7, #11]
 800fb3e:	3301      	adds	r3, #1
 800fb40:	72fb      	strb	r3, [r7, #11]
          break;
 800fb42:	e03b      	b.n	800fbbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb4a:	695b      	ldr	r3, [r3, #20]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d00b      	beq.n	800fb68 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb56:	695b      	ldr	r3, [r3, #20]
 800fb58:	687a      	ldr	r2, [r7, #4]
 800fb5a:	7c12      	ldrb	r2, [r2, #16]
 800fb5c:	f107 0108 	add.w	r1, r7, #8
 800fb60:	4610      	mov	r0, r2
 800fb62:	4798      	blx	r3
 800fb64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb66:	e029      	b.n	800fbbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb68:	6839      	ldr	r1, [r7, #0]
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 fa63 	bl	8010036 <USBD_CtlError>
            err++;
 800fb70:	7afb      	ldrb	r3, [r7, #11]
 800fb72:	3301      	adds	r3, #1
 800fb74:	72fb      	strb	r3, [r7, #11]
          break;
 800fb76:	e021      	b.n	800fbbc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb7e:	699b      	ldr	r3, [r3, #24]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d00b      	beq.n	800fb9c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb8a:	699b      	ldr	r3, [r3, #24]
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	7c12      	ldrb	r2, [r2, #16]
 800fb90:	f107 0108 	add.w	r1, r7, #8
 800fb94:	4610      	mov	r0, r2
 800fb96:	4798      	blx	r3
 800fb98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb9a:	e00f      	b.n	800fbbc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800fb9c:	6839      	ldr	r1, [r7, #0]
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f000 fa49 	bl	8010036 <USBD_CtlError>
            err++;
 800fba4:	7afb      	ldrb	r3, [r7, #11]
 800fba6:	3301      	adds	r3, #1
 800fba8:	72fb      	strb	r3, [r7, #11]
          break;
 800fbaa:	e007      	b.n	800fbbc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fbac:	6839      	ldr	r1, [r7, #0]
 800fbae:	6878      	ldr	r0, [r7, #4]
 800fbb0:	f000 fa41 	bl	8010036 <USBD_CtlError>
          err++;
 800fbb4:	7afb      	ldrb	r3, [r7, #11]
 800fbb6:	3301      	adds	r3, #1
 800fbb8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fbba:	bf00      	nop
      }
      break;
 800fbbc:	e037      	b.n	800fc2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	7c1b      	ldrb	r3, [r3, #16]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d109      	bne.n	800fbda <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fbcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fbce:	f107 0208 	add.w	r2, r7, #8
 800fbd2:	4610      	mov	r0, r2
 800fbd4:	4798      	blx	r3
 800fbd6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fbd8:	e029      	b.n	800fc2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fbda:	6839      	ldr	r1, [r7, #0]
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f000 fa2a 	bl	8010036 <USBD_CtlError>
        err++;
 800fbe2:	7afb      	ldrb	r3, [r7, #11]
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	72fb      	strb	r3, [r7, #11]
      break;
 800fbe8:	e021      	b.n	800fc2e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	7c1b      	ldrb	r3, [r3, #16]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d10d      	bne.n	800fc0e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fbf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fbfa:	f107 0208 	add.w	r2, r7, #8
 800fbfe:	4610      	mov	r0, r2
 800fc00:	4798      	blx	r3
 800fc02:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	3301      	adds	r3, #1
 800fc08:	2207      	movs	r2, #7
 800fc0a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc0c:	e00f      	b.n	800fc2e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800fc0e:	6839      	ldr	r1, [r7, #0]
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f000 fa10 	bl	8010036 <USBD_CtlError>
        err++;
 800fc16:	7afb      	ldrb	r3, [r7, #11]
 800fc18:	3301      	adds	r3, #1
 800fc1a:	72fb      	strb	r3, [r7, #11]
      break;
 800fc1c:	e007      	b.n	800fc2e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800fc1e:	6839      	ldr	r1, [r7, #0]
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 fa08 	bl	8010036 <USBD_CtlError>
      err++;
 800fc26:	7afb      	ldrb	r3, [r7, #11]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	72fb      	strb	r3, [r7, #11]
      break;
 800fc2c:	bf00      	nop
  }

  if (err != 0U)
 800fc2e:	7afb      	ldrb	r3, [r7, #11]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d11e      	bne.n	800fc72 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	88db      	ldrh	r3, [r3, #6]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d016      	beq.n	800fc6a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800fc3c:	893b      	ldrh	r3, [r7, #8]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d00e      	beq.n	800fc60 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	88da      	ldrh	r2, [r3, #6]
 800fc46:	893b      	ldrh	r3, [r7, #8]
 800fc48:	4293      	cmp	r3, r2
 800fc4a:	bf28      	it	cs
 800fc4c:	4613      	movcs	r3, r2
 800fc4e:	b29b      	uxth	r3, r3
 800fc50:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fc52:	893b      	ldrh	r3, [r7, #8]
 800fc54:	461a      	mov	r2, r3
 800fc56:	68f9      	ldr	r1, [r7, #12]
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f000 fb6a 	bl	8010332 <USBD_CtlSendData>
 800fc5e:	e009      	b.n	800fc74 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fc60:	6839      	ldr	r1, [r7, #0]
 800fc62:	6878      	ldr	r0, [r7, #4]
 800fc64:	f000 f9e7 	bl	8010036 <USBD_CtlError>
 800fc68:	e004      	b.n	800fc74 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fc6a:	6878      	ldr	r0, [r7, #4]
 800fc6c:	f000 fbbb 	bl	80103e6 <USBD_CtlSendStatus>
 800fc70:	e000      	b.n	800fc74 <USBD_GetDescriptor+0x2cc>
    return;
 800fc72:	bf00      	nop
  }
}
 800fc74:	3710      	adds	r7, #16
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop

0800fc7c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b084      	sub	sp, #16
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fc86:	683b      	ldr	r3, [r7, #0]
 800fc88:	889b      	ldrh	r3, [r3, #4]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d131      	bne.n	800fcf2 <USBD_SetAddress+0x76>
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	88db      	ldrh	r3, [r3, #6]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d12d      	bne.n	800fcf2 <USBD_SetAddress+0x76>
 800fc96:	683b      	ldr	r3, [r7, #0]
 800fc98:	885b      	ldrh	r3, [r3, #2]
 800fc9a:	2b7f      	cmp	r3, #127	@ 0x7f
 800fc9c:	d829      	bhi.n	800fcf2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	885b      	ldrh	r3, [r3, #2]
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fca8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	2b03      	cmp	r3, #3
 800fcb4:	d104      	bne.n	800fcc0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fcb6:	6839      	ldr	r1, [r7, #0]
 800fcb8:	6878      	ldr	r0, [r7, #4]
 800fcba:	f000 f9bc 	bl	8010036 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcbe:	e01d      	b.n	800fcfc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	7bfa      	ldrb	r2, [r7, #15]
 800fcc4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fcc8:	7bfb      	ldrb	r3, [r7, #15]
 800fcca:	4619      	mov	r1, r3
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f7fe ffcd 	bl	800ec6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 fb87 	bl	80103e6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fcd8:	7bfb      	ldrb	r3, [r7, #15]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d004      	beq.n	800fce8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2202      	movs	r2, #2
 800fce2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fce6:	e009      	b.n	800fcfc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2201      	movs	r2, #1
 800fcec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fcf0:	e004      	b.n	800fcfc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fcf2:	6839      	ldr	r1, [r7, #0]
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f000 f99e 	bl	8010036 <USBD_CtlError>
  }
}
 800fcfa:	bf00      	nop
 800fcfc:	bf00      	nop
 800fcfe:	3710      	adds	r7, #16
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}

0800fd04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b084      	sub	sp, #16
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
 800fd0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd0e:	2300      	movs	r3, #0
 800fd10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	885b      	ldrh	r3, [r3, #2]
 800fd16:	b2da      	uxtb	r2, r3
 800fd18:	4b4e      	ldr	r3, [pc, #312]	@ (800fe54 <USBD_SetConfig+0x150>)
 800fd1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fd1c:	4b4d      	ldr	r3, [pc, #308]	@ (800fe54 <USBD_SetConfig+0x150>)
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d905      	bls.n	800fd30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fd24:	6839      	ldr	r1, [r7, #0]
 800fd26:	6878      	ldr	r0, [r7, #4]
 800fd28:	f000 f985 	bl	8010036 <USBD_CtlError>
    return USBD_FAIL;
 800fd2c:	2303      	movs	r3, #3
 800fd2e:	e08c      	b.n	800fe4a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	2b02      	cmp	r3, #2
 800fd3a:	d002      	beq.n	800fd42 <USBD_SetConfig+0x3e>
 800fd3c:	2b03      	cmp	r3, #3
 800fd3e:	d029      	beq.n	800fd94 <USBD_SetConfig+0x90>
 800fd40:	e075      	b.n	800fe2e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fd42:	4b44      	ldr	r3, [pc, #272]	@ (800fe54 <USBD_SetConfig+0x150>)
 800fd44:	781b      	ldrb	r3, [r3, #0]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d020      	beq.n	800fd8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fd4a:	4b42      	ldr	r3, [pc, #264]	@ (800fe54 <USBD_SetConfig+0x150>)
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	461a      	mov	r2, r3
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fd54:	4b3f      	ldr	r3, [pc, #252]	@ (800fe54 <USBD_SetConfig+0x150>)
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	4619      	mov	r1, r3
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	f7ff f8a9 	bl	800eeb2 <USBD_SetClassConfig>
 800fd60:	4603      	mov	r3, r0
 800fd62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fd64:	7bfb      	ldrb	r3, [r7, #15]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d008      	beq.n	800fd7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fd6a:	6839      	ldr	r1, [r7, #0]
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 f962 	bl	8010036 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	2202      	movs	r2, #2
 800fd76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fd7a:	e065      	b.n	800fe48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fd7c:	6878      	ldr	r0, [r7, #4]
 800fd7e:	f000 fb32 	bl	80103e6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2203      	movs	r2, #3
 800fd86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fd8a:	e05d      	b.n	800fe48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f000 fb2a 	bl	80103e6 <USBD_CtlSendStatus>
      break;
 800fd92:	e059      	b.n	800fe48 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fd94:	4b2f      	ldr	r3, [pc, #188]	@ (800fe54 <USBD_SetConfig+0x150>)
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d112      	bne.n	800fdc2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2202      	movs	r2, #2
 800fda0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fda4:	4b2b      	ldr	r3, [pc, #172]	@ (800fe54 <USBD_SetConfig+0x150>)
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	461a      	mov	r2, r3
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fdae:	4b29      	ldr	r3, [pc, #164]	@ (800fe54 <USBD_SetConfig+0x150>)
 800fdb0:	781b      	ldrb	r3, [r3, #0]
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7ff f898 	bl	800eeea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 fb13 	bl	80103e6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fdc0:	e042      	b.n	800fe48 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fdc2:	4b24      	ldr	r3, [pc, #144]	@ (800fe54 <USBD_SetConfig+0x150>)
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	461a      	mov	r2, r3
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	685b      	ldr	r3, [r3, #4]
 800fdcc:	429a      	cmp	r2, r3
 800fdce:	d02a      	beq.n	800fe26 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f7ff f886 	bl	800eeea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800fdde:	4b1d      	ldr	r3, [pc, #116]	@ (800fe54 <USBD_SetConfig+0x150>)
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	461a      	mov	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fde8:	4b1a      	ldr	r3, [pc, #104]	@ (800fe54 <USBD_SetConfig+0x150>)
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	4619      	mov	r1, r3
 800fdee:	6878      	ldr	r0, [r7, #4]
 800fdf0:	f7ff f85f 	bl	800eeb2 <USBD_SetClassConfig>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fdf8:	7bfb      	ldrb	r3, [r7, #15]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d00f      	beq.n	800fe1e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fdfe:	6839      	ldr	r1, [r7, #0]
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 f918 	bl	8010036 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	685b      	ldr	r3, [r3, #4]
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f7ff f86b 	bl	800eeea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2202      	movs	r2, #2
 800fe18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fe1c:	e014      	b.n	800fe48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fe1e:	6878      	ldr	r0, [r7, #4]
 800fe20:	f000 fae1 	bl	80103e6 <USBD_CtlSendStatus>
      break;
 800fe24:	e010      	b.n	800fe48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f000 fadd 	bl	80103e6 <USBD_CtlSendStatus>
      break;
 800fe2c:	e00c      	b.n	800fe48 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800fe2e:	6839      	ldr	r1, [r7, #0]
 800fe30:	6878      	ldr	r0, [r7, #4]
 800fe32:	f000 f900 	bl	8010036 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe36:	4b07      	ldr	r3, [pc, #28]	@ (800fe54 <USBD_SetConfig+0x150>)
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	f7ff f854 	bl	800eeea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800fe42:	2303      	movs	r3, #3
 800fe44:	73fb      	strb	r3, [r7, #15]
      break;
 800fe46:	bf00      	nop
  }

  return ret;
 800fe48:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	3710      	adds	r7, #16
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}
 800fe52:	bf00      	nop
 800fe54:	20011164 	.word	0x20011164

0800fe58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b082      	sub	sp, #8
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
 800fe60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800fe62:	683b      	ldr	r3, [r7, #0]
 800fe64:	88db      	ldrh	r3, [r3, #6]
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	d004      	beq.n	800fe74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800fe6a:	6839      	ldr	r1, [r7, #0]
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f000 f8e2 	bl	8010036 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800fe72:	e023      	b.n	800febc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe7a:	b2db      	uxtb	r3, r3
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	dc02      	bgt.n	800fe86 <USBD_GetConfig+0x2e>
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	dc03      	bgt.n	800fe8c <USBD_GetConfig+0x34>
 800fe84:	e015      	b.n	800feb2 <USBD_GetConfig+0x5a>
 800fe86:	2b03      	cmp	r3, #3
 800fe88:	d00b      	beq.n	800fea2 <USBD_GetConfig+0x4a>
 800fe8a:	e012      	b.n	800feb2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	3308      	adds	r3, #8
 800fe96:	2201      	movs	r2, #1
 800fe98:	4619      	mov	r1, r3
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 fa49 	bl	8010332 <USBD_CtlSendData>
        break;
 800fea0:	e00c      	b.n	800febc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	3304      	adds	r3, #4
 800fea6:	2201      	movs	r2, #1
 800fea8:	4619      	mov	r1, r3
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f000 fa41 	bl	8010332 <USBD_CtlSendData>
        break;
 800feb0:	e004      	b.n	800febc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800feb2:	6839      	ldr	r1, [r7, #0]
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f000 f8be 	bl	8010036 <USBD_CtlError>
        break;
 800feba:	bf00      	nop
}
 800febc:	bf00      	nop
 800febe:	3708      	adds	r7, #8
 800fec0:	46bd      	mov	sp, r7
 800fec2:	bd80      	pop	{r7, pc}

0800fec4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b082      	sub	sp, #8
 800fec8:	af00      	add	r7, sp, #0
 800feca:	6078      	str	r0, [r7, #4]
 800fecc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fed4:	b2db      	uxtb	r3, r3
 800fed6:	3b01      	subs	r3, #1
 800fed8:	2b02      	cmp	r3, #2
 800feda:	d81e      	bhi.n	800ff1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fedc:	683b      	ldr	r3, [r7, #0]
 800fede:	88db      	ldrh	r3, [r3, #6]
 800fee0:	2b02      	cmp	r3, #2
 800fee2:	d004      	beq.n	800feee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fee4:	6839      	ldr	r1, [r7, #0]
 800fee6:	6878      	ldr	r0, [r7, #4]
 800fee8:	f000 f8a5 	bl	8010036 <USBD_CtlError>
        break;
 800feec:	e01a      	b.n	800ff24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2201      	movs	r2, #1
 800fef2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d005      	beq.n	800ff0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	68db      	ldr	r3, [r3, #12]
 800ff02:	f043 0202 	orr.w	r2, r3, #2
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	330c      	adds	r3, #12
 800ff0e:	2202      	movs	r2, #2
 800ff10:	4619      	mov	r1, r3
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f000 fa0d 	bl	8010332 <USBD_CtlSendData>
      break;
 800ff18:	e004      	b.n	800ff24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ff1a:	6839      	ldr	r1, [r7, #0]
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f000 f88a 	bl	8010036 <USBD_CtlError>
      break;
 800ff22:	bf00      	nop
  }
}
 800ff24:	bf00      	nop
 800ff26:	3708      	adds	r7, #8
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd80      	pop	{r7, pc}

0800ff2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	885b      	ldrh	r3, [r3, #2]
 800ff3a:	2b01      	cmp	r3, #1
 800ff3c:	d107      	bne.n	800ff4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2201      	movs	r2, #1
 800ff42:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 fa4d 	bl	80103e6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ff4c:	e013      	b.n	800ff76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	885b      	ldrh	r3, [r3, #2]
 800ff52:	2b02      	cmp	r3, #2
 800ff54:	d10b      	bne.n	800ff6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	889b      	ldrh	r3, [r3, #4]
 800ff5a:	0a1b      	lsrs	r3, r3, #8
 800ff5c:	b29b      	uxth	r3, r3
 800ff5e:	b2da      	uxtb	r2, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f000 fa3d 	bl	80103e6 <USBD_CtlSendStatus>
}
 800ff6c:	e003      	b.n	800ff76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ff6e:	6839      	ldr	r1, [r7, #0]
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f000 f860 	bl	8010036 <USBD_CtlError>
}
 800ff76:	bf00      	nop
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b082      	sub	sp, #8
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
 800ff86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff8e:	b2db      	uxtb	r3, r3
 800ff90:	3b01      	subs	r3, #1
 800ff92:	2b02      	cmp	r3, #2
 800ff94:	d80b      	bhi.n	800ffae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ff96:	683b      	ldr	r3, [r7, #0]
 800ff98:	885b      	ldrh	r3, [r3, #2]
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d10c      	bne.n	800ffb8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 fa1d 	bl	80103e6 <USBD_CtlSendStatus>
      }
      break;
 800ffac:	e004      	b.n	800ffb8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ffae:	6839      	ldr	r1, [r7, #0]
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f000 f840 	bl	8010036 <USBD_CtlError>
      break;
 800ffb6:	e000      	b.n	800ffba <USBD_ClrFeature+0x3c>
      break;
 800ffb8:	bf00      	nop
  }
}
 800ffba:	bf00      	nop
 800ffbc:	3708      	adds	r7, #8
 800ffbe:	46bd      	mov	sp, r7
 800ffc0:	bd80      	pop	{r7, pc}

0800ffc2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ffc2:	b580      	push	{r7, lr}
 800ffc4:	b084      	sub	sp, #16
 800ffc6:	af00      	add	r7, sp, #0
 800ffc8:	6078      	str	r0, [r7, #4]
 800ffca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	781a      	ldrb	r2, [r3, #0]
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	3301      	adds	r3, #1
 800ffdc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	781a      	ldrb	r2, [r3, #0]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	3301      	adds	r3, #1
 800ffea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ffec:	68f8      	ldr	r0, [r7, #12]
 800ffee:	f7ff fa40 	bl	800f472 <SWAPBYTE>
 800fff2:	4603      	mov	r3, r0
 800fff4:	461a      	mov	r2, r3
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	3301      	adds	r3, #1
 800fffe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	3301      	adds	r3, #1
 8010004:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010006:	68f8      	ldr	r0, [r7, #12]
 8010008:	f7ff fa33 	bl	800f472 <SWAPBYTE>
 801000c:	4603      	mov	r3, r0
 801000e:	461a      	mov	r2, r3
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	3301      	adds	r3, #1
 8010018:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	3301      	adds	r3, #1
 801001e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010020:	68f8      	ldr	r0, [r7, #12]
 8010022:	f7ff fa26 	bl	800f472 <SWAPBYTE>
 8010026:	4603      	mov	r3, r0
 8010028:	461a      	mov	r2, r3
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	80da      	strh	r2, [r3, #6]
}
 801002e:	bf00      	nop
 8010030:	3710      	adds	r7, #16
 8010032:	46bd      	mov	sp, r7
 8010034:	bd80      	pop	{r7, pc}

08010036 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010036:	b580      	push	{r7, lr}
 8010038:	b082      	sub	sp, #8
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
 801003e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010040:	2180      	movs	r1, #128	@ 0x80
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	f7fe fdb4 	bl	800ebb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010048:	2100      	movs	r1, #0
 801004a:	6878      	ldr	r0, [r7, #4]
 801004c:	f7fe fdb0 	bl	800ebb0 <USBD_LL_StallEP>
}
 8010050:	bf00      	nop
 8010052:	3708      	adds	r7, #8
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}

08010058 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b086      	sub	sp, #24
 801005c:	af00      	add	r7, sp, #0
 801005e:	60f8      	str	r0, [r7, #12]
 8010060:	60b9      	str	r1, [r7, #8]
 8010062:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010064:	2300      	movs	r3, #0
 8010066:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d036      	beq.n	80100dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010072:	6938      	ldr	r0, [r7, #16]
 8010074:	f000 f836 	bl	80100e4 <USBD_GetLen>
 8010078:	4603      	mov	r3, r0
 801007a:	3301      	adds	r3, #1
 801007c:	b29b      	uxth	r3, r3
 801007e:	005b      	lsls	r3, r3, #1
 8010080:	b29a      	uxth	r2, r3
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010086:	7dfb      	ldrb	r3, [r7, #23]
 8010088:	68ba      	ldr	r2, [r7, #8]
 801008a:	4413      	add	r3, r2
 801008c:	687a      	ldr	r2, [r7, #4]
 801008e:	7812      	ldrb	r2, [r2, #0]
 8010090:	701a      	strb	r2, [r3, #0]
  idx++;
 8010092:	7dfb      	ldrb	r3, [r7, #23]
 8010094:	3301      	adds	r3, #1
 8010096:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010098:	7dfb      	ldrb	r3, [r7, #23]
 801009a:	68ba      	ldr	r2, [r7, #8]
 801009c:	4413      	add	r3, r2
 801009e:	2203      	movs	r2, #3
 80100a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80100a2:	7dfb      	ldrb	r3, [r7, #23]
 80100a4:	3301      	adds	r3, #1
 80100a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80100a8:	e013      	b.n	80100d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80100aa:	7dfb      	ldrb	r3, [r7, #23]
 80100ac:	68ba      	ldr	r2, [r7, #8]
 80100ae:	4413      	add	r3, r2
 80100b0:	693a      	ldr	r2, [r7, #16]
 80100b2:	7812      	ldrb	r2, [r2, #0]
 80100b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	3301      	adds	r3, #1
 80100ba:	613b      	str	r3, [r7, #16]
    idx++;
 80100bc:	7dfb      	ldrb	r3, [r7, #23]
 80100be:	3301      	adds	r3, #1
 80100c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80100c2:	7dfb      	ldrb	r3, [r7, #23]
 80100c4:	68ba      	ldr	r2, [r7, #8]
 80100c6:	4413      	add	r3, r2
 80100c8:	2200      	movs	r2, #0
 80100ca:	701a      	strb	r2, [r3, #0]
    idx++;
 80100cc:	7dfb      	ldrb	r3, [r7, #23]
 80100ce:	3301      	adds	r3, #1
 80100d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d1e7      	bne.n	80100aa <USBD_GetString+0x52>
 80100da:	e000      	b.n	80100de <USBD_GetString+0x86>
    return;
 80100dc:	bf00      	nop
  }
}
 80100de:	3718      	adds	r7, #24
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80100e4:	b480      	push	{r7}
 80100e6:	b085      	sub	sp, #20
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80100ec:	2300      	movs	r3, #0
 80100ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80100f4:	e005      	b.n	8010102 <USBD_GetLen+0x1e>
  {
    len++;
 80100f6:	7bfb      	ldrb	r3, [r7, #15]
 80100f8:	3301      	adds	r3, #1
 80100fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	3301      	adds	r3, #1
 8010100:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	781b      	ldrb	r3, [r3, #0]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d1f5      	bne.n	80100f6 <USBD_GetLen+0x12>
  }

  return len;
 801010a:	7bfb      	ldrb	r3, [r7, #15]
}
 801010c:	4618      	mov	r0, r3
 801010e:	3714      	adds	r7, #20
 8010110:	46bd      	mov	sp, r7
 8010112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010116:	4770      	bx	lr

08010118 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010118:	b480      	push	{r7}
 801011a:	b083      	sub	sp, #12
 801011c:	af00      	add	r7, sp, #0
 801011e:	4603      	mov	r3, r0
 8010120:	6039      	str	r1, [r7, #0]
 8010122:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	2212      	movs	r2, #18
 8010128:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 801012a:	4b03      	ldr	r3, [pc, #12]	@ (8010138 <USBD_Class_DeviceDescriptor+0x20>)
}
 801012c:	4618      	mov	r0, r3
 801012e:	370c      	adds	r7, #12
 8010130:	46bd      	mov	sp, r7
 8010132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010136:	4770      	bx	lr
 8010138:	200000f0 	.word	0x200000f0

0801013c <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801013c:	b480      	push	{r7}
 801013e:	b083      	sub	sp, #12
 8010140:	af00      	add	r7, sp, #0
 8010142:	4603      	mov	r3, r0
 8010144:	6039      	str	r1, [r7, #0]
 8010146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 8010148:	683b      	ldr	r3, [r7, #0]
 801014a:	2204      	movs	r2, #4
 801014c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 801014e:	4b03      	ldr	r3, [pc, #12]	@ (801015c <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8010150:	4618      	mov	r0, r3
 8010152:	370c      	adds	r7, #12
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr
 801015c:	20000104 	.word	0x20000104

08010160 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	4603      	mov	r3, r0
 8010168:	6039      	str	r1, [r7, #0]
 801016a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 801016c:	79fb      	ldrb	r3, [r7, #7]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d105      	bne.n	801017e <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8010172:	683a      	ldr	r2, [r7, #0]
 8010174:	4907      	ldr	r1, [pc, #28]	@ (8010194 <USBD_Class_ProductStrDescriptor+0x34>)
 8010176:	4808      	ldr	r0, [pc, #32]	@ (8010198 <USBD_Class_ProductStrDescriptor+0x38>)
 8010178:	f7ff ff6e 	bl	8010058 <USBD_GetString>
 801017c:	e004      	b.n	8010188 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 801017e:	683a      	ldr	r2, [r7, #0]
 8010180:	4904      	ldr	r1, [pc, #16]	@ (8010194 <USBD_Class_ProductStrDescriptor+0x34>)
 8010182:	4805      	ldr	r0, [pc, #20]	@ (8010198 <USBD_Class_ProductStrDescriptor+0x38>)
 8010184:	f7ff ff68 	bl	8010058 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010188:	4b02      	ldr	r3, [pc, #8]	@ (8010194 <USBD_Class_ProductStrDescriptor+0x34>)
}
 801018a:	4618      	mov	r0, r3
 801018c:	3708      	adds	r7, #8
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}
 8010192:	bf00      	nop
 8010194:	20011168 	.word	0x20011168
 8010198:	0801184c 	.word	0x0801184c

0801019c <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	4603      	mov	r3, r0
 80101a4:	6039      	str	r1, [r7, #0]
 80101a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80101a8:	683a      	ldr	r2, [r7, #0]
 80101aa:	4904      	ldr	r1, [pc, #16]	@ (80101bc <USBD_Class_ManufacturerStrDescriptor+0x20>)
 80101ac:	4804      	ldr	r0, [pc, #16]	@ (80101c0 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 80101ae:	f7ff ff53 	bl	8010058 <USBD_GetString>
  return USBD_StrDesc;
 80101b2:	4b02      	ldr	r3, [pc, #8]	@ (80101bc <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 80101b4:	4618      	mov	r0, r3
 80101b6:	3708      	adds	r7, #8
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	20011168 	.word	0x20011168
 80101c0:	08011864 	.word	0x08011864

080101c4 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	4603      	mov	r3, r0
 80101cc:	6039      	str	r1, [r7, #0]
 80101ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	221a      	movs	r2, #26
 80101d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 80101d6:	f000 f843 	bl	8010260 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 80101da:	4b02      	ldr	r3, [pc, #8]	@ (80101e4 <USBD_Class_SerialStrDescriptor+0x20>)
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3708      	adds	r7, #8
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}
 80101e4:	20000108 	.word	0x20000108

080101e8 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	4603      	mov	r3, r0
 80101f0:	6039      	str	r1, [r7, #0]
 80101f2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80101f4:	79fb      	ldrb	r3, [r7, #7]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d105      	bne.n	8010206 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80101fa:	683a      	ldr	r2, [r7, #0]
 80101fc:	4907      	ldr	r1, [pc, #28]	@ (801021c <USBD_Class_ConfigStrDescriptor+0x34>)
 80101fe:	4808      	ldr	r0, [pc, #32]	@ (8010220 <USBD_Class_ConfigStrDescriptor+0x38>)
 8010200:	f7ff ff2a 	bl	8010058 <USBD_GetString>
 8010204:	e004      	b.n	8010210 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8010206:	683a      	ldr	r2, [r7, #0]
 8010208:	4904      	ldr	r1, [pc, #16]	@ (801021c <USBD_Class_ConfigStrDescriptor+0x34>)
 801020a:	4805      	ldr	r0, [pc, #20]	@ (8010220 <USBD_Class_ConfigStrDescriptor+0x38>)
 801020c:	f7ff ff24 	bl	8010058 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010210:	4b02      	ldr	r3, [pc, #8]	@ (801021c <USBD_Class_ConfigStrDescriptor+0x34>)
}
 8010212:	4618      	mov	r0, r3
 8010214:	3708      	adds	r7, #8
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	20011168 	.word	0x20011168
 8010220:	08011878 	.word	0x08011878

08010224 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b082      	sub	sp, #8
 8010228:	af00      	add	r7, sp, #0
 801022a:	4603      	mov	r3, r0
 801022c:	6039      	str	r1, [r7, #0]
 801022e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8010230:	79fb      	ldrb	r3, [r7, #7]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d105      	bne.n	8010242 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8010236:	683a      	ldr	r2, [r7, #0]
 8010238:	4907      	ldr	r1, [pc, #28]	@ (8010258 <USBD_Class_InterfaceStrDescriptor+0x34>)
 801023a:	4808      	ldr	r0, [pc, #32]	@ (801025c <USBD_Class_InterfaceStrDescriptor+0x38>)
 801023c:	f7ff ff0c 	bl	8010058 <USBD_GetString>
 8010240:	e004      	b.n	801024c <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8010242:	683a      	ldr	r2, [r7, #0]
 8010244:	4904      	ldr	r1, [pc, #16]	@ (8010258 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8010246:	4805      	ldr	r0, [pc, #20]	@ (801025c <USBD_Class_InterfaceStrDescriptor+0x38>)
 8010248:	f7ff ff06 	bl	8010058 <USBD_GetString>
  }
  return USBD_StrDesc;
 801024c:	4b02      	ldr	r3, [pc, #8]	@ (8010258 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 801024e:	4618      	mov	r0, r3
 8010250:	3708      	adds	r7, #8
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
 8010256:	bf00      	nop
 8010258:	20011168 	.word	0x20011168
 801025c:	08011884 	.word	0x08011884

08010260 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b084      	sub	sp, #16
 8010264:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 8010266:	4b0f      	ldr	r3, [pc, #60]	@ (80102a4 <Get_SerialNum+0x44>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 801026c:	4b0e      	ldr	r3, [pc, #56]	@ (80102a8 <Get_SerialNum+0x48>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 8010272:	4b0e      	ldr	r3, [pc, #56]	@ (80102ac <Get_SerialNum+0x4c>)
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010278:	68fa      	ldr	r2, [r7, #12]
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	4413      	add	r3, r2
 801027e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d009      	beq.n	801029a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 8010286:	2208      	movs	r2, #8
 8010288:	4909      	ldr	r1, [pc, #36]	@ (80102b0 <Get_SerialNum+0x50>)
 801028a:	68f8      	ldr	r0, [r7, #12]
 801028c:	f000 f814 	bl	80102b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 8010290:	2204      	movs	r2, #4
 8010292:	4908      	ldr	r1, [pc, #32]	@ (80102b4 <Get_SerialNum+0x54>)
 8010294:	68b8      	ldr	r0, [r7, #8]
 8010296:	f000 f80f 	bl	80102b8 <IntToUnicode>
  }
}
 801029a:	bf00      	nop
 801029c:	3710      	adds	r7, #16
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	08fff800 	.word	0x08fff800
 80102a8:	08fff804 	.word	0x08fff804
 80102ac:	08fff808 	.word	0x08fff808
 80102b0:	2000010a 	.word	0x2000010a
 80102b4:	2000011a 	.word	0x2000011a

080102b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 80102b8:	b480      	push	{r7}
 80102ba:	b087      	sub	sp, #28
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	4613      	mov	r3, r2
 80102c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 80102c6:	2300      	movs	r3, #0
 80102c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 80102ca:	2300      	movs	r3, #0
 80102cc:	75fb      	strb	r3, [r7, #23]
 80102ce:	e025      	b.n	801031c <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	0f1b      	lsrs	r3, r3, #28
 80102d4:	2b09      	cmp	r3, #9
 80102d6:	d80a      	bhi.n	80102ee <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	0f1b      	lsrs	r3, r3, #28
 80102dc:	b2da      	uxtb	r2, r3
 80102de:	7dfb      	ldrb	r3, [r7, #23]
 80102e0:	005b      	lsls	r3, r3, #1
 80102e2:	68b9      	ldr	r1, [r7, #8]
 80102e4:	440b      	add	r3, r1
 80102e6:	3230      	adds	r2, #48	@ 0x30
 80102e8:	b2d2      	uxtb	r2, r2
 80102ea:	701a      	strb	r2, [r3, #0]
 80102ec:	e009      	b.n	8010302 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	0f1b      	lsrs	r3, r3, #28
 80102f2:	b2da      	uxtb	r2, r3
 80102f4:	7dfb      	ldrb	r3, [r7, #23]
 80102f6:	005b      	lsls	r3, r3, #1
 80102f8:	68b9      	ldr	r1, [r7, #8]
 80102fa:	440b      	add	r3, r1
 80102fc:	3237      	adds	r2, #55	@ 0x37
 80102fe:	b2d2      	uxtb	r2, r2
 8010300:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	011b      	lsls	r3, r3, #4
 8010306:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8010308:	7dfb      	ldrb	r3, [r7, #23]
 801030a:	005b      	lsls	r3, r3, #1
 801030c:	3301      	adds	r3, #1
 801030e:	68ba      	ldr	r2, [r7, #8]
 8010310:	4413      	add	r3, r2
 8010312:	2200      	movs	r2, #0
 8010314:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 8010316:	7dfb      	ldrb	r3, [r7, #23]
 8010318:	3301      	adds	r3, #1
 801031a:	75fb      	strb	r3, [r7, #23]
 801031c:	7dfa      	ldrb	r2, [r7, #23]
 801031e:	79fb      	ldrb	r3, [r7, #7]
 8010320:	429a      	cmp	r2, r3
 8010322:	d3d5      	bcc.n	80102d0 <IntToUnicode+0x18>
  }
}
 8010324:	bf00      	nop
 8010326:	bf00      	nop
 8010328:	371c      	adds	r7, #28
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr

08010332 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010332:	b580      	push	{r7, lr}
 8010334:	b084      	sub	sp, #16
 8010336:	af00      	add	r7, sp, #0
 8010338:	60f8      	str	r0, [r7, #12]
 801033a:	60b9      	str	r1, [r7, #8]
 801033c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	2202      	movs	r2, #2
 8010342:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	687a      	ldr	r2, [r7, #4]
 8010350:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	68ba      	ldr	r2, [r7, #8]
 8010356:	2100      	movs	r1, #0
 8010358:	68f8      	ldr	r0, [r7, #12]
 801035a:	f7fe fca0 	bl	800ec9e <USBD_LL_Transmit>

  return USBD_OK;
 801035e:	2300      	movs	r3, #0
}
 8010360:	4618      	mov	r0, r3
 8010362:	3710      	adds	r7, #16
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}

08010368 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010368:	b580      	push	{r7, lr}
 801036a:	b084      	sub	sp, #16
 801036c:	af00      	add	r7, sp, #0
 801036e:	60f8      	str	r0, [r7, #12]
 8010370:	60b9      	str	r1, [r7, #8]
 8010372:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	68ba      	ldr	r2, [r7, #8]
 8010378:	2100      	movs	r1, #0
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	f7fe fc8f 	bl	800ec9e <USBD_LL_Transmit>

  return USBD_OK;
 8010380:	2300      	movs	r3, #0
}
 8010382:	4618      	mov	r0, r3
 8010384:	3710      	adds	r7, #16
 8010386:	46bd      	mov	sp, r7
 8010388:	bd80      	pop	{r7, pc}

0801038a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801038a:	b580      	push	{r7, lr}
 801038c:	b084      	sub	sp, #16
 801038e:	af00      	add	r7, sp, #0
 8010390:	60f8      	str	r0, [r7, #12]
 8010392:	60b9      	str	r1, [r7, #8]
 8010394:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	2203      	movs	r2, #3
 801039a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	687a      	ldr	r2, [r7, #4]
 80103aa:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	2100      	movs	r1, #0
 80103b4:	68f8      	ldr	r0, [r7, #12]
 80103b6:	f7fe fc8d 	bl	800ecd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103ba:	2300      	movs	r3, #0
}
 80103bc:	4618      	mov	r0, r3
 80103be:	3710      	adds	r7, #16
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b084      	sub	sp, #16
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	60f8      	str	r0, [r7, #12]
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	68ba      	ldr	r2, [r7, #8]
 80103d4:	2100      	movs	r1, #0
 80103d6:	68f8      	ldr	r0, [r7, #12]
 80103d8:	f7fe fc7c 	bl	800ecd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80103dc:	2300      	movs	r3, #0
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3710      	adds	r7, #16
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}

080103e6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80103e6:	b580      	push	{r7, lr}
 80103e8:	b082      	sub	sp, #8
 80103ea:	af00      	add	r7, sp, #0
 80103ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2204      	movs	r2, #4
 80103f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80103f6:	2300      	movs	r3, #0
 80103f8:	2200      	movs	r2, #0
 80103fa:	2100      	movs	r1, #0
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f7fe fc4e 	bl	800ec9e <USBD_LL_Transmit>

  return USBD_OK;
 8010402:	2300      	movs	r3, #0
}
 8010404:	4618      	mov	r0, r3
 8010406:	3708      	adds	r7, #8
 8010408:	46bd      	mov	sp, r7
 801040a:	bd80      	pop	{r7, pc}

0801040c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b082      	sub	sp, #8
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2205      	movs	r2, #5
 8010418:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801041c:	2300      	movs	r3, #0
 801041e:	2200      	movs	r2, #0
 8010420:	2100      	movs	r1, #0
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f7fe fc56 	bl	800ecd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010428:	2300      	movs	r3, #0
}
 801042a:	4618      	mov	r0, r3
 801042c:	3708      	adds	r7, #8
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
	...

08010434 <std>:
 8010434:	2300      	movs	r3, #0
 8010436:	b510      	push	{r4, lr}
 8010438:	4604      	mov	r4, r0
 801043a:	6083      	str	r3, [r0, #8]
 801043c:	8181      	strh	r1, [r0, #12]
 801043e:	4619      	mov	r1, r3
 8010440:	6643      	str	r3, [r0, #100]	@ 0x64
 8010442:	81c2      	strh	r2, [r0, #14]
 8010444:	2208      	movs	r2, #8
 8010446:	6183      	str	r3, [r0, #24]
 8010448:	e9c0 3300 	strd	r3, r3, [r0]
 801044c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010450:	305c      	adds	r0, #92	@ 0x5c
 8010452:	f000 f93f 	bl	80106d4 <memset>
 8010456:	4b0d      	ldr	r3, [pc, #52]	@ (801048c <std+0x58>)
 8010458:	6224      	str	r4, [r4, #32]
 801045a:	6263      	str	r3, [r4, #36]	@ 0x24
 801045c:	4b0c      	ldr	r3, [pc, #48]	@ (8010490 <std+0x5c>)
 801045e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010460:	4b0c      	ldr	r3, [pc, #48]	@ (8010494 <std+0x60>)
 8010462:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010464:	4b0c      	ldr	r3, [pc, #48]	@ (8010498 <std+0x64>)
 8010466:	6323      	str	r3, [r4, #48]	@ 0x30
 8010468:	4b0c      	ldr	r3, [pc, #48]	@ (801049c <std+0x68>)
 801046a:	429c      	cmp	r4, r3
 801046c:	d006      	beq.n	801047c <std+0x48>
 801046e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010472:	4294      	cmp	r4, r2
 8010474:	d002      	beq.n	801047c <std+0x48>
 8010476:	33d0      	adds	r3, #208	@ 0xd0
 8010478:	429c      	cmp	r4, r3
 801047a:	d105      	bne.n	8010488 <std+0x54>
 801047c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010484:	f000 b99e 	b.w	80107c4 <__retarget_lock_init_recursive>
 8010488:	bd10      	pop	{r4, pc}
 801048a:	bf00      	nop
 801048c:	080105dd 	.word	0x080105dd
 8010490:	080105ff 	.word	0x080105ff
 8010494:	08010637 	.word	0x08010637
 8010498:	0801065b 	.word	0x0801065b
 801049c:	20011268 	.word	0x20011268

080104a0 <stdio_exit_handler>:
 80104a0:	4a02      	ldr	r2, [pc, #8]	@ (80104ac <stdio_exit_handler+0xc>)
 80104a2:	4903      	ldr	r1, [pc, #12]	@ (80104b0 <stdio_exit_handler+0x10>)
 80104a4:	4803      	ldr	r0, [pc, #12]	@ (80104b4 <stdio_exit_handler+0x14>)
 80104a6:	f000 b869 	b.w	801057c <_fwalk_sglue>
 80104aa:	bf00      	nop
 80104ac:	20000124 	.word	0x20000124
 80104b0:	08011335 	.word	0x08011335
 80104b4:	20000134 	.word	0x20000134

080104b8 <cleanup_stdio>:
 80104b8:	6841      	ldr	r1, [r0, #4]
 80104ba:	4b0c      	ldr	r3, [pc, #48]	@ (80104ec <cleanup_stdio+0x34>)
 80104bc:	4299      	cmp	r1, r3
 80104be:	b510      	push	{r4, lr}
 80104c0:	4604      	mov	r4, r0
 80104c2:	d001      	beq.n	80104c8 <cleanup_stdio+0x10>
 80104c4:	f000 ff36 	bl	8011334 <_fflush_r>
 80104c8:	68a1      	ldr	r1, [r4, #8]
 80104ca:	4b09      	ldr	r3, [pc, #36]	@ (80104f0 <cleanup_stdio+0x38>)
 80104cc:	4299      	cmp	r1, r3
 80104ce:	d002      	beq.n	80104d6 <cleanup_stdio+0x1e>
 80104d0:	4620      	mov	r0, r4
 80104d2:	f000 ff2f 	bl	8011334 <_fflush_r>
 80104d6:	68e1      	ldr	r1, [r4, #12]
 80104d8:	4b06      	ldr	r3, [pc, #24]	@ (80104f4 <cleanup_stdio+0x3c>)
 80104da:	4299      	cmp	r1, r3
 80104dc:	d004      	beq.n	80104e8 <cleanup_stdio+0x30>
 80104de:	4620      	mov	r0, r4
 80104e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104e4:	f000 bf26 	b.w	8011334 <_fflush_r>
 80104e8:	bd10      	pop	{r4, pc}
 80104ea:	bf00      	nop
 80104ec:	20011268 	.word	0x20011268
 80104f0:	200112d0 	.word	0x200112d0
 80104f4:	20011338 	.word	0x20011338

080104f8 <global_stdio_init.part.0>:
 80104f8:	b510      	push	{r4, lr}
 80104fa:	4b0b      	ldr	r3, [pc, #44]	@ (8010528 <global_stdio_init.part.0+0x30>)
 80104fc:	2104      	movs	r1, #4
 80104fe:	4c0b      	ldr	r4, [pc, #44]	@ (801052c <global_stdio_init.part.0+0x34>)
 8010500:	4a0b      	ldr	r2, [pc, #44]	@ (8010530 <global_stdio_init.part.0+0x38>)
 8010502:	4620      	mov	r0, r4
 8010504:	601a      	str	r2, [r3, #0]
 8010506:	2200      	movs	r2, #0
 8010508:	f7ff ff94 	bl	8010434 <std>
 801050c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010510:	2201      	movs	r2, #1
 8010512:	2109      	movs	r1, #9
 8010514:	f7ff ff8e 	bl	8010434 <std>
 8010518:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801051c:	2202      	movs	r2, #2
 801051e:	2112      	movs	r1, #18
 8010520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010524:	f7ff bf86 	b.w	8010434 <std>
 8010528:	200113a0 	.word	0x200113a0
 801052c:	20011268 	.word	0x20011268
 8010530:	080104a1 	.word	0x080104a1

08010534 <__sfp_lock_acquire>:
 8010534:	4801      	ldr	r0, [pc, #4]	@ (801053c <__sfp_lock_acquire+0x8>)
 8010536:	f000 b946 	b.w	80107c6 <__retarget_lock_acquire_recursive>
 801053a:	bf00      	nop
 801053c:	200113a9 	.word	0x200113a9

08010540 <__sfp_lock_release>:
 8010540:	4801      	ldr	r0, [pc, #4]	@ (8010548 <__sfp_lock_release+0x8>)
 8010542:	f000 b941 	b.w	80107c8 <__retarget_lock_release_recursive>
 8010546:	bf00      	nop
 8010548:	200113a9 	.word	0x200113a9

0801054c <__sinit>:
 801054c:	b510      	push	{r4, lr}
 801054e:	4604      	mov	r4, r0
 8010550:	f7ff fff0 	bl	8010534 <__sfp_lock_acquire>
 8010554:	6a23      	ldr	r3, [r4, #32]
 8010556:	b11b      	cbz	r3, 8010560 <__sinit+0x14>
 8010558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801055c:	f7ff bff0 	b.w	8010540 <__sfp_lock_release>
 8010560:	4b04      	ldr	r3, [pc, #16]	@ (8010574 <__sinit+0x28>)
 8010562:	6223      	str	r3, [r4, #32]
 8010564:	4b04      	ldr	r3, [pc, #16]	@ (8010578 <__sinit+0x2c>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d1f5      	bne.n	8010558 <__sinit+0xc>
 801056c:	f7ff ffc4 	bl	80104f8 <global_stdio_init.part.0>
 8010570:	e7f2      	b.n	8010558 <__sinit+0xc>
 8010572:	bf00      	nop
 8010574:	080104b9 	.word	0x080104b9
 8010578:	200113a0 	.word	0x200113a0

0801057c <_fwalk_sglue>:
 801057c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010580:	4607      	mov	r7, r0
 8010582:	4688      	mov	r8, r1
 8010584:	4614      	mov	r4, r2
 8010586:	2600      	movs	r6, #0
 8010588:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801058c:	f1b9 0901 	subs.w	r9, r9, #1
 8010590:	d505      	bpl.n	801059e <_fwalk_sglue+0x22>
 8010592:	6824      	ldr	r4, [r4, #0]
 8010594:	2c00      	cmp	r4, #0
 8010596:	d1f7      	bne.n	8010588 <_fwalk_sglue+0xc>
 8010598:	4630      	mov	r0, r6
 801059a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801059e:	89ab      	ldrh	r3, [r5, #12]
 80105a0:	2b01      	cmp	r3, #1
 80105a2:	d907      	bls.n	80105b4 <_fwalk_sglue+0x38>
 80105a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80105a8:	3301      	adds	r3, #1
 80105aa:	d003      	beq.n	80105b4 <_fwalk_sglue+0x38>
 80105ac:	4629      	mov	r1, r5
 80105ae:	4638      	mov	r0, r7
 80105b0:	47c0      	blx	r8
 80105b2:	4306      	orrs	r6, r0
 80105b4:	3568      	adds	r5, #104	@ 0x68
 80105b6:	e7e9      	b.n	801058c <_fwalk_sglue+0x10>

080105b8 <iprintf>:
 80105b8:	b40f      	push	{r0, r1, r2, r3}
 80105ba:	b507      	push	{r0, r1, r2, lr}
 80105bc:	4906      	ldr	r1, [pc, #24]	@ (80105d8 <iprintf+0x20>)
 80105be:	ab04      	add	r3, sp, #16
 80105c0:	6808      	ldr	r0, [r1, #0]
 80105c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80105c6:	6881      	ldr	r1, [r0, #8]
 80105c8:	9301      	str	r3, [sp, #4]
 80105ca:	f000 fb85 	bl	8010cd8 <_vfiprintf_r>
 80105ce:	b003      	add	sp, #12
 80105d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80105d4:	b004      	add	sp, #16
 80105d6:	4770      	bx	lr
 80105d8:	20000130 	.word	0x20000130

080105dc <__sread>:
 80105dc:	b510      	push	{r4, lr}
 80105de:	460c      	mov	r4, r1
 80105e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105e4:	f000 f8a0 	bl	8010728 <_read_r>
 80105e8:	2800      	cmp	r0, #0
 80105ea:	bfab      	itete	ge
 80105ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80105ee:	89a3      	ldrhlt	r3, [r4, #12]
 80105f0:	181b      	addge	r3, r3, r0
 80105f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80105f6:	bfac      	ite	ge
 80105f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80105fa:	81a3      	strhlt	r3, [r4, #12]
 80105fc:	bd10      	pop	{r4, pc}

080105fe <__swrite>:
 80105fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010602:	461f      	mov	r7, r3
 8010604:	898b      	ldrh	r3, [r1, #12]
 8010606:	4605      	mov	r5, r0
 8010608:	460c      	mov	r4, r1
 801060a:	05db      	lsls	r3, r3, #23
 801060c:	4616      	mov	r6, r2
 801060e:	d505      	bpl.n	801061c <__swrite+0x1e>
 8010610:	2302      	movs	r3, #2
 8010612:	2200      	movs	r2, #0
 8010614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010618:	f000 f874 	bl	8010704 <_lseek_r>
 801061c:	89a3      	ldrh	r3, [r4, #12]
 801061e:	4632      	mov	r2, r6
 8010620:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010624:	4628      	mov	r0, r5
 8010626:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801062a:	81a3      	strh	r3, [r4, #12]
 801062c:	463b      	mov	r3, r7
 801062e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010632:	f000 b88b 	b.w	801074c <_write_r>

08010636 <__sseek>:
 8010636:	b510      	push	{r4, lr}
 8010638:	460c      	mov	r4, r1
 801063a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801063e:	f000 f861 	bl	8010704 <_lseek_r>
 8010642:	1c43      	adds	r3, r0, #1
 8010644:	89a3      	ldrh	r3, [r4, #12]
 8010646:	bf15      	itete	ne
 8010648:	6560      	strne	r0, [r4, #84]	@ 0x54
 801064a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801064e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010652:	81a3      	strheq	r3, [r4, #12]
 8010654:	bf18      	it	ne
 8010656:	81a3      	strhne	r3, [r4, #12]
 8010658:	bd10      	pop	{r4, pc}

0801065a <__sclose>:
 801065a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801065e:	f000 b841 	b.w	80106e4 <_close_r>

08010662 <_vsniprintf_r>:
 8010662:	b530      	push	{r4, r5, lr}
 8010664:	4614      	mov	r4, r2
 8010666:	b09b      	sub	sp, #108	@ 0x6c
 8010668:	4605      	mov	r5, r0
 801066a:	461a      	mov	r2, r3
 801066c:	2c00      	cmp	r4, #0
 801066e:	da05      	bge.n	801067c <_vsniprintf_r+0x1a>
 8010670:	238b      	movs	r3, #139	@ 0x8b
 8010672:	6003      	str	r3, [r0, #0]
 8010674:	f04f 30ff 	mov.w	r0, #4294967295
 8010678:	b01b      	add	sp, #108	@ 0x6c
 801067a:	bd30      	pop	{r4, r5, pc}
 801067c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010680:	9100      	str	r1, [sp, #0]
 8010682:	9104      	str	r1, [sp, #16]
 8010684:	4669      	mov	r1, sp
 8010686:	f8ad 300c 	strh.w	r3, [sp, #12]
 801068a:	bf14      	ite	ne
 801068c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010690:	4623      	moveq	r3, r4
 8010692:	9302      	str	r3, [sp, #8]
 8010694:	9305      	str	r3, [sp, #20]
 8010696:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801069a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801069e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80106a0:	f000 f9f4 	bl	8010a8c <_svfiprintf_r>
 80106a4:	1c43      	adds	r3, r0, #1
 80106a6:	bfbc      	itt	lt
 80106a8:	238b      	movlt	r3, #139	@ 0x8b
 80106aa:	602b      	strlt	r3, [r5, #0]
 80106ac:	2c00      	cmp	r4, #0
 80106ae:	d0e3      	beq.n	8010678 <_vsniprintf_r+0x16>
 80106b0:	9b00      	ldr	r3, [sp, #0]
 80106b2:	2200      	movs	r2, #0
 80106b4:	701a      	strb	r2, [r3, #0]
 80106b6:	e7df      	b.n	8010678 <_vsniprintf_r+0x16>

080106b8 <vsniprintf>:
 80106b8:	b507      	push	{r0, r1, r2, lr}
 80106ba:	9300      	str	r3, [sp, #0]
 80106bc:	4613      	mov	r3, r2
 80106be:	460a      	mov	r2, r1
 80106c0:	4601      	mov	r1, r0
 80106c2:	4803      	ldr	r0, [pc, #12]	@ (80106d0 <vsniprintf+0x18>)
 80106c4:	6800      	ldr	r0, [r0, #0]
 80106c6:	f7ff ffcc 	bl	8010662 <_vsniprintf_r>
 80106ca:	b003      	add	sp, #12
 80106cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80106d0:	20000130 	.word	0x20000130

080106d4 <memset>:
 80106d4:	4402      	add	r2, r0
 80106d6:	4603      	mov	r3, r0
 80106d8:	4293      	cmp	r3, r2
 80106da:	d100      	bne.n	80106de <memset+0xa>
 80106dc:	4770      	bx	lr
 80106de:	f803 1b01 	strb.w	r1, [r3], #1
 80106e2:	e7f9      	b.n	80106d8 <memset+0x4>

080106e4 <_close_r>:
 80106e4:	b538      	push	{r3, r4, r5, lr}
 80106e6:	2300      	movs	r3, #0
 80106e8:	4d05      	ldr	r5, [pc, #20]	@ (8010700 <_close_r+0x1c>)
 80106ea:	4604      	mov	r4, r0
 80106ec:	4608      	mov	r0, r1
 80106ee:	602b      	str	r3, [r5, #0]
 80106f0:	f7f1 fb41 	bl	8001d76 <_close>
 80106f4:	1c43      	adds	r3, r0, #1
 80106f6:	d102      	bne.n	80106fe <_close_r+0x1a>
 80106f8:	682b      	ldr	r3, [r5, #0]
 80106fa:	b103      	cbz	r3, 80106fe <_close_r+0x1a>
 80106fc:	6023      	str	r3, [r4, #0]
 80106fe:	bd38      	pop	{r3, r4, r5, pc}
 8010700:	200113a4 	.word	0x200113a4

08010704 <_lseek_r>:
 8010704:	b538      	push	{r3, r4, r5, lr}
 8010706:	4604      	mov	r4, r0
 8010708:	4d06      	ldr	r5, [pc, #24]	@ (8010724 <_lseek_r+0x20>)
 801070a:	4608      	mov	r0, r1
 801070c:	4611      	mov	r1, r2
 801070e:	2200      	movs	r2, #0
 8010710:	602a      	str	r2, [r5, #0]
 8010712:	461a      	mov	r2, r3
 8010714:	f7f1 fb56 	bl	8001dc4 <_lseek>
 8010718:	1c43      	adds	r3, r0, #1
 801071a:	d102      	bne.n	8010722 <_lseek_r+0x1e>
 801071c:	682b      	ldr	r3, [r5, #0]
 801071e:	b103      	cbz	r3, 8010722 <_lseek_r+0x1e>
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	bd38      	pop	{r3, r4, r5, pc}
 8010724:	200113a4 	.word	0x200113a4

08010728 <_read_r>:
 8010728:	b538      	push	{r3, r4, r5, lr}
 801072a:	4604      	mov	r4, r0
 801072c:	4d06      	ldr	r5, [pc, #24]	@ (8010748 <_read_r+0x20>)
 801072e:	4608      	mov	r0, r1
 8010730:	4611      	mov	r1, r2
 8010732:	2200      	movs	r2, #0
 8010734:	602a      	str	r2, [r5, #0]
 8010736:	461a      	mov	r2, r3
 8010738:	f7f1 fae4 	bl	8001d04 <_read>
 801073c:	1c43      	adds	r3, r0, #1
 801073e:	d102      	bne.n	8010746 <_read_r+0x1e>
 8010740:	682b      	ldr	r3, [r5, #0]
 8010742:	b103      	cbz	r3, 8010746 <_read_r+0x1e>
 8010744:	6023      	str	r3, [r4, #0]
 8010746:	bd38      	pop	{r3, r4, r5, pc}
 8010748:	200113a4 	.word	0x200113a4

0801074c <_write_r>:
 801074c:	b538      	push	{r3, r4, r5, lr}
 801074e:	4604      	mov	r4, r0
 8010750:	4d06      	ldr	r5, [pc, #24]	@ (801076c <_write_r+0x20>)
 8010752:	4608      	mov	r0, r1
 8010754:	4611      	mov	r1, r2
 8010756:	2200      	movs	r2, #0
 8010758:	602a      	str	r2, [r5, #0]
 801075a:	461a      	mov	r2, r3
 801075c:	f7f1 faef 	bl	8001d3e <_write>
 8010760:	1c43      	adds	r3, r0, #1
 8010762:	d102      	bne.n	801076a <_write_r+0x1e>
 8010764:	682b      	ldr	r3, [r5, #0]
 8010766:	b103      	cbz	r3, 801076a <_write_r+0x1e>
 8010768:	6023      	str	r3, [r4, #0]
 801076a:	bd38      	pop	{r3, r4, r5, pc}
 801076c:	200113a4 	.word	0x200113a4

08010770 <__errno>:
 8010770:	4b01      	ldr	r3, [pc, #4]	@ (8010778 <__errno+0x8>)
 8010772:	6818      	ldr	r0, [r3, #0]
 8010774:	4770      	bx	lr
 8010776:	bf00      	nop
 8010778:	20000130 	.word	0x20000130

0801077c <__libc_init_array>:
 801077c:	b570      	push	{r4, r5, r6, lr}
 801077e:	4d0d      	ldr	r5, [pc, #52]	@ (80107b4 <__libc_init_array+0x38>)
 8010780:	2600      	movs	r6, #0
 8010782:	4c0d      	ldr	r4, [pc, #52]	@ (80107b8 <__libc_init_array+0x3c>)
 8010784:	1b64      	subs	r4, r4, r5
 8010786:	10a4      	asrs	r4, r4, #2
 8010788:	42a6      	cmp	r6, r4
 801078a:	d109      	bne.n	80107a0 <__libc_init_array+0x24>
 801078c:	4d0b      	ldr	r5, [pc, #44]	@ (80107bc <__libc_init_array+0x40>)
 801078e:	2600      	movs	r6, #0
 8010790:	4c0b      	ldr	r4, [pc, #44]	@ (80107c0 <__libc_init_array+0x44>)
 8010792:	f000 ff7d 	bl	8011690 <_init>
 8010796:	1b64      	subs	r4, r4, r5
 8010798:	10a4      	asrs	r4, r4, #2
 801079a:	42a6      	cmp	r6, r4
 801079c:	d105      	bne.n	80107aa <__libc_init_array+0x2e>
 801079e:	bd70      	pop	{r4, r5, r6, pc}
 80107a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80107a4:	3601      	adds	r6, #1
 80107a6:	4798      	blx	r3
 80107a8:	e7ee      	b.n	8010788 <__libc_init_array+0xc>
 80107aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80107ae:	3601      	adds	r6, #1
 80107b0:	4798      	blx	r3
 80107b2:	e7f2      	b.n	801079a <__libc_init_array+0x1e>
 80107b4:	0801191c 	.word	0x0801191c
 80107b8:	0801191c 	.word	0x0801191c
 80107bc:	0801191c 	.word	0x0801191c
 80107c0:	08011920 	.word	0x08011920

080107c4 <__retarget_lock_init_recursive>:
 80107c4:	4770      	bx	lr

080107c6 <__retarget_lock_acquire_recursive>:
 80107c6:	4770      	bx	lr

080107c8 <__retarget_lock_release_recursive>:
 80107c8:	4770      	bx	lr

080107ca <memcpy>:
 80107ca:	440a      	add	r2, r1
 80107cc:	1e43      	subs	r3, r0, #1
 80107ce:	4291      	cmp	r1, r2
 80107d0:	d100      	bne.n	80107d4 <memcpy+0xa>
 80107d2:	4770      	bx	lr
 80107d4:	b510      	push	{r4, lr}
 80107d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80107da:	4291      	cmp	r1, r2
 80107dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80107e0:	d1f9      	bne.n	80107d6 <memcpy+0xc>
 80107e2:	bd10      	pop	{r4, pc}

080107e4 <_free_r>:
 80107e4:	b538      	push	{r3, r4, r5, lr}
 80107e6:	4605      	mov	r5, r0
 80107e8:	2900      	cmp	r1, #0
 80107ea:	d041      	beq.n	8010870 <_free_r+0x8c>
 80107ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80107f0:	1f0c      	subs	r4, r1, #4
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	bfb8      	it	lt
 80107f6:	18e4      	addlt	r4, r4, r3
 80107f8:	f000 f8e0 	bl	80109bc <__malloc_lock>
 80107fc:	4a1d      	ldr	r2, [pc, #116]	@ (8010874 <_free_r+0x90>)
 80107fe:	6813      	ldr	r3, [r2, #0]
 8010800:	b933      	cbnz	r3, 8010810 <_free_r+0x2c>
 8010802:	6063      	str	r3, [r4, #4]
 8010804:	6014      	str	r4, [r2, #0]
 8010806:	4628      	mov	r0, r5
 8010808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801080c:	f000 b8dc 	b.w	80109c8 <__malloc_unlock>
 8010810:	42a3      	cmp	r3, r4
 8010812:	d908      	bls.n	8010826 <_free_r+0x42>
 8010814:	6820      	ldr	r0, [r4, #0]
 8010816:	1821      	adds	r1, r4, r0
 8010818:	428b      	cmp	r3, r1
 801081a:	bf01      	itttt	eq
 801081c:	6819      	ldreq	r1, [r3, #0]
 801081e:	685b      	ldreq	r3, [r3, #4]
 8010820:	1809      	addeq	r1, r1, r0
 8010822:	6021      	streq	r1, [r4, #0]
 8010824:	e7ed      	b.n	8010802 <_free_r+0x1e>
 8010826:	461a      	mov	r2, r3
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	b10b      	cbz	r3, 8010830 <_free_r+0x4c>
 801082c:	42a3      	cmp	r3, r4
 801082e:	d9fa      	bls.n	8010826 <_free_r+0x42>
 8010830:	6811      	ldr	r1, [r2, #0]
 8010832:	1850      	adds	r0, r2, r1
 8010834:	42a0      	cmp	r0, r4
 8010836:	d10b      	bne.n	8010850 <_free_r+0x6c>
 8010838:	6820      	ldr	r0, [r4, #0]
 801083a:	4401      	add	r1, r0
 801083c:	1850      	adds	r0, r2, r1
 801083e:	6011      	str	r1, [r2, #0]
 8010840:	4283      	cmp	r3, r0
 8010842:	d1e0      	bne.n	8010806 <_free_r+0x22>
 8010844:	6818      	ldr	r0, [r3, #0]
 8010846:	685b      	ldr	r3, [r3, #4]
 8010848:	4408      	add	r0, r1
 801084a:	6053      	str	r3, [r2, #4]
 801084c:	6010      	str	r0, [r2, #0]
 801084e:	e7da      	b.n	8010806 <_free_r+0x22>
 8010850:	d902      	bls.n	8010858 <_free_r+0x74>
 8010852:	230c      	movs	r3, #12
 8010854:	602b      	str	r3, [r5, #0]
 8010856:	e7d6      	b.n	8010806 <_free_r+0x22>
 8010858:	6820      	ldr	r0, [r4, #0]
 801085a:	1821      	adds	r1, r4, r0
 801085c:	428b      	cmp	r3, r1
 801085e:	bf02      	ittt	eq
 8010860:	6819      	ldreq	r1, [r3, #0]
 8010862:	685b      	ldreq	r3, [r3, #4]
 8010864:	1809      	addeq	r1, r1, r0
 8010866:	6063      	str	r3, [r4, #4]
 8010868:	bf08      	it	eq
 801086a:	6021      	streq	r1, [r4, #0]
 801086c:	6054      	str	r4, [r2, #4]
 801086e:	e7ca      	b.n	8010806 <_free_r+0x22>
 8010870:	bd38      	pop	{r3, r4, r5, pc}
 8010872:	bf00      	nop
 8010874:	200113b0 	.word	0x200113b0

08010878 <sbrk_aligned>:
 8010878:	b570      	push	{r4, r5, r6, lr}
 801087a:	4e0f      	ldr	r6, [pc, #60]	@ (80108b8 <sbrk_aligned+0x40>)
 801087c:	460c      	mov	r4, r1
 801087e:	4605      	mov	r5, r0
 8010880:	6831      	ldr	r1, [r6, #0]
 8010882:	b911      	cbnz	r1, 801088a <sbrk_aligned+0x12>
 8010884:	f000 fe2c 	bl	80114e0 <_sbrk_r>
 8010888:	6030      	str	r0, [r6, #0]
 801088a:	4621      	mov	r1, r4
 801088c:	4628      	mov	r0, r5
 801088e:	f000 fe27 	bl	80114e0 <_sbrk_r>
 8010892:	1c43      	adds	r3, r0, #1
 8010894:	d103      	bne.n	801089e <sbrk_aligned+0x26>
 8010896:	f04f 34ff 	mov.w	r4, #4294967295
 801089a:	4620      	mov	r0, r4
 801089c:	bd70      	pop	{r4, r5, r6, pc}
 801089e:	1cc4      	adds	r4, r0, #3
 80108a0:	f024 0403 	bic.w	r4, r4, #3
 80108a4:	42a0      	cmp	r0, r4
 80108a6:	d0f8      	beq.n	801089a <sbrk_aligned+0x22>
 80108a8:	1a21      	subs	r1, r4, r0
 80108aa:	4628      	mov	r0, r5
 80108ac:	f000 fe18 	bl	80114e0 <_sbrk_r>
 80108b0:	3001      	adds	r0, #1
 80108b2:	d1f2      	bne.n	801089a <sbrk_aligned+0x22>
 80108b4:	e7ef      	b.n	8010896 <sbrk_aligned+0x1e>
 80108b6:	bf00      	nop
 80108b8:	200113ac 	.word	0x200113ac

080108bc <_malloc_r>:
 80108bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80108c0:	1ccd      	adds	r5, r1, #3
 80108c2:	4606      	mov	r6, r0
 80108c4:	f025 0503 	bic.w	r5, r5, #3
 80108c8:	3508      	adds	r5, #8
 80108ca:	2d0c      	cmp	r5, #12
 80108cc:	bf38      	it	cc
 80108ce:	250c      	movcc	r5, #12
 80108d0:	2d00      	cmp	r5, #0
 80108d2:	db01      	blt.n	80108d8 <_malloc_r+0x1c>
 80108d4:	42a9      	cmp	r1, r5
 80108d6:	d904      	bls.n	80108e2 <_malloc_r+0x26>
 80108d8:	230c      	movs	r3, #12
 80108da:	6033      	str	r3, [r6, #0]
 80108dc:	2000      	movs	r0, #0
 80108de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80109b8 <_malloc_r+0xfc>
 80108e6:	f000 f869 	bl	80109bc <__malloc_lock>
 80108ea:	f8d8 3000 	ldr.w	r3, [r8]
 80108ee:	461c      	mov	r4, r3
 80108f0:	bb44      	cbnz	r4, 8010944 <_malloc_r+0x88>
 80108f2:	4629      	mov	r1, r5
 80108f4:	4630      	mov	r0, r6
 80108f6:	f7ff ffbf 	bl	8010878 <sbrk_aligned>
 80108fa:	1c43      	adds	r3, r0, #1
 80108fc:	4604      	mov	r4, r0
 80108fe:	d158      	bne.n	80109b2 <_malloc_r+0xf6>
 8010900:	f8d8 4000 	ldr.w	r4, [r8]
 8010904:	4627      	mov	r7, r4
 8010906:	2f00      	cmp	r7, #0
 8010908:	d143      	bne.n	8010992 <_malloc_r+0xd6>
 801090a:	2c00      	cmp	r4, #0
 801090c:	d04b      	beq.n	80109a6 <_malloc_r+0xea>
 801090e:	6823      	ldr	r3, [r4, #0]
 8010910:	4639      	mov	r1, r7
 8010912:	4630      	mov	r0, r6
 8010914:	eb04 0903 	add.w	r9, r4, r3
 8010918:	f000 fde2 	bl	80114e0 <_sbrk_r>
 801091c:	4581      	cmp	r9, r0
 801091e:	d142      	bne.n	80109a6 <_malloc_r+0xea>
 8010920:	6821      	ldr	r1, [r4, #0]
 8010922:	4630      	mov	r0, r6
 8010924:	1a6d      	subs	r5, r5, r1
 8010926:	4629      	mov	r1, r5
 8010928:	f7ff ffa6 	bl	8010878 <sbrk_aligned>
 801092c:	3001      	adds	r0, #1
 801092e:	d03a      	beq.n	80109a6 <_malloc_r+0xea>
 8010930:	6823      	ldr	r3, [r4, #0]
 8010932:	442b      	add	r3, r5
 8010934:	6023      	str	r3, [r4, #0]
 8010936:	f8d8 3000 	ldr.w	r3, [r8]
 801093a:	685a      	ldr	r2, [r3, #4]
 801093c:	bb62      	cbnz	r2, 8010998 <_malloc_r+0xdc>
 801093e:	f8c8 7000 	str.w	r7, [r8]
 8010942:	e00f      	b.n	8010964 <_malloc_r+0xa8>
 8010944:	6822      	ldr	r2, [r4, #0]
 8010946:	1b52      	subs	r2, r2, r5
 8010948:	d420      	bmi.n	801098c <_malloc_r+0xd0>
 801094a:	2a0b      	cmp	r2, #11
 801094c:	d917      	bls.n	801097e <_malloc_r+0xc2>
 801094e:	1961      	adds	r1, r4, r5
 8010950:	42a3      	cmp	r3, r4
 8010952:	6025      	str	r5, [r4, #0]
 8010954:	bf18      	it	ne
 8010956:	6059      	strne	r1, [r3, #4]
 8010958:	6863      	ldr	r3, [r4, #4]
 801095a:	bf08      	it	eq
 801095c:	f8c8 1000 	streq.w	r1, [r8]
 8010960:	5162      	str	r2, [r4, r5]
 8010962:	604b      	str	r3, [r1, #4]
 8010964:	4630      	mov	r0, r6
 8010966:	f000 f82f 	bl	80109c8 <__malloc_unlock>
 801096a:	f104 000b 	add.w	r0, r4, #11
 801096e:	1d23      	adds	r3, r4, #4
 8010970:	f020 0007 	bic.w	r0, r0, #7
 8010974:	1ac2      	subs	r2, r0, r3
 8010976:	bf1c      	itt	ne
 8010978:	1a1b      	subne	r3, r3, r0
 801097a:	50a3      	strne	r3, [r4, r2]
 801097c:	e7af      	b.n	80108de <_malloc_r+0x22>
 801097e:	6862      	ldr	r2, [r4, #4]
 8010980:	42a3      	cmp	r3, r4
 8010982:	bf0c      	ite	eq
 8010984:	f8c8 2000 	streq.w	r2, [r8]
 8010988:	605a      	strne	r2, [r3, #4]
 801098a:	e7eb      	b.n	8010964 <_malloc_r+0xa8>
 801098c:	4623      	mov	r3, r4
 801098e:	6864      	ldr	r4, [r4, #4]
 8010990:	e7ae      	b.n	80108f0 <_malloc_r+0x34>
 8010992:	463c      	mov	r4, r7
 8010994:	687f      	ldr	r7, [r7, #4]
 8010996:	e7b6      	b.n	8010906 <_malloc_r+0x4a>
 8010998:	461a      	mov	r2, r3
 801099a:	685b      	ldr	r3, [r3, #4]
 801099c:	42a3      	cmp	r3, r4
 801099e:	d1fb      	bne.n	8010998 <_malloc_r+0xdc>
 80109a0:	2300      	movs	r3, #0
 80109a2:	6053      	str	r3, [r2, #4]
 80109a4:	e7de      	b.n	8010964 <_malloc_r+0xa8>
 80109a6:	230c      	movs	r3, #12
 80109a8:	4630      	mov	r0, r6
 80109aa:	6033      	str	r3, [r6, #0]
 80109ac:	f000 f80c 	bl	80109c8 <__malloc_unlock>
 80109b0:	e794      	b.n	80108dc <_malloc_r+0x20>
 80109b2:	6005      	str	r5, [r0, #0]
 80109b4:	e7d6      	b.n	8010964 <_malloc_r+0xa8>
 80109b6:	bf00      	nop
 80109b8:	200113b0 	.word	0x200113b0

080109bc <__malloc_lock>:
 80109bc:	4801      	ldr	r0, [pc, #4]	@ (80109c4 <__malloc_lock+0x8>)
 80109be:	f7ff bf02 	b.w	80107c6 <__retarget_lock_acquire_recursive>
 80109c2:	bf00      	nop
 80109c4:	200113a8 	.word	0x200113a8

080109c8 <__malloc_unlock>:
 80109c8:	4801      	ldr	r0, [pc, #4]	@ (80109d0 <__malloc_unlock+0x8>)
 80109ca:	f7ff befd 	b.w	80107c8 <__retarget_lock_release_recursive>
 80109ce:	bf00      	nop
 80109d0:	200113a8 	.word	0x200113a8

080109d4 <__ssputs_r>:
 80109d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80109d8:	461f      	mov	r7, r3
 80109da:	688e      	ldr	r6, [r1, #8]
 80109dc:	4682      	mov	sl, r0
 80109de:	460c      	mov	r4, r1
 80109e0:	42be      	cmp	r6, r7
 80109e2:	4690      	mov	r8, r2
 80109e4:	680b      	ldr	r3, [r1, #0]
 80109e6:	d82d      	bhi.n	8010a44 <__ssputs_r+0x70>
 80109e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80109ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80109f0:	d026      	beq.n	8010a40 <__ssputs_r+0x6c>
 80109f2:	6965      	ldr	r5, [r4, #20]
 80109f4:	6909      	ldr	r1, [r1, #16]
 80109f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109fa:	eba3 0901 	sub.w	r9, r3, r1
 80109fe:	1c7b      	adds	r3, r7, #1
 8010a00:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a04:	444b      	add	r3, r9
 8010a06:	106d      	asrs	r5, r5, #1
 8010a08:	429d      	cmp	r5, r3
 8010a0a:	bf38      	it	cc
 8010a0c:	461d      	movcc	r5, r3
 8010a0e:	0553      	lsls	r3, r2, #21
 8010a10:	d527      	bpl.n	8010a62 <__ssputs_r+0x8e>
 8010a12:	4629      	mov	r1, r5
 8010a14:	f7ff ff52 	bl	80108bc <_malloc_r>
 8010a18:	4606      	mov	r6, r0
 8010a1a:	b360      	cbz	r0, 8010a76 <__ssputs_r+0xa2>
 8010a1c:	464a      	mov	r2, r9
 8010a1e:	6921      	ldr	r1, [r4, #16]
 8010a20:	f7ff fed3 	bl	80107ca <memcpy>
 8010a24:	89a3      	ldrh	r3, [r4, #12]
 8010a26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a2e:	81a3      	strh	r3, [r4, #12]
 8010a30:	6126      	str	r6, [r4, #16]
 8010a32:	444e      	add	r6, r9
 8010a34:	6165      	str	r5, [r4, #20]
 8010a36:	eba5 0509 	sub.w	r5, r5, r9
 8010a3a:	6026      	str	r6, [r4, #0]
 8010a3c:	463e      	mov	r6, r7
 8010a3e:	60a5      	str	r5, [r4, #8]
 8010a40:	42be      	cmp	r6, r7
 8010a42:	d900      	bls.n	8010a46 <__ssputs_r+0x72>
 8010a44:	463e      	mov	r6, r7
 8010a46:	4632      	mov	r2, r6
 8010a48:	4641      	mov	r1, r8
 8010a4a:	6820      	ldr	r0, [r4, #0]
 8010a4c:	f000 fd2e 	bl	80114ac <memmove>
 8010a50:	68a3      	ldr	r3, [r4, #8]
 8010a52:	2000      	movs	r0, #0
 8010a54:	1b9b      	subs	r3, r3, r6
 8010a56:	60a3      	str	r3, [r4, #8]
 8010a58:	6823      	ldr	r3, [r4, #0]
 8010a5a:	4433      	add	r3, r6
 8010a5c:	6023      	str	r3, [r4, #0]
 8010a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a62:	462a      	mov	r2, r5
 8010a64:	f000 fd5a 	bl	801151c <_realloc_r>
 8010a68:	4606      	mov	r6, r0
 8010a6a:	2800      	cmp	r0, #0
 8010a6c:	d1e0      	bne.n	8010a30 <__ssputs_r+0x5c>
 8010a6e:	6921      	ldr	r1, [r4, #16]
 8010a70:	4650      	mov	r0, sl
 8010a72:	f7ff feb7 	bl	80107e4 <_free_r>
 8010a76:	230c      	movs	r3, #12
 8010a78:	f04f 30ff 	mov.w	r0, #4294967295
 8010a7c:	f8ca 3000 	str.w	r3, [sl]
 8010a80:	89a3      	ldrh	r3, [r4, #12]
 8010a82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010a86:	81a3      	strh	r3, [r4, #12]
 8010a88:	e7e9      	b.n	8010a5e <__ssputs_r+0x8a>
	...

08010a8c <_svfiprintf_r>:
 8010a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a90:	4698      	mov	r8, r3
 8010a92:	898b      	ldrh	r3, [r1, #12]
 8010a94:	b09d      	sub	sp, #116	@ 0x74
 8010a96:	4607      	mov	r7, r0
 8010a98:	061b      	lsls	r3, r3, #24
 8010a9a:	460d      	mov	r5, r1
 8010a9c:	4614      	mov	r4, r2
 8010a9e:	d510      	bpl.n	8010ac2 <_svfiprintf_r+0x36>
 8010aa0:	690b      	ldr	r3, [r1, #16]
 8010aa2:	b973      	cbnz	r3, 8010ac2 <_svfiprintf_r+0x36>
 8010aa4:	2140      	movs	r1, #64	@ 0x40
 8010aa6:	f7ff ff09 	bl	80108bc <_malloc_r>
 8010aaa:	6028      	str	r0, [r5, #0]
 8010aac:	6128      	str	r0, [r5, #16]
 8010aae:	b930      	cbnz	r0, 8010abe <_svfiprintf_r+0x32>
 8010ab0:	230c      	movs	r3, #12
 8010ab2:	603b      	str	r3, [r7, #0]
 8010ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ab8:	b01d      	add	sp, #116	@ 0x74
 8010aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010abe:	2340      	movs	r3, #64	@ 0x40
 8010ac0:	616b      	str	r3, [r5, #20]
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	f8cd 800c 	str.w	r8, [sp, #12]
 8010ac8:	f04f 0901 	mov.w	r9, #1
 8010acc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8010c70 <_svfiprintf_r+0x1e4>
 8010ad0:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ad2:	2320      	movs	r3, #32
 8010ad4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ad8:	2330      	movs	r3, #48	@ 0x30
 8010ada:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010ade:	4623      	mov	r3, r4
 8010ae0:	469a      	mov	sl, r3
 8010ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ae6:	b10a      	cbz	r2, 8010aec <_svfiprintf_r+0x60>
 8010ae8:	2a25      	cmp	r2, #37	@ 0x25
 8010aea:	d1f9      	bne.n	8010ae0 <_svfiprintf_r+0x54>
 8010aec:	ebba 0b04 	subs.w	fp, sl, r4
 8010af0:	d00b      	beq.n	8010b0a <_svfiprintf_r+0x7e>
 8010af2:	465b      	mov	r3, fp
 8010af4:	4622      	mov	r2, r4
 8010af6:	4629      	mov	r1, r5
 8010af8:	4638      	mov	r0, r7
 8010afa:	f7ff ff6b 	bl	80109d4 <__ssputs_r>
 8010afe:	3001      	adds	r0, #1
 8010b00:	f000 80a7 	beq.w	8010c52 <_svfiprintf_r+0x1c6>
 8010b04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b06:	445a      	add	r2, fp
 8010b08:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	f000 809f 	beq.w	8010c52 <_svfiprintf_r+0x1c6>
 8010b14:	2300      	movs	r3, #0
 8010b16:	f04f 32ff 	mov.w	r2, #4294967295
 8010b1a:	f10a 0a01 	add.w	sl, sl, #1
 8010b1e:	9304      	str	r3, [sp, #16]
 8010b20:	9307      	str	r3, [sp, #28]
 8010b22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b26:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b2c:	4654      	mov	r4, sl
 8010b2e:	2205      	movs	r2, #5
 8010b30:	484f      	ldr	r0, [pc, #316]	@ (8010c70 <_svfiprintf_r+0x1e4>)
 8010b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b36:	f000 fce3 	bl	8011500 <memchr>
 8010b3a:	9a04      	ldr	r2, [sp, #16]
 8010b3c:	b9d8      	cbnz	r0, 8010b76 <_svfiprintf_r+0xea>
 8010b3e:	06d0      	lsls	r0, r2, #27
 8010b40:	bf44      	itt	mi
 8010b42:	2320      	movmi	r3, #32
 8010b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b48:	0711      	lsls	r1, r2, #28
 8010b4a:	bf44      	itt	mi
 8010b4c:	232b      	movmi	r3, #43	@ 0x2b
 8010b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b52:	f89a 3000 	ldrb.w	r3, [sl]
 8010b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b58:	d015      	beq.n	8010b86 <_svfiprintf_r+0xfa>
 8010b5a:	9a07      	ldr	r2, [sp, #28]
 8010b5c:	4654      	mov	r4, sl
 8010b5e:	2000      	movs	r0, #0
 8010b60:	f04f 0c0a 	mov.w	ip, #10
 8010b64:	4621      	mov	r1, r4
 8010b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b6a:	3b30      	subs	r3, #48	@ 0x30
 8010b6c:	2b09      	cmp	r3, #9
 8010b6e:	d94b      	bls.n	8010c08 <_svfiprintf_r+0x17c>
 8010b70:	b1b0      	cbz	r0, 8010ba0 <_svfiprintf_r+0x114>
 8010b72:	9207      	str	r2, [sp, #28]
 8010b74:	e014      	b.n	8010ba0 <_svfiprintf_r+0x114>
 8010b76:	eba0 0308 	sub.w	r3, r0, r8
 8010b7a:	46a2      	mov	sl, r4
 8010b7c:	fa09 f303 	lsl.w	r3, r9, r3
 8010b80:	4313      	orrs	r3, r2
 8010b82:	9304      	str	r3, [sp, #16]
 8010b84:	e7d2      	b.n	8010b2c <_svfiprintf_r+0xa0>
 8010b86:	9b03      	ldr	r3, [sp, #12]
 8010b88:	1d19      	adds	r1, r3, #4
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	9103      	str	r1, [sp, #12]
 8010b90:	bfbb      	ittet	lt
 8010b92:	425b      	neglt	r3, r3
 8010b94:	f042 0202 	orrlt.w	r2, r2, #2
 8010b98:	9307      	strge	r3, [sp, #28]
 8010b9a:	9307      	strlt	r3, [sp, #28]
 8010b9c:	bfb8      	it	lt
 8010b9e:	9204      	strlt	r2, [sp, #16]
 8010ba0:	7823      	ldrb	r3, [r4, #0]
 8010ba2:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ba4:	d10a      	bne.n	8010bbc <_svfiprintf_r+0x130>
 8010ba6:	7863      	ldrb	r3, [r4, #1]
 8010ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010baa:	d132      	bne.n	8010c12 <_svfiprintf_r+0x186>
 8010bac:	9b03      	ldr	r3, [sp, #12]
 8010bae:	3402      	adds	r4, #2
 8010bb0:	1d1a      	adds	r2, r3, #4
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010bb8:	9203      	str	r2, [sp, #12]
 8010bba:	9305      	str	r3, [sp, #20]
 8010bbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010c80 <_svfiprintf_r+0x1f4>
 8010bc0:	2203      	movs	r2, #3
 8010bc2:	7821      	ldrb	r1, [r4, #0]
 8010bc4:	4650      	mov	r0, sl
 8010bc6:	f000 fc9b 	bl	8011500 <memchr>
 8010bca:	b138      	cbz	r0, 8010bdc <_svfiprintf_r+0x150>
 8010bcc:	eba0 000a 	sub.w	r0, r0, sl
 8010bd0:	2240      	movs	r2, #64	@ 0x40
 8010bd2:	9b04      	ldr	r3, [sp, #16]
 8010bd4:	3401      	adds	r4, #1
 8010bd6:	4082      	lsls	r2, r0
 8010bd8:	4313      	orrs	r3, r2
 8010bda:	9304      	str	r3, [sp, #16]
 8010bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010be0:	2206      	movs	r2, #6
 8010be2:	4824      	ldr	r0, [pc, #144]	@ (8010c74 <_svfiprintf_r+0x1e8>)
 8010be4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010be8:	f000 fc8a 	bl	8011500 <memchr>
 8010bec:	2800      	cmp	r0, #0
 8010bee:	d036      	beq.n	8010c5e <_svfiprintf_r+0x1d2>
 8010bf0:	4b21      	ldr	r3, [pc, #132]	@ (8010c78 <_svfiprintf_r+0x1ec>)
 8010bf2:	bb1b      	cbnz	r3, 8010c3c <_svfiprintf_r+0x1b0>
 8010bf4:	9b03      	ldr	r3, [sp, #12]
 8010bf6:	3307      	adds	r3, #7
 8010bf8:	f023 0307 	bic.w	r3, r3, #7
 8010bfc:	3308      	adds	r3, #8
 8010bfe:	9303      	str	r3, [sp, #12]
 8010c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c02:	4433      	add	r3, r6
 8010c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c06:	e76a      	b.n	8010ade <_svfiprintf_r+0x52>
 8010c08:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c0c:	460c      	mov	r4, r1
 8010c0e:	2001      	movs	r0, #1
 8010c10:	e7a8      	b.n	8010b64 <_svfiprintf_r+0xd8>
 8010c12:	2300      	movs	r3, #0
 8010c14:	3401      	adds	r4, #1
 8010c16:	f04f 0c0a 	mov.w	ip, #10
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	9305      	str	r3, [sp, #20]
 8010c1e:	4620      	mov	r0, r4
 8010c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c24:	3a30      	subs	r2, #48	@ 0x30
 8010c26:	2a09      	cmp	r2, #9
 8010c28:	d903      	bls.n	8010c32 <_svfiprintf_r+0x1a6>
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d0c6      	beq.n	8010bbc <_svfiprintf_r+0x130>
 8010c2e:	9105      	str	r1, [sp, #20]
 8010c30:	e7c4      	b.n	8010bbc <_svfiprintf_r+0x130>
 8010c32:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c36:	4604      	mov	r4, r0
 8010c38:	2301      	movs	r3, #1
 8010c3a:	e7f0      	b.n	8010c1e <_svfiprintf_r+0x192>
 8010c3c:	ab03      	add	r3, sp, #12
 8010c3e:	462a      	mov	r2, r5
 8010c40:	a904      	add	r1, sp, #16
 8010c42:	4638      	mov	r0, r7
 8010c44:	9300      	str	r3, [sp, #0]
 8010c46:	4b0d      	ldr	r3, [pc, #52]	@ (8010c7c <_svfiprintf_r+0x1f0>)
 8010c48:	f3af 8000 	nop.w
 8010c4c:	1c42      	adds	r2, r0, #1
 8010c4e:	4606      	mov	r6, r0
 8010c50:	d1d6      	bne.n	8010c00 <_svfiprintf_r+0x174>
 8010c52:	89ab      	ldrh	r3, [r5, #12]
 8010c54:	065b      	lsls	r3, r3, #25
 8010c56:	f53f af2d 	bmi.w	8010ab4 <_svfiprintf_r+0x28>
 8010c5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c5c:	e72c      	b.n	8010ab8 <_svfiprintf_r+0x2c>
 8010c5e:	ab03      	add	r3, sp, #12
 8010c60:	462a      	mov	r2, r5
 8010c62:	a904      	add	r1, sp, #16
 8010c64:	4638      	mov	r0, r7
 8010c66:	9300      	str	r3, [sp, #0]
 8010c68:	4b04      	ldr	r3, [pc, #16]	@ (8010c7c <_svfiprintf_r+0x1f0>)
 8010c6a:	f000 f9bf 	bl	8010fec <_printf_i>
 8010c6e:	e7ed      	b.n	8010c4c <_svfiprintf_r+0x1c0>
 8010c70:	080118e0 	.word	0x080118e0
 8010c74:	080118ea 	.word	0x080118ea
 8010c78:	00000000 	.word	0x00000000
 8010c7c:	080109d5 	.word	0x080109d5
 8010c80:	080118e6 	.word	0x080118e6

08010c84 <__sfputc_r>:
 8010c84:	6893      	ldr	r3, [r2, #8]
 8010c86:	3b01      	subs	r3, #1
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	6093      	str	r3, [r2, #8]
 8010c8c:	b410      	push	{r4}
 8010c8e:	da08      	bge.n	8010ca2 <__sfputc_r+0x1e>
 8010c90:	6994      	ldr	r4, [r2, #24]
 8010c92:	42a3      	cmp	r3, r4
 8010c94:	db01      	blt.n	8010c9a <__sfputc_r+0x16>
 8010c96:	290a      	cmp	r1, #10
 8010c98:	d103      	bne.n	8010ca2 <__sfputc_r+0x1e>
 8010c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c9e:	f000 bb71 	b.w	8011384 <__swbuf_r>
 8010ca2:	6813      	ldr	r3, [r2, #0]
 8010ca4:	1c58      	adds	r0, r3, #1
 8010ca6:	6010      	str	r0, [r2, #0]
 8010ca8:	4608      	mov	r0, r1
 8010caa:	7019      	strb	r1, [r3, #0]
 8010cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cb0:	4770      	bx	lr

08010cb2 <__sfputs_r>:
 8010cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cb4:	4606      	mov	r6, r0
 8010cb6:	460f      	mov	r7, r1
 8010cb8:	4614      	mov	r4, r2
 8010cba:	18d5      	adds	r5, r2, r3
 8010cbc:	42ac      	cmp	r4, r5
 8010cbe:	d101      	bne.n	8010cc4 <__sfputs_r+0x12>
 8010cc0:	2000      	movs	r0, #0
 8010cc2:	e007      	b.n	8010cd4 <__sfputs_r+0x22>
 8010cc4:	463a      	mov	r2, r7
 8010cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cca:	4630      	mov	r0, r6
 8010ccc:	f7ff ffda 	bl	8010c84 <__sfputc_r>
 8010cd0:	1c43      	adds	r3, r0, #1
 8010cd2:	d1f3      	bne.n	8010cbc <__sfputs_r+0xa>
 8010cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010cd8 <_vfiprintf_r>:
 8010cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010cdc:	460d      	mov	r5, r1
 8010cde:	b09d      	sub	sp, #116	@ 0x74
 8010ce0:	4614      	mov	r4, r2
 8010ce2:	4698      	mov	r8, r3
 8010ce4:	4606      	mov	r6, r0
 8010ce6:	b118      	cbz	r0, 8010cf0 <_vfiprintf_r+0x18>
 8010ce8:	6a03      	ldr	r3, [r0, #32]
 8010cea:	b90b      	cbnz	r3, 8010cf0 <_vfiprintf_r+0x18>
 8010cec:	f7ff fc2e 	bl	801054c <__sinit>
 8010cf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010cf2:	07d9      	lsls	r1, r3, #31
 8010cf4:	d405      	bmi.n	8010d02 <_vfiprintf_r+0x2a>
 8010cf6:	89ab      	ldrh	r3, [r5, #12]
 8010cf8:	059a      	lsls	r2, r3, #22
 8010cfa:	d402      	bmi.n	8010d02 <_vfiprintf_r+0x2a>
 8010cfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010cfe:	f7ff fd62 	bl	80107c6 <__retarget_lock_acquire_recursive>
 8010d02:	89ab      	ldrh	r3, [r5, #12]
 8010d04:	071b      	lsls	r3, r3, #28
 8010d06:	d501      	bpl.n	8010d0c <_vfiprintf_r+0x34>
 8010d08:	692b      	ldr	r3, [r5, #16]
 8010d0a:	b99b      	cbnz	r3, 8010d34 <_vfiprintf_r+0x5c>
 8010d0c:	4629      	mov	r1, r5
 8010d0e:	4630      	mov	r0, r6
 8010d10:	f000 fb76 	bl	8011400 <__swsetup_r>
 8010d14:	b170      	cbz	r0, 8010d34 <_vfiprintf_r+0x5c>
 8010d16:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d18:	07dc      	lsls	r4, r3, #31
 8010d1a:	d504      	bpl.n	8010d26 <_vfiprintf_r+0x4e>
 8010d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8010d20:	b01d      	add	sp, #116	@ 0x74
 8010d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d26:	89ab      	ldrh	r3, [r5, #12]
 8010d28:	0598      	lsls	r0, r3, #22
 8010d2a:	d4f7      	bmi.n	8010d1c <_vfiprintf_r+0x44>
 8010d2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d2e:	f7ff fd4b 	bl	80107c8 <__retarget_lock_release_recursive>
 8010d32:	e7f3      	b.n	8010d1c <_vfiprintf_r+0x44>
 8010d34:	2300      	movs	r3, #0
 8010d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d3a:	f04f 0901 	mov.w	r9, #1
 8010d3e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8010ef4 <_vfiprintf_r+0x21c>
 8010d42:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d44:	2320      	movs	r3, #32
 8010d46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d4a:	2330      	movs	r3, #48	@ 0x30
 8010d4c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d50:	4623      	mov	r3, r4
 8010d52:	469a      	mov	sl, r3
 8010d54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d58:	b10a      	cbz	r2, 8010d5e <_vfiprintf_r+0x86>
 8010d5a:	2a25      	cmp	r2, #37	@ 0x25
 8010d5c:	d1f9      	bne.n	8010d52 <_vfiprintf_r+0x7a>
 8010d5e:	ebba 0b04 	subs.w	fp, sl, r4
 8010d62:	d00b      	beq.n	8010d7c <_vfiprintf_r+0xa4>
 8010d64:	465b      	mov	r3, fp
 8010d66:	4622      	mov	r2, r4
 8010d68:	4629      	mov	r1, r5
 8010d6a:	4630      	mov	r0, r6
 8010d6c:	f7ff ffa1 	bl	8010cb2 <__sfputs_r>
 8010d70:	3001      	adds	r0, #1
 8010d72:	f000 80a7 	beq.w	8010ec4 <_vfiprintf_r+0x1ec>
 8010d76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010d78:	445a      	add	r2, fp
 8010d7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010d7c:	f89a 3000 	ldrb.w	r3, [sl]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	f000 809f 	beq.w	8010ec4 <_vfiprintf_r+0x1ec>
 8010d86:	2300      	movs	r3, #0
 8010d88:	f04f 32ff 	mov.w	r2, #4294967295
 8010d8c:	f10a 0a01 	add.w	sl, sl, #1
 8010d90:	9304      	str	r3, [sp, #16]
 8010d92:	9307      	str	r3, [sp, #28]
 8010d94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010d98:	931a      	str	r3, [sp, #104]	@ 0x68
 8010d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010d9e:	4654      	mov	r4, sl
 8010da0:	2205      	movs	r2, #5
 8010da2:	4854      	ldr	r0, [pc, #336]	@ (8010ef4 <_vfiprintf_r+0x21c>)
 8010da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010da8:	f000 fbaa 	bl	8011500 <memchr>
 8010dac:	9a04      	ldr	r2, [sp, #16]
 8010dae:	b9d8      	cbnz	r0, 8010de8 <_vfiprintf_r+0x110>
 8010db0:	06d1      	lsls	r1, r2, #27
 8010db2:	bf44      	itt	mi
 8010db4:	2320      	movmi	r3, #32
 8010db6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dba:	0713      	lsls	r3, r2, #28
 8010dbc:	bf44      	itt	mi
 8010dbe:	232b      	movmi	r3, #43	@ 0x2b
 8010dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dc4:	f89a 3000 	ldrb.w	r3, [sl]
 8010dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010dca:	d015      	beq.n	8010df8 <_vfiprintf_r+0x120>
 8010dcc:	9a07      	ldr	r2, [sp, #28]
 8010dce:	4654      	mov	r4, sl
 8010dd0:	2000      	movs	r0, #0
 8010dd2:	f04f 0c0a 	mov.w	ip, #10
 8010dd6:	4621      	mov	r1, r4
 8010dd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ddc:	3b30      	subs	r3, #48	@ 0x30
 8010dde:	2b09      	cmp	r3, #9
 8010de0:	d94b      	bls.n	8010e7a <_vfiprintf_r+0x1a2>
 8010de2:	b1b0      	cbz	r0, 8010e12 <_vfiprintf_r+0x13a>
 8010de4:	9207      	str	r2, [sp, #28]
 8010de6:	e014      	b.n	8010e12 <_vfiprintf_r+0x13a>
 8010de8:	eba0 0308 	sub.w	r3, r0, r8
 8010dec:	46a2      	mov	sl, r4
 8010dee:	fa09 f303 	lsl.w	r3, r9, r3
 8010df2:	4313      	orrs	r3, r2
 8010df4:	9304      	str	r3, [sp, #16]
 8010df6:	e7d2      	b.n	8010d9e <_vfiprintf_r+0xc6>
 8010df8:	9b03      	ldr	r3, [sp, #12]
 8010dfa:	1d19      	adds	r1, r3, #4
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	9103      	str	r1, [sp, #12]
 8010e02:	bfbb      	ittet	lt
 8010e04:	425b      	neglt	r3, r3
 8010e06:	f042 0202 	orrlt.w	r2, r2, #2
 8010e0a:	9307      	strge	r3, [sp, #28]
 8010e0c:	9307      	strlt	r3, [sp, #28]
 8010e0e:	bfb8      	it	lt
 8010e10:	9204      	strlt	r2, [sp, #16]
 8010e12:	7823      	ldrb	r3, [r4, #0]
 8010e14:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e16:	d10a      	bne.n	8010e2e <_vfiprintf_r+0x156>
 8010e18:	7863      	ldrb	r3, [r4, #1]
 8010e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e1c:	d132      	bne.n	8010e84 <_vfiprintf_r+0x1ac>
 8010e1e:	9b03      	ldr	r3, [sp, #12]
 8010e20:	3402      	adds	r4, #2
 8010e22:	1d1a      	adds	r2, r3, #4
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e2a:	9203      	str	r2, [sp, #12]
 8010e2c:	9305      	str	r3, [sp, #20]
 8010e2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010f04 <_vfiprintf_r+0x22c>
 8010e32:	2203      	movs	r2, #3
 8010e34:	7821      	ldrb	r1, [r4, #0]
 8010e36:	4650      	mov	r0, sl
 8010e38:	f000 fb62 	bl	8011500 <memchr>
 8010e3c:	b138      	cbz	r0, 8010e4e <_vfiprintf_r+0x176>
 8010e3e:	eba0 000a 	sub.w	r0, r0, sl
 8010e42:	2240      	movs	r2, #64	@ 0x40
 8010e44:	9b04      	ldr	r3, [sp, #16]
 8010e46:	3401      	adds	r4, #1
 8010e48:	4082      	lsls	r2, r0
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	9304      	str	r3, [sp, #16]
 8010e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e52:	2206      	movs	r2, #6
 8010e54:	4828      	ldr	r0, [pc, #160]	@ (8010ef8 <_vfiprintf_r+0x220>)
 8010e56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e5a:	f000 fb51 	bl	8011500 <memchr>
 8010e5e:	2800      	cmp	r0, #0
 8010e60:	d03f      	beq.n	8010ee2 <_vfiprintf_r+0x20a>
 8010e62:	4b26      	ldr	r3, [pc, #152]	@ (8010efc <_vfiprintf_r+0x224>)
 8010e64:	bb1b      	cbnz	r3, 8010eae <_vfiprintf_r+0x1d6>
 8010e66:	9b03      	ldr	r3, [sp, #12]
 8010e68:	3307      	adds	r3, #7
 8010e6a:	f023 0307 	bic.w	r3, r3, #7
 8010e6e:	3308      	adds	r3, #8
 8010e70:	9303      	str	r3, [sp, #12]
 8010e72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010e74:	443b      	add	r3, r7
 8010e76:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e78:	e76a      	b.n	8010d50 <_vfiprintf_r+0x78>
 8010e7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010e7e:	460c      	mov	r4, r1
 8010e80:	2001      	movs	r0, #1
 8010e82:	e7a8      	b.n	8010dd6 <_vfiprintf_r+0xfe>
 8010e84:	2300      	movs	r3, #0
 8010e86:	3401      	adds	r4, #1
 8010e88:	f04f 0c0a 	mov.w	ip, #10
 8010e8c:	4619      	mov	r1, r3
 8010e8e:	9305      	str	r3, [sp, #20]
 8010e90:	4620      	mov	r0, r4
 8010e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010e96:	3a30      	subs	r2, #48	@ 0x30
 8010e98:	2a09      	cmp	r2, #9
 8010e9a:	d903      	bls.n	8010ea4 <_vfiprintf_r+0x1cc>
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d0c6      	beq.n	8010e2e <_vfiprintf_r+0x156>
 8010ea0:	9105      	str	r1, [sp, #20]
 8010ea2:	e7c4      	b.n	8010e2e <_vfiprintf_r+0x156>
 8010ea4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ea8:	4604      	mov	r4, r0
 8010eaa:	2301      	movs	r3, #1
 8010eac:	e7f0      	b.n	8010e90 <_vfiprintf_r+0x1b8>
 8010eae:	ab03      	add	r3, sp, #12
 8010eb0:	462a      	mov	r2, r5
 8010eb2:	a904      	add	r1, sp, #16
 8010eb4:	4630      	mov	r0, r6
 8010eb6:	9300      	str	r3, [sp, #0]
 8010eb8:	4b11      	ldr	r3, [pc, #68]	@ (8010f00 <_vfiprintf_r+0x228>)
 8010eba:	f3af 8000 	nop.w
 8010ebe:	4607      	mov	r7, r0
 8010ec0:	1c78      	adds	r0, r7, #1
 8010ec2:	d1d6      	bne.n	8010e72 <_vfiprintf_r+0x19a>
 8010ec4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ec6:	07d9      	lsls	r1, r3, #31
 8010ec8:	d405      	bmi.n	8010ed6 <_vfiprintf_r+0x1fe>
 8010eca:	89ab      	ldrh	r3, [r5, #12]
 8010ecc:	059a      	lsls	r2, r3, #22
 8010ece:	d402      	bmi.n	8010ed6 <_vfiprintf_r+0x1fe>
 8010ed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ed2:	f7ff fc79 	bl	80107c8 <__retarget_lock_release_recursive>
 8010ed6:	89ab      	ldrh	r3, [r5, #12]
 8010ed8:	065b      	lsls	r3, r3, #25
 8010eda:	f53f af1f 	bmi.w	8010d1c <_vfiprintf_r+0x44>
 8010ede:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ee0:	e71e      	b.n	8010d20 <_vfiprintf_r+0x48>
 8010ee2:	ab03      	add	r3, sp, #12
 8010ee4:	462a      	mov	r2, r5
 8010ee6:	a904      	add	r1, sp, #16
 8010ee8:	4630      	mov	r0, r6
 8010eea:	9300      	str	r3, [sp, #0]
 8010eec:	4b04      	ldr	r3, [pc, #16]	@ (8010f00 <_vfiprintf_r+0x228>)
 8010eee:	f000 f87d 	bl	8010fec <_printf_i>
 8010ef2:	e7e4      	b.n	8010ebe <_vfiprintf_r+0x1e6>
 8010ef4:	080118e0 	.word	0x080118e0
 8010ef8:	080118ea 	.word	0x080118ea
 8010efc:	00000000 	.word	0x00000000
 8010f00:	08010cb3 	.word	0x08010cb3
 8010f04:	080118e6 	.word	0x080118e6

08010f08 <_printf_common>:
 8010f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f0c:	4616      	mov	r6, r2
 8010f0e:	4698      	mov	r8, r3
 8010f10:	688a      	ldr	r2, [r1, #8]
 8010f12:	4607      	mov	r7, r0
 8010f14:	690b      	ldr	r3, [r1, #16]
 8010f16:	460c      	mov	r4, r1
 8010f18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	bfb8      	it	lt
 8010f20:	4613      	movlt	r3, r2
 8010f22:	6033      	str	r3, [r6, #0]
 8010f24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010f28:	b10a      	cbz	r2, 8010f2e <_printf_common+0x26>
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	6033      	str	r3, [r6, #0]
 8010f2e:	6823      	ldr	r3, [r4, #0]
 8010f30:	0699      	lsls	r1, r3, #26
 8010f32:	bf42      	ittt	mi
 8010f34:	6833      	ldrmi	r3, [r6, #0]
 8010f36:	3302      	addmi	r3, #2
 8010f38:	6033      	strmi	r3, [r6, #0]
 8010f3a:	6825      	ldr	r5, [r4, #0]
 8010f3c:	f015 0506 	ands.w	r5, r5, #6
 8010f40:	d106      	bne.n	8010f50 <_printf_common+0x48>
 8010f42:	f104 0a19 	add.w	sl, r4, #25
 8010f46:	68e3      	ldr	r3, [r4, #12]
 8010f48:	6832      	ldr	r2, [r6, #0]
 8010f4a:	1a9b      	subs	r3, r3, r2
 8010f4c:	42ab      	cmp	r3, r5
 8010f4e:	dc2b      	bgt.n	8010fa8 <_printf_common+0xa0>
 8010f50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010f54:	6822      	ldr	r2, [r4, #0]
 8010f56:	3b00      	subs	r3, #0
 8010f58:	bf18      	it	ne
 8010f5a:	2301      	movne	r3, #1
 8010f5c:	0692      	lsls	r2, r2, #26
 8010f5e:	d430      	bmi.n	8010fc2 <_printf_common+0xba>
 8010f60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f64:	4641      	mov	r1, r8
 8010f66:	4638      	mov	r0, r7
 8010f68:	47c8      	blx	r9
 8010f6a:	3001      	adds	r0, #1
 8010f6c:	d023      	beq.n	8010fb6 <_printf_common+0xae>
 8010f6e:	6823      	ldr	r3, [r4, #0]
 8010f70:	341a      	adds	r4, #26
 8010f72:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8010f76:	f003 0306 	and.w	r3, r3, #6
 8010f7a:	2b04      	cmp	r3, #4
 8010f7c:	bf0a      	itet	eq
 8010f7e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8010f82:	2500      	movne	r5, #0
 8010f84:	6833      	ldreq	r3, [r6, #0]
 8010f86:	f04f 0600 	mov.w	r6, #0
 8010f8a:	bf08      	it	eq
 8010f8c:	1aed      	subeq	r5, r5, r3
 8010f8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8010f92:	bf08      	it	eq
 8010f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010f98:	4293      	cmp	r3, r2
 8010f9a:	bfc4      	itt	gt
 8010f9c:	1a9b      	subgt	r3, r3, r2
 8010f9e:	18ed      	addgt	r5, r5, r3
 8010fa0:	42b5      	cmp	r5, r6
 8010fa2:	d11a      	bne.n	8010fda <_printf_common+0xd2>
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	e008      	b.n	8010fba <_printf_common+0xb2>
 8010fa8:	2301      	movs	r3, #1
 8010faa:	4652      	mov	r2, sl
 8010fac:	4641      	mov	r1, r8
 8010fae:	4638      	mov	r0, r7
 8010fb0:	47c8      	blx	r9
 8010fb2:	3001      	adds	r0, #1
 8010fb4:	d103      	bne.n	8010fbe <_printf_common+0xb6>
 8010fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8010fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fbe:	3501      	adds	r5, #1
 8010fc0:	e7c1      	b.n	8010f46 <_printf_common+0x3e>
 8010fc2:	18e1      	adds	r1, r4, r3
 8010fc4:	1c5a      	adds	r2, r3, #1
 8010fc6:	2030      	movs	r0, #48	@ 0x30
 8010fc8:	3302      	adds	r3, #2
 8010fca:	4422      	add	r2, r4
 8010fcc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010fd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010fd8:	e7c2      	b.n	8010f60 <_printf_common+0x58>
 8010fda:	2301      	movs	r3, #1
 8010fdc:	4622      	mov	r2, r4
 8010fde:	4641      	mov	r1, r8
 8010fe0:	4638      	mov	r0, r7
 8010fe2:	47c8      	blx	r9
 8010fe4:	3001      	adds	r0, #1
 8010fe6:	d0e6      	beq.n	8010fb6 <_printf_common+0xae>
 8010fe8:	3601      	adds	r6, #1
 8010fea:	e7d9      	b.n	8010fa0 <_printf_common+0x98>

08010fec <_printf_i>:
 8010fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ff0:	7e0f      	ldrb	r7, [r1, #24]
 8010ff2:	4691      	mov	r9, r2
 8010ff4:	4680      	mov	r8, r0
 8010ff6:	460c      	mov	r4, r1
 8010ff8:	2f78      	cmp	r7, #120	@ 0x78
 8010ffa:	469a      	mov	sl, r3
 8010ffc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010ffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011002:	d807      	bhi.n	8011014 <_printf_i+0x28>
 8011004:	2f62      	cmp	r7, #98	@ 0x62
 8011006:	d80a      	bhi.n	801101e <_printf_i+0x32>
 8011008:	2f00      	cmp	r7, #0
 801100a:	f000 80d2 	beq.w	80111b2 <_printf_i+0x1c6>
 801100e:	2f58      	cmp	r7, #88	@ 0x58
 8011010:	f000 80b9 	beq.w	8011186 <_printf_i+0x19a>
 8011014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801101c:	e03a      	b.n	8011094 <_printf_i+0xa8>
 801101e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011022:	2b15      	cmp	r3, #21
 8011024:	d8f6      	bhi.n	8011014 <_printf_i+0x28>
 8011026:	a101      	add	r1, pc, #4	@ (adr r1, 801102c <_printf_i+0x40>)
 8011028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801102c:	08011085 	.word	0x08011085
 8011030:	08011099 	.word	0x08011099
 8011034:	08011015 	.word	0x08011015
 8011038:	08011015 	.word	0x08011015
 801103c:	08011015 	.word	0x08011015
 8011040:	08011015 	.word	0x08011015
 8011044:	08011099 	.word	0x08011099
 8011048:	08011015 	.word	0x08011015
 801104c:	08011015 	.word	0x08011015
 8011050:	08011015 	.word	0x08011015
 8011054:	08011015 	.word	0x08011015
 8011058:	08011199 	.word	0x08011199
 801105c:	080110c3 	.word	0x080110c3
 8011060:	08011153 	.word	0x08011153
 8011064:	08011015 	.word	0x08011015
 8011068:	08011015 	.word	0x08011015
 801106c:	080111bb 	.word	0x080111bb
 8011070:	08011015 	.word	0x08011015
 8011074:	080110c3 	.word	0x080110c3
 8011078:	08011015 	.word	0x08011015
 801107c:	08011015 	.word	0x08011015
 8011080:	0801115b 	.word	0x0801115b
 8011084:	6833      	ldr	r3, [r6, #0]
 8011086:	1d1a      	adds	r2, r3, #4
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	6032      	str	r2, [r6, #0]
 801108c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011094:	2301      	movs	r3, #1
 8011096:	e09d      	b.n	80111d4 <_printf_i+0x1e8>
 8011098:	6833      	ldr	r3, [r6, #0]
 801109a:	6820      	ldr	r0, [r4, #0]
 801109c:	1d19      	adds	r1, r3, #4
 801109e:	6031      	str	r1, [r6, #0]
 80110a0:	0606      	lsls	r6, r0, #24
 80110a2:	d501      	bpl.n	80110a8 <_printf_i+0xbc>
 80110a4:	681d      	ldr	r5, [r3, #0]
 80110a6:	e003      	b.n	80110b0 <_printf_i+0xc4>
 80110a8:	0645      	lsls	r5, r0, #25
 80110aa:	d5fb      	bpl.n	80110a4 <_printf_i+0xb8>
 80110ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80110b0:	2d00      	cmp	r5, #0
 80110b2:	da03      	bge.n	80110bc <_printf_i+0xd0>
 80110b4:	232d      	movs	r3, #45	@ 0x2d
 80110b6:	426d      	negs	r5, r5
 80110b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110bc:	4859      	ldr	r0, [pc, #356]	@ (8011224 <_printf_i+0x238>)
 80110be:	230a      	movs	r3, #10
 80110c0:	e011      	b.n	80110e6 <_printf_i+0xfa>
 80110c2:	6821      	ldr	r1, [r4, #0]
 80110c4:	6833      	ldr	r3, [r6, #0]
 80110c6:	0608      	lsls	r0, r1, #24
 80110c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80110cc:	d402      	bmi.n	80110d4 <_printf_i+0xe8>
 80110ce:	0649      	lsls	r1, r1, #25
 80110d0:	bf48      	it	mi
 80110d2:	b2ad      	uxthmi	r5, r5
 80110d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80110d6:	6033      	str	r3, [r6, #0]
 80110d8:	4852      	ldr	r0, [pc, #328]	@ (8011224 <_printf_i+0x238>)
 80110da:	bf14      	ite	ne
 80110dc:	230a      	movne	r3, #10
 80110de:	2308      	moveq	r3, #8
 80110e0:	2100      	movs	r1, #0
 80110e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80110e6:	6866      	ldr	r6, [r4, #4]
 80110e8:	2e00      	cmp	r6, #0
 80110ea:	60a6      	str	r6, [r4, #8]
 80110ec:	bfa2      	ittt	ge
 80110ee:	6821      	ldrge	r1, [r4, #0]
 80110f0:	f021 0104 	bicge.w	r1, r1, #4
 80110f4:	6021      	strge	r1, [r4, #0]
 80110f6:	b90d      	cbnz	r5, 80110fc <_printf_i+0x110>
 80110f8:	2e00      	cmp	r6, #0
 80110fa:	d04b      	beq.n	8011194 <_printf_i+0x1a8>
 80110fc:	4616      	mov	r6, r2
 80110fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8011102:	fb03 5711 	mls	r7, r3, r1, r5
 8011106:	5dc7      	ldrb	r7, [r0, r7]
 8011108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801110c:	462f      	mov	r7, r5
 801110e:	460d      	mov	r5, r1
 8011110:	42bb      	cmp	r3, r7
 8011112:	d9f4      	bls.n	80110fe <_printf_i+0x112>
 8011114:	2b08      	cmp	r3, #8
 8011116:	d10b      	bne.n	8011130 <_printf_i+0x144>
 8011118:	6823      	ldr	r3, [r4, #0]
 801111a:	07df      	lsls	r7, r3, #31
 801111c:	d508      	bpl.n	8011130 <_printf_i+0x144>
 801111e:	6923      	ldr	r3, [r4, #16]
 8011120:	6861      	ldr	r1, [r4, #4]
 8011122:	4299      	cmp	r1, r3
 8011124:	bfde      	ittt	le
 8011126:	2330      	movle	r3, #48	@ 0x30
 8011128:	f806 3c01 	strble.w	r3, [r6, #-1]
 801112c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011130:	1b92      	subs	r2, r2, r6
 8011132:	6122      	str	r2, [r4, #16]
 8011134:	464b      	mov	r3, r9
 8011136:	aa03      	add	r2, sp, #12
 8011138:	4621      	mov	r1, r4
 801113a:	4640      	mov	r0, r8
 801113c:	f8cd a000 	str.w	sl, [sp]
 8011140:	f7ff fee2 	bl	8010f08 <_printf_common>
 8011144:	3001      	adds	r0, #1
 8011146:	d14a      	bne.n	80111de <_printf_i+0x1f2>
 8011148:	f04f 30ff 	mov.w	r0, #4294967295
 801114c:	b004      	add	sp, #16
 801114e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011152:	6823      	ldr	r3, [r4, #0]
 8011154:	f043 0320 	orr.w	r3, r3, #32
 8011158:	6023      	str	r3, [r4, #0]
 801115a:	2778      	movs	r7, #120	@ 0x78
 801115c:	4832      	ldr	r0, [pc, #200]	@ (8011228 <_printf_i+0x23c>)
 801115e:	6823      	ldr	r3, [r4, #0]
 8011160:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011164:	061f      	lsls	r7, r3, #24
 8011166:	6831      	ldr	r1, [r6, #0]
 8011168:	f851 5b04 	ldr.w	r5, [r1], #4
 801116c:	d402      	bmi.n	8011174 <_printf_i+0x188>
 801116e:	065f      	lsls	r7, r3, #25
 8011170:	bf48      	it	mi
 8011172:	b2ad      	uxthmi	r5, r5
 8011174:	6031      	str	r1, [r6, #0]
 8011176:	07d9      	lsls	r1, r3, #31
 8011178:	bf44      	itt	mi
 801117a:	f043 0320 	orrmi.w	r3, r3, #32
 801117e:	6023      	strmi	r3, [r4, #0]
 8011180:	b11d      	cbz	r5, 801118a <_printf_i+0x19e>
 8011182:	2310      	movs	r3, #16
 8011184:	e7ac      	b.n	80110e0 <_printf_i+0xf4>
 8011186:	4827      	ldr	r0, [pc, #156]	@ (8011224 <_printf_i+0x238>)
 8011188:	e7e9      	b.n	801115e <_printf_i+0x172>
 801118a:	6823      	ldr	r3, [r4, #0]
 801118c:	f023 0320 	bic.w	r3, r3, #32
 8011190:	6023      	str	r3, [r4, #0]
 8011192:	e7f6      	b.n	8011182 <_printf_i+0x196>
 8011194:	4616      	mov	r6, r2
 8011196:	e7bd      	b.n	8011114 <_printf_i+0x128>
 8011198:	6833      	ldr	r3, [r6, #0]
 801119a:	6825      	ldr	r5, [r4, #0]
 801119c:	1d18      	adds	r0, r3, #4
 801119e:	6961      	ldr	r1, [r4, #20]
 80111a0:	6030      	str	r0, [r6, #0]
 80111a2:	062e      	lsls	r6, r5, #24
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	d501      	bpl.n	80111ac <_printf_i+0x1c0>
 80111a8:	6019      	str	r1, [r3, #0]
 80111aa:	e002      	b.n	80111b2 <_printf_i+0x1c6>
 80111ac:	0668      	lsls	r0, r5, #25
 80111ae:	d5fb      	bpl.n	80111a8 <_printf_i+0x1bc>
 80111b0:	8019      	strh	r1, [r3, #0]
 80111b2:	2300      	movs	r3, #0
 80111b4:	4616      	mov	r6, r2
 80111b6:	6123      	str	r3, [r4, #16]
 80111b8:	e7bc      	b.n	8011134 <_printf_i+0x148>
 80111ba:	6833      	ldr	r3, [r6, #0]
 80111bc:	2100      	movs	r1, #0
 80111be:	1d1a      	adds	r2, r3, #4
 80111c0:	6032      	str	r2, [r6, #0]
 80111c2:	681e      	ldr	r6, [r3, #0]
 80111c4:	6862      	ldr	r2, [r4, #4]
 80111c6:	4630      	mov	r0, r6
 80111c8:	f000 f99a 	bl	8011500 <memchr>
 80111cc:	b108      	cbz	r0, 80111d2 <_printf_i+0x1e6>
 80111ce:	1b80      	subs	r0, r0, r6
 80111d0:	6060      	str	r0, [r4, #4]
 80111d2:	6863      	ldr	r3, [r4, #4]
 80111d4:	6123      	str	r3, [r4, #16]
 80111d6:	2300      	movs	r3, #0
 80111d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80111dc:	e7aa      	b.n	8011134 <_printf_i+0x148>
 80111de:	6923      	ldr	r3, [r4, #16]
 80111e0:	4632      	mov	r2, r6
 80111e2:	4649      	mov	r1, r9
 80111e4:	4640      	mov	r0, r8
 80111e6:	47d0      	blx	sl
 80111e8:	3001      	adds	r0, #1
 80111ea:	d0ad      	beq.n	8011148 <_printf_i+0x15c>
 80111ec:	6823      	ldr	r3, [r4, #0]
 80111ee:	079b      	lsls	r3, r3, #30
 80111f0:	d413      	bmi.n	801121a <_printf_i+0x22e>
 80111f2:	68e0      	ldr	r0, [r4, #12]
 80111f4:	9b03      	ldr	r3, [sp, #12]
 80111f6:	4298      	cmp	r0, r3
 80111f8:	bfb8      	it	lt
 80111fa:	4618      	movlt	r0, r3
 80111fc:	e7a6      	b.n	801114c <_printf_i+0x160>
 80111fe:	2301      	movs	r3, #1
 8011200:	4632      	mov	r2, r6
 8011202:	4649      	mov	r1, r9
 8011204:	4640      	mov	r0, r8
 8011206:	47d0      	blx	sl
 8011208:	3001      	adds	r0, #1
 801120a:	d09d      	beq.n	8011148 <_printf_i+0x15c>
 801120c:	3501      	adds	r5, #1
 801120e:	68e3      	ldr	r3, [r4, #12]
 8011210:	9903      	ldr	r1, [sp, #12]
 8011212:	1a5b      	subs	r3, r3, r1
 8011214:	42ab      	cmp	r3, r5
 8011216:	dcf2      	bgt.n	80111fe <_printf_i+0x212>
 8011218:	e7eb      	b.n	80111f2 <_printf_i+0x206>
 801121a:	2500      	movs	r5, #0
 801121c:	f104 0619 	add.w	r6, r4, #25
 8011220:	e7f5      	b.n	801120e <_printf_i+0x222>
 8011222:	bf00      	nop
 8011224:	080118f1 	.word	0x080118f1
 8011228:	08011902 	.word	0x08011902

0801122c <__sflush_r>:
 801122c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011234:	0716      	lsls	r6, r2, #28
 8011236:	4605      	mov	r5, r0
 8011238:	460c      	mov	r4, r1
 801123a:	d454      	bmi.n	80112e6 <__sflush_r+0xba>
 801123c:	684b      	ldr	r3, [r1, #4]
 801123e:	2b00      	cmp	r3, #0
 8011240:	dc02      	bgt.n	8011248 <__sflush_r+0x1c>
 8011242:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011244:	2b00      	cmp	r3, #0
 8011246:	dd48      	ble.n	80112da <__sflush_r+0xae>
 8011248:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801124a:	2e00      	cmp	r6, #0
 801124c:	d045      	beq.n	80112da <__sflush_r+0xae>
 801124e:	2300      	movs	r3, #0
 8011250:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011254:	682f      	ldr	r7, [r5, #0]
 8011256:	6a21      	ldr	r1, [r4, #32]
 8011258:	602b      	str	r3, [r5, #0]
 801125a:	d030      	beq.n	80112be <__sflush_r+0x92>
 801125c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801125e:	89a3      	ldrh	r3, [r4, #12]
 8011260:	0759      	lsls	r1, r3, #29
 8011262:	d505      	bpl.n	8011270 <__sflush_r+0x44>
 8011264:	6863      	ldr	r3, [r4, #4]
 8011266:	1ad2      	subs	r2, r2, r3
 8011268:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801126a:	b10b      	cbz	r3, 8011270 <__sflush_r+0x44>
 801126c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801126e:	1ad2      	subs	r2, r2, r3
 8011270:	2300      	movs	r3, #0
 8011272:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011274:	6a21      	ldr	r1, [r4, #32]
 8011276:	4628      	mov	r0, r5
 8011278:	47b0      	blx	r6
 801127a:	1c43      	adds	r3, r0, #1
 801127c:	89a3      	ldrh	r3, [r4, #12]
 801127e:	d106      	bne.n	801128e <__sflush_r+0x62>
 8011280:	6829      	ldr	r1, [r5, #0]
 8011282:	291d      	cmp	r1, #29
 8011284:	d82b      	bhi.n	80112de <__sflush_r+0xb2>
 8011286:	4a2a      	ldr	r2, [pc, #168]	@ (8011330 <__sflush_r+0x104>)
 8011288:	410a      	asrs	r2, r1
 801128a:	07d6      	lsls	r6, r2, #31
 801128c:	d427      	bmi.n	80112de <__sflush_r+0xb2>
 801128e:	2200      	movs	r2, #0
 8011290:	04d9      	lsls	r1, r3, #19
 8011292:	6062      	str	r2, [r4, #4]
 8011294:	6922      	ldr	r2, [r4, #16]
 8011296:	6022      	str	r2, [r4, #0]
 8011298:	d504      	bpl.n	80112a4 <__sflush_r+0x78>
 801129a:	1c42      	adds	r2, r0, #1
 801129c:	d101      	bne.n	80112a2 <__sflush_r+0x76>
 801129e:	682b      	ldr	r3, [r5, #0]
 80112a0:	b903      	cbnz	r3, 80112a4 <__sflush_r+0x78>
 80112a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80112a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80112a6:	602f      	str	r7, [r5, #0]
 80112a8:	b1b9      	cbz	r1, 80112da <__sflush_r+0xae>
 80112aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80112ae:	4299      	cmp	r1, r3
 80112b0:	d002      	beq.n	80112b8 <__sflush_r+0x8c>
 80112b2:	4628      	mov	r0, r5
 80112b4:	f7ff fa96 	bl	80107e4 <_free_r>
 80112b8:	2300      	movs	r3, #0
 80112ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80112bc:	e00d      	b.n	80112da <__sflush_r+0xae>
 80112be:	2301      	movs	r3, #1
 80112c0:	4628      	mov	r0, r5
 80112c2:	47b0      	blx	r6
 80112c4:	4602      	mov	r2, r0
 80112c6:	1c50      	adds	r0, r2, #1
 80112c8:	d1c9      	bne.n	801125e <__sflush_r+0x32>
 80112ca:	682b      	ldr	r3, [r5, #0]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d0c6      	beq.n	801125e <__sflush_r+0x32>
 80112d0:	2b1d      	cmp	r3, #29
 80112d2:	d001      	beq.n	80112d8 <__sflush_r+0xac>
 80112d4:	2b16      	cmp	r3, #22
 80112d6:	d11d      	bne.n	8011314 <__sflush_r+0xe8>
 80112d8:	602f      	str	r7, [r5, #0]
 80112da:	2000      	movs	r0, #0
 80112dc:	e021      	b.n	8011322 <__sflush_r+0xf6>
 80112de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112e2:	b21b      	sxth	r3, r3
 80112e4:	e01a      	b.n	801131c <__sflush_r+0xf0>
 80112e6:	690f      	ldr	r7, [r1, #16]
 80112e8:	2f00      	cmp	r7, #0
 80112ea:	d0f6      	beq.n	80112da <__sflush_r+0xae>
 80112ec:	0793      	lsls	r3, r2, #30
 80112ee:	680e      	ldr	r6, [r1, #0]
 80112f0:	600f      	str	r7, [r1, #0]
 80112f2:	bf0c      	ite	eq
 80112f4:	694b      	ldreq	r3, [r1, #20]
 80112f6:	2300      	movne	r3, #0
 80112f8:	eba6 0807 	sub.w	r8, r6, r7
 80112fc:	608b      	str	r3, [r1, #8]
 80112fe:	f1b8 0f00 	cmp.w	r8, #0
 8011302:	ddea      	ble.n	80112da <__sflush_r+0xae>
 8011304:	4643      	mov	r3, r8
 8011306:	463a      	mov	r2, r7
 8011308:	6a21      	ldr	r1, [r4, #32]
 801130a:	4628      	mov	r0, r5
 801130c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801130e:	47b0      	blx	r6
 8011310:	2800      	cmp	r0, #0
 8011312:	dc08      	bgt.n	8011326 <__sflush_r+0xfa>
 8011314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801131c:	f04f 30ff 	mov.w	r0, #4294967295
 8011320:	81a3      	strh	r3, [r4, #12]
 8011322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011326:	4407      	add	r7, r0
 8011328:	eba8 0800 	sub.w	r8, r8, r0
 801132c:	e7e7      	b.n	80112fe <__sflush_r+0xd2>
 801132e:	bf00      	nop
 8011330:	dfbffffe 	.word	0xdfbffffe

08011334 <_fflush_r>:
 8011334:	b538      	push	{r3, r4, r5, lr}
 8011336:	690b      	ldr	r3, [r1, #16]
 8011338:	4605      	mov	r5, r0
 801133a:	460c      	mov	r4, r1
 801133c:	b913      	cbnz	r3, 8011344 <_fflush_r+0x10>
 801133e:	2500      	movs	r5, #0
 8011340:	4628      	mov	r0, r5
 8011342:	bd38      	pop	{r3, r4, r5, pc}
 8011344:	b118      	cbz	r0, 801134e <_fflush_r+0x1a>
 8011346:	6a03      	ldr	r3, [r0, #32]
 8011348:	b90b      	cbnz	r3, 801134e <_fflush_r+0x1a>
 801134a:	f7ff f8ff 	bl	801054c <__sinit>
 801134e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d0f3      	beq.n	801133e <_fflush_r+0xa>
 8011356:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011358:	07d0      	lsls	r0, r2, #31
 801135a:	d404      	bmi.n	8011366 <_fflush_r+0x32>
 801135c:	0599      	lsls	r1, r3, #22
 801135e:	d402      	bmi.n	8011366 <_fflush_r+0x32>
 8011360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011362:	f7ff fa30 	bl	80107c6 <__retarget_lock_acquire_recursive>
 8011366:	4628      	mov	r0, r5
 8011368:	4621      	mov	r1, r4
 801136a:	f7ff ff5f 	bl	801122c <__sflush_r>
 801136e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011370:	4605      	mov	r5, r0
 8011372:	07da      	lsls	r2, r3, #31
 8011374:	d4e4      	bmi.n	8011340 <_fflush_r+0xc>
 8011376:	89a3      	ldrh	r3, [r4, #12]
 8011378:	059b      	lsls	r3, r3, #22
 801137a:	d4e1      	bmi.n	8011340 <_fflush_r+0xc>
 801137c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801137e:	f7ff fa23 	bl	80107c8 <__retarget_lock_release_recursive>
 8011382:	e7dd      	b.n	8011340 <_fflush_r+0xc>

08011384 <__swbuf_r>:
 8011384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011386:	460e      	mov	r6, r1
 8011388:	4614      	mov	r4, r2
 801138a:	4605      	mov	r5, r0
 801138c:	b118      	cbz	r0, 8011396 <__swbuf_r+0x12>
 801138e:	6a03      	ldr	r3, [r0, #32]
 8011390:	b90b      	cbnz	r3, 8011396 <__swbuf_r+0x12>
 8011392:	f7ff f8db 	bl	801054c <__sinit>
 8011396:	69a3      	ldr	r3, [r4, #24]
 8011398:	60a3      	str	r3, [r4, #8]
 801139a:	89a3      	ldrh	r3, [r4, #12]
 801139c:	071a      	lsls	r2, r3, #28
 801139e:	d501      	bpl.n	80113a4 <__swbuf_r+0x20>
 80113a0:	6923      	ldr	r3, [r4, #16]
 80113a2:	b943      	cbnz	r3, 80113b6 <__swbuf_r+0x32>
 80113a4:	4621      	mov	r1, r4
 80113a6:	4628      	mov	r0, r5
 80113a8:	f000 f82a 	bl	8011400 <__swsetup_r>
 80113ac:	b118      	cbz	r0, 80113b6 <__swbuf_r+0x32>
 80113ae:	f04f 37ff 	mov.w	r7, #4294967295
 80113b2:	4638      	mov	r0, r7
 80113b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113b6:	6823      	ldr	r3, [r4, #0]
 80113b8:	b2f6      	uxtb	r6, r6
 80113ba:	6922      	ldr	r2, [r4, #16]
 80113bc:	4637      	mov	r7, r6
 80113be:	1a98      	subs	r0, r3, r2
 80113c0:	6963      	ldr	r3, [r4, #20]
 80113c2:	4283      	cmp	r3, r0
 80113c4:	dc05      	bgt.n	80113d2 <__swbuf_r+0x4e>
 80113c6:	4621      	mov	r1, r4
 80113c8:	4628      	mov	r0, r5
 80113ca:	f7ff ffb3 	bl	8011334 <_fflush_r>
 80113ce:	2800      	cmp	r0, #0
 80113d0:	d1ed      	bne.n	80113ae <__swbuf_r+0x2a>
 80113d2:	68a3      	ldr	r3, [r4, #8]
 80113d4:	3b01      	subs	r3, #1
 80113d6:	60a3      	str	r3, [r4, #8]
 80113d8:	6823      	ldr	r3, [r4, #0]
 80113da:	1c5a      	adds	r2, r3, #1
 80113dc:	6022      	str	r2, [r4, #0]
 80113de:	701e      	strb	r6, [r3, #0]
 80113e0:	1c43      	adds	r3, r0, #1
 80113e2:	6962      	ldr	r2, [r4, #20]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d004      	beq.n	80113f2 <__swbuf_r+0x6e>
 80113e8:	89a3      	ldrh	r3, [r4, #12]
 80113ea:	07db      	lsls	r3, r3, #31
 80113ec:	d5e1      	bpl.n	80113b2 <__swbuf_r+0x2e>
 80113ee:	2e0a      	cmp	r6, #10
 80113f0:	d1df      	bne.n	80113b2 <__swbuf_r+0x2e>
 80113f2:	4621      	mov	r1, r4
 80113f4:	4628      	mov	r0, r5
 80113f6:	f7ff ff9d 	bl	8011334 <_fflush_r>
 80113fa:	2800      	cmp	r0, #0
 80113fc:	d0d9      	beq.n	80113b2 <__swbuf_r+0x2e>
 80113fe:	e7d6      	b.n	80113ae <__swbuf_r+0x2a>

08011400 <__swsetup_r>:
 8011400:	b538      	push	{r3, r4, r5, lr}
 8011402:	4b29      	ldr	r3, [pc, #164]	@ (80114a8 <__swsetup_r+0xa8>)
 8011404:	4605      	mov	r5, r0
 8011406:	460c      	mov	r4, r1
 8011408:	6818      	ldr	r0, [r3, #0]
 801140a:	b118      	cbz	r0, 8011414 <__swsetup_r+0x14>
 801140c:	6a03      	ldr	r3, [r0, #32]
 801140e:	b90b      	cbnz	r3, 8011414 <__swsetup_r+0x14>
 8011410:	f7ff f89c 	bl	801054c <__sinit>
 8011414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011418:	0719      	lsls	r1, r3, #28
 801141a:	d422      	bmi.n	8011462 <__swsetup_r+0x62>
 801141c:	06da      	lsls	r2, r3, #27
 801141e:	d407      	bmi.n	8011430 <__swsetup_r+0x30>
 8011420:	2209      	movs	r2, #9
 8011422:	602a      	str	r2, [r5, #0]
 8011424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011428:	f04f 30ff 	mov.w	r0, #4294967295
 801142c:	81a3      	strh	r3, [r4, #12]
 801142e:	e033      	b.n	8011498 <__swsetup_r+0x98>
 8011430:	0758      	lsls	r0, r3, #29
 8011432:	d512      	bpl.n	801145a <__swsetup_r+0x5a>
 8011434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011436:	b141      	cbz	r1, 801144a <__swsetup_r+0x4a>
 8011438:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801143c:	4299      	cmp	r1, r3
 801143e:	d002      	beq.n	8011446 <__swsetup_r+0x46>
 8011440:	4628      	mov	r0, r5
 8011442:	f7ff f9cf 	bl	80107e4 <_free_r>
 8011446:	2300      	movs	r3, #0
 8011448:	6363      	str	r3, [r4, #52]	@ 0x34
 801144a:	89a3      	ldrh	r3, [r4, #12]
 801144c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011450:	81a3      	strh	r3, [r4, #12]
 8011452:	2300      	movs	r3, #0
 8011454:	6063      	str	r3, [r4, #4]
 8011456:	6923      	ldr	r3, [r4, #16]
 8011458:	6023      	str	r3, [r4, #0]
 801145a:	89a3      	ldrh	r3, [r4, #12]
 801145c:	f043 0308 	orr.w	r3, r3, #8
 8011460:	81a3      	strh	r3, [r4, #12]
 8011462:	6923      	ldr	r3, [r4, #16]
 8011464:	b94b      	cbnz	r3, 801147a <__swsetup_r+0x7a>
 8011466:	89a3      	ldrh	r3, [r4, #12]
 8011468:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801146c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011470:	d003      	beq.n	801147a <__swsetup_r+0x7a>
 8011472:	4621      	mov	r1, r4
 8011474:	4628      	mov	r0, r5
 8011476:	f000 f8a4 	bl	80115c2 <__smakebuf_r>
 801147a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801147e:	f013 0201 	ands.w	r2, r3, #1
 8011482:	d00a      	beq.n	801149a <__swsetup_r+0x9a>
 8011484:	2200      	movs	r2, #0
 8011486:	60a2      	str	r2, [r4, #8]
 8011488:	6962      	ldr	r2, [r4, #20]
 801148a:	4252      	negs	r2, r2
 801148c:	61a2      	str	r2, [r4, #24]
 801148e:	6922      	ldr	r2, [r4, #16]
 8011490:	b942      	cbnz	r2, 80114a4 <__swsetup_r+0xa4>
 8011492:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011496:	d1c5      	bne.n	8011424 <__swsetup_r+0x24>
 8011498:	bd38      	pop	{r3, r4, r5, pc}
 801149a:	0799      	lsls	r1, r3, #30
 801149c:	bf58      	it	pl
 801149e:	6962      	ldrpl	r2, [r4, #20]
 80114a0:	60a2      	str	r2, [r4, #8]
 80114a2:	e7f4      	b.n	801148e <__swsetup_r+0x8e>
 80114a4:	2000      	movs	r0, #0
 80114a6:	e7f7      	b.n	8011498 <__swsetup_r+0x98>
 80114a8:	20000130 	.word	0x20000130

080114ac <memmove>:
 80114ac:	4288      	cmp	r0, r1
 80114ae:	b510      	push	{r4, lr}
 80114b0:	eb01 0402 	add.w	r4, r1, r2
 80114b4:	d902      	bls.n	80114bc <memmove+0x10>
 80114b6:	4284      	cmp	r4, r0
 80114b8:	4623      	mov	r3, r4
 80114ba:	d807      	bhi.n	80114cc <memmove+0x20>
 80114bc:	1e43      	subs	r3, r0, #1
 80114be:	42a1      	cmp	r1, r4
 80114c0:	d008      	beq.n	80114d4 <memmove+0x28>
 80114c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80114c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80114ca:	e7f8      	b.n	80114be <memmove+0x12>
 80114cc:	4402      	add	r2, r0
 80114ce:	4601      	mov	r1, r0
 80114d0:	428a      	cmp	r2, r1
 80114d2:	d100      	bne.n	80114d6 <memmove+0x2a>
 80114d4:	bd10      	pop	{r4, pc}
 80114d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80114da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80114de:	e7f7      	b.n	80114d0 <memmove+0x24>

080114e0 <_sbrk_r>:
 80114e0:	b538      	push	{r3, r4, r5, lr}
 80114e2:	2300      	movs	r3, #0
 80114e4:	4d05      	ldr	r5, [pc, #20]	@ (80114fc <_sbrk_r+0x1c>)
 80114e6:	4604      	mov	r4, r0
 80114e8:	4608      	mov	r0, r1
 80114ea:	602b      	str	r3, [r5, #0]
 80114ec:	f7f0 fc78 	bl	8001de0 <_sbrk>
 80114f0:	1c43      	adds	r3, r0, #1
 80114f2:	d102      	bne.n	80114fa <_sbrk_r+0x1a>
 80114f4:	682b      	ldr	r3, [r5, #0]
 80114f6:	b103      	cbz	r3, 80114fa <_sbrk_r+0x1a>
 80114f8:	6023      	str	r3, [r4, #0]
 80114fa:	bd38      	pop	{r3, r4, r5, pc}
 80114fc:	200113a4 	.word	0x200113a4

08011500 <memchr>:
 8011500:	b2c9      	uxtb	r1, r1
 8011502:	4603      	mov	r3, r0
 8011504:	4402      	add	r2, r0
 8011506:	b510      	push	{r4, lr}
 8011508:	4293      	cmp	r3, r2
 801150a:	4618      	mov	r0, r3
 801150c:	d101      	bne.n	8011512 <memchr+0x12>
 801150e:	2000      	movs	r0, #0
 8011510:	e003      	b.n	801151a <memchr+0x1a>
 8011512:	7804      	ldrb	r4, [r0, #0]
 8011514:	3301      	adds	r3, #1
 8011516:	428c      	cmp	r4, r1
 8011518:	d1f6      	bne.n	8011508 <memchr+0x8>
 801151a:	bd10      	pop	{r4, pc}

0801151c <_realloc_r>:
 801151c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011520:	4680      	mov	r8, r0
 8011522:	4615      	mov	r5, r2
 8011524:	460c      	mov	r4, r1
 8011526:	b921      	cbnz	r1, 8011532 <_realloc_r+0x16>
 8011528:	4611      	mov	r1, r2
 801152a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801152e:	f7ff b9c5 	b.w	80108bc <_malloc_r>
 8011532:	b92a      	cbnz	r2, 8011540 <_realloc_r+0x24>
 8011534:	f7ff f956 	bl	80107e4 <_free_r>
 8011538:	2400      	movs	r4, #0
 801153a:	4620      	mov	r0, r4
 801153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011540:	f000 f89e 	bl	8011680 <_malloc_usable_size_r>
 8011544:	4285      	cmp	r5, r0
 8011546:	4606      	mov	r6, r0
 8011548:	d802      	bhi.n	8011550 <_realloc_r+0x34>
 801154a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801154e:	d8f4      	bhi.n	801153a <_realloc_r+0x1e>
 8011550:	4629      	mov	r1, r5
 8011552:	4640      	mov	r0, r8
 8011554:	f7ff f9b2 	bl	80108bc <_malloc_r>
 8011558:	4607      	mov	r7, r0
 801155a:	2800      	cmp	r0, #0
 801155c:	d0ec      	beq.n	8011538 <_realloc_r+0x1c>
 801155e:	42b5      	cmp	r5, r6
 8011560:	462a      	mov	r2, r5
 8011562:	4621      	mov	r1, r4
 8011564:	bf28      	it	cs
 8011566:	4632      	movcs	r2, r6
 8011568:	f7ff f92f 	bl	80107ca <memcpy>
 801156c:	4621      	mov	r1, r4
 801156e:	4640      	mov	r0, r8
 8011570:	463c      	mov	r4, r7
 8011572:	f7ff f937 	bl	80107e4 <_free_r>
 8011576:	e7e0      	b.n	801153a <_realloc_r+0x1e>

08011578 <__swhatbuf_r>:
 8011578:	b570      	push	{r4, r5, r6, lr}
 801157a:	460c      	mov	r4, r1
 801157c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011580:	b096      	sub	sp, #88	@ 0x58
 8011582:	4615      	mov	r5, r2
 8011584:	2900      	cmp	r1, #0
 8011586:	461e      	mov	r6, r3
 8011588:	da0c      	bge.n	80115a4 <__swhatbuf_r+0x2c>
 801158a:	89a3      	ldrh	r3, [r4, #12]
 801158c:	2100      	movs	r1, #0
 801158e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011592:	bf14      	ite	ne
 8011594:	2340      	movne	r3, #64	@ 0x40
 8011596:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801159a:	2000      	movs	r0, #0
 801159c:	6031      	str	r1, [r6, #0]
 801159e:	602b      	str	r3, [r5, #0]
 80115a0:	b016      	add	sp, #88	@ 0x58
 80115a2:	bd70      	pop	{r4, r5, r6, pc}
 80115a4:	466a      	mov	r2, sp
 80115a6:	f000 f849 	bl	801163c <_fstat_r>
 80115aa:	2800      	cmp	r0, #0
 80115ac:	dbed      	blt.n	801158a <__swhatbuf_r+0x12>
 80115ae:	9901      	ldr	r1, [sp, #4]
 80115b0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80115b4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80115b8:	4259      	negs	r1, r3
 80115ba:	4159      	adcs	r1, r3
 80115bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80115c0:	e7eb      	b.n	801159a <__swhatbuf_r+0x22>

080115c2 <__smakebuf_r>:
 80115c2:	898b      	ldrh	r3, [r1, #12]
 80115c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115c6:	079d      	lsls	r5, r3, #30
 80115c8:	4606      	mov	r6, r0
 80115ca:	460c      	mov	r4, r1
 80115cc:	d507      	bpl.n	80115de <__smakebuf_r+0x1c>
 80115ce:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80115d2:	6023      	str	r3, [r4, #0]
 80115d4:	6123      	str	r3, [r4, #16]
 80115d6:	2301      	movs	r3, #1
 80115d8:	6163      	str	r3, [r4, #20]
 80115da:	b003      	add	sp, #12
 80115dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115de:	ab01      	add	r3, sp, #4
 80115e0:	466a      	mov	r2, sp
 80115e2:	f7ff ffc9 	bl	8011578 <__swhatbuf_r>
 80115e6:	9f00      	ldr	r7, [sp, #0]
 80115e8:	4605      	mov	r5, r0
 80115ea:	4630      	mov	r0, r6
 80115ec:	4639      	mov	r1, r7
 80115ee:	f7ff f965 	bl	80108bc <_malloc_r>
 80115f2:	b948      	cbnz	r0, 8011608 <__smakebuf_r+0x46>
 80115f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80115f8:	059a      	lsls	r2, r3, #22
 80115fa:	d4ee      	bmi.n	80115da <__smakebuf_r+0x18>
 80115fc:	f023 0303 	bic.w	r3, r3, #3
 8011600:	f043 0302 	orr.w	r3, r3, #2
 8011604:	81a3      	strh	r3, [r4, #12]
 8011606:	e7e2      	b.n	80115ce <__smakebuf_r+0xc>
 8011608:	89a3      	ldrh	r3, [r4, #12]
 801160a:	6020      	str	r0, [r4, #0]
 801160c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011610:	81a3      	strh	r3, [r4, #12]
 8011612:	9b01      	ldr	r3, [sp, #4]
 8011614:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011618:	b15b      	cbz	r3, 8011632 <__smakebuf_r+0x70>
 801161a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801161e:	4630      	mov	r0, r6
 8011620:	f000 f81e 	bl	8011660 <_isatty_r>
 8011624:	b128      	cbz	r0, 8011632 <__smakebuf_r+0x70>
 8011626:	89a3      	ldrh	r3, [r4, #12]
 8011628:	f023 0303 	bic.w	r3, r3, #3
 801162c:	f043 0301 	orr.w	r3, r3, #1
 8011630:	81a3      	strh	r3, [r4, #12]
 8011632:	89a3      	ldrh	r3, [r4, #12]
 8011634:	431d      	orrs	r5, r3
 8011636:	81a5      	strh	r5, [r4, #12]
 8011638:	e7cf      	b.n	80115da <__smakebuf_r+0x18>
	...

0801163c <_fstat_r>:
 801163c:	b538      	push	{r3, r4, r5, lr}
 801163e:	2300      	movs	r3, #0
 8011640:	4d06      	ldr	r5, [pc, #24]	@ (801165c <_fstat_r+0x20>)
 8011642:	4604      	mov	r4, r0
 8011644:	4608      	mov	r0, r1
 8011646:	4611      	mov	r1, r2
 8011648:	602b      	str	r3, [r5, #0]
 801164a:	f7f0 fba0 	bl	8001d8e <_fstat>
 801164e:	1c43      	adds	r3, r0, #1
 8011650:	d102      	bne.n	8011658 <_fstat_r+0x1c>
 8011652:	682b      	ldr	r3, [r5, #0]
 8011654:	b103      	cbz	r3, 8011658 <_fstat_r+0x1c>
 8011656:	6023      	str	r3, [r4, #0]
 8011658:	bd38      	pop	{r3, r4, r5, pc}
 801165a:	bf00      	nop
 801165c:	200113a4 	.word	0x200113a4

08011660 <_isatty_r>:
 8011660:	b538      	push	{r3, r4, r5, lr}
 8011662:	2300      	movs	r3, #0
 8011664:	4d05      	ldr	r5, [pc, #20]	@ (801167c <_isatty_r+0x1c>)
 8011666:	4604      	mov	r4, r0
 8011668:	4608      	mov	r0, r1
 801166a:	602b      	str	r3, [r5, #0]
 801166c:	f7f0 fb9f 	bl	8001dae <_isatty>
 8011670:	1c43      	adds	r3, r0, #1
 8011672:	d102      	bne.n	801167a <_isatty_r+0x1a>
 8011674:	682b      	ldr	r3, [r5, #0]
 8011676:	b103      	cbz	r3, 801167a <_isatty_r+0x1a>
 8011678:	6023      	str	r3, [r4, #0]
 801167a:	bd38      	pop	{r3, r4, r5, pc}
 801167c:	200113a4 	.word	0x200113a4

08011680 <_malloc_usable_size_r>:
 8011680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011684:	1f18      	subs	r0, r3, #4
 8011686:	2b00      	cmp	r3, #0
 8011688:	bfbc      	itt	lt
 801168a:	580b      	ldrlt	r3, [r1, r0]
 801168c:	18c0      	addlt	r0, r0, r3
 801168e:	4770      	bx	lr

08011690 <_init>:
 8011690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011692:	bf00      	nop
 8011694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011696:	bc08      	pop	{r3}
 8011698:	469e      	mov	lr, r3
 801169a:	4770      	bx	lr

0801169c <_fini>:
 801169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801169e:	bf00      	nop
 80116a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116a2:	bc08      	pop	{r3}
 80116a4:	469e      	mov	lr, r3
 80116a6:	4770      	bx	lr
