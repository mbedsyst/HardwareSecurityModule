
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6cc  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800f918  0800f918  00010918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9f0  0800f9f0  00011170  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9f0  0800f9f0  000109f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f9f8  0800f9f8  00011170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9f8  0800f9f8  000109f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f9fc  0800f9fc  000109fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  0800fa00  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001078  20000170  0800fb70  00011170  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  200011e8  0800fb70  000111e8  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00011170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002040f  00000000  00000000  000111a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041b4  00000000  00000000  000315b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00035770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001211  00000000  00000000  00036f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000061f0  00000000  00000000  00038119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021ebf  00000000  00000000  0003e309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013e778  00000000  00000000  000601c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019e940  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006850  00000000  00000000  0019e984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001a51d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000170 	.word	0x20000170
 8000268:	00000000 	.word	0x00000000
 800026c:	0800f900 	.word	0x0800f900

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000174 	.word	0x20000174
 8000288:	0800f900 	.word	0x0800f900

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b97e 	b.w	80005b0 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d2:	460c      	mov	r4, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14d      	bne.n	8000374 <__udivmoddi4+0xa8>
 80002d8:	428a      	cmp	r2, r1
 80002da:	460f      	mov	r7, r1
 80002dc:	4684      	mov	ip, r0
 80002de:	4696      	mov	lr, r2
 80002e0:	fab2 f382 	clz	r3, r2
 80002e4:	d960      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80002e6:	b14b      	cbz	r3, 80002fc <__udivmoddi4+0x30>
 80002e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002ec:	f1c3 0220 	rsb	r2, r3, #32
 80002f0:	409f      	lsls	r7, r3
 80002f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000300:	fa1f f48e 	uxth.w	r4, lr
 8000304:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000308:	fbb7 f1f6 	udiv	r1, r7, r6
 800030c:	fb06 7711 	mls	r7, r6, r1, r7
 8000310:	fb01 f004 	mul.w	r0, r1, r4
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	4290      	cmp	r0, r2
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x62>
 800031c:	eb1e 0202 	adds.w	r2, lr, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x60>
 8000326:	4290      	cmp	r0, r2
 8000328:	f200 812d 	bhi.w	8000586 <__udivmoddi4+0x2ba>
 800032c:	4639      	mov	r1, r7
 800032e:	1a12      	subs	r2, r2, r0
 8000330:	fa1f fc8c 	uxth.w	ip, ip
 8000334:	fbb2 f0f6 	udiv	r0, r2, r6
 8000338:	fb06 2210 	mls	r2, r6, r0, r2
 800033c:	fb00 f404 	mul.w	r4, r0, r4
 8000340:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000344:	4564      	cmp	r4, ip
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x8e>
 8000348:	eb1e 0c0c 	adds.w	ip, lr, ip
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x8c>
 8000352:	4564      	cmp	r4, ip
 8000354:	f200 811a 	bhi.w	800058c <__udivmoddi4+0x2c0>
 8000358:	4610      	mov	r0, r2
 800035a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035e:	ebac 0c04 	sub.w	ip, ip, r4
 8000362:	2100      	movs	r1, #0
 8000364:	b125      	cbz	r5, 8000370 <__udivmoddi4+0xa4>
 8000366:	fa2c f303 	lsr.w	r3, ip, r3
 800036a:	2200      	movs	r2, #0
 800036c:	e9c5 3200 	strd	r3, r2, [r5]
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d905      	bls.n	8000384 <__udivmoddi4+0xb8>
 8000378:	b10d      	cbz	r5, 800037e <__udivmoddi4+0xb2>
 800037a:	e9c5 0100 	strd	r0, r1, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	4608      	mov	r0, r1
 8000382:	e7f5      	b.n	8000370 <__udivmoddi4+0xa4>
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d14d      	bne.n	8000428 <__udivmoddi4+0x15c>
 800038c:	42a3      	cmp	r3, r4
 800038e:	f0c0 80f2 	bcc.w	8000576 <__udivmoddi4+0x2aa>
 8000392:	4290      	cmp	r0, r2
 8000394:	f080 80ef 	bcs.w	8000576 <__udivmoddi4+0x2aa>
 8000398:	4606      	mov	r6, r0
 800039a:	4623      	mov	r3, r4
 800039c:	4608      	mov	r0, r1
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e6      	beq.n	8000370 <__udivmoddi4+0xa4>
 80003a2:	e9c5 6300 	strd	r6, r3, [r5]
 80003a6:	e7e3      	b.n	8000370 <__udivmoddi4+0xa4>
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 80a2 	bne.w	80004f2 <__udivmoddi4+0x226>
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b4:	fa1f f68e 	uxth.w	r6, lr
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80003be:	fb07 2014 	mls	r0, r7, r4, r2
 80003c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb06 f004 	mul.w	r0, r6, r4
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d90f      	bls.n	80003f2 <__udivmoddi4+0x126>
 80003d2:	eb1e 0202 	adds.w	r2, lr, r2
 80003d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003da:	bf2c      	ite	cs
 80003dc:	f04f 0901 	movcs.w	r9, #1
 80003e0:	f04f 0900 	movcc.w	r9, #0
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d903      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003e8:	f1b9 0f00 	cmp.w	r9, #0
 80003ec:	f000 80c8 	beq.w	8000580 <__udivmoddi4+0x2b4>
 80003f0:	4644      	mov	r4, r8
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	fa1f fc8c 	uxth.w	ip, ip
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	fb00 f606 	mul.w	r6, r0, r6
 8000404:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000408:	4566      	cmp	r6, ip
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x152>
 800040c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x150>
 8000416:	4566      	cmp	r6, ip
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c6>
 800041c:	4610      	mov	r0, r2
 800041e:	ebac 0c06 	sub.w	ip, ip, r6
 8000422:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000426:	e79d      	b.n	8000364 <__udivmoddi4+0x98>
 8000428:	f1c1 0620 	rsb	r6, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	fa20 fc06 	lsr.w	ip, r0, r6
 800043a:	40f4      	lsrs	r4, r6
 800043c:	408a      	lsls	r2, r1
 800043e:	431f      	orrs	r7, r3
 8000440:	ea4e 030c 	orr.w	r3, lr, ip
 8000444:	fa00 fe01 	lsl.w	lr, r0, r1
 8000448:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800044c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000450:	fa1f fc87 	uxth.w	ip, r7
 8000454:	fbb4 f0f8 	udiv	r0, r4, r8
 8000458:	fb08 4410 	mls	r4, r8, r0, r4
 800045c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000460:	fb00 f90c 	mul.w	r9, r0, ip
 8000464:	45a1      	cmp	r9, r4
 8000466:	d90e      	bls.n	8000486 <__udivmoddi4+0x1ba>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 3aff 	add.w	sl, r0, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	45a1      	cmp	r9, r4
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b8>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 8093 	beq.w	80005aa <__udivmoddi4+0x2de>
 8000484:	4650      	mov	r0, sl
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000492:	fb08 4413 	mls	r4, r8, r3, r4
 8000496:	fb03 fc0c 	mul.w	ip, r3, ip
 800049a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d906      	bls.n	80004b0 <__udivmoddi4+0x1e4>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x1e2>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d87a      	bhi.n	80005a4 <__udivmoddi4+0x2d8>
 80004ae:	4643      	mov	r3, r8
 80004b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b4:	eba4 040c 	sub.w	r4, r4, ip
 80004b8:	fba0 9802 	umull	r9, r8, r0, r2
 80004bc:	4544      	cmp	r4, r8
 80004be:	46cc      	mov	ip, r9
 80004c0:	4643      	mov	r3, r8
 80004c2:	d302      	bcc.n	80004ca <__udivmoddi4+0x1fe>
 80004c4:	d106      	bne.n	80004d4 <__udivmoddi4+0x208>
 80004c6:	45ce      	cmp	lr, r9
 80004c8:	d204      	bcs.n	80004d4 <__udivmoddi4+0x208>
 80004ca:	3801      	subs	r0, #1
 80004cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004d0:	eb68 0307 	sbc.w	r3, r8, r7
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x222>
 80004d6:	ebbe 020c 	subs.w	r2, lr, ip
 80004da:	eb64 0403 	sbc.w	r4, r4, r3
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e73e      	b.n	8000370 <__udivmoddi4+0xa4>
 80004f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f6:	f1c3 0120 	rsb	r1, r3, #32
 80004fa:	fa04 f203 	lsl.w	r2, r4, r3
 80004fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000508:	fa20 f101 	lsr.w	r1, r0, r1
 800050c:	fa1f f68e 	uxth.w	r6, lr
 8000510:	fbb4 f0f7 	udiv	r0, r4, r7
 8000514:	430a      	orrs	r2, r1
 8000516:	fb07 4410 	mls	r4, r7, r0, r4
 800051a:	0c11      	lsrs	r1, r2, #16
 800051c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000520:	fb00 f406 	mul.w	r4, r0, r6
 8000524:	428c      	cmp	r4, r1
 8000526:	d90e      	bls.n	8000546 <__udivmoddi4+0x27a>
 8000528:	eb1e 0101 	adds.w	r1, lr, r1
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0901 	movcs.w	r9, #1
 8000536:	f04f 0900 	movcc.w	r9, #0
 800053a:	428c      	cmp	r4, r1
 800053c:	d902      	bls.n	8000544 <__udivmoddi4+0x278>
 800053e:	f1b9 0f00 	cmp.w	r9, #0
 8000542:	d02c      	beq.n	800059e <__udivmoddi4+0x2d2>
 8000544:	4640      	mov	r0, r8
 8000546:	1b09      	subs	r1, r1, r4
 8000548:	b292      	uxth	r2, r2
 800054a:	fbb1 f4f7 	udiv	r4, r1, r7
 800054e:	fb07 1114 	mls	r1, r7, r4, r1
 8000552:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000556:	fb04 f106 	mul.w	r1, r4, r6
 800055a:	4291      	cmp	r1, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x2a2>
 800055e:	eb1e 0202 	adds.w	r2, lr, r2
 8000562:	f104 38ff 	add.w	r8, r4, #4294967295
 8000566:	d201      	bcs.n	800056c <__udivmoddi4+0x2a0>
 8000568:	4291      	cmp	r1, r2
 800056a:	d815      	bhi.n	8000598 <__udivmoddi4+0x2cc>
 800056c:	4644      	mov	r4, r8
 800056e:	1a52      	subs	r2, r2, r1
 8000570:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000574:	e721      	b.n	80003ba <__udivmoddi4+0xee>
 8000576:	1a86      	subs	r6, r0, r2
 8000578:	eb64 0303 	sbc.w	r3, r4, r3
 800057c:	2001      	movs	r0, #1
 800057e:	e70e      	b.n	800039e <__udivmoddi4+0xd2>
 8000580:	3c02      	subs	r4, #2
 8000582:	4472      	add	r2, lr
 8000584:	e735      	b.n	80003f2 <__udivmoddi4+0x126>
 8000586:	3902      	subs	r1, #2
 8000588:	4472      	add	r2, lr
 800058a:	e6d0      	b.n	800032e <__udivmoddi4+0x62>
 800058c:	44f4      	add	ip, lr
 800058e:	3802      	subs	r0, #2
 8000590:	e6e3      	b.n	800035a <__udivmoddi4+0x8e>
 8000592:	44f4      	add	ip, lr
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x152>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e7e7      	b.n	800056e <__udivmoddi4+0x2a2>
 800059e:	3802      	subs	r0, #2
 80005a0:	4471      	add	r1, lr
 80005a2:	e7d0      	b.n	8000546 <__udivmoddi4+0x27a>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443c      	add	r4, r7
 80005a8:	e782      	b.n	80004b0 <__udivmoddi4+0x1e4>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e76a      	b.n	8000486 <__udivmoddi4+0x1ba>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b092      	sub	sp, #72	@ 0x48
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f001 f87f 	bl	80016bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f863 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fa19 	bl	80009f8 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80005c6:	f000 f9b5 	bl	8000934 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f967 	bl	800089c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ce:	f000 f8cf 	bl	8000770 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005d2:	f000 f90d 	bl	80007f0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80005d6:	bf00      	nop
 80005d8:	4b27      	ldr	r3, [pc, #156]	@ (8000678 <main+0xc4>)
 80005da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d0fa      	beq.n	80005d8 <main+0x24>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f000 fe96 	bl	8001314 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 fe93 	bl	8001314 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005ee:	2002      	movs	r0, #2
 80005f0:	f000 fe90 	bl	8001314 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005f4:	2101      	movs	r1, #1
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 ff02 	bl	8001400 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80005fc:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <main+0xc8>)
 80005fe:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000602:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000604:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <main+0xc8>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800060a:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <main+0xc8>)
 800060c:	2200      	movs	r2, #0
 800060e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000610:	4b1a      	ldr	r3, [pc, #104]	@ (800067c <main+0xc8>)
 8000612:	2200      	movs	r2, #0
 8000614:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000616:	4b19      	ldr	r3, [pc, #100]	@ (800067c <main+0xc8>)
 8000618:	2200      	movs	r2, #0
 800061a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800061c:	4917      	ldr	r1, [pc, #92]	@ (800067c <main+0xc8>)
 800061e:	2000      	movs	r0, #0
 8000620:	f000 ff88 	bl	8001534 <BSP_COM_Init>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <main+0x7a>
  {
    Error_Handler();
 800062a:	f000 fae1 	bl	8000bf0 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      for(uint32_t j = 0; j <= UINT32_MAX; j++)
 800062e:	2300      	movs	r3, #0
 8000630:	647b      	str	r3, [r7, #68]	@ 0x44
      {
          snprintf(TxMessageBuffer, sizeof(TxMessageBuffer), "Counter: %lu\r\n", (unsigned long)j);
 8000632:	1d38      	adds	r0, r7, #4
 8000634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000636:	4a12      	ldr	r2, [pc, #72]	@ (8000680 <main+0xcc>)
 8000638:	2140      	movs	r1, #64	@ 0x40
 800063a:	f00e fc9b 	bl	800ef74 <sniprintf>
          TEMPLATE_Transmit((uint8_t*)TxMessageBuffer, strlen(TxMessageBuffer));
 800063e:	1d3b      	adds	r3, r7, #4
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fe23 	bl	800028c <strlen>
 8000646:	4603      	mov	r3, r0
 8000648:	b29a      	uxth	r2, r3
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	4611      	mov	r1, r2
 800064e:	4618      	mov	r0, r3
 8000650:	f00c fe4c 	bl	800d2ec <TEMPLATE_Transmit>
          HAL_Delay(j%1000);
 8000654:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000656:	4b0b      	ldr	r3, [pc, #44]	@ (8000684 <main+0xd0>)
 8000658:	fba3 1302 	umull	r1, r3, r3, r2
 800065c:	099b      	lsrs	r3, r3, #6
 800065e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000662:	fb01 f303 	mul.w	r3, r1, r3
 8000666:	1ad3      	subs	r3, r2, r3
 8000668:	4618      	mov	r0, r3
 800066a:	f001 f8e5 	bl	8001838 <HAL_Delay>
      for(uint32_t j = 0; j <= UINT32_MAX; j++)
 800066e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000670:	3301      	adds	r3, #1
 8000672:	647b      	str	r3, [r7, #68]	@ 0x44
          snprintf(TxMessageBuffer, sizeof(TxMessageBuffer), "Counter: %lu\r\n", (unsigned long)j);
 8000674:	bf00      	nop
 8000676:	e7dc      	b.n	8000632 <main+0x7e>
 8000678:	200005f8 	.word	0x200005f8
 800067c:	2000018c 	.word	0x2000018c
 8000680:	0800f918 	.word	0x0800f918
 8000684:	10624dd3 	.word	0x10624dd3

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b09c      	sub	sp, #112	@ 0x70
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2250      	movs	r2, #80	@ 0x50
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f00e fca0 	bl	800efdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
 80006ac:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000768 <SystemClock_Config+0xe0>)
 80006b0:	691b      	ldr	r3, [r3, #16]
 80006b2:	4a2d      	ldr	r2, [pc, #180]	@ (8000768 <SystemClock_Config+0xe0>)
 80006b4:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80006b8:	6113      	str	r3, [r2, #16]
 80006ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000768 <SystemClock_Config+0xe0>)
 80006bc:	691b      	ldr	r3, [r3, #16]
 80006be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006c6:	bf00      	nop
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <SystemClock_Config+0xe0>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	f003 0308 	and.w	r3, r3, #8
 80006d0:	2b08      	cmp	r3, #8
 80006d2:	d1f9      	bne.n	80006c8 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006d4:	2321      	movs	r3, #33	@ 0x21
 80006d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006e8:	2303      	movs	r3, #3
 80006ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80006f0:	23fa      	movs	r3, #250	@ 0xfa
 80006f2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000700:	2304      	movs	r3, #4
 8000702:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000704:	2300      	movs	r3, #0
 8000706:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f003 fa6d 	bl	8003bf0 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800071c:	f000 fa68 	bl	8000bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	231f      	movs	r3, #31
 8000722:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2303      	movs	r3, #3
 8000726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 0308 	add.w	r3, r7, #8
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f003 fe8e 	bl	8004460 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800074a:	f000 fa51 	bl	8000bf0 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800074e:	4b07      	ldr	r3, [pc, #28]	@ (800076c <SystemClock_Config+0xe4>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000756:	4a05      	ldr	r2, [pc, #20]	@ (800076c <SystemClock_Config+0xe4>)
 8000758:	f043 0320 	orr.w	r3, r3, #32
 800075c:	6013      	str	r3, [r2, #0]
}
 800075e:	bf00      	nop
 8000760:	3770      	adds	r7, #112	@ 0x70
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	44020800 	.word	0x44020800
 800076c:	40022000 	.word	0x40022000

08000770 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000776:	4a1c      	ldr	r2, [pc, #112]	@ (80007e8 <MX_I2C1_Init+0x78>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 800077a:	4b1a      	ldr	r3, [pc, #104]	@ (80007e4 <MX_I2C1_Init+0x74>)
 800077c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ec <MX_I2C1_Init+0x7c>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000788:	2201      	movs	r2, #1
 800078a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <MX_I2C1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007aa:	480e      	ldr	r0, [pc, #56]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007ac:	f001 fbea 	bl	8001f84 <HAL_I2C_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007b6:	f000 fa1b 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ba:	2100      	movs	r1, #0
 80007bc:	4809      	ldr	r0, [pc, #36]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007be:	f001 fc7c 	bl	80020ba <HAL_I2CEx_ConfigAnalogFilter>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007c8:	f000 fa12 	bl	8000bf0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007cc:	2100      	movs	r1, #0
 80007ce:	4805      	ldr	r0, [pc, #20]	@ (80007e4 <MX_I2C1_Init+0x74>)
 80007d0:	f001 fcbe 	bl	8002150 <HAL_I2CEx_ConfigDigitalFilter>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007da:	f000 fa09 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000019c 	.word	0x2000019c
 80007e8:	40005400 	.word	0x40005400
 80007ec:	10c043e5 	.word	0x10c043e5

080007f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f4:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_SPI1_Init+0xa4>)
 80007f6:	4a28      	ldr	r2, [pc, #160]	@ (8000898 <MX_SPI1_Init+0xa8>)
 80007f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fa:	4b26      	ldr	r3, [pc, #152]	@ (8000894 <MX_SPI1_Init+0xa4>)
 80007fc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000800:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_SPI1_Init+0xa4>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <MX_SPI1_Init+0xa4>)
 800080a:	2207      	movs	r2, #7
 800080c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_SPI1_Init+0xa4>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_SPI1_Init+0xa4>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_SPI1_Init+0xa4>)
 800081c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000820:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000822:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_SPI1_Init+0xa4>)
 8000824:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000828:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082a:	4b1a      	ldr	r3, [pc, #104]	@ (8000894 <MX_SPI1_Init+0xa4>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000830:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <MX_SPI1_Init+0xa4>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000836:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <MX_SPI1_Init+0xa4>)
 8000838:	2200      	movs	r2, #0
 800083a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800083c:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <MX_SPI1_Init+0xa4>)
 800083e:	2207      	movs	r2, #7
 8000840:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <MX_SPI1_Init+0xa4>)
 8000844:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000848:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800084a:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <MX_SPI1_Init+0xa4>)
 800084c:	2200      	movs	r2, #0
 800084e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000850:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <MX_SPI1_Init+0xa4>)
 8000852:	2200      	movs	r2, #0
 8000854:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000856:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <MX_SPI1_Init+0xa4>)
 8000858:	2200      	movs	r2, #0
 800085a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800085c:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <MX_SPI1_Init+0xa4>)
 800085e:	2200      	movs	r2, #0
 8000860:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_SPI1_Init+0xa4>)
 8000864:	2200      	movs	r2, #0
 8000866:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000868:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <MX_SPI1_Init+0xa4>)
 800086a:	2200      	movs	r2, #0
 800086c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_SPI1_Init+0xa4>)
 8000870:	2200      	movs	r2, #0
 8000872:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000874:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <MX_SPI1_Init+0xa4>)
 8000876:	2200      	movs	r2, #0
 8000878:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800087a:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <MX_SPI1_Init+0xa4>)
 800087c:	2200      	movs	r2, #0
 800087e:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_SPI1_Init+0xa4>)
 8000882:	f009 f987 	bl	8009b94 <HAL_SPI_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800088c:	f000 f9b0 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	200001f0 	.word	0x200001f0
 8000898:	40013000 	.word	0x40013000

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008a2:	4a23      	ldr	r2, [pc, #140]	@ (8000930 <MX_USART2_UART_Init+0x94>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008a6:	4b21      	ldr	r3, [pc, #132]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b1f      	ldr	r3, [pc, #124]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b19      	ldr	r3, [pc, #100]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d8:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008de:	4b13      	ldr	r3, [pc, #76]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e4:	4811      	ldr	r0, [pc, #68]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008e6:	f009 fae0 	bl	8009eaa <HAL_UART_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008f0:	f000 f97e 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	480d      	ldr	r0, [pc, #52]	@ (800092c <MX_USART2_UART_Init+0x90>)
 80008f8:	f009 ff6e 	bl	800a7d8 <HAL_UARTEx_SetTxFifoThreshold>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000902:	f000 f975 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000906:	2100      	movs	r1, #0
 8000908:	4808      	ldr	r0, [pc, #32]	@ (800092c <MX_USART2_UART_Init+0x90>)
 800090a:	f009 ffa3 	bl	800a854 <HAL_UARTEx_SetRxFifoThreshold>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000914:	f000 f96c 	bl	8000bf0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	@ (800092c <MX_USART2_UART_Init+0x90>)
 800091a:	f009 ff24 	bl	800a766 <HAL_UARTEx_DisableFifoMode>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000924:	f000 f964 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000280 	.word	0x20000280
 8000930:	40004400 	.word	0x40004400

08000934 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8000938:	4b29      	ldr	r3, [pc, #164]	@ (80009e0 <MX_USB_PCD_Init+0xac>)
 800093a:	4a2a      	ldr	r2, [pc, #168]	@ (80009e4 <MX_USB_PCD_Init+0xb0>)
 800093c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000940:	4b27      	ldr	r3, [pc, #156]	@ (80009e0 <MX_USB_PCD_Init+0xac>)
 8000942:	4a29      	ldr	r2, [pc, #164]	@ (80009e8 <MX_USB_PCD_Init+0xb4>)
 8000944:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000946:	4b26      	ldr	r3, [pc, #152]	@ (80009e0 <MX_USB_PCD_Init+0xac>)
 8000948:	2208      	movs	r2, #8
 800094a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 800094c:	4b24      	ldr	r3, [pc, #144]	@ (80009e0 <MX_USB_PCD_Init+0xac>)
 800094e:	2202      	movs	r2, #2
 8000950:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000952:	4b23      	ldr	r3, [pc, #140]	@ (80009e0 <MX_USB_PCD_Init+0xac>)
 8000954:	2202      	movs	r2, #2
 8000956:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000958:	4b21      	ldr	r3, [pc, #132]	@ (80009e0 <MX_USB_PCD_Init+0xac>)
 800095a:	2200      	movs	r2, #0
 800095c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 800095e:	4b20      	ldr	r3, [pc, #128]	@ (80009e0 <MX_USB_PCD_Init+0xac>)
 8000960:	2200      	movs	r2, #0
 8000962:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000964:	4b1e      	ldr	r3, [pc, #120]	@ (80009e0 <MX_USB_PCD_Init+0xac>)
 8000966:	2200      	movs	r2, #0
 8000968:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 800096a:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <MX_USB_PCD_Init+0xac>)
 800096c:	2200      	movs	r2, #0
 800096e:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000970:	4b1b      	ldr	r3, [pc, #108]	@ (80009e0 <MX_USB_PCD_Init+0xac>)
 8000972:	2200      	movs	r2, #0
 8000974:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000976:	4b1a      	ldr	r3, [pc, #104]	@ (80009e0 <MX_USB_PCD_Init+0xac>)
 8000978:	2200      	movs	r2, #0
 800097a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 800097c:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <MX_USB_PCD_Init+0xac>)
 800097e:	2200      	movs	r2, #0
 8000980:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000982:	4817      	ldr	r0, [pc, #92]	@ (80009e0 <MX_USB_PCD_Init+0xac>)
 8000984:	f001 fc93 	bl	80022ae <HAL_PCD_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 800098e:	f000 f92f 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8000992:	2200      	movs	r2, #0
 8000994:	4915      	ldr	r1, [pc, #84]	@ (80009ec <MX_USB_PCD_Init+0xb8>)
 8000996:	4813      	ldr	r0, [pc, #76]	@ (80009e4 <MX_USB_PCD_Init+0xb0>)
 8000998:	f00c ffae 	bl	800d8f8 <USBD_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 80009a2:	f000 f925 	bl	8000bf0 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80009a6:	4912      	ldr	r1, [pc, #72]	@ (80009f0 <MX_USB_PCD_Init+0xbc>)
 80009a8:	480e      	ldr	r0, [pc, #56]	@ (80009e4 <MX_USB_PCD_Init+0xb0>)
 80009aa:	f00c ffd5 	bl	800d958 <USBD_RegisterClass>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 80009b4:	f000 f91c 	bl	8000bf0 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 80009b8:	490e      	ldr	r1, [pc, #56]	@ (80009f4 <MX_USB_PCD_Init+0xc0>)
 80009ba:	480a      	ldr	r0, [pc, #40]	@ (80009e4 <MX_USB_PCD_Init+0xb0>)
 80009bc:	f00c fbaa 	bl	800d114 <USBD_CDC_RegisterInterface>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USB_PCD_Init+0x96>
        Error_Handler();
 80009c6:	f000 f913 	bl	8000bf0 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80009ca:	4806      	ldr	r0, [pc, #24]	@ (80009e4 <MX_USB_PCD_Init+0xb0>)
 80009cc:	f00c fffa 	bl	800d9c4 <USBD_Start>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 80009d6:	f000 f90b 	bl	8000bf0 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000314 	.word	0x20000314
 80009e4:	200005f8 	.word	0x200005f8
 80009e8:	40016000 	.word	0x40016000
 80009ec:	200000d0 	.word	0x200000d0
 80009f0:	20000034 	.word	0x20000034
 80009f4:	200000b4 	.word	0x200000b4

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08c      	sub	sp, #48	@ 0x30
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a0e:	4b72      	ldr	r3, [pc, #456]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a14:	4a70      	ldr	r2, [pc, #448]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a16:	f043 0310 	orr.w	r3, r3, #16
 8000a1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a1e:	4b6e      	ldr	r3, [pc, #440]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a24:	f003 0310 	and.w	r3, r3, #16
 8000a28:	61bb      	str	r3, [r7, #24]
 8000a2a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a32:	4a69      	ldr	r2, [pc, #420]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a34:	f043 0304 	orr.w	r3, r3, #4
 8000a38:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a3c:	4b66      	ldr	r3, [pc, #408]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a4a:	4b63      	ldr	r3, [pc, #396]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a50:	4a61      	ldr	r2, [pc, #388]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a64:	613b      	str	r3, [r7, #16]
 8000a66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b5b      	ldr	r3, [pc, #364]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a6e:	4a5a      	ldr	r2, [pc, #360]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a78:	4b57      	ldr	r3, [pc, #348]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a7e:	f003 0301 	and.w	r3, r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a86:	4b54      	ldr	r3, [pc, #336]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a8c:	4a52      	ldr	r2, [pc, #328]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a8e:	f043 0302 	orr.w	r3, r3, #2
 8000a92:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000a96:	4b50      	ldr	r3, [pc, #320]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aaa:	4a4b      	ldr	r2, [pc, #300]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000aac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ab0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ab4:	4b48      	ldr	r3, [pc, #288]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000ab6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac2:	4b45      	ldr	r3, [pc, #276]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac8:	4a43      	ldr	r2, [pc, #268]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000aca:	f043 0308 	orr.w	r3, r3, #8
 8000ace:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ad2:	4b41      	ldr	r3, [pc, #260]	@ (8000bd8 <MX_GPIO_Init+0x1e0>)
 8000ad4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ad8:	f003 0308 	and.w	r3, r3, #8
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000ae0:	2332      	movs	r3, #50	@ 0x32
 8000ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aec:	2302      	movs	r3, #2
 8000aee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af0:	230b      	movs	r3, #11
 8000af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 031c 	add.w	r3, r7, #28
 8000af8:	4619      	mov	r1, r3
 8000afa:	4838      	ldr	r0, [pc, #224]	@ (8000bdc <MX_GPIO_Init+0x1e4>)
 8000afc:	f001 f8d8 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b00:	2384      	movs	r3, #132	@ 0x84
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b10:	230b      	movs	r3, #11
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 031c 	add.w	r3, r7, #28
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4831      	ldr	r0, [pc, #196]	@ (8000be0 <MX_GPIO_Init+0x1e8>)
 8000b1c:	f001 f8c8 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000b20:	2310      	movs	r3, #16
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b24:	2303      	movs	r3, #3
 8000b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	f107 031c 	add.w	r3, r7, #28
 8000b30:	4619      	mov	r1, r3
 8000b32:	482b      	ldr	r0, [pc, #172]	@ (8000be0 <MX_GPIO_Init+0x1e8>)
 8000b34:	f001 f8bc 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000b38:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4825      	ldr	r0, [pc, #148]	@ (8000be4 <MX_GPIO_Init+0x1ec>)
 8000b4e:	f001 f8af 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b60:	2302      	movs	r3, #2
 8000b62:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b64:	230b      	movs	r3, #11
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	481d      	ldr	r0, [pc, #116]	@ (8000be4 <MX_GPIO_Init+0x1ec>)
 8000b70:	f001 f89e 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000b74:	2380      	movs	r3, #128	@ 0x80
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b78:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <MX_GPIO_Init+0x1f0>)
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	4819      	ldr	r0, [pc, #100]	@ (8000bec <MX_GPIO_Init+0x1f4>)
 8000b88:	f001 f892 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000b8c:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9e:	230b      	movs	r3, #11
 8000ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4810      	ldr	r0, [pc, #64]	@ (8000bec <MX_GPIO_Init+0x1f4>)
 8000baa:	f001 f881 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000bae:	23c0      	movs	r3, #192	@ 0xc0
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4806      	ldr	r0, [pc, #24]	@ (8000be4 <MX_GPIO_Init+0x1ec>)
 8000bca:	f001 f871 	bl	8001cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bce:	bf00      	nop
 8000bd0:	3730      	adds	r7, #48	@ 0x30
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	44020c00 	.word	0x44020c00
 8000bdc:	42020800 	.word	0x42020800
 8000be0:	42020000 	.word	0x42020000
 8000be4:	42020400 	.word	0x42020400
 8000be8:	10110000 	.word	0x10110000
 8000bec:	42021800 	.word	0x42021800

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <Error_Handler+0x8>

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b0cc      	sub	sp, #304	@ 0x130
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c16:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c1a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c30:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000c34:	4618      	mov	r0, r3
 8000c36:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	f00e f9cd 	bl	800efdc <memset>
  if(hi2c->Instance==I2C1)
 8000c42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a33      	ldr	r2, [pc, #204]	@ (8000d1c <HAL_I2C_MspInit+0x110>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d15e      	bne.n	8000d12 <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c58:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000c5c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000c6c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000c70:	2200      	movs	r2, #0
 8000c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 ff32 	bl	8004ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000c86:	f7ff ffb3 	bl	8000bf0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <HAL_I2C_MspInit+0x114>)
 8000c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000c90:	4a23      	ldr	r2, [pc, #140]	@ (8000d20 <HAL_I2C_MspInit+0x114>)
 8000c92:	f043 0302 	orr.w	r3, r3, #2
 8000c96:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000c9a:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <HAL_I2C_MspInit+0x114>)
 8000c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ca0:	f003 0202 	and.w	r2, r3, #2
 8000ca4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ca8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cb2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000cb6:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000cb8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cbc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc0:	2312      	movs	r3, #18
 8000cc2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd8:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4811      	ldr	r0, [pc, #68]	@ (8000d24 <HAL_I2C_MspInit+0x118>)
 8000ce0:	f000 ffe6 	bl	8001cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <HAL_I2C_MspInit+0x114>)
 8000ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cea:	4a0d      	ldr	r2, [pc, #52]	@ (8000d20 <HAL_I2C_MspInit+0x114>)
 8000cec:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000cf0:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	@ (8000d20 <HAL_I2C_MspInit+0x114>)
 8000cf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000cfa:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000cfe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d02:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d0c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000d10:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d12:	bf00      	nop
 8000d14:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40005400 	.word	0x40005400
 8000d20:	44020c00 	.word	0x44020c00
 8000d24:	42020400 	.word	0x42020400

08000d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0ce      	sub	sp, #312	@ 0x138
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d32:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d36:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d4c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d50:	4618      	mov	r0, r3
 8000d52:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000d56:	461a      	mov	r2, r3
 8000d58:	2100      	movs	r1, #0
 8000d5a:	f00e f93f 	bl	800efdc <memset>
  if(hspi->Instance==SPI1)
 8000d5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d62:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a49      	ldr	r2, [pc, #292]	@ (8000e90 <HAL_SPI_MspInit+0x168>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	f040 808a 	bne.w	8000e86 <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000d72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d76:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000d7a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d7e:	f04f 0300 	mov.w	r3, #0
 8000d82:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000d86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000d8a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d94:	f107 0318 	add.w	r3, r7, #24
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f003 fea3 	bl	8004ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8000da4:	f7ff ff24 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000da8:	4b3a      	ldr	r3, [pc, #232]	@ (8000e94 <HAL_SPI_MspInit+0x16c>)
 8000daa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000dae:	4a39      	ldr	r2, [pc, #228]	@ (8000e94 <HAL_SPI_MspInit+0x16c>)
 8000db0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000db4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000db8:	4b36      	ldr	r3, [pc, #216]	@ (8000e94 <HAL_SPI_MspInit+0x16c>)
 8000dba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000dbe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8000dc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dc6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dd0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000dd4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <HAL_SPI_MspInit+0x16c>)
 8000dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8000e94 <HAL_SPI_MspInit+0x16c>)
 8000dde:	f043 0301 	orr.w	r3, r3, #1
 8000de2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000de6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e94 <HAL_SPI_MspInit+0x16c>)
 8000de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dec:	f003 0201 	and.w	r2, r3, #1
 8000df0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000df4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dfe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000e02:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e04:	4b23      	ldr	r3, [pc, #140]	@ (8000e94 <HAL_SPI_MspInit+0x16c>)
 8000e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e0a:	4a22      	ldr	r2, [pc, #136]	@ (8000e94 <HAL_SPI_MspInit+0x16c>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e14:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <HAL_SPI_MspInit+0x16c>)
 8000e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e1a:	f003 0208 	and.w	r2, r3, #8
 8000e1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000e30:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e32:	2360      	movs	r3, #96	@ 0x60
 8000e34:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000e54:	4619      	mov	r1, r3
 8000e56:	4810      	ldr	r0, [pc, #64]	@ (8000e98 <HAL_SPI_MspInit+0x170>)
 8000e58:	f000 ff2a 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e5c:	2380      	movs	r3, #128	@ 0x80
 8000e5e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e62:	2302      	movs	r3, #2
 8000e64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e74:	2305      	movs	r3, #5
 8000e76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7a:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4806      	ldr	r0, [pc, #24]	@ (8000e9c <HAL_SPI_MspInit+0x174>)
 8000e82:	f000 ff15 	bl	8001cb0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000e86:	bf00      	nop
 8000e88:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40013000 	.word	0x40013000
 8000e94:	44020c00 	.word	0x44020c00
 8000e98:	42020000 	.word	0x42020000
 8000e9c:	42020c00 	.word	0x42020c00

08000ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b0ce      	sub	sp, #312	@ 0x138
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000eaa:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000eae:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ec4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	f00e f883 	bl	800efdc <memset>
  if(huart->Instance==USART2)
 8000ed6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000eda:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a49      	ldr	r2, [pc, #292]	@ (8001008 <HAL_UART_MspInit+0x168>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	f040 8089 	bne.w	8000ffc <HAL_UART_MspInit+0x15c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000eea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000eee:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000ef2:	f04f 0202 	mov.w	r2, #2
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000efe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f02:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000f06:	2200      	movs	r2, #0
 8000f08:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fde8 	bl	8004ae4 <HAL_RCCEx_PeriphCLKConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000f1a:	f7ff fe69 	bl	8000bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800100c <HAL_UART_MspInit+0x16c>)
 8000f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f24:	4a39      	ldr	r2, [pc, #228]	@ (800100c <HAL_UART_MspInit+0x16c>)
 8000f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f2a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000f2e:	4b37      	ldr	r3, [pc, #220]	@ (800100c <HAL_UART_MspInit+0x16c>)
 8000f30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f34:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8000f38:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f3c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f46:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000f4a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800100c <HAL_UART_MspInit+0x16c>)
 8000f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f52:	4a2e      	ldr	r2, [pc, #184]	@ (800100c <HAL_UART_MspInit+0x16c>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800100c <HAL_UART_MspInit+0x16c>)
 8000f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f62:	f003 0201 	and.w	r2, r3, #1
 8000f66:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f6a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f74:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000f78:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	4b24      	ldr	r3, [pc, #144]	@ (800100c <HAL_UART_MspInit+0x16c>)
 8000f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f80:	4a22      	ldr	r2, [pc, #136]	@ (800100c <HAL_UART_MspInit+0x16c>)
 8000f82:	f043 0308 	orr.w	r3, r3, #8
 8000f86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f8a:	4b20      	ldr	r3, [pc, #128]	@ (800100c <HAL_UART_MspInit+0x16c>)
 8000f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f90:	f003 0208 	and.w	r2, r3, #8
 8000f94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000f98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000fa2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fa6:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4810      	ldr	r0, [pc, #64]	@ (8001010 <HAL_UART_MspInit+0x170>)
 8000fce:	f000 fe6f 	bl	8001cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fd2:	2320      	movs	r3, #32
 8000fd4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fea:	2307      	movs	r3, #7
 8000fec:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff0:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4807      	ldr	r0, [pc, #28]	@ (8001014 <HAL_UART_MspInit+0x174>)
 8000ff8:	f000 fe5a 	bl	8001cb0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ffc:	bf00      	nop
 8000ffe:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40004400 	.word	0x40004400
 800100c:	44020c00 	.word	0x44020c00
 8001010:	42020000 	.word	0x42020000
 8001014:	42020c00 	.word	0x42020c00

08001018 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0c6      	sub	sp, #280	@ 0x118
 800101c:	af00      	add	r7, sp, #0
 800101e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001022:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001026:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001028:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800102c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001030:	4618      	mov	r0, r3
 8001032:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001036:	461a      	mov	r2, r3
 8001038:	2100      	movs	r1, #0
 800103a:	f00d ffcf 	bl	800efdc <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800103e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001042:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a22      	ldr	r2, [pc, #136]	@ (80010d4 <HAL_PCD_MspInit+0xbc>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d13b      	bne.n	80010c8 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001050:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001054:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0310 	mov.w	r3, #16
 8001060:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001064:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001068:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800106c:	2230      	movs	r2, #48	@ 0x30
 800106e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001072:	f107 0310 	add.w	r3, r7, #16
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fd34 	bl	8004ae4 <HAL_RCCEx_PeriphCLKConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 8001082:	f7ff fdb5 	bl	8000bf0 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8001086:	f002 fda3 	bl	8003bd0 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800108a:	4b13      	ldr	r3, [pc, #76]	@ (80010d8 <HAL_PCD_MspInit+0xc0>)
 800108c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001090:	4a11      	ldr	r2, [pc, #68]	@ (80010d8 <HAL_PCD_MspInit+0xc0>)
 8001092:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001096:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800109a:	4b0f      	ldr	r3, [pc, #60]	@ (80010d8 <HAL_PCD_MspInit+0xc0>)
 800109c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80010a0:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 80010a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010a8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80010b6:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80010b8:	2200      	movs	r2, #0
 80010ba:	2100      	movs	r1, #0
 80010bc:	204a      	movs	r0, #74	@ 0x4a
 80010be:	f000 fc97 	bl	80019f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80010c2:	204a      	movs	r0, #74	@ 0x4a
 80010c4:	f000 fcae 	bl	8001a24 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80010c8:	bf00      	nop
 80010ca:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40016000 	.word	0x40016000
 80010d8:	44020c00 	.word	0x44020c00

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <NMI_Handler+0x4>

080010e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <MemManage_Handler+0x4>

080010f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <UsageFault_Handler+0x4>

08001104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001132:	f000 fb61 	bl	80017f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}

0800113a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800113e:	2000      	movs	r0, #0
 8001140:	f000 f9d6 	bl	80014f0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 800114c:	4802      	ldr	r0, [pc, #8]	@ (8001158 <USB_DRD_FS_IRQHandler+0x10>)
 800114e:	f001 f9d1 	bl	80024f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000314 	.word	0x20000314

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	@ (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d207      	bcs.n	800119c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800118c:	f00d ff2e 	bl	800efec <__errno>
 8001190:	4603      	mov	r3, r0
 8001192:	220c      	movs	r2, #12
 8001194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001196:	f04f 33ff 	mov.w	r3, #4294967295
 800119a:	e009      	b.n	80011b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <_sbrk+0x64>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a2:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <_sbrk+0x64>)
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	4a05      	ldr	r2, [pc, #20]	@ (80011c0 <_sbrk+0x64>)
 80011ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ae:	68fb      	ldr	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200a0000 	.word	0x200a0000
 80011bc:	00000500 	.word	0x00000500
 80011c0:	200008d4 	.word	0x200008d4
 80011c4:	200011e8 	.word	0x200011e8

080011c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011ce:	4b35      	ldr	r3, [pc, #212]	@ (80012a4 <SystemInit+0xdc>)
 80011d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d4:	4a33      	ldr	r2, [pc, #204]	@ (80012a4 <SystemInit+0xdc>)
 80011d6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011da:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80011de:	4b32      	ldr	r3, [pc, #200]	@ (80012a8 <SystemInit+0xe0>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80011e4:	4b30      	ldr	r3, [pc, #192]	@ (80012a8 <SystemInit+0xe0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80011ea:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <SystemInit+0xe0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80011f0:	4b2d      	ldr	r3, [pc, #180]	@ (80012a8 <SystemInit+0xe0>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	492c      	ldr	r1, [pc, #176]	@ (80012a8 <SystemInit+0xe0>)
 80011f6:	4b2d      	ldr	r3, [pc, #180]	@ (80012ac <SystemInit+0xe4>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80011fc:	4b2a      	ldr	r3, [pc, #168]	@ (80012a8 <SystemInit+0xe0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001202:	4b29      	ldr	r3, [pc, #164]	@ (80012a8 <SystemInit+0xe0>)
 8001204:	2200      	movs	r2, #0
 8001206:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <SystemInit+0xe0>)
 800120a:	2200      	movs	r2, #0
 800120c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800120e:	4b26      	ldr	r3, [pc, #152]	@ (80012a8 <SystemInit+0xe0>)
 8001210:	4a27      	ldr	r2, [pc, #156]	@ (80012b0 <SystemInit+0xe8>)
 8001212:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001214:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <SystemInit+0xe0>)
 8001216:	2200      	movs	r2, #0
 8001218:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800121a:	4b23      	ldr	r3, [pc, #140]	@ (80012a8 <SystemInit+0xe0>)
 800121c:	4a24      	ldr	r2, [pc, #144]	@ (80012b0 <SystemInit+0xe8>)
 800121e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001220:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <SystemInit+0xe0>)
 8001222:	2200      	movs	r2, #0
 8001224:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <SystemInit+0xe0>)
 8001228:	4a21      	ldr	r2, [pc, #132]	@ (80012b0 <SystemInit+0xe8>)
 800122a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800122c:	4b1e      	ldr	r3, [pc, #120]	@ (80012a8 <SystemInit+0xe0>)
 800122e:	2200      	movs	r2, #0
 8001230:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001232:	4b1d      	ldr	r3, [pc, #116]	@ (80012a8 <SystemInit+0xe0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a1c      	ldr	r2, [pc, #112]	@ (80012a8 <SystemInit+0xe0>)
 8001238:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800123c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800123e:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <SystemInit+0xe0>)
 8001240:	2200      	movs	r2, #0
 8001242:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001244:	4b17      	ldr	r3, [pc, #92]	@ (80012a4 <SystemInit+0xdc>)
 8001246:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800124a:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800124c:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <SystemInit+0xec>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8001254:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800125c:	d003      	beq.n	8001266 <SystemInit+0x9e>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001264:	d117      	bne.n	8001296 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8001266:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <SystemInit+0xec>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <SystemInit+0xec>)
 8001274:	4a10      	ldr	r2, [pc, #64]	@ (80012b8 <SystemInit+0xf0>)
 8001276:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8001278:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <SystemInit+0xec>)
 800127a:	4a10      	ldr	r2, [pc, #64]	@ (80012bc <SystemInit+0xf4>)
 800127c:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800127e:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <SystemInit+0xec>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	4a0c      	ldr	r2, [pc, #48]	@ (80012b4 <SystemInit+0xec>)
 8001284:	f043 0302 	orr.w	r3, r3, #2
 8001288:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800128a:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <SystemInit+0xec>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4a09      	ldr	r2, [pc, #36]	@ (80012b4 <SystemInit+0xec>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	61d3      	str	r3, [r2, #28]
  }
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00
 80012a8:	44020c00 	.word	0x44020c00
 80012ac:	eae2eae3 	.word	0xeae2eae3
 80012b0:	01010280 	.word	0x01010280
 80012b4:	40022000 	.word	0x40022000
 80012b8:	08192a3b 	.word	0x08192a3b
 80012bc:	4c5d6e7f 	.word	0x4c5d6e7f

080012c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012c0:	480d      	ldr	r0, [pc, #52]	@ (80012f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012c4:	f7ff ff80 	bl	80011c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c8:	480c      	ldr	r0, [pc, #48]	@ (80012fc <LoopForever+0x6>)
  ldr r1, =_edata
 80012ca:	490d      	ldr	r1, [pc, #52]	@ (8001300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001304 <LoopForever+0xe>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0a      	ldr	r2, [pc, #40]	@ (8001308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e0:	4c0a      	ldr	r4, [pc, #40]	@ (800130c <LoopForever+0x16>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012ee:	f00d fe83 	bl	800eff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f2:	f7ff f95f 	bl	80005b4 <main>

080012f6 <LoopForever>:

LoopForever:
    b LoopForever
 80012f6:	e7fe      	b.n	80012f6 <LoopForever>
  ldr   r0, =_estack
 80012f8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001304:	0800fa00 	.word	0x0800fa00
  ldr r2, =_sbss
 8001308:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 800130c:	200011e8 	.word	0x200011e8

08001310 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC1_IRQHandler>
	...

08001314 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	@ 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d009      	beq.n	800133c <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d006      	beq.n	800133c <BSP_LED_Init+0x28>
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d003      	beq.n	800133c <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001334:	f06f 0301 	mvn.w	r3, #1
 8001338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800133a:	e055      	b.n	80013e8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d10f      	bne.n	8001362 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8001342:	4b2c      	ldr	r3, [pc, #176]	@ (80013f4 <BSP_LED_Init+0xe0>)
 8001344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001348:	4a2a      	ldr	r2, [pc, #168]	@ (80013f4 <BSP_LED_Init+0xe0>)
 800134a:	f043 0320 	orr.w	r3, r3, #32
 800134e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001352:	4b28      	ldr	r3, [pc, #160]	@ (80013f4 <BSP_LED_Init+0xe0>)
 8001354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001358:	f003 0320 	and.w	r3, r3, #32
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	e021      	b.n	80013a6 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10f      	bne.n	8001388 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8001368:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <BSP_LED_Init+0xe0>)
 800136a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800136e:	4a21      	ldr	r2, [pc, #132]	@ (80013f4 <BSP_LED_Init+0xe0>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001378:	4b1e      	ldr	r3, [pc, #120]	@ (80013f4 <BSP_LED_Init+0xe0>)
 800137a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	e00e      	b.n	80013a6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001388:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <BSP_LED_Init+0xe0>)
 800138a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800138e:	4a19      	ldr	r2, [pc, #100]	@ (80013f4 <BSP_LED_Init+0xe0>)
 8001390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001394:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001398:	4b16      	ldr	r3, [pc, #88]	@ (80013f4 <BSP_LED_Init+0xe0>)
 800139a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800139e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4a13      	ldr	r2, [pc, #76]	@ (80013f8 <BSP_LED_Init+0xe4>)
 80013aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ae:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <BSP_LED_Init+0xe8>)
 80013c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c4:	f107 0218 	add.w	r2, r7, #24
 80013c8:	4611      	mov	r1, r2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fc70 	bl	8001cb0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4a0a      	ldr	r2, [pc, #40]	@ (80013fc <BSP_LED_Init+0xe8>)
 80013d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	4a07      	ldr	r2, [pc, #28]	@ (80013f8 <BSP_LED_Init+0xe4>)
 80013dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	f000 fdb6 	bl	8001f54 <HAL_GPIO_WritePin>
  }

  return ret;
 80013e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3730      	adds	r7, #48	@ 0x30
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	44020c00 	.word	0x44020c00
 80013f8:	0800f988 	.word	0x0800f988
 80013fc:	20000008 	.word	0x20000008

08001400 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b088      	sub	sp, #32
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	460a      	mov	r2, r1
 800140a:	71fb      	strb	r3, [r7, #7]
 800140c:	4613      	mov	r3, r2
 800140e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001410:	4b30      	ldr	r3, [pc, #192]	@ (80014d4 <BSP_PB_Init+0xd4>)
 8001412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001416:	4a2f      	ldr	r2, [pc, #188]	@ (80014d4 <BSP_PB_Init+0xd4>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001420:	4b2c      	ldr	r3, [pc, #176]	@ (80014d4 <BSP_PB_Init+0xd4>)
 8001422:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800142e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001432:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001434:	2302      	movs	r3, #2
 8001436:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001438:	2302      	movs	r3, #2
 800143a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800143c:	79bb      	ldrb	r3, [r7, #6]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10c      	bne.n	800145c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4a23      	ldr	r2, [pc, #140]	@ (80014d8 <BSP_PB_Init+0xd8>)
 800144a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800144e:	f107 020c 	add.w	r2, r7, #12
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fc2b 	bl	8001cb0 <HAL_GPIO_Init>
 800145a:	e036      	b.n	80014ca <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800145c:	4b1f      	ldr	r3, [pc, #124]	@ (80014dc <BSP_PB_Init+0xdc>)
 800145e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4a1d      	ldr	r2, [pc, #116]	@ (80014d8 <BSP_PB_Init+0xd8>)
 8001464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001468:	f107 020c 	add.w	r2, r7, #12
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f000 fc1e 	bl	8001cb0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001474:	79fa      	ldrb	r2, [r7, #7]
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4a18      	ldr	r2, [pc, #96]	@ (80014e0 <BSP_PB_Init+0xe0>)
 8001480:	441a      	add	r2, r3
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4917      	ldr	r1, [pc, #92]	@ (80014e4 <BSP_PB_Init+0xe4>)
 8001486:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800148a:	4619      	mov	r1, r3
 800148c:	4610      	mov	r0, r2
 800148e:	f000 fbb3 	bl	8001bf8 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001492:	79fa      	ldrb	r2, [r7, #7]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4a10      	ldr	r2, [pc, #64]	@ (80014e0 <BSP_PB_Init+0xe0>)
 800149e:	1898      	adds	r0, r3, r2
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4a11      	ldr	r2, [pc, #68]	@ (80014e8 <BSP_PB_Init+0xe8>)
 80014a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a8:	461a      	mov	r2, r3
 80014aa:	2100      	movs	r1, #0
 80014ac:	f000 fb78 	bl	8001ba0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80014b0:	2018      	movs	r0, #24
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4a0d      	ldr	r2, [pc, #52]	@ (80014ec <BSP_PB_Init+0xec>)
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	2200      	movs	r2, #0
 80014bc:	4619      	mov	r1, r3
 80014be:	f000 fa97 	bl	80019f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80014c2:	2318      	movs	r3, #24
 80014c4:	4618      	mov	r0, r3
 80014c6:	f000 faad 	bl	8001a24 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	44020c00 	.word	0x44020c00
 80014d8:	20000014 	.word	0x20000014
 80014dc:	10110000 	.word	0x10110000
 80014e0:	200008d8 	.word	0x200008d8
 80014e4:	0800f990 	.word	0x0800f990
 80014e8:	20000018 	.word	0x20000018
 80014ec:	2000001c 	.word	0x2000001c

080014f0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80014fa:	79fa      	ldrb	r2, [r7, #7]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <BSP_PB_IRQHandler+0x28>)
 8001506:	4413      	add	r3, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f000 fb89 	bl	8001c20 <HAL_EXTI_IRQHandler>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200008d8 	.word	0x200008d8

0800151c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800154a:	f06f 0301 	mvn.w	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e018      	b.n	8001584 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	2294      	movs	r2, #148	@ 0x94
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <BSP_COM_Init+0x5c>)
 800155c:	4413      	add	r3, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f000 f854 	bl	800160c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	2294      	movs	r2, #148	@ 0x94
 8001568:	fb02 f303 	mul.w	r3, r2, r3
 800156c:	4a08      	ldr	r2, [pc, #32]	@ (8001590 <BSP_COM_Init+0x5c>)
 800156e:	4413      	add	r3, r2
 8001570:	6839      	ldr	r1, [r7, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f000 f80e 	bl	8001594 <MX_USART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d002      	beq.n	8001584 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800157e:	f06f 0303 	mvn.w	r3, #3
 8001582:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001584:	68fb      	ldr	r3, [r7, #12]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	200008e4 	.word	0x200008e4

08001594 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800159e:	4b16      	ldr	r3, [pc, #88]	@ (80015f8 <MX_USART_Init+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	220c      	movs	r2, #12
 80015b2:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	895b      	ldrh	r3, [r3, #10]
 80015b8:	461a      	mov	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	891b      	ldrh	r3, [r3, #8]
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	899b      	ldrh	r3, [r3, #12]
 80015d4:	461a      	mov	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015e0:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f008 fc5e 	bl	8009eaa <HAL_UART_Init>
 80015ee:	4603      	mov	r3, r0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20000004 	.word	0x20000004

080015fc <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001600:	2000      	movs	r0, #0
 8001602:	f7ff ff8b 	bl	800151c <BSP_PB_Callback>
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001614:	4b27      	ldr	r3, [pc, #156]	@ (80016b4 <COM1_MspInit+0xa8>)
 8001616:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800161a:	4a26      	ldr	r2, [pc, #152]	@ (80016b4 <COM1_MspInit+0xa8>)
 800161c:	f043 0308 	orr.w	r3, r3, #8
 8001620:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001624:	4b23      	ldr	r3, [pc, #140]	@ (80016b4 <COM1_MspInit+0xa8>)
 8001626:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001632:	4b20      	ldr	r3, [pc, #128]	@ (80016b4 <COM1_MspInit+0xa8>)
 8001634:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001638:	4a1e      	ldr	r2, [pc, #120]	@ (80016b4 <COM1_MspInit+0xa8>)
 800163a:	f043 0308 	orr.w	r3, r3, #8
 800163e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001642:	4b1c      	ldr	r3, [pc, #112]	@ (80016b4 <COM1_MspInit+0xa8>)
 8001644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <COM1_MspInit+0xa8>)
 8001652:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001656:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <COM1_MspInit+0xa8>)
 8001658:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800165c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001660:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <COM1_MspInit+0xa8>)
 8001662:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001666:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800166e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001672:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001678:	2302      	movs	r3, #2
 800167a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800167c:	2301      	movs	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001680:	2307      	movs	r3, #7
 8001682:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	480b      	ldr	r0, [pc, #44]	@ (80016b8 <COM1_MspInit+0xac>)
 800168c:	f000 fb10 	bl	8001cb0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001690:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001694:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800169a:	2307      	movs	r3, #7
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	4804      	ldr	r0, [pc, #16]	@ (80016b8 <COM1_MspInit+0xac>)
 80016a6:	f000 fb03 	bl	8001cb0 <HAL_GPIO_Init>
}
 80016aa:	bf00      	nop
 80016ac:	3728      	adds	r7, #40	@ 0x28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	44020c00 	.word	0x44020c00
 80016b8:	42020c00 	.word	0x42020c00

080016bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c0:	2003      	movs	r0, #3
 80016c2:	f000 f98a 	bl	80019da <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80016c6:	f003 f883 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 80016ca:	4602      	mov	r2, r0
 80016cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <HAL_Init+0x44>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f003 030f 	and.w	r3, r3, #15
 80016d4:	490b      	ldr	r1, [pc, #44]	@ (8001704 <HAL_Init+0x48>)
 80016d6:	5ccb      	ldrb	r3, [r1, r3]
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
 80016dc:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <HAL_Init+0x4c>)
 80016de:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80016e0:	2004      	movs	r0, #4
 80016e2:	f000 f9cf 	bl	8001a84 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e6:	200f      	movs	r0, #15
 80016e8:	f000 f810 	bl	800170c <HAL_InitTick>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e002      	b.n	80016fc <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016f6:	f7ff fa81 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	44020c00 	.word	0x44020c00
 8001704:	0800f970 	.word	0x0800f970
 8001708:	20000000 	.word	0x20000000

0800170c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001714:	2300      	movs	r3, #0
 8001716:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001718:	4b33      	ldr	r3, [pc, #204]	@ (80017e8 <HAL_InitTick+0xdc>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e05c      	b.n	80017de <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001724:	4b31      	ldr	r3, [pc, #196]	@ (80017ec <HAL_InitTick+0xe0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b04      	cmp	r3, #4
 800172e:	d10c      	bne.n	800174a <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001730:	4b2f      	ldr	r3, [pc, #188]	@ (80017f0 <HAL_InitTick+0xe4>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b2c      	ldr	r3, [pc, #176]	@ (80017e8 <HAL_InitTick+0xdc>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e037      	b.n	80017ba <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800174a:	f000 f9f3 	bl	8001b34 <HAL_SYSTICK_GetCLKSourceConfig>
 800174e:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d023      	beq.n	800179e <HAL_InitTick+0x92>
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d82d      	bhi.n	80017b8 <HAL_InitTick+0xac>
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_InitTick+0x5e>
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d00d      	beq.n	8001784 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001768:	e026      	b.n	80017b8 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800176a:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <HAL_InitTick+0xe4>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b1e      	ldr	r3, [pc, #120]	@ (80017e8 <HAL_InitTick+0xdc>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001778:	fbb3 f3f1 	udiv	r3, r3, r1
 800177c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001780:	60fb      	str	r3, [r7, #12]
        break;
 8001782:	e01a      	b.n	80017ba <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001784:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <HAL_InitTick+0xdc>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800178e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001792:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	60fb      	str	r3, [r7, #12]
        break;
 800179c:	e00d      	b.n	80017ba <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800179e:	4b12      	ldr	r3, [pc, #72]	@ (80017e8 <HAL_InitTick+0xdc>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80017ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b4:	60fb      	str	r3, [r7, #12]
        break;
 80017b6:	e000      	b.n	80017ba <HAL_InitTick+0xae>
        break;
 80017b8:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f940 	bl	8001a40 <HAL_SYSTICK_Config>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e009      	b.n	80017de <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ca:	2200      	movs	r2, #0
 80017cc:	6879      	ldr	r1, [r7, #4]
 80017ce:	f04f 30ff 	mov.w	r0, #4294967295
 80017d2:	f000 f90d 	bl	80019f0 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80017d6:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <HAL_InitTick+0xe8>)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000024 	.word	0x20000024
 80017ec:	e000e010 	.word	0xe000e010
 80017f0:	20000000 	.word	0x20000000
 80017f4:	20000020 	.word	0x20000020

080017f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017fc:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_IncTick+0x20>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <HAL_IncTick+0x24>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4413      	add	r3, r2
 8001808:	4a04      	ldr	r2, [pc, #16]	@ (800181c <HAL_IncTick+0x24>)
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000024 	.word	0x20000024
 800181c:	20000978 	.word	0x20000978

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	@ (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000978 	.word	0x20000978

08001838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff ffee 	bl	8001820 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001850:	d005      	beq.n	800185e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001852:	4b0a      	ldr	r3, [pc, #40]	@ (800187c <HAL_Delay+0x44>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	461a      	mov	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4413      	add	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800185e:	bf00      	nop
 8001860:	f7ff ffde 	bl	8001820 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f7      	bhi.n	8001860 <HAL_Delay+0x28>
  {
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000024 	.word	0x20000024

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	@ (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	@ (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	@ (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	@ (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	@ (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	@ 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	@ 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f7ff ff4c 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019fe:	f7ff ff63 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a02:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	68b9      	ldr	r1, [r7, #8]
 8001a08:	6978      	ldr	r0, [r7, #20]
 8001a0a:	f7ff ffb3 	bl	8001974 <NVIC_EncodePriority>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a14:	4611      	mov	r1, r2
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff ff82 	bl	8001920 <__NVIC_SetPriority>
}
 8001a1c:	bf00      	nop
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff56 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a50:	d301      	bcc.n	8001a56 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00d      	b.n	8001a72 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001a56:	4a0a      	ldr	r2, [pc, #40]	@ (8001a80 <HAL_SYSTICK_Config+0x40>)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <HAL_SYSTICK_Config+0x40>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <HAL_SYSTICK_Config+0x40>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a05      	ldr	r2, [pc, #20]	@ (8001a80 <HAL_SYSTICK_Config+0x40>)
 8001a6a:	f043 0303 	orr.w	r3, r3, #3
 8001a6e:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e010 	.word	0xe000e010

08001a84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d844      	bhi.n	8001b1c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001a92:	a201      	add	r2, pc, #4	@ (adr r2, 8001a98 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001abb 	.word	0x08001abb
 8001a9c:	08001ad9 	.word	0x08001ad9
 8001aa0:	08001afb 	.word	0x08001afb
 8001aa4:	08001b1d 	.word	0x08001b1d
 8001aa8:	08001aad 	.word	0x08001aad
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ab2:	f043 0304 	orr.w	r3, r3, #4
 8001ab6:	6013      	str	r3, [r2, #0]
      break;
 8001ab8:	e031      	b.n	8001b1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001aba:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a1b      	ldr	r2, [pc, #108]	@ (8001b2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ac0:	f023 0304 	bic.w	r3, r3, #4
 8001ac4:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ac8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001acc:	4a18      	ldr	r2, [pc, #96]	@ (8001b30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ace:	f023 030c 	bic.w	r3, r3, #12
 8001ad2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001ad6:	e022      	b.n	8001b1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001ad8:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a13      	ldr	r2, [pc, #76]	@ (8001b2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001ade:	f023 0304 	bic.w	r3, r3, #4
 8001ae2:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001ae4:	4b12      	ldr	r3, [pc, #72]	@ (8001b30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001ae6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001aea:	f023 030c 	bic.w	r3, r3, #12
 8001aee:	4a10      	ldr	r2, [pc, #64]	@ (8001b30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001af8:	e011      	b.n	8001b1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001afa:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a0b      	ldr	r2, [pc, #44]	@ (8001b2c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001b00:	f023 0304 	bic.w	r3, r3, #4
 8001b04:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001b06:	4b0a      	ldr	r3, [pc, #40]	@ (8001b30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001b0c:	f023 030c 	bic.w	r3, r3, #12
 8001b10:	4a07      	ldr	r2, [pc, #28]	@ (8001b30 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001b12:	f043 0308 	orr.w	r3, r3, #8
 8001b16:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001b1a:	e000      	b.n	8001b1e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001b1c:	bf00      	nop
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e010 	.word	0xe000e010
 8001b30:	44020c00 	.word	0x44020c00

08001b34 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001b3a:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001b46:	2304      	movs	r3, #4
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	e01e      	b.n	8001b8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001b4c:	4b13      	ldr	r3, [pc, #76]	@ (8001b9c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001b4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001b52:	f003 030c 	and.w	r3, r3, #12
 8001b56:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b08      	cmp	r3, #8
 8001b5c:	d00f      	beq.n	8001b7e <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	2b08      	cmp	r3, #8
 8001b62:	d80f      	bhi.n	8001b84 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b04      	cmp	r3, #4
 8001b6e:	d003      	beq.n	8001b78 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001b70:	e008      	b.n	8001b84 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001b72:	2300      	movs	r3, #0
 8001b74:	607b      	str	r3, [r7, #4]
        break;
 8001b76:	e008      	b.n	8001b8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
        break;
 8001b7c:	e005      	b.n	8001b8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	607b      	str	r3, [r7, #4]
        break;
 8001b82:	e002      	b.n	8001b8a <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001b84:	2300      	movs	r3, #0
 8001b86:	607b      	str	r3, [r7, #4]
        break;
 8001b88:	bf00      	nop
    }
  }
  return systick_source;
 8001b8a:	687b      	ldr	r3, [r7, #4]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000e010 	.word	0xe000e010
 8001b9c:	44020c00 	.word	0x44020c00

08001ba0 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001bb2:	7afb      	ldrb	r3, [r7, #11]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d011      	beq.n	8001bdc <HAL_EXTI_RegisterCallback+0x3c>
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	dc13      	bgt.n	8001be4 <HAL_EXTI_RegisterCallback+0x44>
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d002      	beq.n	8001bc6 <HAL_EXTI_RegisterCallback+0x26>
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d007      	beq.n	8001bd4 <HAL_EXTI_RegisterCallback+0x34>
 8001bc4:	e00e      	b.n	8001be4 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
      break;
 8001bd2:	e00a      	b.n	8001bea <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	605a      	str	r2, [r3, #4]
      break;
 8001bda:	e006      	b.n	8001bea <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	609a      	str	r2, [r3, #8]
      break;
 8001be2:	e002      	b.n	8001bea <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	75fb      	strb	r3, [r7, #23]
      break;
 8001be8:	bf00      	nop
  }

  return status;
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	371c      	adds	r7, #28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e003      	b.n	8001c14 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001c12:	2300      	movs	r3, #0
  }
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <HAL_EXTI_IRQHandler+0x88>)
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	4013      	ands	r3, r2
 8001c56:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	015a      	lsls	r2, r3, #5
 8001c76:	4b0d      	ldr	r3, [pc, #52]	@ (8001cac <HAL_EXTI_IRQHandler+0x8c>)
 8001c78:	4413      	add	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d009      	beq.n	8001ca0 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4798      	blx	r3
    }
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	4402200c 	.word	0x4402200c
 8001cac:	44022010 	.word	0x44022010

08001cb0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b087      	sub	sp, #28
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001cbe:	e136      	b.n	8001f2e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 8128 	beq.w	8001f28 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x38>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	2b12      	cmp	r3, #18
 8001ce6:	d125      	bne.n	8001d34 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	08da      	lsrs	r2, r3, #3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3208      	adds	r2, #8
 8001cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf4:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	220f      	movs	r2, #15
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	43db      	mvns	r3, r3
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f003 020f 	and.w	r2, r3, #15
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	6979      	ldr	r1, [r7, #20]
 8001d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	2203      	movs	r2, #3
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	697a      	ldr	r2, [r7, #20]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d00b      	beq.n	8001d88 <HAL_GPIO_Init+0xd8>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d007      	beq.n	8001d88 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d7c:	2b11      	cmp	r3, #17
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b12      	cmp	r3, #18
 8001d86:	d130      	bne.n	8001dea <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	2203      	movs	r2, #3
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68da      	ldr	r2, [r3, #12]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	f003 0201 	and.w	r2, r3, #1
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d017      	beq.n	8001e22 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	4013      	ands	r3, r2
 8001e08:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d07c      	beq.n	8001f28 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001e2e:	4a47      	ldr	r2, [pc, #284]	@ (8001f4c <HAL_GPIO_Init+0x29c>)
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	3318      	adds	r3, #24
 8001e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3a:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	0a9a      	lsrs	r2, r3, #10
 8001e56:	4b3e      	ldr	r3, [pc, #248]	@ (8001f50 <HAL_GPIO_Init+0x2a0>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	f002 0203 	and.w	r2, r2, #3
 8001e60:	00d2      	lsls	r2, r2, #3
 8001e62:	4093      	lsls	r3, r2
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001e6a:	4938      	ldr	r1, [pc, #224]	@ (8001f4c <HAL_GPIO_Init+0x29c>)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3318      	adds	r3, #24
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001e78:	4b34      	ldr	r3, [pc, #208]	@ (8001f4c <HAL_GPIO_Init+0x29c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	4013      	ands	r3, r2
 8001e86:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001e9c:	4a2b      	ldr	r2, [pc, #172]	@ (8001f4c <HAL_GPIO_Init+0x29c>)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <HAL_GPIO_Init+0x29c>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8001ebe:	697a      	ldr	r2, [r7, #20]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001ec6:	4a21      	ldr	r2, [pc, #132]	@ (8001f4c <HAL_GPIO_Init+0x29c>)
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <HAL_GPIO_Init+0x29c>)
 8001ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ed2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4013      	ands	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001ef2:	4a16      	ldr	r2, [pc, #88]	@ (8001f4c <HAL_GPIO_Init+0x29c>)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8001efa:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <HAL_GPIO_Init+0x29c>)
 8001efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f00:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001f20:	4a0a      	ldr	r2, [pc, #40]	@ (8001f4c <HAL_GPIO_Init+0x29c>)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f47f aec1 	bne.w	8001cc0 <HAL_GPIO_Init+0x10>
  }
}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	44022000 	.word	0x44022000
 8001f50:	002f7f7f 	.word	0x002f7f7f

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f70:	e002      	b.n	8001f78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e08d      	b.n	80020b2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d106      	bne.n	8001fb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7fe fe2e 	bl	8000c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2224      	movs	r2, #36	@ 0x24
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fe4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d107      	bne.n	8001ffe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	e006      	b.n	800200c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689a      	ldr	r2, [r3, #8]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800200a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d108      	bne.n	8002026 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685a      	ldr	r2, [r3, #4]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	e007      	b.n	8002036 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002034:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002044:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002048:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002058:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691a      	ldr	r2, [r3, #16]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	430a      	orrs	r2, r1
 8002072:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69d9      	ldr	r1, [r3, #28]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1a      	ldr	r2, [r3, #32]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2220      	movs	r2, #32
 800209e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
 80020c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d138      	bne.n	8002142 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d101      	bne.n	80020de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020da:	2302      	movs	r3, #2
 80020dc:	e032      	b.n	8002144 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2224      	movs	r2, #36	@ 0x24
 80020ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800210c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6819      	ldr	r1, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f042 0201 	orr.w	r2, r2, #1
 800212c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800213e:	2300      	movs	r3, #0
 8002140:	e000      	b.n	8002144 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002142:	2302      	movs	r3, #2
  }
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b20      	cmp	r3, #32
 8002164:	d139      	bne.n	80021da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002170:	2302      	movs	r3, #2
 8002172:	e033      	b.n	80021dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2224      	movs	r2, #36	@ 0x24
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 0201 	bic.w	r2, r2, #1
 8002192:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f042 0201 	orr.w	r2, r2, #1
 80021c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e000      	b.n	80021dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021da:	2302      	movs	r3, #2
  }
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80021f4:	230a      	movs	r3, #10
 80021f6:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80021f8:	e002      	b.n	8002200 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f9      	bne.n	80021fa <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800220e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	b29b      	uxth	r3, r3
 8002218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800221c:	b29b      	uxth	r3, r3
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800222a:	b480      	push	{r7}
 800222c:	b085      	sub	sp, #20
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	460b      	mov	r3, r1
 8002234:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002236:	230a      	movs	r3, #10
 8002238:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800223a:	e002      	b.n	8002242 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3b01      	subs	r3, #1
 8002240:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f9      	bne.n	800223c <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8002248:	887b      	ldrh	r3, [r7, #2]
 800224a:	00db      	lsls	r3, r3, #3
 800224c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002250:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0c1b      	lsrs	r3, r3, #16
 8002258:	b29b      	uxth	r3, r3
 800225a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800225e:	b29b      	uxth	r3, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	460b      	mov	r3, r1
 8002276:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002278:	230a      	movs	r3, #10
 800227a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800227c:	e002      	b.n	8002284 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	3b01      	subs	r3, #1
 8002282:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f9      	bne.n	800227e <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800228a:	887b      	ldrh	r3, [r7, #2]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002292:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	b29b      	uxth	r3, r3
 800229c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022a0:	b29b      	uxth	r3, r3
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af02      	add	r7, sp, #8
 80022b4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0f3      	b.n	80024a8 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d106      	bne.n	80022da <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7fe fe9f 	bl	8001018 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2203      	movs	r2, #3
 80022de:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f008 fb89 	bl	800a9fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7c1a      	ldrb	r2, [r3, #16]
 80022f4:	f88d 2000 	strb.w	r2, [sp]
 80022f8:	3304      	adds	r3, #4
 80022fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022fc:	f008 fb4d 	bl	800a99a <USB_CoreInit>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e0ca      	b.n	80024a8 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f008 fb85 	bl	800aa28 <USB_SetCurrentMode>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0bb      	b.n	80024a8 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002330:	2300      	movs	r3, #0
 8002332:	73fb      	strb	r3, [r7, #15]
 8002334:	e03f      	b.n	80023b6 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002336:	7bfa      	ldrb	r2, [r7, #15]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	440b      	add	r3, r1
 8002344:	3315      	adds	r3, #21
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800234a:	7bfa      	ldrb	r2, [r7, #15]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	440b      	add	r3, r1
 8002358:	3314      	adds	r3, #20
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	440b      	add	r3, r1
 800236c:	3317      	adds	r3, #23
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	3324      	adds	r3, #36	@ 0x24
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	3328      	adds	r3, #40	@ 0x28
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	3304      	adds	r3, #4
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b0:	7bfb      	ldrb	r3, [r7, #15]
 80023b2:	3301      	adds	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	791b      	ldrb	r3, [r3, #4]
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d3ba      	bcc.n	8002336 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023c0:	2300      	movs	r3, #0
 80023c2:	73fb      	strb	r3, [r7, #15]
 80023c4:	e044      	b.n	8002450 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	440b      	add	r3, r1
 80023d4:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	440b      	add	r3, r1
 8002416:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800241e:	7bfa      	ldrb	r2, [r7, #15]
 8002420:	6879      	ldr	r1, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	00db      	lsls	r3, r3, #3
 800242a:	440b      	add	r3, r1
 800242c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	440b      	add	r3, r1
 8002442:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	3301      	adds	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	791b      	ldrb	r3, [r3, #4]
 8002454:	7bfa      	ldrb	r2, [r7, #15]
 8002456:	429a      	cmp	r2, r3
 8002458:	d3b5      	bcc.n	80023c6 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	7c1a      	ldrb	r2, [r3, #16]
 8002462:	f88d 2000 	strb.w	r2, [sp]
 8002466:	3304      	adds	r3, #4
 8002468:	cb0e      	ldmia	r3, {r1, r2, r3}
 800246a:	f008 fb00 	bl	800aa6e <USB_DevInit>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e013      	b.n	80024a8 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7b1b      	ldrb	r3, [r3, #12]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d102      	bne.n	800249c <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f001 fb6b 	bl	8003b72 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f00a f959 	bl	800c758 <USB_DevDisconnect>

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_PCD_Start+0x16>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e012      	b.n	80024ec <HAL_PCD_Start+0x3c>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2201      	movs	r2, #1
 80024ca:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f008 fa7f 	bl	800a9d6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f00a f92a 	bl	800c736 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f00a f93a 	bl	800c77a <USB_ReadInterrupts>
 8002506:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 faf2 	bl	8002afc <PCD_EP_ISR_Handler>

    return;
 8002518:	e0de      	b.n	80026d8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8002532:	400b      	ands	r3, r1
 8002534:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f00b f833 	bl	800d5a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800253c:	2100      	movs	r1, #0
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f8e1 	bl	8002706 <HAL_PCD_SetAddress>

    return;
 8002544:	e0c8      	b.n	80026d8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d009      	beq.n	8002564 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 800255e:	400b      	ands	r3, r1
 8002560:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002562:	e0b9      	b.n	80026d8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d009      	beq.n	8002582 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 800257c:	400b      	ands	r3, r1
 800257e:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002580:	e0aa      	b.n	80026d8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d029      	beq.n	80025e0 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0204 	bic.w	r2, r2, #4
 800259a:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f022 0208 	bic.w	r2, r2, #8
 80025aa:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d107      	bne.n	80025c6 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80025be:	2100      	movs	r1, #0
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f001 faf8 	bl	8003bb6 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f893 	bl	80026f2 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80025da:	400b      	ands	r3, r1
 80025dc:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80025de:	e07b      	b.n	80026d8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d01c      	beq.n	8002624 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0208 	orr.w	r2, r2, #8
 80025f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8002608:	400b      	ands	r3, r1
 800260a:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0204 	orr.w	r2, r2, #4
 800261a:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f85e 	bl	80026de <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002622:	e059      	b.n	80026d8 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800262a:	2b00      	cmp	r3, #0
 800262c:	d033      	beq.n	8002696 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 800263c:	400b      	ands	r3, r1
 800263e:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002646:	2b00      	cmp	r3, #0
 8002648:	d121      	bne.n	800268e <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0204 	orr.w	r2, r2, #4
 8002658:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 0208 	orr.w	r2, r2, #8
 8002668:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002684:	2101      	movs	r1, #1
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f001 fa95 	bl	8003bb6 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800268c:	e024      	b.n	80026d8 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f825 	bl	80026de <HAL_PCD_SuspendCallback>
    return;
 8002694:	e020      	b.n	80026d8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00c      	beq.n	80026ba <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 80026ae:	400b      	ands	r3, r1
 80026b0:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f00a ff67 	bl	800d586 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80026b8:	e00e      	b.n	80026d8 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80026d2:	400b      	ands	r3, r1
 80026d4:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80026d6:	bf00      	nop
  }
}
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002718:	2b01      	cmp	r3, #1
 800271a:	d101      	bne.n	8002720 <HAL_PCD_SetAddress+0x1a>
 800271c:	2302      	movs	r3, #2
 800271e:	e012      	b.n	8002746 <HAL_PCD_SetAddress+0x40>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f009 ffea 	bl	800c710 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	4608      	mov	r0, r1
 8002758:	4611      	mov	r1, r2
 800275a:	461a      	mov	r2, r3
 800275c:	4603      	mov	r3, r0
 800275e:	70fb      	strb	r3, [r7, #3]
 8002760:	460b      	mov	r3, r1
 8002762:	803b      	strh	r3, [r7, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800276c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002770:	2b00      	cmp	r3, #0
 8002772:	da0f      	bge.n	8002794 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	f003 0207 	and.w	r2, r3, #7
 800277a:	4613      	mov	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	3310      	adds	r3, #16
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	4413      	add	r3, r2
 8002788:	3304      	adds	r3, #4
 800278a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	705a      	strb	r2, [r3, #1]
 8002792:	e00f      	b.n	80027b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	f003 0207 	and.w	r2, r3, #7
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	3304      	adds	r3, #4
 80027ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80027c0:	883b      	ldrh	r3, [r7, #0]
 80027c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	78ba      	ldrb	r2, [r7, #2]
 80027ce:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027d0:	78bb      	ldrb	r3, [r7, #2]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d102      	bne.n	80027dc <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_PCD_EP_Open+0x9c>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e00e      	b.n	8002808 <HAL_PCD_EP_Open+0xba>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68f9      	ldr	r1, [r7, #12]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f008 f95b 	bl	800aab4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8002806:	7afb      	ldrb	r3, [r7, #11]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800281c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002820:	2b00      	cmp	r3, #0
 8002822:	da0f      	bge.n	8002844 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	f003 0207 	and.w	r2, r3, #7
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	3310      	adds	r3, #16
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	4413      	add	r3, r2
 8002838:	3304      	adds	r3, #4
 800283a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2201      	movs	r2, #1
 8002840:	705a      	strb	r2, [r3, #1]
 8002842:	e00f      	b.n	8002864 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	f003 0207 	and.w	r2, r3, #7
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	4413      	add	r3, r2
 800285a:	3304      	adds	r3, #4
 800285c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	b2da      	uxtb	r2, r3
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_PCD_EP_Close+0x6e>
 800287a:	2302      	movs	r3, #2
 800287c:	e00e      	b.n	800289c <HAL_PCD_EP_Close+0x8c>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68f9      	ldr	r1, [r7, #12]
 800288c:	4618      	mov	r0, r3
 800288e:	f008 fc71 	bl	800b174 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	607a      	str	r2, [r7, #4]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	460b      	mov	r3, r1
 80028b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028b4:	7afb      	ldrb	r3, [r7, #11]
 80028b6:	f003 0207 	and.w	r2, r3, #7
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	3304      	adds	r3, #4
 80028cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2200      	movs	r2, #0
 80028e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028e6:	7afb      	ldrb	r3, [r7, #11]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6979      	ldr	r1, [r7, #20]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f008 fdc5 	bl	800b488 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	f003 0207 	and.w	r2, r3, #7
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	440b      	add	r3, r1
 8002926:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	607a      	str	r2, [r7, #4]
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	460b      	mov	r3, r1
 8002946:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002948:	7afb      	ldrb	r3, [r7, #11]
 800294a:	f003 0207 	and.w	r2, r3, #7
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	3310      	adds	r3, #16
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	3304      	adds	r3, #4
 800295e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2200      	movs	r2, #0
 800297e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2201      	movs	r2, #1
 8002984:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002986:	7afb      	ldrb	r3, [r7, #11]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	b2da      	uxtb	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6979      	ldr	r1, [r7, #20]
 8002998:	4618      	mov	r0, r3
 800299a:	f008 fd75 	bl	800b488 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	7912      	ldrb	r2, [r2, #4]
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e040      	b.n	8002a48 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	da0f      	bge.n	80029ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	f003 0207 	and.w	r2, r3, #7
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	3310      	adds	r3, #16
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	3304      	adds	r3, #4
 80029e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	705a      	strb	r2, [r3, #1]
 80029ec:	e00d      	b.n	8002a0a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	3304      	adds	r3, #4
 8002a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a10:	78fb      	ldrb	r3, [r7, #3]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d101      	bne.n	8002a2a <HAL_PCD_EP_SetStall+0x82>
 8002a26:	2302      	movs	r3, #2
 8002a28:	e00e      	b.n	8002a48 <HAL_PCD_EP_SetStall+0xa0>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68f9      	ldr	r1, [r7, #12]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f009 fd8f 	bl	800c55c <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	460b      	mov	r3, r1
 8002a5a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a5c:	78fb      	ldrb	r3, [r7, #3]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	7912      	ldrb	r2, [r2, #4]
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d901      	bls.n	8002a6e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e042      	b.n	8002af4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	da0f      	bge.n	8002a96 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a76:	78fb      	ldrb	r3, [r7, #3]
 8002a78:	f003 0207 	and.w	r2, r3, #7
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	3310      	adds	r3, #16
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	4413      	add	r3, r2
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	705a      	strb	r2, [r3, #1]
 8002a94:	e00f      	b.n	8002ab6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a96:	78fb      	ldrb	r3, [r7, #3]
 8002a98:	f003 0207 	and.w	r2, r3, #7
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	4413      	add	r3, r2
 8002aac:	3304      	adds	r3, #4
 8002aae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	b2da      	uxtb	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_PCD_EP_ClrStall+0x86>
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	e00e      	b.n	8002af4 <HAL_PCD_EP_ClrStall+0xa4>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68f9      	ldr	r1, [r7, #12]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f009 fd7f 	bl	800c5e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08e      	sub	sp, #56	@ 0x38
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002b04:	e326      	b.n	8003154 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b0c:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8002b0e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8002b1a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 8124 	bne.w	8002d6c <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002b26:	f003 0310 	and.w	r3, r3, #16
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d13e      	bne.n	8002bac <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b89      	ldr	r3, [pc, #548]	@ (8002d5c <PCD_EP_ISR_Handler+0x260>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b44:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3314      	adds	r3, #20
 8002b4a:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002b56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	0c1b      	lsrs	r3, r3, #16
 8002b5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b64:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	441a      	add	r2, r3
 8002b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b72:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b74:	2100      	movs	r1, #0
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f00a fceb 	bl	800d552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7c5b      	ldrb	r3, [r3, #17]
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 82e6 	beq.w	8003154 <PCD_EP_ISR_Handler+0x658>
 8002b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f040 82e1 	bne.w	8003154 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7c5b      	ldrb	r3, [r3, #17]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	745a      	strb	r2, [r3, #17]
 8002baa:	e2d3      	b.n	8003154 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002bb2:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bbc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002bbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d027      	beq.n	8002c16 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f7ff fb09 	bl	80021e8 <PCD_GET_EP_RX_CNT>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	461a      	mov	r2, r3
 8002bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bdc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8002be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	f009 fe31 	bl	800c858 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b58      	ldr	r3, [pc, #352]	@ (8002d60 <PCD_EP_ISR_Handler+0x264>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c0c:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f00a fc72 	bl	800d4f8 <HAL_PCD_SetupStageCallback>
 8002c14:	e29e      	b.n	8003154 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8002c16:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f280 829a 	bge.w	8003154 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4b4e      	ldr	r3, [pc, #312]	@ (8002d60 <PCD_EP_ISR_Handler+0x264>)
 8002c28:	4013      	ands	r3, r2
 8002c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002c36:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f7ff fad0 	bl	80021e8 <PCD_GET_EP_RX_CNT>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c4e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d019      	beq.n	8002c8c <PCD_EP_ISR_Handler+0x190>
 8002c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c66:	6959      	ldr	r1, [r3, #20]
 8002c68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f009 fdf1 	bl	800c858 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	441a      	add	r2, r3
 8002c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c82:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c84:	2100      	movs	r1, #0
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f00a fc48 	bl	800d51c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002c94:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002c96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f040 825a 	bne.w	8003154 <PCD_EP_ISR_Handler+0x658>
 8002ca0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002ca2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002ca6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002caa:	f000 8253 	beq.w	8003154 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002cae:	4b2d      	ldr	r3, [pc, #180]	@ (8002d64 <PCD_EP_ISR_Handler+0x268>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8002d64 <PCD_EP_ISR_Handler+0x268>)
 8002cb4:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002cb8:	6053      	str	r3, [r2, #4]
 8002cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <PCD_EP_ISR_Handler+0x1d4>
 8002cc2:	4b28      	ldr	r3, [pc, #160]	@ (8002d64 <PCD_EP_ISR_Handler+0x268>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4a27      	ldr	r2, [pc, #156]	@ (8002d64 <PCD_EP_ISR_Handler+0x268>)
 8002cc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ccc:	6053      	str	r3, [r2, #4]
 8002cce:	e02e      	b.n	8002d2e <PCD_EP_ISR_Handler+0x232>
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b3e      	cmp	r3, #62	@ 0x3e
 8002cd6:	d814      	bhi.n	8002d02 <PCD_EP_ISR_Handler+0x206>
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	085b      	lsrs	r3, r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <PCD_EP_ISR_Handler+0x1f6>
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8002d64 <PCD_EP_ISR_Handler+0x268>)
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	069b      	lsls	r3, r3, #26
 8002cfa:	491a      	ldr	r1, [pc, #104]	@ (8002d64 <PCD_EP_ISR_Handler+0x268>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	604b      	str	r3, [r1, #4]
 8002d00:	e015      	b.n	8002d2e <PCD_EP_ISR_Handler+0x232>
 8002d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <PCD_EP_ISR_Handler+0x220>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <PCD_EP_ISR_Handler+0x268>)
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	069b      	lsls	r3, r3, #26
 8002d24:	4313      	orrs	r3, r2
 8002d26:	4a0f      	ldr	r2, [pc, #60]	@ (8002d64 <PCD_EP_ISR_Handler+0x268>)
 8002d28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d2c:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <PCD_EP_ISR_Handler+0x26c>)
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	e1fb      	b.n	8003154 <PCD_EP_ISR_Handler+0x658>
 8002d5c:	07ff8f0f 	.word	0x07ff8f0f
 8002d60:	07ff0f8f 	.word	0x07ff0f8f
 8002d64:	40016400 	.word	0x40016400
 8002d68:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8002d7e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f280 80bd 	bge.w	8002f02 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	4b9e      	ldr	r3, [pc, #632]	@ (8003014 <PCD_EP_ISR_Handler+0x518>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61fb      	str	r3, [r7, #28]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	69fa      	ldr	r2, [r7, #28]
 8002dae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002db2:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002db4:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3304      	adds	r3, #4
 8002dca:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dce:	7b1b      	ldrb	r3, [r3, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d116      	bne.n	8002e02 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	4610      	mov	r0, r2
 8002de0:	f7ff fa02 	bl	80021e8 <PCD_GET_EP_RX_CNT>
 8002de4:	4603      	mov	r3, r0
 8002de6:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8002de8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d067      	beq.n	8002ebe <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df4:	6959      	ldr	r1, [r3, #20]
 8002df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df8:	88da      	ldrh	r2, [r3, #6]
 8002dfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002dfc:	f009 fd2c 	bl	800c858 <USB_ReadPMA>
 8002e00:	e05d      	b.n	8002ebe <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e04:	78db      	ldrb	r3, [r3, #3]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d108      	bne.n	8002e1c <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002e0a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f9ad 	bl	8003170 <HAL_PCD_EP_DB_Receive>
 8002e16:	4603      	mov	r3, r0
 8002e18:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002e1a:	e050      	b.n	8002ebe <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b7a      	ldr	r3, [pc, #488]	@ (8003018 <PCD_EP_ISR_Handler+0x51c>)
 8002e2e:	4013      	ands	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	461a      	mov	r2, r3
 8002e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	441a      	add	r2, r3
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002e4a:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d016      	beq.n	8002e92 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	f7ff f9db 	bl	800222a <PCD_GET_EP_DBUF0_CNT>
 8002e74:	4603      	mov	r3, r0
 8002e76:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002e78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01f      	beq.n	8002ebe <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e84:	6959      	ldr	r1, [r3, #20]
 8002e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e88:	891a      	ldrh	r2, [r3, #8]
 8002e8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e8c:	f009 fce4 	bl	800c858 <USB_ReadPMA>
 8002e90:	e015      	b.n	8002ebe <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	f7ff f9e5 	bl	800226c <PCD_GET_EP_DBUF1_CNT>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002ea6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
 8002eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb2:	6959      	ldr	r1, [r3, #20]
 8002eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eb6:	895a      	ldrh	r2, [r3, #10]
 8002eb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002eba:	f009 fccd 	bl	800c858 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec0:	69da      	ldr	r2, [r3, #28]
 8002ec2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ec4:	441a      	add	r2, r3
 8002ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ec8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ed0:	441a      	add	r2, r3
 8002ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <PCD_EP_ISR_Handler+0x3ec>
 8002ede:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d206      	bcs.n	8002ef6 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	4619      	mov	r1, r3
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f00a fb14 	bl	800d51c <HAL_PCD_DataOutStageCallback>
 8002ef4:	e005      	b.n	8002f02 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002efc:	4618      	mov	r0, r3
 8002efe:	f008 fac3 	bl	800b488 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8002f02:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 8123 	beq.w	8003154 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8002f0e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	3310      	adds	r3, #16
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	4413      	add	r3, r2
 8002f20:	3304      	adds	r3, #4
 8002f22:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b39      	ldr	r3, [pc, #228]	@ (800301c <PCD_EP_ISR_Handler+0x520>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f4e:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f52:	78db      	ldrb	r3, [r3, #3]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	f040 80b8 	bne.w	80030ca <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8002f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f62:	7b1b      	ldrb	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 80a9 	beq.w	80030bc <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f6a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d055      	beq.n	8003020 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f76:	785b      	ldrb	r3, [r3, #1]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d124      	bne.n	8002fc6 <PCD_EP_ISR_Handler+0x4ca>
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002f9a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002faa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fbe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e07a      	b.n	80030bc <PCD_EP_ISR_Handler+0x5c0>
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc8:	785b      	ldrb	r3, [r3, #1]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d176      	bne.n	80030bc <PCD_EP_ISR_Handler+0x5c0>
 8002fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002fe8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002fec:	b292      	uxth	r2, r2
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8002ffa:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8002ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	00db      	lsls	r3, r3, #3
 8003004:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003008:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800300c:	6812      	ldr	r2, [r2, #0]
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	e054      	b.n	80030bc <PCD_EP_ISR_Handler+0x5c0>
 8003012:	bf00      	nop
 8003014:	07ff0f8f 	.word	0x07ff0f8f
 8003018:	07ff8f8f 	.word	0x07ff8f8f
 800301c:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003022:	785b      	ldrb	r3, [r3, #1]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d124      	bne.n	8003072 <PCD_EP_ISR_Handler+0x576>
 8003028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003032:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003042:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003046:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003056:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003066:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800306a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800306e:	605a      	str	r2, [r3, #4]
 8003070:	e024      	b.n	80030bc <PCD_EP_ISR_Handler+0x5c0>
 8003072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003074:	785b      	ldrb	r3, [r3, #1]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d120      	bne.n	80030bc <PCD_EP_ISR_Handler+0x5c0>
 800307a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003084:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003094:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003098:	b292      	uxth	r2, r2
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80030a6:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80030aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80030b8:	6852      	ldr	r2, [r2, #4]
 80030ba:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80030bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	4619      	mov	r1, r3
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f00a fa45 	bl	800d552 <HAL_PCD_DataInStageCallback>
 80030c8:	e044      	b.n	8003154 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80030ca:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80030cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d139      	bne.n	8003148 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	0c1b      	lsrs	r3, r3, #16
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80030ec:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 80030ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030f0:	699a      	ldr	r2, [r3, #24]
 80030f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d906      	bls.n	8003106 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 80030f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fa:	699a      	ldr	r2, [r3, #24]
 80030fc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80030fe:	1ad2      	subs	r2, r2, r3
 8003100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003102:	619a      	str	r2, [r3, #24]
 8003104:	e002      	b.n	800310c <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8003106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003108:	2200      	movs	r2, #0
 800310a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800310c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d106      	bne.n	8003122 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	4619      	mov	r1, r3
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f00a fa19 	bl	800d552 <HAL_PCD_DataInStageCallback>
 8003120:	e018      	b.n	8003154 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003128:	441a      	add	r2, r3
 800312a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800312c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800312e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003130:	69da      	ldr	r2, [r3, #28]
 8003132:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003134:	441a      	add	r2, r3
 8003136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003138:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003140:	4618      	mov	r0, r3
 8003142:	f008 f9a1 	bl	800b488 <USB_EPStartXfer>
 8003146:	e005      	b.n	8003154 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003148:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800314a:	461a      	mov	r2, r3
 800314c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f8e8 	bl	8003324 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800315a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800315e:	2b00      	cmp	r3, #0
 8003160:	f47f acd1 	bne.w	8002b06 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3738      	adds	r7, #56	@ 0x38
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop

08003170 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	@ 0x28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	4613      	mov	r3, r2
 800317c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d062      	beq.n	800324e <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f7ff f849 	bl	800222a <PCD_GET_EP_DBUF0_CNT>
 8003198:	4603      	mov	r3, r0
 800319a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	699a      	ldr	r2, [r3, #24]
 80031a0:	8bfb      	ldrh	r3, [r7, #30]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d306      	bcc.n	80031b4 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	699a      	ldr	r2, [r3, #24]
 80031aa:	8bfb      	ldrh	r3, [r7, #30]
 80031ac:	1ad2      	subs	r2, r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	619a      	str	r2, [r3, #24]
 80031b2:	e002      	b.n	80031ba <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2200      	movs	r2, #0
 80031b8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d11b      	bne.n	80031fa <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	4b52      	ldr	r3, [pc, #328]	@ (800331c <HAL_PCD_EP_DB_Receive+0x1ac>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80031de:	61bb      	str	r3, [r7, #24]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	461a      	mov	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	441a      	add	r2, r3
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80031f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031f8:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003200:	2b00      	cmp	r3, #0
 8003202:	d017      	beq.n	8003234 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4b42      	ldr	r3, [pc, #264]	@ (8003320 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003216:	4013      	ands	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	441a      	add	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800322e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003232:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003234:	8bfb      	ldrh	r3, [r7, #30]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d06b      	beq.n	8003312 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	6959      	ldr	r1, [r3, #20]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	891a      	ldrh	r2, [r3, #8]
 8003246:	8bfb      	ldrh	r3, [r7, #30]
 8003248:	f009 fb06 	bl	800c858 <USB_ReadPMA>
 800324c:	e061      	b.n	8003312 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	4619      	mov	r1, r3
 8003258:	4610      	mov	r0, r2
 800325a:	f7ff f807 	bl	800226c <PCD_GET_EP_DBUF1_CNT>
 800325e:	4603      	mov	r3, r0
 8003260:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	8bfb      	ldrh	r3, [r7, #30]
 8003268:	429a      	cmp	r2, r3
 800326a:	d306      	bcc.n	800327a <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	699a      	ldr	r2, [r3, #24]
 8003270:	8bfb      	ldrh	r3, [r7, #30]
 8003272:	1ad2      	subs	r2, r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	619a      	str	r2, [r3, #24]
 8003278:	e002      	b.n	8003280 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	2200      	movs	r2, #0
 800327e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d11b      	bne.n	80032c0 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	461a      	mov	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	4413      	add	r3, r2
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	4b20      	ldr	r3, [pc, #128]	@ (800331c <HAL_PCD_EP_DB_Receive+0x1ac>)
 800329a:	4013      	ands	r3, r2
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80032a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	441a      	add	r2, r3
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032be:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d117      	bne.n	80032fa <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4b11      	ldr	r3, [pc, #68]	@ (8003320 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80032dc:	4013      	ands	r3, r2
 80032de:	623b      	str	r3, [r7, #32]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	461a      	mov	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	441a      	add	r2, r3
 80032ee:	6a3b      	ldr	r3, [r7, #32]
 80032f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80032f8:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80032fa:	8bfb      	ldrh	r3, [r7, #30]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	6959      	ldr	r1, [r3, #20]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	895a      	ldrh	r2, [r3, #10]
 800330c:	8bfb      	ldrh	r3, [r7, #30]
 800330e:	f009 faa3 	bl	800c858 <USB_ReadPMA>
    }
  }

  return count;
 8003312:	8bfb      	ldrh	r3, [r7, #30]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3728      	adds	r7, #40	@ 0x28
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	07ffbf8f 	.word	0x07ffbf8f
 8003320:	07ff8f8f 	.word	0x07ff8f8f

08003324 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b08e      	sub	sp, #56	@ 0x38
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	4613      	mov	r3, r2
 8003330:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003332:	88fb      	ldrh	r3, [r7, #6]
 8003334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 81d5 	beq.w	80036e8 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	4619      	mov	r1, r3
 8003348:	4610      	mov	r0, r2
 800334a:	f7fe ff6e 	bl	800222a <PCD_GET_EP_DBUF0_CNT>
 800334e:	4603      	mov	r3, r0
 8003350:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	8bfb      	ldrh	r3, [r7, #30]
 8003358:	429a      	cmp	r2, r3
 800335a:	d906      	bls.n	800336a <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	699a      	ldr	r2, [r3, #24]
 8003360:	8bfb      	ldrh	r3, [r7, #30]
 8003362:	1ad2      	subs	r2, r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	619a      	str	r2, [r3, #24]
 8003368:	e002      	b.n	8003370 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2200      	movs	r2, #0
 800336e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	2b00      	cmp	r3, #0
 8003376:	f040 80c1 	bne.w	80034fc <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	785b      	ldrb	r3, [r3, #1]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d124      	bne.n	80033cc <HAL_PCD_EP_DB_Transmit+0xa8>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800338c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800339c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033a0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	e024      	b.n	8003416 <HAL_PCD_EP_DB_Transmit+0xf2>
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	785b      	ldrb	r3, [r3, #1]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d120      	bne.n	8003416 <HAL_PCD_EP_DB_Transmit+0xf2>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80033ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80033f2:	b292      	uxth	r2, r2
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003400:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800340e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	785b      	ldrb	r3, [r3, #1]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d124      	bne.n	8003468 <HAL_PCD_EP_DB_Transmit+0x144>
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003428:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	00db      	lsls	r3, r3, #3
 8003434:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003438:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800343c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003440:	605a      	str	r2, [r3, #4]
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800344c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800345c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003460:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003464:	605a      	str	r2, [r3, #4]
 8003466:	e024      	b.n	80034b2 <HAL_PCD_EP_DB_Transmit+0x18e>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	785b      	ldrb	r3, [r3, #1]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d120      	bne.n	80034b2 <HAL_PCD_EP_DB_Transmit+0x18e>
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800347a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800348a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800348e:	b292      	uxth	r2, r2
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	00db      	lsls	r3, r3, #3
 8003498:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800349c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80034ae:	6852      	ldr	r2, [r2, #4]
 80034b0:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	4619      	mov	r1, r3
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f00a f84a 	bl	800d552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034be:	88fb      	ldrh	r3, [r7, #6]
 80034c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 82e5 	beq.w	8003a94 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	4b8e      	ldr	r3, [pc, #568]	@ (8003714 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80034dc:	4013      	ands	r3, r2
 80034de:	637b      	str	r3, [r7, #52]	@ 0x34
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	441a      	add	r2, r3
 80034ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	e2cb      	b.n	8003a94 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80034fc:	88fb      	ldrh	r3, [r7, #6]
 80034fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d017      	beq.n	8003536 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4b7f      	ldr	r3, [pc, #508]	@ (8003714 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003518:	4013      	ands	r3, r2
 800351a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	461a      	mov	r2, r3
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	441a      	add	r2, r3
 800352a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800352c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003534:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800353c:	2b01      	cmp	r3, #1
 800353e:	f040 82a9 	bne.w	8003a94 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	8bfb      	ldrh	r3, [r7, #30]
 8003548:	441a      	add	r2, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	8bfb      	ldrh	r3, [r7, #30]
 8003554:	441a      	add	r2, r3
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	6a1a      	ldr	r2, [r3, #32]
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	429a      	cmp	r2, r3
 8003564:	d309      	bcc.n	800357a <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	6a1a      	ldr	r2, [r3, #32]
 8003570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003572:	1ad2      	subs	r2, r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	621a      	str	r2, [r3, #32]
 8003578:	e014      	b.n	80035a4 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d106      	bne.n	8003590 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8003582:	8bfb      	ldrh	r3, [r7, #30]
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800358e:	e009      	b.n	80035a4 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	6a1b      	ldr	r3, [r3, #32]
 800359c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2200      	movs	r2, #0
 80035a2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	785b      	ldrb	r3, [r3, #1]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d16a      	bne.n	8003682 <HAL_PCD_EP_DB_Transmit+0x35e>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035ca:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d112      	bne.n	80035fc <HAL_PCD_EP_DB_Transmit+0x2d8>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	e06a      	b.n	80036d2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80035fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fe:	2b3e      	cmp	r3, #62	@ 0x3e
 8003600:	d81e      	bhi.n	8003640 <HAL_PCD_EP_DB_Transmit+0x31c>
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8003612:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003614:	3301      	adds	r3, #1
 8003616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003622:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003626:	6819      	ldr	r1, [r3, #0]
 8003628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362a:	069a      	lsls	r2, r3, #26
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003636:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800363a:	430a      	orrs	r2, r1
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	e048      	b.n	80036d2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003642:	095b      	lsrs	r3, r3, #5
 8003644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <HAL_PCD_EP_DB_Transmit+0x332>
 8003650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003652:	3b01      	subs	r3, #1
 8003654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003660:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003668:	069b      	lsls	r3, r3, #26
 800366a:	431a      	orrs	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003676:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800367a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800367e:	601a      	str	r2, [r3, #0]
 8003680:	e027      	b.n	80036d2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	785b      	ldrb	r3, [r3, #1]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d123      	bne.n	80036d2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003694:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036a8:	b292      	uxth	r2, r2
 80036aa:	601a      	str	r2, [r3, #0]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036ba:	6819      	ldr	r1, [r3, #0]
 80036bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036be:	041a      	lsls	r2, r3, #16
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036ce:	430a      	orrs	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	6959      	ldr	r1, [r3, #20]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	891a      	ldrh	r2, [r3, #8]
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	f009 f858 	bl	800c796 <USB_WritePMA>
 80036e6:	e1d5      	b.n	8003a94 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	4619      	mov	r1, r3
 80036f2:	4610      	mov	r0, r2
 80036f4:	f7fe fdba 	bl	800226c <PCD_GET_EP_DBUF1_CNT>
 80036f8:	4603      	mov	r3, r0
 80036fa:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	699a      	ldr	r2, [r3, #24]
 8003700:	8bfb      	ldrh	r3, [r7, #30]
 8003702:	429a      	cmp	r2, r3
 8003704:	d308      	bcc.n	8003718 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	8bfb      	ldrh	r3, [r7, #30]
 800370c:	1ad2      	subs	r2, r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	619a      	str	r2, [r3, #24]
 8003712:	e004      	b.n	800371e <HAL_PCD_EP_DB_Transmit+0x3fa>
 8003714:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2200      	movs	r2, #0
 800371c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f040 80c1 	bne.w	80038aa <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	785b      	ldrb	r3, [r3, #1]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d124      	bne.n	800377a <HAL_PCD_EP_DB_Transmit+0x456>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800373a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800374a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800374e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800375e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800376e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003772:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	e024      	b.n	80037c4 <HAL_PCD_EP_DB_Transmit+0x4a0>
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d120      	bne.n	80037c4 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800378c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800379c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037a0:	b292      	uxth	r2, r2
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80037ae:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	785b      	ldrb	r3, [r3, #1]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d124      	bne.n	8003816 <HAL_PCD_EP_DB_Transmit+0x4f2>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037ea:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80037ee:	605a      	str	r2, [r3, #4]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800380a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800380e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	e024      	b.n	8003860 <HAL_PCD_EP_DB_Transmit+0x53c>
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	785b      	ldrb	r3, [r3, #1]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d120      	bne.n	8003860 <HAL_PCD_EP_DB_Transmit+0x53c>
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003828:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003838:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800383c:	b292      	uxth	r2, r2
 800383e:	605a      	str	r2, [r3, #4]
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800384a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003858:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800385c:	6852      	ldr	r2, [r2, #4]
 800385e:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	4619      	mov	r1, r3
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f009 fe73 	bl	800d552 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800386c:	88fb      	ldrh	r3, [r7, #6]
 800386e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003872:	2b00      	cmp	r3, #0
 8003874:	f040 810e 	bne.w	8003a94 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	461a      	mov	r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b95      	ldr	r3, [pc, #596]	@ (8003ae0 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800388a:	4013      	ands	r3, r2
 800388c:	623b      	str	r3, [r7, #32]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	441a      	add	r2, r3
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038a6:	6013      	str	r3, [r2, #0]
 80038a8:	e0f4      	b.n	8003a94 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d117      	bne.n	80038e4 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	461a      	mov	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b86      	ldr	r3, [pc, #536]	@ (8003ae0 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	461a      	mov	r2, r3
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	441a      	add	r2, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80038de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038e2:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	f040 80d2 	bne.w	8003a94 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	8bfb      	ldrh	r3, [r7, #30]
 80038f6:	441a      	add	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	8bfb      	ldrh	r3, [r7, #30]
 8003902:	441a      	add	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	6a1a      	ldr	r2, [r3, #32]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	429a      	cmp	r2, r3
 8003912:	d309      	bcc.n	8003928 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	691b      	ldr	r3, [r3, #16]
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	6a1a      	ldr	r2, [r3, #32]
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	1ad2      	subs	r2, r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	621a      	str	r2, [r3, #32]
 8003926:	e014      	b.n	8003952 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d106      	bne.n	800393e <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8003930:	8bfb      	ldrh	r3, [r7, #30]
 8003932:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800393c:	e009      	b.n	8003952 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2200      	movs	r2, #0
 8003948:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	785b      	ldrb	r3, [r3, #1]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d16a      	bne.n	8003a30 <HAL_PCD_EP_DB_Transmit+0x70c>
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	00db      	lsls	r3, r3, #3
 8003960:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003964:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003968:	685a      	ldr	r2, [r3, #4]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003974:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003978:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	2b00      	cmp	r3, #0
 8003982:	d112      	bne.n	80039aa <HAL_PCD_EP_DB_Transmit+0x686>
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800398e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800399e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039a2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80039a6:	605a      	str	r2, [r3, #4]
 80039a8:	e06a      	b.n	8003a80 <HAL_PCD_EP_DB_Transmit+0x75c>
 80039aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80039ae:	d81e      	bhi.n	80039ee <HAL_PCD_EP_DB_Transmit+0x6ca>
 80039b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <HAL_PCD_EP_DB_Transmit+0x6a2>
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	3301      	adds	r3, #1
 80039c4:	61bb      	str	r3, [r7, #24]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039d4:	6859      	ldr	r1, [r3, #4]
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	069a      	lsls	r2, r3, #26
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039e8:	430a      	orrs	r2, r1
 80039ea:	605a      	str	r2, [r3, #4]
 80039ec:	e048      	b.n	8003a80 <HAL_PCD_EP_DB_Transmit+0x75c>
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	61bb      	str	r3, [r7, #24]
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d102      	bne.n	8003a04 <HAL_PCD_EP_DB_Transmit+0x6e0>
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	069b      	lsls	r3, r3, #26
 8003a18:	431a      	orrs	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a28:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003a2c:	605a      	str	r2, [r3, #4]
 8003a2e:	e027      	b.n	8003a80 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	785b      	ldrb	r3, [r3, #1]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d123      	bne.n	8003a80 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	00db      	lsls	r3, r3, #3
 8003a4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a56:	b292      	uxth	r2, r2
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a64:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a68:	6859      	ldr	r1, [r3, #4]
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6c:	041a      	lsls	r2, r3, #16
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	6959      	ldr	r1, [r3, #20]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	895a      	ldrh	r2, [r3, #10]
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f008 fe81 	bl	800c796 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	461a      	mov	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4413      	add	r3, r2
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae4 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aac:	f083 0310 	eor.w	r3, r3, #16
 8003ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ab4:	f083 0320 	eor.w	r3, r3, #32
 8003ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	441a      	add	r2, r3
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ace:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3738      	adds	r7, #56	@ 0x38
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	07ff8f8f 	.word	0x07ff8f8f
 8003ae4:	07ff8fbf 	.word	0x07ff8fbf

08003ae8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	460b      	mov	r3, r1
 8003af4:	817b      	strh	r3, [r7, #10]
 8003af6:	4613      	mov	r3, r2
 8003af8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003afa:	897b      	ldrh	r3, [r7, #10]
 8003afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00c      	beq.n	8003b20 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b06:	897b      	ldrh	r3, [r7, #10]
 8003b08:	f003 0207 	and.w	r2, r3, #7
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	3310      	adds	r3, #16
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	e00a      	b.n	8003b36 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b20:	897a      	ldrh	r2, [r7, #10]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	3304      	adds	r3, #4
 8003b34:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003b36:	893b      	ldrh	r3, [r7, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d107      	bne.n	8003b4c <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	80da      	strh	r2, [r3, #6]
 8003b4a:	e00b      	b.n	8003b64 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b085      	sub	sp, #20
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba0:	f043 0202 	orr.w	r2, r3, #2
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b083      	sub	sp, #12
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
	...

08003bd0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8003bd4:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <HAL_PWREx_EnableVddUSB+0x1c>)
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd8:	4a04      	ldr	r2, [pc, #16]	@ (8003bec <HAL_PWREx_EnableVddUSB+0x1c>)
 8003bda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003bde:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	44020800 	.word	0x44020800

08003bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d102      	bne.n	8003c04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f000 bc28 	b.w	8004454 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c04:	4b94      	ldr	r3, [pc, #592]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003c06:	69db      	ldr	r3, [r3, #28]
 8003c08:	f003 0318 	and.w	r3, r3, #24
 8003c0c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003c0e:	4b92      	ldr	r3, [pc, #584]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d05b      	beq.n	8003cdc <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d005      	beq.n	8003c36 <HAL_RCC_OscConfig+0x46>
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	2b18      	cmp	r3, #24
 8003c2e:	d114      	bne.n	8003c5a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d111      	bne.n	8003c5a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f000 bc08 	b.w	8004454 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003c44:	4b84      	ldr	r3, [pc, #528]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	041b      	lsls	r3, r3, #16
 8003c52:	4981      	ldr	r1, [pc, #516]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003c58:	e040      	b.n	8003cdc <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d023      	beq.n	8003caa <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003c62:	4b7d      	ldr	r3, [pc, #500]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a7c      	ldr	r2, [pc, #496]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6e:	f7fd fdd7 	bl	8001820 <HAL_GetTick>
 8003c72:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003c74:	e008      	b.n	8003c88 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003c76:	f7fd fdd3 	bl	8001820 <HAL_GetTick>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d901      	bls.n	8003c88 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e3e5      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003c88:	4b73      	ldr	r3, [pc, #460]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0f0      	beq.n	8003c76 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003c94:	4b70      	ldr	r3, [pc, #448]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	041b      	lsls	r3, r3, #16
 8003ca2:	496d      	ldr	r1, [pc, #436]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	618b      	str	r3, [r1, #24]
 8003ca8:	e018      	b.n	8003cdc <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003caa:	4b6b      	ldr	r3, [pc, #428]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a6a      	ldr	r2, [pc, #424]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb6:	f7fd fdb3 	bl	8001820 <HAL_GetTick>
 8003cba:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003cbc:	e008      	b.n	8003cd0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003cbe:	f7fd fdaf 	bl	8001820 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d901      	bls.n	8003cd0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e3c1      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003cd0:	4b61      	ldr	r3, [pc, #388]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f0      	bne.n	8003cbe <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80a0 	beq.w	8003e2a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	2b10      	cmp	r3, #16
 8003cee:	d005      	beq.n	8003cfc <HAL_RCC_OscConfig+0x10c>
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2b18      	cmp	r3, #24
 8003cf4:	d109      	bne.n	8003d0a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d106      	bne.n	8003d0a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	f040 8092 	bne.w	8003e2a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e3a4      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d12:	d106      	bne.n	8003d22 <HAL_RCC_OscConfig+0x132>
 8003d14:	4b50      	ldr	r3, [pc, #320]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a4f      	ldr	r2, [pc, #316]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	e058      	b.n	8003dd4 <HAL_RCC_OscConfig+0x1e4>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d112      	bne.n	8003d50 <HAL_RCC_OscConfig+0x160>
 8003d2a:	4b4b      	ldr	r3, [pc, #300]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a4a      	ldr	r2, [pc, #296]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b48      	ldr	r3, [pc, #288]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a47      	ldr	r2, [pc, #284]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	4b45      	ldr	r3, [pc, #276]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a44      	ldr	r2, [pc, #272]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e041      	b.n	8003dd4 <HAL_RCC_OscConfig+0x1e4>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d58:	d112      	bne.n	8003d80 <HAL_RCC_OscConfig+0x190>
 8003d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a3e      	ldr	r2, [pc, #248]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b3c      	ldr	r3, [pc, #240]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a3b      	ldr	r2, [pc, #236]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	4b39      	ldr	r3, [pc, #228]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a38      	ldr	r2, [pc, #224]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e029      	b.n	8003dd4 <HAL_RCC_OscConfig+0x1e4>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003d88:	d112      	bne.n	8003db0 <HAL_RCC_OscConfig+0x1c0>
 8003d8a:	4b33      	ldr	r3, [pc, #204]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a32      	ldr	r2, [pc, #200]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	4b30      	ldr	r3, [pc, #192]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003d9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e011      	b.n	8003dd4 <HAL_RCC_OscConfig+0x1e4>
 8003db0:	4b29      	ldr	r3, [pc, #164]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a28      	ldr	r2, [pc, #160]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003db6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	4b26      	ldr	r3, [pc, #152]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a25      	ldr	r2, [pc, #148]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003dc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b23      	ldr	r3, [pc, #140]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a22      	ldr	r2, [pc, #136]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003dce:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d013      	beq.n	8003e04 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fd20 	bl	8001820 <HAL_GetTick>
 8003de0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003de4:	f7fd fd1c 	bl	8001820 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	@ 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e32e      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003df6:	4b18      	ldr	r3, [pc, #96]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0f0      	beq.n	8003de4 <HAL_RCC_OscConfig+0x1f4>
 8003e02:	e012      	b.n	8003e2a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e04:	f7fd fd0c 	bl	8001820 <HAL_GetTick>
 8003e08:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003e0c:	f7fd fd08 	bl	8001820 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b64      	cmp	r3, #100	@ 0x64
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e31a      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e58 <HAL_RCC_OscConfig+0x268>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 809a 	beq.w	8003f6c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_RCC_OscConfig+0x25a>
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	2b18      	cmp	r3, #24
 8003e42:	d149      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d146      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d104      	bne.n	8003e5c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e2fe      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
 8003e56:	bf00      	nop
 8003e58:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d11c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003e62:	4b9a      	ldr	r3, [pc, #616]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0218 	and.w	r2, r3, #24
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d014      	beq.n	8003e9c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003e72:	4b96      	ldr	r3, [pc, #600]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f023 0218 	bic.w	r2, r3, #24
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	4993      	ldr	r1, [pc, #588]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003e84:	f000 fdd0 	bl	8004a28 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e88:	4b91      	ldr	r3, [pc, #580]	@ (80040d0 <HAL_RCC_OscConfig+0x4e0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fd fc3d 	bl	800170c <HAL_InitTick>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e2db      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fd fcc0 	bl	8001820 <HAL_GetTick>
 8003ea0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003ea4:	f7fd fcbc 	bl	8001820 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e2ce      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb6:	4b85      	ldr	r3, [pc, #532]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003ec2:	4b82      	ldr	r3, [pc, #520]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	497e      	ldr	r1, [pc, #504]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003ed6:	e049      	b.n	8003f6c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d02c      	beq.n	8003f3a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003ee0:	4b7a      	ldr	r3, [pc, #488]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 0218 	bic.w	r2, r3, #24
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	4977      	ldr	r1, [pc, #476]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8003ef2:	4b76      	ldr	r3, [pc, #472]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a75      	ldr	r2, [pc, #468]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003efe:	f7fd fc8f 	bl	8001820 <HAL_GetTick>
 8003f02:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f06:	f7fd fc8b 	bl	8001820 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e29d      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f18:	4b6c      	ldr	r3, [pc, #432]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8003f24:	4b69      	ldr	r3, [pc, #420]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	041b      	lsls	r3, r3, #16
 8003f32:	4966      	ldr	r1, [pc, #408]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	610b      	str	r3, [r1, #16]
 8003f38:	e018      	b.n	8003f6c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f3a:	4b64      	ldr	r3, [pc, #400]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a63      	ldr	r2, [pc, #396]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f46:	f7fd fc6b 	bl	8001820 <HAL_GetTick>
 8003f4a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003f4e:	f7fd fc67 	bl	8001820 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e279      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f60:	4b5a      	ldr	r3, [pc, #360]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1f0      	bne.n	8003f4e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d03c      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d01c      	beq.n	8003fba <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f80:	4b52      	ldr	r3, [pc, #328]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003f82:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f86:	4a51      	ldr	r2, [pc, #324]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003f88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f8c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f90:	f7fd fc46 	bl	8001820 <HAL_GetTick>
 8003f94:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003f98:	f7fd fc42 	bl	8001820 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e254      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003faa:	4b48      	ldr	r3, [pc, #288]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003fac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ef      	beq.n	8003f98 <HAL_RCC_OscConfig+0x3a8>
 8003fb8:	e01b      	b.n	8003ff2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fba:	4b44      	ldr	r3, [pc, #272]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003fbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fc0:	4a42      	ldr	r2, [pc, #264]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003fc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fc6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fca:	f7fd fc29 	bl	8001820 <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003fd2:	f7fd fc25 	bl	8001820 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e237      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003fe4:	4b39      	ldr	r3, [pc, #228]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8003fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1ef      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f000 80d2 	beq.w	80041a4 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004000:	4b34      	ldr	r3, [pc, #208]	@ (80040d4 <HAL_RCC_OscConfig+0x4e4>)
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d118      	bne.n	800403e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800400c:	4b31      	ldr	r3, [pc, #196]	@ (80040d4 <HAL_RCC_OscConfig+0x4e4>)
 800400e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004010:	4a30      	ldr	r2, [pc, #192]	@ (80040d4 <HAL_RCC_OscConfig+0x4e4>)
 8004012:	f043 0301 	orr.w	r3, r3, #1
 8004016:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004018:	f7fd fc02 	bl	8001820 <HAL_GetTick>
 800401c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004020:	f7fd fbfe 	bl	8001820 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e210      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004032:	4b28      	ldr	r3, [pc, #160]	@ (80040d4 <HAL_RCC_OscConfig+0x4e4>)
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d108      	bne.n	8004058 <HAL_RCC_OscConfig+0x468>
 8004046:	4b21      	ldr	r3, [pc, #132]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8004048:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800404c:	4a1f      	ldr	r2, [pc, #124]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 800404e:	f043 0301 	orr.w	r3, r3, #1
 8004052:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004056:	e074      	b.n	8004142 <HAL_RCC_OscConfig+0x552>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d118      	bne.n	8004092 <HAL_RCC_OscConfig+0x4a2>
 8004060:	4b1a      	ldr	r3, [pc, #104]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8004062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004066:	4a19      	ldr	r2, [pc, #100]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8004068:	f023 0301 	bic.w	r3, r3, #1
 800406c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004070:	4b16      	ldr	r3, [pc, #88]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8004072:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004076:	4a15      	ldr	r2, [pc, #84]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8004078:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800407c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004080:	4b12      	ldr	r3, [pc, #72]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8004082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004086:	4a11      	ldr	r2, [pc, #68]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 8004088:	f023 0304 	bic.w	r3, r3, #4
 800408c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004090:	e057      	b.n	8004142 <HAL_RCC_OscConfig+0x552>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	2b05      	cmp	r3, #5
 8004098:	d11e      	bne.n	80040d8 <HAL_RCC_OscConfig+0x4e8>
 800409a:	4b0c      	ldr	r3, [pc, #48]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 800409c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040a0:	4a0a      	ldr	r2, [pc, #40]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 80040a2:	f043 0304 	orr.w	r3, r3, #4
 80040a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040aa:	4b08      	ldr	r3, [pc, #32]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 80040ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040b0:	4a06      	ldr	r2, [pc, #24]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 80040b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040b6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040ba:	4b04      	ldr	r3, [pc, #16]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 80040bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040c0:	4a02      	ldr	r2, [pc, #8]	@ (80040cc <HAL_RCC_OscConfig+0x4dc>)
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040ca:	e03a      	b.n	8004142 <HAL_RCC_OscConfig+0x552>
 80040cc:	44020c00 	.word	0x44020c00
 80040d0:	20000020 	.word	0x20000020
 80040d4:	44020800 	.word	0x44020800
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b85      	cmp	r3, #133	@ 0x85
 80040de:	d118      	bne.n	8004112 <HAL_RCC_OscConfig+0x522>
 80040e0:	4ba2      	ldr	r3, [pc, #648]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80040e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040e6:	4aa1      	ldr	r2, [pc, #644]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80040e8:	f043 0304 	orr.w	r3, r3, #4
 80040ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80040f0:	4b9e      	ldr	r3, [pc, #632]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80040f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040f6:	4a9d      	ldr	r2, [pc, #628]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80040f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004100:	4b9a      	ldr	r3, [pc, #616]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004106:	4a99      	ldr	r2, [pc, #612]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004110:	e017      	b.n	8004142 <HAL_RCC_OscConfig+0x552>
 8004112:	4b96      	ldr	r3, [pc, #600]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004118:	4a94      	ldr	r2, [pc, #592]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004122:	4b92      	ldr	r3, [pc, #584]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004128:	4a90      	ldr	r2, [pc, #576]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 800412a:	f023 0304 	bic.w	r3, r3, #4
 800412e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004132:	4b8e      	ldr	r3, [pc, #568]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004138:	4a8c      	ldr	r2, [pc, #560]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 800413a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800413e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d016      	beq.n	8004178 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414a:	f7fd fb69 	bl	8001820 <HAL_GetTick>
 800414e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004150:	e00a      	b.n	8004168 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004152:	f7fd fb65 	bl	8001820 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004160:	4293      	cmp	r3, r2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e175      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004168:	4b80      	ldr	r3, [pc, #512]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 800416a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0ed      	beq.n	8004152 <HAL_RCC_OscConfig+0x562>
 8004176:	e015      	b.n	80041a4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fd fb52 	bl	8001820 <HAL_GetTick>
 800417c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800417e:	e00a      	b.n	8004196 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004180:	f7fd fb4e 	bl	8001820 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e15e      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004196:	4b75      	ldr	r3, [pc, #468]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ed      	bne.n	8004180 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0320 	and.w	r3, r3, #32
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d036      	beq.n	800421e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d019      	beq.n	80041ec <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041b8:	4b6c      	ldr	r3, [pc, #432]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a6b      	ldr	r2, [pc, #428]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80041be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80041c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fd fb2c 	bl	8001820 <HAL_GetTick>
 80041c8:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80041cc:	f7fd fb28 	bl	8001820 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e13a      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80041de:	4b63      	ldr	r3, [pc, #396]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0f0      	beq.n	80041cc <HAL_RCC_OscConfig+0x5dc>
 80041ea:	e018      	b.n	800421e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041ec:	4b5f      	ldr	r3, [pc, #380]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a5e      	ldr	r2, [pc, #376]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80041f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f8:	f7fd fb12 	bl	8001820 <HAL_GetTick>
 80041fc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004200:	f7fd fb0e 	bl	8001820 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e120      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004212:	4b56      	ldr	r3, [pc, #344]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8115 	beq.w	8004452 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b18      	cmp	r3, #24
 800422c:	f000 80af 	beq.w	800438e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	2b02      	cmp	r3, #2
 8004236:	f040 8086 	bne.w	8004346 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800423a:	4b4c      	ldr	r3, [pc, #304]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a4b      	ldr	r2, [pc, #300]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004240:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fd faeb 	bl	8001820 <HAL_GetTick>
 800424a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800424e:	f7fd fae7 	bl	8001820 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e0f9      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004260:	4b42      	ldr	r3, [pc, #264]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800426c:	4b3f      	ldr	r3, [pc, #252]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 800426e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004270:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004274:	f023 0303 	bic.w	r3, r3, #3
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004280:	0212      	lsls	r2, r2, #8
 8004282:	430a      	orrs	r2, r1
 8004284:	4939      	ldr	r1, [pc, #228]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004286:	4313      	orrs	r3, r2
 8004288:	628b      	str	r3, [r1, #40]	@ 0x28
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800428e:	3b01      	subs	r3, #1
 8004290:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004298:	3b01      	subs	r3, #1
 800429a:	025b      	lsls	r3, r3, #9
 800429c:	b29b      	uxth	r3, r3
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a4:	3b01      	subs	r3, #1
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b2:	3b01      	subs	r3, #1
 80042b4:	061b      	lsls	r3, r3, #24
 80042b6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80042ba:	492c      	ldr	r1, [pc, #176]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80042c0:	4b2a      	ldr	r3, [pc, #168]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80042c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c4:	4a29      	ldr	r2, [pc, #164]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80042c6:	f023 0310 	bic.w	r3, r3, #16
 80042ca:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d0:	4a26      	ldr	r2, [pc, #152]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80042d2:	00db      	lsls	r3, r3, #3
 80042d4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80042d6:	4b25      	ldr	r3, [pc, #148]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80042d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042da:	4a24      	ldr	r2, [pc, #144]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80042dc:	f043 0310 	orr.w	r3, r3, #16
 80042e0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80042e2:	4b22      	ldr	r3, [pc, #136]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80042e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e6:	f023 020c 	bic.w	r2, r3, #12
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ee:	491f      	ldr	r1, [pc, #124]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80042f4:	4b1d      	ldr	r3, [pc, #116]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 80042f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f8:	f023 0220 	bic.w	r2, r3, #32
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004300:	491a      	ldr	r1, [pc, #104]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004302:	4313      	orrs	r3, r2
 8004304:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004306:	4b19      	ldr	r3, [pc, #100]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800430a:	4a18      	ldr	r2, [pc, #96]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 800430c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004310:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004312:	4b16      	ldr	r3, [pc, #88]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a15      	ldr	r2, [pc, #84]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004318:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800431c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431e:	f7fd fa7f 	bl	8001820 <HAL_GetTick>
 8004322:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004326:	f7fd fa7b 	bl	8001820 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e08d      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004338:	4b0c      	ldr	r3, [pc, #48]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x736>
 8004344:	e085      	b.n	8004452 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004346:	4b09      	ldr	r3, [pc, #36]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a08      	ldr	r2, [pc, #32]	@ (800436c <HAL_RCC_OscConfig+0x77c>)
 800434c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004352:	f7fd fa65 	bl	8001820 <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800435a:	f7fd fa61 	bl	8001820 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d903      	bls.n	8004370 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e073      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
 800436c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004370:	4b3a      	ldr	r3, [pc, #232]	@ (800445c <HAL_RCC_OscConfig+0x86c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1ee      	bne.n	800435a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800437c:	4b37      	ldr	r3, [pc, #220]	@ (800445c <HAL_RCC_OscConfig+0x86c>)
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	4a36      	ldr	r2, [pc, #216]	@ (800445c <HAL_RCC_OscConfig+0x86c>)
 8004382:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8004386:	f023 0303 	bic.w	r3, r3, #3
 800438a:	6293      	str	r3, [r2, #40]	@ 0x28
 800438c:	e061      	b.n	8004452 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800438e:	4b33      	ldr	r3, [pc, #204]	@ (800445c <HAL_RCC_OscConfig+0x86c>)
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004394:	4b31      	ldr	r3, [pc, #196]	@ (800445c <HAL_RCC_OscConfig+0x86c>)
 8004396:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004398:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d031      	beq.n	8004406 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f003 0203 	and.w	r2, r3, #3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d12a      	bne.n	8004406 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80043bc:	429a      	cmp	r2, r3
 80043be:	d122      	bne.n	8004406 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ca:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d11a      	bne.n	8004406 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	0a5b      	lsrs	r3, r3, #9
 80043d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043dc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80043de:	429a      	cmp	r2, r3
 80043e0:	d111      	bne.n	8004406 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ee:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d108      	bne.n	8004406 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	0e1b      	lsrs	r3, r3, #24
 80043f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d001      	beq.n	800440a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e024      	b.n	8004454 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800440a:	4b14      	ldr	r3, [pc, #80]	@ (800445c <HAL_RCC_OscConfig+0x86c>)
 800440c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800440e:	08db      	lsrs	r3, r3, #3
 8004410:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004418:	429a      	cmp	r2, r3
 800441a:	d01a      	beq.n	8004452 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800441c:	4b0f      	ldr	r3, [pc, #60]	@ (800445c <HAL_RCC_OscConfig+0x86c>)
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	4a0e      	ldr	r2, [pc, #56]	@ (800445c <HAL_RCC_OscConfig+0x86c>)
 8004422:	f023 0310 	bic.w	r3, r3, #16
 8004426:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fd f9fa 	bl	8001820 <HAL_GetTick>
 800442c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800442e:	bf00      	nop
 8004430:	f7fd f9f6 	bl	8001820 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	4293      	cmp	r3, r2
 800443a:	d0f9      	beq.n	8004430 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004440:	4a06      	ldr	r2, [pc, #24]	@ (800445c <HAL_RCC_OscConfig+0x86c>)
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004446:	4b05      	ldr	r3, [pc, #20]	@ (800445c <HAL_RCC_OscConfig+0x86c>)
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	4a04      	ldr	r2, [pc, #16]	@ (800445c <HAL_RCC_OscConfig+0x86c>)
 800444c:	f043 0310 	orr.w	r3, r3, #16
 8004450:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3720      	adds	r7, #32
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	44020c00 	.word	0x44020c00

08004460 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e19e      	b.n	80047b2 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004474:	4b83      	ldr	r3, [pc, #524]	@ (8004684 <HAL_RCC_ClockConfig+0x224>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d910      	bls.n	80044a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004482:	4b80      	ldr	r3, [pc, #512]	@ (8004684 <HAL_RCC_ClockConfig+0x224>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 020f 	bic.w	r2, r3, #15
 800448a:	497e      	ldr	r1, [pc, #504]	@ (8004684 <HAL_RCC_ClockConfig+0x224>)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004492:	4b7c      	ldr	r3, [pc, #496]	@ (8004684 <HAL_RCC_ClockConfig+0x224>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e186      	b.n	80047b2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d012      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	4b74      	ldr	r3, [pc, #464]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	0a1b      	lsrs	r3, r3, #8
 80044ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044be:	429a      	cmp	r2, r3
 80044c0:	d909      	bls.n	80044d6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80044c2:	4b71      	ldr	r3, [pc, #452]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	496d      	ldr	r1, [pc, #436]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d012      	beq.n	8004508 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	4b68      	ldr	r3, [pc, #416]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	091b      	lsrs	r3, r3, #4
 80044ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d909      	bls.n	8004508 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80044f4:	4b64      	ldr	r3, [pc, #400]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	4961      	ldr	r1, [pc, #388]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 8004504:	4313      	orrs	r3, r2
 8004506:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d010      	beq.n	8004536 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	4b5b      	ldr	r3, [pc, #364]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004520:	429a      	cmp	r2, r3
 8004522:	d908      	bls.n	8004536 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004524:	4b58      	ldr	r3, [pc, #352]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	4955      	ldr	r1, [pc, #340]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 8004532:	4313      	orrs	r3, r2
 8004534:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d010      	beq.n	8004564 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	4b50      	ldr	r3, [pc, #320]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	429a      	cmp	r2, r3
 8004550:	d908      	bls.n	8004564 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004552:	4b4d      	ldr	r3, [pc, #308]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	f023 020f 	bic.w	r2, r3, #15
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	494a      	ldr	r1, [pc, #296]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 8004560:	4313      	orrs	r3, r2
 8004562:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 8093 	beq.w	8004698 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b03      	cmp	r3, #3
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800457a:	4b43      	ldr	r3, [pc, #268]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d121      	bne.n	80045ca <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e113      	b.n	80047b2 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d107      	bne.n	80045a2 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004592:	4b3d      	ldr	r3, [pc, #244]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d115      	bne.n	80045ca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e107      	b.n	80047b2 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80045aa:	4b37      	ldr	r3, [pc, #220]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d109      	bne.n	80045ca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0fb      	b.n	80047b2 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045ba:	4b33      	ldr	r3, [pc, #204]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0f3      	b.n	80047b2 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80045ca:	4b2f      	ldr	r3, [pc, #188]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f023 0203 	bic.w	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	492c      	ldr	r1, [pc, #176]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045dc:	f7fd f920 	bl	8001820 <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d112      	bne.n	8004610 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80045ec:	f7fd f918 	bl	8001820 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e0d7      	b.n	80047b2 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004602:	4b21      	ldr	r3, [pc, #132]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	f003 0318 	and.w	r3, r3, #24
 800460a:	2b18      	cmp	r3, #24
 800460c:	d1ee      	bne.n	80045ec <HAL_RCC_ClockConfig+0x18c>
 800460e:	e043      	b.n	8004698 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2b02      	cmp	r3, #2
 8004616:	d112      	bne.n	800463e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004618:	e00a      	b.n	8004630 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800461a:	f7fd f901 	bl	8001820 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0c0      	b.n	80047b2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004630:	4b15      	ldr	r3, [pc, #84]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	f003 0318 	and.w	r3, r3, #24
 8004638:	2b10      	cmp	r3, #16
 800463a:	d1ee      	bne.n	800461a <HAL_RCC_ClockConfig+0x1ba>
 800463c:	e02c      	b.n	8004698 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d122      	bne.n	800468c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004646:	e00a      	b.n	800465e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004648:	f7fd f8ea 	bl	8001820 <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004656:	4293      	cmp	r3, r2
 8004658:	d901      	bls.n	800465e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e0a9      	b.n	80047b2 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800465e:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <HAL_RCC_ClockConfig+0x228>)
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f003 0318 	and.w	r3, r3, #24
 8004666:	2b08      	cmp	r3, #8
 8004668:	d1ee      	bne.n	8004648 <HAL_RCC_ClockConfig+0x1e8>
 800466a:	e015      	b.n	8004698 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800466c:	f7fd f8d8 	bl	8001820 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d906      	bls.n	800468c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e097      	b.n	80047b2 <HAL_RCC_ClockConfig+0x352>
 8004682:	bf00      	nop
 8004684:	40022000 	.word	0x40022000
 8004688:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800468c:	4b4b      	ldr	r3, [pc, #300]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f003 0318 	and.w	r3, r3, #24
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e9      	bne.n	800466c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d010      	beq.n	80046c6 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	4b44      	ldr	r3, [pc, #272]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	f003 030f 	and.w	r3, r3, #15
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d208      	bcs.n	80046c6 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80046b4:	4b41      	ldr	r3, [pc, #260]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	f023 020f 	bic.w	r2, r3, #15
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	493e      	ldr	r1, [pc, #248]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046c6:	4b3e      	ldr	r3, [pc, #248]	@ (80047c0 <HAL_RCC_ClockConfig+0x360>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d210      	bcs.n	80046f6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d4:	4b3a      	ldr	r3, [pc, #232]	@ (80047c0 <HAL_RCC_ClockConfig+0x360>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f023 020f 	bic.w	r2, r3, #15
 80046dc:	4938      	ldr	r1, [pc, #224]	@ (80047c0 <HAL_RCC_ClockConfig+0x360>)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e4:	4b36      	ldr	r3, [pc, #216]	@ (80047c0 <HAL_RCC_ClockConfig+0x360>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d001      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e05d      	b.n	80047b2 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d010      	beq.n	8004724 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68da      	ldr	r2, [r3, #12]
 8004706:	4b2d      	ldr	r3, [pc, #180]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800470e:	429a      	cmp	r2, r3
 8004710:	d208      	bcs.n	8004724 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004712:	4b2a      	ldr	r3, [pc, #168]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	4927      	ldr	r1, [pc, #156]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 8004720:	4313      	orrs	r3, r2
 8004722:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d012      	beq.n	8004756 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691a      	ldr	r2, [r3, #16]
 8004734:	4b21      	ldr	r3, [pc, #132]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 8004736:	6a1b      	ldr	r3, [r3, #32]
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800473e:	429a      	cmp	r2, r3
 8004740:	d209      	bcs.n	8004756 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004742:	4b1e      	ldr	r3, [pc, #120]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	491a      	ldr	r1, [pc, #104]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 8004752:	4313      	orrs	r3, r2
 8004754:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	d012      	beq.n	8004788 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	4b15      	ldr	r3, [pc, #84]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004770:	429a      	cmp	r2, r3
 8004772:	d209      	bcs.n	8004788 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004774:	4b11      	ldr	r3, [pc, #68]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	695b      	ldr	r3, [r3, #20]
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	490e      	ldr	r1, [pc, #56]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 8004784:	4313      	orrs	r3, r2
 8004786:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004788:	f000 f822 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b0b      	ldr	r3, [pc, #44]	@ (80047bc <HAL_RCC_ClockConfig+0x35c>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	490b      	ldr	r1, [pc, #44]	@ (80047c4 <HAL_RCC_ClockConfig+0x364>)
 8004798:	5ccb      	ldrb	r3, [r1, r3]
 800479a:	fa22 f303 	lsr.w	r3, r2, r3
 800479e:	4a0a      	ldr	r2, [pc, #40]	@ (80047c8 <HAL_RCC_ClockConfig+0x368>)
 80047a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80047a2:	4b0a      	ldr	r3, [pc, #40]	@ (80047cc <HAL_RCC_ClockConfig+0x36c>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fc ffb0 	bl	800170c <HAL_InitTick>
 80047ac:	4603      	mov	r3, r0
 80047ae:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 80047b0:	7afb      	ldrb	r3, [r7, #11]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	44020c00 	.word	0x44020c00
 80047c0:	40022000 	.word	0x40022000
 80047c4:	0800f970 	.word	0x0800f970
 80047c8:	20000000 	.word	0x20000000
 80047cc:	20000020 	.word	0x20000020

080047d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	@ 0x24
 80047d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80047d6:	4b8c      	ldr	r3, [pc, #560]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f003 0318 	and.w	r3, r3, #24
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d102      	bne.n	80047e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80047e2:	4b8a      	ldr	r3, [pc, #552]	@ (8004a0c <HAL_RCC_GetSysClockFreq+0x23c>)
 80047e4:	61fb      	str	r3, [r7, #28]
 80047e6:	e107      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047e8:	4b87      	ldr	r3, [pc, #540]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	f003 0318 	and.w	r3, r3, #24
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d112      	bne.n	800481a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80047f4:	4b84      	ldr	r3, [pc, #528]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d009      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004800:	4b81      	ldr	r3, [pc, #516]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	08db      	lsrs	r3, r3, #3
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	4a81      	ldr	r2, [pc, #516]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0x240>)
 800480c:	fa22 f303 	lsr.w	r3, r2, r3
 8004810:	61fb      	str	r3, [r7, #28]
 8004812:	e0f1      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004814:	4b7e      	ldr	r3, [pc, #504]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0x240>)
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	e0ee      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800481a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f003 0318 	and.w	r3, r3, #24
 8004822:	2b10      	cmp	r3, #16
 8004824:	d102      	bne.n	800482c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004826:	4b7b      	ldr	r3, [pc, #492]	@ (8004a14 <HAL_RCC_GetSysClockFreq+0x244>)
 8004828:	61fb      	str	r3, [r7, #28]
 800482a:	e0e5      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800482c:	4b76      	ldr	r3, [pc, #472]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f003 0318 	and.w	r3, r3, #24
 8004834:	2b18      	cmp	r3, #24
 8004836:	f040 80dd 	bne.w	80049f4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800483a:	4b73      	ldr	r3, [pc, #460]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 800483c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483e:	f003 0303 	and.w	r3, r3, #3
 8004842:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004844:	4b70      	ldr	r3, [pc, #448]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 8004846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004848:	0a1b      	lsrs	r3, r3, #8
 800484a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800484e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004850:	4b6d      	ldr	r3, [pc, #436]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 8004852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800485c:	4b6a      	ldr	r3, [pc, #424]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 800485e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004860:	08db      	lsrs	r3, r3, #3
 8004862:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	fb02 f303 	mul.w	r3, r2, r3
 800486c:	ee07 3a90 	vmov	s15, r3
 8004870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004874:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 80b7 	beq.w	80049ee <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d003      	beq.n	800488e <HAL_RCC_GetSysClockFreq+0xbe>
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d056      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x16a>
 800488c:	e077      	b.n	800497e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800488e:	4b5e      	ldr	r3, [pc, #376]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0320 	and.w	r3, r3, #32
 8004896:	2b00      	cmp	r3, #0
 8004898:	d02d      	beq.n	80048f6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800489a:	4b5b      	ldr	r3, [pc, #364]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	08db      	lsrs	r3, r3, #3
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	4a5a      	ldr	r2, [pc, #360]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0x240>)
 80048a6:	fa22 f303 	lsr.w	r3, r2, r3
 80048aa:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	ee07 3a90 	vmov	s15, r3
 80048bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c4:	4b50      	ldr	r3, [pc, #320]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 80048c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048cc:	ee07 3a90 	vmov	s15, r3
 80048d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80048d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80048d8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004a18 <HAL_RCC_GetSysClockFreq+0x248>
 80048dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80048e4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80048f4:	e065      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	ee07 3a90 	vmov	s15, r3
 80048fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004900:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004a1c <HAL_RCC_GetSysClockFreq+0x24c>
 8004904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004908:	4b3f      	ldr	r3, [pc, #252]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 800490a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800490c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004910:	ee07 3a90 	vmov	s15, r3
 8004914:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004918:	ed97 6a02 	vldr	s12, [r7, #8]
 800491c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004a18 <HAL_RCC_GetSysClockFreq+0x248>
 8004920:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004924:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004928:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800492c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004934:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004938:	e043      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004944:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004a20 <HAL_RCC_GetSysClockFreq+0x250>
 8004948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494c:	4b2e      	ldr	r3, [pc, #184]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 800494e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800495c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004960:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004a18 <HAL_RCC_GetSysClockFreq+0x248>
 8004964:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004968:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800496c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004970:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004978:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800497c:	e021      	b.n	80049c2 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004988:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a24 <HAL_RCC_GetSysClockFreq+0x254>
 800498c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004990:	4b1d      	ldr	r3, [pc, #116]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 8004992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80049a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80049a4:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004a18 <HAL_RCC_GetSysClockFreq+0x248>
 80049a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80049b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049bc:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 80049c0:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80049c2:	4b11      	ldr	r3, [pc, #68]	@ (8004a08 <HAL_RCC_GetSysClockFreq+0x238>)
 80049c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c6:	0a5b      	lsrs	r3, r3, #9
 80049c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049cc:	3301      	adds	r3, #1
 80049ce:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049da:	edd7 6a06 	vldr	s13, [r7, #24]
 80049de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e6:	ee17 3a90 	vmov	r3, s15
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	e004      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	e001      	b.n	80049f8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80049f4:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <HAL_RCC_GetSysClockFreq+0x240>)
 80049f6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80049f8:	69fb      	ldr	r3, [r7, #28]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3724      	adds	r7, #36	@ 0x24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	44020c00 	.word	0x44020c00
 8004a0c:	003d0900 	.word	0x003d0900
 8004a10:	03d09000 	.word	0x03d09000
 8004a14:	007a1200 	.word	0x007a1200
 8004a18:	46000000 	.word	0x46000000
 8004a1c:	4c742400 	.word	0x4c742400
 8004a20:	4af42400 	.word	0x4af42400
 8004a24:	4a742400 	.word	0x4a742400

08004a28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004a2c:	f7ff fed0 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 8004a30:	4602      	mov	r2, r0
 8004a32:	4b08      	ldr	r3, [pc, #32]	@ (8004a54 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004a34:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004a36:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004a3a:	4907      	ldr	r1, [pc, #28]	@ (8004a58 <HAL_RCC_GetHCLKFreq+0x30>)
 8004a3c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004a3e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004a42:	fa22 f303 	lsr.w	r3, r2, r3
 8004a46:	4a05      	ldr	r2, [pc, #20]	@ (8004a5c <HAL_RCC_GetHCLKFreq+0x34>)
 8004a48:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004a4a:	4b04      	ldr	r3, [pc, #16]	@ (8004a5c <HAL_RCC_GetHCLKFreq+0x34>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	44020c00 	.word	0x44020c00
 8004a58:	0800f970 	.word	0x0800f970
 8004a5c:	20000000 	.word	0x20000000

08004a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004a64:	f7ff ffe0 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	f003 0307 	and.w	r3, r3, #7
 8004a74:	4904      	ldr	r1, [pc, #16]	@ (8004a88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004a76:	5ccb      	ldrb	r3, [r1, r3]
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	44020c00 	.word	0x44020c00
 8004a88:	0800f980 	.word	0x0800f980

08004a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004a90:	f7ff ffca 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004a94:	4602      	mov	r2, r0
 8004a96:	4b06      	ldr	r3, [pc, #24]	@ (8004ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a98:	6a1b      	ldr	r3, [r3, #32]
 8004a9a:	0a1b      	lsrs	r3, r3, #8
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	4904      	ldr	r1, [pc, #16]	@ (8004ab4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004aa2:	5ccb      	ldrb	r3, [r1, r3]
 8004aa4:	f003 031f 	and.w	r3, r3, #31
 8004aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	44020c00 	.word	0x44020c00
 8004ab4:	0800f980 	.word	0x0800f980

08004ab8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004abc:	f7ff ffb4 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	4b06      	ldr	r3, [pc, #24]	@ (8004adc <HAL_RCC_GetPCLK3Freq+0x24>)
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	0b1b      	lsrs	r3, r3, #12
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	4904      	ldr	r1, [pc, #16]	@ (8004ae0 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004ace:	5ccb      	ldrb	r3, [r1, r3]
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	44020c00 	.word	0x44020c00
 8004ae0:	0800f980 	.word	0x0800f980

08004ae4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae8:	b0d8      	sub	sp, #352	@ 0x160
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004af6:	2300      	movs	r3, #0
 8004af8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b04:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004b08:	2500      	movs	r5, #0
 8004b0a:	ea54 0305 	orrs.w	r3, r4, r5
 8004b0e:	d00b      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004b10:	4bcd      	ldr	r3, [pc, #820]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b16:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004b1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b20:	4ac9      	ldr	r2, [pc, #804]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004b22:	430b      	orrs	r3, r1
 8004b24:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f002 0801 	and.w	r8, r2, #1
 8004b34:	f04f 0900 	mov.w	r9, #0
 8004b38:	ea58 0309 	orrs.w	r3, r8, r9
 8004b3c:	d042      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004b3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b44:	2b05      	cmp	r3, #5
 8004b46:	d823      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004b48:	a201      	add	r2, pc, #4	@ (adr r2, 8004b50 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4e:	bf00      	nop
 8004b50:	08004b99 	.word	0x08004b99
 8004b54:	08004b69 	.word	0x08004b69
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004b99 	.word	0x08004b99
 8004b60:	08004b99 	.word	0x08004b99
 8004b64:	08004b99 	.word	0x08004b99
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f004 fee0 	bl	8009934 <RCCEx_PLL2_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004b7a:	e00e      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004b80:	3330      	adds	r3, #48	@ 0x30
 8004b82:	4618      	mov	r0, r3
 8004b84:	f004 ff6e 	bl	8009a64 <RCCEx_PLL3_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004b8e:	e004      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004b96:	e000      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b9a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004ba2:	4ba9      	ldr	r3, [pc, #676]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ba4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ba8:	f023 0107 	bic.w	r1, r3, #7
 8004bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bb2:	4aa5      	ldr	r2, [pc, #660]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004bba:	e003      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004bc0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bc4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bcc:	f002 0a02 	and.w	sl, r2, #2
 8004bd0:	f04f 0b00 	mov.w	fp, #0
 8004bd4:	ea5a 030b 	orrs.w	r3, sl, fp
 8004bd8:	f000 8088 	beq.w	8004cec <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004bdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be2:	2b28      	cmp	r3, #40	@ 0x28
 8004be4:	d868      	bhi.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004be6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bec <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bec:	08004cc1 	.word	0x08004cc1
 8004bf0:	08004cb9 	.word	0x08004cb9
 8004bf4:	08004cb9 	.word	0x08004cb9
 8004bf8:	08004cb9 	.word	0x08004cb9
 8004bfc:	08004cb9 	.word	0x08004cb9
 8004c00:	08004cb9 	.word	0x08004cb9
 8004c04:	08004cb9 	.word	0x08004cb9
 8004c08:	08004cb9 	.word	0x08004cb9
 8004c0c:	08004c91 	.word	0x08004c91
 8004c10:	08004cb9 	.word	0x08004cb9
 8004c14:	08004cb9 	.word	0x08004cb9
 8004c18:	08004cb9 	.word	0x08004cb9
 8004c1c:	08004cb9 	.word	0x08004cb9
 8004c20:	08004cb9 	.word	0x08004cb9
 8004c24:	08004cb9 	.word	0x08004cb9
 8004c28:	08004cb9 	.word	0x08004cb9
 8004c2c:	08004ca5 	.word	0x08004ca5
 8004c30:	08004cb9 	.word	0x08004cb9
 8004c34:	08004cb9 	.word	0x08004cb9
 8004c38:	08004cb9 	.word	0x08004cb9
 8004c3c:	08004cb9 	.word	0x08004cb9
 8004c40:	08004cb9 	.word	0x08004cb9
 8004c44:	08004cb9 	.word	0x08004cb9
 8004c48:	08004cb9 	.word	0x08004cb9
 8004c4c:	08004cc1 	.word	0x08004cc1
 8004c50:	08004cb9 	.word	0x08004cb9
 8004c54:	08004cb9 	.word	0x08004cb9
 8004c58:	08004cb9 	.word	0x08004cb9
 8004c5c:	08004cb9 	.word	0x08004cb9
 8004c60:	08004cb9 	.word	0x08004cb9
 8004c64:	08004cb9 	.word	0x08004cb9
 8004c68:	08004cb9 	.word	0x08004cb9
 8004c6c:	08004cc1 	.word	0x08004cc1
 8004c70:	08004cb9 	.word	0x08004cb9
 8004c74:	08004cb9 	.word	0x08004cb9
 8004c78:	08004cb9 	.word	0x08004cb9
 8004c7c:	08004cb9 	.word	0x08004cb9
 8004c80:	08004cb9 	.word	0x08004cb9
 8004c84:	08004cb9 	.word	0x08004cb9
 8004c88:	08004cb9 	.word	0x08004cb9
 8004c8c:	08004cc1 	.word	0x08004cc1
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c94:	3308      	adds	r3, #8
 8004c96:	4618      	mov	r0, r3
 8004c98:	f004 fe4c 	bl	8009934 <RCCEx_PLL2_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004ca2:	e00e      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ca8:	3330      	adds	r3, #48	@ 0x30
 8004caa:	4618      	mov	r0, r3
 8004cac:	f004 feda 	bl	8009a64 <RCCEx_PLL3_Config>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004cb6:	e004      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004cbe:	e000      	b.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004cca:	4b5f      	ldr	r3, [pc, #380]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004ccc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004cd0:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004cd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cda:	4a5b      	ldr	r2, [pc, #364]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004cdc:	430b      	orrs	r3, r1
 8004cde:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004ce2:	e003      	b.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ce8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f002 0304 	and.w	r3, r2, #4
 8004cf8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004d02:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8004d06:	460b      	mov	r3, r1
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	d04e      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004d0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d12:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004d16:	d02c      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004d18:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004d1c:	d825      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d22:	d028      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d28:	d81f      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d2c:	d025      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004d2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d30:	d81b      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d32:	2b80      	cmp	r3, #128	@ 0x80
 8004d34:	d00f      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004d36:	2b80      	cmp	r3, #128	@ 0x80
 8004d38:	d817      	bhi.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01f      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004d3e:	2b40      	cmp	r3, #64	@ 0x40
 8004d40:	d113      	bne.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d46:	3308      	adds	r3, #8
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f004 fdf3 	bl	8009934 <RCCEx_PLL2_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004d54:	e014      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004d56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d5a:	3330      	adds	r3, #48	@ 0x30
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f004 fe81 	bl	8009a64 <RCCEx_PLL3_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004d68:	e00a      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d70:	e006      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004d72:	bf00      	nop
 8004d74:	e004      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004d76:	bf00      	nop
 8004d78:	e002      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004d7a:	bf00      	nop
 8004d7c:	e000      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d80:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10c      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004d88:	4b2f      	ldr	r3, [pc, #188]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d8e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004d92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d98:	4a2b      	ldr	r2, [pc, #172]	@ (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004da0:	e003      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004da6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004daa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f002 0308 	and.w	r3, r2, #8
 8004db6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004dc0:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	d056      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004dca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004dce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004dd0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004dd4:	d031      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004dd6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004dda:	d82a      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004de0:	d02d      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004de2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004de6:	d824      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004de8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004dec:	d029      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004dee:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004df2:	d81e      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004df4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df8:	d011      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004dfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dfe:	d818      	bhi.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d023      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004e04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e08:	d113      	bne.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e0e:	3308      	adds	r3, #8
 8004e10:	4618      	mov	r0, r3
 8004e12:	f004 fd8f 	bl	8009934 <RCCEx_PLL2_Config>
 8004e16:	4603      	mov	r3, r0
 8004e18:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004e1c:	e017      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e22:	3330      	adds	r3, #48	@ 0x30
 8004e24:	4618      	mov	r0, r3
 8004e26:	f004 fe1d 	bl	8009a64 <RCCEx_PLL3_Config>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004e30:	e00d      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e38:	e009      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004e3a:	bf00      	nop
 8004e3c:	e007      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004e3e:	bf00      	nop
 8004e40:	e005      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004e42:	bf00      	nop
 8004e44:	e003      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004e46:	bf00      	nop
 8004e48:	44020c00 	.word	0x44020c00
        break;
 8004e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e4e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10c      	bne.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004e56:	4bbb      	ldr	r3, [pc, #748]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004e58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e5c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004e60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e66:	4ab7      	ldr	r2, [pc, #732]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e6e:	e003      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e70:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e74:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	f002 0310 	and.w	r3, r2, #16
 8004e84:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004e88:	2300      	movs	r3, #0
 8004e8a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004e8e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8004e92:	460b      	mov	r3, r1
 8004e94:	4313      	orrs	r3, r2
 8004e96:	d053      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8004e98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e9e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004ea2:	d031      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8004ea4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004ea8:	d82a      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004eaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eae:	d02d      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8004eb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eb4:	d824      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004eb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004eba:	d029      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8004ebc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004ec0:	d81e      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ec6:	d011      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004ec8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ecc:	d818      	bhi.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d020      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8004ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ed6:	d113      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004ed8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004edc:	3308      	adds	r3, #8
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f004 fd28 	bl	8009934 <RCCEx_PLL2_Config>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004eea:	e014      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004eec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ef0:	3330      	adds	r3, #48	@ 0x30
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f004 fdb6 	bl	8009a64 <RCCEx_PLL3_Config>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8004efe:	e00a      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004f06:	e006      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f08:	bf00      	nop
 8004f0a:	e004      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f0c:	bf00      	nop
 8004f0e:	e002      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f10:	bf00      	nop
 8004f12:	e000      	b.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8004f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004f1e:	4b89      	ldr	r3, [pc, #548]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004f20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004f24:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004f28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f2e:	4a85      	ldr	r2, [pc, #532]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004f30:	430b      	orrs	r3, r1
 8004f32:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004f36:	e003      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f38:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f3c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f002 0320 	and.w	r3, r2, #32
 8004f4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8004f50:	2300      	movs	r3, #0
 8004f52:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8004f56:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	d053      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8004f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f66:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004f6a:	d031      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8004f6c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8004f70:	d82a      	bhi.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004f72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f76:	d02d      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004f78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f7c:	d824      	bhi.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004f7e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004f82:	d029      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8004f84:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8004f88:	d81e      	bhi.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004f8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f8e:	d011      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f94:	d818      	bhi.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d020      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8004f9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f9e:	d113      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f004 fcc4 	bl	8009934 <RCCEx_PLL2_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004fb2:	e014      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004fb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fb8:	3330      	adds	r3, #48	@ 0x30
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f004 fd52 	bl	8009a64 <RCCEx_PLL3_Config>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8004fc6:	e00a      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004fce:	e006      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004fd0:	bf00      	nop
 8004fd2:	e004      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004fd4:	bf00      	nop
 8004fd6:	e002      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004fd8:	bf00      	nop
 8004fda:	e000      	b.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8004fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fde:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8004fe6:	4b57      	ldr	r3, [pc, #348]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004fe8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004fec:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8004ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	4a53      	ldr	r2, [pc, #332]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004ffe:	e003      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005000:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005004:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005008:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005014:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005018:	2300      	movs	r3, #0
 800501a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800501e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8005022:	460b      	mov	r3, r1
 8005024:	4313      	orrs	r3, r2
 8005026:	d053      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005028:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800502c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800502e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005032:	d031      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8005034:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005038:	d82a      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800503a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800503e:	d02d      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005040:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005044:	d824      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005046:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800504a:	d029      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800504c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005050:	d81e      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005052:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005056:	d011      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8005058:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800505c:	d818      	bhi.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d020      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005062:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005066:	d113      	bne.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005068:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800506c:	3308      	adds	r3, #8
 800506e:	4618      	mov	r0, r3
 8005070:	f004 fc60 	bl	8009934 <RCCEx_PLL2_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800507a:	e014      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800507c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005080:	3330      	adds	r3, #48	@ 0x30
 8005082:	4618      	mov	r0, r3
 8005084:	f004 fcee 	bl	8009a64 <RCCEx_PLL3_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800508e:	e00a      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005096:	e006      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005098:	bf00      	nop
 800509a:	e004      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800509c:	bf00      	nop
 800509e:	e002      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80050a0:	bf00      	nop
 80050a2:	e000      	b.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80050a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10c      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80050ae:	4b25      	ldr	r3, [pc, #148]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80050b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80050b4:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80050b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050be:	4a21      	ldr	r2, [pc, #132]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80050c0:	430b      	orrs	r3, r1
 80050c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80050c6:	e003      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80050dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80050e0:	2300      	movs	r3, #0
 80050e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80050e6:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80050ea:	460b      	mov	r3, r1
 80050ec:	4313      	orrs	r3, r2
 80050ee:	d055      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80050f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80050f6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80050fa:	d033      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80050fc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005100:	d82c      	bhi.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005102:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005106:	d02f      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005108:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800510c:	d826      	bhi.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x678>
 800510e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005112:	d02b      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005114:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005118:	d820      	bhi.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x678>
 800511a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800511e:	d013      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005120:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005124:	d81a      	bhi.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d022      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800512a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800512e:	d115      	bne.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005130:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005134:	3308      	adds	r3, #8
 8005136:	4618      	mov	r0, r3
 8005138:	f004 fbfc 	bl	8009934 <RCCEx_PLL2_Config>
 800513c:	4603      	mov	r3, r0
 800513e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8005142:	e016      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8005144:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005148:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800514c:	3330      	adds	r3, #48	@ 0x30
 800514e:	4618      	mov	r0, r3
 8005150:	f004 fc88 	bl	8009a64 <RCCEx_PLL3_Config>
 8005154:	4603      	mov	r3, r0
 8005156:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800515a:	e00a      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005162:	e006      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005164:	bf00      	nop
 8005166:	e004      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005168:	bf00      	nop
 800516a:	e002      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800516c:	bf00      	nop
 800516e:	e000      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8005170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005172:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10c      	bne.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800517a:	4bbb      	ldr	r3, [pc, #748]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800517c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005180:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005184:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005188:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800518a:	4ab7      	ldr	r2, [pc, #732]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800518c:	430b      	orrs	r3, r1
 800518e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005192:	e003      	b.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005194:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005198:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800519c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80051a8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80051ac:	2300      	movs	r3, #0
 80051ae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80051b2:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80051b6:	460b      	mov	r3, r1
 80051b8:	4313      	orrs	r3, r2
 80051ba:	d053      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80051bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051c2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80051c6:	d031      	beq.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x748>
 80051c8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80051cc:	d82a      	bhi.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80051ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051d2:	d02d      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80051d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051d8:	d824      	bhi.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80051da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051de:	d029      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80051e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80051e4:	d81e      	bhi.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80051e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051ea:	d011      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80051ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051f0:	d818      	bhi.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d020      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80051f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051fa:	d113      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005200:	3308      	adds	r3, #8
 8005202:	4618      	mov	r0, r3
 8005204:	f004 fb96 	bl	8009934 <RCCEx_PLL2_Config>
 8005208:	4603      	mov	r3, r0
 800520a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800520e:	e014      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005210:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005214:	3330      	adds	r3, #48	@ 0x30
 8005216:	4618      	mov	r0, r3
 8005218:	f004 fc24 	bl	8009a64 <RCCEx_PLL3_Config>
 800521c:	4603      	mov	r3, r0
 800521e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005222:	e00a      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800522a:	e006      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800522c:	bf00      	nop
 800522e:	e004      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005230:	bf00      	nop
 8005232:	e002      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005234:	bf00      	nop
 8005236:	e000      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800523a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10c      	bne.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005242:	4b89      	ldr	r3, [pc, #548]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005244:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005248:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800524c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005252:	4a85      	ldr	r2, [pc, #532]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005254:	430b      	orrs	r3, r1
 8005256:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800525a:	e003      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800525c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005260:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005264:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005270:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005274:	2300      	movs	r3, #0
 8005276:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800527a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800527e:	460b      	mov	r3, r1
 8005280:	4313      	orrs	r3, r2
 8005282:	d055      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8005284:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005288:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800528c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005290:	d031      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005292:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005296:	d82a      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005298:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800529c:	d02d      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x816>
 800529e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052a2:	d824      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80052a4:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80052a8:	d029      	beq.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80052aa:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80052ae:	d81e      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80052b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052b4:	d011      	beq.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80052b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052ba:	d818      	bhi.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d020      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80052c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052c4:	d113      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052ca:	3308      	adds	r3, #8
 80052cc:	4618      	mov	r0, r3
 80052ce:	f004 fb31 	bl	8009934 <RCCEx_PLL2_Config>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80052d8:	e014      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052de:	3330      	adds	r3, #48	@ 0x30
 80052e0:	4618      	mov	r0, r3
 80052e2:	f004 fbbf 	bl	8009a64 <RCCEx_PLL3_Config>
 80052e6:	4603      	mov	r3, r0
 80052e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80052ec:	e00a      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80052f4:	e006      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80052f6:	bf00      	nop
 80052f8:	e004      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80052fa:	bf00      	nop
 80052fc:	e002      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005302:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005304:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10d      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800530c:	4b56      	ldr	r3, [pc, #344]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800530e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005312:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8005316:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800531a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800531e:	4a52      	ldr	r2, [pc, #328]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005320:	430b      	orrs	r3, r1
 8005322:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005326:	e003      	b.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005328:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800532c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005330:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800533c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005340:	2300      	movs	r3, #0
 8005342:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005346:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800534a:	460b      	mov	r3, r1
 800534c:	4313      	orrs	r3, r2
 800534e:	d044      	beq.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8005350:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005358:	2b05      	cmp	r3, #5
 800535a:	d823      	bhi.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800535c:	a201      	add	r2, pc, #4	@ (adr r2, 8005364 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800535e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005362:	bf00      	nop
 8005364:	080053ad 	.word	0x080053ad
 8005368:	0800537d 	.word	0x0800537d
 800536c:	08005391 	.word	0x08005391
 8005370:	080053ad 	.word	0x080053ad
 8005374:	080053ad 	.word	0x080053ad
 8005378:	080053ad 	.word	0x080053ad
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800537c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005380:	3308      	adds	r3, #8
 8005382:	4618      	mov	r0, r3
 8005384:	f004 fad6 	bl	8009934 <RCCEx_PLL2_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800538e:	e00e      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005390:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005394:	3330      	adds	r3, #48	@ 0x30
 8005396:	4618      	mov	r0, r3
 8005398:	f004 fb64 	bl	8009a64 <RCCEx_PLL3_Config>
 800539c:	4603      	mov	r3, r0
 800539e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80053a2:	e004      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80053aa:	e000      	b.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80053ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10d      	bne.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80053b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80053b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80053bc:	f023 0107 	bic.w	r1, r3, #7
 80053c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053c8:	4a27      	ldr	r2, [pc, #156]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80053ca:	430b      	orrs	r3, r1
 80053cc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80053d0:	e003      	b.n	80053da <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80053da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80053e6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80053ea:	2300      	movs	r3, #0
 80053ec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80053f0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80053f4:	460b      	mov	r3, r1
 80053f6:	4313      	orrs	r3, r2
 80053f8:	d04f      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80053fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005402:	2b50      	cmp	r3, #80	@ 0x50
 8005404:	d029      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005406:	2b50      	cmp	r3, #80	@ 0x50
 8005408:	d823      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800540a:	2b40      	cmp	r3, #64	@ 0x40
 800540c:	d027      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800540e:	2b40      	cmp	r3, #64	@ 0x40
 8005410:	d81f      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005412:	2b30      	cmp	r3, #48	@ 0x30
 8005414:	d025      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005416:	2b30      	cmp	r3, #48	@ 0x30
 8005418:	d81b      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800541a:	2b20      	cmp	r3, #32
 800541c:	d00f      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800541e:	2b20      	cmp	r3, #32
 8005420:	d817      	bhi.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005422:	2b00      	cmp	r3, #0
 8005424:	d022      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005426:	2b10      	cmp	r3, #16
 8005428:	d113      	bne.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800542a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800542e:	3308      	adds	r3, #8
 8005430:	4618      	mov	r0, r3
 8005432:	f004 fa7f 	bl	8009934 <RCCEx_PLL2_Config>
 8005436:	4603      	mov	r3, r0
 8005438:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800543c:	e017      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800543e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005442:	3330      	adds	r3, #48	@ 0x30
 8005444:	4618      	mov	r0, r3
 8005446:	f004 fb0d 	bl	8009a64 <RCCEx_PLL3_Config>
 800544a:	4603      	mov	r3, r0
 800544c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005450:	e00d      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005458:	e009      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800545a:	bf00      	nop
 800545c:	e007      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800545e:	bf00      	nop
 8005460:	e005      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005462:	bf00      	nop
 8005464:	e003      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8005466:	bf00      	nop
 8005468:	44020c00 	.word	0x44020c00
        break;
 800546c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800546e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10d      	bne.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8005476:	4baf      	ldr	r3, [pc, #700]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005478:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800547c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005480:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005488:	4aaa      	ldr	r2, [pc, #680]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800548a:	430b      	orrs	r3, r1
 800548c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005490:	e003      	b.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005492:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005496:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800549a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80054a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80054aa:	2300      	movs	r3, #0
 80054ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80054b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4313      	orrs	r3, r2
 80054b8:	d055      	beq.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80054ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054c2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80054c6:	d031      	beq.n	800552c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80054c8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80054cc:	d82a      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80054ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054d2:	d02d      	beq.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80054d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80054d8:	d824      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80054da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054de:	d029      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80054e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80054e4:	d81e      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80054e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054ea:	d011      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80054ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80054f0:	d818      	bhi.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d020      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80054f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054fa:	d113      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005500:	3308      	adds	r3, #8
 8005502:	4618      	mov	r0, r3
 8005504:	f004 fa16 	bl	8009934 <RCCEx_PLL2_Config>
 8005508:	4603      	mov	r3, r0
 800550a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800550e:	e014      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005510:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005514:	3330      	adds	r3, #48	@ 0x30
 8005516:	4618      	mov	r0, r3
 8005518:	f004 faa4 	bl	8009a64 <RCCEx_PLL3_Config>
 800551c:	4603      	mov	r3, r0
 800551e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005522:	e00a      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800552a:	e006      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800552c:	bf00      	nop
 800552e:	e004      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005530:	bf00      	nop
 8005532:	e002      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005534:	bf00      	nop
 8005536:	e000      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800553a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10d      	bne.n	800555e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005542:	4b7c      	ldr	r3, [pc, #496]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005548:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800554c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005550:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005554:	4a77      	ldr	r2, [pc, #476]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005556:	430b      	orrs	r3, r1
 8005558:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800555c:	e003      	b.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800555e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005562:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005566:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800556a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005572:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005576:	2300      	movs	r3, #0
 8005578:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800557c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005580:	460b      	mov	r3, r1
 8005582:	4313      	orrs	r3, r2
 8005584:	d03d      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005586:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800558a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005592:	d01b      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005594:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005598:	d814      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800559a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800559e:	d017      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80055a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055a4:	d80e      	bhi.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d014      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80055aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ae:	d109      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055b4:	3330      	adds	r3, #48	@ 0x30
 80055b6:	4618      	mov	r0, r3
 80055b8:	f004 fa54 	bl	8009a64 <RCCEx_PLL3_Config>
 80055bc:	4603      	mov	r3, r0
 80055be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80055c2:	e008      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80055ca:	e004      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80055cc:	bf00      	nop
 80055ce:	e002      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80055d0:	bf00      	nop
 80055d2:	e000      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80055d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10d      	bne.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80055de:	4b55      	ldr	r3, [pc, #340]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80055e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80055e4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80055e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f0:	4a50      	ldr	r2, [pc, #320]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80055f2:	430b      	orrs	r3, r1
 80055f4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80055f8:	e003      	b.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005602:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800560e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005612:	2300      	movs	r3, #0
 8005614:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005618:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800561c:	460b      	mov	r3, r1
 800561e:	4313      	orrs	r3, r2
 8005620:	d03d      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005622:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800562a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800562e:	d01b      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005630:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005634:	d814      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005636:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800563a:	d017      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800563c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005640:	d80e      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005642:	2b00      	cmp	r3, #0
 8005644:	d014      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005646:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800564a:	d109      	bne.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800564c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005650:	3330      	adds	r3, #48	@ 0x30
 8005652:	4618      	mov	r0, r3
 8005654:	f004 fa06 	bl	8009a64 <RCCEx_PLL3_Config>
 8005658:	4603      	mov	r3, r0
 800565a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800565e:	e008      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005666:	e004      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005668:	bf00      	nop
 800566a:	e002      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800566c:	bf00      	nop
 800566e:	e000      	b.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005672:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10d      	bne.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800567a:	4b2e      	ldr	r3, [pc, #184]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800567c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005680:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005684:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800568c:	4a29      	ldr	r2, [pc, #164]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800568e:	430b      	orrs	r3, r1
 8005690:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005694:	e003      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005696:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800569a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800569e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80056aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056ae:	2300      	movs	r3, #0
 80056b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80056b4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056b8:	460b      	mov	r3, r1
 80056ba:	4313      	orrs	r3, r2
 80056bc:	d040      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 80056be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056ca:	d01b      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 80056cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80056d0:	d814      	bhi.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80056d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056d6:	d017      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80056d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056dc:	d80e      	bhi.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d014      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80056e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056e6:	d109      	bne.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056ec:	3330      	adds	r3, #48	@ 0x30
 80056ee:	4618      	mov	r0, r3
 80056f0:	f004 f9b8 	bl	8009a64 <RCCEx_PLL3_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80056fa:	e008      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005702:	e004      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005704:	bf00      	nop
 8005706:	e002      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005708:	bf00      	nop
 800570a:	e000      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800570c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800570e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005712:	2b00      	cmp	r3, #0
 8005714:	d110      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005716:	4b07      	ldr	r3, [pc, #28]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005718:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800571c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005720:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005724:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005728:	4a02      	ldr	r2, [pc, #8]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800572a:	430b      	orrs	r3, r1
 800572c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005730:	e006      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005732:	bf00      	nop
 8005734:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005738:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800573c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005740:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	2100      	movs	r1, #0
 800574a:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800574e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005752:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005756:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800575a:	460b      	mov	r3, r1
 800575c:	4313      	orrs	r3, r2
 800575e:	d03d      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005760:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005764:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005768:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800576c:	d01b      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800576e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005772:	d814      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005774:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005778:	d017      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800577a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800577e:	d80e      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d014      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005788:	d109      	bne.n	800579e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800578a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800578e:	3330      	adds	r3, #48	@ 0x30
 8005790:	4618      	mov	r0, r3
 8005792:	f004 f967 	bl	8009a64 <RCCEx_PLL3_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800579c:	e008      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057a4:	e004      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80057a6:	bf00      	nop
 80057a8:	e002      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80057aa:	bf00      	nop
 80057ac:	e000      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 80057ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10d      	bne.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80057b8:	4bbe      	ldr	r3, [pc, #760]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80057ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057be:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80057c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057ca:	4aba      	ldr	r2, [pc, #744]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80057cc:	430b      	orrs	r3, r1
 80057ce:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80057d2:	e003      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80057dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80057e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057ec:	2300      	movs	r3, #0
 80057ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80057f6:	460b      	mov	r3, r1
 80057f8:	4313      	orrs	r3, r2
 80057fa:	d035      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80057fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005800:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005808:	d015      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800580a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800580e:	d80e      	bhi.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d012      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005818:	d109      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800581a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800581e:	3330      	adds	r3, #48	@ 0x30
 8005820:	4618      	mov	r0, r3
 8005822:	f004 f91f 	bl	8009a64 <RCCEx_PLL3_Config>
 8005826:	4603      	mov	r3, r0
 8005828:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800582c:	e006      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005834:	e002      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005836:	bf00      	nop
 8005838:	e000      	b.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800583a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800583c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10d      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005844:	4b9b      	ldr	r3, [pc, #620]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005846:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800584a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800584e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005852:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005856:	4a97      	ldr	r2, [pc, #604]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005858:	430b      	orrs	r3, r1
 800585a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800585e:	e003      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005860:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005864:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	2100      	movs	r1, #0
 8005872:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8005876:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800587a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800587e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005882:	460b      	mov	r3, r1
 8005884:	4313      	orrs	r3, r2
 8005886:	d00e      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005888:	4b8a      	ldr	r3, [pc, #552]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800588a:	69db      	ldr	r3, [r3, #28]
 800588c:	4a89      	ldr	r2, [pc, #548]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800588e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005892:	61d3      	str	r3, [r2, #28]
 8005894:	4b87      	ldr	r3, [pc, #540]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005896:	69d9      	ldr	r1, [r3, #28]
 8005898:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800589c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80058a0:	4a84      	ldr	r2, [pc, #528]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80058a2:	430b      	orrs	r3, r1
 80058a4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80058a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ae:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80058b2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80058b6:	2300      	movs	r3, #0
 80058b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80058bc:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80058c0:	460b      	mov	r3, r1
 80058c2:	4313      	orrs	r3, r2
 80058c4:	d055      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 80058c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80058ce:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80058d2:	d031      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80058d4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80058d8:	d82a      	bhi.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80058da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058de:	d02d      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80058e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058e4:	d824      	bhi.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80058e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058ea:	d029      	beq.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80058ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058f0:	d81e      	bhi.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80058f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058f6:	d011      	beq.n	800591c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80058f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058fc:	d818      	bhi.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d020      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005906:	d113      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005908:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800590c:	3308      	adds	r3, #8
 800590e:	4618      	mov	r0, r3
 8005910:	f004 f810 	bl	8009934 <RCCEx_PLL2_Config>
 8005914:	4603      	mov	r3, r0
 8005916:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800591a:	e014      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800591c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005920:	3330      	adds	r3, #48	@ 0x30
 8005922:	4618      	mov	r0, r3
 8005924:	f004 f89e 	bl	8009a64 <RCCEx_PLL3_Config>
 8005928:	4603      	mov	r3, r0
 800592a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 800592e:	e00a      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005936:	e006      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005938:	bf00      	nop
 800593a:	e004      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800593c:	bf00      	nop
 800593e:	e002      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005940:	bf00      	nop
 8005942:	e000      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005946:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800594a:	2b00      	cmp	r3, #0
 800594c:	d10d      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800594e:	4b59      	ldr	r3, [pc, #356]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005950:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005954:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005958:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800595c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005960:	4a54      	ldr	r2, [pc, #336]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005962:	430b      	orrs	r3, r1
 8005964:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005968:	e003      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800596e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005972:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800597e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005982:	2300      	movs	r3, #0
 8005984:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005988:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800598c:	460b      	mov	r3, r1
 800598e:	4313      	orrs	r3, r2
 8005990:	d055      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005992:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005996:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800599a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800599e:	d031      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 80059a0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80059a4:	d82a      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80059a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059aa:	d02d      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 80059ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059b0:	d824      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80059b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059b6:	d029      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 80059b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059bc:	d81e      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80059be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059c2:	d011      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 80059c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059c8:	d818      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d020      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d2:	d113      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059d8:	3308      	adds	r3, #8
 80059da:	4618      	mov	r0, r3
 80059dc:	f003 ffaa 	bl	8009934 <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80059e6:	e014      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059ec:	3330      	adds	r3, #48	@ 0x30
 80059ee:	4618      	mov	r0, r3
 80059f0:	f004 f838 	bl	8009a64 <RCCEx_PLL3_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80059fa:	e00a      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a02:	e006      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a04:	bf00      	nop
 8005a06:	e004      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a08:	bf00      	nop
 8005a0a:	e002      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a0c:	bf00      	nop
 8005a0e:	e000      	b.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10d      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005a1a:	4b26      	ldr	r3, [pc, #152]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005a1c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005a20:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a2c:	4a21      	ldr	r2, [pc, #132]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005a2e:	430b      	orrs	r3, r1
 8005a30:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005a34:	e003      	b.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005a3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	2100      	movs	r1, #0
 8005a48:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	d057      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005a5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a62:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a6a:	d033      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005a6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a70:	d82c      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005a72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a76:	d02f      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005a78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a7c:	d826      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005a7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a82:	d02b      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005a84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a88:	d820      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005a8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a8e:	d013      	beq.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005a90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a94:	d81a      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d022      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8005a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a9e:	d115      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005aa4:	3308      	adds	r3, #8
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f003 ff44 	bl	8009934 <RCCEx_PLL2_Config>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005ab2:	e016      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005ab4:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ab8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005abc:	3330      	adds	r3, #48	@ 0x30
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f003 ffd0 	bl	8009a64 <RCCEx_PLL3_Config>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005aca:	e00a      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ad2:	e006      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005ad4:	bf00      	nop
 8005ad6:	e004      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005ad8:	bf00      	nop
 8005ada:	e002      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005adc:	bf00      	nop
 8005ade:	e000      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10d      	bne.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8005aea:	4bbb      	ldr	r3, [pc, #748]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005aec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005af0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005af4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005af8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005afc:	4ab6      	ldr	r2, [pc, #728]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005afe:	430b      	orrs	r3, r1
 8005b00:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005b04:	e003      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8005b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	2100      	movs	r1, #0
 8005b18:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8005b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005b24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	d055      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005b2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b36:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005b3a:	d031      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005b3c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005b40:	d82a      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005b42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b46:	d02d      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005b48:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b4c:	d824      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005b4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b52:	d029      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005b54:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005b58:	d81e      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b5e:	d011      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005b60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b64:	d818      	bhi.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d020      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b6e:	d113      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b74:	3308      	adds	r3, #8
 8005b76:	4618      	mov	r0, r3
 8005b78:	f003 fedc 	bl	8009934 <RCCEx_PLL2_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005b82:	e014      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b88:	3330      	adds	r3, #48	@ 0x30
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f003 ff6a 	bl	8009a64 <RCCEx_PLL3_Config>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005b96:	e00a      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b9e:	e006      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005ba0:	bf00      	nop
 8005ba2:	e004      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005ba4:	bf00      	nop
 8005ba6:	e002      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005ba8:	bf00      	nop
 8005baa:	e000      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005bac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10d      	bne.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8005bb6:	4b88      	ldr	r3, [pc, #544]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005bb8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005bbc:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8005bc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005bc8:	4a83      	ldr	r2, [pc, #524]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005bd0:	e003      	b.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bd2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bd6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8005bda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be2:	2100      	movs	r1, #0
 8005be4:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8005be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bf0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	d055      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005bfa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c02:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005c06:	d031      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8005c08:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005c0c:	d82a      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c12:	d02d      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8005c14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005c18:	d824      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c1e:	d029      	beq.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005c20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005c24:	d81e      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c2a:	d011      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005c2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c30:	d818      	bhi.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d020      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8005c36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c3a:	d113      	bne.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c40:	3308      	adds	r3, #8
 8005c42:	4618      	mov	r0, r3
 8005c44:	f003 fe76 	bl	8009934 <RCCEx_PLL2_Config>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005c4e:	e014      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c54:	3330      	adds	r3, #48	@ 0x30
 8005c56:	4618      	mov	r0, r3
 8005c58:	f003 ff04 	bl	8009a64 <RCCEx_PLL3_Config>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005c62:	e00a      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c6a:	e006      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005c6c:	bf00      	nop
 8005c6e:	e004      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005c70:	bf00      	nop
 8005c72:	e002      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005c74:	bf00      	nop
 8005c76:	e000      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c7a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10d      	bne.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005c82:	4b55      	ldr	r3, [pc, #340]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c84:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c88:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005c8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c94:	4a50      	ldr	r2, [pc, #320]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c96:	430b      	orrs	r3, r1
 8005c98:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005c9c:	e003      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ca2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8005ca6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cae:	2100      	movs	r1, #0
 8005cb0:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8005cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005cbc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	d055      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8005cc6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cd2:	d031      	beq.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005cd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cd8:	d82a      	bhi.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cde:	d02d      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8005ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce4:	d824      	bhi.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005ce6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005cea:	d029      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005cec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005cf0:	d81e      	bhi.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cf6:	d011      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005cf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cfc:	d818      	bhi.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d020      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8005d02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d06:	d113      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f003 fe10 	bl	8009934 <RCCEx_PLL2_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005d1a:	e014      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d20:	3330      	adds	r3, #48	@ 0x30
 8005d22:	4618      	mov	r0, r3
 8005d24:	f003 fe9e 	bl	8009a64 <RCCEx_PLL3_Config>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005d2e:	e00a      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d36:	e006      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005d38:	bf00      	nop
 8005d3a:	e004      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005d3c:	bf00      	nop
 8005d3e:	e002      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005d40:	bf00      	nop
 8005d42:	e000      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10d      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005d4e:	4b22      	ldr	r3, [pc, #136]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005d50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005d54:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005d58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005d60:	4a1d      	ldr	r2, [pc, #116]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005d62:	430b      	orrs	r3, r1
 8005d64:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005d68:	e003      	b.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d6e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005d72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005d7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d82:	2300      	movs	r3, #0
 8005d84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005d88:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	d055      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005d92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d96:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005d9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005d9e:	d035      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005da0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005da4:	d82e      	bhi.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005da6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005daa:	d031      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005dac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005db0:	d828      	bhi.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005db2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005db6:	d01b      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8005db8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dbc:	d822      	bhi.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005dc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dc6:	d009      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8005dc8:	e01c      	b.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dca:	4b03      	ldr	r3, [pc, #12]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dce:	4a02      	ldr	r2, [pc, #8]	@ (8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dd4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005dd6:	e01c      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8005dd8:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ddc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005de0:	3308      	adds	r3, #8
 8005de2:	4618      	mov	r0, r3
 8005de4:	f003 fda6 	bl	8009934 <RCCEx_PLL2_Config>
 8005de8:	4603      	mov	r3, r0
 8005dea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005dee:	e010      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005df0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005df4:	3330      	adds	r3, #48	@ 0x30
 8005df6:	4618      	mov	r0, r3
 8005df8:	f003 fe34 	bl	8009a64 <RCCEx_PLL3_Config>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e02:	e006      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e0a:	e002      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005e0c:	bf00      	nop
 8005e0e:	e000      	b.n	8005e12 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005e10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10d      	bne.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005e1a:	4bc3      	ldr	r3, [pc, #780]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005e24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005e2c:	4abe      	ldr	r2, [pc, #760]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005e2e:	430b      	orrs	r3, r1
 8005e30:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005e34:	e003      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e36:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e3a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005e3e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005e4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e54:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	d051      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005e5e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005e66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e6a:	d033      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005e6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005e70:	d82c      	bhi.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005e72:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005e76:	d02d      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005e78:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005e7c:	d826      	bhi.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005e7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e82:	d019      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005e84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005e88:	d820      	bhi.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005e8e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005e92:	d007      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8005e94:	e01a      	b.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e96:	4ba4      	ldr	r3, [pc, #656]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9a:	4aa3      	ldr	r2, [pc, #652]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ea0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005ea2:	e018      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ea4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f003 fd42 	bl	8009934 <RCCEx_PLL2_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005eb6:	e00e      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ebc:	3330      	adds	r3, #48	@ 0x30
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f003 fdd0 	bl	8009a64 <RCCEx_PLL3_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005eca:	e004      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ed2:	e000      	b.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8005ed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ed6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10d      	bne.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005ede:	4b92      	ldr	r3, [pc, #584]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ee0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ee4:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8005ee8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005ef0:	4a8d      	ldr	r2, [pc, #564]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005ef2:	430b      	orrs	r3, r1
 8005ef4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005ef8:	e003      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005efe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005f02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005f0e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f10:	2300      	movs	r3, #0
 8005f12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f14:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	d032      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f26:	2b05      	cmp	r3, #5
 8005f28:	d80f      	bhi.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d211      	bcs.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d911      	bls.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d109      	bne.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f3a:	3308      	adds	r3, #8
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f003 fcf9 	bl	8009934 <RCCEx_PLL2_Config>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f48:	e006      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f50:	e002      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005f52:	bf00      	nop
 8005f54:	e000      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8005f56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f58:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10d      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005f60:	4b71      	ldr	r3, [pc, #452]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f66:	f023 0107 	bic.w	r1, r3, #7
 8005f6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f6e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005f72:	4a6d      	ldr	r2, [pc, #436]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f74:	430b      	orrs	r3, r1
 8005f76:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005f7a:	e003      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	6739      	str	r1, [r7, #112]	@ 0x70
 8005f90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f94:	677b      	str	r3, [r7, #116]	@ 0x74
 8005f96:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	d024      	beq.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8005fac:	2b08      	cmp	r3, #8
 8005fae:	d005      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005fb6:	e002      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005fb8:	bf00      	nop
 8005fba:	e000      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8005fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fbe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10d      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8005fc6:	4b58      	ldr	r3, [pc, #352]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fcc:	f023 0108 	bic.w	r1, r3, #8
 8005fd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005fd8:	4a53      	ldr	r2, [pc, #332]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005fe0:	e003      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fe6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005ff6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ffc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006000:	460b      	mov	r3, r1
 8006002:	4313      	orrs	r3, r2
 8006004:	f000 80b9 	beq.w	800617a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006008:	4b48      	ldr	r3, [pc, #288]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800600a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600c:	4a47      	ldr	r2, [pc, #284]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800600e:	f043 0301 	orr.w	r3, r3, #1
 8006012:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006014:	f7fb fc04 	bl	8001820 <HAL_GetTick>
 8006018:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800601c:	e00b      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800601e:	f7fb fbff 	bl	8001820 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d903      	bls.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006034:	e005      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006036:	4b3d      	ldr	r3, [pc, #244]	@ (800612c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603a:	f003 0301 	and.w	r3, r3, #1
 800603e:	2b00      	cmp	r3, #0
 8006040:	d0ed      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8006042:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006046:	2b00      	cmp	r3, #0
 8006048:	f040 8093 	bne.w	8006172 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800604c:	4b36      	ldr	r3, [pc, #216]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800604e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006056:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800605a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800605e:	2b00      	cmp	r3, #0
 8006060:	d023      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8006062:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006066:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800606a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800606e:	4293      	cmp	r3, r2
 8006070:	d01b      	beq.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006072:	4b2d      	ldr	r3, [pc, #180]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006078:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800607c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006080:	4b29      	ldr	r3, [pc, #164]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006082:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006086:	4a28      	ldr	r2, [pc, #160]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006088:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800608c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006090:	4b25      	ldr	r3, [pc, #148]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006092:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006096:	4a24      	ldr	r2, [pc, #144]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006098:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800609c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060a0:	4a21      	ldr	r2, [pc, #132]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060a2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80060a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060aa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d019      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b6:	f7fb fbb3 	bl	8001820 <HAL_GetTick>
 80060ba:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060be:	e00d      	b.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060c0:	f7fb fbae 	bl	8001820 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80060ca:	1ad2      	subs	r2, r2, r3
 80060cc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d903      	bls.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 80060da:	e006      	b.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060dc:	4b12      	ldr	r3, [pc, #72]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0ea      	beq.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80060ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d13a      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80060f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060f6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80060fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006102:	d115      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006104:	4b08      	ldr	r3, [pc, #32]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800610c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006110:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006114:	091b      	lsrs	r3, r3, #4
 8006116:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800611a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800611e:	4a02      	ldr	r2, [pc, #8]	@ (8006128 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006120:	430b      	orrs	r3, r1
 8006122:	61d3      	str	r3, [r2, #28]
 8006124:	e00a      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006126:	bf00      	nop
 8006128:	44020c00 	.word	0x44020c00
 800612c:	44020800 	.word	0x44020800
 8006130:	4b9f      	ldr	r3, [pc, #636]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006132:	69db      	ldr	r3, [r3, #28]
 8006134:	4a9e      	ldr	r2, [pc, #632]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006136:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800613a:	61d3      	str	r3, [r2, #28]
 800613c:	4b9c      	ldr	r3, [pc, #624]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800613e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006142:	4a9b      	ldr	r2, [pc, #620]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006148:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800614c:	4b98      	ldr	r3, [pc, #608]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800614e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8006152:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006156:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800615a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800615e:	4a94      	ldr	r2, [pc, #592]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006160:	430b      	orrs	r3, r1
 8006162:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006166:	e008      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006168:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800616c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8006170:	e003      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006172:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006176:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800617a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006186:	663b      	str	r3, [r7, #96]	@ 0x60
 8006188:	2300      	movs	r3, #0
 800618a:	667b      	str	r3, [r7, #100]	@ 0x64
 800618c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006190:	460b      	mov	r3, r1
 8006192:	4313      	orrs	r3, r2
 8006194:	d035      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006196:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800619a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800619e:	2b30      	cmp	r3, #48	@ 0x30
 80061a0:	d014      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80061a2:	2b30      	cmp	r3, #48	@ 0x30
 80061a4:	d80e      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80061a6:	2b20      	cmp	r3, #32
 80061a8:	d012      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d80a      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d010      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80061b2:	2b10      	cmp	r3, #16
 80061b4:	d106      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061b6:	4b7e      	ldr	r3, [pc, #504]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ba:	4a7d      	ldr	r2, [pc, #500]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061c0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80061c2:	e008      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80061ca:	e004      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80061cc:	bf00      	nop
 80061ce:	e002      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80061d0:	bf00      	nop
 80061d2:	e000      	b.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80061d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10d      	bne.n	80061fa <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80061de:	4b74      	ldr	r3, [pc, #464]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80061e4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80061e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061ec:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80061f0:	4a6f      	ldr	r2, [pc, #444]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80061f2:	430b      	orrs	r3, r1
 80061f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80061f8:	e003      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006202:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800620e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006210:	2300      	movs	r3, #0
 8006212:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006214:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006218:	460b      	mov	r3, r1
 800621a:	4313      	orrs	r3, r2
 800621c:	d033      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800621e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006222:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800622a:	2b40      	cmp	r3, #64	@ 0x40
 800622c:	d007      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800622e:	e010      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006230:	4b5f      	ldr	r3, [pc, #380]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006234:	4a5e      	ldr	r2, [pc, #376]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800623a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800623c:	e00d      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800623e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006242:	3308      	adds	r3, #8
 8006244:	4618      	mov	r0, r3
 8006246:	f003 fb75 	bl	8009934 <RCCEx_PLL2_Config>
 800624a:	4603      	mov	r3, r0
 800624c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006250:	e003      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800625a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10d      	bne.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006262:	4b53      	ldr	r3, [pc, #332]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006264:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006268:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800626c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006270:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006274:	4a4e      	ldr	r2, [pc, #312]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006276:	430b      	orrs	r3, r1
 8006278:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800627c:	e003      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800627e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006282:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006286:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006292:	653b      	str	r3, [r7, #80]	@ 0x50
 8006294:	2300      	movs	r3, #0
 8006296:	657b      	str	r3, [r7, #84]	@ 0x54
 8006298:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800629c:	460b      	mov	r3, r1
 800629e:	4313      	orrs	r3, r2
 80062a0:	d033      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80062a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062a6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80062ae:	2b80      	cmp	r3, #128	@ 0x80
 80062b0:	d007      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80062b2:	e010      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062b4:	4b3e      	ldr	r3, [pc, #248]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b8:	4a3d      	ldr	r2, [pc, #244]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062be:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80062c0:	e00d      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062c6:	3308      	adds	r3, #8
 80062c8:	4618      	mov	r0, r3
 80062ca:	f003 fb33 	bl	8009934 <RCCEx_PLL2_Config>
 80062ce:	4603      	mov	r3, r0
 80062d0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80062d4:	e003      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80062dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10d      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80062e6:	4b32      	ldr	r3, [pc, #200]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062ec:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80062f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062f4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80062f8:	4a2d      	ldr	r2, [pc, #180]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062fa:	430b      	orrs	r3, r1
 80062fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006300:	e003      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006302:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006306:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800630a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006318:	2300      	movs	r3, #0
 800631a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800631c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006320:	460b      	mov	r3, r1
 8006322:	4313      	orrs	r3, r2
 8006324:	d04a      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006326:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800632a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800632e:	2b04      	cmp	r3, #4
 8006330:	d827      	bhi.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8006332:	a201      	add	r2, pc, #4	@ (adr r2, 8006338 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8006334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006338:	0800634d 	.word	0x0800634d
 800633c:	0800635b 	.word	0x0800635b
 8006340:	0800636f 	.word	0x0800636f
 8006344:	0800638b 	.word	0x0800638b
 8006348:	0800638b 	.word	0x0800638b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800634c:	4b18      	ldr	r3, [pc, #96]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800634e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006350:	4a17      	ldr	r2, [pc, #92]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006356:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006358:	e018      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800635a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800635e:	3308      	adds	r3, #8
 8006360:	4618      	mov	r0, r3
 8006362:	f003 fae7 	bl	8009934 <RCCEx_PLL2_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800636c:	e00e      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800636e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006372:	3330      	adds	r3, #48	@ 0x30
 8006374:	4618      	mov	r0, r3
 8006376:	f003 fb75 	bl	8009a64 <RCCEx_PLL3_Config>
 800637a:	4603      	mov	r3, r0
 800637c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8006380:	e004      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006388:	e000      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800638a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006390:	2b00      	cmp	r3, #0
 8006392:	d10f      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006394:	4b06      	ldr	r3, [pc, #24]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800639a:	f023 0107 	bic.w	r1, r3, #7
 800639e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80063a6:	4a02      	ldr	r2, [pc, #8]	@ (80063b0 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80063a8:	430b      	orrs	r3, r1
 80063aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80063ae:	e005      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80063b0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063b8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80063bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80063c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80063ca:	2300      	movs	r3, #0
 80063cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80063ce:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80063d2:	460b      	mov	r3, r1
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f000 8081 	beq.w	80064dc <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80063da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063de:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063e2:	2b20      	cmp	r3, #32
 80063e4:	d85f      	bhi.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80063e6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ec <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	08006471 	.word	0x08006471
 80063f0:	080064a7 	.word	0x080064a7
 80063f4:	080064a7 	.word	0x080064a7
 80063f8:	080064a7 	.word	0x080064a7
 80063fc:	080064a7 	.word	0x080064a7
 8006400:	080064a7 	.word	0x080064a7
 8006404:	080064a7 	.word	0x080064a7
 8006408:	080064a7 	.word	0x080064a7
 800640c:	0800647f 	.word	0x0800647f
 8006410:	080064a7 	.word	0x080064a7
 8006414:	080064a7 	.word	0x080064a7
 8006418:	080064a7 	.word	0x080064a7
 800641c:	080064a7 	.word	0x080064a7
 8006420:	080064a7 	.word	0x080064a7
 8006424:	080064a7 	.word	0x080064a7
 8006428:	080064a7 	.word	0x080064a7
 800642c:	08006493 	.word	0x08006493
 8006430:	080064a7 	.word	0x080064a7
 8006434:	080064a7 	.word	0x080064a7
 8006438:	080064a7 	.word	0x080064a7
 800643c:	080064a7 	.word	0x080064a7
 8006440:	080064a7 	.word	0x080064a7
 8006444:	080064a7 	.word	0x080064a7
 8006448:	080064a7 	.word	0x080064a7
 800644c:	080064af 	.word	0x080064af
 8006450:	080064a7 	.word	0x080064a7
 8006454:	080064a7 	.word	0x080064a7
 8006458:	080064a7 	.word	0x080064a7
 800645c:	080064a7 	.word	0x080064a7
 8006460:	080064a7 	.word	0x080064a7
 8006464:	080064a7 	.word	0x080064a7
 8006468:	080064a7 	.word	0x080064a7
 800646c:	080064af 	.word	0x080064af
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006470:	4bab      	ldr	r3, [pc, #684]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006474:	4aaa      	ldr	r2, [pc, #680]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006476:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800647a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800647c:	e018      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800647e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006482:	3308      	adds	r3, #8
 8006484:	4618      	mov	r0, r3
 8006486:	f003 fa55 	bl	8009934 <RCCEx_PLL2_Config>
 800648a:	4603      	mov	r3, r0
 800648c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006490:	e00e      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006492:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006496:	3330      	adds	r3, #48	@ 0x30
 8006498:	4618      	mov	r0, r3
 800649a:	f003 fae3 	bl	8009a64 <RCCEx_PLL3_Config>
 800649e:	4603      	mov	r3, r0
 80064a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80064a4:	e004      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80064ac:	e000      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80064ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10d      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80064b8:	4b99      	ldr	r3, [pc, #612]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80064ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80064be:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80064c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80064ca:	4a95      	ldr	r2, [pc, #596]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80064cc:	430b      	orrs	r3, r1
 80064ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80064d2:	e003      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80064dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80064e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80064ea:	2300      	movs	r3, #0
 80064ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80064f2:	460b      	mov	r3, r1
 80064f4:	4313      	orrs	r3, r2
 80064f6:	d04e      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80064f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006500:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006504:	d02e      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800650a:	d827      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800650c:	2bc0      	cmp	r3, #192	@ 0xc0
 800650e:	d02b      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006510:	2bc0      	cmp	r3, #192	@ 0xc0
 8006512:	d823      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006514:	2b80      	cmp	r3, #128	@ 0x80
 8006516:	d017      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006518:	2b80      	cmp	r3, #128	@ 0x80
 800651a:	d81f      	bhi.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006520:	2b40      	cmp	r3, #64	@ 0x40
 8006522:	d007      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006524:	e01a      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006526:	4b7e      	ldr	r3, [pc, #504]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800652a:	4a7d      	ldr	r2, [pc, #500]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800652c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006530:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006532:	e01a      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006534:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006538:	3308      	adds	r3, #8
 800653a:	4618      	mov	r0, r3
 800653c:	f003 f9fa 	bl	8009934 <RCCEx_PLL2_Config>
 8006540:	4603      	mov	r3, r0
 8006542:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006546:	e010      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006548:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800654c:	3330      	adds	r3, #48	@ 0x30
 800654e:	4618      	mov	r0, r3
 8006550:	f003 fa88 	bl	8009a64 <RCCEx_PLL3_Config>
 8006554:	4603      	mov	r3, r0
 8006556:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800655a:	e006      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006562:	e002      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006564:	bf00      	nop
 8006566:	e000      	b.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006568:	bf00      	nop
    }

    if (ret == HAL_OK)
 800656a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10d      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006572:	4b6b      	ldr	r3, [pc, #428]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006578:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800657c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006584:	4a66      	ldr	r2, [pc, #408]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006586:	430b      	orrs	r3, r1
 8006588:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800658c:	e003      	b.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800658e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006592:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006596:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800659a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80065a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80065a4:	2300      	movs	r3, #0
 80065a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065a8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80065ac:	460b      	mov	r3, r1
 80065ae:	4313      	orrs	r3, r2
 80065b0:	d055      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80065b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80065ba:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80065be:	d031      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80065c0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80065c4:	d82a      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80065c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065ca:	d02d      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80065cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065d0:	d824      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80065d2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80065d6:	d029      	beq.n	800662c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80065d8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80065dc:	d81e      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80065de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e2:	d011      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80065e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e8:	d818      	bhi.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d020      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80065ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065f2:	d113      	bne.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065f8:	3308      	adds	r3, #8
 80065fa:	4618      	mov	r0, r3
 80065fc:	f003 f99a 	bl	8009934 <RCCEx_PLL2_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006606:	e014      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006608:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800660c:	3330      	adds	r3, #48	@ 0x30
 800660e:	4618      	mov	r0, r3
 8006610:	f003 fa28 	bl	8009a64 <RCCEx_PLL3_Config>
 8006614:	4603      	mov	r3, r0
 8006616:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800661a:	e00a      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006622:	e006      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006624:	bf00      	nop
 8006626:	e004      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006628:	bf00      	nop
 800662a:	e002      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800662c:	bf00      	nop
 800662e:	e000      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006632:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10d      	bne.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800663a:	4b39      	ldr	r3, [pc, #228]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800663c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006640:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006644:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006648:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800664c:	4a34      	ldr	r2, [pc, #208]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800664e:	430b      	orrs	r3, r1
 8006650:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006654:	e003      	b.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006656:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800665a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800665e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006666:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800666a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800666c:	2300      	movs	r3, #0
 800666e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006670:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006674:	460b      	mov	r3, r1
 8006676:	4313      	orrs	r3, r2
 8006678:	d058      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800667a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800667e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006682:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006686:	d031      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8006688:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800668c:	d82a      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800668e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006692:	d02d      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006694:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006698:	d824      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800669a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800669e:	d029      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 80066a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80066a4:	d81e      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80066a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066aa:	d011      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 80066ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066b0:	d818      	bhi.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d020      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 80066b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ba:	d113      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066c0:	3308      	adds	r3, #8
 80066c2:	4618      	mov	r0, r3
 80066c4:	f003 f936 	bl	8009934 <RCCEx_PLL2_Config>
 80066c8:	4603      	mov	r3, r0
 80066ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80066ce:	e014      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066d4:	3330      	adds	r3, #48	@ 0x30
 80066d6:	4618      	mov	r0, r3
 80066d8:	f003 f9c4 	bl	8009a64 <RCCEx_PLL3_Config>
 80066dc:	4603      	mov	r3, r0
 80066de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80066e2:	e00a      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80066ea:	e006      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80066ec:	bf00      	nop
 80066ee:	e004      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80066f0:	bf00      	nop
 80066f2:	e002      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80066f4:	bf00      	nop
 80066f6:	e000      	b.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80066f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d110      	bne.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006702:	4b07      	ldr	r3, [pc, #28]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006708:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800670c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006710:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006714:	4902      	ldr	r1, [pc, #8]	@ (8006720 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800671c:	e006      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800671e:	bf00      	nop
 8006720:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006724:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006728:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800672c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	2100      	movs	r1, #0
 8006736:	6239      	str	r1, [r7, #32]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	627b      	str	r3, [r7, #36]	@ 0x24
 800673e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006742:	460b      	mov	r3, r1
 8006744:	4313      	orrs	r3, r2
 8006746:	d055      	beq.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8006748:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800674c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006750:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006754:	d031      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8006756:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800675a:	d82a      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800675c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006760:	d02d      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006766:	d824      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006768:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800676c:	d029      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800676e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006772:	d81e      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006778:	d011      	beq.n	800679e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800677a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800677e:	d818      	bhi.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006780:	2b00      	cmp	r3, #0
 8006782:	d020      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006784:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006788:	d113      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800678a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800678e:	3308      	adds	r3, #8
 8006790:	4618      	mov	r0, r3
 8006792:	f003 f8cf 	bl	8009934 <RCCEx_PLL2_Config>
 8006796:	4603      	mov	r3, r0
 8006798:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800679c:	e014      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800679e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067a2:	3330      	adds	r3, #48	@ 0x30
 80067a4:	4618      	mov	r0, r3
 80067a6:	f003 f95d 	bl	8009a64 <RCCEx_PLL3_Config>
 80067aa:	4603      	mov	r3, r0
 80067ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80067b0:	e00a      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80067b8:	e006      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80067ba:	bf00      	nop
 80067bc:	e004      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80067be:	bf00      	nop
 80067c0:	e002      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80067c2:	bf00      	nop
 80067c4:	e000      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 80067c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10d      	bne.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80067d0:	4b88      	ldr	r3, [pc, #544]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80067d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067d6:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 80067da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067e2:	4984      	ldr	r1, [pc, #528]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80067ea:	e003      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80067f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	2100      	movs	r1, #0
 80067fe:	61b9      	str	r1, [r7, #24]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	61fb      	str	r3, [r7, #28]
 8006806:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800680a:	460b      	mov	r3, r1
 800680c:	4313      	orrs	r3, r2
 800680e:	d03d      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006810:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006814:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006818:	2b03      	cmp	r3, #3
 800681a:	d81c      	bhi.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800681c:	a201      	add	r2, pc, #4	@ (adr r2, 8006824 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800681e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006822:	bf00      	nop
 8006824:	0800685f 	.word	0x0800685f
 8006828:	08006835 	.word	0x08006835
 800682c:	08006843 	.word	0x08006843
 8006830:	0800685f 	.word	0x0800685f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006834:	4b6f      	ldr	r3, [pc, #444]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006838:	4a6e      	ldr	r2, [pc, #440]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800683a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800683e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006840:	e00e      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006842:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006846:	3308      	adds	r3, #8
 8006848:	4618      	mov	r0, r3
 800684a:	f003 f873 	bl	8009934 <RCCEx_PLL2_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006854:	e004      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800685c:	e000      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800685e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006860:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10d      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006868:	4b62      	ldr	r3, [pc, #392]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800686a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800686e:	f023 0203 	bic.w	r2, r3, #3
 8006872:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006876:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800687a:	495e      	ldr	r1, [pc, #376]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006882:	e003      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006884:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006888:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800688c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	2100      	movs	r1, #0
 8006896:	6139      	str	r1, [r7, #16]
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	617b      	str	r3, [r7, #20]
 800689e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068a2:	460b      	mov	r3, r1
 80068a4:	4313      	orrs	r3, r2
 80068a6:	d03a      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 80068a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80068b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068b4:	d00e      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 80068b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068ba:	d815      	bhi.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d017      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 80068c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068c4:	d110      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068c6:	4b4b      	ldr	r3, [pc, #300]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80068c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ca:	4a4a      	ldr	r2, [pc, #296]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80068cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068d0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80068d2:	e00e      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068d8:	3308      	adds	r3, #8
 80068da:	4618      	mov	r0, r3
 80068dc:	f003 f82a 	bl	8009934 <RCCEx_PLL2_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80068e6:	e004      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068ee:	e000      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80068f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10d      	bne.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80068fa:	4b3e      	ldr	r3, [pc, #248]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80068fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006900:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006904:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006908:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800690c:	4939      	ldr	r1, [pc, #228]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800690e:	4313      	orrs	r3, r2
 8006910:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006914:	e003      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006916:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800691a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800691e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	2100      	movs	r1, #0
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	f003 0310 	and.w	r3, r3, #16
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006934:	460b      	mov	r3, r1
 8006936:	4313      	orrs	r3, r2
 8006938:	d038      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800693a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800693e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006942:	2b30      	cmp	r3, #48	@ 0x30
 8006944:	d01b      	beq.n	800697e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8006946:	2b30      	cmp	r3, #48	@ 0x30
 8006948:	d815      	bhi.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800694a:	2b10      	cmp	r3, #16
 800694c:	d002      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800694e:	2b20      	cmp	r3, #32
 8006950:	d007      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006952:	e010      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006954:	4b27      	ldr	r3, [pc, #156]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006958:	4a26      	ldr	r2, [pc, #152]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800695a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800695e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006960:	e00e      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006962:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006966:	3330      	adds	r3, #48	@ 0x30
 8006968:	4618      	mov	r0, r3
 800696a:	f003 f87b 	bl	8009a64 <RCCEx_PLL3_Config>
 800696e:	4603      	mov	r3, r0
 8006970:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006974:	e004      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800697c:	e000      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800697e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006980:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10d      	bne.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006988:	4b1a      	ldr	r3, [pc, #104]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800698a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800698e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006992:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006996:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800699a:	4916      	ldr	r1, [pc, #88]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800699c:	4313      	orrs	r3, r2
 800699e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80069a2:	e003      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80069ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	2100      	movs	r1, #0
 80069b6:	6039      	str	r1, [r7, #0]
 80069b8:	f003 0308 	and.w	r3, r3, #8
 80069bc:	607b      	str	r3, [r7, #4]
 80069be:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069c2:	460b      	mov	r3, r1
 80069c4:	4313      	orrs	r3, r2
 80069c6:	d00c      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80069c8:	4b0a      	ldr	r3, [pc, #40]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80069ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80069d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069d6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80069da:	4906      	ldr	r1, [pc, #24]	@ (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069dc:	4313      	orrs	r3, r2
 80069de:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80069e2:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80069ec:	46bd      	mov	sp, r7
 80069ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069f2:	bf00      	nop
 80069f4:	44020c00 	.word	0x44020c00

080069f8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b08b      	sub	sp, #44	@ 0x2c
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006a00:	4bae      	ldr	r3, [pc, #696]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a08:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006a0a:	4bac      	ldr	r3, [pc, #688]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0e:	f003 0303 	and.w	r3, r3, #3
 8006a12:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006a14:	4ba9      	ldr	r3, [pc, #676]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a18:	0a1b      	lsrs	r3, r3, #8
 8006a1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a1e:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006a20:	4ba6      	ldr	r3, [pc, #664]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a24:	091b      	lsrs	r3, r3, #4
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006a2c:	4ba3      	ldr	r3, [pc, #652]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	fb02 f303 	mul.w	r3, r2, r3
 8006a3c:	ee07 3a90 	vmov	s15, r3
 8006a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a44:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f000 8126 	beq.w	8006c9c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d053      	beq.n	8006afe <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d86f      	bhi.n	8006b3c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d003      	beq.n	8006a6a <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d02b      	beq.n	8006ac0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006a68:	e068      	b.n	8006b3c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006a6a:	4b94      	ldr	r3, [pc, #592]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	08db      	lsrs	r3, r3, #3
 8006a70:	f003 0303 	and.w	r3, r3, #3
 8006a74:	4a92      	ldr	r2, [pc, #584]	@ (8006cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006a76:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	ee07 3a90 	vmov	s15, r3
 8006a8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a94:	6a3b      	ldr	r3, [r7, #32]
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a9e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006aa2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aba:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006abe:	e068      	b.n	8006b92 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	ee07 3a90 	vmov	s15, r3
 8006ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aca:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006cc8 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	ee07 3a90 	vmov	s15, r3
 8006ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006adc:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ae0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006ae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006af0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006afc:	e049      	b.n	8006b92 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	ee07 3a90 	vmov	s15, r3
 8006b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b08:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006ccc <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8006b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b1a:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b1e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b36:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006b3a:	e02a      	b.n	8006b92 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006b3c:	4b5f      	ldr	r3, [pc, #380]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	08db      	lsrs	r3, r3, #3
 8006b42:	f003 0303 	and.w	r3, r3, #3
 8006b46:	4a5e      	ldr	r2, [pc, #376]	@ (8006cc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006b48:	fa22 f303 	lsr.w	r3, r2, r3
 8006b4c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	ee07 3a90 	vmov	s15, r3
 8006b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b70:	ed97 6a04 	vldr	s12, [r7, #16]
 8006b74:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006cc4 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006b78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006b90:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b92:	4b4a      	ldr	r3, [pc, #296]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006b9e:	d121      	bne.n	8006be4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006ba0:	4b46      	ldr	r3, [pc, #280]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d017      	beq.n	8006bdc <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006bac:	4b43      	ldr	r3, [pc, #268]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bb0:	0a5b      	lsrs	r3, r3, #9
 8006bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006bbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bc2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006bc6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bd2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	e006      	b.n	8006bea <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	e002      	b.n	8006bea <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006bea:	4b34      	ldr	r3, [pc, #208]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bf2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006bf6:	d121      	bne.n	8006c3c <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006bf8:	4b30      	ldr	r3, [pc, #192]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d017      	beq.n	8006c34 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c04:	4b2d      	ldr	r3, [pc, #180]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c08:	0c1b      	lsrs	r3, r3, #16
 8006c0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c0e:	ee07 3a90 	vmov	s15, r3
 8006c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006c16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c1a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006c1e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c2a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	605a      	str	r2, [r3, #4]
 8006c32:	e006      	b.n	8006c42 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	e002      	b.n	8006c42 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c42:	4b1e      	ldr	r3, [pc, #120]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c4e:	d121      	bne.n	8006c94 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006c50:	4b1a      	ldr	r3, [pc, #104]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d017      	beq.n	8006c8c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c5c:	4b17      	ldr	r3, [pc, #92]	@ (8006cbc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c60:	0e1b      	lsrs	r3, r3, #24
 8006c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c72:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006c76:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c82:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006c8a:	e010      	b.n	8006cae <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	609a      	str	r2, [r3, #8]
}
 8006c92:	e00c      	b.n	8006cae <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	609a      	str	r2, [r3, #8]
}
 8006c9a:	e008      	b.n	8006cae <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	609a      	str	r2, [r3, #8]
}
 8006cae:	bf00      	nop
 8006cb0:	372c      	adds	r7, #44	@ 0x2c
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	44020c00 	.word	0x44020c00
 8006cc0:	03d09000 	.word	0x03d09000
 8006cc4:	46000000 	.word	0x46000000
 8006cc8:	4a742400 	.word	0x4a742400
 8006ccc:	4af42400 	.word	0x4af42400

08006cd0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b08b      	sub	sp, #44	@ 0x2c
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006cd8:	4bae      	ldr	r3, [pc, #696]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ce0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006ce2:	4bac      	ldr	r3, [pc, #688]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce6:	f003 0303 	and.w	r3, r3, #3
 8006cea:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8006cec:	4ba9      	ldr	r3, [pc, #676]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf0:	0a1b      	lsrs	r3, r3, #8
 8006cf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cf6:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006cf8:	4ba6      	ldr	r3, [pc, #664]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cfc:	091b      	lsrs	r3, r3, #4
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006d04:	4ba3      	ldr	r3, [pc, #652]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d08:	08db      	lsrs	r3, r3, #3
 8006d0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	fb02 f303 	mul.w	r3, r2, r3
 8006d14:	ee07 3a90 	vmov	s15, r3
 8006d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8126 	beq.w	8006f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8006d28:	69fb      	ldr	r3, [r7, #28]
 8006d2a:	2b03      	cmp	r3, #3
 8006d2c:	d053      	beq.n	8006dd6 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d86f      	bhi.n	8006e14 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d003      	beq.n	8006d42 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	d02b      	beq.n	8006d98 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006d40:	e068      	b.n	8006e14 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006d42:	4b94      	ldr	r3, [pc, #592]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	08db      	lsrs	r3, r3, #3
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	4a92      	ldr	r2, [pc, #584]	@ (8006f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d52:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	ee07 3a90 	vmov	s15, r3
 8006d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d76:	ed97 6a04 	vldr	s12, [r7, #16]
 8006d7a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d92:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006d96:	e068      	b.n	8006e6a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	ee07 3a90 	vmov	s15, r3
 8006d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	ee07 3a90 	vmov	s15, r3
 8006db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db4:	ed97 6a04 	vldr	s12, [r7, #16]
 8006db8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006dbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006dd4:	e049      	b.n	8006e6a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	ee07 3a90 	vmov	s15, r3
 8006ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8006de4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006df2:	ed97 6a04 	vldr	s12, [r7, #16]
 8006df6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006e12:	e02a      	b.n	8006e6a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006e14:	4b5f      	ldr	r3, [pc, #380]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	08db      	lsrs	r3, r3, #3
 8006e1a:	f003 0303 	and.w	r3, r3, #3
 8006e1e:	4a5e      	ldr	r2, [pc, #376]	@ (8006f98 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
 8006e24:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	ee07 3a90 	vmov	s15, r3
 8006e2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	ee07 3a90 	vmov	s15, r3
 8006e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e48:	ed97 6a04 	vldr	s12, [r7, #16]
 8006e4c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006f9c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e64:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006e68:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e6a:	4b4a      	ldr	r3, [pc, #296]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e72:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006e76:	d121      	bne.n	8006ebc <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006e78:	4b46      	ldr	r3, [pc, #280]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d017      	beq.n	8006eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006e84:	4b43      	ldr	r3, [pc, #268]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e88:	0a5b      	lsrs	r3, r3, #9
 8006e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8006e96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006e9e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eaa:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	e006      	b.n	8006ec2 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	e002      	b.n	8006ec2 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ec2:	4b34      	ldr	r3, [pc, #208]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006eca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ece:	d121      	bne.n	8006f14 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006ed0:	4b30      	ldr	r3, [pc, #192]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d017      	beq.n	8006f0c <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006edc:	4b2d      	ldr	r3, [pc, #180]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ede:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee0:	0c1b      	lsrs	r3, r3, #16
 8006ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ee6:	ee07 3a90 	vmov	s15, r3
 8006eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006eee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006ef6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f02:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	605a      	str	r2, [r3, #4]
 8006f0a:	e006      	b.n	8006f1a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	605a      	str	r2, [r3, #4]
 8006f12:	e002      	b.n	8006f1a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006f26:	d121      	bne.n	8006f6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006f28:	4b1a      	ldr	r3, [pc, #104]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d017      	beq.n	8006f64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f34:	4b17      	ldr	r3, [pc, #92]	@ (8006f94 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f38:	0e1b      	lsrs	r3, r3, #24
 8006f3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f3e:	ee07 3a90 	vmov	s15, r3
 8006f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8006f46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f4a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8006f4e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006f52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f5a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f62:	e010      	b.n	8006f86 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	609a      	str	r2, [r3, #8]
}
 8006f6a:	e00c      	b.n	8006f86 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	609a      	str	r2, [r3, #8]
}
 8006f72:	e008      	b.n	8006f86 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	609a      	str	r2, [r3, #8]
}
 8006f86:	bf00      	nop
 8006f88:	372c      	adds	r7, #44	@ 0x2c
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	44020c00 	.word	0x44020c00
 8006f98:	03d09000 	.word	0x03d09000
 8006f9c:	46000000 	.word	0x46000000
 8006fa0:	4a742400 	.word	0x4a742400
 8006fa4:	4af42400 	.word	0x4af42400

08006fa8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b08b      	sub	sp, #44	@ 0x2c
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006fb0:	4bae      	ldr	r3, [pc, #696]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006fb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb8:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006fba:	4bac      	ldr	r3, [pc, #688]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8006fc4:	4ba9      	ldr	r3, [pc, #676]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fc8:	0a1b      	lsrs	r3, r3, #8
 8006fca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006fce:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8006fd0:	4ba6      	ldr	r3, [pc, #664]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd4:	091b      	lsrs	r3, r3, #4
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006fdc:	4ba3      	ldr	r3, [pc, #652]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8006fde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fe0:	08db      	lsrs	r3, r3, #3
 8006fe2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fe6:	697a      	ldr	r2, [r7, #20]
 8006fe8:	fb02 f303 	mul.w	r3, r2, r3
 8006fec:	ee07 3a90 	vmov	s15, r3
 8006ff0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 8126 	beq.w	800724c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	2b03      	cmp	r3, #3
 8007004:	d053      	beq.n	80070ae <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	2b03      	cmp	r3, #3
 800700a:	d86f      	bhi.n	80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d003      	beq.n	800701a <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	2b02      	cmp	r3, #2
 8007016:	d02b      	beq.n	8007070 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007018:	e068      	b.n	80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800701a:	4b94      	ldr	r3, [pc, #592]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	08db      	lsrs	r3, r3, #3
 8007020:	f003 0303 	and.w	r3, r3, #3
 8007024:	4a92      	ldr	r2, [pc, #584]	@ (8007270 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007026:	fa22 f303 	lsr.w	r3, r2, r3
 800702a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	ee07 3a90 	vmov	s15, r3
 800703c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007040:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	ee07 3a90 	vmov	s15, r3
 800704a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800704e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007052:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8007274 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800705a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800705e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800706a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800706e:	e068      	b.n	8007142 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007278 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800708c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007090:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007274 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800709c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80070ac:	e049      	b.n	8007142 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800727c <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80070bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c0:	6a3b      	ldr	r3, [r7, #32]
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ca:	ed97 6a04 	vldr	s12, [r7, #16]
 80070ce:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8007274 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80070d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80070ea:	e02a      	b.n	8007142 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070ec:	4b5f      	ldr	r3, [pc, #380]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	08db      	lsrs	r3, r3, #3
 80070f2:	f003 0303 	and.w	r3, r3, #3
 80070f6:	4a5e      	ldr	r2, [pc, #376]	@ (8007270 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
 80070fc:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	ee07 3a90 	vmov	s15, r3
 8007104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	ee07 3a90 	vmov	s15, r3
 800711c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007120:	ed97 6a04 	vldr	s12, [r7, #16]
 8007124:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8007274 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007128:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007130:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007134:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007140:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007142:	4b4a      	ldr	r3, [pc, #296]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800714a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800714e:	d121      	bne.n	8007194 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007150:	4b46      	ldr	r3, [pc, #280]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007154:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d017      	beq.n	800718c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800715c:	4b43      	ldr	r3, [pc, #268]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800715e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007160:	0a5b      	lsrs	r3, r3, #9
 8007162:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007166:	ee07 3a90 	vmov	s15, r3
 800716a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800716e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007172:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007176:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800717a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800717e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007182:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	601a      	str	r2, [r3, #0]
 800718a:	e006      	b.n	800719a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	e002      	b.n	800719a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800719a:	4b34      	ldr	r3, [pc, #208]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071a6:	d121      	bne.n	80071ec <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80071a8:	4b30      	ldr	r3, [pc, #192]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d017      	beq.n	80071e4 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071b4:	4b2d      	ldr	r3, [pc, #180]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b8:	0c1b      	lsrs	r3, r3, #16
 80071ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80071c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80071ca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80071ce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80071d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071da:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	605a      	str	r2, [r3, #4]
 80071e2:	e006      	b.n	80071f2 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	605a      	str	r2, [r3, #4]
 80071ea:	e002      	b.n	80071f2 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071f2:	4b1e      	ldr	r3, [pc, #120]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071fe:	d121      	bne.n	8007244 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007200:	4b1a      	ldr	r3, [pc, #104]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007204:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d017      	beq.n	800723c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800720c:	4b17      	ldr	r3, [pc, #92]	@ (800726c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800720e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007210:	0e1b      	lsrs	r3, r3, #24
 8007212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800721e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007222:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007226:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800722a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800722e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007232:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800723a:	e010      	b.n	800725e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	609a      	str	r2, [r3, #8]
}
 8007242:	e00c      	b.n	800725e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	609a      	str	r2, [r3, #8]
}
 800724a:	e008      	b.n	800725e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	609a      	str	r2, [r3, #8]
}
 800725e:	bf00      	nop
 8007260:	372c      	adds	r7, #44	@ 0x2c
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	44020c00 	.word	0x44020c00
 8007270:	03d09000 	.word	0x03d09000
 8007274:	46000000 	.word	0x46000000
 8007278:	4a742400 	.word	0x4a742400
 800727c:	4af42400 	.word	0x4af42400

08007280 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007280:	b590      	push	{r4, r7, lr}
 8007282:	b08f      	sub	sp, #60	@ 0x3c
 8007284:	af00      	add	r7, sp, #0
 8007286:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800728a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800728e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007292:	4321      	orrs	r1, r4
 8007294:	d150      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007296:	4b26      	ldr	r3, [pc, #152]	@ (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800729c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072a0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80072a2:	4b23      	ldr	r3, [pc, #140]	@ (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072a8:	f003 0302 	and.w	r3, r3, #2
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d108      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072b6:	d104      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80072b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80072be:	f002 bb2a 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80072c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80072cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80072d0:	d108      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80072d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072d8:	d104      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80072da:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072de:	637b      	str	r3, [r7, #52]	@ 0x34
 80072e0:	f002 bb19 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80072e4:	4b12      	ldr	r3, [pc, #72]	@ (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072f0:	d119      	bne.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072f8:	d115      	bne.n	8007326 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80072fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007306:	d30a      	bcc.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007308:	4b09      	ldr	r3, [pc, #36]	@ (8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	0a1b      	lsrs	r3, r3, #8
 800730e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007312:	4a08      	ldr	r2, [pc, #32]	@ (8007334 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007314:	fbb2 f3f3 	udiv	r3, r2, r3
 8007318:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800731a:	f002 bafc 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007322:	f002 baf8 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007326:	2300      	movs	r3, #0
 8007328:	637b      	str	r3, [r7, #52]	@ 0x34
 800732a:	f002 baf4 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800732e:	bf00      	nop
 8007330:	44020c00 	.word	0x44020c00
 8007334:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800733c:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8007340:	ea50 0104 	orrs.w	r1, r0, r4
 8007344:	f001 8275 	beq.w	8008832 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8007348:	e9d7 0100 	ldrd	r0, r1, [r7]
 800734c:	2801      	cmp	r0, #1
 800734e:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8007352:	f082 82dd 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007356:	e9d7 0100 	ldrd	r0, r1, [r7]
 800735a:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800735e:	ea50 0104 	orrs.w	r1, r0, r4
 8007362:	f001 816c 	beq.w	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8007366:	e9d7 0100 	ldrd	r0, r1, [r7]
 800736a:	2801      	cmp	r0, #1
 800736c:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8007370:	f082 82ce 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007374:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007378:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 800737c:	ea50 0104 	orrs.w	r1, r0, r4
 8007380:	f001 8602 	beq.w	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8007384:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007388:	2801      	cmp	r0, #1
 800738a:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800738e:	f082 82bf 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007392:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007396:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800739a:	ea50 0104 	orrs.w	r1, r0, r4
 800739e:	f001 854c 	beq.w	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80073a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073a6:	2801      	cmp	r0, #1
 80073a8:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80073ac:	f082 82b0 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073b4:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80073b8:	ea50 0104 	orrs.w	r1, r0, r4
 80073bc:	f001 849e 	beq.w	8008cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80073c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073c4:	2801      	cmp	r0, #1
 80073c6:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80073ca:	f082 82a1 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073d2:	f1a1 0420 	sub.w	r4, r1, #32
 80073d6:	ea50 0104 	orrs.w	r1, r0, r4
 80073da:	f001 83e8 	beq.w	8008bae <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80073de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073e2:	2801      	cmp	r0, #1
 80073e4:	f171 0120 	sbcs.w	r1, r1, #32
 80073e8:	f082 8292 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80073ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073f0:	f1a1 0410 	sub.w	r4, r1, #16
 80073f4:	ea50 0104 	orrs.w	r1, r0, r4
 80073f8:	f002 8256 	beq.w	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80073fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007400:	2801      	cmp	r0, #1
 8007402:	f171 0110 	sbcs.w	r1, r1, #16
 8007406:	f082 8283 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800740a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800740e:	f1a1 0408 	sub.w	r4, r1, #8
 8007412:	ea50 0104 	orrs.w	r1, r0, r4
 8007416:	f002 81cc 	beq.w	80097b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800741a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800741e:	2801      	cmp	r0, #1
 8007420:	f171 0108 	sbcs.w	r1, r1, #8
 8007424:	f082 8274 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007428:	e9d7 0100 	ldrd	r0, r1, [r7]
 800742c:	1f0c      	subs	r4, r1, #4
 800742e:	ea50 0104 	orrs.w	r1, r0, r4
 8007432:	f001 8648 	beq.w	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8007436:	e9d7 0100 	ldrd	r0, r1, [r7]
 800743a:	2801      	cmp	r0, #1
 800743c:	f171 0104 	sbcs.w	r1, r1, #4
 8007440:	f082 8266 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007444:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007448:	1e8c      	subs	r4, r1, #2
 800744a:	ea50 0104 	orrs.w	r1, r0, r4
 800744e:	f002 8143 	beq.w	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8007452:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007456:	2801      	cmp	r0, #1
 8007458:	f171 0102 	sbcs.w	r1, r1, #2
 800745c:	f082 8258 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007460:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007464:	1e4c      	subs	r4, r1, #1
 8007466:	ea50 0104 	orrs.w	r1, r0, r4
 800746a:	f002 80ce 	beq.w	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800746e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007472:	2801      	cmp	r0, #1
 8007474:	f171 0101 	sbcs.w	r1, r1, #1
 8007478:	f082 824a 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800747c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007480:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007484:	4321      	orrs	r1, r4
 8007486:	f002 8059 	beq.w	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800748a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800748e:	4cd9      	ldr	r4, [pc, #868]	@ (80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007490:	42a0      	cmp	r0, r4
 8007492:	f171 0100 	sbcs.w	r1, r1, #0
 8007496:	f082 823b 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800749a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800749e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80074a2:	4321      	orrs	r1, r4
 80074a4:	f001 87d9 	beq.w	800945a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80074a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ac:	4cd2      	ldr	r4, [pc, #840]	@ (80077f8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80074ae:	42a0      	cmp	r0, r4
 80074b0:	f171 0100 	sbcs.w	r1, r1, #0
 80074b4:	f082 822c 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074bc:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80074c0:	4321      	orrs	r1, r4
 80074c2:	f001 8751 	beq.w	8009368 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80074c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ca:	4ccc      	ldr	r4, [pc, #816]	@ (80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80074cc:	42a0      	cmp	r0, r4
 80074ce:	f171 0100 	sbcs.w	r1, r1, #0
 80074d2:	f082 821d 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074da:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80074de:	4321      	orrs	r1, r4
 80074e0:	f001 869a 	beq.w	8009218 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80074e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074e8:	4cc5      	ldr	r4, [pc, #788]	@ (8007800 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80074ea:	42a0      	cmp	r0, r4
 80074ec:	f171 0100 	sbcs.w	r1, r1, #0
 80074f0:	f082 820e 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074f8:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80074fc:	4321      	orrs	r1, r4
 80074fe:	f001 8612 	beq.w	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007502:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007506:	4cbf      	ldr	r4, [pc, #764]	@ (8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007508:	42a0      	cmp	r0, r4
 800750a:	f171 0100 	sbcs.w	r1, r1, #0
 800750e:	f082 81ff 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007516:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800751a:	4321      	orrs	r1, r4
 800751c:	f002 817e 	beq.w	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007524:	4cb8      	ldr	r4, [pc, #736]	@ (8007808 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007526:	42a0      	cmp	r0, r4
 8007528:	f171 0100 	sbcs.w	r1, r1, #0
 800752c:	f082 81f0 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007534:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007538:	4321      	orrs	r1, r4
 800753a:	f000 829e 	beq.w	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800753e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007542:	4cb2      	ldr	r4, [pc, #712]	@ (800780c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007544:	42a0      	cmp	r0, r4
 8007546:	f171 0100 	sbcs.w	r1, r1, #0
 800754a:	f082 81e1 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800754e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007552:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007556:	4321      	orrs	r1, r4
 8007558:	f000 826d 	beq.w	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800755c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007560:	4cab      	ldr	r4, [pc, #684]	@ (8007810 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007562:	42a0      	cmp	r0, r4
 8007564:	f171 0100 	sbcs.w	r1, r1, #0
 8007568:	f082 81d2 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800756c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007570:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007574:	4321      	orrs	r1, r4
 8007576:	f001 800d 	beq.w	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800757a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800757e:	4ca5      	ldr	r4, [pc, #660]	@ (8007814 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007580:	42a0      	cmp	r0, r4
 8007582:	f171 0100 	sbcs.w	r1, r1, #0
 8007586:	f082 81c3 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800758a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800758e:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007592:	4321      	orrs	r1, r4
 8007594:	f000 81d0 	beq.w	8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800759c:	4c9e      	ldr	r4, [pc, #632]	@ (8007818 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800759e:	42a0      	cmp	r0, r4
 80075a0:	f171 0100 	sbcs.w	r1, r1, #0
 80075a4:	f082 81b4 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ac:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80075b0:	4321      	orrs	r1, r4
 80075b2:	f000 8142 	beq.w	800783a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80075b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ba:	4c98      	ldr	r4, [pc, #608]	@ (800781c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80075bc:	42a0      	cmp	r0, r4
 80075be:	f171 0100 	sbcs.w	r1, r1, #0
 80075c2:	f082 81a5 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075ca:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80075ce:	4321      	orrs	r1, r4
 80075d0:	f001 824e 	beq.w	8008a70 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80075d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075d8:	4c91      	ldr	r4, [pc, #580]	@ (8007820 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80075da:	42a0      	cmp	r0, r4
 80075dc:	f171 0100 	sbcs.w	r1, r1, #0
 80075e0:	f082 8196 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075e8:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80075ec:	4321      	orrs	r1, r4
 80075ee:	f001 8197 	beq.w	8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80075f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075f6:	4c8b      	ldr	r4, [pc, #556]	@ (8007824 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80075f8:	42a0      	cmp	r0, r4
 80075fa:	f171 0100 	sbcs.w	r1, r1, #0
 80075fe:	f082 8187 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007602:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007606:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800760a:	4321      	orrs	r1, r4
 800760c:	f001 8154 	beq.w	80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007614:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007618:	f171 0100 	sbcs.w	r1, r1, #0
 800761c:	f082 8178 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007620:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007624:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007628:	4321      	orrs	r1, r4
 800762a:	f001 80b7 	beq.w	800879c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800762e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007632:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007636:	42a0      	cmp	r0, r4
 8007638:	f171 0100 	sbcs.w	r1, r1, #0
 800763c:	f082 8168 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007644:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007648:	4321      	orrs	r1, r4
 800764a:	f001 8064 	beq.w	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800764e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007652:	f244 0401 	movw	r4, #16385	@ 0x4001
 8007656:	42a0      	cmp	r0, r4
 8007658:	f171 0100 	sbcs.w	r1, r1, #0
 800765c:	f082 8158 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007664:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8007668:	4321      	orrs	r1, r4
 800766a:	f001 8011 	beq.w	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800766e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007672:	f242 0401 	movw	r4, #8193	@ 0x2001
 8007676:	42a0      	cmp	r0, r4
 8007678:	f171 0100 	sbcs.w	r1, r1, #0
 800767c:	f082 8148 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007680:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007684:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8007688:	4321      	orrs	r1, r4
 800768a:	f000 871e 	beq.w	80084ca <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800768e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007692:	f241 0401 	movw	r4, #4097	@ 0x1001
 8007696:	42a0      	cmp	r0, r4
 8007698:	f171 0100 	sbcs.w	r1, r1, #0
 800769c:	f082 8138 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076a4:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 80076a8:	4321      	orrs	r1, r4
 80076aa:	f000 86a8 	beq.w	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 80076ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076b2:	f640 0401 	movw	r4, #2049	@ 0x801
 80076b6:	42a0      	cmp	r0, r4
 80076b8:	f171 0100 	sbcs.w	r1, r1, #0
 80076bc:	f082 8128 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076c4:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 80076c8:	4321      	orrs	r1, r4
 80076ca:	f000 8632 	beq.w	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 80076ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076d2:	f240 4401 	movw	r4, #1025	@ 0x401
 80076d6:	42a0      	cmp	r0, r4
 80076d8:	f171 0100 	sbcs.w	r1, r1, #0
 80076dc:	f082 8118 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076e4:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 80076e8:	4321      	orrs	r1, r4
 80076ea:	f000 85b0 	beq.w	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80076ee:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076f2:	f240 2401 	movw	r4, #513	@ 0x201
 80076f6:	42a0      	cmp	r0, r4
 80076f8:	f171 0100 	sbcs.w	r1, r1, #0
 80076fc:	f082 8108 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007700:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007704:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8007708:	4321      	orrs	r1, r4
 800770a:	f000 8535 	beq.w	8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800770e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007712:	f240 1401 	movw	r4, #257	@ 0x101
 8007716:	42a0      	cmp	r0, r4
 8007718:	f171 0100 	sbcs.w	r1, r1, #0
 800771c:	f082 80f8 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007720:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007724:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8007728:	4321      	orrs	r1, r4
 800772a:	f000 84ba 	beq.w	80080a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800772e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007732:	2881      	cmp	r0, #129	@ 0x81
 8007734:	f171 0100 	sbcs.w	r1, r1, #0
 8007738:	f082 80ea 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800773c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007740:	2821      	cmp	r0, #33	@ 0x21
 8007742:	f171 0100 	sbcs.w	r1, r1, #0
 8007746:	d26f      	bcs.n	8007828 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007748:	e9d7 0100 	ldrd	r0, r1, [r7]
 800774c:	4301      	orrs	r1, r0
 800774e:	f002 80df 	beq.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007752:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007756:	1e42      	subs	r2, r0, #1
 8007758:	f141 33ff 	adc.w	r3, r1, #4294967295
 800775c:	2a20      	cmp	r2, #32
 800775e:	f173 0100 	sbcs.w	r1, r3, #0
 8007762:	f082 80d5 	bcs.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007766:	2a1f      	cmp	r2, #31
 8007768:	f202 80d2 	bhi.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800776c:	a101      	add	r1, pc, #4	@ (adr r1, 8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800776e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007772:	bf00      	nop
 8007774:	08007ad5 	.word	0x08007ad5
 8007778:	08007ba1 	.word	0x08007ba1
 800777c:	08009911 	.word	0x08009911
 8007780:	08007c61 	.word	0x08007c61
 8007784:	08009911 	.word	0x08009911
 8007788:	08009911 	.word	0x08009911
 800778c:	08009911 	.word	0x08009911
 8007790:	08007d31 	.word	0x08007d31
 8007794:	08009911 	.word	0x08009911
 8007798:	08009911 	.word	0x08009911
 800779c:	08009911 	.word	0x08009911
 80077a0:	08009911 	.word	0x08009911
 80077a4:	08009911 	.word	0x08009911
 80077a8:	08009911 	.word	0x08009911
 80077ac:	08009911 	.word	0x08009911
 80077b0:	08007e13 	.word	0x08007e13
 80077b4:	08009911 	.word	0x08009911
 80077b8:	08009911 	.word	0x08009911
 80077bc:	08009911 	.word	0x08009911
 80077c0:	08009911 	.word	0x08009911
 80077c4:	08009911 	.word	0x08009911
 80077c8:	08009911 	.word	0x08009911
 80077cc:	08009911 	.word	0x08009911
 80077d0:	08009911 	.word	0x08009911
 80077d4:	08009911 	.word	0x08009911
 80077d8:	08009911 	.word	0x08009911
 80077dc:	08009911 	.word	0x08009911
 80077e0:	08009911 	.word	0x08009911
 80077e4:	08009911 	.word	0x08009911
 80077e8:	08009911 	.word	0x08009911
 80077ec:	08009911 	.word	0x08009911
 80077f0:	08007ee9 	.word	0x08007ee9
 80077f4:	80000001 	.word	0x80000001
 80077f8:	40000001 	.word	0x40000001
 80077fc:	20000001 	.word	0x20000001
 8007800:	10000001 	.word	0x10000001
 8007804:	08000001 	.word	0x08000001
 8007808:	04000001 	.word	0x04000001
 800780c:	00800001 	.word	0x00800001
 8007810:	00400001 	.word	0x00400001
 8007814:	00200001 	.word	0x00200001
 8007818:	00100001 	.word	0x00100001
 800781c:	00080001 	.word	0x00080001
 8007820:	00040001 	.word	0x00040001
 8007824:	00020001 	.word	0x00020001
 8007828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800782c:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007830:	430b      	orrs	r3, r1
 8007832:	f000 83c4 	beq.w	8007fbe <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007836:	f002 b86b 	b.w	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800783a:	4ba1      	ldr	r3, [pc, #644]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800783c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007840:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007844:	633b      	str	r3, [r7, #48]	@ 0x30
 8007846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007848:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800784c:	d036      	beq.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800784e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007850:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007854:	d86b      	bhi.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007858:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800785c:	d02b      	beq.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007864:	d863      	bhi.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800786c:	d01b      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800786e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007870:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007874:	d85b      	bhi.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007878:	2b00      	cmp	r3, #0
 800787a:	d004      	beq.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800787c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800787e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007882:	d008      	beq.n	8007896 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007884:	e053      	b.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007886:	f107 0320 	add.w	r3, r7, #32
 800788a:	4618      	mov	r0, r3
 800788c:	f7ff f8b4 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007892:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007894:	e04e      	b.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007896:	f107 0314 	add.w	r3, r7, #20
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff fa18 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078a4:	e046      	b.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078a6:	f107 0308 	add.w	r3, r7, #8
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7ff fb7c 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078b4:	e03e      	b.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80078b6:	4b83      	ldr	r3, [pc, #524]	@ (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80078b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80078ba:	e03b      	b.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80078bc:	4b80      	ldr	r3, [pc, #512]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80078c2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80078c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80078c8:	4b7d      	ldr	r3, [pc, #500]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d10c      	bne.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80078d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d109      	bne.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80078da:	4b79      	ldr	r3, [pc, #484]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	08db      	lsrs	r3, r3, #3
 80078e0:	f003 0303 	and.w	r3, r3, #3
 80078e4:	4a78      	ldr	r2, [pc, #480]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80078e6:	fa22 f303 	lsr.w	r3, r2, r3
 80078ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80078ec:	e01e      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80078ee:	4b74      	ldr	r3, [pc, #464]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80078f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078fa:	d106      	bne.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80078fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007902:	d102      	bne.n	800790a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007904:	4b71      	ldr	r3, [pc, #452]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007906:	637b      	str	r3, [r7, #52]	@ 0x34
 8007908:	e010      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800790a:	4b6d      	ldr	r3, [pc, #436]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007912:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007916:	d106      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800791a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800791e:	d102      	bne.n	8007926 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007920:	4b6b      	ldr	r3, [pc, #428]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007922:	637b      	str	r3, [r7, #52]	@ 0x34
 8007924:	e002      	b.n	800792c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007926:	2300      	movs	r3, #0
 8007928:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800792a:	e003      	b.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 800792c:	e002      	b.n	8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007932:	bf00      	nop
          }
        }
        break;
 8007934:	f001 bfef 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007938:	4b61      	ldr	r3, [pc, #388]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800793a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800793e:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8007942:	633b      	str	r3, [r7, #48]	@ 0x30
 8007944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007946:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800794a:	d036      	beq.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800794c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007952:	d86b      	bhi.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007956:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800795a:	d02b      	beq.n	80079b4 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007962:	d863      	bhi.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007966:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800796a:	d01b      	beq.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800796c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007972:	d85b      	bhi.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007976:	2b00      	cmp	r3, #0
 8007978:	d004      	beq.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800797a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800797c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007980:	d008      	beq.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007982:	e053      	b.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007984:	f107 0320 	add.w	r3, r7, #32
 8007988:	4618      	mov	r0, r3
 800798a:	f7ff f835 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007992:	e04e      	b.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff f999 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079a2:	e046      	b.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80079a4:	f107 0308 	add.w	r3, r7, #8
 80079a8:	4618      	mov	r0, r3
 80079aa:	f7ff fafd 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079b2:	e03e      	b.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80079b4:	4b43      	ldr	r3, [pc, #268]	@ (8007ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80079b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80079b8:	e03b      	b.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80079ba:	4b41      	ldr	r3, [pc, #260]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079c0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80079c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80079c6:	4b3e      	ldr	r3, [pc, #248]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d10c      	bne.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80079d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d109      	bne.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80079d8:	4b39      	ldr	r3, [pc, #228]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	08db      	lsrs	r3, r3, #3
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	4a39      	ldr	r2, [pc, #228]	@ (8007ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80079e4:	fa22 f303 	lsr.w	r3, r2, r3
 80079e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80079ea:	e01e      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80079ec:	4b34      	ldr	r3, [pc, #208]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079f8:	d106      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80079fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a00:	d102      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a02:	4b32      	ldr	r3, [pc, #200]	@ (8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007a04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a06:	e010      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a08:	4b2d      	ldr	r3, [pc, #180]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a14:	d106      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8007a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a1c:	d102      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8007ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007a20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a22:	e002      	b.n	8007a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007a28:	e003      	b.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007a2a:	e002      	b.n	8007a32 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a30:	bf00      	nop
          }
        }
        break;
 8007a32:	f001 bf70 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007a36:	4b22      	ldr	r3, [pc, #136]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a40:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d108      	bne.n	8007a5a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a48:	f107 0320 	add.w	r3, r7, #32
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7fe ffd3 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a54:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a56:	f001 bf5e 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5c:	2b40      	cmp	r3, #64	@ 0x40
 8007a5e:	d108      	bne.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a60:	f107 0314 	add.w	r3, r7, #20
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff f933 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a6e:	f001 bf52 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007a76:	f001 bf4e 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007a7a:	4b11      	ldr	r3, [pc, #68]	@ (8007ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a84:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d108      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a8c:	f107 0320 	add.w	r3, r7, #32
 8007a90:	4618      	mov	r0, r3
 8007a92:	f7fe ffb1 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a98:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a9a:	f001 bf3c 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aa0:	2b80      	cmp	r3, #128	@ 0x80
 8007aa2:	d108      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aa4:	f107 0314 	add.w	r3, r7, #20
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff f911 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ab2:	f001 bf30 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007aba:	f001 bf2c 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007abe:	bf00      	nop
 8007ac0:	44020c00 	.word	0x44020c00
 8007ac4:	00bb8000 	.word	0x00bb8000
 8007ac8:	03d09000 	.word	0x03d09000
 8007acc:	003d0900 	.word	0x003d0900
 8007ad0:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007ad4:	4b9d      	ldr	r3, [pc, #628]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007ad6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007ada:	f003 0307 	and.w	r3, r3, #7
 8007ade:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d104      	bne.n	8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007ae6:	f7fc ffd1 	bl	8004a8c <HAL_RCC_GetPCLK2Freq>
 8007aea:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007aec:	f001 bf13 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007af0:	4b96      	ldr	r3, [pc, #600]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007af8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007afc:	d10a      	bne.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d107      	bne.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b04:	f107 0314 	add.w	r3, r7, #20
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff f8e1 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b12:	e043      	b.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007b14:	4b8d      	ldr	r3, [pc, #564]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007b20:	d10a      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8007b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d107      	bne.n	8007b38 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b28:	f107 0308 	add.w	r3, r7, #8
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff fa3b 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b36:	e031      	b.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007b38:	4b84      	ldr	r3, [pc, #528]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 0302 	and.w	r3, r3, #2
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	d10c      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b46:	2b03      	cmp	r3, #3
 8007b48:	d109      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b4a:	4b80      	ldr	r3, [pc, #512]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	08db      	lsrs	r3, r3, #3
 8007b50:	f003 0303 	and.w	r3, r3, #3
 8007b54:	4a7e      	ldr	r2, [pc, #504]	@ (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007b56:	fa22 f303 	lsr.w	r3, r2, r3
 8007b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b5c:	e01e      	b.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007b5e:	4b7b      	ldr	r3, [pc, #492]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b6a:	d105      	bne.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6e:	2b04      	cmp	r3, #4
 8007b70:	d102      	bne.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8007b72:	4b78      	ldr	r3, [pc, #480]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b76:	e011      	b.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007b78:	4b74      	ldr	r3, [pc, #464]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007b7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	d106      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b88:	2b05      	cmp	r3, #5
 8007b8a:	d103      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007b8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b92:	e003      	b.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007b98:	f001 bebd 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007b9c:	f001 bebb 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007ba0:	4b6a      	ldr	r3, [pc, #424]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007ba2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007ba6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007baa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d104      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007bb2:	f7fc ff55 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 8007bb6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007bb8:	f001 bead 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007bbc:	4b63      	ldr	r3, [pc, #396]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007bc4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007bc8:	d10a      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d107      	bne.n	8007be0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bd0:	f107 0314 	add.w	r3, r7, #20
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7ff f87b 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bde:	e03d      	b.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007be2:	2b10      	cmp	r3, #16
 8007be4:	d108      	bne.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007be6:	f107 0308 	add.w	r3, r7, #8
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7ff f9dc 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bf4:	f001 be8f 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007bf8:	4b54      	ldr	r3, [pc, #336]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d10c      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c06:	2b18      	cmp	r3, #24
 8007c08:	d109      	bne.n	8007c1e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c0a:	4b50      	ldr	r3, [pc, #320]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	08db      	lsrs	r3, r3, #3
 8007c10:	f003 0303 	and.w	r3, r3, #3
 8007c14:	4a4e      	ldr	r2, [pc, #312]	@ (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007c16:	fa22 f303 	lsr.w	r3, r2, r3
 8007c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c1c:	e01e      	b.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8007c1e:	4b4b      	ldr	r3, [pc, #300]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c2a:	d105      	bne.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c2e:	2b20      	cmp	r3, #32
 8007c30:	d102      	bne.n	8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8007c32:	4b48      	ldr	r3, [pc, #288]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c36:	e011      	b.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007c38:	4b44      	ldr	r3, [pc, #272]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c3a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d106      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8007c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c48:	2b28      	cmp	r3, #40	@ 0x28
 8007c4a:	d103      	bne.n	8007c54 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8007c4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c52:	e003      	b.n	8007c5c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c58:	f001 be5d 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c5c:	f001 be5b 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007c60:	4b3a      	ldr	r3, [pc, #232]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c66:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007c6a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d104      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007c72:	f7fc fef5 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 8007c76:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c78:	f001 be4d 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007c7c:	4b33      	ldr	r3, [pc, #204]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c88:	d10a      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8c:	2b40      	cmp	r3, #64	@ 0x40
 8007c8e:	d107      	bne.n	8007ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c90:	f107 0314 	add.w	r3, r7, #20
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7ff f81b 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c9e:	e045      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cac:	d10a      	bne.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8007cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb0:	2b80      	cmp	r3, #128	@ 0x80
 8007cb2:	d107      	bne.n	8007cc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cb4:	f107 0308 	add.w	r3, r7, #8
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7ff f975 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cc2:	e033      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007cc4:	4b21      	ldr	r3, [pc, #132]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f003 0302 	and.w	r3, r3, #2
 8007ccc:	2b02      	cmp	r3, #2
 8007cce:	d10c      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8007cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cd2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007cd4:	d109      	bne.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	08db      	lsrs	r3, r3, #3
 8007cdc:	f003 0303 	and.w	r3, r3, #3
 8007ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ce6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce8:	e020      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007cea:	4b18      	ldr	r3, [pc, #96]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cf2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cf6:	d106      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cfe:	d102      	bne.n	8007d06 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8007d00:	4b14      	ldr	r3, [pc, #80]	@ (8007d54 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d04:	e012      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007d06:	4b11      	ldr	r3, [pc, #68]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007d0c:	f003 0302 	and.w	r3, r3, #2
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d107      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8007d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d16:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007d1a:	d103      	bne.n	8007d24 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8007d1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d20:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d22:	e003      	b.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d28:	f001 bdf5 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d2c:	f001 bdf3 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007d30:	4b06      	ldr	r3, [pc, #24]	@ (8007d4c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007d36:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007d3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10a      	bne.n	8007d58 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d42:	f7fc fe8d 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 8007d46:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d48:	f001 bde5 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d4c:	44020c00 	.word	0x44020c00
 8007d50:	03d09000 	.word	0x03d09000
 8007d54:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007d58:	4ba0      	ldr	r3, [pc, #640]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d64:	d10b      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8007d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d6c:	d107      	bne.n	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d6e:	f107 0314 	add.w	r3, r7, #20
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fe ffac 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d7c:	e047      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007d7e:	4b97      	ldr	r3, [pc, #604]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d8a:	d10b      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d92:	d107      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d94:	f107 0308 	add.w	r3, r7, #8
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7ff f905 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da2:	e034      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007da4:	4b8d      	ldr	r3, [pc, #564]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0302 	and.w	r3, r3, #2
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d10d      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007db6:	d109      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007db8:	4b88      	ldr	r3, [pc, #544]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	08db      	lsrs	r3, r3, #3
 8007dbe:	f003 0303 	and.w	r3, r3, #3
 8007dc2:	4a87      	ldr	r2, [pc, #540]	@ (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8007dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dca:	e020      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007dcc:	4b83      	ldr	r3, [pc, #524]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dd8:	d106      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ddc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007de0:	d102      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8007de2:	4b80      	ldr	r3, [pc, #512]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007de6:	e012      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007de8:	4b7c      	ldr	r3, [pc, #496]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007dea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d107      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007dfc:	d103      	bne.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8007dfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e04:	e003      	b.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8007e06:	2300      	movs	r3, #0
 8007e08:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e0a:	f001 bd84 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e0e:	f001 bd82 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007e12:	4b72      	ldr	r3, [pc, #456]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007e18:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007e1c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d104      	bne.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007e24:	f7fc fe1c 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 8007e28:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007e2a:	f001 bd74 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007e2e:	4b6b      	ldr	r3, [pc, #428]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e3a:	d10b      	bne.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e42:	d107      	bne.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e44:	f107 0314 	add.w	r3, r7, #20
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f7fe ff41 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e52:	e047      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007e54:	4b61      	ldr	r3, [pc, #388]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e60:	d10b      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e68:	d107      	bne.n	8007e7a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e6a:	f107 0308 	add.w	r3, r7, #8
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7ff f89a 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e78:	e034      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007e7a:	4b58      	ldr	r3, [pc, #352]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0302 	and.w	r3, r3, #2
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d10d      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e8c:	d109      	bne.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e8e:	4b53      	ldr	r3, [pc, #332]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	08db      	lsrs	r3, r3, #3
 8007e94:	f003 0303 	and.w	r3, r3, #3
 8007e98:	4a51      	ldr	r2, [pc, #324]	@ (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ea0:	e020      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eae:	d106      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8007eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007eb6:	d102      	bne.n	8007ebe <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8007eb8:	4b4a      	ldr	r3, [pc, #296]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ebc:	e012      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007ebe:	4b47      	ldr	r3, [pc, #284]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007ec4:	f003 0302 	and.w	r3, r3, #2
 8007ec8:	2b02      	cmp	r3, #2
 8007eca:	d107      	bne.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8007ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ece:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007ed2:	d103      	bne.n	8007edc <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8007ed4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eda:	e003      	b.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8007edc:	2300      	movs	r3, #0
 8007ede:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007ee0:	f001 bd19 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ee4:	f001 bd17 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007eee:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8007ef2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d104      	bne.n	8007f04 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007efa:	f7fc fdb1 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 8007efe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f00:	f001 bd09 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007f04:	4b35      	ldr	r3, [pc, #212]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007f0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007f10:	d10b      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f18:	d107      	bne.n	8007f2a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007f1a:	f107 0314 	add.w	r3, r7, #20
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe fed6 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f28:	e047      	b.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007f32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f36:	d10b      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8007f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f3e:	d107      	bne.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f40:	f107 0308 	add.w	r3, r7, #8
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7ff f82f 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f4e:	e034      	b.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007f50:	4b22      	ldr	r3, [pc, #136]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d10d      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8007f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f5e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007f62:	d109      	bne.n	8007f78 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f64:	4b1d      	ldr	r3, [pc, #116]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	08db      	lsrs	r3, r3, #3
 8007f6a:	f003 0303 	and.w	r3, r3, #3
 8007f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8007fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007f70:	fa22 f303 	lsr.w	r3, r2, r3
 8007f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f76:	e020      	b.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007f78:	4b18      	ldr	r3, [pc, #96]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f84:	d106      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8007f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f8c:	d102      	bne.n	8007f94 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8007f8e:	4b15      	ldr	r3, [pc, #84]	@ (8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f92:	e012      	b.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007f94:	4b11      	ldr	r3, [pc, #68]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d107      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007fa8:	d103      	bne.n	8007fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8007faa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007fae:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fb0:	e003      	b.n	8007fba <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007fb6:	f001 bcae 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007fba:	f001 bcac 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8007fbe:	4b07      	ldr	r3, [pc, #28]	@ (8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007fc4:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8007fc8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8007fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10b      	bne.n	8007fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007fd0:	f7fc fd46 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 8007fd4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8007fd6:	f001 bc9e 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007fda:	bf00      	nop
 8007fdc:	44020c00 	.word	0x44020c00
 8007fe0:	03d09000 	.word	0x03d09000
 8007fe4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007fe8:	4ba0      	ldr	r3, [pc, #640]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ff0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ff4:	d10b      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ffc:	d107      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ffe:	f107 0314 	add.w	r3, r7, #20
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fe64 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	637b      	str	r3, [r7, #52]	@ 0x34
 800800c:	e047      	b.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800800e:	4b97      	ldr	r3, [pc, #604]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008016:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800801a:	d10b      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800801c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008022:	d107      	bne.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008024:	f107 0308 	add.w	r3, r7, #8
 8008028:	4618      	mov	r0, r3
 800802a:	f7fe ffbd 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	637b      	str	r3, [r7, #52]	@ 0x34
 8008032:	e034      	b.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008034:	4b8d      	ldr	r3, [pc, #564]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0302 	and.w	r3, r3, #2
 800803c:	2b02      	cmp	r3, #2
 800803e:	d10d      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8008040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008042:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008046:	d109      	bne.n	800805c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008048:	4b88      	ldr	r3, [pc, #544]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	08db      	lsrs	r3, r3, #3
 800804e:	f003 0303 	and.w	r3, r3, #3
 8008052:	4a87      	ldr	r2, [pc, #540]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008054:	fa22 f303 	lsr.w	r3, r2, r3
 8008058:	637b      	str	r3, [r7, #52]	@ 0x34
 800805a:	e020      	b.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800805c:	4b83      	ldr	r3, [pc, #524]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008068:	d106      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800806a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800806c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008070:	d102      	bne.n	8008078 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8008072:	4b80      	ldr	r3, [pc, #512]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008074:	637b      	str	r3, [r7, #52]	@ 0x34
 8008076:	e012      	b.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008078:	4b7c      	ldr	r3, [pc, #496]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800807a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800807e:	f003 0302 	and.w	r3, r3, #2
 8008082:	2b02      	cmp	r3, #2
 8008084:	d107      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 8008086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008088:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800808c:	d103      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800808e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008092:	637b      	str	r3, [r7, #52]	@ 0x34
 8008094:	e003      	b.n	800809e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800809a:	f001 bc3c 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800809e:	f001 bc3a 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80080a2:	4b72      	ldr	r3, [pc, #456]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80080a8:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80080ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80080ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d104      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80080b4:	f7fc fcd4 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 80080b8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80080ba:	f001 bc2c 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80080be:	4b6b      	ldr	r3, [pc, #428]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080ca:	d10b      	bne.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80080cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080d2:	d107      	bne.n	80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080d4:	f107 0314 	add.w	r3, r7, #20
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fe fdf9 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80080e2:	e047      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80080e4:	4b61      	ldr	r3, [pc, #388]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080f0:	d10b      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 80080f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080f8:	d107      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080fa:	f107 0308 	add.w	r3, r7, #8
 80080fe:	4618      	mov	r0, r3
 8008100:	f7fe ff52 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	637b      	str	r3, [r7, #52]	@ 0x34
 8008108:	e034      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800810a:	4b58      	ldr	r3, [pc, #352]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b02      	cmp	r3, #2
 8008114:	d10d      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800811c:	d109      	bne.n	8008132 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800811e:	4b53      	ldr	r3, [pc, #332]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	08db      	lsrs	r3, r3, #3
 8008124:	f003 0303 	and.w	r3, r3, #3
 8008128:	4a51      	ldr	r2, [pc, #324]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800812a:	fa22 f303 	lsr.w	r3, r2, r3
 800812e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008130:	e020      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008132:	4b4e      	ldr	r3, [pc, #312]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800813a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800813e:	d106      	bne.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008142:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008146:	d102      	bne.n	800814e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 8008148:	4b4a      	ldr	r3, [pc, #296]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800814a:	637b      	str	r3, [r7, #52]	@ 0x34
 800814c:	e012      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800814e:	4b47      	ldr	r3, [pc, #284]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b02      	cmp	r3, #2
 800815a:	d107      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800815c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008162:	d103      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8008164:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008168:	637b      	str	r3, [r7, #52]	@ 0x34
 800816a:	e003      	b.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008170:	f001 bbd1 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008174:	f001 bbcf 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008178:	4b3c      	ldr	r3, [pc, #240]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800817a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800817e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008182:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008186:	2b00      	cmp	r3, #0
 8008188:	d104      	bne.n	8008194 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800818a:	f7fc fc69 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 800818e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008190:	f001 bbc1 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008194:	4b35      	ldr	r3, [pc, #212]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800819c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80081a0:	d10b      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80081a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80081a8:	d107      	bne.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081aa:	f107 0314 	add.w	r3, r7, #20
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fd8e 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b8:	e047      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80081ba:	4b2c      	ldr	r3, [pc, #176]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80081c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80081c6:	d10b      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80081c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80081ce:	d107      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081d0:	f107 0308 	add.w	r3, r7, #8
 80081d4:	4618      	mov	r0, r3
 80081d6:	f7fe fee7 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081de:	e034      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80081e0:	4b22      	ldr	r3, [pc, #136]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d10d      	bne.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 80081ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80081f2:	d109      	bne.n	8008208 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081f4:	4b1d      	ldr	r3, [pc, #116]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	08db      	lsrs	r3, r3, #3
 80081fa:	f003 0303 	and.w	r3, r3, #3
 80081fe:	4a1c      	ldr	r2, [pc, #112]	@ (8008270 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008200:	fa22 f303 	lsr.w	r3, r2, r3
 8008204:	637b      	str	r3, [r7, #52]	@ 0x34
 8008206:	e020      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008208:	4b18      	ldr	r3, [pc, #96]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008214:	d106      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008218:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800821c:	d102      	bne.n	8008224 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800821e:	4b15      	ldr	r3, [pc, #84]	@ (8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008220:	637b      	str	r3, [r7, #52]	@ 0x34
 8008222:	e012      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008224:	4b11      	ldr	r3, [pc, #68]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008226:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800822a:	f003 0302 	and.w	r3, r3, #2
 800822e:	2b02      	cmp	r3, #2
 8008230:	d107      	bne.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8008232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008234:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008238:	d103      	bne.n	8008242 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800823a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800823e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008240:	e003      	b.n	800824a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8008242:	2300      	movs	r3, #0
 8008244:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008246:	f001 bb66 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800824a:	f001 bb64 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800824e:	4b07      	ldr	r3, [pc, #28]	@ (800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008254:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 8008258:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800825a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10b      	bne.n	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008260:	f7fc fbfe 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 8008264:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 8008266:	f001 bb56 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800826a:	bf00      	nop
 800826c:	44020c00 	.word	0x44020c00
 8008270:	03d09000 	.word	0x03d09000
 8008274:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8008278:	4ba1      	ldr	r3, [pc, #644]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008280:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008284:	d10b      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800828c:	d107      	bne.n	800829e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800828e:	f107 0314 	add.w	r3, r7, #20
 8008292:	4618      	mov	r0, r3
 8008294:	f7fe fd1c 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008298:	69bb      	ldr	r3, [r7, #24]
 800829a:	637b      	str	r3, [r7, #52]	@ 0x34
 800829c:	e047      	b.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800829e:	4b98      	ldr	r3, [pc, #608]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80082a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80082aa:	d10b      	bne.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80082ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80082b2:	d107      	bne.n	80082c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082b4:	f107 0308 	add.w	r3, r7, #8
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe fe75 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80082c2:	e034      	b.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80082c4:	4b8e      	ldr	r3, [pc, #568]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d10d      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80082d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082d2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80082d6:	d109      	bne.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082d8:	4b89      	ldr	r3, [pc, #548]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	08db      	lsrs	r3, r3, #3
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	4a88      	ldr	r2, [pc, #544]	@ (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80082e4:	fa22 f303 	lsr.w	r3, r2, r3
 80082e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082ea:	e020      	b.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80082ec:	4b84      	ldr	r3, [pc, #528]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082f8:	d106      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80082fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008300:	d102      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8008302:	4b81      	ldr	r3, [pc, #516]	@ (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008304:	637b      	str	r3, [r7, #52]	@ 0x34
 8008306:	e012      	b.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008308:	4b7d      	ldr	r3, [pc, #500]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800830a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800830e:	f003 0302 	and.w	r3, r3, #2
 8008312:	2b02      	cmp	r3, #2
 8008314:	d107      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8008316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008318:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800831c:	d103      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800831e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008322:	637b      	str	r3, [r7, #52]	@ 0x34
 8008324:	e003      	b.n	800832e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8008326:	2300      	movs	r3, #0
 8008328:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800832a:	f001 baf4 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800832e:	f001 baf2 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008332:	4b73      	ldr	r3, [pc, #460]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008334:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008338:	f003 0307 	and.w	r3, r3, #7
 800833c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800833e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008340:	2b00      	cmp	r3, #0
 8008342:	d104      	bne.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008344:	f7fc fb8c 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 8008348:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800834a:	f001 bae4 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800834e:	4b6c      	ldr	r3, [pc, #432]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008356:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800835a:	d10a      	bne.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800835c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835e:	2b01      	cmp	r3, #1
 8008360:	d107      	bne.n	8008372 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008362:	f107 0314 	add.w	r3, r7, #20
 8008366:	4618      	mov	r0, r3
 8008368:	f7fe fcb2 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800836c:	69bb      	ldr	r3, [r7, #24]
 800836e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008370:	e043      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8008372:	4b63      	ldr	r3, [pc, #396]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800837a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800837e:	d10a      	bne.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8008380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008382:	2b02      	cmp	r3, #2
 8008384:	d107      	bne.n	8008396 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008386:	f107 0308 	add.w	r3, r7, #8
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe fe0c 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	637b      	str	r3, [r7, #52]	@ 0x34
 8008394:	e031      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8008396:	4b5a      	ldr	r3, [pc, #360]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d10c      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d109      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80083a8:	4b55      	ldr	r3, [pc, #340]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	08db      	lsrs	r3, r3, #3
 80083ae:	f003 0303 	and.w	r3, r3, #3
 80083b2:	4a54      	ldr	r2, [pc, #336]	@ (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80083b4:	fa22 f303 	lsr.w	r3, r2, r3
 80083b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083ba:	e01e      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80083bc:	4b50      	ldr	r3, [pc, #320]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80083c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083c8:	d105      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80083ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d102      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80083d0:	4b4d      	ldr	r3, [pc, #308]	@ (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80083d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80083d4:	e011      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80083d6:	4b4a      	ldr	r3, [pc, #296]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80083dc:	f003 0302 	and.w	r3, r3, #2
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d106      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	2b05      	cmp	r3, #5
 80083e8:	d103      	bne.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80083ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80083f0:	e003      	b.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083f6:	f001 ba8e 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083fa:	f001 ba8c 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 80083fe:	4b40      	ldr	r3, [pc, #256]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008400:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008404:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008408:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800840a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840c:	2b00      	cmp	r3, #0
 800840e:	d104      	bne.n	800841a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008410:	f7fc fb26 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 8008414:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008416:	f001 ba7e 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800841a:	4b39      	ldr	r3, [pc, #228]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008422:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008426:	d10a      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800842a:	2b10      	cmp	r3, #16
 800842c:	d107      	bne.n	800843e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800842e:	f107 0314 	add.w	r3, r7, #20
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fc4c 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	637b      	str	r3, [r7, #52]	@ 0x34
 800843c:	e043      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800843e:	4b30      	ldr	r3, [pc, #192]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008446:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800844a:	d10a      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800844c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800844e:	2b20      	cmp	r3, #32
 8008450:	d107      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008452:	f107 0308 	add.w	r3, r7, #8
 8008456:	4618      	mov	r0, r3
 8008458:	f7fe fda6 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008460:	e031      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8008462:	4b27      	ldr	r3, [pc, #156]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 0302 	and.w	r3, r3, #2
 800846a:	2b02      	cmp	r3, #2
 800846c:	d10c      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	2b30      	cmp	r3, #48	@ 0x30
 8008472:	d109      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008474:	4b22      	ldr	r3, [pc, #136]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	08db      	lsrs	r3, r3, #3
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	4a21      	ldr	r2, [pc, #132]	@ (8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008480:	fa22 f303 	lsr.w	r3, r2, r3
 8008484:	637b      	str	r3, [r7, #52]	@ 0x34
 8008486:	e01e      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8008488:	4b1d      	ldr	r3, [pc, #116]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008494:	d105      	bne.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8008496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008498:	2b40      	cmp	r3, #64	@ 0x40
 800849a:	d102      	bne.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800849c:	4b1a      	ldr	r3, [pc, #104]	@ (8008508 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800849e:	637b      	str	r3, [r7, #52]	@ 0x34
 80084a0:	e011      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80084a2:	4b17      	ldr	r3, [pc, #92]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	2b02      	cmp	r3, #2
 80084ae:	d106      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80084b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b2:	2b50      	cmp	r3, #80	@ 0x50
 80084b4:	d103      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80084b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80084ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80084bc:	e003      	b.n	80084c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80084be:	2300      	movs	r3, #0
 80084c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084c2:	f001 ba28 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80084c6:	f001 ba26 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80084ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80084d0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80084d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80084d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d104      	bne.n	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80084dc:	f7fc faec 	bl	8004ab8 <HAL_RCC_GetPCLK3Freq>
 80084e0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80084e2:	f001 ba18 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80084e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80084ec:	d10e      	bne.n	800850c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084ee:	f107 0314 	add.w	r3, r7, #20
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7fe fbec 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80084fc:	f001 ba0b 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008500:	44020c00 	.word	0x44020c00
 8008504:	03d09000 	.word	0x03d09000
 8008508:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800850c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008512:	d108      	bne.n	8008526 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008514:	f107 0308 	add.w	r3, r7, #8
 8008518:	4618      	mov	r0, r3
 800851a:	f7fe fd45 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008522:	f001 b9f8 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008526:	4ba4      	ldr	r3, [pc, #656]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b02      	cmp	r3, #2
 8008530:	d10d      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008534:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008538:	d109      	bne.n	800854e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800853a:	4b9f      	ldr	r3, [pc, #636]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	08db      	lsrs	r3, r3, #3
 8008540:	f003 0303 	and.w	r3, r3, #3
 8008544:	4a9d      	ldr	r2, [pc, #628]	@ (80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008546:	fa22 f303 	lsr.w	r3, r2, r3
 800854a:	637b      	str	r3, [r7, #52]	@ 0x34
 800854c:	e020      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800854e:	4b9a      	ldr	r3, [pc, #616]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800855a:	d106      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800855c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800855e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008562:	d102      	bne.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008564:	4b96      	ldr	r3, [pc, #600]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008566:	637b      	str	r3, [r7, #52]	@ 0x34
 8008568:	e012      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800856a:	4b93      	ldr	r3, [pc, #588]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800856c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008570:	f003 0302 	and.w	r3, r3, #2
 8008574:	2b02      	cmp	r3, #2
 8008576:	d107      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8008578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800857e:	d103      	bne.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008580:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008584:	637b      	str	r3, [r7, #52]	@ 0x34
 8008586:	e003      	b.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8008588:	2300      	movs	r3, #0
 800858a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800858c:	f001 b9c3 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008590:	f001 b9c1 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008594:	4b88      	ldr	r3, [pc, #544]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008596:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800859a:	f003 0307 	and.w	r3, r3, #7
 800859e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80085a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d104      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80085a6:	f7fc fa3f 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 80085aa:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80085ac:	f001 b9b3 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80085b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d104      	bne.n	80085c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80085b6:	f7fc f90b 	bl	80047d0 <HAL_RCC_GetSysClockFreq>
 80085ba:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80085bc:	f001 b9ab 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80085c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d108      	bne.n	80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085c6:	f107 0314 	add.w	r3, r7, #20
 80085ca:	4618      	mov	r0, r3
 80085cc:	f7fe fb80 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80085d4:	f001 b99f 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80085d8:	4b77      	ldr	r3, [pc, #476]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085e4:	d105      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80085e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e8:	2b03      	cmp	r3, #3
 80085ea:	d102      	bne.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 80085ec:	4b75      	ldr	r3, [pc, #468]	@ (80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 80085ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80085f0:	e023      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80085f2:	4b71      	ldr	r3, [pc, #452]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d10c      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 80085fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008600:	2b04      	cmp	r3, #4
 8008602:	d109      	bne.n	8008618 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008604:	4b6c      	ldr	r3, [pc, #432]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	08db      	lsrs	r3, r3, #3
 800860a:	f003 0303 	and.w	r3, r3, #3
 800860e:	4a6b      	ldr	r2, [pc, #428]	@ (80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008610:	fa22 f303 	lsr.w	r3, r2, r3
 8008614:	637b      	str	r3, [r7, #52]	@ 0x34
 8008616:	e010      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008618:	4b67      	ldr	r3, [pc, #412]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008620:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008624:	d105      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008628:	2b05      	cmp	r3, #5
 800862a:	d102      	bne.n	8008632 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800862c:	4b64      	ldr	r3, [pc, #400]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800862e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008630:	e003      	b.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008632:	2300      	movs	r3, #0
 8008634:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008636:	f001 b96e 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800863a:	f001 b96c 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800863e:	4b5e      	ldr	r3, [pc, #376]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008644:	f003 0308 	and.w	r3, r3, #8
 8008648:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800864a:	4b5b      	ldr	r3, [pc, #364]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800864c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008650:	f003 0302 	and.w	r3, r3, #2
 8008654:	2b02      	cmp	r3, #2
 8008656:	d106      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800865a:	2b00      	cmp	r3, #0
 800865c:	d103      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800865e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008662:	637b      	str	r3, [r7, #52]	@ 0x34
 8008664:	e012      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008666:	4b54      	ldr	r3, [pc, #336]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800866c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008670:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008674:	d106      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8008676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008678:	2b08      	cmp	r3, #8
 800867a:	d103      	bne.n	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800867c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008680:	637b      	str	r3, [r7, #52]	@ 0x34
 8008682:	e003      	b.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008684:	2300      	movs	r3, #0
 8008686:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008688:	f001 b945 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800868c:	f001 b943 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008690:	4b49      	ldr	r3, [pc, #292]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008692:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008696:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800869a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d104      	bne.n	80086ac <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80086a2:	f7fc f9dd 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 80086a6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80086a8:	f001 b935 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80086ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086b2:	d108      	bne.n	80086c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086b4:	f107 0308 	add.w	r3, r7, #8
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fe fc75 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086c2:	f001 b928 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80086c6:	4b3c      	ldr	r3, [pc, #240]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 0302 	and.w	r3, r3, #2
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d10d      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80086d8:	d109      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086da:	4b37      	ldr	r3, [pc, #220]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	08db      	lsrs	r3, r3, #3
 80086e0:	f003 0303 	and.w	r3, r3, #3
 80086e4:	4a35      	ldr	r2, [pc, #212]	@ (80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80086e6:	fa22 f303 	lsr.w	r3, r2, r3
 80086ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ec:	e011      	b.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 80086ee:	4b32      	ldr	r3, [pc, #200]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086fa:	d106      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 80086fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008702:	d102      	bne.n	800870a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008704:	4b2e      	ldr	r3, [pc, #184]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008706:	637b      	str	r3, [r7, #52]	@ 0x34
 8008708:	e003      	b.n	8008712 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800870e:	f001 b902 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008712:	f001 b900 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008716:	4b28      	ldr	r3, [pc, #160]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008718:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800871c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008720:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008724:	2b00      	cmp	r3, #0
 8008726:	d104      	bne.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008728:	f7fc f99a 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 800872c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800872e:	f001 b8f2 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008734:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008738:	d108      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800873a:	f107 0308 	add.w	r3, r7, #8
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fc32 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008748:	f001 b8e5 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800874c:	4b1a      	ldr	r3, [pc, #104]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0302 	and.w	r3, r3, #2
 8008754:	2b02      	cmp	r3, #2
 8008756:	d10d      	bne.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800875e:	d109      	bne.n	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008760:	4b15      	ldr	r3, [pc, #84]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	08db      	lsrs	r3, r3, #3
 8008766:	f003 0303 	and.w	r3, r3, #3
 800876a:	4a14      	ldr	r2, [pc, #80]	@ (80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800876c:	fa22 f303 	lsr.w	r3, r2, r3
 8008770:	637b      	str	r3, [r7, #52]	@ 0x34
 8008772:	e011      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008774:	4b10      	ldr	r3, [pc, #64]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800877c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008780:	d106      	bne.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8008782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008784:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008788:	d102      	bne.n	8008790 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800878a:	4b0d      	ldr	r3, [pc, #52]	@ (80087c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800878c:	637b      	str	r3, [r7, #52]	@ 0x34
 800878e:	e003      	b.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008790:	2300      	movs	r3, #0
 8008792:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008794:	f001 b8bf 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008798:	f001 b8bd 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800879c:	4b06      	ldr	r3, [pc, #24]	@ (80087b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800879e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80087a2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80087a6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 80087a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10c      	bne.n	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80087ae:	f7fc f983 	bl	8004ab8 <HAL_RCC_GetPCLK3Freq>
 80087b2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 80087b4:	f001 b8af 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80087b8:	44020c00 	.word	0x44020c00
 80087bc:	03d09000 	.word	0x03d09000
 80087c0:	003d0900 	.word	0x003d0900
 80087c4:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 80087c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087ce:	d108      	bne.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087d0:	f107 0308 	add.w	r3, r7, #8
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fe fbe7 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087de:	f001 b89a 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 80087e2:	4b9f      	ldr	r3, [pc, #636]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 0302 	and.w	r3, r3, #2
 80087ea:	2b02      	cmp	r3, #2
 80087ec:	d10d      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 80087ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087f4:	d109      	bne.n	800880a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80087f6:	4b9a      	ldr	r3, [pc, #616]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	08db      	lsrs	r3, r3, #3
 80087fc:	f003 0303 	and.w	r3, r3, #3
 8008800:	4a98      	ldr	r2, [pc, #608]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008802:	fa22 f303 	lsr.w	r3, r2, r3
 8008806:	637b      	str	r3, [r7, #52]	@ 0x34
 8008808:	e011      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800880a:	4b95      	ldr	r3, [pc, #596]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008812:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008816:	d106      	bne.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800881e:	d102      	bne.n	8008826 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008820:	4b91      	ldr	r3, [pc, #580]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008822:	637b      	str	r3, [r7, #52]	@ 0x34
 8008824:	e003      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008826:	2300      	movs	r3, #0
 8008828:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800882a:	f001 b874 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800882e:	f001 b872 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008832:	4b8b      	ldr	r3, [pc, #556]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008834:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008838:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800883c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008840:	2b00      	cmp	r3, #0
 8008842:	d104      	bne.n	800884e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008844:	f7fc f938 	bl	8004ab8 <HAL_RCC_GetPCLK3Freq>
 8008848:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800884a:	f001 b864 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800884e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008850:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008854:	d108      	bne.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008856:	f107 0308 	add.w	r3, r7, #8
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe fba4 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008864:	f001 b857 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008868:	4b7d      	ldr	r3, [pc, #500]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0302 	and.w	r3, r3, #2
 8008870:	2b02      	cmp	r3, #2
 8008872:	d10d      	bne.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008876:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800887a:	d109      	bne.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800887c:	4b78      	ldr	r3, [pc, #480]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	08db      	lsrs	r3, r3, #3
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	4a77      	ldr	r2, [pc, #476]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008888:	fa22 f303 	lsr.w	r3, r2, r3
 800888c:	637b      	str	r3, [r7, #52]	@ 0x34
 800888e:	e011      	b.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008890:	4b73      	ldr	r3, [pc, #460]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800889c:	d106      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800889e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80088a4:	d102      	bne.n	80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 80088a6:	4b70      	ldr	r3, [pc, #448]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 80088a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80088aa:	e003      	b.n	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 80088ac:	2300      	movs	r3, #0
 80088ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088b0:	f001 b831 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088b4:	f001 b82f 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 80088b8:	4b69      	ldr	r3, [pc, #420]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088be:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80088c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 80088c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d104      	bne.n	80088d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80088ca:	f7fc f8c9 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 80088ce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 80088d0:	f001 b821 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 80088d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088da:	d108      	bne.n	80088ee <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088dc:	f107 0308 	add.w	r3, r7, #8
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fe fb61 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088ea:	f001 b814 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 80088ee:	4b5c      	ldr	r3, [pc, #368]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	d10e      	bne.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 80088fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008900:	d10a      	bne.n	8008918 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008902:	4b57      	ldr	r3, [pc, #348]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	08db      	lsrs	r3, r3, #3
 8008908:	f003 0303 	and.w	r3, r3, #3
 800890c:	4a55      	ldr	r2, [pc, #340]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800890e:	fa22 f303 	lsr.w	r3, r2, r3
 8008912:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008914:	f000 bfff 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800891c:	f000 bffb 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008920:	4b4f      	ldr	r3, [pc, #316]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008922:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008926:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800892a:	633b      	str	r3, [r7, #48]	@ 0x30
 800892c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008932:	d056      	beq.n	80089e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008936:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800893a:	f200 808b 	bhi.w	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800893e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008944:	d03e      	beq.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8008946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800894c:	f200 8082 	bhi.w	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008952:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008956:	d027      	beq.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8008958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800895a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800895e:	d879      	bhi.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008962:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008966:	d017      	beq.n	8008998 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8008968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800896a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800896e:	d871      	bhi.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008972:	2b00      	cmp	r3, #0
 8008974:	d004      	beq.n	8008980 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8008976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008978:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800897c:	d004      	beq.n	8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800897e:	e069      	b.n	8008a54 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008980:	f7fc f89a 	bl	8004ab8 <HAL_RCC_GetPCLK3Freq>
 8008984:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008986:	e068      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008988:	f107 0314 	add.w	r3, r7, #20
 800898c:	4618      	mov	r0, r3
 800898e:	f7fe f99f 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008996:	e060      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008998:	f107 0308 	add.w	r3, r7, #8
 800899c:	4618      	mov	r0, r3
 800899e:	f7fe fb03 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089a6:	e058      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80089a8:	4b2d      	ldr	r3, [pc, #180]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80089aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089ae:	f003 0302 	and.w	r3, r3, #2
 80089b2:	2b02      	cmp	r3, #2
 80089b4:	d103      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 80089b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ba:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80089bc:	e04d      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089c2:	e04a      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80089c4:	4b26      	ldr	r3, [pc, #152]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80089c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80089ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089d2:	d103      	bne.n	80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 80089d4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80089d8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80089da:	e03e      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80089e0:	e03b      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089e2:	4b1f      	ldr	r3, [pc, #124]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80089e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80089e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80089ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089ee:	4b1c      	ldr	r3, [pc, #112]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0302 	and.w	r3, r3, #2
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d10c      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 80089fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d109      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a00:	4b17      	ldr	r3, [pc, #92]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	08db      	lsrs	r3, r3, #3
 8008a06:	f003 0303 	and.w	r3, r3, #3
 8008a0a:	4a16      	ldr	r2, [pc, #88]	@ (8008a64 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a12:	e01e      	b.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008a14:	4b12      	ldr	r3, [pc, #72]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a20:	d106      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a28:	d102      	bne.n	8008a30 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008a2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a2e:	e010      	b.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008a30:	4b0b      	ldr	r3, [pc, #44]	@ (8008a60 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a3c:	d106      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008a3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a44:	d102      	bne.n	8008a4c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008a46:	4b09      	ldr	r3, [pc, #36]	@ (8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008a48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a4a:	e002      	b.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008a50:	e003      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008a52:	e002      	b.n	8008a5a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008a54:	2300      	movs	r3, #0
 8008a56:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008a58:	bf00      	nop
          }
        }
        break;
 8008a5a:	f000 bf5c 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a5e:	bf00      	nop
 8008a60:	44020c00 	.word	0x44020c00
 8008a64:	03d09000 	.word	0x03d09000
 8008a68:	003d0900 	.word	0x003d0900
 8008a6c:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008a70:	4b9e      	ldr	r3, [pc, #632]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008a72:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008a76:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008a7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a7e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008a82:	d056      	beq.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a86:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008a8a:	f200 808b 	bhi.w	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a94:	d03e      	beq.n	8008b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008a9c:	f200 8082 	bhi.w	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008aa6:	d027      	beq.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aaa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008aae:	d879      	bhi.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ab6:	d017      	beq.n	8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008abe:	d871      	bhi.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d004      	beq.n	8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008acc:	d004      	beq.n	8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8008ace:	e069      	b.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008ad0:	f7fb ffc6 	bl	8004a60 <HAL_RCC_GetPCLK1Freq>
 8008ad4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008ad6:	e068      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ad8:	f107 0314 	add.w	r3, r7, #20
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe f8f7 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ae6:	e060      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ae8:	f107 0308 	add.w	r3, r7, #8
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fe fa5b 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008af6:	e058      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008af8:	4b7c      	ldr	r3, [pc, #496]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008afa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008afe:	f003 0302 	and.w	r3, r3, #2
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d103      	bne.n	8008b0e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8008b06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b0a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b0c:	e04d      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b12:	e04a      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008b14:	4b75      	ldr	r3, [pc, #468]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b22:	d103      	bne.n	8008b2c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8008b24:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008b28:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b2a:	e03e      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b30:	e03b      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b32:	4b6e      	ldr	r3, [pc, #440]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b38:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b3e:	4b6b      	ldr	r3, [pc, #428]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d10c      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8008b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d109      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b50:	4b66      	ldr	r3, [pc, #408]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	08db      	lsrs	r3, r3, #3
 8008b56:	f003 0303 	and.w	r3, r3, #3
 8008b5a:	4a65      	ldr	r2, [pc, #404]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b62:	e01e      	b.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b64:	4b61      	ldr	r3, [pc, #388]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b70:	d106      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8008b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b78:	d102      	bne.n	8008b80 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008b7a:	4b5e      	ldr	r3, [pc, #376]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b7e:	e010      	b.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b80:	4b5a      	ldr	r3, [pc, #360]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b8c:	d106      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b94:	d102      	bne.n	8008b9c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008b96:	4b58      	ldr	r3, [pc, #352]	@ (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008b98:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b9a:	e002      	b.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008ba0:	e003      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8008ba2:	e002      	b.n	8008baa <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ba8:	bf00      	nop
          }
        }
        break;
 8008baa:	f000 beb4 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008bae:	4b4f      	ldr	r3, [pc, #316]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008bb0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008bb4:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008bb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bc0:	d056      	beq.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8008bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008bc8:	f200 808b 	bhi.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bd2:	d03e      	beq.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8008bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008bda:	f200 8082 	bhi.w	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008be4:	d027      	beq.n	8008c36 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8008be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008bec:	d879      	bhi.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bf4:	d017      	beq.n	8008c26 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bfc:	d871      	bhi.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d004      	beq.n	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8008c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c0a:	d004      	beq.n	8008c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008c0c:	e069      	b.n	8008ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008c0e:	f7fb ff53 	bl	8004ab8 <HAL_RCC_GetPCLK3Freq>
 8008c12:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008c14:	e068      	b.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c16:	f107 0314 	add.w	r3, r7, #20
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f7fe f858 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c24:	e060      	b.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c26:	f107 0308 	add.w	r3, r7, #8
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fe f9bc 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c34:	e058      	b.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008c36:	4b2d      	ldr	r3, [pc, #180]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c3c:	f003 0302 	and.w	r3, r3, #2
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d103      	bne.n	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8008c44:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c48:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008c4a:	e04d      	b.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c50:	e04a      	b.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008c52:	4b26      	ldr	r3, [pc, #152]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c60:	d103      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8008c62:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008c66:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008c68:	e03e      	b.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c6e:	e03b      	b.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c70:	4b1e      	ldr	r3, [pc, #120]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008c72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c76:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0302 	and.w	r3, r3, #2
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d10c      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d109      	bne.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c8e:	4b17      	ldr	r3, [pc, #92]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	08db      	lsrs	r3, r3, #3
 8008c94:	f003 0303 	and.w	r3, r3, #3
 8008c98:	4a15      	ldr	r2, [pc, #84]	@ (8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ca0:	e01e      	b.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ca2:	4b12      	ldr	r3, [pc, #72]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008caa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cae:	d106      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8008cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cb6:	d102      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cbc:	e010      	b.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8008cec <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cc6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cca:	d106      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8008ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cd2:	d102      	bne.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008cd4:	4b08      	ldr	r3, [pc, #32]	@ (8008cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008cd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cd8:	e002      	b.n	8008ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008cde:	e003      	b.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8008ce0:	e002      	b.n	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ce6:	bf00      	nop
          }
        }
        break;
 8008ce8:	f000 be15 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008cec:	44020c00 	.word	0x44020c00
 8008cf0:	03d09000 	.word	0x03d09000
 8008cf4:	003d0900 	.word	0x003d0900
 8008cf8:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008cfc:	4b9e      	ldr	r3, [pc, #632]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008cfe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008d02:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8008d06:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d0a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008d0e:	d056      	beq.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8008d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d12:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008d16:	f200 808b 	bhi.w	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d20:	d03e      	beq.n	8008da0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8008d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d28:	f200 8082 	bhi.w	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d32:	d027      	beq.n	8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8008d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d3a:	d879      	bhi.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d42:	d017      	beq.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8008d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d46:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d4a:	d871      	bhi.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d004      	beq.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8008d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d58:	d004      	beq.n	8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8008d5a:	e069      	b.n	8008e30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008d5c:	f7fb feac 	bl	8004ab8 <HAL_RCC_GetPCLK3Freq>
 8008d60:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008d62:	e068      	b.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d64:	f107 0314 	add.w	r3, r7, #20
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f7fd ffb1 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d72:	e060      	b.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d74:	f107 0308 	add.w	r3, r7, #8
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f7fe f915 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d82:	e058      	b.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008d84:	4b7c      	ldr	r3, [pc, #496]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008d86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008d8a:	f003 0302 	and.w	r3, r3, #2
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d103      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8008d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008d96:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008d98:	e04d      	b.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d9e:	e04a      	b.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008da0:	4b75      	ldr	r3, [pc, #468]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008da2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008da6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008daa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dae:	d103      	bne.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8008db0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008db4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008db6:	e03e      	b.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008db8:	2300      	movs	r3, #0
 8008dba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dbc:	e03b      	b.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008dbe:	4b6e      	ldr	r3, [pc, #440]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008dc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008dc4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dca:	4b6b      	ldr	r3, [pc, #428]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0302 	and.w	r3, r3, #2
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d10c      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8008dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d109      	bne.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ddc:	4b66      	ldr	r3, [pc, #408]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	08db      	lsrs	r3, r3, #3
 8008de2:	f003 0303 	and.w	r3, r3, #3
 8008de6:	4a65      	ldr	r2, [pc, #404]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008de8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dee:	e01e      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008df0:	4b61      	ldr	r3, [pc, #388]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dfc:	d106      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8008dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e04:	d102      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008e06:	4b5e      	ldr	r3, [pc, #376]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008e08:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e0a:	e010      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e0c:	4b5a      	ldr	r3, [pc, #360]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e18:	d106      	bne.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8008e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e20:	d102      	bne.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008e22:	4b58      	ldr	r3, [pc, #352]	@ (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e26:	e002      	b.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008e2c:	e003      	b.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8008e2e:	e002      	b.n	8008e36 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e34:	bf00      	nop
          }
        }
        break;
 8008e36:	f000 bd6e 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008e3a:	4b4f      	ldr	r3, [pc, #316]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008e40:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008e44:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008e4c:	d056      	beq.n	8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8008e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e50:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008e54:	f200 808b 	bhi.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e5e:	d03e      	beq.n	8008ede <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e62:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008e66:	f200 8082 	bhi.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e6c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e70:	d027      	beq.n	8008ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8008e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e74:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008e78:	d879      	bhi.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e80:	d017      	beq.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8008e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008e88:	d871      	bhi.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d004      	beq.n	8008e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8008e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008e96:	d004      	beq.n	8008ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8008e98:	e069      	b.n	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008e9a:	f7fb fe0d 	bl	8004ab8 <HAL_RCC_GetPCLK3Freq>
 8008e9e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008ea0:	e068      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ea2:	f107 0314 	add.w	r3, r7, #20
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7fd ff12 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008eb0:	e060      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eb2:	f107 0308 	add.w	r3, r7, #8
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fe f876 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ec0:	e058      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ec8:	f003 0302 	and.w	r3, r3, #2
 8008ecc:	2b02      	cmp	r3, #2
 8008ece:	d103      	bne.n	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8008ed0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ed4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008ed6:	e04d      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008edc:	e04a      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008ede:	4b26      	ldr	r3, [pc, #152]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008ee0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ee8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008eec:	d103      	bne.n	8008ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8008eee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008ef2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008ef4:	e03e      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008efa:	e03b      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008efc:	4b1e      	ldr	r3, [pc, #120]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008efe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f02:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f06:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f08:	4b1b      	ldr	r3, [pc, #108]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0302 	and.w	r3, r3, #2
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d10c      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8008f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d109      	bne.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f1a:	4b17      	ldr	r3, [pc, #92]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	08db      	lsrs	r3, r3, #3
 8008f20:	f003 0303 	and.w	r3, r3, #3
 8008f24:	4a15      	ldr	r2, [pc, #84]	@ (8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008f26:	fa22 f303 	lsr.w	r3, r2, r3
 8008f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f2c:	e01e      	b.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f2e:	4b12      	ldr	r3, [pc, #72]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f3a:	d106      	bne.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8008f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f42:	d102      	bne.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f44:	4b0e      	ldr	r3, [pc, #56]	@ (8008f80 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008f46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f48:	e010      	b.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f56:	d106      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 8008f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f5e:	d102      	bne.n	8008f66 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008f60:	4b08      	ldr	r3, [pc, #32]	@ (8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f64:	e002      	b.n	8008f6c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008f66:	2300      	movs	r3, #0
 8008f68:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008f6a:	e003      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 8008f6c:	e002      	b.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f72:	bf00      	nop
          }
        }
        break;
 8008f74:	f000 bccf 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f78:	44020c00 	.word	0x44020c00
 8008f7c:	03d09000 	.word	0x03d09000
 8008f80:	003d0900 	.word	0x003d0900
 8008f84:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008f88:	4b9e      	ldr	r3, [pc, #632]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8008f8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008f8e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8008f92:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008f9a:	d056      	beq.n	800904a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008fa2:	f200 808b 	bhi.w	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fac:	d03e      	beq.n	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8008fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fb4:	f200 8082 	bhi.w	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008fbe:	d027      	beq.n	8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008fc6:	d879      	bhi.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fce:	d017      	beq.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008fd6:	d871      	bhi.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d004      	beq.n	8008fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8008fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008fe4:	d004      	beq.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8008fe6:	e069      	b.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008fe8:	f7fb fd66 	bl	8004ab8 <HAL_RCC_GetPCLK3Freq>
 8008fec:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008fee:	e068      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ff0:	f107 0314 	add.w	r3, r7, #20
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fd fe6b 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ffe:	e060      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009000:	f107 0308 	add.w	r3, r7, #8
 8009004:	4618      	mov	r0, r3
 8009006:	f7fd ffcf 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800900e:	e058      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009010:	4b7c      	ldr	r3, [pc, #496]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009012:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	2b02      	cmp	r3, #2
 800901c:	d103      	bne.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800901e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009022:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009024:	e04d      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800902a:	e04a      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800902c:	4b75      	ldr	r3, [pc, #468]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800902e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009032:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009036:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800903a:	d103      	bne.n	8009044 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800903c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009040:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009042:	e03e      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009048:	e03b      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800904a:	4b6e      	ldr	r3, [pc, #440]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800904c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009050:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009054:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009056:	4b6b      	ldr	r3, [pc, #428]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0302 	and.w	r3, r3, #2
 800905e:	2b02      	cmp	r3, #2
 8009060:	d10c      	bne.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 8009062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009064:	2b00      	cmp	r3, #0
 8009066:	d109      	bne.n	800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009068:	4b66      	ldr	r3, [pc, #408]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	08db      	lsrs	r3, r3, #3
 800906e:	f003 0303 	and.w	r3, r3, #3
 8009072:	4a65      	ldr	r2, [pc, #404]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009074:	fa22 f303 	lsr.w	r3, r2, r3
 8009078:	637b      	str	r3, [r7, #52]	@ 0x34
 800907a:	e01e      	b.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800907c:	4b61      	ldr	r3, [pc, #388]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009084:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009088:	d106      	bne.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800908a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800908c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009090:	d102      	bne.n	8009098 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009092:	4b5e      	ldr	r3, [pc, #376]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009094:	637b      	str	r3, [r7, #52]	@ 0x34
 8009096:	e010      	b.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009098:	4b5a      	ldr	r3, [pc, #360]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090a4:	d106      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80090a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090ac:	d102      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80090ae:	4b58      	ldr	r3, [pc, #352]	@ (8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80090b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b2:	e002      	b.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80090b8:	e003      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 80090ba:	e002      	b.n	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090c0:	bf00      	nop
          }
        }
        break;
 80090c2:	f000 bc28 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80090c6:	4b4f      	ldr	r3, [pc, #316]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80090cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090d0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 80090d2:	4b4c      	ldr	r3, [pc, #304]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090de:	d106      	bne.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 80090e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d103      	bne.n	80090ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 80090e6:	4b4a      	ldr	r3, [pc, #296]	@ (8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80090e8:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 80090ea:	f000 bc14 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 80090ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090f4:	d108      	bne.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090f6:	f107 0320 	add.w	r3, r7, #32
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7fd fc7c 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009102:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009104:	f000 bc07 	b.w	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800910e:	d107      	bne.n	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009110:	f107 0314 	add.w	r3, r7, #20
 8009114:	4618      	mov	r0, r3
 8009116:	f7fd fddb 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800911a:	69bb      	ldr	r3, [r7, #24]
 800911c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800911e:	e3fa      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009124:	e3f7      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009126:	4b37      	ldr	r3, [pc, #220]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800912c:	f003 0307 	and.w	r3, r3, #7
 8009130:	633b      	str	r3, [r7, #48]	@ 0x30
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	2b04      	cmp	r3, #4
 8009136:	d861      	bhi.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009138:	a201      	add	r2, pc, #4	@ (adr r2, 8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800913a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913e:	bf00      	nop
 8009140:	08009155 	.word	0x08009155
 8009144:	08009165 	.word	0x08009165
 8009148:	08009175 	.word	0x08009175
 800914c:	08009185 	.word	0x08009185
 8009150:	0800918b 	.word	0x0800918b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009154:	f107 0320 	add.w	r3, r7, #32
 8009158:	4618      	mov	r0, r3
 800915a:	f7fd fc4d 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800915e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009160:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009162:	e04e      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009164:	f107 0314 	add.w	r3, r7, #20
 8009168:	4618      	mov	r0, r3
 800916a:	f7fd fdb1 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009172:	e046      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009174:	f107 0308 	add.w	r3, r7, #8
 8009178:	4618      	mov	r0, r3
 800917a:	f7fd ff15 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009182:	e03e      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009184:	4b23      	ldr	r3, [pc, #140]	@ (8009214 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 8009186:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009188:	e03b      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800918a:	4b1e      	ldr	r3, [pc, #120]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800918c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009190:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009194:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009196:	4b1b      	ldr	r3, [pc, #108]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d10c      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80091a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d109      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091a8:	4b16      	ldr	r3, [pc, #88]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	08db      	lsrs	r3, r3, #3
 80091ae:	f003 0303 	and.w	r3, r3, #3
 80091b2:	4a15      	ldr	r2, [pc, #84]	@ (8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80091b4:	fa22 f303 	lsr.w	r3, r2, r3
 80091b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ba:	e01e      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091bc:	4b11      	ldr	r3, [pc, #68]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091c8:	d106      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 80091ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091d0:	d102      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80091d2:	4b0e      	ldr	r3, [pc, #56]	@ (800920c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80091d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d6:	e010      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091d8:	4b0a      	ldr	r3, [pc, #40]	@ (8009204 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091e4:	d106      	bne.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 80091e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091ec:	d102      	bne.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80091ee:	4b08      	ldr	r3, [pc, #32]	@ (8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 80091f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f2:	e002      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80091f8:	e003      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 80091fa:	e002      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 80091fc:	2300      	movs	r3, #0
 80091fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009200:	bf00      	nop
          }
        }
        break;
 8009202:	e388      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009204:	44020c00 	.word	0x44020c00
 8009208:	03d09000 	.word	0x03d09000
 800920c:	003d0900 	.word	0x003d0900
 8009210:	007a1200 	.word	0x007a1200
 8009214:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009218:	4ba9      	ldr	r3, [pc, #676]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800921a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800921e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009222:	633b      	str	r3, [r7, #48]	@ 0x30
 8009224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009226:	2b20      	cmp	r3, #32
 8009228:	f200 809a 	bhi.w	8009360 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800922c:	a201      	add	r2, pc, #4	@ (adr r2, 8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800922e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009232:	bf00      	nop
 8009234:	080092b9 	.word	0x080092b9
 8009238:	08009361 	.word	0x08009361
 800923c:	08009361 	.word	0x08009361
 8009240:	08009361 	.word	0x08009361
 8009244:	08009361 	.word	0x08009361
 8009248:	08009361 	.word	0x08009361
 800924c:	08009361 	.word	0x08009361
 8009250:	08009361 	.word	0x08009361
 8009254:	080092c9 	.word	0x080092c9
 8009258:	08009361 	.word	0x08009361
 800925c:	08009361 	.word	0x08009361
 8009260:	08009361 	.word	0x08009361
 8009264:	08009361 	.word	0x08009361
 8009268:	08009361 	.word	0x08009361
 800926c:	08009361 	.word	0x08009361
 8009270:	08009361 	.word	0x08009361
 8009274:	080092d9 	.word	0x080092d9
 8009278:	08009361 	.word	0x08009361
 800927c:	08009361 	.word	0x08009361
 8009280:	08009361 	.word	0x08009361
 8009284:	08009361 	.word	0x08009361
 8009288:	08009361 	.word	0x08009361
 800928c:	08009361 	.word	0x08009361
 8009290:	08009361 	.word	0x08009361
 8009294:	080092e9 	.word	0x080092e9
 8009298:	08009361 	.word	0x08009361
 800929c:	08009361 	.word	0x08009361
 80092a0:	08009361 	.word	0x08009361
 80092a4:	08009361 	.word	0x08009361
 80092a8:	08009361 	.word	0x08009361
 80092ac:	08009361 	.word	0x08009361
 80092b0:	08009361 	.word	0x08009361
 80092b4:	080092ef 	.word	0x080092ef
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092b8:	f107 0320 	add.w	r3, r7, #32
 80092bc:	4618      	mov	r0, r3
 80092be:	f7fd fb9b 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80092c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092c6:	e04e      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092c8:	f107 0314 	add.w	r3, r7, #20
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fd fcff 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092d6:	e046      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092d8:	f107 0308 	add.w	r3, r7, #8
 80092dc:	4618      	mov	r0, r3
 80092de:	f7fd fe63 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092e6:	e03e      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80092e8:	4b76      	ldr	r3, [pc, #472]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80092ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092ec:	e03b      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092ee:	4b74      	ldr	r3, [pc, #464]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80092f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092f4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80092f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092fa:	4b71      	ldr	r3, [pc, #452]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 0302 	and.w	r3, r3, #2
 8009302:	2b02      	cmp	r3, #2
 8009304:	d10c      	bne.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8009306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009308:	2b00      	cmp	r3, #0
 800930a:	d109      	bne.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800930c:	4b6c      	ldr	r3, [pc, #432]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	08db      	lsrs	r3, r3, #3
 8009312:	f003 0303 	and.w	r3, r3, #3
 8009316:	4a6c      	ldr	r2, [pc, #432]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009318:	fa22 f303 	lsr.w	r3, r2, r3
 800931c:	637b      	str	r3, [r7, #52]	@ 0x34
 800931e:	e01e      	b.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009320:	4b67      	ldr	r3, [pc, #412]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009328:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800932c:	d106      	bne.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800932e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009330:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009334:	d102      	bne.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009336:	4b65      	ldr	r3, [pc, #404]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009338:	637b      	str	r3, [r7, #52]	@ 0x34
 800933a:	e010      	b.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800933c:	4b60      	ldr	r3, [pc, #384]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009344:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009348:	d106      	bne.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800934a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800934c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009350:	d102      	bne.n	8009358 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009352:	4b5f      	ldr	r3, [pc, #380]	@ (80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009354:	637b      	str	r3, [r7, #52]	@ 0x34
 8009356:	e002      	b.n	800935e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009358:	2300      	movs	r3, #0
 800935a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800935c:	e003      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800935e:	e002      	b.n	8009366 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 8009360:	2300      	movs	r3, #0
 8009362:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009364:	bf00      	nop
          }
        }
        break;
 8009366:	e2d6      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009368:	4b55      	ldr	r3, [pc, #340]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800936a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800936e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009372:	633b      	str	r3, [r7, #48]	@ 0x30
 8009374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800937a:	d031      	beq.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800937c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009382:	d866      	bhi.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009386:	2bc0      	cmp	r3, #192	@ 0xc0
 8009388:	d027      	beq.n	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800938a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938c:	2bc0      	cmp	r3, #192	@ 0xc0
 800938e:	d860      	bhi.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009392:	2b80      	cmp	r3, #128	@ 0x80
 8009394:	d019      	beq.n	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8009396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009398:	2b80      	cmp	r3, #128	@ 0x80
 800939a:	d85a      	bhi.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80093a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a4:	2b40      	cmp	r3, #64	@ 0x40
 80093a6:	d008      	beq.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 80093a8:	e053      	b.n	8009452 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093aa:	f107 0320 	add.w	r3, r7, #32
 80093ae:	4618      	mov	r0, r3
 80093b0:	f7fd fb22 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80093b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093b8:	e04e      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093ba:	f107 0314 	add.w	r3, r7, #20
 80093be:	4618      	mov	r0, r3
 80093c0:	f7fd fc86 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093c8:	e046      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093ca:	f107 0308 	add.w	r3, r7, #8
 80093ce:	4618      	mov	r0, r3
 80093d0:	f7fd fdea 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093d8:	e03e      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80093da:	4b3a      	ldr	r3, [pc, #232]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 80093dc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093de:	e03b      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80093e0:	4b37      	ldr	r3, [pc, #220]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80093e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80093e6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80093ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80093ec:	4b34      	ldr	r3, [pc, #208]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 0302 	and.w	r3, r3, #2
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d10c      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 80093f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d109      	bne.n	8009412 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093fe:	4b30      	ldr	r3, [pc, #192]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	08db      	lsrs	r3, r3, #3
 8009404:	f003 0303 	and.w	r3, r3, #3
 8009408:	4a2f      	ldr	r2, [pc, #188]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800940a:	fa22 f303 	lsr.w	r3, r2, r3
 800940e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009410:	e01e      	b.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009412:	4b2b      	ldr	r3, [pc, #172]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800941a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800941e:	d106      	bne.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009426:	d102      	bne.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009428:	4b28      	ldr	r3, [pc, #160]	@ (80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800942a:	637b      	str	r3, [r7, #52]	@ 0x34
 800942c:	e010      	b.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800942e:	4b24      	ldr	r3, [pc, #144]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009436:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800943a:	d106      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800943c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800943e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009442:	d102      	bne.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009444:	4b22      	ldr	r3, [pc, #136]	@ (80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009446:	637b      	str	r3, [r7, #52]	@ 0x34
 8009448:	e002      	b.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800944a:	2300      	movs	r3, #0
 800944c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800944e:	e003      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8009450:	e002      	b.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8009452:	2300      	movs	r3, #0
 8009454:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009456:	bf00      	nop
          }
        }
        break;
 8009458:	e25d      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800945a:	4b19      	ldr	r3, [pc, #100]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800945c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009460:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009464:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009468:	2b00      	cmp	r3, #0
 800946a:	d103      	bne.n	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800946c:	f7fb fb0e 	bl	8004a8c <HAL_RCC_GetPCLK2Freq>
 8009470:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009472:	e250      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009474:	4b12      	ldr	r3, [pc, #72]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800947c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009480:	d10b      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8009482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009484:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009488:	d107      	bne.n	800949a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800948a:	f107 0314 	add.w	r3, r7, #20
 800948e:	4618      	mov	r0, r3
 8009490:	f7fd fc1e 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	637b      	str	r3, [r7, #52]	@ 0x34
 8009498:	e04f      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800949a:	4b09      	ldr	r3, [pc, #36]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094a6:	d115      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 80094a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094ae:	d111      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094b0:	f107 0308 	add.w	r3, r7, #8
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fd fd77 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80094be:	e03c      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 80094c0:	44020c00 	.word	0x44020c00
 80094c4:	00bb8000 	.word	0x00bb8000
 80094c8:	03d09000 	.word	0x03d09000
 80094cc:	003d0900 	.word	0x003d0900
 80094d0:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80094d4:	4b94      	ldr	r3, [pc, #592]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0302 	and.w	r3, r3, #2
 80094dc:	2b02      	cmp	r3, #2
 80094de:	d10d      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80094e6:	d109      	bne.n	80094fc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80094e8:	4b8f      	ldr	r3, [pc, #572]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	08db      	lsrs	r3, r3, #3
 80094ee:	f003 0303 	and.w	r3, r3, #3
 80094f2:	4a8e      	ldr	r2, [pc, #568]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80094f4:	fa22 f303 	lsr.w	r3, r2, r3
 80094f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094fa:	e01e      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80094fc:	4b8a      	ldr	r3, [pc, #552]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009508:	d106      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009510:	d102      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009512:	4b87      	ldr	r3, [pc, #540]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009514:	637b      	str	r3, [r7, #52]	@ 0x34
 8009516:	e010      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009518:	4b83      	ldr	r3, [pc, #524]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009520:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009524:	d106      	bne.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009528:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800952c:	d102      	bne.n	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800952e:	4b81      	ldr	r3, [pc, #516]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009530:	637b      	str	r3, [r7, #52]	@ 0x34
 8009532:	e002      	b.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009534:	2300      	movs	r3, #0
 8009536:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009538:	e1ed      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800953a:	e1ec      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800953c:	4b7a      	ldr	r3, [pc, #488]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800953e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009542:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009546:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800954a:	2b00      	cmp	r3, #0
 800954c:	d103      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800954e:	f7fb fab3 	bl	8004ab8 <HAL_RCC_GetPCLK3Freq>
 8009552:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009554:	e1df      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009556:	4b74      	ldr	r3, [pc, #464]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800955e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009562:	d10b      	bne.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009566:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800956a:	d107      	bne.n	800957c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800956c:	f107 0314 	add.w	r3, r7, #20
 8009570:	4618      	mov	r0, r3
 8009572:	f7fd fbad 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	637b      	str	r3, [r7, #52]	@ 0x34
 800957a:	e045      	b.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800957c:	4b6a      	ldr	r3, [pc, #424]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009584:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009588:	d10b      	bne.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800958a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009590:	d107      	bne.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009592:	f107 0308 	add.w	r3, r7, #8
 8009596:	4618      	mov	r0, r3
 8009598:	f7fd fd06 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a0:	e032      	b.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80095a2:	4b61      	ldr	r3, [pc, #388]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f003 0302 	and.w	r3, r3, #2
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d10d      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 80095ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80095b4:	d109      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80095b6:	4b5c      	ldr	r3, [pc, #368]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	08db      	lsrs	r3, r3, #3
 80095bc:	f003 0303 	and.w	r3, r3, #3
 80095c0:	4a5a      	ldr	r2, [pc, #360]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 80095c2:	fa22 f303 	lsr.w	r3, r2, r3
 80095c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095c8:	e01e      	b.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80095ca:	4b57      	ldr	r3, [pc, #348]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80095d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095d6:	d106      	bne.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 80095d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095de:	d102      	bne.n	80095e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 80095e0:	4b53      	ldr	r3, [pc, #332]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80095e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80095e4:	e010      	b.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80095e6:	4b50      	ldr	r3, [pc, #320]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095f2:	d106      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 80095f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80095fa:	d102      	bne.n	8009602 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 80095fc:	4b4d      	ldr	r3, [pc, #308]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80095fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009600:	e002      	b.n	8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009602:	2300      	movs	r3, #0
 8009604:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009606:	e186      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009608:	e185      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800960a:	4b47      	ldr	r3, [pc, #284]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800960c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009610:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009614:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009618:	2b00      	cmp	r3, #0
 800961a:	d103      	bne.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800961c:	f7fb fa36 	bl	8004a8c <HAL_RCC_GetPCLK2Freq>
 8009620:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009622:	e178      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009624:	4b40      	ldr	r3, [pc, #256]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800962c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009630:	d10b      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009634:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009638:	d107      	bne.n	800964a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800963a:	f107 0314 	add.w	r3, r7, #20
 800963e:	4618      	mov	r0, r3
 8009640:	f7fd fb46 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	637b      	str	r3, [r7, #52]	@ 0x34
 8009648:	e045      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800964a:	4b37      	ldr	r3, [pc, #220]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009652:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009656:	d10b      	bne.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800965a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800965e:	d107      	bne.n	8009670 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009660:	f107 0308 	add.w	r3, r7, #8
 8009664:	4618      	mov	r0, r3
 8009666:	f7fd fc9f 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	637b      	str	r3, [r7, #52]	@ 0x34
 800966e:	e032      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009670:	4b2d      	ldr	r3, [pc, #180]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0302 	and.w	r3, r3, #2
 8009678:	2b02      	cmp	r3, #2
 800967a:	d10d      	bne.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800967c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009682:	d109      	bne.n	8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009684:	4b28      	ldr	r3, [pc, #160]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	08db      	lsrs	r3, r3, #3
 800968a:	f003 0303 	and.w	r3, r3, #3
 800968e:	4a27      	ldr	r2, [pc, #156]	@ (800972c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009690:	fa22 f303 	lsr.w	r3, r2, r3
 8009694:	637b      	str	r3, [r7, #52]	@ 0x34
 8009696:	e01e      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009698:	4b23      	ldr	r3, [pc, #140]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096a4:	d106      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 80096a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096ac:	d102      	bne.n	80096b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 80096ae:	4b20      	ldr	r3, [pc, #128]	@ (8009730 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 80096b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80096b2:	e010      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80096b4:	4b1c      	ldr	r3, [pc, #112]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096c0:	d106      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 80096c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80096c8:	d102      	bne.n	80096d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 80096ca:	4b1a      	ldr	r3, [pc, #104]	@ (8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80096cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ce:	e002      	b.n	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 80096d0:	2300      	movs	r3, #0
 80096d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096d4:	e11f      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80096d6:	e11e      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80096d8:	4b13      	ldr	r3, [pc, #76]	@ (8009728 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80096de:	f003 0303 	and.w	r3, r3, #3
 80096e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80096e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e6:	2b03      	cmp	r3, #3
 80096e8:	d85f      	bhi.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 80096ea:	a201      	add	r2, pc, #4	@ (adr r2, 80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	08009701 	.word	0x08009701
 80096f4:	08009709 	.word	0x08009709
 80096f8:	08009719 	.word	0x08009719
 80096fc:	08009739 	.word	0x08009739

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009700:	f7fb f992 	bl	8004a28 <HAL_RCC_GetHCLKFreq>
 8009704:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009706:	e053      	b.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009708:	f107 0320 	add.w	r3, r7, #32
 800970c:	4618      	mov	r0, r3
 800970e:	f7fd f973 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009714:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009716:	e04b      	b.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009718:	f107 0314 	add.w	r3, r7, #20
 800971c:	4618      	mov	r0, r3
 800971e:	f7fd fad7 	bl	8006cd0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009726:	e043      	b.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009728:	44020c00 	.word	0x44020c00
 800972c:	03d09000 	.word	0x03d09000
 8009730:	003d0900 	.word	0x003d0900
 8009734:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009738:	4b79      	ldr	r3, [pc, #484]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800973a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800973e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009742:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009744:	4b76      	ldr	r3, [pc, #472]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0302 	and.w	r3, r3, #2
 800974c:	2b02      	cmp	r3, #2
 800974e:	d10c      	bne.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009752:	2b00      	cmp	r3, #0
 8009754:	d109      	bne.n	800976a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009756:	4b72      	ldr	r3, [pc, #456]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	08db      	lsrs	r3, r3, #3
 800975c:	f003 0303 	and.w	r3, r3, #3
 8009760:	4a70      	ldr	r2, [pc, #448]	@ (8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8009762:	fa22 f303 	lsr.w	r3, r2, r3
 8009766:	637b      	str	r3, [r7, #52]	@ 0x34
 8009768:	e01e      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800976a:	4b6d      	ldr	r3, [pc, #436]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009772:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009776:	d106      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800977a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800977e:	d102      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009780:	4b69      	ldr	r3, [pc, #420]	@ (8009928 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8009782:	637b      	str	r3, [r7, #52]	@ 0x34
 8009784:	e010      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009786:	4b66      	ldr	r3, [pc, #408]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800978e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009792:	d106      	bne.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009796:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800979a:	d102      	bne.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800979c:	4b63      	ldr	r3, [pc, #396]	@ (800992c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800979e:	637b      	str	r3, [r7, #52]	@ 0x34
 80097a0:	e002      	b.n	80097a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80097a2:	2300      	movs	r3, #0
 80097a4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80097a6:	e003      	b.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 80097a8:	e002      	b.n	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 80097aa:	2300      	movs	r3, #0
 80097ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097ae:	bf00      	nop
          }
        }
        break;
 80097b0:	e0b1      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80097b2:	4b5b      	ldr	r3, [pc, #364]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097b8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80097bc:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80097be:	4b58      	ldr	r3, [pc, #352]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097c4:	f003 0302 	and.w	r3, r3, #2
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d106      	bne.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 80097cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d103      	bne.n	80097da <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 80097d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80097d8:	e01f      	b.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80097da:	4b51      	ldr	r3, [pc, #324]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80097e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097e8:	d106      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 80097ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ec:	2b40      	cmp	r3, #64	@ 0x40
 80097ee:	d103      	bne.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 80097f0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80097f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80097f6:	e010      	b.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80097f8:	4b49      	ldr	r3, [pc, #292]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009804:	d106      	bne.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009808:	2b80      	cmp	r3, #128	@ 0x80
 800980a:	d103      	bne.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800980c:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009810:	637b      	str	r3, [r7, #52]	@ 0x34
 8009812:	e002      	b.n	800981a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009814:	2300      	movs	r3, #0
 8009816:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009818:	e07d      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800981a:	e07c      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800981c:	4b40      	ldr	r3, [pc, #256]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800981e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009822:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009826:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009828:	4b3d      	ldr	r3, [pc, #244]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009830:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009834:	d105      	bne.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8009836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009838:	2b00      	cmp	r3, #0
 800983a:	d102      	bne.n	8009842 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800983c:	4b3c      	ldr	r3, [pc, #240]	@ (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800983e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009840:	e031      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009842:	4b37      	ldr	r3, [pc, #220]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800984a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800984e:	d10a      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009852:	2b10      	cmp	r3, #16
 8009854:	d107      	bne.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009856:	f107 0320 	add.w	r3, r7, #32
 800985a:	4618      	mov	r0, r3
 800985c:	f7fd f8cc 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009862:	637b      	str	r3, [r7, #52]	@ 0x34
 8009864:	e01f      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009866:	4b2e      	ldr	r3, [pc, #184]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009868:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800986c:	f003 0302 	and.w	r3, r3, #2
 8009870:	2b02      	cmp	r3, #2
 8009872:	d106      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009876:	2b20      	cmp	r3, #32
 8009878:	d103      	bne.n	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800987a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800987e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009880:	e011      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009882:	4b27      	ldr	r3, [pc, #156]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009884:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009888:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800988c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009890:	d106      	bne.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009894:	2b30      	cmp	r3, #48	@ 0x30
 8009896:	d103      	bne.n	80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009898:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800989c:	637b      	str	r3, [r7, #52]	@ 0x34
 800989e:	e002      	b.n	80098a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 80098a0:	2300      	movs	r3, #0
 80098a2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80098a4:	e037      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80098a6:	e036      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 80098a8:	4b1d      	ldr	r3, [pc, #116]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80098ae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80098b2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 80098b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098b6:	2b10      	cmp	r3, #16
 80098b8:	d107      	bne.n	80098ca <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098ba:	f107 0320 	add.w	r3, r7, #32
 80098be:	4618      	mov	r0, r3
 80098c0:	f7fd f89a 	bl	80069f8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80098c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c6:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80098c8:	e025      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 80098ca:	4b15      	ldr	r3, [pc, #84]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80098d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80098d6:	d10a      	bne.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 80098d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098da:	2b20      	cmp	r3, #32
 80098dc:	d107      	bne.n	80098ee <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098de:	f107 0308 	add.w	r3, r7, #8
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fd fb60 	bl	8006fa8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80098ec:	e00f      	b.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 80098ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098fa:	d105      	bne.n	8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 80098fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fe:	2b30      	cmp	r3, #48	@ 0x30
 8009900:	d102      	bne.n	8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009902:	4b0b      	ldr	r3, [pc, #44]	@ (8009930 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009904:	637b      	str	r3, [r7, #52]	@ 0x34
 8009906:	e002      	b.n	800990e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009908:	2300      	movs	r3, #0
 800990a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800990c:	e003      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800990e:	e002      	b.n	8009916 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009910:	2300      	movs	r3, #0
 8009912:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009914:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8009916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009918:	4618      	mov	r0, r3
 800991a:	373c      	adds	r7, #60	@ 0x3c
 800991c:	46bd      	mov	sp, r7
 800991e:	bd90      	pop	{r4, r7, pc}
 8009920:	44020c00 	.word	0x44020c00
 8009924:	03d09000 	.word	0x03d09000
 8009928:	003d0900 	.word	0x003d0900
 800992c:	007a1200 	.word	0x007a1200
 8009930:	02dc6c00 	.word	0x02dc6c00

08009934 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800993c:	4b48      	ldr	r3, [pc, #288]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a47      	ldr	r2, [pc, #284]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 8009942:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009946:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009948:	f7f7 ff6a 	bl	8001820 <HAL_GetTick>
 800994c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800994e:	e008      	b.n	8009962 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009950:	f7f7 ff66 	bl	8001820 <HAL_GetTick>
 8009954:	4602      	mov	r2, r0
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	2b02      	cmp	r3, #2
 800995c:	d901      	bls.n	8009962 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800995e:	2303      	movs	r3, #3
 8009960:	e07a      	b.n	8009a58 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009962:	4b3f      	ldr	r3, [pc, #252]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800996a:	2b00      	cmp	r3, #0
 800996c:	d1f0      	bne.n	8009950 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800996e:	4b3c      	ldr	r3, [pc, #240]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 8009970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009972:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009976:	f023 0303 	bic.w	r3, r3, #3
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	6811      	ldr	r1, [r2, #0]
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	6852      	ldr	r2, [r2, #4]
 8009982:	0212      	lsls	r2, r2, #8
 8009984:	430a      	orrs	r2, r1
 8009986:	4936      	ldr	r1, [pc, #216]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 8009988:	4313      	orrs	r3, r2
 800998a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	3b01      	subs	r3, #1
 8009992:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	3b01      	subs	r3, #1
 800999c:	025b      	lsls	r3, r3, #9
 800999e:	b29b      	uxth	r3, r3
 80099a0:	431a      	orrs	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	691b      	ldr	r3, [r3, #16]
 80099a6:	3b01      	subs	r3, #1
 80099a8:	041b      	lsls	r3, r3, #16
 80099aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099ae:	431a      	orrs	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	695b      	ldr	r3, [r3, #20]
 80099b4:	3b01      	subs	r3, #1
 80099b6:	061b      	lsls	r3, r3, #24
 80099b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099bc:	4928      	ldr	r1, [pc, #160]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80099c2:	4b27      	ldr	r3, [pc, #156]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 80099c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099c6:	f023 020c 	bic.w	r2, r3, #12
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	4924      	ldr	r1, [pc, #144]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80099d4:	4b22      	ldr	r3, [pc, #136]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 80099d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d8:	f023 0220 	bic.w	r2, r3, #32
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	69db      	ldr	r3, [r3, #28]
 80099e0:	491f      	ldr	r1, [pc, #124]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 80099e2:	4313      	orrs	r3, r2
 80099e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80099e6:	4b1e      	ldr	r3, [pc, #120]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 80099e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ee:	491c      	ldr	r1, [pc, #112]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80099f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 80099f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f8:	4a19      	ldr	r2, [pc, #100]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 80099fa:	f023 0310 	bic.w	r3, r3, #16
 80099fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009a00:	4b17      	ldr	r3, [pc, #92]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 8009a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009a08:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	6a12      	ldr	r2, [r2, #32]
 8009a10:	00d2      	lsls	r2, r2, #3
 8009a12:	4913      	ldr	r1, [pc, #76]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 8009a14:	4313      	orrs	r3, r2
 8009a16:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009a18:	4b11      	ldr	r3, [pc, #68]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 8009a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a1c:	4a10      	ldr	r2, [pc, #64]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 8009a1e:	f043 0310 	orr.w	r3, r3, #16
 8009a22:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009a24:	4b0e      	ldr	r3, [pc, #56]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a0d      	ldr	r2, [pc, #52]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 8009a2a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a2e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a30:	f7f7 fef6 	bl	8001820 <HAL_GetTick>
 8009a34:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a36:	e008      	b.n	8009a4a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a38:	f7f7 fef2 	bl	8001820 <HAL_GetTick>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d901      	bls.n	8009a4a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009a46:	2303      	movs	r3, #3
 8009a48:	e006      	b.n	8009a58 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a4a:	4b05      	ldr	r3, [pc, #20]	@ (8009a60 <RCCEx_PLL2_Config+0x12c>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0f0      	beq.n	8009a38 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009a56:	2300      	movs	r3, #0

}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	44020c00 	.word	0x44020c00

08009a64 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009a6c:	4b48      	ldr	r3, [pc, #288]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a47      	ldr	r2, [pc, #284]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009a72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a76:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a78:	f7f7 fed2 	bl	8001820 <HAL_GetTick>
 8009a7c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a7e:	e008      	b.n	8009a92 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a80:	f7f7 fece 	bl	8001820 <HAL_GetTick>
 8009a84:	4602      	mov	r2, r0
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	2b02      	cmp	r3, #2
 8009a8c:	d901      	bls.n	8009a92 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009a8e:	2303      	movs	r3, #3
 8009a90:	e07a      	b.n	8009b88 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009a92:	4b3f      	ldr	r3, [pc, #252]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1f0      	bne.n	8009a80 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aa2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009aa6:	f023 0303 	bic.w	r3, r3, #3
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	6811      	ldr	r1, [r2, #0]
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	6852      	ldr	r2, [r2, #4]
 8009ab2:	0212      	lsls	r2, r2, #8
 8009ab4:	430a      	orrs	r2, r1
 8009ab6:	4936      	ldr	r1, [pc, #216]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	630b      	str	r3, [r1, #48]	@ 0x30
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	689b      	ldr	r3, [r3, #8]
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	025b      	lsls	r3, r3, #9
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	691b      	ldr	r3, [r3, #16]
 8009ad6:	3b01      	subs	r3, #1
 8009ad8:	041b      	lsls	r3, r3, #16
 8009ada:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009ade:	431a      	orrs	r2, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	695b      	ldr	r3, [r3, #20]
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	061b      	lsls	r3, r3, #24
 8009ae8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009aec:	4928      	ldr	r1, [pc, #160]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009aee:	4313      	orrs	r3, r2
 8009af0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009af2:	4b27      	ldr	r3, [pc, #156]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af6:	f023 020c 	bic.w	r2, r3, #12
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	699b      	ldr	r3, [r3, #24]
 8009afe:	4924      	ldr	r1, [pc, #144]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b00:	4313      	orrs	r3, r2
 8009b02:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009b04:	4b22      	ldr	r3, [pc, #136]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b08:	f023 0220 	bic.w	r2, r3, #32
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	69db      	ldr	r3, [r3, #28]
 8009b10:	491f      	ldr	r1, [pc, #124]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b12:	4313      	orrs	r3, r2
 8009b14:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009b16:	4b1e      	ldr	r3, [pc, #120]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1e:	491c      	ldr	r1, [pc, #112]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b20:	4313      	orrs	r3, r2
 8009b22:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009b24:	4b1a      	ldr	r3, [pc, #104]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b28:	4a19      	ldr	r2, [pc, #100]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b2a:	f023 0310 	bic.w	r3, r3, #16
 8009b2e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009b30:	4b17      	ldr	r3, [pc, #92]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b38:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	6a12      	ldr	r2, [r2, #32]
 8009b40:	00d2      	lsls	r2, r2, #3
 8009b42:	4913      	ldr	r1, [pc, #76]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b44:	4313      	orrs	r3, r2
 8009b46:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009b48:	4b11      	ldr	r3, [pc, #68]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b4c:	4a10      	ldr	r2, [pc, #64]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b4e:	f043 0310 	orr.w	r3, r3, #16
 8009b52:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009b54:	4b0e      	ldr	r3, [pc, #56]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a0d      	ldr	r2, [pc, #52]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b5e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009b60:	f7f7 fe5e 	bl	8001820 <HAL_GetTick>
 8009b64:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b66:	e008      	b.n	8009b7a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009b68:	f7f7 fe5a 	bl	8001820 <HAL_GetTick>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	2b02      	cmp	r3, #2
 8009b74:	d901      	bls.n	8009b7a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e006      	b.n	8009b88 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009b7a:	4b05      	ldr	r3, [pc, #20]	@ (8009b90 <RCCEx_PLL3_Config+0x12c>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d0f0      	beq.n	8009b68 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009b86:	2300      	movs	r3, #0
}
 8009b88:	4618      	mov	r0, r3
 8009b8a:	3710      	adds	r7, #16
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	44020c00 	.word	0x44020c00

08009b94 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e162      	b.n	8009e6c <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a70      	ldr	r2, [pc, #448]	@ (8009d6c <HAL_SPI_Init+0x1d8>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d018      	beq.n	8009be2 <HAL_SPI_Init+0x4e>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a6e      	ldr	r2, [pc, #440]	@ (8009d70 <HAL_SPI_Init+0x1dc>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d013      	beq.n	8009be2 <HAL_SPI_Init+0x4e>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a6d      	ldr	r2, [pc, #436]	@ (8009d74 <HAL_SPI_Init+0x1e0>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d00e      	beq.n	8009be2 <HAL_SPI_Init+0x4e>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a6b      	ldr	r2, [pc, #428]	@ (8009d78 <HAL_SPI_Init+0x1e4>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d009      	beq.n	8009be2 <HAL_SPI_Init+0x4e>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4a6a      	ldr	r2, [pc, #424]	@ (8009d7c <HAL_SPI_Init+0x1e8>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d004      	beq.n	8009be2 <HAL_SPI_Init+0x4e>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a68      	ldr	r2, [pc, #416]	@ (8009d80 <HAL_SPI_Init+0x1ec>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	e000      	b.n	8009be4 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009be2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a5f      	ldr	r2, [pc, #380]	@ (8009d6c <HAL_SPI_Init+0x1d8>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d018      	beq.n	8009c26 <HAL_SPI_Init+0x92>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a5d      	ldr	r2, [pc, #372]	@ (8009d70 <HAL_SPI_Init+0x1dc>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d013      	beq.n	8009c26 <HAL_SPI_Init+0x92>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a5c      	ldr	r2, [pc, #368]	@ (8009d74 <HAL_SPI_Init+0x1e0>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d00e      	beq.n	8009c26 <HAL_SPI_Init+0x92>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a5a      	ldr	r2, [pc, #360]	@ (8009d78 <HAL_SPI_Init+0x1e4>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d009      	beq.n	8009c26 <HAL_SPI_Init+0x92>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a59      	ldr	r2, [pc, #356]	@ (8009d7c <HAL_SPI_Init+0x1e8>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d004      	beq.n	8009c26 <HAL_SPI_Init+0x92>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a57      	ldr	r2, [pc, #348]	@ (8009d80 <HAL_SPI_Init+0x1ec>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d105      	bne.n	8009c32 <HAL_SPI_Init+0x9e>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	2b0f      	cmp	r3, #15
 8009c2c:	d901      	bls.n	8009c32 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e11c      	b.n	8009e6c <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f91e 	bl	8009e74 <SPI_GetPacketSize>
 8009c38:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a4b      	ldr	r2, [pc, #300]	@ (8009d6c <HAL_SPI_Init+0x1d8>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d018      	beq.n	8009c76 <HAL_SPI_Init+0xe2>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a49      	ldr	r2, [pc, #292]	@ (8009d70 <HAL_SPI_Init+0x1dc>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d013      	beq.n	8009c76 <HAL_SPI_Init+0xe2>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a48      	ldr	r2, [pc, #288]	@ (8009d74 <HAL_SPI_Init+0x1e0>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d00e      	beq.n	8009c76 <HAL_SPI_Init+0xe2>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a46      	ldr	r2, [pc, #280]	@ (8009d78 <HAL_SPI_Init+0x1e4>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d009      	beq.n	8009c76 <HAL_SPI_Init+0xe2>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a45      	ldr	r2, [pc, #276]	@ (8009d7c <HAL_SPI_Init+0x1e8>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d004      	beq.n	8009c76 <HAL_SPI_Init+0xe2>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a43      	ldr	r2, [pc, #268]	@ (8009d80 <HAL_SPI_Init+0x1ec>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d102      	bne.n	8009c7c <HAL_SPI_Init+0xe8>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2b08      	cmp	r3, #8
 8009c7a:	d820      	bhi.n	8009cbe <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009c80:	4a40      	ldr	r2, [pc, #256]	@ (8009d84 <HAL_SPI_Init+0x1f0>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d018      	beq.n	8009cb8 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a3f      	ldr	r2, [pc, #252]	@ (8009d88 <HAL_SPI_Init+0x1f4>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d013      	beq.n	8009cb8 <HAL_SPI_Init+0x124>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a3d      	ldr	r2, [pc, #244]	@ (8009d8c <HAL_SPI_Init+0x1f8>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d00e      	beq.n	8009cb8 <HAL_SPI_Init+0x124>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a3c      	ldr	r2, [pc, #240]	@ (8009d90 <HAL_SPI_Init+0x1fc>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d009      	beq.n	8009cb8 <HAL_SPI_Init+0x124>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a3a      	ldr	r2, [pc, #232]	@ (8009d94 <HAL_SPI_Init+0x200>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d004      	beq.n	8009cb8 <HAL_SPI_Init+0x124>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	4a39      	ldr	r2, [pc, #228]	@ (8009d98 <HAL_SPI_Init+0x204>)
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d104      	bne.n	8009cc2 <HAL_SPI_Init+0x12e>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2b10      	cmp	r3, #16
 8009cbc:	d901      	bls.n	8009cc2 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e0d4      	b.n	8009e6c <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009cc8:	b2db      	uxtb	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d106      	bne.n	8009cdc <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7f7 f826 	bl	8000d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f022 0201 	bic.w	r2, r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009cfe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009d08:	d119      	bne.n	8009d3e <HAL_SPI_Init+0x1aa>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d12:	d103      	bne.n	8009d1c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d008      	beq.n	8009d2e <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10c      	bne.n	8009d3e <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009d28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d2c:	d107      	bne.n	8009d3e <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681a      	ldr	r2, [r3, #0]
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009d3c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	685b      	ldr	r3, [r3, #4]
 8009d42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d028      	beq.n	8009d9c <HAL_SPI_Init+0x208>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	2b06      	cmp	r3, #6
 8009d50:	d924      	bls.n	8009d9c <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	430a      	orrs	r2, r1
 8009d66:	601a      	str	r2, [r3, #0]
 8009d68:	e020      	b.n	8009dac <HAL_SPI_Init+0x218>
 8009d6a:	bf00      	nop
 8009d6c:	40014c00 	.word	0x40014c00
 8009d70:	50014c00 	.word	0x50014c00
 8009d74:	44002000 	.word	0x44002000
 8009d78:	54002000 	.word	0x54002000
 8009d7c:	40015000 	.word	0x40015000
 8009d80:	50015000 	.word	0x50015000
 8009d84:	40013000 	.word	0x40013000
 8009d88:	50013000 	.word	0x50013000
 8009d8c:	40003800 	.word	0x40003800
 8009d90:	50003800 	.word	0x50003800
 8009d94:	40003c00 	.word	0x40003c00
 8009d98:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009daa:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	69da      	ldr	r2, [r3, #28]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009db4:	431a      	orrs	r2, r3
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	431a      	orrs	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dbe:	ea42 0103 	orr.w	r1, r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	68da      	ldr	r2, [r3, #12]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	430a      	orrs	r2, r1
 8009dcc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	431a      	orrs	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	431a      	orrs	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	695b      	ldr	r3, [r3, #20]
 8009dee:	431a      	orrs	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a1b      	ldr	r3, [r3, #32]
 8009df4:	431a      	orrs	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e00:	431a      	orrs	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	431a      	orrs	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e0c:	431a      	orrs	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e18:	ea42 0103 	orr.w	r1, r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	430a      	orrs	r2, r1
 8009e26:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f022 0201 	bic.w	r2, r2, #1
 8009e36:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d00a      	beq.n	8009e5a <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	430a      	orrs	r2, r1
 8009e58:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e80:	095b      	lsrs	r3, r3, #5
 8009e82:	3301      	adds	r3, #1
 8009e84:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	3301      	adds	r3, #1
 8009e8c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	3307      	adds	r3, #7
 8009e92:	08db      	lsrs	r3, r3, #3
 8009e94:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	fb02 f303 	mul.w	r3, r2, r3
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3714      	adds	r7, #20
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d101      	bne.n	8009ebc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009eb8:	2301      	movs	r3, #1
 8009eba:	e042      	b.n	8009f42 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d106      	bne.n	8009ed4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f7f6 ffe6 	bl	8000ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2224      	movs	r2, #36	@ 0x24
 8009ed8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681a      	ldr	r2, [r3, #0]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f022 0201 	bic.w	r2, r2, #1
 8009eea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 fa17 	bl	800a328 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 f826 	bl	8009f4c <UART_SetConfig>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d101      	bne.n	8009f0a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e01b      	b.n	8009f42 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	689a      	ldr	r2, [r3, #8]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009f28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f042 0201 	orr.w	r2, r2, #1
 8009f38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fa96 	bl	800a46c <UART_CheckIdleState>
 8009f40:	4603      	mov	r3, r0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f50:	b094      	sub	sp, #80	@ 0x50
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	4b78      	ldr	r3, [pc, #480]	@ (800a144 <UART_SetConfig+0x1f8>)
 8009f62:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f66:	689a      	ldr	r2, [r3, #8]
 8009f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	431a      	orrs	r2, r3
 8009f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	431a      	orrs	r2, r3
 8009f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f76:	69db      	ldr	r3, [r3, #28]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4971      	ldr	r1, [pc, #452]	@ (800a148 <UART_SetConfig+0x1fc>)
 8009f84:	4019      	ands	r1, r3
 8009f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f8c:	430b      	orrs	r3, r1
 8009f8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f9c:	68d9      	ldr	r1, [r3, #12]
 8009f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	ea40 0301 	orr.w	r3, r0, r1
 8009fa6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	4b64      	ldr	r3, [pc, #400]	@ (800a144 <UART_SetConfig+0x1f8>)
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d009      	beq.n	8009fcc <UART_SetConfig+0x80>
 8009fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	4b63      	ldr	r3, [pc, #396]	@ (800a14c <UART_SetConfig+0x200>)
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d004      	beq.n	8009fcc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fc4:	6a1a      	ldr	r2, [r3, #32]
 8009fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8009fd6:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8009fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fe0:	430b      	orrs	r3, r1
 8009fe2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fea:	f023 000f 	bic.w	r0, r3, #15
 8009fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8009ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	ea40 0301 	orr.w	r3, r0, r1
 8009ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ffe:	681a      	ldr	r2, [r3, #0]
 800a000:	4b53      	ldr	r3, [pc, #332]	@ (800a150 <UART_SetConfig+0x204>)
 800a002:	429a      	cmp	r2, r3
 800a004:	d102      	bne.n	800a00c <UART_SetConfig+0xc0>
 800a006:	2301      	movs	r3, #1
 800a008:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a00a:	e066      	b.n	800a0da <UART_SetConfig+0x18e>
 800a00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	4b50      	ldr	r3, [pc, #320]	@ (800a154 <UART_SetConfig+0x208>)
 800a012:	429a      	cmp	r2, r3
 800a014:	d102      	bne.n	800a01c <UART_SetConfig+0xd0>
 800a016:	2302      	movs	r3, #2
 800a018:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a01a:	e05e      	b.n	800a0da <UART_SetConfig+0x18e>
 800a01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	4b4d      	ldr	r3, [pc, #308]	@ (800a158 <UART_SetConfig+0x20c>)
 800a022:	429a      	cmp	r2, r3
 800a024:	d102      	bne.n	800a02c <UART_SetConfig+0xe0>
 800a026:	2304      	movs	r3, #4
 800a028:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a02a:	e056      	b.n	800a0da <UART_SetConfig+0x18e>
 800a02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	4b4a      	ldr	r3, [pc, #296]	@ (800a15c <UART_SetConfig+0x210>)
 800a032:	429a      	cmp	r2, r3
 800a034:	d102      	bne.n	800a03c <UART_SetConfig+0xf0>
 800a036:	2308      	movs	r3, #8
 800a038:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a03a:	e04e      	b.n	800a0da <UART_SetConfig+0x18e>
 800a03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	4b47      	ldr	r3, [pc, #284]	@ (800a160 <UART_SetConfig+0x214>)
 800a042:	429a      	cmp	r2, r3
 800a044:	d102      	bne.n	800a04c <UART_SetConfig+0x100>
 800a046:	2310      	movs	r3, #16
 800a048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a04a:	e046      	b.n	800a0da <UART_SetConfig+0x18e>
 800a04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	4b44      	ldr	r3, [pc, #272]	@ (800a164 <UART_SetConfig+0x218>)
 800a052:	429a      	cmp	r2, r3
 800a054:	d102      	bne.n	800a05c <UART_SetConfig+0x110>
 800a056:	2320      	movs	r3, #32
 800a058:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a05a:	e03e      	b.n	800a0da <UART_SetConfig+0x18e>
 800a05c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	4b41      	ldr	r3, [pc, #260]	@ (800a168 <UART_SetConfig+0x21c>)
 800a062:	429a      	cmp	r2, r3
 800a064:	d102      	bne.n	800a06c <UART_SetConfig+0x120>
 800a066:	2340      	movs	r3, #64	@ 0x40
 800a068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a06a:	e036      	b.n	800a0da <UART_SetConfig+0x18e>
 800a06c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a06e:	681a      	ldr	r2, [r3, #0]
 800a070:	4b3e      	ldr	r3, [pc, #248]	@ (800a16c <UART_SetConfig+0x220>)
 800a072:	429a      	cmp	r2, r3
 800a074:	d102      	bne.n	800a07c <UART_SetConfig+0x130>
 800a076:	2380      	movs	r3, #128	@ 0x80
 800a078:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a07a:	e02e      	b.n	800a0da <UART_SetConfig+0x18e>
 800a07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	4b3b      	ldr	r3, [pc, #236]	@ (800a170 <UART_SetConfig+0x224>)
 800a082:	429a      	cmp	r2, r3
 800a084:	d103      	bne.n	800a08e <UART_SetConfig+0x142>
 800a086:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a08a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a08c:	e025      	b.n	800a0da <UART_SetConfig+0x18e>
 800a08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	4b38      	ldr	r3, [pc, #224]	@ (800a174 <UART_SetConfig+0x228>)
 800a094:	429a      	cmp	r2, r3
 800a096:	d103      	bne.n	800a0a0 <UART_SetConfig+0x154>
 800a098:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a09c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a09e:	e01c      	b.n	800a0da <UART_SetConfig+0x18e>
 800a0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	4b34      	ldr	r3, [pc, #208]	@ (800a178 <UART_SetConfig+0x22c>)
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d103      	bne.n	800a0b2 <UART_SetConfig+0x166>
 800a0aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a0ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0b0:	e013      	b.n	800a0da <UART_SetConfig+0x18e>
 800a0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	4b31      	ldr	r3, [pc, #196]	@ (800a17c <UART_SetConfig+0x230>)
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d103      	bne.n	800a0c4 <UART_SetConfig+0x178>
 800a0bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a0c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0c2:	e00a      	b.n	800a0da <UART_SetConfig+0x18e>
 800a0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	4b1e      	ldr	r3, [pc, #120]	@ (800a144 <UART_SetConfig+0x1f8>)
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d103      	bne.n	800a0d6 <UART_SetConfig+0x18a>
 800a0ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0d4:	e001      	b.n	800a0da <UART_SetConfig+0x18e>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0dc:	681a      	ldr	r2, [r3, #0]
 800a0de:	4b19      	ldr	r3, [pc, #100]	@ (800a144 <UART_SetConfig+0x1f8>)
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d005      	beq.n	800a0f0 <UART_SetConfig+0x1a4>
 800a0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	4b18      	ldr	r3, [pc, #96]	@ (800a14c <UART_SetConfig+0x200>)
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	f040 8094 	bne.w	800a218 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a0f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	623b      	str	r3, [r7, #32]
 800a0f6:	627a      	str	r2, [r7, #36]	@ 0x24
 800a0f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a0fc:	f7fd f8c0 	bl	8007280 <HAL_RCCEx_GetPeriphCLKFreq>
 800a100:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 80f7 	beq.w	800a2f8 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a10e:	4a1c      	ldr	r2, [pc, #112]	@ (800a180 <UART_SetConfig+0x234>)
 800a110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a114:	461a      	mov	r2, r3
 800a116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a118:	fbb3 f3f2 	udiv	r3, r3, r2
 800a11c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a120:	685a      	ldr	r2, [r3, #4]
 800a122:	4613      	mov	r3, r2
 800a124:	005b      	lsls	r3, r3, #1
 800a126:	4413      	add	r3, r2
 800a128:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a12a:	429a      	cmp	r2, r3
 800a12c:	d305      	bcc.n	800a13a <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a12e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a134:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a136:	429a      	cmp	r2, r3
 800a138:	d924      	bls.n	800a184 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800a13a:	2301      	movs	r3, #1
 800a13c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a140:	e069      	b.n	800a216 <UART_SetConfig+0x2ca>
 800a142:	bf00      	nop
 800a144:	44002400 	.word	0x44002400
 800a148:	cfff69f3 	.word	0xcfff69f3
 800a14c:	54002400 	.word	0x54002400
 800a150:	40013800 	.word	0x40013800
 800a154:	40004400 	.word	0x40004400
 800a158:	40004800 	.word	0x40004800
 800a15c:	40004c00 	.word	0x40004c00
 800a160:	40005000 	.word	0x40005000
 800a164:	40006400 	.word	0x40006400
 800a168:	40007800 	.word	0x40007800
 800a16c:	40007c00 	.word	0x40007c00
 800a170:	40008000 	.word	0x40008000
 800a174:	40006800 	.word	0x40006800
 800a178:	40006c00 	.word	0x40006c00
 800a17c:	40008400 	.word	0x40008400
 800a180:	0800f994 	.word	0x0800f994
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a184:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a186:	2200      	movs	r2, #0
 800a188:	61bb      	str	r3, [r7, #24]
 800a18a:	61fa      	str	r2, [r7, #28]
 800a18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a18e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a190:	4a64      	ldr	r2, [pc, #400]	@ (800a324 <UART_SetConfig+0x3d8>)
 800a192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a196:	b29b      	uxth	r3, r3
 800a198:	2200      	movs	r2, #0
 800a19a:	613b      	str	r3, [r7, #16]
 800a19c:	617a      	str	r2, [r7, #20]
 800a19e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a1a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a1a6:	f7f6 f879 	bl	800029c <__aeabi_uldivmod>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	4619      	mov	r1, r3
 800a1b2:	f04f 0200 	mov.w	r2, #0
 800a1b6:	f04f 0300 	mov.w	r3, #0
 800a1ba:	020b      	lsls	r3, r1, #8
 800a1bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1c0:	0202      	lsls	r2, r0, #8
 800a1c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a1c4:	6849      	ldr	r1, [r1, #4]
 800a1c6:	0849      	lsrs	r1, r1, #1
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	460c      	mov	r4, r1
 800a1cc:	4605      	mov	r5, r0
 800a1ce:	eb12 0804 	adds.w	r8, r2, r4
 800a1d2:	eb43 0905 	adc.w	r9, r3, r5
 800a1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	60bb      	str	r3, [r7, #8]
 800a1de:	60fa      	str	r2, [r7, #12]
 800a1e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1e4:	4640      	mov	r0, r8
 800a1e6:	4649      	mov	r1, r9
 800a1e8:	f7f6 f858 	bl	800029c <__aeabi_uldivmod>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	4613      	mov	r3, r2
 800a1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a1f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a1fa:	d308      	bcc.n	800a20e <UART_SetConfig+0x2c2>
 800a1fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a1fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a202:	d204      	bcs.n	800a20e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800a204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a20a:	60da      	str	r2, [r3, #12]
 800a20c:	e003      	b.n	800a216 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a214:	e070      	b.n	800a2f8 <UART_SetConfig+0x3ac>
 800a216:	e06f      	b.n	800a2f8 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a220:	d13c      	bne.n	800a29c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a224:	2200      	movs	r2, #0
 800a226:	603b      	str	r3, [r7, #0]
 800a228:	607a      	str	r2, [r7, #4]
 800a22a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a22e:	f7fd f827 	bl	8007280 <HAL_RCCEx_GetPeriphCLKFreq>
 800a232:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a236:	2b00      	cmp	r3, #0
 800a238:	d05e      	beq.n	800a2f8 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a23a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a23c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a23e:	4a39      	ldr	r2, [pc, #228]	@ (800a324 <UART_SetConfig+0x3d8>)
 800a240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a244:	461a      	mov	r2, r3
 800a246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a248:	fbb3 f3f2 	udiv	r3, r3, r2
 800a24c:	005a      	lsls	r2, r3, #1
 800a24e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	085b      	lsrs	r3, r3, #1
 800a254:	441a      	add	r2, r3
 800a256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a25e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a262:	2b0f      	cmp	r3, #15
 800a264:	d916      	bls.n	800a294 <UART_SetConfig+0x348>
 800a266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a26c:	d212      	bcs.n	800a294 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a26e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a270:	b29b      	uxth	r3, r3
 800a272:	f023 030f 	bic.w	r3, r3, #15
 800a276:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a27a:	085b      	lsrs	r3, r3, #1
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	f003 0307 	and.w	r3, r3, #7
 800a282:	b29a      	uxth	r2, r3
 800a284:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a286:	4313      	orrs	r3, r2
 800a288:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a28a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a290:	60da      	str	r2, [r3, #12]
 800a292:	e031      	b.n	800a2f8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a29a:	e02d      	b.n	800a2f8 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a29c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a29e:	2200      	movs	r2, #0
 800a2a0:	469a      	mov	sl, r3
 800a2a2:	4693      	mov	fp, r2
 800a2a4:	4650      	mov	r0, sl
 800a2a6:	4659      	mov	r1, fp
 800a2a8:	f7fc ffea 	bl	8007280 <HAL_RCCEx_GetPeriphCLKFreq>
 800a2ac:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a2ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d021      	beq.n	800a2f8 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b8:	4a1a      	ldr	r2, [pc, #104]	@ (800a324 <UART_SetConfig+0x3d8>)
 800a2ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a2be:	461a      	mov	r2, r3
 800a2c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	085b      	lsrs	r3, r3, #1
 800a2cc:	441a      	add	r2, r3
 800a2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a2d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2da:	2b0f      	cmp	r3, #15
 800a2dc:	d909      	bls.n	800a2f2 <UART_SetConfig+0x3a6>
 800a2de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2e4:	d205      	bcs.n	800a2f2 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a2e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2e8:	b29a      	uxth	r2, r3
 800a2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	60da      	str	r2, [r3, #12]
 800a2f0:	e002      	b.n	800a2f8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a2f2:	2301      	movs	r3, #1
 800a2f4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a302:	2201      	movs	r2, #1
 800a304:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a30a:	2200      	movs	r2, #0
 800a30c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a30e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a310:	2200      	movs	r2, #0
 800a312:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a314:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3750      	adds	r7, #80	@ 0x50
 800a31c:	46bd      	mov	sp, r7
 800a31e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a322:	bf00      	nop
 800a324:	0800f994 	.word	0x0800f994

0800a328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a334:	f003 0308 	and.w	r3, r3, #8
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00a      	beq.n	800a352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	685b      	ldr	r3, [r3, #4]
 800a342:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	430a      	orrs	r2, r1
 800a350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a356:	f003 0301 	and.w	r3, r3, #1
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00a      	beq.n	800a374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	430a      	orrs	r2, r1
 800a372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a378:	f003 0302 	and.w	r3, r3, #2
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d00a      	beq.n	800a396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	430a      	orrs	r2, r1
 800a394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a39a:	f003 0304 	and.w	r3, r3, #4
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00a      	beq.n	800a3b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	430a      	orrs	r2, r1
 800a3b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3bc:	f003 0310 	and.w	r3, r3, #16
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d00a      	beq.n	800a3da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	430a      	orrs	r2, r1
 800a3d8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3de:	f003 0320 	and.w	r3, r3, #32
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d00a      	beq.n	800a3fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	430a      	orrs	r2, r1
 800a3fa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a404:	2b00      	cmp	r3, #0
 800a406:	d01a      	beq.n	800a43e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	430a      	orrs	r2, r1
 800a41c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a426:	d10a      	bne.n	800a43e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	430a      	orrs	r2, r1
 800a43c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00a      	beq.n	800a460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	685b      	ldr	r3, [r3, #4]
 800a450:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	430a      	orrs	r2, r1
 800a45e:	605a      	str	r2, [r3, #4]
  }
}
 800a460:	bf00      	nop
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b098      	sub	sp, #96	@ 0x60
 800a470:	af02      	add	r7, sp, #8
 800a472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a47c:	f7f7 f9d0 	bl	8001820 <HAL_GetTick>
 800a480:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 0308 	and.w	r3, r3, #8
 800a48c:	2b08      	cmp	r3, #8
 800a48e:	d12f      	bne.n	800a4f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a490:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a494:	9300      	str	r3, [sp, #0]
 800a496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a498:	2200      	movs	r2, #0
 800a49a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f88e 	bl	800a5c0 <UART_WaitOnFlagUntilTimeout>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d022      	beq.n	800a4f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b2:	e853 3f00 	ldrex	r3, [r3]
 800a4b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a4be:	653b      	str	r3, [r7, #80]	@ 0x50
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a4c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a4ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a4ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4d0:	e841 2300 	strex	r3, r2, [r1]
 800a4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d1e6      	bne.n	800a4aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2220      	movs	r2, #32
 800a4e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4ec:	2303      	movs	r3, #3
 800a4ee:	e063      	b.n	800a5b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 0304 	and.w	r3, r3, #4
 800a4fa:	2b04      	cmp	r3, #4
 800a4fc:	d149      	bne.n	800a592 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a506:	2200      	movs	r2, #0
 800a508:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f857 	bl	800a5c0 <UART_WaitOnFlagUntilTimeout>
 800a512:	4603      	mov	r3, r0
 800a514:	2b00      	cmp	r3, #0
 800a516:	d03c      	beq.n	800a592 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a520:	e853 3f00 	ldrex	r3, [r3]
 800a524:	623b      	str	r3, [r7, #32]
   return(result);
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a52c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	461a      	mov	r2, r3
 800a534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a536:	633b      	str	r3, [r7, #48]	@ 0x30
 800a538:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a53a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a53c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a53e:	e841 2300 	strex	r3, r2, [r1]
 800a542:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1e6      	bne.n	800a518 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3308      	adds	r3, #8
 800a550:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	e853 3f00 	ldrex	r3, [r3]
 800a558:	60fb      	str	r3, [r7, #12]
   return(result);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f023 0301 	bic.w	r3, r3, #1
 800a560:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3308      	adds	r3, #8
 800a568:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a56a:	61fa      	str	r2, [r7, #28]
 800a56c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56e:	69b9      	ldr	r1, [r7, #24]
 800a570:	69fa      	ldr	r2, [r7, #28]
 800a572:	e841 2300 	strex	r3, r2, [r1]
 800a576:	617b      	str	r3, [r7, #20]
   return(result);
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1e5      	bne.n	800a54a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2220      	movs	r2, #32
 800a582:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a58e:	2303      	movs	r3, #3
 800a590:	e012      	b.n	800a5b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2220      	movs	r2, #32
 800a596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2220      	movs	r2, #32
 800a59e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3758      	adds	r7, #88	@ 0x58
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5d0:	e04f      	b.n	800a672 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5d8:	d04b      	beq.n	800a672 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a5da:	f7f7 f921 	bl	8001820 <HAL_GetTick>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	69ba      	ldr	r2, [r7, #24]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d302      	bcc.n	800a5f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d101      	bne.n	800a5f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a5f0:	2303      	movs	r3, #3
 800a5f2:	e04e      	b.n	800a692 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 0304 	and.w	r3, r3, #4
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d037      	beq.n	800a672 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2b80      	cmp	r3, #128	@ 0x80
 800a606:	d034      	beq.n	800a672 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	2b40      	cmp	r3, #64	@ 0x40
 800a60c:	d031      	beq.n	800a672 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	69db      	ldr	r3, [r3, #28]
 800a614:	f003 0308 	and.w	r3, r3, #8
 800a618:	2b08      	cmp	r3, #8
 800a61a:	d110      	bne.n	800a63e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2208      	movs	r2, #8
 800a622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f000 f838 	bl	800a69a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2208      	movs	r2, #8
 800a62e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2200      	movs	r2, #0
 800a636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a63a:	2301      	movs	r3, #1
 800a63c:	e029      	b.n	800a692 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	69db      	ldr	r3, [r3, #28]
 800a644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a64c:	d111      	bne.n	800a672 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a656:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 f81e 	bl	800a69a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2220      	movs	r2, #32
 800a662:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2200      	movs	r2, #0
 800a66a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e00f      	b.n	800a692 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	69da      	ldr	r2, [r3, #28]
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	4013      	ands	r3, r2
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	429a      	cmp	r2, r3
 800a680:	bf0c      	ite	eq
 800a682:	2301      	moveq	r3, #1
 800a684:	2300      	movne	r3, #0
 800a686:	b2db      	uxtb	r3, r3
 800a688:	461a      	mov	r2, r3
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d0a0      	beq.n	800a5d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a69a:	b480      	push	{r7}
 800a69c:	b095      	sub	sp, #84	@ 0x54
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6aa:	e853 3f00 	ldrex	r3, [r3]
 800a6ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a6b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	461a      	mov	r2, r3
 800a6be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a6c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a6c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a6c8:	e841 2300 	strex	r3, r2, [r1]
 800a6cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1e6      	bne.n	800a6a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	3308      	adds	r3, #8
 800a6da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6dc:	6a3b      	ldr	r3, [r7, #32]
 800a6de:	e853 3f00 	ldrex	r3, [r3]
 800a6e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6ea:	f023 0301 	bic.w	r3, r3, #1
 800a6ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	3308      	adds	r3, #8
 800a6f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a6fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a700:	e841 2300 	strex	r3, r2, [r1]
 800a704:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1e3      	bne.n	800a6d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a710:	2b01      	cmp	r3, #1
 800a712:	d118      	bne.n	800a746 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	e853 3f00 	ldrex	r3, [r3]
 800a720:	60bb      	str	r3, [r7, #8]
   return(result);
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	f023 0310 	bic.w	r3, r3, #16
 800a728:	647b      	str	r3, [r7, #68]	@ 0x44
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	461a      	mov	r2, r3
 800a730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a732:	61bb      	str	r3, [r7, #24]
 800a734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a736:	6979      	ldr	r1, [r7, #20]
 800a738:	69ba      	ldr	r2, [r7, #24]
 800a73a:	e841 2300 	strex	r3, r2, [r1]
 800a73e:	613b      	str	r3, [r7, #16]
   return(result);
 800a740:	693b      	ldr	r3, [r7, #16]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d1e6      	bne.n	800a714 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2220      	movs	r2, #32
 800a74a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2200      	movs	r2, #0
 800a752:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a75a:	bf00      	nop
 800a75c:	3754      	adds	r7, #84	@ 0x54
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr

0800a766 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a766:	b480      	push	{r7}
 800a768:	b085      	sub	sp, #20
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a774:	2b01      	cmp	r3, #1
 800a776:	d101      	bne.n	800a77c <HAL_UARTEx_DisableFifoMode+0x16>
 800a778:	2302      	movs	r3, #2
 800a77a:	e027      	b.n	800a7cc <HAL_UARTEx_DisableFifoMode+0x66>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2224      	movs	r2, #36	@ 0x24
 800a788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f022 0201 	bic.w	r2, r2, #1
 800a7a2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a7aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2220      	movs	r2, #32
 800a7be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3714      	adds	r7, #20
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a7e8:	2b01      	cmp	r3, #1
 800a7ea:	d101      	bne.n	800a7f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7ec:	2302      	movs	r3, #2
 800a7ee:	e02d      	b.n	800a84c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2224      	movs	r2, #36	@ 0x24
 800a7fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f022 0201 	bic.w	r2, r2, #1
 800a816:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	683a      	ldr	r2, [r7, #0]
 800a828:	430a      	orrs	r2, r1
 800a82a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f84f 	bl	800a8d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2220      	movs	r2, #32
 800a83e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a864:	2b01      	cmp	r3, #1
 800a866:	d101      	bne.n	800a86c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a868:	2302      	movs	r3, #2
 800a86a:	e02d      	b.n	800a8c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2224      	movs	r2, #36	@ 0x24
 800a878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681a      	ldr	r2, [r3, #0]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f022 0201 	bic.w	r2, r2, #1
 800a892:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	683a      	ldr	r2, [r7, #0]
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f811 	bl	800a8d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a8c6:	2300      	movs	r3, #0
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}

0800a8d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d108      	bne.n	800a8f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8f0:	e031      	b.n	800a956 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8f2:	2308      	movs	r3, #8
 800a8f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8f6:	2308      	movs	r3, #8
 800a8f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	689b      	ldr	r3, [r3, #8]
 800a900:	0e5b      	lsrs	r3, r3, #25
 800a902:	b2db      	uxtb	r3, r3
 800a904:	f003 0307 	and.w	r3, r3, #7
 800a908:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	0f5b      	lsrs	r3, r3, #29
 800a912:	b2db      	uxtb	r3, r3
 800a914:	f003 0307 	and.w	r3, r3, #7
 800a918:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a91a:	7bbb      	ldrb	r3, [r7, #14]
 800a91c:	7b3a      	ldrb	r2, [r7, #12]
 800a91e:	4911      	ldr	r1, [pc, #68]	@ (800a964 <UARTEx_SetNbDataToProcess+0x94>)
 800a920:	5c8a      	ldrb	r2, [r1, r2]
 800a922:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a926:	7b3a      	ldrb	r2, [r7, #12]
 800a928:	490f      	ldr	r1, [pc, #60]	@ (800a968 <UARTEx_SetNbDataToProcess+0x98>)
 800a92a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a92c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a930:	b29a      	uxth	r2, r3
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a938:	7bfb      	ldrb	r3, [r7, #15]
 800a93a:	7b7a      	ldrb	r2, [r7, #13]
 800a93c:	4909      	ldr	r1, [pc, #36]	@ (800a964 <UARTEx_SetNbDataToProcess+0x94>)
 800a93e:	5c8a      	ldrb	r2, [r1, r2]
 800a940:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a944:	7b7a      	ldrb	r2, [r7, #13]
 800a946:	4908      	ldr	r1, [pc, #32]	@ (800a968 <UARTEx_SetNbDataToProcess+0x98>)
 800a948:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a94a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a94e:	b29a      	uxth	r2, r3
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a956:	bf00      	nop
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	0800f9ac 	.word	0x0800f9ac
 800a968:	0800f9b4 	.word	0x0800f9b4

0800a96c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a978:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a984:	f043 0201 	orr.w	r2, r3, #1
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800a99a:	b084      	sub	sp, #16
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	f107 001c 	add.w	r0, r7, #28
 800a9a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e008      	b.n	800a9c8 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f7ff ffd8 	bl	800a96c <USB_CoreReset>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3710      	adds	r7, #16
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9d2:	b004      	add	sp, #16
 800a9d4:	4770      	bx	lr

0800a9d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800a9d6:	b480      	push	{r7}
 800a9d8:	b085      	sub	sp, #20
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a9e4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a9e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	b085      	sub	sp, #20
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800aa06:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800aa0a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	43db      	mvns	r3, r3
 800aa14:	401a      	ands	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3714      	adds	r7, #20
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b083      	sub	sp, #12
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800aa34:	78fb      	ldrb	r3, [r7, #3]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d106      	bne.n	800aa48 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa3e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	641a      	str	r2, [r3, #64]	@ 0x40
 800aa46:	e00b      	b.n	800aa60 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800aa48:	78fb      	ldrb	r3, [r7, #3]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d106      	bne.n	800aa5c <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa52:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	641a      	str	r2, [r3, #64]	@ 0x40
 800aa5a:	e001      	b.n	800aa60 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e000      	b.n	800aa62 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	370c      	adds	r7, #12
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800aa6e:	b084      	sub	sp, #16
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	f107 001c 	add.w	r0, r7, #28
 800aa7c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa8a:	f023 0201 	bic.w	r2, r3, #1
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800aa92:	2100      	movs	r1, #0
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f7ff ffc7 	bl	800aa28 <USB_SetCurrentMode>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3710      	adds	r7, #16
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aab0:	b004      	add	sp, #16
 800aab2:	4770      	bx	lr

0800aab4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b09f      	sub	sp, #124	@ 0x7c
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800aabe:	2300      	movs	r3, #0
 800aac0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	4ba0      	ldr	r3, [pc, #640]	@ (800ad54 <USB_ActivateEndpoint+0x2a0>)
 800aad2:	4013      	ands	r3, r2
 800aad4:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	78db      	ldrb	r3, [r3, #3]
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d819      	bhi.n	800ab12 <USB_ActivateEndpoint+0x5e>
 800aade:	a201      	add	r2, pc, #4	@ (adr r2, 800aae4 <USB_ActivateEndpoint+0x30>)
 800aae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aae4:	0800aaf5 	.word	0x0800aaf5
 800aae8:	0800ab09 	.word	0x0800ab09
 800aaec:	0800ab1b 	.word	0x0800ab1b
 800aaf0:	0800aaff 	.word	0x0800aaff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800aaf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800aaf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800aafa:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800aafc:	e00e      	b.n	800ab1c <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800aafe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab00:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800ab04:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800ab06:	e009      	b.n	800ab1c <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ab08:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ab0e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800ab10:	e004      	b.n	800ab1c <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800ab18:	e000      	b.n	800ab1c <USB_ActivateEndpoint+0x68>
      break;
 800ab1a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	441a      	add	r2, r3
 800ab26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ab28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab30:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4413      	add	r3, r2
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	4b86      	ldr	r3, [pc, #536]	@ (800ad58 <USB_ActivateEndpoint+0x2a4>)
 800ab40:	4013      	ands	r3, r2
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	7812      	ldrb	r2, [r2, #0]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	441a      	add	r2, r3
 800ab54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ab56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab5e:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	7b1b      	ldrb	r3, [r3, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f040 8177 	bne.w	800ae58 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	785b      	ldrb	r3, [r3, #1]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d079      	beq.n	800ac66 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	781b      	ldrb	r3, [r3, #0]
 800ab76:	00db      	lsls	r3, r3, #3
 800ab78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	00db      	lsls	r3, r3, #3
 800ab88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ab90:	0c12      	lsrs	r2, r2, #16
 800ab92:	0412      	lsls	r2, r2, #16
 800ab94:	601a      	str	r2, [r3, #0]
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	00db      	lsls	r3, r3, #3
 800ab9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aba0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aba4:	6819      	ldr	r1, [r3, #0]
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	88db      	ldrh	r3, [r3, #6]
 800abaa:	089b      	lsrs	r3, r3, #2
 800abac:	b29b      	uxth	r3, r3
 800abae:	009a      	lsls	r2, r3, #2
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	00db      	lsls	r3, r3, #3
 800abb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800abba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800abbe:	430a      	orrs	r2, r1
 800abc0:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	61bb      	str	r3, [r7, #24]
 800abd0:	69bb      	ldr	r3, [r7, #24]
 800abd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d013      	beq.n	800ac02 <USB_ActivateEndpoint+0x14e>
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	4b5c      	ldr	r3, [pc, #368]	@ (800ad58 <USB_ActivateEndpoint+0x2a4>)
 800abe8:	4013      	ands	r3, r2
 800abea:	617b      	str	r3, [r7, #20]
 800abec:	687a      	ldr	r2, [r7, #4]
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	781b      	ldrb	r3, [r3, #0]
 800abf2:	009b      	lsls	r3, r3, #2
 800abf4:	441a      	add	r2, r3
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abfc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac00:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	78db      	ldrb	r3, [r3, #3]
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d018      	beq.n	800ac3c <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	4413      	add	r3, r2
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	4b51      	ldr	r3, [pc, #324]	@ (800ad5c <USB_ActivateEndpoint+0x2a8>)
 800ac18:	4013      	ands	r3, r2
 800ac1a:	60fb      	str	r3, [r7, #12]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f083 0320 	eor.w	r3, r3, #32
 800ac22:	60fb      	str	r3, [r7, #12]
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	781b      	ldrb	r3, [r3, #0]
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	441a      	add	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac38:	6013      	str	r3, [r2, #0]
 800ac3a:	e28c      	b.n	800b156 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	781b      	ldrb	r3, [r3, #0]
 800ac42:	009b      	lsls	r3, r3, #2
 800ac44:	4413      	add	r3, r2
 800ac46:	681a      	ldr	r2, [r3, #0]
 800ac48:	4b44      	ldr	r3, [pc, #272]	@ (800ad5c <USB_ActivateEndpoint+0x2a8>)
 800ac4a:	4013      	ands	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	441a      	add	r2, r3
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac62:	6013      	str	r3, [r2, #0]
 800ac64:	e277      	b.n	800b156 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	00db      	lsls	r3, r3, #3
 800ac6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ac74:	685a      	ldr	r2, [r3, #4]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	00db      	lsls	r3, r3, #3
 800ac7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ac84:	0c12      	lsrs	r2, r2, #16
 800ac86:	0412      	lsls	r2, r2, #16
 800ac88:	605a      	str	r2, [r3, #4]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	00db      	lsls	r3, r3, #3
 800ac90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ac94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ac98:	6859      	ldr	r1, [r3, #4]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	88db      	ldrh	r3, [r3, #6]
 800ac9e:	089b      	lsrs	r3, r3, #2
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	009a      	lsls	r2, r3, #2
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800acae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800acb2:	430a      	orrs	r2, r1
 800acb4:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	00db      	lsls	r3, r3, #3
 800acbc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800acc0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	00db      	lsls	r3, r3, #3
 800accc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800acd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800acd4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800acd8:	605a      	str	r2, [r3, #4]
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	691b      	ldr	r3, [r3, #16]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d112      	bne.n	800ad08 <USB_ActivateEndpoint+0x254>
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	00db      	lsls	r3, r3, #3
 800ace8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800acec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800acf0:	685a      	ldr	r2, [r3, #4]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	00db      	lsls	r3, r3, #3
 800acf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800acfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad00:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ad04:	605a      	str	r2, [r3, #4]
 800ad06:	e04d      	b.n	800ada4 <USB_ActivateEndpoint+0x2f0>
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad0e:	d827      	bhi.n	800ad60 <USB_ActivateEndpoint+0x2ac>
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	085b      	lsrs	r3, r3, #1
 800ad16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	f003 0301 	and.w	r3, r3, #1
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d002      	beq.n	800ad2a <USB_ActivateEndpoint+0x276>
 800ad24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad26:	3301      	adds	r3, #1
 800ad28:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	781b      	ldrb	r3, [r3, #0]
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad38:	6859      	ldr	r1, [r3, #4]
 800ad3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad3c:	069a      	lsls	r2, r3, #26
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	00db      	lsls	r3, r3, #3
 800ad44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad4c:	430a      	orrs	r2, r1
 800ad4e:	605a      	str	r2, [r3, #4]
 800ad50:	e028      	b.n	800ada4 <USB_ActivateEndpoint+0x2f0>
 800ad52:	bf00      	nop
 800ad54:	07ff898f 	.word	0x07ff898f
 800ad58:	07ff8f8f 	.word	0x07ff8f8f
 800ad5c:	07ff8fbf 	.word	0x07ff8fbf
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	691b      	ldr	r3, [r3, #16]
 800ad64:	095b      	lsrs	r3, r3, #5
 800ad66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	f003 031f 	and.w	r3, r3, #31
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d102      	bne.n	800ad7a <USB_ActivateEndpoint+0x2c6>
 800ad74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad76:	3b01      	subs	r3, #1
 800ad78:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	00db      	lsls	r3, r3, #3
 800ad80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad88:	685a      	ldr	r2, [r3, #4]
 800ad8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ad8c:	069b      	lsls	r3, r3, #26
 800ad8e:	431a      	orrs	r2, r3
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	00db      	lsls	r3, r3, #3
 800ad96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad9e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ada2:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	4413      	add	r3, r2
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800adb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d013      	beq.n	800ade4 <USB_ActivateEndpoint+0x330>
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	009b      	lsls	r3, r3, #2
 800adc4:	4413      	add	r3, r2
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	4b9c      	ldr	r3, [pc, #624]	@ (800b03c <USB_ActivateEndpoint+0x588>)
 800adca:	4013      	ands	r3, r2
 800adcc:	627b      	str	r3, [r7, #36]	@ 0x24
 800adce:	687a      	ldr	r2, [r7, #4]
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	441a      	add	r2, r3
 800add8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800adde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ade2:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d11c      	bne.n	800ae26 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	009b      	lsls	r3, r3, #2
 800adf4:	4413      	add	r3, r2
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	4b91      	ldr	r3, [pc, #580]	@ (800b040 <USB_ActivateEndpoint+0x58c>)
 800adfa:	4013      	ands	r3, r2
 800adfc:	61fb      	str	r3, [r7, #28]
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ae04:	61fb      	str	r3, [r7, #28]
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae0c:	61fb      	str	r3, [r7, #28]
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	441a      	add	r2, r3
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae22:	6013      	str	r3, [r2, #0]
 800ae24:	e197      	b.n	800b156 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	4b83      	ldr	r3, [pc, #524]	@ (800b040 <USB_ActivateEndpoint+0x58c>)
 800ae34:	4013      	ands	r3, r2
 800ae36:	623b      	str	r3, [r7, #32]
 800ae38:	6a3b      	ldr	r3, [r7, #32]
 800ae3a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ae3e:	623b      	str	r3, [r7, #32]
 800ae40:	687a      	ldr	r2, [r7, #4]
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	441a      	add	r2, r3
 800ae4a:	6a3b      	ldr	r3, [r7, #32]
 800ae4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae54:	6013      	str	r3, [r2, #0]
 800ae56:	e17e      	b.n	800b156 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	78db      	ldrb	r3, [r3, #3]
 800ae5c:	2b02      	cmp	r3, #2
 800ae5e:	d114      	bne.n	800ae8a <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ae60:	687a      	ldr	r2, [r7, #4]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	4413      	add	r3, r2
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	4b73      	ldr	r3, [pc, #460]	@ (800b03c <USB_ActivateEndpoint+0x588>)
 800ae6e:	4013      	ands	r3, r2
 800ae70:	663b      	str	r3, [r7, #96]	@ 0x60
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	441a      	add	r2, r3
 800ae7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae7e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ae82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae86:	6013      	str	r3, [r2, #0]
 800ae88:	e013      	b.n	800aeb2 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	4413      	add	r3, r2
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	4b6b      	ldr	r3, [pc, #428]	@ (800b044 <USB_ActivateEndpoint+0x590>)
 800ae98:	4013      	ands	r3, r2
 800ae9a:	667b      	str	r3, [r7, #100]	@ 0x64
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	441a      	add	r2, r3
 800aea6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800aea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aeac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeb0:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	781b      	ldrb	r3, [r3, #0]
 800aeb6:	00db      	lsls	r3, r3, #3
 800aeb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aebc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	00db      	lsls	r3, r3, #3
 800aec8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aecc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aed0:	0c12      	lsrs	r2, r2, #16
 800aed2:	0412      	lsls	r2, r2, #16
 800aed4:	601a      	str	r2, [r3, #0]
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	00db      	lsls	r3, r3, #3
 800aedc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aee0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aee4:	6819      	ldr	r1, [r3, #0]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	891b      	ldrh	r3, [r3, #8]
 800aeea:	089b      	lsrs	r3, r3, #2
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	009a      	lsls	r2, r3, #2
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	00db      	lsls	r3, r3, #3
 800aef6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aefa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aefe:	430a      	orrs	r2, r1
 800af00:	601a      	str	r2, [r3, #0]
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	00db      	lsls	r3, r3, #3
 800af08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800af10:	685a      	ldr	r2, [r3, #4]
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	781b      	ldrb	r3, [r3, #0]
 800af16:	00db      	lsls	r3, r3, #3
 800af18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800af20:	0c12      	lsrs	r2, r2, #16
 800af22:	0412      	lsls	r2, r2, #16
 800af24:	605a      	str	r2, [r3, #4]
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	00db      	lsls	r3, r3, #3
 800af2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800af34:	6859      	ldr	r1, [r3, #4]
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	895b      	ldrh	r3, [r3, #10]
 800af3a:	089b      	lsrs	r3, r3, #2
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	009a      	lsls	r2, r3, #2
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	00db      	lsls	r3, r3, #3
 800af46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800af4e:	430a      	orrs	r2, r1
 800af50:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	785b      	ldrb	r3, [r3, #1]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d178      	bne.n	800b04c <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	643b      	str	r3, [r7, #64]	@ 0x40
 800af68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d013      	beq.n	800af9a <USB_ActivateEndpoint+0x4e6>
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	009b      	lsls	r3, r3, #2
 800af7a:	4413      	add	r3, r2
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	4b2f      	ldr	r3, [pc, #188]	@ (800b03c <USB_ActivateEndpoint+0x588>)
 800af80:	4013      	ands	r3, r2
 800af82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	441a      	add	r2, r3
 800af8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800af94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af98:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	4413      	add	r3, r2
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800afa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d013      	beq.n	800afda <USB_ActivateEndpoint+0x526>
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	4413      	add	r3, r2
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	4b1f      	ldr	r3, [pc, #124]	@ (800b03c <USB_ActivateEndpoint+0x588>)
 800afc0:	4013      	ands	r3, r2
 800afc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	781b      	ldrb	r3, [r3, #0]
 800afca:	009b      	lsls	r3, r3, #2
 800afcc:	441a      	add	r2, r3
 800afce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afd4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800afd8:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800afda:	687a      	ldr	r2, [r7, #4]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4413      	add	r3, r2
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	4b16      	ldr	r3, [pc, #88]	@ (800b040 <USB_ActivateEndpoint+0x58c>)
 800afe8:	4013      	ands	r3, r2
 800afea:	633b      	str	r3, [r7, #48]	@ 0x30
 800afec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afee:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aff2:	633b      	str	r3, [r7, #48]	@ 0x30
 800aff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800affa:	633b      	str	r3, [r7, #48]	@ 0x30
 800affc:	687a      	ldr	r2, [r7, #4]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	441a      	add	r2, r3
 800b006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b008:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b00c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b010:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b012:	687a      	ldr	r2, [r7, #4]
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	009b      	lsls	r3, r3, #2
 800b01a:	4413      	add	r3, r2
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	4b0a      	ldr	r3, [pc, #40]	@ (800b048 <USB_ActivateEndpoint+0x594>)
 800b020:	4013      	ands	r3, r2
 800b022:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	441a      	add	r2, r3
 800b02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b030:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b034:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b038:	6013      	str	r3, [r2, #0]
 800b03a:	e08c      	b.n	800b156 <USB_ActivateEndpoint+0x6a2>
 800b03c:	07ff8f8f 	.word	0x07ff8f8f
 800b040:	07ffbf8f 	.word	0x07ffbf8f
 800b044:	07ff8e8f 	.word	0x07ff8e8f
 800b048:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b05a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b05c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b060:	2b00      	cmp	r3, #0
 800b062:	d013      	beq.n	800b08c <USB_ActivateEndpoint+0x5d8>
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	4413      	add	r3, r2
 800b06e:	681a      	ldr	r2, [r3, #0]
 800b070:	4b3d      	ldr	r3, [pc, #244]	@ (800b168 <USB_ActivateEndpoint+0x6b4>)
 800b072:	4013      	ands	r3, r2
 800b074:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	441a      	add	r2, r3
 800b080:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b082:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b08a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b08c:	687a      	ldr	r2, [r7, #4]
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4413      	add	r3, r2
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	657b      	str	r3, [r7, #84]	@ 0x54
 800b09a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b09c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d013      	beq.n	800b0cc <USB_ActivateEndpoint+0x618>
 800b0a4:	687a      	ldr	r2, [r7, #4]
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	4413      	add	r3, r2
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	4b2d      	ldr	r3, [pc, #180]	@ (800b168 <USB_ActivateEndpoint+0x6b4>)
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	441a      	add	r2, r3
 800b0c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b0ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	78db      	ldrb	r3, [r3, #3]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d018      	beq.n	800b106 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	781b      	ldrb	r3, [r3, #0]
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	4413      	add	r3, r2
 800b0de:	681a      	ldr	r2, [r3, #0]
 800b0e0:	4b22      	ldr	r3, [pc, #136]	@ (800b16c <USB_ActivateEndpoint+0x6b8>)
 800b0e2:	4013      	ands	r3, r2
 800b0e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0e8:	f083 0320 	eor.w	r3, r3, #32
 800b0ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	009b      	lsls	r3, r3, #2
 800b0f6:	441a      	add	r2, r3
 800b0f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b0fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b102:	6013      	str	r3, [r2, #0]
 800b104:	e013      	b.n	800b12e <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4413      	add	r3, r2
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	4b16      	ldr	r3, [pc, #88]	@ (800b16c <USB_ActivateEndpoint+0x6b8>)
 800b114:	4013      	ands	r3, r2
 800b116:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	441a      	add	r2, r3
 800b122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b124:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b128:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b12c:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	4413      	add	r3, r2
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	4b0d      	ldr	r3, [pc, #52]	@ (800b170 <USB_ActivateEndpoint+0x6bc>)
 800b13c:	4013      	ands	r3, r2
 800b13e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	441a      	add	r2, r3
 800b14a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b14c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b150:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b154:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b156:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	377c      	adds	r7, #124	@ 0x7c
 800b15e:	46bd      	mov	sp, r7
 800b160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	07ff8f8f 	.word	0x07ff8f8f
 800b16c:	07ff8fbf 	.word	0x07ff8fbf
 800b170:	07ffbf8f 	.word	0x07ffbf8f

0800b174 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b174:	b480      	push	{r7}
 800b176:	b097      	sub	sp, #92	@ 0x5c
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	7b1b      	ldrb	r3, [r3, #12]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d16d      	bne.n	800b262 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	785b      	ldrb	r3, [r3, #1]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d034      	beq.n	800b1f8 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	613b      	str	r3, [r7, #16]
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d013      	beq.n	800b1ce <USB_DeactivateEndpoint+0x5a>
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	4b6d      	ldr	r3, [pc, #436]	@ (800b368 <USB_DeactivateEndpoint+0x1f4>)
 800b1b4:	4013      	ands	r3, r2
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	441a      	add	r2, r3
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b1cc:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	781b      	ldrb	r3, [r3, #0]
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	4413      	add	r3, r2
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	4b64      	ldr	r3, [pc, #400]	@ (800b36c <USB_DeactivateEndpoint+0x1f8>)
 800b1dc:	4013      	ands	r3, r2
 800b1de:	60bb      	str	r3, [r7, #8]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	781b      	ldrb	r3, [r3, #0]
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	441a      	add	r2, r3
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	e139      	b.n	800b46c <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b1f8:	687a      	ldr	r2, [r7, #4]
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4413      	add	r3, r2
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	61fb      	str	r3, [r7, #28]
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d013      	beq.n	800b238 <USB_DeactivateEndpoint+0xc4>
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	4b52      	ldr	r3, [pc, #328]	@ (800b368 <USB_DeactivateEndpoint+0x1f4>)
 800b21e:	4013      	ands	r3, r2
 800b220:	61bb      	str	r3, [r7, #24]
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	441a      	add	r2, r3
 800b22c:	69bb      	ldr	r3, [r7, #24]
 800b22e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b236:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4413      	add	r3, r2
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	4b4a      	ldr	r3, [pc, #296]	@ (800b370 <USB_DeactivateEndpoint+0x1fc>)
 800b246:	4013      	ands	r3, r2
 800b248:	617b      	str	r3, [r7, #20]
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	781b      	ldrb	r3, [r3, #0]
 800b250:	009b      	lsls	r3, r3, #2
 800b252:	441a      	add	r2, r3
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b25a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b25e:	6013      	str	r3, [r2, #0]
 800b260:	e104      	b.n	800b46c <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	785b      	ldrb	r3, [r3, #1]
 800b266:	2b00      	cmp	r3, #0
 800b268:	f040 8084 	bne.w	800b374 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	781b      	ldrb	r3, [r3, #0]
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b280:	2b00      	cmp	r3, #0
 800b282:	d013      	beq.n	800b2ac <USB_DeactivateEndpoint+0x138>
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4413      	add	r3, r2
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	4b35      	ldr	r3, [pc, #212]	@ (800b368 <USB_DeactivateEndpoint+0x1f4>)
 800b292:	4013      	ands	r3, r2
 800b294:	637b      	str	r3, [r7, #52]	@ 0x34
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	781b      	ldrb	r3, [r3, #0]
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	441a      	add	r2, r3
 800b2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b2a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2aa:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	4413      	add	r3, r2
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d013      	beq.n	800b2ec <USB_DeactivateEndpoint+0x178>
 800b2c4:	687a      	ldr	r2, [r7, #4]
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	4413      	add	r3, r2
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	4b25      	ldr	r3, [pc, #148]	@ (800b368 <USB_DeactivateEndpoint+0x1f4>)
 800b2d2:	4013      	ands	r3, r2
 800b2d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	781b      	ldrb	r3, [r3, #0]
 800b2dc:	009b      	lsls	r3, r3, #2
 800b2de:	441a      	add	r2, r3
 800b2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b2ea:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b2ec:	687a      	ldr	r2, [r7, #4]
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	4413      	add	r3, r2
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	4b1b      	ldr	r3, [pc, #108]	@ (800b368 <USB_DeactivateEndpoint+0x1f4>)
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	441a      	add	r2, r3
 800b308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b30a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b30e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b312:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	781b      	ldrb	r3, [r3, #0]
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	4b13      	ldr	r3, [pc, #76]	@ (800b370 <USB_DeactivateEndpoint+0x1fc>)
 800b322:	4013      	ands	r3, r2
 800b324:	627b      	str	r3, [r7, #36]	@ 0x24
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	781b      	ldrb	r3, [r3, #0]
 800b32c:	009b      	lsls	r3, r3, #2
 800b32e:	441a      	add	r2, r3
 800b330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b332:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b336:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b33a:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b33c:	687a      	ldr	r2, [r7, #4]
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	4413      	add	r3, r2
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	4b08      	ldr	r3, [pc, #32]	@ (800b36c <USB_DeactivateEndpoint+0x1f8>)
 800b34a:	4013      	ands	r3, r2
 800b34c:	623b      	str	r3, [r7, #32]
 800b34e:	687a      	ldr	r2, [r7, #4]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	781b      	ldrb	r3, [r3, #0]
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	441a      	add	r2, r3
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b35e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b362:	6013      	str	r3, [r2, #0]
 800b364:	e082      	b.n	800b46c <USB_DeactivateEndpoint+0x2f8>
 800b366:	bf00      	nop
 800b368:	07ff8f8f 	.word	0x07ff8f8f
 800b36c:	07ff8fbf 	.word	0x07ff8fbf
 800b370:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	781b      	ldrb	r3, [r3, #0]
 800b37a:	009b      	lsls	r3, r3, #2
 800b37c:	4413      	add	r3, r2
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	657b      	str	r3, [r7, #84]	@ 0x54
 800b382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b384:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d013      	beq.n	800b3b4 <USB_DeactivateEndpoint+0x240>
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4413      	add	r3, r2
 800b396:	681a      	ldr	r2, [r3, #0]
 800b398:	4b38      	ldr	r3, [pc, #224]	@ (800b47c <USB_DeactivateEndpoint+0x308>)
 800b39a:	4013      	ands	r3, r2
 800b39c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	441a      	add	r2, r3
 800b3a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b3ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3b2:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	781b      	ldrb	r3, [r3, #0]
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	4413      	add	r3, r2
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b3c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d013      	beq.n	800b3f4 <USB_DeactivateEndpoint+0x280>
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	4413      	add	r3, r2
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	4b28      	ldr	r3, [pc, #160]	@ (800b47c <USB_DeactivateEndpoint+0x308>)
 800b3da:	4013      	ands	r3, r2
 800b3dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	441a      	add	r2, r3
 800b3e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3ee:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b3f2:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4413      	add	r3, r2
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	4b1e      	ldr	r3, [pc, #120]	@ (800b47c <USB_DeactivateEndpoint+0x308>)
 800b402:	4013      	ands	r3, r2
 800b404:	647b      	str	r3, [r7, #68]	@ 0x44
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	441a      	add	r2, r3
 800b410:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b412:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b41a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	4b15      	ldr	r3, [pc, #84]	@ (800b480 <USB_DeactivateEndpoint+0x30c>)
 800b42a:	4013      	ands	r3, r2
 800b42c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	441a      	add	r2, r3
 800b438:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b43a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b43e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b442:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b444:	687a      	ldr	r2, [r7, #4]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4413      	add	r3, r2
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	4b0c      	ldr	r3, [pc, #48]	@ (800b484 <USB_DeactivateEndpoint+0x310>)
 800b452:	4013      	ands	r3, r2
 800b454:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	441a      	add	r2, r3
 800b460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b462:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b46a:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	375c      	adds	r7, #92	@ 0x5c
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	07ff8f8f 	.word	0x07ff8f8f
 800b480:	07ff8fbf 	.word	0x07ff8fbf
 800b484:	07ffbf8f 	.word	0x07ffbf8f

0800b488 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b096      	sub	sp, #88	@ 0x58
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	785b      	ldrb	r3, [r3, #1]
 800b496:	2b01      	cmp	r3, #1
 800b498:	f040 84ed 	bne.w	800be76 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	699a      	ldr	r2, [r3, #24]
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	691b      	ldr	r3, [r3, #16]
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d903      	bls.n	800b4b0 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	657b      	str	r3, [r7, #84]	@ 0x54
 800b4ae:	e002      	b.n	800b4b6 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	7b1b      	ldrb	r3, [r3, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d12e      	bne.n	800b51c <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	6959      	ldr	r1, [r3, #20]
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	88da      	ldrh	r2, [r3, #6]
 800b4c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 f963 	bl	800c796 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	00db      	lsls	r3, r3, #3
 800b4d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b4da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	00db      	lsls	r3, r3, #3
 800b4e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b4ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b4ee:	b292      	uxth	r2, r2
 800b4f0:	601a      	str	r2, [r3, #0]
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	00db      	lsls	r3, r3, #3
 800b4f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b4fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b500:	6819      	ldr	r1, [r3, #0]
 800b502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b504:	041a      	lsls	r2, r3, #16
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b510:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b514:	430a      	orrs	r2, r1
 800b516:	601a      	str	r2, [r3, #0]
 800b518:	f000 bc90 	b.w	800be3c <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	78db      	ldrb	r3, [r3, #3]
 800b520:	2b02      	cmp	r3, #2
 800b522:	f040 8332 	bne.w	800bb8a <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	6a1a      	ldr	r2, [r3, #32]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	429a      	cmp	r2, r3
 800b530:	f240 82e4 	bls.w	800bafc <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	4413      	add	r3, r2
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	4ba4      	ldr	r3, [pc, #656]	@ (800b7d4 <USB_EPStartXfer+0x34c>)
 800b542:	4013      	ands	r3, r2
 800b544:	613b      	str	r3, [r7, #16]
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	781b      	ldrb	r3, [r3, #0]
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	441a      	add	r2, r3
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b55a:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	6a1a      	ldr	r2, [r3, #32]
 800b560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b562:	1ad2      	subs	r2, r2, r3
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b568:	687a      	ldr	r2, [r7, #4]
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f000 8161 	beq.w	800b840 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	785b      	ldrb	r3, [r3, #1]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d16a      	bne.n	800b65c <USB_EPStartXfer+0x1d4>
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	00db      	lsls	r3, r3, #3
 800b58c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b590:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b594:	685a      	ldr	r2, [r3, #4]
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	781b      	ldrb	r3, [r3, #0]
 800b59a:	00db      	lsls	r3, r3, #3
 800b59c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b5a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b5a4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b5a8:	605a      	str	r2, [r3, #4]
 800b5aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d112      	bne.n	800b5d6 <USB_EPStartXfer+0x14e>
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	00db      	lsls	r3, r3, #3
 800b5b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b5ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b5be:	685a      	ldr	r2, [r3, #4]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	781b      	ldrb	r3, [r3, #0]
 800b5c4:	00db      	lsls	r3, r3, #3
 800b5c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b5ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b5ce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b5d2:	605a      	str	r2, [r3, #4]
 800b5d4:	e06a      	b.n	800b6ac <USB_EPStartXfer+0x224>
 800b5d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5da:	d81e      	bhi.n	800b61a <USB_EPStartXfer+0x192>
 800b5dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5de:	085b      	lsrs	r3, r3, #1
 800b5e0:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5e4:	f003 0301 	and.w	r3, r3, #1
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d002      	beq.n	800b5f2 <USB_EPStartXfer+0x16a>
 800b5ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5ee:	3301      	adds	r3, #1
 800b5f0:	653b      	str	r3, [r7, #80]	@ 0x50
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	781b      	ldrb	r3, [r3, #0]
 800b5f6:	00db      	lsls	r3, r3, #3
 800b5f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b5fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b600:	6859      	ldr	r1, [r3, #4]
 800b602:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b604:	069a      	lsls	r2, r3, #26
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	00db      	lsls	r3, r3, #3
 800b60c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b610:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b614:	430a      	orrs	r2, r1
 800b616:	605a      	str	r2, [r3, #4]
 800b618:	e048      	b.n	800b6ac <USB_EPStartXfer+0x224>
 800b61a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b61c:	095b      	lsrs	r3, r3, #5
 800b61e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b622:	f003 031f 	and.w	r3, r3, #31
 800b626:	2b00      	cmp	r3, #0
 800b628:	d102      	bne.n	800b630 <USB_EPStartXfer+0x1a8>
 800b62a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b62c:	3b01      	subs	r3, #1
 800b62e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	781b      	ldrb	r3, [r3, #0]
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b63a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b63e:	685a      	ldr	r2, [r3, #4]
 800b640:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b642:	069b      	lsls	r3, r3, #26
 800b644:	431a      	orrs	r2, r3
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	00db      	lsls	r3, r3, #3
 800b64c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b650:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b654:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b658:	605a      	str	r2, [r3, #4]
 800b65a:	e027      	b.n	800b6ac <USB_EPStartXfer+0x224>
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	785b      	ldrb	r3, [r3, #1]
 800b660:	2b01      	cmp	r3, #1
 800b662:	d123      	bne.n	800b6ac <USB_EPStartXfer+0x224>
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	00db      	lsls	r3, r3, #3
 800b66a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b66e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b672:	685a      	ldr	r2, [r3, #4]
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	781b      	ldrb	r3, [r3, #0]
 800b678:	00db      	lsls	r3, r3, #3
 800b67a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b67e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b682:	b292      	uxth	r2, r2
 800b684:	605a      	str	r2, [r3, #4]
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	00db      	lsls	r3, r3, #3
 800b68c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b690:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b694:	6859      	ldr	r1, [r3, #4]
 800b696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b698:	041a      	lsls	r2, r3, #16
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	00db      	lsls	r3, r3, #3
 800b6a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b6a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b6a8:	430a      	orrs	r2, r1
 800b6aa:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	895b      	ldrh	r3, [r3, #10]
 800b6b0:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	6959      	ldr	r1, [r3, #20]
 800b6b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6b8:	b29b      	uxth	r3, r3
 800b6ba:	8b7a      	ldrh	r2, [r7, #26]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f001 f86a 	bl	800c796 <USB_WritePMA>
            ep->xfer_buff += len;
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	695a      	ldr	r2, [r3, #20]
 800b6c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6c8:	441a      	add	r2, r3
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	6a1a      	ldr	r2, [r3, #32]
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d906      	bls.n	800b6e8 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	6a1a      	ldr	r2, [r3, #32]
 800b6de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6e0:	1ad2      	subs	r2, r2, r3
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	621a      	str	r2, [r3, #32]
 800b6e6:	e005      	b.n	800b6f4 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	6a1b      	ldr	r3, [r3, #32]
 800b6ec:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	785b      	ldrb	r3, [r3, #1]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d16d      	bne.n	800b7d8 <USB_EPStartXfer+0x350>
 800b6fc:	683b      	ldr	r3, [r7, #0]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	00db      	lsls	r3, r3, #3
 800b702:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b706:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	00db      	lsls	r3, r3, #3
 800b712:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b716:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b71a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b722:	2b00      	cmp	r3, #0
 800b724:	d112      	bne.n	800b74c <USB_EPStartXfer+0x2c4>
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	781b      	ldrb	r3, [r3, #0]
 800b72a:	00db      	lsls	r3, r3, #3
 800b72c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b730:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	00db      	lsls	r3, r3, #3
 800b73c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b740:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b744:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b748:	601a      	str	r2, [r3, #0]
 800b74a:	e06d      	b.n	800b828 <USB_EPStartXfer+0x3a0>
 800b74c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b74e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b750:	d81e      	bhi.n	800b790 <USB_EPStartXfer+0x308>
 800b752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b754:	085b      	lsrs	r3, r3, #1
 800b756:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d002      	beq.n	800b768 <USB_EPStartXfer+0x2e0>
 800b762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b764:	3301      	adds	r3, #1
 800b766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	781b      	ldrb	r3, [r3, #0]
 800b76c:	00db      	lsls	r3, r3, #3
 800b76e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b772:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b776:	6819      	ldr	r1, [r3, #0]
 800b778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b77a:	069a      	lsls	r2, r3, #26
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	00db      	lsls	r3, r3, #3
 800b782:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b786:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b78a:	430a      	orrs	r2, r1
 800b78c:	601a      	str	r2, [r3, #0]
 800b78e:	e04b      	b.n	800b828 <USB_EPStartXfer+0x3a0>
 800b790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b792:	095b      	lsrs	r3, r3, #5
 800b794:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b798:	f003 031f 	and.w	r3, r3, #31
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d102      	bne.n	800b7a6 <USB_EPStartXfer+0x31e>
 800b7a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7a2:	3b01      	subs	r3, #1
 800b7a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	781b      	ldrb	r3, [r3, #0]
 800b7aa:	00db      	lsls	r3, r3, #3
 800b7ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7b4:	681a      	ldr	r2, [r3, #0]
 800b7b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b7b8:	069b      	lsls	r3, r3, #26
 800b7ba:	431a      	orrs	r2, r3
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	00db      	lsls	r3, r3, #3
 800b7c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7ca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b7ce:	601a      	str	r2, [r3, #0]
 800b7d0:	e02a      	b.n	800b828 <USB_EPStartXfer+0x3a0>
 800b7d2:	bf00      	nop
 800b7d4:	07ff8f8f 	.word	0x07ff8f8f
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	785b      	ldrb	r3, [r3, #1]
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d123      	bne.n	800b828 <USB_EPStartXfer+0x3a0>
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	00db      	lsls	r3, r3, #3
 800b7e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7ee:	681a      	ldr	r2, [r3, #0]
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	00db      	lsls	r3, r3, #3
 800b7f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7fe:	b292      	uxth	r2, r2
 800b800:	601a      	str	r2, [r3, #0]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	00db      	lsls	r3, r3, #3
 800b808:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b80c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b810:	6819      	ldr	r1, [r3, #0]
 800b812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b814:	041a      	lsls	r2, r3, #16
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	00db      	lsls	r3, r3, #3
 800b81c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b820:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b824:	430a      	orrs	r2, r1
 800b826:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	891b      	ldrh	r3, [r3, #8]
 800b82c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	6959      	ldr	r1, [r3, #20]
 800b832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b834:	b29b      	uxth	r3, r3
 800b836:	8b7a      	ldrh	r2, [r7, #26]
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 ffac 	bl	800c796 <USB_WritePMA>
 800b83e:	e2fd      	b.n	800be3c <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	785b      	ldrb	r3, [r3, #1]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d16a      	bne.n	800b91e <USB_EPStartXfer+0x496>
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	00db      	lsls	r3, r3, #3
 800b84e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b852:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b856:	681a      	ldr	r2, [r3, #0]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	00db      	lsls	r3, r3, #3
 800b85e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b862:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b866:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d112      	bne.n	800b898 <USB_EPStartXfer+0x410>
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	00db      	lsls	r3, r3, #3
 800b878:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b87c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b880:	681a      	ldr	r2, [r3, #0]
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	00db      	lsls	r3, r3, #3
 800b888:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b88c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b890:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b894:	601a      	str	r2, [r3, #0]
 800b896:	e06a      	b.n	800b96e <USB_EPStartXfer+0x4e6>
 800b898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b89a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b89c:	d81e      	bhi.n	800b8dc <USB_EPStartXfer+0x454>
 800b89e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8a0:	085b      	lsrs	r3, r3, #1
 800b8a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8a6:	f003 0301 	and.w	r3, r3, #1
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d002      	beq.n	800b8b4 <USB_EPStartXfer+0x42c>
 800b8ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	00db      	lsls	r3, r3, #3
 800b8ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b8c2:	6819      	ldr	r1, [r3, #0]
 800b8c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8c6:	069a      	lsls	r2, r3, #26
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b8d6:	430a      	orrs	r2, r1
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	e048      	b.n	800b96e <USB_EPStartXfer+0x4e6>
 800b8dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8de:	095b      	lsrs	r3, r3, #5
 800b8e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8e4:	f003 031f 	and.w	r3, r3, #31
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d102      	bne.n	800b8f2 <USB_EPStartXfer+0x46a>
 800b8ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	00db      	lsls	r3, r3, #3
 800b8f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b904:	069b      	lsls	r3, r3, #26
 800b906:	431a      	orrs	r2, r3
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	00db      	lsls	r3, r3, #3
 800b90e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b912:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b916:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b91a:	601a      	str	r2, [r3, #0]
 800b91c:	e027      	b.n	800b96e <USB_EPStartXfer+0x4e6>
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	785b      	ldrb	r3, [r3, #1]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d123      	bne.n	800b96e <USB_EPStartXfer+0x4e6>
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	00db      	lsls	r3, r3, #3
 800b92c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b930:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	00db      	lsls	r3, r3, #3
 800b93c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b940:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b944:	b292      	uxth	r2, r2
 800b946:	601a      	str	r2, [r3, #0]
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	00db      	lsls	r3, r3, #3
 800b94e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b952:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b956:	6819      	ldr	r1, [r3, #0]
 800b958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b95a:	041a      	lsls	r2, r3, #16
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	00db      	lsls	r3, r3, #3
 800b962:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b966:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b96a:	430a      	orrs	r2, r1
 800b96c:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	891b      	ldrh	r3, [r3, #8]
 800b972:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	6959      	ldr	r1, [r3, #20]
 800b978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	8b7a      	ldrh	r2, [r7, #26]
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 ff09 	bl	800c796 <USB_WritePMA>
            ep->xfer_buff += len;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	695a      	ldr	r2, [r3, #20]
 800b988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b98a:	441a      	add	r2, r3
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	6a1a      	ldr	r2, [r3, #32]
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d906      	bls.n	800b9aa <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800b99c:	683b      	ldr	r3, [r7, #0]
 800b99e:	6a1a      	ldr	r2, [r3, #32]
 800b9a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9a2:	1ad2      	subs	r2, r2, r3
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	621a      	str	r2, [r3, #32]
 800b9a8:	e005      	b.n	800b9b6 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	785b      	ldrb	r3, [r3, #1]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d16a      	bne.n	800ba94 <USB_EPStartXfer+0x60c>
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	781b      	ldrb	r3, [r3, #0]
 800b9c2:	00db      	lsls	r3, r3, #3
 800b9c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b9cc:	685a      	ldr	r2, [r3, #4]
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	00db      	lsls	r3, r3, #3
 800b9d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b9dc:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b9e0:	605a      	str	r2, [r3, #4]
 800b9e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d112      	bne.n	800ba0e <USB_EPStartXfer+0x586>
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	00db      	lsls	r3, r3, #3
 800b9ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b9f6:	685a      	ldr	r2, [r3, #4]
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	00db      	lsls	r3, r3, #3
 800b9fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba06:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ba0a:	605a      	str	r2, [r3, #4]
 800ba0c:	e06a      	b.n	800bae4 <USB_EPStartXfer+0x65c>
 800ba0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba10:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba12:	d81e      	bhi.n	800ba52 <USB_EPStartXfer+0x5ca>
 800ba14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba16:	085b      	lsrs	r3, r3, #1
 800ba18:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba1c:	f003 0301 	and.w	r3, r3, #1
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d002      	beq.n	800ba2a <USB_EPStartXfer+0x5a2>
 800ba24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba26:	3301      	adds	r3, #1
 800ba28:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	00db      	lsls	r3, r3, #3
 800ba30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba38:	6859      	ldr	r1, [r3, #4]
 800ba3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba3c:	069a      	lsls	r2, r3, #26
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	00db      	lsls	r3, r3, #3
 800ba44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba4c:	430a      	orrs	r2, r1
 800ba4e:	605a      	str	r2, [r3, #4]
 800ba50:	e048      	b.n	800bae4 <USB_EPStartXfer+0x65c>
 800ba52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba54:	095b      	lsrs	r3, r3, #5
 800ba56:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba5a:	f003 031f 	and.w	r3, r3, #31
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d102      	bne.n	800ba68 <USB_EPStartXfer+0x5e0>
 800ba62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba64:	3b01      	subs	r3, #1
 800ba66:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	00db      	lsls	r3, r3, #3
 800ba6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba76:	685a      	ldr	r2, [r3, #4]
 800ba78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba7a:	069b      	lsls	r3, r3, #26
 800ba7c:	431a      	orrs	r2, r3
 800ba7e:	683b      	ldr	r3, [r7, #0]
 800ba80:	781b      	ldrb	r3, [r3, #0]
 800ba82:	00db      	lsls	r3, r3, #3
 800ba84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba8c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ba90:	605a      	str	r2, [r3, #4]
 800ba92:	e027      	b.n	800bae4 <USB_EPStartXfer+0x65c>
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	785b      	ldrb	r3, [r3, #1]
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d123      	bne.n	800bae4 <USB_EPStartXfer+0x65c>
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	00db      	lsls	r3, r3, #3
 800baa2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800baa6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	00db      	lsls	r3, r3, #3
 800bab2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bab6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800baba:	b292      	uxth	r2, r2
 800babc:	605a      	str	r2, [r3, #4]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	00db      	lsls	r3, r3, #3
 800bac4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bac8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bacc:	6859      	ldr	r1, [r3, #4]
 800bace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bad0:	041a      	lsls	r2, r3, #16
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	00db      	lsls	r3, r3, #3
 800bad8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800badc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bae0:	430a      	orrs	r2, r1
 800bae2:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	895b      	ldrh	r3, [r3, #10]
 800bae8:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	6959      	ldr	r1, [r3, #20]
 800baee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	8b7a      	ldrh	r2, [r7, #26]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f000 fe4e 	bl	800c796 <USB_WritePMA>
 800bafa:	e19f      	b.n	800be3c <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	6a1b      	ldr	r3, [r3, #32]
 800bb00:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4413      	add	r3, r2
 800bb0c:	681a      	ldr	r2, [r3, #0]
 800bb0e:	4ba0      	ldr	r3, [pc, #640]	@ (800bd90 <USB_EPStartXfer+0x908>)
 800bb10:	4013      	ands	r3, r2
 800bb12:	617b      	str	r3, [r7, #20]
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	009b      	lsls	r3, r3, #2
 800bb1c:	441a      	add	r2, r3
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb28:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	00db      	lsls	r3, r3, #3
 800bb30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	00db      	lsls	r3, r3, #3
 800bb40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb48:	b292      	uxth	r2, r2
 800bb4a:	601a      	str	r2, [r3, #0]
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	00db      	lsls	r3, r3, #3
 800bb52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb5a:	6819      	ldr	r1, [r3, #0]
 800bb5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb5e:	041a      	lsls	r2, r3, #16
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	781b      	ldrb	r3, [r3, #0]
 800bb64:	00db      	lsls	r3, r3, #3
 800bb66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb6e:	430a      	orrs	r2, r1
 800bb70:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	891b      	ldrh	r3, [r3, #8]
 800bb76:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	6959      	ldr	r1, [r3, #20]
 800bb7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	8b7a      	ldrh	r2, [r7, #26]
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f000 fe07 	bl	800c796 <USB_WritePMA>
 800bb88:	e158      	b.n	800be3c <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	6a1a      	ldr	r2, [r3, #32]
 800bb8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb90:	1ad2      	subs	r2, r2, r3
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	781b      	ldrb	r3, [r3, #0]
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	4413      	add	r3, r2
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f000 80a3 	beq.w	800bcf2 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	785b      	ldrb	r3, [r3, #1]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d16a      	bne.n	800bc8a <USB_EPStartXfer+0x802>
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	781b      	ldrb	r3, [r3, #0]
 800bbb8:	00db      	lsls	r3, r3, #3
 800bbba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bbbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bbc2:	685a      	ldr	r2, [r3, #4]
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	00db      	lsls	r3, r3, #3
 800bbca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bbce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bbd2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800bbd6:	605a      	str	r2, [r3, #4]
 800bbd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d112      	bne.n	800bc04 <USB_EPStartXfer+0x77c>
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bbe8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	00db      	lsls	r3, r3, #3
 800bbf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bbf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bbfc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bc00:	605a      	str	r2, [r3, #4]
 800bc02:	e06a      	b.n	800bcda <USB_EPStartXfer+0x852>
 800bc04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc06:	2b3e      	cmp	r3, #62	@ 0x3e
 800bc08:	d81e      	bhi.n	800bc48 <USB_EPStartXfer+0x7c0>
 800bc0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc0c:	085b      	lsrs	r3, r3, #1
 800bc0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc12:	f003 0301 	and.w	r3, r3, #1
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d002      	beq.n	800bc20 <USB_EPStartXfer+0x798>
 800bc1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	781b      	ldrb	r3, [r3, #0]
 800bc24:	00db      	lsls	r3, r3, #3
 800bc26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bc2e:	6859      	ldr	r1, [r3, #4]
 800bc30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc32:	069a      	lsls	r2, r3, #26
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bc42:	430a      	orrs	r2, r1
 800bc44:	605a      	str	r2, [r3, #4]
 800bc46:	e048      	b.n	800bcda <USB_EPStartXfer+0x852>
 800bc48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc4a:	095b      	lsrs	r3, r3, #5
 800bc4c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc50:	f003 031f 	and.w	r3, r3, #31
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d102      	bne.n	800bc5e <USB_EPStartXfer+0x7d6>
 800bc58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	00db      	lsls	r3, r3, #3
 800bc64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bc6c:	685a      	ldr	r2, [r3, #4]
 800bc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc70:	069b      	lsls	r3, r3, #26
 800bc72:	431a      	orrs	r2, r3
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	00db      	lsls	r3, r3, #3
 800bc7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bc82:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bc86:	605a      	str	r2, [r3, #4]
 800bc88:	e027      	b.n	800bcda <USB_EPStartXfer+0x852>
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	785b      	ldrb	r3, [r3, #1]
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d123      	bne.n	800bcda <USB_EPStartXfer+0x852>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	781b      	ldrb	r3, [r3, #0]
 800bc96:	00db      	lsls	r3, r3, #3
 800bc98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bca0:	685a      	ldr	r2, [r3, #4]
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	00db      	lsls	r3, r3, #3
 800bca8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bcb0:	b292      	uxth	r2, r2
 800bcb2:	605a      	str	r2, [r3, #4]
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	00db      	lsls	r3, r3, #3
 800bcba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcbe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bcc2:	6859      	ldr	r1, [r3, #4]
 800bcc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcc6:	041a      	lsls	r2, r3, #16
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	00db      	lsls	r3, r3, #3
 800bcce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	895b      	ldrh	r3, [r3, #10]
 800bcde:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	6959      	ldr	r1, [r3, #20]
 800bce4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	8b7a      	ldrh	r2, [r7, #26]
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 fd53 	bl	800c796 <USB_WritePMA>
 800bcf0:	e0a4      	b.n	800be3c <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	785b      	ldrb	r3, [r3, #1]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d16d      	bne.n	800bdd6 <USB_EPStartXfer+0x94e>
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	781b      	ldrb	r3, [r3, #0]
 800bcfe:	00db      	lsls	r3, r3, #3
 800bd00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	00db      	lsls	r3, r3, #3
 800bd10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd18:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d112      	bne.n	800bd4a <USB_EPStartXfer+0x8c2>
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	00db      	lsls	r3, r3, #3
 800bd2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd32:	681a      	ldr	r2, [r3, #0]
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	00db      	lsls	r3, r3, #3
 800bd3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd42:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bd46:	601a      	str	r2, [r3, #0]
 800bd48:	e06d      	b.n	800be26 <USB_EPStartXfer+0x99e>
 800bd4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd4c:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd4e:	d821      	bhi.n	800bd94 <USB_EPStartXfer+0x90c>
 800bd50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd52:	085b      	lsrs	r3, r3, #1
 800bd54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd58:	f003 0301 	and.w	r3, r3, #1
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d002      	beq.n	800bd66 <USB_EPStartXfer+0x8de>
 800bd60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd62:	3301      	adds	r3, #1
 800bd64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	00db      	lsls	r3, r3, #3
 800bd6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd74:	6819      	ldr	r1, [r3, #0]
 800bd76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd78:	069a      	lsls	r2, r3, #26
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	00db      	lsls	r3, r3, #3
 800bd80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd88:	430a      	orrs	r2, r1
 800bd8a:	601a      	str	r2, [r3, #0]
 800bd8c:	e04b      	b.n	800be26 <USB_EPStartXfer+0x99e>
 800bd8e:	bf00      	nop
 800bd90:	07ff8e8f 	.word	0x07ff8e8f
 800bd94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd96:	095b      	lsrs	r3, r3, #5
 800bd98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd9c:	f003 031f 	and.w	r3, r3, #31
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d102      	bne.n	800bdaa <USB_EPStartXfer+0x922>
 800bda4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bda6:	3b01      	subs	r3, #1
 800bda8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	00db      	lsls	r3, r3, #3
 800bdb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdb8:	681a      	ldr	r2, [r3, #0]
 800bdba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdbc:	069b      	lsls	r3, r3, #26
 800bdbe:	431a      	orrs	r2, r3
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	00db      	lsls	r3, r3, #3
 800bdc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdce:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	e027      	b.n	800be26 <USB_EPStartXfer+0x99e>
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	785b      	ldrb	r3, [r3, #1]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d123      	bne.n	800be26 <USB_EPStartXfer+0x99e>
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bde8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	00db      	lsls	r3, r3, #3
 800bdf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdfc:	b292      	uxth	r2, r2
 800bdfe:	601a      	str	r2, [r3, #0]
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	00db      	lsls	r3, r3, #3
 800be06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be0e:	6819      	ldr	r1, [r3, #0]
 800be10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be12:	041a      	lsls	r2, r3, #16
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	781b      	ldrb	r3, [r3, #0]
 800be18:	00db      	lsls	r3, r3, #3
 800be1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be22:	430a      	orrs	r2, r1
 800be24:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	891b      	ldrh	r3, [r3, #8]
 800be2a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	6959      	ldr	r1, [r3, #20]
 800be30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be32:	b29b      	uxth	r3, r3
 800be34:	8b7a      	ldrh	r2, [r7, #26]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fcad 	bl	800c796 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800be3c:	687a      	ldr	r2, [r7, #4]
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	781b      	ldrb	r3, [r3, #0]
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	4413      	add	r3, r2
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	4b8b      	ldr	r3, [pc, #556]	@ (800c078 <USB_EPStartXfer+0xbf0>)
 800be4a:	4013      	ands	r3, r2
 800be4c:	60fb      	str	r3, [r7, #12]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f083 0310 	eor.w	r3, r3, #16
 800be54:	60fb      	str	r3, [r7, #12]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	f083 0320 	eor.w	r3, r3, #32
 800be5c:	60fb      	str	r3, [r7, #12]
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	441a      	add	r2, r3
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be72:	6013      	str	r3, [r2, #0]
 800be74:	e36b      	b.n	800c54e <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	7b1b      	ldrb	r3, [r3, #12]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f040 8081 	bne.w	800bf82 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	699a      	ldr	r2, [r3, #24]
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d909      	bls.n	800bea0 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	691b      	ldr	r3, [r3, #16]
 800be90:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	699a      	ldr	r2, [r3, #24]
 800be96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be98:	1ad2      	subs	r2, r2, r3
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	619a      	str	r2, [r3, #24]
 800be9e:	e005      	b.n	800beac <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	699b      	ldr	r3, [r3, #24]
 800bea4:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	2200      	movs	r2, #0
 800beaa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800beb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800beba:	685a      	ldr	r2, [r3, #4]
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	00db      	lsls	r3, r3, #3
 800bec2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bec6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800beca:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800bece:	605a      	str	r2, [r3, #4]
 800bed0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d112      	bne.n	800befc <USB_EPStartXfer+0xa74>
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	00db      	lsls	r3, r3, #3
 800bedc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bee0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	781b      	ldrb	r3, [r3, #0]
 800beea:	00db      	lsls	r3, r3, #3
 800beec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bef0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bef4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bef8:	605a      	str	r2, [r3, #4]
 800befa:	e30c      	b.n	800c516 <USB_EPStartXfer+0x108e>
 800befc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800befe:	2b3e      	cmp	r3, #62	@ 0x3e
 800bf00:	d81e      	bhi.n	800bf40 <USB_EPStartXfer+0xab8>
 800bf02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf04:	085b      	lsrs	r3, r3, #1
 800bf06:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf0a:	f003 0301 	and.w	r3, r3, #1
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d002      	beq.n	800bf18 <USB_EPStartXfer+0xa90>
 800bf12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf14:	3301      	adds	r3, #1
 800bf16:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	00db      	lsls	r3, r3, #3
 800bf1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf26:	6859      	ldr	r1, [r3, #4]
 800bf28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf2a:	069a      	lsls	r2, r3, #26
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	00db      	lsls	r3, r3, #3
 800bf32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf3a:	430a      	orrs	r2, r1
 800bf3c:	605a      	str	r2, [r3, #4]
 800bf3e:	e2ea      	b.n	800c516 <USB_EPStartXfer+0x108e>
 800bf40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf42:	095b      	lsrs	r3, r3, #5
 800bf44:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf48:	f003 031f 	and.w	r3, r3, #31
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d102      	bne.n	800bf56 <USB_EPStartXfer+0xace>
 800bf50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf52:	3b01      	subs	r3, #1
 800bf54:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	00db      	lsls	r3, r3, #3
 800bf5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf60:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf64:	685a      	ldr	r2, [r3, #4]
 800bf66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf68:	069b      	lsls	r3, r3, #26
 800bf6a:	431a      	orrs	r2, r3
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	00db      	lsls	r3, r3, #3
 800bf72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf7a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bf7e:	605a      	str	r2, [r3, #4]
 800bf80:	e2c9      	b.n	800c516 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	78db      	ldrb	r3, [r3, #3]
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	f040 8176 	bne.w	800c278 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	785b      	ldrb	r3, [r3, #1]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d173      	bne.n	800c07c <USB_EPStartXfer+0xbf4>
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	00db      	lsls	r3, r3, #3
 800bf9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	00db      	lsls	r3, r3, #3
 800bfaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bfae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bfb2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800bfb6:	601a      	str	r2, [r3, #0]
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d112      	bne.n	800bfe6 <USB_EPStartXfer+0xb5e>
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	00db      	lsls	r3, r3, #3
 800bfc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bfca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bfce:	681a      	ldr	r2, [r3, #0]
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	00db      	lsls	r3, r3, #3
 800bfd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bfda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bfde:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bfe2:	601a      	str	r2, [r3, #0]
 800bfe4:	e073      	b.n	800c0ce <USB_EPStartXfer+0xc46>
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	691b      	ldr	r3, [r3, #16]
 800bfea:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfec:	d820      	bhi.n	800c030 <USB_EPStartXfer+0xba8>
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	085b      	lsrs	r3, r3, #1
 800bff4:	637b      	str	r3, [r7, #52]	@ 0x34
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	f003 0301 	and.w	r3, r3, #1
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <USB_EPStartXfer+0xb80>
 800c002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c004:	3301      	adds	r3, #1
 800c006:	637b      	str	r3, [r7, #52]	@ 0x34
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	00db      	lsls	r3, r3, #3
 800c00e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c012:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c016:	6819      	ldr	r1, [r3, #0]
 800c018:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c01a:	069a      	lsls	r2, r3, #26
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	00db      	lsls	r3, r3, #3
 800c022:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c026:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c02a:	430a      	orrs	r2, r1
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	e04e      	b.n	800c0ce <USB_EPStartXfer+0xc46>
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	095b      	lsrs	r3, r3, #5
 800c036:	637b      	str	r3, [r7, #52]	@ 0x34
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	f003 031f 	and.w	r3, r3, #31
 800c040:	2b00      	cmp	r3, #0
 800c042:	d102      	bne.n	800c04a <USB_EPStartXfer+0xbc2>
 800c044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c046:	3b01      	subs	r3, #1
 800c048:	637b      	str	r3, [r7, #52]	@ 0x34
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	00db      	lsls	r3, r3, #3
 800c050:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c054:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c058:	681a      	ldr	r2, [r3, #0]
 800c05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c05c:	069b      	lsls	r3, r3, #26
 800c05e:	431a      	orrs	r2, r3
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	00db      	lsls	r3, r3, #3
 800c066:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c06a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c06e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c072:	601a      	str	r2, [r3, #0]
 800c074:	e02b      	b.n	800c0ce <USB_EPStartXfer+0xc46>
 800c076:	bf00      	nop
 800c078:	07ff8fbf 	.word	0x07ff8fbf
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	785b      	ldrb	r3, [r3, #1]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d124      	bne.n	800c0ce <USB_EPStartXfer+0xc46>
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	00db      	lsls	r3, r3, #3
 800c08a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c08e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	00db      	lsls	r3, r3, #3
 800c09a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c09e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0a2:	b292      	uxth	r2, r2
 800c0a4:	601a      	str	r2, [r3, #0]
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	00db      	lsls	r3, r3, #3
 800c0ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0b4:	6819      	ldr	r1, [r3, #0]
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	041a      	lsls	r2, r3, #16
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	781b      	ldrb	r3, [r3, #0]
 800c0c0:	00db      	lsls	r3, r3, #3
 800c0c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0ca:	430a      	orrs	r2, r1
 800c0cc:	601a      	str	r2, [r3, #0]
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	785b      	ldrb	r3, [r3, #1]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d170      	bne.n	800c1b8 <USB_EPStartXfer+0xd30>
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	781b      	ldrb	r3, [r3, #0]
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0e4:	685a      	ldr	r2, [r3, #4]
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	00db      	lsls	r3, r3, #3
 800c0ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0f4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c0f8:	605a      	str	r2, [r3, #4]
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	691b      	ldr	r3, [r3, #16]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d112      	bne.n	800c128 <USB_EPStartXfer+0xca0>
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	00db      	lsls	r3, r3, #3
 800c108:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c10c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c110:	685a      	ldr	r2, [r3, #4]
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	00db      	lsls	r3, r3, #3
 800c118:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c11c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c120:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c124:	605a      	str	r2, [r3, #4]
 800c126:	e070      	b.n	800c20a <USB_EPStartXfer+0xd82>
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c12e:	d820      	bhi.n	800c172 <USB_EPStartXfer+0xcea>
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	691b      	ldr	r3, [r3, #16]
 800c134:	085b      	lsrs	r3, r3, #1
 800c136:	633b      	str	r3, [r7, #48]	@ 0x30
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	2b00      	cmp	r3, #0
 800c142:	d002      	beq.n	800c14a <USB_EPStartXfer+0xcc2>
 800c144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c146:	3301      	adds	r3, #1
 800c148:	633b      	str	r3, [r7, #48]	@ 0x30
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	00db      	lsls	r3, r3, #3
 800c150:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c154:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c158:	6859      	ldr	r1, [r3, #4]
 800c15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c15c:	069a      	lsls	r2, r3, #26
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	00db      	lsls	r3, r3, #3
 800c164:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c168:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c16c:	430a      	orrs	r2, r1
 800c16e:	605a      	str	r2, [r3, #4]
 800c170:	e04b      	b.n	800c20a <USB_EPStartXfer+0xd82>
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	095b      	lsrs	r3, r3, #5
 800c178:	633b      	str	r3, [r7, #48]	@ 0x30
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	f003 031f 	and.w	r3, r3, #31
 800c182:	2b00      	cmp	r3, #0
 800c184:	d102      	bne.n	800c18c <USB_EPStartXfer+0xd04>
 800c186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c188:	3b01      	subs	r3, #1
 800c18a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	00db      	lsls	r3, r3, #3
 800c192:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c196:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c19a:	685a      	ldr	r2, [r3, #4]
 800c19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19e:	069b      	lsls	r3, r3, #26
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	00db      	lsls	r3, r3, #3
 800c1a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1b0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c1b4:	605a      	str	r2, [r3, #4]
 800c1b6:	e028      	b.n	800c20a <USB_EPStartXfer+0xd82>
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	785b      	ldrb	r3, [r3, #1]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d124      	bne.n	800c20a <USB_EPStartXfer+0xd82>
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	00db      	lsls	r3, r3, #3
 800c1c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1ce:	685a      	ldr	r2, [r3, #4]
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	00db      	lsls	r3, r3, #3
 800c1d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1de:	b292      	uxth	r2, r2
 800c1e0:	605a      	str	r2, [r3, #4]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	00db      	lsls	r3, r3, #3
 800c1e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1f0:	6859      	ldr	r1, [r3, #4]
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	041a      	lsls	r2, r3, #16
 800c1f8:	683b      	ldr	r3, [r7, #0]
 800c1fa:	781b      	ldrb	r3, [r3, #0]
 800c1fc:	00db      	lsls	r3, r3, #3
 800c1fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c202:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c206:	430a      	orrs	r2, r1
 800c208:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	69db      	ldr	r3, [r3, #28]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f000 8181 	beq.w	800c516 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800c214:	687a      	ldr	r2, [r7, #4]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c222:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c224:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d004      	beq.n	800c236 <USB_EPStartXfer+0xdae>
 800c22c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c22e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c232:	2b00      	cmp	r3, #0
 800c234:	d10b      	bne.n	800c24e <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c236:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f040 816a 	bne.w	800c516 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c242:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f040 8164 	bne.w	800c516 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c24e:	687a      	ldr	r2, [r7, #4]
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	4413      	add	r3, r2
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	4b98      	ldr	r3, [pc, #608]	@ (800c4bc <USB_EPStartXfer+0x1034>)
 800c25c:	4013      	ands	r3, r2
 800c25e:	623b      	str	r3, [r7, #32]
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	009b      	lsls	r3, r3, #2
 800c268:	441a      	add	r2, r3
 800c26a:	6a3b      	ldr	r3, [r7, #32]
 800c26c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c270:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c274:	6013      	str	r3, [r2, #0]
 800c276:	e14e      	b.n	800c516 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	78db      	ldrb	r3, [r3, #3]
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	f040 8148 	bne.w	800c512 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	699a      	ldr	r2, [r3, #24]
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	691b      	ldr	r3, [r3, #16]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d909      	bls.n	800c2a2 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	699a      	ldr	r2, [r3, #24]
 800c298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c29a:	1ad2      	subs	r2, r2, r3
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	619a      	str	r2, [r3, #24]
 800c2a0:	e005      	b.n	800c2ae <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	699b      	ldr	r3, [r3, #24]
 800c2a6:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	785b      	ldrb	r3, [r3, #1]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d16a      	bne.n	800c38c <USB_EPStartXfer+0xf04>
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	00db      	lsls	r3, r3, #3
 800c2bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2c4:	681a      	ldr	r2, [r3, #0]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	00db      	lsls	r3, r3, #3
 800c2cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2d4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c2d8:	601a      	str	r2, [r3, #0]
 800c2da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d112      	bne.n	800c306 <USB_EPStartXfer+0xe7e>
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	00db      	lsls	r3, r3, #3
 800c2e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	00db      	lsls	r3, r3, #3
 800c2f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c302:	601a      	str	r2, [r3, #0]
 800c304:	e06a      	b.n	800c3dc <USB_EPStartXfer+0xf54>
 800c306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c308:	2b3e      	cmp	r3, #62	@ 0x3e
 800c30a:	d81e      	bhi.n	800c34a <USB_EPStartXfer+0xec2>
 800c30c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c30e:	085b      	lsrs	r3, r3, #1
 800c310:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c314:	f003 0301 	and.w	r3, r3, #1
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <USB_EPStartXfer+0xe9a>
 800c31c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31e:	3301      	adds	r3, #1
 800c320:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	00db      	lsls	r3, r3, #3
 800c328:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c32c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c330:	6819      	ldr	r1, [r3, #0]
 800c332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c334:	069a      	lsls	r2, r3, #26
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	781b      	ldrb	r3, [r3, #0]
 800c33a:	00db      	lsls	r3, r3, #3
 800c33c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c340:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c344:	430a      	orrs	r2, r1
 800c346:	601a      	str	r2, [r3, #0]
 800c348:	e048      	b.n	800c3dc <USB_EPStartXfer+0xf54>
 800c34a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c34c:	095b      	lsrs	r3, r3, #5
 800c34e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c352:	f003 031f 	and.w	r3, r3, #31
 800c356:	2b00      	cmp	r3, #0
 800c358:	d102      	bne.n	800c360 <USB_EPStartXfer+0xed8>
 800c35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c35c:	3b01      	subs	r3, #1
 800c35e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	00db      	lsls	r3, r3, #3
 800c366:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c36a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c372:	069b      	lsls	r3, r3, #26
 800c374:	431a      	orrs	r2, r3
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	00db      	lsls	r3, r3, #3
 800c37c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c380:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c384:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c388:	601a      	str	r2, [r3, #0]
 800c38a:	e027      	b.n	800c3dc <USB_EPStartXfer+0xf54>
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	785b      	ldrb	r3, [r3, #1]
 800c390:	2b01      	cmp	r3, #1
 800c392:	d123      	bne.n	800c3dc <USB_EPStartXfer+0xf54>
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	781b      	ldrb	r3, [r3, #0]
 800c398:	00db      	lsls	r3, r3, #3
 800c39a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c39e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	00db      	lsls	r3, r3, #3
 800c3aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3b2:	b292      	uxth	r2, r2
 800c3b4:	601a      	str	r2, [r3, #0]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	00db      	lsls	r3, r3, #3
 800c3bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3c4:	6819      	ldr	r1, [r3, #0]
 800c3c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3c8:	041a      	lsls	r2, r3, #16
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	00db      	lsls	r3, r3, #3
 800c3d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3d8:	430a      	orrs	r2, r1
 800c3da:	601a      	str	r2, [r3, #0]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	785b      	ldrb	r3, [r3, #1]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d16d      	bne.n	800c4c0 <USB_EPStartXfer+0x1038>
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	00db      	lsls	r3, r3, #3
 800c3ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3f2:	685a      	ldr	r2, [r3, #4]
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	781b      	ldrb	r3, [r3, #0]
 800c3f8:	00db      	lsls	r3, r3, #3
 800c3fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c402:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c406:	605a      	str	r2, [r3, #4]
 800c408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d112      	bne.n	800c434 <USB_EPStartXfer+0xfac>
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c418:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c41c:	685a      	ldr	r2, [r3, #4]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	00db      	lsls	r3, r3, #3
 800c424:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c428:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c42c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c430:	605a      	str	r2, [r3, #4]
 800c432:	e070      	b.n	800c516 <USB_EPStartXfer+0x108e>
 800c434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c436:	2b3e      	cmp	r3, #62	@ 0x3e
 800c438:	d81e      	bhi.n	800c478 <USB_EPStartXfer+0xff0>
 800c43a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c43c:	085b      	lsrs	r3, r3, #1
 800c43e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c442:	f003 0301 	and.w	r3, r3, #1
 800c446:	2b00      	cmp	r3, #0
 800c448:	d002      	beq.n	800c450 <USB_EPStartXfer+0xfc8>
 800c44a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c44c:	3301      	adds	r3, #1
 800c44e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	00db      	lsls	r3, r3, #3
 800c456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c45a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c45e:	6859      	ldr	r1, [r3, #4]
 800c460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c462:	069a      	lsls	r2, r3, #26
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	00db      	lsls	r3, r3, #3
 800c46a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c46e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c472:	430a      	orrs	r2, r1
 800c474:	605a      	str	r2, [r3, #4]
 800c476:	e04e      	b.n	800c516 <USB_EPStartXfer+0x108e>
 800c478:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c47a:	095b      	lsrs	r3, r3, #5
 800c47c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c47e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c480:	f003 031f 	and.w	r3, r3, #31
 800c484:	2b00      	cmp	r3, #0
 800c486:	d102      	bne.n	800c48e <USB_EPStartXfer+0x1006>
 800c488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48a:	3b01      	subs	r3, #1
 800c48c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	00db      	lsls	r3, r3, #3
 800c494:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c498:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c49c:	685a      	ldr	r2, [r3, #4]
 800c49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a0:	069b      	lsls	r3, r3, #26
 800c4a2:	431a      	orrs	r2, r3
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	00db      	lsls	r3, r3, #3
 800c4aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4b2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c4b6:	605a      	str	r2, [r3, #4]
 800c4b8:	e02d      	b.n	800c516 <USB_EPStartXfer+0x108e>
 800c4ba:	bf00      	nop
 800c4bc:	07ff8f8f 	.word	0x07ff8f8f
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	785b      	ldrb	r3, [r3, #1]
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d126      	bne.n	800c516 <USB_EPStartXfer+0x108e>
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	00db      	lsls	r3, r3, #3
 800c4ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4d6:	685a      	ldr	r2, [r3, #4]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	00db      	lsls	r3, r3, #3
 800c4de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4e6:	b292      	uxth	r2, r2
 800c4e8:	605a      	str	r2, [r3, #4]
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	00db      	lsls	r3, r3, #3
 800c4f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4f8:	6859      	ldr	r1, [r3, #4]
 800c4fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4fc:	041a      	lsls	r2, r3, #16
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	00db      	lsls	r3, r3, #3
 800c504:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c508:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c50c:	430a      	orrs	r2, r1
 800c50e:	605a      	str	r2, [r3, #4]
 800c510:	e001      	b.n	800c516 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800c512:	2301      	movs	r3, #1
 800c514:	e01c      	b.n	800c550 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	4b0d      	ldr	r3, [pc, #52]	@ (800c558 <USB_EPStartXfer+0x10d0>)
 800c524:	4013      	ands	r3, r2
 800c526:	61fb      	str	r3, [r7, #28]
 800c528:	69fb      	ldr	r3, [r7, #28]
 800c52a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c52e:	61fb      	str	r3, [r7, #28]
 800c530:	69fb      	ldr	r3, [r7, #28]
 800c532:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c536:	61fb      	str	r3, [r7, #28]
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	441a      	add	r2, r3
 800c542:	69fb      	ldr	r3, [r7, #28]
 800c544:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c54c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3758      	adds	r7, #88	@ 0x58
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	07ffbf8f 	.word	0x07ffbf8f

0800c55c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	785b      	ldrb	r3, [r3, #1]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d018      	beq.n	800c5a0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	4413      	add	r3, r2
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	4b19      	ldr	r3, [pc, #100]	@ (800c5e0 <USB_EPSetStall+0x84>)
 800c57c:	4013      	ands	r3, r2
 800c57e:	60bb      	str	r3, [r7, #8]
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	f083 0310 	eor.w	r3, r3, #16
 800c586:	60bb      	str	r3, [r7, #8]
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	441a      	add	r2, r3
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c598:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c59c:	6013      	str	r3, [r2, #0]
 800c59e:	e017      	b.n	800c5d0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	4413      	add	r3, r2
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	4b0d      	ldr	r3, [pc, #52]	@ (800c5e4 <USB_EPSetStall+0x88>)
 800c5ae:	4013      	ands	r3, r2
 800c5b0:	60fb      	str	r3, [r7, #12]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c5b8:	60fb      	str	r3, [r7, #12]
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	441a      	add	r2, r3
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c5d0:	2300      	movs	r3, #0
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3714      	adds	r7, #20
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	07ff8fbf 	.word	0x07ff8fbf
 800c5e4:	07ffbf8f 	.word	0x07ffbf8f

0800c5e8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b089      	sub	sp, #36	@ 0x24
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	7b1b      	ldrb	r3, [r3, #12]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d17c      	bne.n	800c6f4 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	785b      	ldrb	r3, [r3, #1]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d03c      	beq.n	800c67c <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	613b      	str	r3, [r7, #16]
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c616:	2b00      	cmp	r3, #0
 800c618:	d013      	beq.n	800c642 <USB_EPClearStall+0x5a>
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	681a      	ldr	r2, [r3, #0]
 800c626:	4b37      	ldr	r3, [pc, #220]	@ (800c704 <USB_EPClearStall+0x11c>)
 800c628:	4013      	ands	r3, r2
 800c62a:	60fb      	str	r3, [r7, #12]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	441a      	add	r2, r3
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c63c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c640:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	78db      	ldrb	r3, [r3, #3]
 800c646:	2b01      	cmp	r3, #1
 800c648:	d054      	beq.n	800c6f4 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c64a:	687a      	ldr	r2, [r7, #4]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	4413      	add	r3, r2
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	4b2c      	ldr	r3, [pc, #176]	@ (800c708 <USB_EPClearStall+0x120>)
 800c658:	4013      	ands	r3, r2
 800c65a:	60bb      	str	r3, [r7, #8]
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	f083 0320 	eor.w	r3, r3, #32
 800c662:	60bb      	str	r3, [r7, #8]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	441a      	add	r2, r3
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c678:	6013      	str	r3, [r2, #0]
 800c67a:	e03b      	b.n	800c6f4 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c67c:	687a      	ldr	r2, [r7, #4]
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	009b      	lsls	r3, r3, #2
 800c684:	4413      	add	r3, r2
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	61fb      	str	r3, [r7, #28]
 800c68a:	69fb      	ldr	r3, [r7, #28]
 800c68c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c690:	2b00      	cmp	r3, #0
 800c692:	d013      	beq.n	800c6bc <USB_EPClearStall+0xd4>
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	781b      	ldrb	r3, [r3, #0]
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	4413      	add	r3, r2
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	4b18      	ldr	r3, [pc, #96]	@ (800c704 <USB_EPClearStall+0x11c>)
 800c6a2:	4013      	ands	r3, r2
 800c6a4:	61bb      	str	r3, [r7, #24]
 800c6a6:	687a      	ldr	r2, [r7, #4]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	441a      	add	r2, r3
 800c6b0:	69bb      	ldr	r3, [r7, #24]
 800c6b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c6b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ba:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	009b      	lsls	r3, r3, #2
 800c6c4:	4413      	add	r3, r2
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	4b10      	ldr	r3, [pc, #64]	@ (800c70c <USB_EPClearStall+0x124>)
 800c6ca:	4013      	ands	r3, r2
 800c6cc:	617b      	str	r3, [r7, #20]
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c6d4:	617b      	str	r3, [r7, #20]
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c6dc:	617b      	str	r3, [r7, #20]
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	441a      	add	r2, r3
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6f2:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3724      	adds	r7, #36	@ 0x24
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	07ff8f8f 	.word	0x07ff8f8f
 800c708:	07ff8fbf 	.word	0x07ff8fbf
 800c70c:	07ffbf8f 	.word	0x07ffbf8f

0800c710 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	460b      	mov	r3, r1
 800c71a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c71c:	78fb      	ldrb	r3, [r7, #3]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d102      	bne.n	800c728 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2280      	movs	r2, #128	@ 0x80
 800c726:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c728:	2300      	movs	r3, #0
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	370c      	adds	r7, #12
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr

0800c736 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800c736:	b480      	push	{r7}
 800c738:	b083      	sub	sp, #12
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c742:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c74a:	2300      	movs	r3, #0
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c764:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800c77a:	b480      	push	{r7}
 800c77c:	b085      	sub	sp, #20
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c786:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c788:	68fb      	ldr	r3, [r7, #12]
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3714      	adds	r7, #20
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c796:	b480      	push	{r7}
 800c798:	b08b      	sub	sp, #44	@ 0x2c
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	4611      	mov	r1, r2
 800c7a2:	461a      	mov	r2, r3
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	80fb      	strh	r3, [r7, #6]
 800c7a8:	4613      	mov	r3, r2
 800c7aa:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800c7ac:	88bb      	ldrh	r3, [r7, #4]
 800c7ae:	3303      	adds	r3, #3
 800c7b0:	089b      	lsrs	r3, r3, #2
 800c7b2:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800c7b4:	88bb      	ldrh	r3, [r7, #4]
 800c7b6:	f003 0303 	and.w	r3, r3, #3
 800c7ba:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800c7c0:	8afb      	ldrh	r3, [r7, #22]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d002      	beq.n	800c7cc <USB_WritePMA+0x36>
  {
    NbWords--;
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800c7cc:	88fb      	ldrh	r3, [r7, #6]
 800c7ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7d6:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	623b      	str	r3, [r7, #32]
 800c7dc:	e015      	b.n	800c80a <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800c7e6:	69fb      	ldr	r3, [r7, #28]
 800c7e8:	3304      	adds	r3, #4
 800c7ea:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	613b      	str	r3, [r7, #16]
    pBuf++;
 800c7f2:	693b      	ldr	r3, [r7, #16]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	613b      	str	r3, [r7, #16]
    pBuf++;
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	613b      	str	r3, [r7, #16]
    pBuf++;
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	3301      	adds	r3, #1
 800c802:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800c804:	6a3b      	ldr	r3, [r7, #32]
 800c806:	3b01      	subs	r3, #1
 800c808:	623b      	str	r3, [r7, #32]
 800c80a:	6a3b      	ldr	r3, [r7, #32]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d1e6      	bne.n	800c7de <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800c810:	8afb      	ldrh	r3, [r7, #22]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d01a      	beq.n	800c84c <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800c816:	2300      	movs	r3, #0
 800c818:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	461a      	mov	r2, r3
 800c820:	6a3b      	ldr	r3, [r7, #32]
 800c822:	00db      	lsls	r3, r3, #3
 800c824:	fa02 f303 	lsl.w	r3, r2, r3
 800c828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c82a:	4313      	orrs	r3, r2
 800c82c:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800c82e:	6a3b      	ldr	r3, [r7, #32]
 800c830:	3301      	adds	r3, #1
 800c832:	623b      	str	r3, [r7, #32]
      pBuf++;
 800c834:	693b      	ldr	r3, [r7, #16]
 800c836:	3301      	adds	r3, #1
 800c838:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800c83a:	8afb      	ldrh	r3, [r7, #22]
 800c83c:	3b01      	subs	r3, #1
 800c83e:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800c840:	8afb      	ldrh	r3, [r7, #22]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1e9      	bne.n	800c81a <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800c846:	69fb      	ldr	r3, [r7, #28]
 800c848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c84a:	601a      	str	r2, [r3, #0]
  }
}
 800c84c:	bf00      	nop
 800c84e:	372c      	adds	r7, #44	@ 0x2c
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c858:	b480      	push	{r7}
 800c85a:	b08b      	sub	sp, #44	@ 0x2c
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	4611      	mov	r1, r2
 800c864:	461a      	mov	r2, r3
 800c866:	460b      	mov	r3, r1
 800c868:	80fb      	strh	r3, [r7, #6]
 800c86a:	4613      	mov	r3, r2
 800c86c:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800c86e:	88bb      	ldrh	r3, [r7, #4]
 800c870:	3303      	adds	r3, #3
 800c872:	089b      	lsrs	r3, r3, #2
 800c874:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800c876:	88bb      	ldrh	r3, [r7, #4]
 800c878:	f003 0303 	and.w	r3, r3, #3
 800c87c:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800c882:	88fb      	ldrh	r3, [r7, #6]
 800c884:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c888:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c88c:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800c88e:	8b7b      	ldrh	r3, [r7, #26]
 800c890:	2b00      	cmp	r3, #0
 800c892:	d002      	beq.n	800c89a <USB_ReadPMA+0x42>
  {
    NbWords--;
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	3b01      	subs	r3, #1
 800c898:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800c89a:	69fb      	ldr	r3, [r7, #28]
 800c89c:	627b      	str	r3, [r7, #36]	@ 0x24
 800c89e:	e015      	b.n	800c8cc <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800c8a0:	6a3b      	ldr	r3, [r7, #32]
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800c8a8:	6a3b      	ldr	r3, [r7, #32]
 800c8aa:	3304      	adds	r3, #4
 800c8ac:	623b      	str	r3, [r7, #32]
    pBuf++;
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	617b      	str	r3, [r7, #20]
    pBuf++;
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	3301      	adds	r3, #1
 800c8b8:	617b      	str	r3, [r7, #20]
    pBuf++;
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	617b      	str	r3, [r7, #20]
    pBuf++;
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c8:	3b01      	subs	r3, #1
 800c8ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1e6      	bne.n	800c8a0 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800c8d2:	8b7b      	ldrh	r3, [r7, #26]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d017      	beq.n	800c908 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800c8d8:	6a3b      	ldr	r3, [r7, #32]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800c8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	00db      	lsls	r3, r3, #3
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8ea:	b2da      	uxtb	r2, r3
 800c8ec:	697b      	ldr	r3, [r7, #20]
 800c8ee:	701a      	strb	r2, [r3, #0]
      count++;
 800c8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f2:	3301      	adds	r3, #1
 800c8f4:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800c8fc:	8b7b      	ldrh	r3, [r7, #26]
 800c8fe:	3b01      	subs	r3, #1
 800c900:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800c902:	8b7b      	ldrh	r3, [r7, #26]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d1ea      	bne.n	800c8de <USB_ReadPMA+0x86>
  }
}
 800c908:	bf00      	nop
 800c90a:	372c      	adds	r7, #44	@ 0x2c
 800c90c:	46bd      	mov	sp, r7
 800c90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c912:	4770      	bx	lr

0800c914 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	460b      	mov	r3, r1
 800c91e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c920:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c924:	f000 ffa4 	bl	800d870 <USBD_static_malloc>
 800c928:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d109      	bne.n	800c944 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	32b0      	adds	r2, #176	@ 0xb0
 800c93a:	2100      	movs	r1, #0
 800c93c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c940:	2302      	movs	r3, #2
 800c942:	e0d4      	b.n	800caee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c944:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c948:	2100      	movs	r1, #0
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f002 fb46 	bl	800efdc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	32b0      	adds	r2, #176	@ 0xb0
 800c95a:	68f9      	ldr	r1, [r7, #12]
 800c95c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	32b0      	adds	r2, #176	@ 0xb0
 800c96a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	7c1b      	ldrb	r3, [r3, #16]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d138      	bne.n	800c9ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c97c:	4b5e      	ldr	r3, [pc, #376]	@ (800caf8 <USBD_CDC_Init+0x1e4>)
 800c97e:	7819      	ldrb	r1, [r3, #0]
 800c980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c984:	2202      	movs	r2, #2
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f000 fe79 	bl	800d67e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c98c:	4b5a      	ldr	r3, [pc, #360]	@ (800caf8 <USBD_CDC_Init+0x1e4>)
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	f003 020f 	and.w	r2, r3, #15
 800c994:	6879      	ldr	r1, [r7, #4]
 800c996:	4613      	mov	r3, r2
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	4413      	add	r3, r2
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	440b      	add	r3, r1
 800c9a0:	3324      	adds	r3, #36	@ 0x24
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c9a6:	4b55      	ldr	r3, [pc, #340]	@ (800cafc <USBD_CDC_Init+0x1e8>)
 800c9a8:	7819      	ldrb	r1, [r3, #0]
 800c9aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c9ae:	2202      	movs	r2, #2
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 fe64 	bl	800d67e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c9b6:	4b51      	ldr	r3, [pc, #324]	@ (800cafc <USBD_CDC_Init+0x1e8>)
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	f003 020f 	and.w	r2, r3, #15
 800c9be:	6879      	ldr	r1, [r7, #4]
 800c9c0:	4613      	mov	r3, r2
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	4413      	add	r3, r2
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	440b      	add	r3, r1
 800c9ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c9d2:	4b4b      	ldr	r3, [pc, #300]	@ (800cb00 <USBD_CDC_Init+0x1ec>)
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	f003 020f 	and.w	r2, r3, #15
 800c9da:	6879      	ldr	r1, [r7, #4]
 800c9dc:	4613      	mov	r3, r2
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	4413      	add	r3, r2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	440b      	add	r3, r1
 800c9e6:	3326      	adds	r3, #38	@ 0x26
 800c9e8:	2210      	movs	r2, #16
 800c9ea:	801a      	strh	r2, [r3, #0]
 800c9ec:	e035      	b.n	800ca5a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c9ee:	4b42      	ldr	r3, [pc, #264]	@ (800caf8 <USBD_CDC_Init+0x1e4>)
 800c9f0:	7819      	ldrb	r1, [r3, #0]
 800c9f2:	2340      	movs	r3, #64	@ 0x40
 800c9f4:	2202      	movs	r2, #2
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fe41 	bl	800d67e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c9fc:	4b3e      	ldr	r3, [pc, #248]	@ (800caf8 <USBD_CDC_Init+0x1e4>)
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	f003 020f 	and.w	r2, r3, #15
 800ca04:	6879      	ldr	r1, [r7, #4]
 800ca06:	4613      	mov	r3, r2
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	4413      	add	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	440b      	add	r3, r1
 800ca10:	3324      	adds	r3, #36	@ 0x24
 800ca12:	2201      	movs	r2, #1
 800ca14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ca16:	4b39      	ldr	r3, [pc, #228]	@ (800cafc <USBD_CDC_Init+0x1e8>)
 800ca18:	7819      	ldrb	r1, [r3, #0]
 800ca1a:	2340      	movs	r3, #64	@ 0x40
 800ca1c:	2202      	movs	r2, #2
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fe2d 	bl	800d67e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ca24:	4b35      	ldr	r3, [pc, #212]	@ (800cafc <USBD_CDC_Init+0x1e8>)
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	f003 020f 	and.w	r2, r3, #15
 800ca2c:	6879      	ldr	r1, [r7, #4]
 800ca2e:	4613      	mov	r3, r2
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	4413      	add	r3, r2
 800ca34:	009b      	lsls	r3, r3, #2
 800ca36:	440b      	add	r3, r1
 800ca38:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ca40:	4b2f      	ldr	r3, [pc, #188]	@ (800cb00 <USBD_CDC_Init+0x1ec>)
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	f003 020f 	and.w	r2, r3, #15
 800ca48:	6879      	ldr	r1, [r7, #4]
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4413      	add	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	440b      	add	r3, r1
 800ca54:	3326      	adds	r3, #38	@ 0x26
 800ca56:	2210      	movs	r2, #16
 800ca58:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ca5a:	4b29      	ldr	r3, [pc, #164]	@ (800cb00 <USBD_CDC_Init+0x1ec>)
 800ca5c:	7819      	ldrb	r1, [r3, #0]
 800ca5e:	2308      	movs	r3, #8
 800ca60:	2203      	movs	r2, #3
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fe0b 	bl	800d67e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ca68:	4b25      	ldr	r3, [pc, #148]	@ (800cb00 <USBD_CDC_Init+0x1ec>)
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	f003 020f 	and.w	r2, r3, #15
 800ca70:	6879      	ldr	r1, [r7, #4]
 800ca72:	4613      	mov	r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	4413      	add	r3, r2
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	440b      	add	r3, r1
 800ca7c:	3324      	adds	r3, #36	@ 0x24
 800ca7e:	2201      	movs	r2, #1
 800ca80:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	33b0      	adds	r3, #176	@ 0xb0
 800ca94:	009b      	lsls	r3, r3, #2
 800ca96:	4413      	add	r3, r2
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2200      	movs	r2, #0
 800caa2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2200      	movs	r2, #0
 800caaa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d101      	bne.n	800cabc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cab8:	2302      	movs	r3, #2
 800caba:	e018      	b.n	800caee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	7c1b      	ldrb	r3, [r3, #16]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d10a      	bne.n	800cada <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cac4:	4b0d      	ldr	r3, [pc, #52]	@ (800cafc <USBD_CDC_Init+0x1e8>)
 800cac6:	7819      	ldrb	r1, [r3, #0]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f000 fe9e 	bl	800d814 <USBD_LL_PrepareReceive>
 800cad8:	e008      	b.n	800caec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cada:	4b08      	ldr	r3, [pc, #32]	@ (800cafc <USBD_CDC_Init+0x1e8>)
 800cadc:	7819      	ldrb	r1, [r3, #0]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cae4:	2340      	movs	r3, #64	@ 0x40
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 fe94 	bl	800d814 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bd80      	pop	{r7, pc}
 800caf6:	bf00      	nop
 800caf8:	200000af 	.word	0x200000af
 800cafc:	200000b0 	.word	0x200000b0
 800cb00:	200000b1 	.word	0x200000b1

0800cb04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cb10:	4b3a      	ldr	r3, [pc, #232]	@ (800cbfc <USBD_CDC_DeInit+0xf8>)
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	4619      	mov	r1, r3
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 fdd1 	bl	800d6be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cb1c:	4b37      	ldr	r3, [pc, #220]	@ (800cbfc <USBD_CDC_DeInit+0xf8>)
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	f003 020f 	and.w	r2, r3, #15
 800cb24:	6879      	ldr	r1, [r7, #4]
 800cb26:	4613      	mov	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	009b      	lsls	r3, r3, #2
 800cb2e:	440b      	add	r3, r1
 800cb30:	3324      	adds	r3, #36	@ 0x24
 800cb32:	2200      	movs	r2, #0
 800cb34:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cb36:	4b32      	ldr	r3, [pc, #200]	@ (800cc00 <USBD_CDC_DeInit+0xfc>)
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fdbe 	bl	800d6be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cb42:	4b2f      	ldr	r3, [pc, #188]	@ (800cc00 <USBD_CDC_DeInit+0xfc>)
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	f003 020f 	and.w	r2, r3, #15
 800cb4a:	6879      	ldr	r1, [r7, #4]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	4413      	add	r3, r2
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	440b      	add	r3, r1
 800cb56:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cb5e:	4b29      	ldr	r3, [pc, #164]	@ (800cc04 <USBD_CDC_DeInit+0x100>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	4619      	mov	r1, r3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 fdaa 	bl	800d6be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cb6a:	4b26      	ldr	r3, [pc, #152]	@ (800cc04 <USBD_CDC_DeInit+0x100>)
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	f003 020f 	and.w	r2, r3, #15
 800cb72:	6879      	ldr	r1, [r7, #4]
 800cb74:	4613      	mov	r3, r2
 800cb76:	009b      	lsls	r3, r3, #2
 800cb78:	4413      	add	r3, r2
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	440b      	add	r3, r1
 800cb7e:	3324      	adds	r3, #36	@ 0x24
 800cb80:	2200      	movs	r2, #0
 800cb82:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cb84:	4b1f      	ldr	r3, [pc, #124]	@ (800cc04 <USBD_CDC_DeInit+0x100>)
 800cb86:	781b      	ldrb	r3, [r3, #0]
 800cb88:	f003 020f 	and.w	r2, r3, #15
 800cb8c:	6879      	ldr	r1, [r7, #4]
 800cb8e:	4613      	mov	r3, r2
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	4413      	add	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	440b      	add	r3, r1
 800cb98:	3326      	adds	r3, #38	@ 0x26
 800cb9a:	2200      	movs	r2, #0
 800cb9c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	32b0      	adds	r2, #176	@ 0xb0
 800cba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d01f      	beq.n	800cbf0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbb6:	687a      	ldr	r2, [r7, #4]
 800cbb8:	33b0      	adds	r3, #176	@ 0xb0
 800cbba:	009b      	lsls	r3, r3, #2
 800cbbc:	4413      	add	r3, r2
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	32b0      	adds	r2, #176	@ 0xb0
 800cbce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f000 fe5a 	bl	800d88c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	32b0      	adds	r2, #176	@ 0xb0
 800cbe2:	2100      	movs	r1, #0
 800cbe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cbf0:	2300      	movs	r3, #0
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3708      	adds	r7, #8
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	200000af 	.word	0x200000af
 800cc00:	200000b0 	.word	0x200000b0
 800cc04:	200000b1 	.word	0x200000b1

0800cc08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	32b0      	adds	r2, #176	@ 0xb0
 800cc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cc22:	2300      	movs	r3, #0
 800cc24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cc26:	2300      	movs	r3, #0
 800cc28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d101      	bne.n	800cc38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cc34:	2303      	movs	r3, #3
 800cc36:	e0bf      	b.n	800cdb8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d050      	beq.n	800cce6 <USBD_CDC_Setup+0xde>
 800cc44:	2b20      	cmp	r3, #32
 800cc46:	f040 80af 	bne.w	800cda8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	88db      	ldrh	r3, [r3, #6]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d03a      	beq.n	800ccc8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	b25b      	sxtb	r3, r3
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	da1b      	bge.n	800cc94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	33b0      	adds	r3, #176	@ 0xb0
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	4413      	add	r3, r2
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	683a      	ldr	r2, [r7, #0]
 800cc70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cc72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	88d2      	ldrh	r2, [r2, #6]
 800cc78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	88db      	ldrh	r3, [r3, #6]
 800cc7e:	2b07      	cmp	r3, #7
 800cc80:	bf28      	it	cs
 800cc82:	2307      	movcs	r3, #7
 800cc84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	89fa      	ldrh	r2, [r7, #14]
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f002 f8f0 	bl	800ee72 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cc92:	e090      	b.n	800cdb6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	785a      	ldrb	r2, [r3, #1]
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	88db      	ldrh	r3, [r3, #6]
 800cca2:	2b3f      	cmp	r3, #63	@ 0x3f
 800cca4:	d803      	bhi.n	800ccae <USBD_CDC_Setup+0xa6>
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	88db      	ldrh	r3, [r3, #6]
 800ccaa:	b2da      	uxtb	r2, r3
 800ccac:	e000      	b.n	800ccb0 <USBD_CDC_Setup+0xa8>
 800ccae:	2240      	movs	r2, #64	@ 0x40
 800ccb0:	693b      	ldr	r3, [r7, #16]
 800ccb2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ccb6:	6939      	ldr	r1, [r7, #16]
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f002 f902 	bl	800eeca <USBD_CtlPrepareRx>
      break;
 800ccc6:	e076      	b.n	800cdb6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	33b0      	adds	r3, #176	@ 0xb0
 800ccd2:	009b      	lsls	r3, r3, #2
 800ccd4:	4413      	add	r3, r2
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	683a      	ldr	r2, [r7, #0]
 800ccdc:	7850      	ldrb	r0, [r2, #1]
 800ccde:	2200      	movs	r2, #0
 800cce0:	6839      	ldr	r1, [r7, #0]
 800cce2:	4798      	blx	r3
      break;
 800cce4:	e067      	b.n	800cdb6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	785b      	ldrb	r3, [r3, #1]
 800ccea:	2b0b      	cmp	r3, #11
 800ccec:	d851      	bhi.n	800cd92 <USBD_CDC_Setup+0x18a>
 800ccee:	a201      	add	r2, pc, #4	@ (adr r2, 800ccf4 <USBD_CDC_Setup+0xec>)
 800ccf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccf4:	0800cd25 	.word	0x0800cd25
 800ccf8:	0800cda1 	.word	0x0800cda1
 800ccfc:	0800cd93 	.word	0x0800cd93
 800cd00:	0800cd93 	.word	0x0800cd93
 800cd04:	0800cd93 	.word	0x0800cd93
 800cd08:	0800cd93 	.word	0x0800cd93
 800cd0c:	0800cd93 	.word	0x0800cd93
 800cd10:	0800cd93 	.word	0x0800cd93
 800cd14:	0800cd93 	.word	0x0800cd93
 800cd18:	0800cd93 	.word	0x0800cd93
 800cd1c:	0800cd4f 	.word	0x0800cd4f
 800cd20:	0800cd79 	.word	0x0800cd79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd2a:	b2db      	uxtb	r3, r3
 800cd2c:	2b03      	cmp	r3, #3
 800cd2e:	d107      	bne.n	800cd40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cd30:	f107 030a 	add.w	r3, r7, #10
 800cd34:	2202      	movs	r2, #2
 800cd36:	4619      	mov	r1, r3
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f002 f89a 	bl	800ee72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cd3e:	e032      	b.n	800cda6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cd40:	6839      	ldr	r1, [r7, #0]
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f001 ff17 	bl	800eb76 <USBD_CtlError>
            ret = USBD_FAIL;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	75fb      	strb	r3, [r7, #23]
          break;
 800cd4c:	e02b      	b.n	800cda6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	2b03      	cmp	r3, #3
 800cd58:	d107      	bne.n	800cd6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cd5a:	f107 030d 	add.w	r3, r7, #13
 800cd5e:	2201      	movs	r2, #1
 800cd60:	4619      	mov	r1, r3
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f002 f885 	bl	800ee72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cd68:	e01d      	b.n	800cda6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cd6a:	6839      	ldr	r1, [r7, #0]
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f001 ff02 	bl	800eb76 <USBD_CtlError>
            ret = USBD_FAIL;
 800cd72:	2303      	movs	r3, #3
 800cd74:	75fb      	strb	r3, [r7, #23]
          break;
 800cd76:	e016      	b.n	800cda6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	2b03      	cmp	r3, #3
 800cd82:	d00f      	beq.n	800cda4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f001 fef5 	bl	800eb76 <USBD_CtlError>
            ret = USBD_FAIL;
 800cd8c:	2303      	movs	r3, #3
 800cd8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cd90:	e008      	b.n	800cda4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cd92:	6839      	ldr	r1, [r7, #0]
 800cd94:	6878      	ldr	r0, [r7, #4]
 800cd96:	f001 feee 	bl	800eb76 <USBD_CtlError>
          ret = USBD_FAIL;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	75fb      	strb	r3, [r7, #23]
          break;
 800cd9e:	e002      	b.n	800cda6 <USBD_CDC_Setup+0x19e>
          break;
 800cda0:	bf00      	nop
 800cda2:	e008      	b.n	800cdb6 <USBD_CDC_Setup+0x1ae>
          break;
 800cda4:	bf00      	nop
      }
      break;
 800cda6:	e006      	b.n	800cdb6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f001 fee3 	bl	800eb76 <USBD_CtlError>
      ret = USBD_FAIL;
 800cdb0:	2303      	movs	r3, #3
 800cdb2:	75fb      	strb	r3, [r7, #23]
      break;
 800cdb4:	bf00      	nop
  }

  return (uint8_t)ret;
 800cdb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3718      	adds	r7, #24
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}

0800cdc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cdd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	32b0      	adds	r2, #176	@ 0xb0
 800cdde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d101      	bne.n	800cdea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cde6:	2303      	movs	r3, #3
 800cde8:	e065      	b.n	800ceb6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	32b0      	adds	r2, #176	@ 0xb0
 800cdf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cdfa:	78fb      	ldrb	r3, [r7, #3]
 800cdfc:	f003 020f 	and.w	r2, r3, #15
 800ce00:	6879      	ldr	r1, [r7, #4]
 800ce02:	4613      	mov	r3, r2
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	4413      	add	r3, r2
 800ce08:	009b      	lsls	r3, r3, #2
 800ce0a:	440b      	add	r3, r1
 800ce0c:	3318      	adds	r3, #24
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d02f      	beq.n	800ce74 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ce14:	78fb      	ldrb	r3, [r7, #3]
 800ce16:	f003 020f 	and.w	r2, r3, #15
 800ce1a:	6879      	ldr	r1, [r7, #4]
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	009b      	lsls	r3, r3, #2
 800ce20:	4413      	add	r3, r2
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	440b      	add	r3, r1
 800ce26:	3318      	adds	r3, #24
 800ce28:	681a      	ldr	r2, [r3, #0]
 800ce2a:	78fb      	ldrb	r3, [r7, #3]
 800ce2c:	f003 010f 	and.w	r1, r3, #15
 800ce30:	68f8      	ldr	r0, [r7, #12]
 800ce32:	460b      	mov	r3, r1
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	440b      	add	r3, r1
 800ce38:	00db      	lsls	r3, r3, #3
 800ce3a:	4403      	add	r3, r0
 800ce3c:	3324      	adds	r3, #36	@ 0x24
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	fbb2 f1f3 	udiv	r1, r2, r3
 800ce44:	fb01 f303 	mul.w	r3, r1, r3
 800ce48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d112      	bne.n	800ce74 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ce4e:	78fb      	ldrb	r3, [r7, #3]
 800ce50:	f003 020f 	and.w	r2, r3, #15
 800ce54:	6879      	ldr	r1, [r7, #4]
 800ce56:	4613      	mov	r3, r2
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	4413      	add	r3, r2
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	440b      	add	r3, r1
 800ce60:	3318      	adds	r3, #24
 800ce62:	2200      	movs	r2, #0
 800ce64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ce66:	78f9      	ldrb	r1, [r7, #3]
 800ce68:	2300      	movs	r3, #0
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 fcb6 	bl	800d7de <USBD_LL_Transmit>
 800ce72:	e01f      	b.n	800ceb4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	2200      	movs	r2, #0
 800ce78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	33b0      	adds	r3, #176	@ 0xb0
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	4413      	add	r3, r2
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	691b      	ldr	r3, [r3, #16]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d010      	beq.n	800ceb4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	33b0      	adds	r3, #176	@ 0xb0
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	4413      	add	r3, r2
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	691b      	ldr	r3, [r3, #16]
 800cea4:	68ba      	ldr	r2, [r7, #8]
 800cea6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ceaa:	68ba      	ldr	r2, [r7, #8]
 800ceac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ceb0:	78fa      	ldrb	r2, [r7, #3]
 800ceb2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3710      	adds	r7, #16
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b084      	sub	sp, #16
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
 800cec6:	460b      	mov	r3, r1
 800cec8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	32b0      	adds	r2, #176	@ 0xb0
 800ced4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ced8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	32b0      	adds	r2, #176	@ 0xb0
 800cee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d101      	bne.n	800cef0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ceec:	2303      	movs	r3, #3
 800ceee:	e01a      	b.n	800cf26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cef0:	78fb      	ldrb	r3, [r7, #3]
 800cef2:	4619      	mov	r1, r3
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 fca8 	bl	800d84a <USBD_LL_GetRxDataSize>
 800cefa:	4602      	mov	r2, r0
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	33b0      	adds	r3, #176	@ 0xb0
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	4413      	add	r3, r2
 800cf10:	685b      	ldr	r3, [r3, #4]
 800cf12:	68db      	ldr	r3, [r3, #12]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800cf20:	4611      	mov	r1, r2
 800cf22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cf24:	2300      	movs	r3, #0
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b084      	sub	sp, #16
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	32b0      	adds	r2, #176	@ 0xb0
 800cf40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d101      	bne.n	800cf50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cf4c:	2303      	movs	r3, #3
 800cf4e:	e024      	b.n	800cf9a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf56:	687a      	ldr	r2, [r7, #4]
 800cf58:	33b0      	adds	r3, #176	@ 0xb0
 800cf5a:	009b      	lsls	r3, r3, #2
 800cf5c:	4413      	add	r3, r2
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d019      	beq.n	800cf98 <USBD_CDC_EP0_RxReady+0x6a>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800cf6a:	2bff      	cmp	r3, #255	@ 0xff
 800cf6c:	d014      	beq.n	800cf98 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	33b0      	adds	r3, #176	@ 0xb0
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	4413      	add	r3, r2
 800cf7c:	685b      	ldr	r3, [r3, #4]
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800cf86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cf8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	22ff      	movs	r2, #255	@ 0xff
 800cf94:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800cf98:	2300      	movs	r3, #0
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
	...

0800cfa4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b086      	sub	sp, #24
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cfac:	2182      	movs	r1, #130	@ 0x82
 800cfae:	4818      	ldr	r0, [pc, #96]	@ (800d010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cfb0:	f000 ffab 	bl	800df0a <USBD_GetEpDesc>
 800cfb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cfb6:	2101      	movs	r1, #1
 800cfb8:	4815      	ldr	r0, [pc, #84]	@ (800d010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cfba:	f000 ffa6 	bl	800df0a <USBD_GetEpDesc>
 800cfbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cfc0:	2181      	movs	r1, #129	@ 0x81
 800cfc2:	4813      	ldr	r0, [pc, #76]	@ (800d010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cfc4:	f000 ffa1 	bl	800df0a <USBD_GetEpDesc>
 800cfc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d002      	beq.n	800cfd6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	2210      	movs	r2, #16
 800cfd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d006      	beq.n	800cfea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cfe4:	711a      	strb	r2, [r3, #4]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d006      	beq.n	800cffe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cff8:	711a      	strb	r2, [r3, #4]
 800cffa:	2200      	movs	r2, #0
 800cffc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2243      	movs	r2, #67	@ 0x43
 800d002:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d004:	4b02      	ldr	r3, [pc, #8]	@ (800d010 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d006:	4618      	mov	r0, r3
 800d008:	3718      	adds	r7, #24
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	2000006c 	.word	0x2000006c

0800d014 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b086      	sub	sp, #24
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d01c:	2182      	movs	r1, #130	@ 0x82
 800d01e:	4818      	ldr	r0, [pc, #96]	@ (800d080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d020:	f000 ff73 	bl	800df0a <USBD_GetEpDesc>
 800d024:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d026:	2101      	movs	r1, #1
 800d028:	4815      	ldr	r0, [pc, #84]	@ (800d080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d02a:	f000 ff6e 	bl	800df0a <USBD_GetEpDesc>
 800d02e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d030:	2181      	movs	r1, #129	@ 0x81
 800d032:	4813      	ldr	r0, [pc, #76]	@ (800d080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d034:	f000 ff69 	bl	800df0a <USBD_GetEpDesc>
 800d038:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d002      	beq.n	800d046 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	2210      	movs	r2, #16
 800d044:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d006      	beq.n	800d05a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	2200      	movs	r2, #0
 800d050:	711a      	strb	r2, [r3, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	f042 0202 	orr.w	r2, r2, #2
 800d058:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d006      	beq.n	800d06e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2200      	movs	r2, #0
 800d064:	711a      	strb	r2, [r3, #4]
 800d066:	2200      	movs	r2, #0
 800d068:	f042 0202 	orr.w	r2, r2, #2
 800d06c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2243      	movs	r2, #67	@ 0x43
 800d072:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d074:	4b02      	ldr	r3, [pc, #8]	@ (800d080 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d076:	4618      	mov	r0, r3
 800d078:	3718      	adds	r7, #24
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	2000006c 	.word	0x2000006c

0800d084 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b086      	sub	sp, #24
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d08c:	2182      	movs	r1, #130	@ 0x82
 800d08e:	4818      	ldr	r0, [pc, #96]	@ (800d0f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d090:	f000 ff3b 	bl	800df0a <USBD_GetEpDesc>
 800d094:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d096:	2101      	movs	r1, #1
 800d098:	4815      	ldr	r0, [pc, #84]	@ (800d0f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d09a:	f000 ff36 	bl	800df0a <USBD_GetEpDesc>
 800d09e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d0a0:	2181      	movs	r1, #129	@ 0x81
 800d0a2:	4813      	ldr	r0, [pc, #76]	@ (800d0f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d0a4:	f000 ff31 	bl	800df0a <USBD_GetEpDesc>
 800d0a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d002      	beq.n	800d0b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d0b0:	697b      	ldr	r3, [r7, #20]
 800d0b2:	2210      	movs	r2, #16
 800d0b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d006      	beq.n	800d0ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d0c4:	711a      	strb	r2, [r3, #4]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d006      	beq.n	800d0de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d0d8:	711a      	strb	r2, [r3, #4]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2243      	movs	r2, #67	@ 0x43
 800d0e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d0e4:	4b02      	ldr	r3, [pc, #8]	@ (800d0f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3718      	adds	r7, #24
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	2000006c 	.word	0x2000006c

0800d0f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	220a      	movs	r2, #10
 800d100:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d102:	4b03      	ldr	r3, [pc, #12]	@ (800d110 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d104:	4618      	mov	r0, r3
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr
 800d110:	20000028 	.word	0x20000028

0800d114 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d101      	bne.n	800d128 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d124:	2303      	movs	r3, #3
 800d126:	e009      	b.n	800d13c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d12e:	687a      	ldr	r2, [r7, #4]
 800d130:	33b0      	adds	r3, #176	@ 0xb0
 800d132:	009b      	lsls	r3, r3, #2
 800d134:	4413      	add	r3, r2
 800d136:	683a      	ldr	r2, [r7, #0]
 800d138:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d13a:	2300      	movs	r3, #0
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	370c      	adds	r7, #12
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d148:	b480      	push	{r7}
 800d14a:	b087      	sub	sp, #28
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	60f8      	str	r0, [r7, #12]
 800d150:	60b9      	str	r1, [r7, #8]
 800d152:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	32b0      	adds	r2, #176	@ 0xb0
 800d15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d162:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d101      	bne.n	800d16e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d16a:	2303      	movs	r3, #3
 800d16c:	e008      	b.n	800d180 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	68ba      	ldr	r2, [r7, #8]
 800d172:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	687a      	ldr	r2, [r7, #4]
 800d17a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d17e:	2300      	movs	r3, #0
}
 800d180:	4618      	mov	r0, r3
 800d182:	371c      	adds	r7, #28
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr

0800d18c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b085      	sub	sp, #20
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	32b0      	adds	r2, #176	@ 0xb0
 800d1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d101      	bne.n	800d1b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d1ac:	2303      	movs	r3, #3
 800d1ae:	e004      	b.n	800d1ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	683a      	ldr	r2, [r7, #0]
 800d1b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d1b8:	2300      	movs	r3, #0
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3714      	adds	r7, #20
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c4:	4770      	bx	lr
	...

0800d1c8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	32b0      	adds	r2, #176	@ 0xb0
 800d1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1de:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d101      	bne.n	800d1ee <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d1ea:	2303      	movs	r3, #3
 800d1ec:	e025      	b.n	800d23a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d11f      	bne.n	800d238 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d200:	4b10      	ldr	r3, [pc, #64]	@ (800d244 <USBD_CDC_TransmitPacket+0x7c>)
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	f003 020f 	and.w	r2, r3, #15
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	4613      	mov	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	4413      	add	r3, r2
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	4403      	add	r3, r0
 800d21a:	3318      	adds	r3, #24
 800d21c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d21e:	4b09      	ldr	r3, [pc, #36]	@ (800d244 <USBD_CDC_TransmitPacket+0x7c>)
 800d220:	7819      	ldrb	r1, [r3, #0]
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 fad5 	bl	800d7de <USBD_LL_Transmit>

    ret = USBD_OK;
 800d234:	2300      	movs	r3, #0
 800d236:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d238:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	200000af 	.word	0x200000af

0800d248 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	32b0      	adds	r2, #176	@ 0xb0
 800d25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d25e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	32b0      	adds	r2, #176	@ 0xb0
 800d26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d101      	bne.n	800d276 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d272:	2303      	movs	r3, #3
 800d274:	e018      	b.n	800d2a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	7c1b      	ldrb	r3, [r3, #16]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d10a      	bne.n	800d294 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d27e:	4b0c      	ldr	r3, [pc, #48]	@ (800d2b0 <USBD_CDC_ReceivePacket+0x68>)
 800d280:	7819      	ldrb	r1, [r3, #0]
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 fac1 	bl	800d814 <USBD_LL_PrepareReceive>
 800d292:	e008      	b.n	800d2a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d294:	4b06      	ldr	r3, [pc, #24]	@ (800d2b0 <USBD_CDC_ReceivePacket+0x68>)
 800d296:	7819      	ldrb	r1, [r3, #0]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d29e:	2340      	movs	r3, #64	@ 0x40
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fab7 	bl	800d814 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d2a6:	2300      	movs	r3, #0
}
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	3710      	adds	r7, #16
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}
 800d2b0:	200000b0 	.word	0x200000b0

0800d2b4 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	4905      	ldr	r1, [pc, #20]	@ (800d2d0 <TEMPLATE_Init+0x1c>)
 800d2bc:	4805      	ldr	r0, [pc, #20]	@ (800d2d4 <TEMPLATE_Init+0x20>)
 800d2be:	f7ff ff43 	bl	800d148 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d2c2:	4905      	ldr	r1, [pc, #20]	@ (800d2d8 <TEMPLATE_Init+0x24>)
 800d2c4:	4803      	ldr	r0, [pc, #12]	@ (800d2d4 <TEMPLATE_Init+0x20>)
 800d2c6:	f7ff ff61 	bl	800d18c <USBD_CDC_SetRxBuffer>
      return (0);
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	bd80      	pop	{r7, pc}
 800d2d0:	20000b7c 	.word	0x20000b7c
 800d2d4:	200005f8 	.word	0x200005f8
 800d2d8:	2000097c 	.word	0x2000097c

0800d2dc <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800d2dc:	b480      	push	{r7}
 800d2de:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800d2e0:	2300      	movs	r3, #0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <TEMPLATE_Transmit>:

uint8_t TEMPLATE_Transmit(uint8_t* Buf, uint16_t Len)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d2fc:	4b0d      	ldr	r3, [pc, #52]	@ (800d334 <TEMPLATE_Transmit+0x48>)
 800d2fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d302:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <TEMPLATE_Transmit+0x26>
    return
             USBD_BUSY;
 800d30e:	2301      	movs	r3, #1
 800d310:	e00b      	b.n	800d32a <TEMPLATE_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d312:	887b      	ldrh	r3, [r7, #2]
 800d314:	461a      	mov	r2, r3
 800d316:	6879      	ldr	r1, [r7, #4]
 800d318:	4806      	ldr	r0, [pc, #24]	@ (800d334 <TEMPLATE_Transmit+0x48>)
 800d31a:	f7ff ff15 	bl	800d148 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d31e:	4805      	ldr	r0, [pc, #20]	@ (800d334 <TEMPLATE_Transmit+0x48>)
 800d320:	f7ff ff52 	bl	800d1c8 <USBD_CDC_TransmitPacket>
 800d324:	4603      	mov	r3, r0
 800d326:	73fb      	strb	r3, [r7, #15]
  return result;
 800d328:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3710      	adds	r7, #16
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	200005f8 	.word	0x200005f8

0800d338 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800d338:	b480      	push	{r7}
 800d33a:	b083      	sub	sp, #12
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	4603      	mov	r3, r0
 800d340:	6039      	str	r1, [r7, #0]
 800d342:	71fb      	strb	r3, [r7, #7]
 800d344:	4613      	mov	r3, r2
 800d346:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800d348:	79fb      	ldrb	r3, [r7, #7]
 800d34a:	2b23      	cmp	r3, #35	@ 0x23
 800d34c:	f200 8098 	bhi.w	800d480 <TEMPLATE_Control+0x148>
 800d350:	a201      	add	r2, pc, #4	@ (adr r2, 800d358 <TEMPLATE_Control+0x20>)
 800d352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d356:	bf00      	nop
 800d358:	0800d481 	.word	0x0800d481
 800d35c:	0800d481 	.word	0x0800d481
 800d360:	0800d481 	.word	0x0800d481
 800d364:	0800d481 	.word	0x0800d481
 800d368:	0800d481 	.word	0x0800d481
 800d36c:	0800d481 	.word	0x0800d481
 800d370:	0800d481 	.word	0x0800d481
 800d374:	0800d481 	.word	0x0800d481
 800d378:	0800d481 	.word	0x0800d481
 800d37c:	0800d481 	.word	0x0800d481
 800d380:	0800d481 	.word	0x0800d481
 800d384:	0800d481 	.word	0x0800d481
 800d388:	0800d481 	.word	0x0800d481
 800d38c:	0800d481 	.word	0x0800d481
 800d390:	0800d481 	.word	0x0800d481
 800d394:	0800d481 	.word	0x0800d481
 800d398:	0800d481 	.word	0x0800d481
 800d39c:	0800d481 	.word	0x0800d481
 800d3a0:	0800d481 	.word	0x0800d481
 800d3a4:	0800d481 	.word	0x0800d481
 800d3a8:	0800d481 	.word	0x0800d481
 800d3ac:	0800d481 	.word	0x0800d481
 800d3b0:	0800d481 	.word	0x0800d481
 800d3b4:	0800d481 	.word	0x0800d481
 800d3b8:	0800d481 	.word	0x0800d481
 800d3bc:	0800d481 	.word	0x0800d481
 800d3c0:	0800d481 	.word	0x0800d481
 800d3c4:	0800d481 	.word	0x0800d481
 800d3c8:	0800d481 	.word	0x0800d481
 800d3cc:	0800d481 	.word	0x0800d481
 800d3d0:	0800d481 	.word	0x0800d481
 800d3d4:	0800d481 	.word	0x0800d481
 800d3d8:	0800d3e9 	.word	0x0800d3e9
 800d3dc:	0800d42d 	.word	0x0800d42d
 800d3e0:	0800d481 	.word	0x0800d481
 800d3e4:	0800d481 	.word	0x0800d481
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	461a      	mov	r2, r3
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	3301      	adds	r3, #1
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	021b      	lsls	r3, r3, #8
 800d3f6:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	3302      	adds	r3, #2
 800d3fc:	781b      	ldrb	r3, [r3, #0]
 800d3fe:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800d400:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	3303      	adds	r3, #3
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	061b      	lsls	r3, r3, #24
 800d40a:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800d40c:	461a      	mov	r2, r3
 800d40e:	4b20      	ldr	r3, [pc, #128]	@ (800d490 <TEMPLATE_Control+0x158>)
 800d410:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	791a      	ldrb	r2, [r3, #4]
 800d416:	4b1e      	ldr	r3, [pc, #120]	@ (800d490 <TEMPLATE_Control+0x158>)
 800d418:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	795a      	ldrb	r2, [r3, #5]
 800d41e:	4b1c      	ldr	r3, [pc, #112]	@ (800d490 <TEMPLATE_Control+0x158>)
 800d420:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	799a      	ldrb	r2, [r3, #6]
 800d426:	4b1a      	ldr	r3, [pc, #104]	@ (800d490 <TEMPLATE_Control+0x158>)
 800d428:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800d42a:	e02a      	b.n	800d482 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800d42c:	4b18      	ldr	r3, [pc, #96]	@ (800d490 <TEMPLATE_Control+0x158>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	b2da      	uxtb	r2, r3
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800d436:	4b16      	ldr	r3, [pc, #88]	@ (800d490 <TEMPLATE_Control+0x158>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	0a1a      	lsrs	r2, r3, #8
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	3301      	adds	r3, #1
 800d440:	b2d2      	uxtb	r2, r2
 800d442:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800d444:	4b12      	ldr	r3, [pc, #72]	@ (800d490 <TEMPLATE_Control+0x158>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	0c1a      	lsrs	r2, r3, #16
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	3302      	adds	r3, #2
 800d44e:	b2d2      	uxtb	r2, r2
 800d450:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800d452:	4b0f      	ldr	r3, [pc, #60]	@ (800d490 <TEMPLATE_Control+0x158>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	0e1a      	lsrs	r2, r3, #24
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	3303      	adds	r3, #3
 800d45c:	b2d2      	uxtb	r2, r2
 800d45e:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	3304      	adds	r3, #4
 800d464:	4a0a      	ldr	r2, [pc, #40]	@ (800d490 <TEMPLATE_Control+0x158>)
 800d466:	7912      	ldrb	r2, [r2, #4]
 800d468:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	3305      	adds	r3, #5
 800d46e:	4a08      	ldr	r2, [pc, #32]	@ (800d490 <TEMPLATE_Control+0x158>)
 800d470:	7952      	ldrb	r2, [r2, #5]
 800d472:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	3306      	adds	r3, #6
 800d478:	4a05      	ldr	r2, [pc, #20]	@ (800d490 <TEMPLATE_Control+0x158>)
 800d47a:	7992      	ldrb	r2, [r2, #6]
 800d47c:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800d47e:	e000      	b.n	800d482 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800d480:	bf00      	nop
  }

  return (0);
 800d482:	2300      	movs	r3, #0
}
 800d484:	4618      	mov	r0, r3
 800d486:	370c      	adds	r7, #12
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr
 800d490:	200000c8 	.word	0x200000c8

0800d494 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b082      	sub	sp, #8
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
      if(Buf[0] == '1')
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	2b31      	cmp	r3, #49	@ 0x31
 800d4a4:	d105      	bne.n	800d4b2 <TEMPLATE_Receive+0x1e>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	2120      	movs	r1, #32
 800d4aa:	480a      	ldr	r0, [pc, #40]	@ (800d4d4 <TEMPLATE_Receive+0x40>)
 800d4ac:	f7f4 fd52 	bl	8001f54 <HAL_GPIO_WritePin>
 800d4b0:	e008      	b.n	800d4c4 <TEMPLATE_Receive+0x30>
      else if(Buf[0] == '0')
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	2b30      	cmp	r3, #48	@ 0x30
 800d4b8:	d104      	bne.n	800d4c4 <TEMPLATE_Receive+0x30>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	2120      	movs	r1, #32
 800d4be:	4805      	ldr	r0, [pc, #20]	@ (800d4d4 <TEMPLATE_Receive+0x40>)
 800d4c0:	f7f4 fd48 	bl	8001f54 <HAL_GPIO_WritePin>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d4c4:	4804      	ldr	r0, [pc, #16]	@ (800d4d8 <TEMPLATE_Receive+0x44>)
 800d4c6:	f7ff febf 	bl	800d248 <USBD_CDC_ReceivePacket>
      return (USBD_OK);
 800d4ca:	2300      	movs	r3, #0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3708      	adds	r7, #8
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	42020000 	.word	0x42020000
 800d4d8:	200005f8 	.word	0x200005f8

0800d4dc <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	60f8      	str	r0, [r7, #12]
 800d4e4:	60b9      	str	r1, [r7, #8]
 800d4e6:	4613      	mov	r3, r2
 800d4e8:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3714      	adds	r7, #20
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f6:	4770      	bx	lr

0800d4f8 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d50c:	4619      	mov	r1, r3
 800d50e:	4610      	mov	r0, r2
 800d510:	f000 faa5 	bl	800da5e <USBD_LL_SetupStage>
}
 800d514:	bf00      	nop
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	460b      	mov	r3, r1
 800d526:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800d52e:	78fa      	ldrb	r2, [r7, #3]
 800d530:	6879      	ldr	r1, [r7, #4]
 800d532:	4613      	mov	r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	4413      	add	r3, r2
 800d538:	00db      	lsls	r3, r3, #3
 800d53a:	440b      	add	r3, r1
 800d53c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800d540:	681a      	ldr	r2, [r3, #0]
 800d542:	78fb      	ldrb	r3, [r7, #3]
 800d544:	4619      	mov	r1, r3
 800d546:	f000 fadf 	bl	800db08 <USBD_LL_DataOutStage>
}
 800d54a:	bf00      	nop
 800d54c:	3708      	adds	r7, #8
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}

0800d552 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800d552:	b580      	push	{r7, lr}
 800d554:	b082      	sub	sp, #8
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
 800d55a:	460b      	mov	r3, r1
 800d55c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800d564:	78fa      	ldrb	r2, [r7, #3]
 800d566:	6879      	ldr	r1, [r7, #4]
 800d568:	4613      	mov	r3, r2
 800d56a:	009b      	lsls	r3, r3, #2
 800d56c:	4413      	add	r3, r2
 800d56e:	00db      	lsls	r3, r3, #3
 800d570:	440b      	add	r3, r1
 800d572:	3328      	adds	r3, #40	@ 0x28
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	78fb      	ldrb	r3, [r7, #3]
 800d578:	4619      	mov	r1, r3
 800d57a:	f000 fb78 	bl	800dc6e <USBD_LL_DataInStage>
}
 800d57e:	bf00      	nop
 800d580:	3708      	adds	r7, #8
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}

0800d586 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800d586:	b580      	push	{r7, lr}
 800d588:	b082      	sub	sp, #8
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800d594:	4618      	mov	r0, r3
 800d596:	f000 fc7e 	bl	800de96 <USBD_LL_SOF>
}
 800d59a:	bf00      	nop
 800d59c:	3708      	adds	r7, #8
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b084      	sub	sp, #16
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	79db      	ldrb	r3, [r3, #7]
 800d5b2:	2b02      	cmp	r3, #2
 800d5b4:	d001      	beq.n	800d5ba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d5b6:	f7f3 fb1b 	bl	8000bf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800d5c0:	7bfa      	ldrb	r2, [r7, #15]
 800d5c2:	4611      	mov	r1, r2
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f000 fc56 	bl	800de76 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f000 fbfe 	bl	800ddd2 <USBD_LL_Reset>
}
 800d5d6:	bf00      	nop
 800d5d8:	3710      	adds	r7, #16
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
	...

0800d5e0 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	4a19      	ldr	r2, [pc, #100]	@ (800d650 <USBD_LL_Init+0x70>)
 800d5ec:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d5f6:	2340      	movs	r3, #64	@ 0x40
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	f7f6 fa74 	bl	8003ae8 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d606:	2380      	movs	r3, #128	@ 0x80
 800d608:	2200      	movs	r2, #0
 800d60a:	2180      	movs	r1, #128	@ 0x80
 800d60c:	f7f6 fa6c 	bl	8003ae8 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d616:	23c0      	movs	r3, #192	@ 0xc0
 800d618:	2200      	movs	r2, #0
 800d61a:	2181      	movs	r1, #129	@ 0x81
 800d61c:	f7f6 fa64 	bl	8003ae8 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d626:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d62a:	2200      	movs	r2, #0
 800d62c:	2101      	movs	r1, #1
 800d62e:	f7f6 fa5b 	bl	8003ae8 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d638:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800d63c:	2200      	movs	r2, #0
 800d63e:	2182      	movs	r1, #130	@ 0x82
 800d640:	f7f6 fa52 	bl	8003ae8 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	20000314 	.word	0x20000314

0800d654 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d662:	4618      	mov	r0, r3
 800d664:	f7f4 ff24 	bl	80024b0 <HAL_PCD_Start>
 800d668:	4603      	mov	r3, r0
 800d66a:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800d66c:	7bfb      	ldrb	r3, [r7, #15]
 800d66e:	4618      	mov	r0, r3
 800d670:	f000 f916 	bl	800d8a0 <USBD_Get_USB_Status>
 800d674:	4603      	mov	r3, r0
}
 800d676:	4618      	mov	r0, r3
 800d678:	3710      	adds	r7, #16
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b084      	sub	sp, #16
 800d682:	af00      	add	r7, sp, #0
 800d684:	6078      	str	r0, [r7, #4]
 800d686:	4608      	mov	r0, r1
 800d688:	4611      	mov	r1, r2
 800d68a:	461a      	mov	r2, r3
 800d68c:	4603      	mov	r3, r0
 800d68e:	70fb      	strb	r3, [r7, #3]
 800d690:	460b      	mov	r3, r1
 800d692:	70bb      	strb	r3, [r7, #2]
 800d694:	4613      	mov	r3, r2
 800d696:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d69e:	78bb      	ldrb	r3, [r7, #2]
 800d6a0:	883a      	ldrh	r2, [r7, #0]
 800d6a2:	78f9      	ldrb	r1, [r7, #3]
 800d6a4:	f7f5 f853 	bl	800274e <HAL_PCD_EP_Open>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800d6ac:	7bfb      	ldrb	r3, [r7, #15]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f000 f8f6 	bl	800d8a0 <USBD_Get_USB_Status>
 800d6b4:	4603      	mov	r3, r0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b084      	sub	sp, #16
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6d0:	78fa      	ldrb	r2, [r7, #3]
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7f5 f89b 	bl	8002810 <HAL_PCD_EP_Close>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800d6de:	7bfb      	ldrb	r3, [r7, #15]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f000 f8dd 	bl	800d8a0 <USBD_Get_USB_Status>
 800d6e6:	4603      	mov	r3, r0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3710      	adds	r7, #16
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	460b      	mov	r3, r1
 800d6fa:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d702:	78fa      	ldrb	r2, [r7, #3]
 800d704:	4611      	mov	r1, r2
 800d706:	4618      	mov	r0, r3
 800d708:	f7f5 f94e 	bl	80029a8 <HAL_PCD_EP_SetStall>
 800d70c:	4603      	mov	r3, r0
 800d70e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800d710:	7bfb      	ldrb	r3, [r7, #15]
 800d712:	4618      	mov	r0, r3
 800d714:	f000 f8c4 	bl	800d8a0 <USBD_Get_USB_Status>
 800d718:	4603      	mov	r3, r0
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}

0800d722 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800d722:	b580      	push	{r7, lr}
 800d724:	b084      	sub	sp, #16
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
 800d72a:	460b      	mov	r3, r1
 800d72c:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d734:	78fa      	ldrb	r2, [r7, #3]
 800d736:	4611      	mov	r1, r2
 800d738:	4618      	mov	r0, r3
 800d73a:	f7f5 f989 	bl	8002a50 <HAL_PCD_EP_ClrStall>
 800d73e:	4603      	mov	r3, r0
 800d740:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800d742:	7bfb      	ldrb	r3, [r7, #15]
 800d744:	4618      	mov	r0, r3
 800d746:	f000 f8ab 	bl	800d8a0 <USBD_Get_USB_Status>
 800d74a:	4603      	mov	r3, r0
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3710      	adds	r7, #16
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}

0800d754 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d754:	b480      	push	{r7}
 800d756:	b085      	sub	sp, #20
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	460b      	mov	r3, r1
 800d75e:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d766:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800d768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	da0b      	bge.n	800d788 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d770:	78fb      	ldrb	r3, [r7, #3]
 800d772:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d776:	68f9      	ldr	r1, [r7, #12]
 800d778:	4613      	mov	r3, r2
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4413      	add	r3, r2
 800d77e:	00db      	lsls	r3, r3, #3
 800d780:	440b      	add	r3, r1
 800d782:	3316      	adds	r3, #22
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	e00b      	b.n	800d7a0 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d788:	78fb      	ldrb	r3, [r7, #3]
 800d78a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d78e:	68f9      	ldr	r1, [r7, #12]
 800d790:	4613      	mov	r3, r2
 800d792:	009b      	lsls	r3, r3, #2
 800d794:	4413      	add	r3, r2
 800d796:	00db      	lsls	r3, r3, #3
 800d798:	440b      	add	r3, r1
 800d79a:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800d79e:	781b      	ldrb	r3, [r3, #0]
      }
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3714      	adds	r7, #20
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b084      	sub	sp, #16
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	460b      	mov	r3, r1
 800d7b6:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7be:	78fa      	ldrb	r2, [r7, #3]
 800d7c0:	4611      	mov	r1, r2
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7f4 ff9f 	bl	8002706 <HAL_PCD_SetAddress>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f000 f866 	bl	800d8a0 <USBD_Get_USB_Status>
 800d7d4:	4603      	mov	r3, r0
}
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	3710      	adds	r7, #16
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800d7de:	b580      	push	{r7, lr}
 800d7e0:	b086      	sub	sp, #24
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	60f8      	str	r0, [r7, #12]
 800d7e6:	607a      	str	r2, [r7, #4]
 800d7e8:	603b      	str	r3, [r7, #0]
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d7f4:	7af9      	ldrb	r1, [r7, #11]
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	f7f5 f89d 	bl	8002938 <HAL_PCD_EP_Transmit>
 800d7fe:	4603      	mov	r3, r0
 800d800:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800d802:	7dfb      	ldrb	r3, [r7, #23]
 800d804:	4618      	mov	r0, r3
 800d806:	f000 f84b 	bl	800d8a0 <USBD_Get_USB_Status>
 800d80a:	4603      	mov	r3, r0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3718      	adds	r7, #24
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b086      	sub	sp, #24
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	607a      	str	r2, [r7, #4]
 800d81e:	603b      	str	r3, [r7, #0]
 800d820:	460b      	mov	r3, r1
 800d822:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d82a:	7af9      	ldrb	r1, [r7, #11]
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	687a      	ldr	r2, [r7, #4]
 800d830:	f7f5 f838 	bl	80028a4 <HAL_PCD_EP_Receive>
 800d834:	4603      	mov	r3, r0
 800d836:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800d838:	7dfb      	ldrb	r3, [r7, #23]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f000 f830 	bl	800d8a0 <USBD_Get_USB_Status>
 800d840:	4603      	mov	r3, r0
}
 800d842:	4618      	mov	r0, r3
 800d844:	3718      	adds	r7, #24
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d84a:	b580      	push	{r7, lr}
 800d84c:	b082      	sub	sp, #8
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
 800d852:	460b      	mov	r3, r1
 800d854:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d85c:	78fa      	ldrb	r2, [r7, #3]
 800d85e:	4611      	mov	r1, r2
 800d860:	4618      	mov	r0, r3
 800d862:	f7f5 f851 	bl	8002908 <HAL_PCD_EP_GetRxCount>
 800d866:	4603      	mov	r3, r0
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3708      	adds	r7, #8
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}

0800d870 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800d870:	b480      	push	{r7}
 800d872:	b083      	sub	sp, #12
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800d878:	4b03      	ldr	r3, [pc, #12]	@ (800d888 <USBD_static_malloc+0x18>)
}
 800d87a:	4618      	mov	r0, r3
 800d87c:	370c      	adds	r7, #12
 800d87e:	46bd      	mov	sp, r7
 800d880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d884:	4770      	bx	lr
 800d886:	bf00      	nop
 800d888:	20000d7c 	.word	0x20000d7c

0800d88c <USBD_static_free>:

void USBD_static_free(void *p)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800d894:	bf00      	nop
 800d896:	370c      	adds	r7, #12
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b085      	sub	sp, #20
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800d8ae:	79fb      	ldrb	r3, [r7, #7]
 800d8b0:	2b03      	cmp	r3, #3
 800d8b2:	d817      	bhi.n	800d8e4 <USBD_Get_USB_Status+0x44>
 800d8b4:	a201      	add	r2, pc, #4	@ (adr r2, 800d8bc <USBD_Get_USB_Status+0x1c>)
 800d8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ba:	bf00      	nop
 800d8bc:	0800d8cd 	.word	0x0800d8cd
 800d8c0:	0800d8d3 	.word	0x0800d8d3
 800d8c4:	0800d8d9 	.word	0x0800d8d9
 800d8c8:	0800d8df 	.word	0x0800d8df
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	73fb      	strb	r3, [r7, #15]
             break;
 800d8d0:	e00b      	b.n	800d8ea <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	73fb      	strb	r3, [r7, #15]
             break;
 800d8d6:	e008      	b.n	800d8ea <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800d8d8:	2301      	movs	r3, #1
 800d8da:	73fb      	strb	r3, [r7, #15]
             break;
 800d8dc:	e005      	b.n	800d8ea <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800d8de:	2303      	movs	r3, #3
 800d8e0:	73fb      	strb	r3, [r7, #15]
             break;
 800d8e2:	e002      	b.n	800d8ea <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800d8e4:	2303      	movs	r3, #3
 800d8e6:	73fb      	strb	r3, [r7, #15]
             break;
 800d8e8:	bf00      	nop
      }
      return usb_status;
 800d8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ec:	4618      	mov	r0, r3
 800d8ee:	3714      	adds	r7, #20
 800d8f0:	46bd      	mov	sp, r7
 800d8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f6:	4770      	bx	lr

0800d8f8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b086      	sub	sp, #24
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	4613      	mov	r3, r2
 800d904:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d101      	bne.n	800d910 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d90c:	2303      	movs	r3, #3
 800d90e:	e01f      	b.n	800d950 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	2200      	movs	r2, #0
 800d914:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2200      	movs	r2, #0
 800d91c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2200      	movs	r2, #0
 800d924:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d003      	beq.n	800d936 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	68ba      	ldr	r2, [r7, #8]
 800d932:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2201      	movs	r2, #1
 800d93a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	79fa      	ldrb	r2, [r7, #7]
 800d942:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d944:	68f8      	ldr	r0, [r7, #12]
 800d946:	f7ff fe4b 	bl	800d5e0 <USBD_LL_Init>
 800d94a:	4603      	mov	r3, r0
 800d94c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d94e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3718      	adds	r7, #24
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d962:	2300      	movs	r3, #0
 800d964:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d101      	bne.n	800d970 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d96c:	2303      	movs	r3, #3
 800d96e:	e025      	b.n	800d9bc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	683a      	ldr	r2, [r7, #0]
 800d974:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	32ae      	adds	r2, #174	@ 0xae
 800d982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d00f      	beq.n	800d9ac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	32ae      	adds	r2, #174	@ 0xae
 800d996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d99a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d99c:	f107 020e 	add.w	r2, r7, #14
 800d9a0:	4610      	mov	r0, r2
 800d9a2:	4798      	blx	r3
 800d9a4:	4602      	mov	r2, r0
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d9b2:	1c5a      	adds	r2, r3, #1
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d9ba:	2300      	movs	r3, #0
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3710      	adds	r7, #16
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	bd80      	pop	{r7, pc}

0800d9c4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f7ff fe41 	bl	800d654 <USBD_LL_Start>
 800d9d2:	4603      	mov	r3, r0
}
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	3708      	adds	r7, #8
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d9e4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	370c      	adds	r7, #12
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f0:	4770      	bx	lr

0800d9f2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b084      	sub	sp, #16
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d009      	beq.n	800da20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	78fa      	ldrb	r2, [r7, #3]
 800da16:	4611      	mov	r1, r2
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	4798      	blx	r3
 800da1c:	4603      	mov	r3, r0
 800da1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800da20:	7bfb      	ldrb	r3, [r7, #15]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b084      	sub	sp, #16
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
 800da32:	460b      	mov	r3, r1
 800da34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800da36:	2300      	movs	r3, #0
 800da38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da40:	685b      	ldr	r3, [r3, #4]
 800da42:	78fa      	ldrb	r2, [r7, #3]
 800da44:	4611      	mov	r1, r2
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	4798      	blx	r3
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d001      	beq.n	800da54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800da50:	2303      	movs	r3, #3
 800da52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800da54:	7bfb      	ldrb	r3, [r7, #15]
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}

0800da5e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800da5e:	b580      	push	{r7, lr}
 800da60:	b084      	sub	sp, #16
 800da62:	af00      	add	r7, sp, #0
 800da64:	6078      	str	r0, [r7, #4]
 800da66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800da6e:	6839      	ldr	r1, [r7, #0]
 800da70:	4618      	mov	r0, r3
 800da72:	f001 f846 	bl	800eb02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2201      	movs	r2, #1
 800da7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800da84:	461a      	mov	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800da92:	f003 031f 	and.w	r3, r3, #31
 800da96:	2b02      	cmp	r3, #2
 800da98:	d01a      	beq.n	800dad0 <USBD_LL_SetupStage+0x72>
 800da9a:	2b02      	cmp	r3, #2
 800da9c:	d822      	bhi.n	800dae4 <USBD_LL_SetupStage+0x86>
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d002      	beq.n	800daa8 <USBD_LL_SetupStage+0x4a>
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d00a      	beq.n	800dabc <USBD_LL_SetupStage+0x5e>
 800daa6:	e01d      	b.n	800dae4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800daae:	4619      	mov	r1, r3
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 fa9d 	bl	800dff0 <USBD_StdDevReq>
 800dab6:	4603      	mov	r3, r0
 800dab8:	73fb      	strb	r3, [r7, #15]
      break;
 800daba:	e020      	b.n	800dafe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dac2:	4619      	mov	r1, r3
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 fb05 	bl	800e0d4 <USBD_StdItfReq>
 800daca:	4603      	mov	r3, r0
 800dacc:	73fb      	strb	r3, [r7, #15]
      break;
 800dace:	e016      	b.n	800dafe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dad6:	4619      	mov	r1, r3
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f000 fb67 	bl	800e1ac <USBD_StdEPReq>
 800dade:	4603      	mov	r3, r0
 800dae0:	73fb      	strb	r3, [r7, #15]
      break;
 800dae2:	e00c      	b.n	800dafe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800daea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	4619      	mov	r1, r3
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7ff fdfc 	bl	800d6f0 <USBD_LL_StallEP>
 800daf8:	4603      	mov	r3, r0
 800dafa:	73fb      	strb	r3, [r7, #15]
      break;
 800dafc:	bf00      	nop
  }

  return ret;
 800dafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800db00:	4618      	mov	r0, r3
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b086      	sub	sp, #24
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	460b      	mov	r3, r1
 800db12:	607a      	str	r2, [r7, #4]
 800db14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800db1a:	7afb      	ldrb	r3, [r7, #11]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d16e      	bne.n	800dbfe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800db26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800db2e:	2b03      	cmp	r3, #3
 800db30:	f040 8098 	bne.w	800dc64 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	689a      	ldr	r2, [r3, #8]
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	429a      	cmp	r2, r3
 800db3e:	d913      	bls.n	800db68 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	689a      	ldr	r2, [r3, #8]
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	1ad2      	subs	r2, r2, r3
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	68da      	ldr	r2, [r3, #12]
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	689b      	ldr	r3, [r3, #8]
 800db56:	4293      	cmp	r3, r2
 800db58:	bf28      	it	cs
 800db5a:	4613      	movcs	r3, r2
 800db5c:	461a      	mov	r2, r3
 800db5e:	6879      	ldr	r1, [r7, #4]
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f001 f9cf 	bl	800ef04 <USBD_CtlContinueRx>
 800db66:	e07d      	b.n	800dc64 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800db6e:	f003 031f 	and.w	r3, r3, #31
 800db72:	2b02      	cmp	r3, #2
 800db74:	d014      	beq.n	800dba0 <USBD_LL_DataOutStage+0x98>
 800db76:	2b02      	cmp	r3, #2
 800db78:	d81d      	bhi.n	800dbb6 <USBD_LL_DataOutStage+0xae>
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d002      	beq.n	800db84 <USBD_LL_DataOutStage+0x7c>
 800db7e:	2b01      	cmp	r3, #1
 800db80:	d003      	beq.n	800db8a <USBD_LL_DataOutStage+0x82>
 800db82:	e018      	b.n	800dbb6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800db84:	2300      	movs	r3, #0
 800db86:	75bb      	strb	r3, [r7, #22]
            break;
 800db88:	e018      	b.n	800dbbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800db90:	b2db      	uxtb	r3, r3
 800db92:	4619      	mov	r1, r3
 800db94:	68f8      	ldr	r0, [r7, #12]
 800db96:	f000 f99e 	bl	800ded6 <USBD_CoreFindIF>
 800db9a:	4603      	mov	r3, r0
 800db9c:	75bb      	strb	r3, [r7, #22]
            break;
 800db9e:	e00d      	b.n	800dbbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	4619      	mov	r1, r3
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	f000 f9a0 	bl	800def0 <USBD_CoreFindEP>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	75bb      	strb	r3, [r7, #22]
            break;
 800dbb4:	e002      	b.n	800dbbc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	75bb      	strb	r3, [r7, #22]
            break;
 800dbba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dbbc:	7dbb      	ldrb	r3, [r7, #22]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d119      	bne.n	800dbf6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	2b03      	cmp	r3, #3
 800dbcc:	d113      	bne.n	800dbf6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dbce:	7dba      	ldrb	r2, [r7, #22]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	32ae      	adds	r2, #174	@ 0xae
 800dbd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00b      	beq.n	800dbf6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dbde:	7dba      	ldrb	r2, [r7, #22]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dbe6:	7dba      	ldrb	r2, [r7, #22]
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	32ae      	adds	r2, #174	@ 0xae
 800dbec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbf0:	691b      	ldr	r3, [r3, #16]
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	f001 f995 	bl	800ef26 <USBD_CtlSendStatus>
 800dbfc:	e032      	b.n	800dc64 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dbfe:	7afb      	ldrb	r3, [r7, #11]
 800dc00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc04:	b2db      	uxtb	r3, r3
 800dc06:	4619      	mov	r1, r3
 800dc08:	68f8      	ldr	r0, [r7, #12]
 800dc0a:	f000 f971 	bl	800def0 <USBD_CoreFindEP>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc12:	7dbb      	ldrb	r3, [r7, #22]
 800dc14:	2bff      	cmp	r3, #255	@ 0xff
 800dc16:	d025      	beq.n	800dc64 <USBD_LL_DataOutStage+0x15c>
 800dc18:	7dbb      	ldrb	r3, [r7, #22]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d122      	bne.n	800dc64 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	2b03      	cmp	r3, #3
 800dc28:	d117      	bne.n	800dc5a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dc2a:	7dba      	ldrb	r2, [r7, #22]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	32ae      	adds	r2, #174	@ 0xae
 800dc30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc34:	699b      	ldr	r3, [r3, #24]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00f      	beq.n	800dc5a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800dc3a:	7dba      	ldrb	r2, [r7, #22]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800dc42:	7dba      	ldrb	r2, [r7, #22]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	32ae      	adds	r2, #174	@ 0xae
 800dc48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc4c:	699b      	ldr	r3, [r3, #24]
 800dc4e:	7afa      	ldrb	r2, [r7, #11]
 800dc50:	4611      	mov	r1, r2
 800dc52:	68f8      	ldr	r0, [r7, #12]
 800dc54:	4798      	blx	r3
 800dc56:	4603      	mov	r3, r0
 800dc58:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800dc5a:	7dfb      	ldrb	r3, [r7, #23]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d001      	beq.n	800dc64 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800dc60:	7dfb      	ldrb	r3, [r7, #23]
 800dc62:	e000      	b.n	800dc66 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3718      	adds	r7, #24
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b086      	sub	sp, #24
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	60f8      	str	r0, [r7, #12]
 800dc76:	460b      	mov	r3, r1
 800dc78:	607a      	str	r2, [r7, #4]
 800dc7a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800dc7c:	7afb      	ldrb	r3, [r7, #11]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d16f      	bne.n	800dd62 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	3314      	adds	r3, #20
 800dc86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dc8e:	2b02      	cmp	r3, #2
 800dc90:	d15a      	bne.n	800dd48 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	689a      	ldr	r2, [r3, #8]
 800dc96:	693b      	ldr	r3, [r7, #16]
 800dc98:	68db      	ldr	r3, [r3, #12]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d914      	bls.n	800dcc8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dc9e:	693b      	ldr	r3, [r7, #16]
 800dca0:	689a      	ldr	r2, [r3, #8]
 800dca2:	693b      	ldr	r3, [r7, #16]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	1ad2      	subs	r2, r2, r3
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800dcac:	693b      	ldr	r3, [r7, #16]
 800dcae:	689b      	ldr	r3, [r3, #8]
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	6879      	ldr	r1, [r7, #4]
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f001 f8f7 	bl	800eea8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dcba:	2300      	movs	r3, #0
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	68f8      	ldr	r0, [r7, #12]
 800dcc2:	f7ff fda7 	bl	800d814 <USBD_LL_PrepareReceive>
 800dcc6:	e03f      	b.n	800dd48 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dcc8:	693b      	ldr	r3, [r7, #16]
 800dcca:	68da      	ldr	r2, [r3, #12]
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	429a      	cmp	r2, r3
 800dcd2:	d11c      	bne.n	800dd0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	685a      	ldr	r2, [r3, #4]
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d316      	bcc.n	800dd0e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800dce0:	693b      	ldr	r3, [r7, #16]
 800dce2:	685a      	ldr	r2, [r3, #4]
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d20f      	bcs.n	800dd0e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dcee:	2200      	movs	r2, #0
 800dcf0:	2100      	movs	r1, #0
 800dcf2:	68f8      	ldr	r0, [r7, #12]
 800dcf4:	f001 f8d8 	bl	800eea8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd00:	2300      	movs	r3, #0
 800dd02:	2200      	movs	r2, #0
 800dd04:	2100      	movs	r1, #0
 800dd06:	68f8      	ldr	r0, [r7, #12]
 800dd08:	f7ff fd84 	bl	800d814 <USBD_LL_PrepareReceive>
 800dd0c:	e01c      	b.n	800dd48 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	2b03      	cmp	r3, #3
 800dd18:	d10f      	bne.n	800dd3a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd20:	68db      	ldr	r3, [r3, #12]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d009      	beq.n	800dd3a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	2200      	movs	r2, #0
 800dd2a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	68f8      	ldr	r0, [r7, #12]
 800dd38:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd3a:	2180      	movs	r1, #128	@ 0x80
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f7ff fcd7 	bl	800d6f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	f001 f902 	bl	800ef4c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d03a      	beq.n	800ddc8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dd52:	68f8      	ldr	r0, [r7, #12]
 800dd54:	f7ff fe42 	bl	800d9dc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800dd60:	e032      	b.n	800ddc8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800dd62:	7afb      	ldrb	r3, [r7, #11]
 800dd64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	4619      	mov	r1, r3
 800dd6c:	68f8      	ldr	r0, [r7, #12]
 800dd6e:	f000 f8bf 	bl	800def0 <USBD_CoreFindEP>
 800dd72:	4603      	mov	r3, r0
 800dd74:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd76:	7dfb      	ldrb	r3, [r7, #23]
 800dd78:	2bff      	cmp	r3, #255	@ 0xff
 800dd7a:	d025      	beq.n	800ddc8 <USBD_LL_DataInStage+0x15a>
 800dd7c:	7dfb      	ldrb	r3, [r7, #23]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d122      	bne.n	800ddc8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd88:	b2db      	uxtb	r3, r3
 800dd8a:	2b03      	cmp	r3, #3
 800dd8c:	d11c      	bne.n	800ddc8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800dd8e:	7dfa      	ldrb	r2, [r7, #23]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	32ae      	adds	r2, #174	@ 0xae
 800dd94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd98:	695b      	ldr	r3, [r3, #20]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d014      	beq.n	800ddc8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800dd9e:	7dfa      	ldrb	r2, [r7, #23]
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800dda6:	7dfa      	ldrb	r2, [r7, #23]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	32ae      	adds	r2, #174	@ 0xae
 800ddac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddb0:	695b      	ldr	r3, [r3, #20]
 800ddb2:	7afa      	ldrb	r2, [r7, #11]
 800ddb4:	4611      	mov	r1, r2
 800ddb6:	68f8      	ldr	r0, [r7, #12]
 800ddb8:	4798      	blx	r3
 800ddba:	4603      	mov	r3, r0
 800ddbc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ddbe:	7dbb      	ldrb	r3, [r7, #22]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d001      	beq.n	800ddc8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ddc4:	7dbb      	ldrb	r3, [r7, #22]
 800ddc6:	e000      	b.n	800ddca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ddc8:	2300      	movs	r3, #0
}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3718      	adds	r7, #24
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b084      	sub	sp, #16
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ddda:	2300      	movs	r3, #0
 800dddc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2201      	movs	r2, #1
 800dde2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2200      	movs	r2, #0
 800de00:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d014      	beq.n	800de38 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d00e      	beq.n	800de38 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	6852      	ldr	r2, [r2, #4]
 800de26:	b2d2      	uxtb	r2, r2
 800de28:	4611      	mov	r1, r2
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	4798      	blx	r3
 800de2e:	4603      	mov	r3, r0
 800de30:	2b00      	cmp	r3, #0
 800de32:	d001      	beq.n	800de38 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800de34:	2303      	movs	r3, #3
 800de36:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de38:	2340      	movs	r3, #64	@ 0x40
 800de3a:	2200      	movs	r2, #0
 800de3c:	2100      	movs	r1, #0
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f7ff fc1d 	bl	800d67e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2201      	movs	r2, #1
 800de48:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2240      	movs	r2, #64	@ 0x40
 800de50:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800de54:	2340      	movs	r3, #64	@ 0x40
 800de56:	2200      	movs	r2, #0
 800de58:	2180      	movs	r1, #128	@ 0x80
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7ff fc0f 	bl	800d67e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2201      	movs	r2, #1
 800de64:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2240      	movs	r2, #64	@ 0x40
 800de6a:	621a      	str	r2, [r3, #32]

  return ret;
 800de6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3710      	adds	r7, #16
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}

0800de76 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800de76:	b480      	push	{r7}
 800de78:	b083      	sub	sp, #12
 800de7a:	af00      	add	r7, sp, #0
 800de7c:	6078      	str	r0, [r7, #4]
 800de7e:	460b      	mov	r3, r1
 800de80:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	78fa      	ldrb	r2, [r7, #3]
 800de86:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800de88:	2300      	movs	r3, #0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	370c      	adds	r7, #12
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr

0800de96 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800de96:	b580      	push	{r7, lr}
 800de98:	b082      	sub	sp, #8
 800de9a:	af00      	add	r7, sp, #0
 800de9c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	2b03      	cmp	r3, #3
 800dea8:	d110      	bne.n	800decc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00b      	beq.n	800decc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800deba:	69db      	ldr	r3, [r3, #28]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d005      	beq.n	800decc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dec6:	69db      	ldr	r3, [r3, #28]
 800dec8:	6878      	ldr	r0, [r7, #4]
 800deca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	3708      	adds	r7, #8
 800ded2:	46bd      	mov	sp, r7
 800ded4:	bd80      	pop	{r7, pc}

0800ded6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ded6:	b480      	push	{r7}
 800ded8:	b083      	sub	sp, #12
 800deda:	af00      	add	r7, sp, #0
 800dedc:	6078      	str	r0, [r7, #4]
 800dede:	460b      	mov	r3, r1
 800dee0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dee2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	370c      	adds	r7, #12
 800dee8:	46bd      	mov	sp, r7
 800deea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deee:	4770      	bx	lr

0800def0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800def0:	b480      	push	{r7}
 800def2:	b083      	sub	sp, #12
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	460b      	mov	r3, r1
 800defa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800defc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800defe:	4618      	mov	r0, r3
 800df00:	370c      	adds	r7, #12
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr

0800df0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800df0a:	b580      	push	{r7, lr}
 800df0c:	b086      	sub	sp, #24
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
 800df12:	460b      	mov	r3, r1
 800df14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800df1e:	2300      	movs	r3, #0
 800df20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	885b      	ldrh	r3, [r3, #2]
 800df26:	b29b      	uxth	r3, r3
 800df28:	68fa      	ldr	r2, [r7, #12]
 800df2a:	7812      	ldrb	r2, [r2, #0]
 800df2c:	4293      	cmp	r3, r2
 800df2e:	d91f      	bls.n	800df70 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	781b      	ldrb	r3, [r3, #0]
 800df34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800df36:	e013      	b.n	800df60 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800df38:	f107 030a 	add.w	r3, r7, #10
 800df3c:	4619      	mov	r1, r3
 800df3e:	6978      	ldr	r0, [r7, #20]
 800df40:	f000 f81b 	bl	800df7a <USBD_GetNextDesc>
 800df44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	785b      	ldrb	r3, [r3, #1]
 800df4a:	2b05      	cmp	r3, #5
 800df4c:	d108      	bne.n	800df60 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	789b      	ldrb	r3, [r3, #2]
 800df56:	78fa      	ldrb	r2, [r7, #3]
 800df58:	429a      	cmp	r2, r3
 800df5a:	d008      	beq.n	800df6e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800df5c:	2300      	movs	r3, #0
 800df5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	885b      	ldrh	r3, [r3, #2]
 800df64:	b29a      	uxth	r2, r3
 800df66:	897b      	ldrh	r3, [r7, #10]
 800df68:	429a      	cmp	r2, r3
 800df6a:	d8e5      	bhi.n	800df38 <USBD_GetEpDesc+0x2e>
 800df6c:	e000      	b.n	800df70 <USBD_GetEpDesc+0x66>
          break;
 800df6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800df70:	693b      	ldr	r3, [r7, #16]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3718      	adds	r7, #24
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}

0800df7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800df7a:	b480      	push	{r7}
 800df7c:	b085      	sub	sp, #20
 800df7e:	af00      	add	r7, sp, #0
 800df80:	6078      	str	r0, [r7, #4]
 800df82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	881b      	ldrh	r3, [r3, #0]
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	7812      	ldrb	r2, [r2, #0]
 800df90:	4413      	add	r3, r2
 800df92:	b29a      	uxth	r2, r3
 800df94:	683b      	ldr	r3, [r7, #0]
 800df96:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	461a      	mov	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3714      	adds	r7, #20
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb0:	4770      	bx	lr

0800dfb2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dfb2:	b480      	push	{r7}
 800dfb4:	b087      	sub	sp, #28
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	781b      	ldrb	r3, [r3, #0]
 800dfc2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dfc4:	697b      	ldr	r3, [r7, #20]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dfd0:	8a3b      	ldrh	r3, [r7, #16]
 800dfd2:	021b      	lsls	r3, r3, #8
 800dfd4:	b21a      	sxth	r2, r3
 800dfd6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	b21b      	sxth	r3, r3
 800dfde:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dfe0:	89fb      	ldrh	r3, [r7, #14]
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	371c      	adds	r7, #28
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfec:	4770      	bx	lr
	...

0800dff0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b084      	sub	sp, #16
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dffa:	2300      	movs	r3, #0
 800dffc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e006:	2b40      	cmp	r3, #64	@ 0x40
 800e008:	d005      	beq.n	800e016 <USBD_StdDevReq+0x26>
 800e00a:	2b40      	cmp	r3, #64	@ 0x40
 800e00c:	d857      	bhi.n	800e0be <USBD_StdDevReq+0xce>
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d00f      	beq.n	800e032 <USBD_StdDevReq+0x42>
 800e012:	2b20      	cmp	r3, #32
 800e014:	d153      	bne.n	800e0be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	32ae      	adds	r2, #174	@ 0xae
 800e020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e024:	689b      	ldr	r3, [r3, #8]
 800e026:	6839      	ldr	r1, [r7, #0]
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	4798      	blx	r3
 800e02c:	4603      	mov	r3, r0
 800e02e:	73fb      	strb	r3, [r7, #15]
      break;
 800e030:	e04a      	b.n	800e0c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	785b      	ldrb	r3, [r3, #1]
 800e036:	2b09      	cmp	r3, #9
 800e038:	d83b      	bhi.n	800e0b2 <USBD_StdDevReq+0xc2>
 800e03a:	a201      	add	r2, pc, #4	@ (adr r2, 800e040 <USBD_StdDevReq+0x50>)
 800e03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e040:	0800e095 	.word	0x0800e095
 800e044:	0800e0a9 	.word	0x0800e0a9
 800e048:	0800e0b3 	.word	0x0800e0b3
 800e04c:	0800e09f 	.word	0x0800e09f
 800e050:	0800e0b3 	.word	0x0800e0b3
 800e054:	0800e073 	.word	0x0800e073
 800e058:	0800e069 	.word	0x0800e069
 800e05c:	0800e0b3 	.word	0x0800e0b3
 800e060:	0800e08b 	.word	0x0800e08b
 800e064:	0800e07d 	.word	0x0800e07d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e068:	6839      	ldr	r1, [r7, #0]
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 fa3c 	bl	800e4e8 <USBD_GetDescriptor>
          break;
 800e070:	e024      	b.n	800e0bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e072:	6839      	ldr	r1, [r7, #0]
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 fba1 	bl	800e7bc <USBD_SetAddress>
          break;
 800e07a:	e01f      	b.n	800e0bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e07c:	6839      	ldr	r1, [r7, #0]
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 fbe0 	bl	800e844 <USBD_SetConfig>
 800e084:	4603      	mov	r3, r0
 800e086:	73fb      	strb	r3, [r7, #15]
          break;
 800e088:	e018      	b.n	800e0bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e08a:	6839      	ldr	r1, [r7, #0]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 fc83 	bl	800e998 <USBD_GetConfig>
          break;
 800e092:	e013      	b.n	800e0bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e094:	6839      	ldr	r1, [r7, #0]
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 fcb4 	bl	800ea04 <USBD_GetStatus>
          break;
 800e09c:	e00e      	b.n	800e0bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e09e:	6839      	ldr	r1, [r7, #0]
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f000 fce3 	bl	800ea6c <USBD_SetFeature>
          break;
 800e0a6:	e009      	b.n	800e0bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e0a8:	6839      	ldr	r1, [r7, #0]
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 fd07 	bl	800eabe <USBD_ClrFeature>
          break;
 800e0b0:	e004      	b.n	800e0bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e0b2:	6839      	ldr	r1, [r7, #0]
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 fd5e 	bl	800eb76 <USBD_CtlError>
          break;
 800e0ba:	bf00      	nop
      }
      break;
 800e0bc:	e004      	b.n	800e0c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e0be:	6839      	ldr	r1, [r7, #0]
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 fd58 	bl	800eb76 <USBD_CtlError>
      break;
 800e0c6:	bf00      	nop
  }

  return ret;
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	3710      	adds	r7, #16
 800e0ce:	46bd      	mov	sp, r7
 800e0d0:	bd80      	pop	{r7, pc}
 800e0d2:	bf00      	nop

0800e0d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
 800e0dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e0ea:	2b40      	cmp	r3, #64	@ 0x40
 800e0ec:	d005      	beq.n	800e0fa <USBD_StdItfReq+0x26>
 800e0ee:	2b40      	cmp	r3, #64	@ 0x40
 800e0f0:	d852      	bhi.n	800e198 <USBD_StdItfReq+0xc4>
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <USBD_StdItfReq+0x26>
 800e0f6:	2b20      	cmp	r3, #32
 800e0f8:	d14e      	bne.n	800e198 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e100:	b2db      	uxtb	r3, r3
 800e102:	3b01      	subs	r3, #1
 800e104:	2b02      	cmp	r3, #2
 800e106:	d840      	bhi.n	800e18a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	889b      	ldrh	r3, [r3, #4]
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	2b01      	cmp	r3, #1
 800e110:	d836      	bhi.n	800e180 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	889b      	ldrh	r3, [r3, #4]
 800e116:	b2db      	uxtb	r3, r3
 800e118:	4619      	mov	r1, r3
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f7ff fedb 	bl	800ded6 <USBD_CoreFindIF>
 800e120:	4603      	mov	r3, r0
 800e122:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e124:	7bbb      	ldrb	r3, [r7, #14]
 800e126:	2bff      	cmp	r3, #255	@ 0xff
 800e128:	d01d      	beq.n	800e166 <USBD_StdItfReq+0x92>
 800e12a:	7bbb      	ldrb	r3, [r7, #14]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d11a      	bne.n	800e166 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e130:	7bba      	ldrb	r2, [r7, #14]
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	32ae      	adds	r2, #174	@ 0xae
 800e136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e13a:	689b      	ldr	r3, [r3, #8]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d00f      	beq.n	800e160 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e140:	7bba      	ldrb	r2, [r7, #14]
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e148:	7bba      	ldrb	r2, [r7, #14]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	32ae      	adds	r2, #174	@ 0xae
 800e14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	6839      	ldr	r1, [r7, #0]
 800e156:	6878      	ldr	r0, [r7, #4]
 800e158:	4798      	blx	r3
 800e15a:	4603      	mov	r3, r0
 800e15c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e15e:	e004      	b.n	800e16a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e160:	2303      	movs	r3, #3
 800e162:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e164:	e001      	b.n	800e16a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e166:	2303      	movs	r3, #3
 800e168:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	88db      	ldrh	r3, [r3, #6]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d110      	bne.n	800e194 <USBD_StdItfReq+0xc0>
 800e172:	7bfb      	ldrb	r3, [r7, #15]
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10d      	bne.n	800e194 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f000 fed4 	bl	800ef26 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e17e:	e009      	b.n	800e194 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e180:	6839      	ldr	r1, [r7, #0]
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 fcf7 	bl	800eb76 <USBD_CtlError>
          break;
 800e188:	e004      	b.n	800e194 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e18a:	6839      	ldr	r1, [r7, #0]
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f000 fcf2 	bl	800eb76 <USBD_CtlError>
          break;
 800e192:	e000      	b.n	800e196 <USBD_StdItfReq+0xc2>
          break;
 800e194:	bf00      	nop
      }
      break;
 800e196:	e004      	b.n	800e1a2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e198:	6839      	ldr	r1, [r7, #0]
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f000 fceb 	bl	800eb76 <USBD_CtlError>
      break;
 800e1a0:	bf00      	nop
  }

  return ret;
 800e1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	3710      	adds	r7, #16
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b084      	sub	sp, #16
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	889b      	ldrh	r3, [r3, #4]
 800e1be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e1c8:	2b40      	cmp	r3, #64	@ 0x40
 800e1ca:	d007      	beq.n	800e1dc <USBD_StdEPReq+0x30>
 800e1cc:	2b40      	cmp	r3, #64	@ 0x40
 800e1ce:	f200 817f 	bhi.w	800e4d0 <USBD_StdEPReq+0x324>
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d02a      	beq.n	800e22c <USBD_StdEPReq+0x80>
 800e1d6:	2b20      	cmp	r3, #32
 800e1d8:	f040 817a 	bne.w	800e4d0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e1dc:	7bbb      	ldrb	r3, [r7, #14]
 800e1de:	4619      	mov	r1, r3
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f7ff fe85 	bl	800def0 <USBD_CoreFindEP>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e1ea:	7b7b      	ldrb	r3, [r7, #13]
 800e1ec:	2bff      	cmp	r3, #255	@ 0xff
 800e1ee:	f000 8174 	beq.w	800e4da <USBD_StdEPReq+0x32e>
 800e1f2:	7b7b      	ldrb	r3, [r7, #13]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	f040 8170 	bne.w	800e4da <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e1fa:	7b7a      	ldrb	r2, [r7, #13]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e202:	7b7a      	ldrb	r2, [r7, #13]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	32ae      	adds	r2, #174	@ 0xae
 800e208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e20c:	689b      	ldr	r3, [r3, #8]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	f000 8163 	beq.w	800e4da <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e214:	7b7a      	ldrb	r2, [r7, #13]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	32ae      	adds	r2, #174	@ 0xae
 800e21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e21e:	689b      	ldr	r3, [r3, #8]
 800e220:	6839      	ldr	r1, [r7, #0]
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	4798      	blx	r3
 800e226:	4603      	mov	r3, r0
 800e228:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e22a:	e156      	b.n	800e4da <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e22c:	683b      	ldr	r3, [r7, #0]
 800e22e:	785b      	ldrb	r3, [r3, #1]
 800e230:	2b03      	cmp	r3, #3
 800e232:	d008      	beq.n	800e246 <USBD_StdEPReq+0x9a>
 800e234:	2b03      	cmp	r3, #3
 800e236:	f300 8145 	bgt.w	800e4c4 <USBD_StdEPReq+0x318>
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	f000 809b 	beq.w	800e376 <USBD_StdEPReq+0x1ca>
 800e240:	2b01      	cmp	r3, #1
 800e242:	d03c      	beq.n	800e2be <USBD_StdEPReq+0x112>
 800e244:	e13e      	b.n	800e4c4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	2b02      	cmp	r3, #2
 800e250:	d002      	beq.n	800e258 <USBD_StdEPReq+0xac>
 800e252:	2b03      	cmp	r3, #3
 800e254:	d016      	beq.n	800e284 <USBD_StdEPReq+0xd8>
 800e256:	e02c      	b.n	800e2b2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e258:	7bbb      	ldrb	r3, [r7, #14]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00d      	beq.n	800e27a <USBD_StdEPReq+0xce>
 800e25e:	7bbb      	ldrb	r3, [r7, #14]
 800e260:	2b80      	cmp	r3, #128	@ 0x80
 800e262:	d00a      	beq.n	800e27a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e264:	7bbb      	ldrb	r3, [r7, #14]
 800e266:	4619      	mov	r1, r3
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f7ff fa41 	bl	800d6f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e26e:	2180      	movs	r1, #128	@ 0x80
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f7ff fa3d 	bl	800d6f0 <USBD_LL_StallEP>
 800e276:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e278:	e020      	b.n	800e2bc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e27a:	6839      	ldr	r1, [r7, #0]
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f000 fc7a 	bl	800eb76 <USBD_CtlError>
              break;
 800e282:	e01b      	b.n	800e2bc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	885b      	ldrh	r3, [r3, #2]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d10e      	bne.n	800e2aa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e28c:	7bbb      	ldrb	r3, [r7, #14]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d00b      	beq.n	800e2aa <USBD_StdEPReq+0xfe>
 800e292:	7bbb      	ldrb	r3, [r7, #14]
 800e294:	2b80      	cmp	r3, #128	@ 0x80
 800e296:	d008      	beq.n	800e2aa <USBD_StdEPReq+0xfe>
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	88db      	ldrh	r3, [r3, #6]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d104      	bne.n	800e2aa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2a0:	7bbb      	ldrb	r3, [r7, #14]
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f7ff fa23 	bl	800d6f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 fe3b 	bl	800ef26 <USBD_CtlSendStatus>

              break;
 800e2b0:	e004      	b.n	800e2bc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e2b2:	6839      	ldr	r1, [r7, #0]
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f000 fc5e 	bl	800eb76 <USBD_CtlError>
              break;
 800e2ba:	bf00      	nop
          }
          break;
 800e2bc:	e107      	b.n	800e4ce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	2b02      	cmp	r3, #2
 800e2c8:	d002      	beq.n	800e2d0 <USBD_StdEPReq+0x124>
 800e2ca:	2b03      	cmp	r3, #3
 800e2cc:	d016      	beq.n	800e2fc <USBD_StdEPReq+0x150>
 800e2ce:	e04b      	b.n	800e368 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2d0:	7bbb      	ldrb	r3, [r7, #14]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00d      	beq.n	800e2f2 <USBD_StdEPReq+0x146>
 800e2d6:	7bbb      	ldrb	r3, [r7, #14]
 800e2d8:	2b80      	cmp	r3, #128	@ 0x80
 800e2da:	d00a      	beq.n	800e2f2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e2dc:	7bbb      	ldrb	r3, [r7, #14]
 800e2de:	4619      	mov	r1, r3
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7ff fa05 	bl	800d6f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e2e6:	2180      	movs	r1, #128	@ 0x80
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f7ff fa01 	bl	800d6f0 <USBD_LL_StallEP>
 800e2ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e2f0:	e040      	b.n	800e374 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e2f2:	6839      	ldr	r1, [r7, #0]
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f000 fc3e 	bl	800eb76 <USBD_CtlError>
              break;
 800e2fa:	e03b      	b.n	800e374 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	885b      	ldrh	r3, [r3, #2]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d136      	bne.n	800e372 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e304:	7bbb      	ldrb	r3, [r7, #14]
 800e306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d004      	beq.n	800e318 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e30e:	7bbb      	ldrb	r3, [r7, #14]
 800e310:	4619      	mov	r1, r3
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f7ff fa05 	bl	800d722 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e318:	6878      	ldr	r0, [r7, #4]
 800e31a:	f000 fe04 	bl	800ef26 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e31e:	7bbb      	ldrb	r3, [r7, #14]
 800e320:	4619      	mov	r1, r3
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f7ff fde4 	bl	800def0 <USBD_CoreFindEP>
 800e328:	4603      	mov	r3, r0
 800e32a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e32c:	7b7b      	ldrb	r3, [r7, #13]
 800e32e:	2bff      	cmp	r3, #255	@ 0xff
 800e330:	d01f      	beq.n	800e372 <USBD_StdEPReq+0x1c6>
 800e332:	7b7b      	ldrb	r3, [r7, #13]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d11c      	bne.n	800e372 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e338:	7b7a      	ldrb	r2, [r7, #13]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e340:	7b7a      	ldrb	r2, [r7, #13]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	32ae      	adds	r2, #174	@ 0xae
 800e346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e34a:	689b      	ldr	r3, [r3, #8]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d010      	beq.n	800e372 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e350:	7b7a      	ldrb	r2, [r7, #13]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	32ae      	adds	r2, #174	@ 0xae
 800e356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e35a:	689b      	ldr	r3, [r3, #8]
 800e35c:	6839      	ldr	r1, [r7, #0]
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	4798      	blx	r3
 800e362:	4603      	mov	r3, r0
 800e364:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e366:	e004      	b.n	800e372 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e368:	6839      	ldr	r1, [r7, #0]
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fc03 	bl	800eb76 <USBD_CtlError>
              break;
 800e370:	e000      	b.n	800e374 <USBD_StdEPReq+0x1c8>
              break;
 800e372:	bf00      	nop
          }
          break;
 800e374:	e0ab      	b.n	800e4ce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e37c:	b2db      	uxtb	r3, r3
 800e37e:	2b02      	cmp	r3, #2
 800e380:	d002      	beq.n	800e388 <USBD_StdEPReq+0x1dc>
 800e382:	2b03      	cmp	r3, #3
 800e384:	d032      	beq.n	800e3ec <USBD_StdEPReq+0x240>
 800e386:	e097      	b.n	800e4b8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e388:	7bbb      	ldrb	r3, [r7, #14]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d007      	beq.n	800e39e <USBD_StdEPReq+0x1f2>
 800e38e:	7bbb      	ldrb	r3, [r7, #14]
 800e390:	2b80      	cmp	r3, #128	@ 0x80
 800e392:	d004      	beq.n	800e39e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 fbed 	bl	800eb76 <USBD_CtlError>
                break;
 800e39c:	e091      	b.n	800e4c2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e39e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	da0b      	bge.n	800e3be <USBD_StdEPReq+0x212>
 800e3a6:	7bbb      	ldrb	r3, [r7, #14]
 800e3a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	3310      	adds	r3, #16
 800e3b6:	687a      	ldr	r2, [r7, #4]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	3304      	adds	r3, #4
 800e3bc:	e00b      	b.n	800e3d6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e3be:	7bbb      	ldrb	r3, [r7, #14]
 800e3c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3c4:	4613      	mov	r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	4413      	add	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	4413      	add	r3, r2
 800e3d4:	3304      	adds	r3, #4
 800e3d6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e3d8:	68bb      	ldr	r3, [r7, #8]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	2202      	movs	r2, #2
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 fd44 	bl	800ee72 <USBD_CtlSendData>
              break;
 800e3ea:	e06a      	b.n	800e4c2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e3ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	da11      	bge.n	800e418 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e3f4:	7bbb      	ldrb	r3, [r7, #14]
 800e3f6:	f003 020f 	and.w	r2, r3, #15
 800e3fa:	6879      	ldr	r1, [r7, #4]
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	009b      	lsls	r3, r3, #2
 800e400:	4413      	add	r3, r2
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	440b      	add	r3, r1
 800e406:	3324      	adds	r3, #36	@ 0x24
 800e408:	881b      	ldrh	r3, [r3, #0]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d117      	bne.n	800e43e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e40e:	6839      	ldr	r1, [r7, #0]
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 fbb0 	bl	800eb76 <USBD_CtlError>
                  break;
 800e416:	e054      	b.n	800e4c2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e418:	7bbb      	ldrb	r3, [r7, #14]
 800e41a:	f003 020f 	and.w	r2, r3, #15
 800e41e:	6879      	ldr	r1, [r7, #4]
 800e420:	4613      	mov	r3, r2
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	4413      	add	r3, r2
 800e426:	009b      	lsls	r3, r3, #2
 800e428:	440b      	add	r3, r1
 800e42a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e42e:	881b      	ldrh	r3, [r3, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d104      	bne.n	800e43e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e434:	6839      	ldr	r1, [r7, #0]
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 fb9d 	bl	800eb76 <USBD_CtlError>
                  break;
 800e43c:	e041      	b.n	800e4c2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e43e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e442:	2b00      	cmp	r3, #0
 800e444:	da0b      	bge.n	800e45e <USBD_StdEPReq+0x2b2>
 800e446:	7bbb      	ldrb	r3, [r7, #14]
 800e448:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e44c:	4613      	mov	r3, r2
 800e44e:	009b      	lsls	r3, r3, #2
 800e450:	4413      	add	r3, r2
 800e452:	009b      	lsls	r3, r3, #2
 800e454:	3310      	adds	r3, #16
 800e456:	687a      	ldr	r2, [r7, #4]
 800e458:	4413      	add	r3, r2
 800e45a:	3304      	adds	r3, #4
 800e45c:	e00b      	b.n	800e476 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e45e:	7bbb      	ldrb	r3, [r7, #14]
 800e460:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e464:	4613      	mov	r3, r2
 800e466:	009b      	lsls	r3, r3, #2
 800e468:	4413      	add	r3, r2
 800e46a:	009b      	lsls	r3, r3, #2
 800e46c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	4413      	add	r3, r2
 800e474:	3304      	adds	r3, #4
 800e476:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e478:	7bbb      	ldrb	r3, [r7, #14]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d002      	beq.n	800e484 <USBD_StdEPReq+0x2d8>
 800e47e:	7bbb      	ldrb	r3, [r7, #14]
 800e480:	2b80      	cmp	r3, #128	@ 0x80
 800e482:	d103      	bne.n	800e48c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	2200      	movs	r2, #0
 800e488:	601a      	str	r2, [r3, #0]
 800e48a:	e00e      	b.n	800e4aa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e48c:	7bbb      	ldrb	r3, [r7, #14]
 800e48e:	4619      	mov	r1, r3
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f7ff f95f 	bl	800d754 <USBD_LL_IsStallEP>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d003      	beq.n	800e4a4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	601a      	str	r2, [r3, #0]
 800e4a2:	e002      	b.n	800e4aa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	2202      	movs	r2, #2
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	6878      	ldr	r0, [r7, #4]
 800e4b2:	f000 fcde 	bl	800ee72 <USBD_CtlSendData>
              break;
 800e4b6:	e004      	b.n	800e4c2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e4b8:	6839      	ldr	r1, [r7, #0]
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 fb5b 	bl	800eb76 <USBD_CtlError>
              break;
 800e4c0:	bf00      	nop
          }
          break;
 800e4c2:	e004      	b.n	800e4ce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e4c4:	6839      	ldr	r1, [r7, #0]
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 fb55 	bl	800eb76 <USBD_CtlError>
          break;
 800e4cc:	bf00      	nop
      }
      break;
 800e4ce:	e005      	b.n	800e4dc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e4d0:	6839      	ldr	r1, [r7, #0]
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 fb4f 	bl	800eb76 <USBD_CtlError>
      break;
 800e4d8:	e000      	b.n	800e4dc <USBD_StdEPReq+0x330>
      break;
 800e4da:	bf00      	nop
  }

  return ret;
 800e4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3710      	adds	r7, #16
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
	...

0800e4e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	885b      	ldrh	r3, [r3, #2]
 800e502:	0a1b      	lsrs	r3, r3, #8
 800e504:	b29b      	uxth	r3, r3
 800e506:	3b01      	subs	r3, #1
 800e508:	2b06      	cmp	r3, #6
 800e50a:	f200 8128 	bhi.w	800e75e <USBD_GetDescriptor+0x276>
 800e50e:	a201      	add	r2, pc, #4	@ (adr r2, 800e514 <USBD_GetDescriptor+0x2c>)
 800e510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e514:	0800e531 	.word	0x0800e531
 800e518:	0800e549 	.word	0x0800e549
 800e51c:	0800e589 	.word	0x0800e589
 800e520:	0800e75f 	.word	0x0800e75f
 800e524:	0800e75f 	.word	0x0800e75f
 800e528:	0800e6ff 	.word	0x0800e6ff
 800e52c:	0800e72b 	.word	0x0800e72b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	7c12      	ldrb	r2, [r2, #16]
 800e53c:	f107 0108 	add.w	r1, r7, #8
 800e540:	4610      	mov	r0, r2
 800e542:	4798      	blx	r3
 800e544:	60f8      	str	r0, [r7, #12]
      break;
 800e546:	e112      	b.n	800e76e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	7c1b      	ldrb	r3, [r3, #16]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d10d      	bne.n	800e56c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e558:	f107 0208 	add.w	r2, r7, #8
 800e55c:	4610      	mov	r0, r2
 800e55e:	4798      	blx	r3
 800e560:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	3301      	adds	r3, #1
 800e566:	2202      	movs	r2, #2
 800e568:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e56a:	e100      	b.n	800e76e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e574:	f107 0208 	add.w	r2, r7, #8
 800e578:	4610      	mov	r0, r2
 800e57a:	4798      	blx	r3
 800e57c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	3301      	adds	r3, #1
 800e582:	2202      	movs	r2, #2
 800e584:	701a      	strb	r2, [r3, #0]
      break;
 800e586:	e0f2      	b.n	800e76e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	885b      	ldrh	r3, [r3, #2]
 800e58c:	b2db      	uxtb	r3, r3
 800e58e:	2b05      	cmp	r3, #5
 800e590:	f200 80ac 	bhi.w	800e6ec <USBD_GetDescriptor+0x204>
 800e594:	a201      	add	r2, pc, #4	@ (adr r2, 800e59c <USBD_GetDescriptor+0xb4>)
 800e596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e59a:	bf00      	nop
 800e59c:	0800e5b5 	.word	0x0800e5b5
 800e5a0:	0800e5e9 	.word	0x0800e5e9
 800e5a4:	0800e61d 	.word	0x0800e61d
 800e5a8:	0800e651 	.word	0x0800e651
 800e5ac:	0800e685 	.word	0x0800e685
 800e5b0:	0800e6b9 	.word	0x0800e6b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5ba:	685b      	ldr	r3, [r3, #4]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d00b      	beq.n	800e5d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	7c12      	ldrb	r2, [r2, #16]
 800e5cc:	f107 0108 	add.w	r1, r7, #8
 800e5d0:	4610      	mov	r0, r2
 800e5d2:	4798      	blx	r3
 800e5d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5d6:	e091      	b.n	800e6fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e5d8:	6839      	ldr	r1, [r7, #0]
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 facb 	bl	800eb76 <USBD_CtlError>
            err++;
 800e5e0:	7afb      	ldrb	r3, [r7, #11]
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	72fb      	strb	r3, [r7, #11]
          break;
 800e5e6:	e089      	b.n	800e6fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00b      	beq.n	800e60c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e5fa:	689b      	ldr	r3, [r3, #8]
 800e5fc:	687a      	ldr	r2, [r7, #4]
 800e5fe:	7c12      	ldrb	r2, [r2, #16]
 800e600:	f107 0108 	add.w	r1, r7, #8
 800e604:	4610      	mov	r0, r2
 800e606:	4798      	blx	r3
 800e608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e60a:	e077      	b.n	800e6fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e60c:	6839      	ldr	r1, [r7, #0]
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f000 fab1 	bl	800eb76 <USBD_CtlError>
            err++;
 800e614:	7afb      	ldrb	r3, [r7, #11]
 800e616:	3301      	adds	r3, #1
 800e618:	72fb      	strb	r3, [r7, #11]
          break;
 800e61a:	e06f      	b.n	800e6fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e622:	68db      	ldr	r3, [r3, #12]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00b      	beq.n	800e640 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e62e:	68db      	ldr	r3, [r3, #12]
 800e630:	687a      	ldr	r2, [r7, #4]
 800e632:	7c12      	ldrb	r2, [r2, #16]
 800e634:	f107 0108 	add.w	r1, r7, #8
 800e638:	4610      	mov	r0, r2
 800e63a:	4798      	blx	r3
 800e63c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e63e:	e05d      	b.n	800e6fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e640:	6839      	ldr	r1, [r7, #0]
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 fa97 	bl	800eb76 <USBD_CtlError>
            err++;
 800e648:	7afb      	ldrb	r3, [r7, #11]
 800e64a:	3301      	adds	r3, #1
 800e64c:	72fb      	strb	r3, [r7, #11]
          break;
 800e64e:	e055      	b.n	800e6fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e656:	691b      	ldr	r3, [r3, #16]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d00b      	beq.n	800e674 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e662:	691b      	ldr	r3, [r3, #16]
 800e664:	687a      	ldr	r2, [r7, #4]
 800e666:	7c12      	ldrb	r2, [r2, #16]
 800e668:	f107 0108 	add.w	r1, r7, #8
 800e66c:	4610      	mov	r0, r2
 800e66e:	4798      	blx	r3
 800e670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e672:	e043      	b.n	800e6fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e674:	6839      	ldr	r1, [r7, #0]
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f000 fa7d 	bl	800eb76 <USBD_CtlError>
            err++;
 800e67c:	7afb      	ldrb	r3, [r7, #11]
 800e67e:	3301      	adds	r3, #1
 800e680:	72fb      	strb	r3, [r7, #11]
          break;
 800e682:	e03b      	b.n	800e6fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e68a:	695b      	ldr	r3, [r3, #20]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d00b      	beq.n	800e6a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e696:	695b      	ldr	r3, [r3, #20]
 800e698:	687a      	ldr	r2, [r7, #4]
 800e69a:	7c12      	ldrb	r2, [r2, #16]
 800e69c:	f107 0108 	add.w	r1, r7, #8
 800e6a0:	4610      	mov	r0, r2
 800e6a2:	4798      	blx	r3
 800e6a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6a6:	e029      	b.n	800e6fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6a8:	6839      	ldr	r1, [r7, #0]
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 fa63 	bl	800eb76 <USBD_CtlError>
            err++;
 800e6b0:	7afb      	ldrb	r3, [r7, #11]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	72fb      	strb	r3, [r7, #11]
          break;
 800e6b6:	e021      	b.n	800e6fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6be:	699b      	ldr	r3, [r3, #24]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d00b      	beq.n	800e6dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6ca:	699b      	ldr	r3, [r3, #24]
 800e6cc:	687a      	ldr	r2, [r7, #4]
 800e6ce:	7c12      	ldrb	r2, [r2, #16]
 800e6d0:	f107 0108 	add.w	r1, r7, #8
 800e6d4:	4610      	mov	r0, r2
 800e6d6:	4798      	blx	r3
 800e6d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6da:	e00f      	b.n	800e6fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6dc:	6839      	ldr	r1, [r7, #0]
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f000 fa49 	bl	800eb76 <USBD_CtlError>
            err++;
 800e6e4:	7afb      	ldrb	r3, [r7, #11]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	72fb      	strb	r3, [r7, #11]
          break;
 800e6ea:	e007      	b.n	800e6fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e6ec:	6839      	ldr	r1, [r7, #0]
 800e6ee:	6878      	ldr	r0, [r7, #4]
 800e6f0:	f000 fa41 	bl	800eb76 <USBD_CtlError>
          err++;
 800e6f4:	7afb      	ldrb	r3, [r7, #11]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e6fa:	bf00      	nop
      }
      break;
 800e6fc:	e037      	b.n	800e76e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	7c1b      	ldrb	r3, [r3, #16]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d109      	bne.n	800e71a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e70c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e70e:	f107 0208 	add.w	r2, r7, #8
 800e712:	4610      	mov	r0, r2
 800e714:	4798      	blx	r3
 800e716:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e718:	e029      	b.n	800e76e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 fa2a 	bl	800eb76 <USBD_CtlError>
        err++;
 800e722:	7afb      	ldrb	r3, [r7, #11]
 800e724:	3301      	adds	r3, #1
 800e726:	72fb      	strb	r3, [r7, #11]
      break;
 800e728:	e021      	b.n	800e76e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	7c1b      	ldrb	r3, [r3, #16]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d10d      	bne.n	800e74e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e73a:	f107 0208 	add.w	r2, r7, #8
 800e73e:	4610      	mov	r0, r2
 800e740:	4798      	blx	r3
 800e742:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	3301      	adds	r3, #1
 800e748:	2207      	movs	r2, #7
 800e74a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e74c:	e00f      	b.n	800e76e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e74e:	6839      	ldr	r1, [r7, #0]
 800e750:	6878      	ldr	r0, [r7, #4]
 800e752:	f000 fa10 	bl	800eb76 <USBD_CtlError>
        err++;
 800e756:	7afb      	ldrb	r3, [r7, #11]
 800e758:	3301      	adds	r3, #1
 800e75a:	72fb      	strb	r3, [r7, #11]
      break;
 800e75c:	e007      	b.n	800e76e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e75e:	6839      	ldr	r1, [r7, #0]
 800e760:	6878      	ldr	r0, [r7, #4]
 800e762:	f000 fa08 	bl	800eb76 <USBD_CtlError>
      err++;
 800e766:	7afb      	ldrb	r3, [r7, #11]
 800e768:	3301      	adds	r3, #1
 800e76a:	72fb      	strb	r3, [r7, #11]
      break;
 800e76c:	bf00      	nop
  }

  if (err != 0U)
 800e76e:	7afb      	ldrb	r3, [r7, #11]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d11e      	bne.n	800e7b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	88db      	ldrh	r3, [r3, #6]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d016      	beq.n	800e7aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e77c:	893b      	ldrh	r3, [r7, #8]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d00e      	beq.n	800e7a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	88da      	ldrh	r2, [r3, #6]
 800e786:	893b      	ldrh	r3, [r7, #8]
 800e788:	4293      	cmp	r3, r2
 800e78a:	bf28      	it	cs
 800e78c:	4613      	movcs	r3, r2
 800e78e:	b29b      	uxth	r3, r3
 800e790:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e792:	893b      	ldrh	r3, [r7, #8]
 800e794:	461a      	mov	r2, r3
 800e796:	68f9      	ldr	r1, [r7, #12]
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	f000 fb6a 	bl	800ee72 <USBD_CtlSendData>
 800e79e:	e009      	b.n	800e7b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e7a0:	6839      	ldr	r1, [r7, #0]
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 f9e7 	bl	800eb76 <USBD_CtlError>
 800e7a8:	e004      	b.n	800e7b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f000 fbbb 	bl	800ef26 <USBD_CtlSendStatus>
 800e7b0:	e000      	b.n	800e7b4 <USBD_GetDescriptor+0x2cc>
    return;
 800e7b2:	bf00      	nop
  }
}
 800e7b4:	3710      	adds	r7, #16
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	bd80      	pop	{r7, pc}
 800e7ba:	bf00      	nop

0800e7bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b084      	sub	sp, #16
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e7c6:	683b      	ldr	r3, [r7, #0]
 800e7c8:	889b      	ldrh	r3, [r3, #4]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d131      	bne.n	800e832 <USBD_SetAddress+0x76>
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	88db      	ldrh	r3, [r3, #6]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d12d      	bne.n	800e832 <USBD_SetAddress+0x76>
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	885b      	ldrh	r3, [r3, #2]
 800e7da:	2b7f      	cmp	r3, #127	@ 0x7f
 800e7dc:	d829      	bhi.n	800e832 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	885b      	ldrh	r3, [r3, #2]
 800e7e2:	b2db      	uxtb	r3, r3
 800e7e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e7e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	2b03      	cmp	r3, #3
 800e7f4:	d104      	bne.n	800e800 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e7f6:	6839      	ldr	r1, [r7, #0]
 800e7f8:	6878      	ldr	r0, [r7, #4]
 800e7fa:	f000 f9bc 	bl	800eb76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7fe:	e01d      	b.n	800e83c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	7bfa      	ldrb	r2, [r7, #15]
 800e804:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e808:	7bfb      	ldrb	r3, [r7, #15]
 800e80a:	4619      	mov	r1, r3
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f7fe ffcd 	bl	800d7ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 fb87 	bl	800ef26 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e818:	7bfb      	ldrb	r3, [r7, #15]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d004      	beq.n	800e828 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2202      	movs	r2, #2
 800e822:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e826:	e009      	b.n	800e83c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2201      	movs	r2, #1
 800e82c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e830:	e004      	b.n	800e83c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e832:	6839      	ldr	r1, [r7, #0]
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f000 f99e 	bl	800eb76 <USBD_CtlError>
  }
}
 800e83a:	bf00      	nop
 800e83c:	bf00      	nop
 800e83e:	3710      	adds	r7, #16
 800e840:	46bd      	mov	sp, r7
 800e842:	bd80      	pop	{r7, pc}

0800e844 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e84e:	2300      	movs	r3, #0
 800e850:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	885b      	ldrh	r3, [r3, #2]
 800e856:	b2da      	uxtb	r2, r3
 800e858:	4b4e      	ldr	r3, [pc, #312]	@ (800e994 <USBD_SetConfig+0x150>)
 800e85a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e85c:	4b4d      	ldr	r3, [pc, #308]	@ (800e994 <USBD_SetConfig+0x150>)
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	2b01      	cmp	r3, #1
 800e862:	d905      	bls.n	800e870 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e864:	6839      	ldr	r1, [r7, #0]
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f000 f985 	bl	800eb76 <USBD_CtlError>
    return USBD_FAIL;
 800e86c:	2303      	movs	r3, #3
 800e86e:	e08c      	b.n	800e98a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e876:	b2db      	uxtb	r3, r3
 800e878:	2b02      	cmp	r3, #2
 800e87a:	d002      	beq.n	800e882 <USBD_SetConfig+0x3e>
 800e87c:	2b03      	cmp	r3, #3
 800e87e:	d029      	beq.n	800e8d4 <USBD_SetConfig+0x90>
 800e880:	e075      	b.n	800e96e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e882:	4b44      	ldr	r3, [pc, #272]	@ (800e994 <USBD_SetConfig+0x150>)
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d020      	beq.n	800e8cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e88a:	4b42      	ldr	r3, [pc, #264]	@ (800e994 <USBD_SetConfig+0x150>)
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	461a      	mov	r2, r3
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e894:	4b3f      	ldr	r3, [pc, #252]	@ (800e994 <USBD_SetConfig+0x150>)
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	4619      	mov	r1, r3
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7ff f8a9 	bl	800d9f2 <USBD_SetClassConfig>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e8a4:	7bfb      	ldrb	r3, [r7, #15]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d008      	beq.n	800e8bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e8aa:	6839      	ldr	r1, [r7, #0]
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f000 f962 	bl	800eb76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2202      	movs	r2, #2
 800e8b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e8ba:	e065      	b.n	800e988 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 fb32 	bl	800ef26 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2203      	movs	r2, #3
 800e8c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e8ca:	e05d      	b.n	800e988 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 fb2a 	bl	800ef26 <USBD_CtlSendStatus>
      break;
 800e8d2:	e059      	b.n	800e988 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e8d4:	4b2f      	ldr	r3, [pc, #188]	@ (800e994 <USBD_SetConfig+0x150>)
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d112      	bne.n	800e902 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2202      	movs	r2, #2
 800e8e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e8e4:	4b2b      	ldr	r3, [pc, #172]	@ (800e994 <USBD_SetConfig+0x150>)
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e8ee:	4b29      	ldr	r3, [pc, #164]	@ (800e994 <USBD_SetConfig+0x150>)
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f7ff f898 	bl	800da2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f000 fb13 	bl	800ef26 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e900:	e042      	b.n	800e988 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e902:	4b24      	ldr	r3, [pc, #144]	@ (800e994 <USBD_SetConfig+0x150>)
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	461a      	mov	r2, r3
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	685b      	ldr	r3, [r3, #4]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d02a      	beq.n	800e966 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	685b      	ldr	r3, [r3, #4]
 800e914:	b2db      	uxtb	r3, r3
 800e916:	4619      	mov	r1, r3
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f7ff f886 	bl	800da2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e91e:	4b1d      	ldr	r3, [pc, #116]	@ (800e994 <USBD_SetConfig+0x150>)
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	461a      	mov	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e928:	4b1a      	ldr	r3, [pc, #104]	@ (800e994 <USBD_SetConfig+0x150>)
 800e92a:	781b      	ldrb	r3, [r3, #0]
 800e92c:	4619      	mov	r1, r3
 800e92e:	6878      	ldr	r0, [r7, #4]
 800e930:	f7ff f85f 	bl	800d9f2 <USBD_SetClassConfig>
 800e934:	4603      	mov	r3, r0
 800e936:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e938:	7bfb      	ldrb	r3, [r7, #15]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d00f      	beq.n	800e95e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e93e:	6839      	ldr	r1, [r7, #0]
 800e940:	6878      	ldr	r0, [r7, #4]
 800e942:	f000 f918 	bl	800eb76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	685b      	ldr	r3, [r3, #4]
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	4619      	mov	r1, r3
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f7ff f86b 	bl	800da2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2202      	movs	r2, #2
 800e958:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e95c:	e014      	b.n	800e988 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f000 fae1 	bl	800ef26 <USBD_CtlSendStatus>
      break;
 800e964:	e010      	b.n	800e988 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 fadd 	bl	800ef26 <USBD_CtlSendStatus>
      break;
 800e96c:	e00c      	b.n	800e988 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e96e:	6839      	ldr	r1, [r7, #0]
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 f900 	bl	800eb76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e976:	4b07      	ldr	r3, [pc, #28]	@ (800e994 <USBD_SetConfig+0x150>)
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7ff f854 	bl	800da2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e982:	2303      	movs	r3, #3
 800e984:	73fb      	strb	r3, [r7, #15]
      break;
 800e986:	bf00      	nop
  }

  return ret;
 800e988:	7bfb      	ldrb	r3, [r7, #15]
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3710      	adds	r7, #16
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	20000f9c 	.word	0x20000f9c

0800e998 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	88db      	ldrh	r3, [r3, #6]
 800e9a6:	2b01      	cmp	r3, #1
 800e9a8:	d004      	beq.n	800e9b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e9aa:	6839      	ldr	r1, [r7, #0]
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f000 f8e2 	bl	800eb76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e9b2:	e023      	b.n	800e9fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	2b02      	cmp	r3, #2
 800e9be:	dc02      	bgt.n	800e9c6 <USBD_GetConfig+0x2e>
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	dc03      	bgt.n	800e9cc <USBD_GetConfig+0x34>
 800e9c4:	e015      	b.n	800e9f2 <USBD_GetConfig+0x5a>
 800e9c6:	2b03      	cmp	r3, #3
 800e9c8:	d00b      	beq.n	800e9e2 <USBD_GetConfig+0x4a>
 800e9ca:	e012      	b.n	800e9f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	3308      	adds	r3, #8
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	4619      	mov	r1, r3
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f000 fa49 	bl	800ee72 <USBD_CtlSendData>
        break;
 800e9e0:	e00c      	b.n	800e9fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	3304      	adds	r3, #4
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f000 fa41 	bl	800ee72 <USBD_CtlSendData>
        break;
 800e9f0:	e004      	b.n	800e9fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e9f2:	6839      	ldr	r1, [r7, #0]
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 f8be 	bl	800eb76 <USBD_CtlError>
        break;
 800e9fa:	bf00      	nop
}
 800e9fc:	bf00      	nop
 800e9fe:	3708      	adds	r7, #8
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea14:	b2db      	uxtb	r3, r3
 800ea16:	3b01      	subs	r3, #1
 800ea18:	2b02      	cmp	r3, #2
 800ea1a:	d81e      	bhi.n	800ea5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	88db      	ldrh	r3, [r3, #6]
 800ea20:	2b02      	cmp	r3, #2
 800ea22:	d004      	beq.n	800ea2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ea24:	6839      	ldr	r1, [r7, #0]
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 f8a5 	bl	800eb76 <USBD_CtlError>
        break;
 800ea2c:	e01a      	b.n	800ea64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	2201      	movs	r2, #1
 800ea32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d005      	beq.n	800ea4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	68db      	ldr	r3, [r3, #12]
 800ea42:	f043 0202 	orr.w	r2, r3, #2
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	330c      	adds	r3, #12
 800ea4e:	2202      	movs	r2, #2
 800ea50:	4619      	mov	r1, r3
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f000 fa0d 	bl	800ee72 <USBD_CtlSendData>
      break;
 800ea58:	e004      	b.n	800ea64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f000 f88a 	bl	800eb76 <USBD_CtlError>
      break;
 800ea62:	bf00      	nop
  }
}
 800ea64:	bf00      	nop
 800ea66:	3708      	adds	r7, #8
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	885b      	ldrh	r3, [r3, #2]
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d107      	bne.n	800ea8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2201      	movs	r2, #1
 800ea82:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 fa4d 	bl	800ef26 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ea8c:	e013      	b.n	800eab6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	885b      	ldrh	r3, [r3, #2]
 800ea92:	2b02      	cmp	r3, #2
 800ea94:	d10b      	bne.n	800eaae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	889b      	ldrh	r3, [r3, #4]
 800ea9a:	0a1b      	lsrs	r3, r3, #8
 800ea9c:	b29b      	uxth	r3, r3
 800ea9e:	b2da      	uxtb	r2, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 fa3d 	bl	800ef26 <USBD_CtlSendStatus>
}
 800eaac:	e003      	b.n	800eab6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800eaae:	6839      	ldr	r1, [r7, #0]
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f860 	bl	800eb76 <USBD_CtlError>
}
 800eab6:	bf00      	nop
 800eab8:	3708      	adds	r7, #8
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}

0800eabe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eabe:	b580      	push	{r7, lr}
 800eac0:	b082      	sub	sp, #8
 800eac2:	af00      	add	r7, sp, #0
 800eac4:	6078      	str	r0, [r7, #4]
 800eac6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eace:	b2db      	uxtb	r3, r3
 800ead0:	3b01      	subs	r3, #1
 800ead2:	2b02      	cmp	r3, #2
 800ead4:	d80b      	bhi.n	800eaee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	885b      	ldrh	r3, [r3, #2]
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d10c      	bne.n	800eaf8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 fa1d 	bl	800ef26 <USBD_CtlSendStatus>
      }
      break;
 800eaec:	e004      	b.n	800eaf8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eaee:	6839      	ldr	r1, [r7, #0]
 800eaf0:	6878      	ldr	r0, [r7, #4]
 800eaf2:	f000 f840 	bl	800eb76 <USBD_CtlError>
      break;
 800eaf6:	e000      	b.n	800eafa <USBD_ClrFeature+0x3c>
      break;
 800eaf8:	bf00      	nop
  }
}
 800eafa:	bf00      	nop
 800eafc:	3708      	adds	r7, #8
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}

0800eb02 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eb02:	b580      	push	{r7, lr}
 800eb04:	b084      	sub	sp, #16
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
 800eb0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	781a      	ldrb	r2, [r3, #0]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	3301      	adds	r3, #1
 800eb1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	781a      	ldrb	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	3301      	adds	r3, #1
 800eb2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eb2c:	68f8      	ldr	r0, [r7, #12]
 800eb2e:	f7ff fa40 	bl	800dfb2 <SWAPBYTE>
 800eb32:	4603      	mov	r3, r0
 800eb34:	461a      	mov	r2, r3
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	3301      	adds	r3, #1
 800eb3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	3301      	adds	r3, #1
 800eb44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eb46:	68f8      	ldr	r0, [r7, #12]
 800eb48:	f7ff fa33 	bl	800dfb2 <SWAPBYTE>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	461a      	mov	r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	3301      	adds	r3, #1
 800eb58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	3301      	adds	r3, #1
 800eb5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eb60:	68f8      	ldr	r0, [r7, #12]
 800eb62:	f7ff fa26 	bl	800dfb2 <SWAPBYTE>
 800eb66:	4603      	mov	r3, r0
 800eb68:	461a      	mov	r2, r3
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	80da      	strh	r2, [r3, #6]
}
 800eb6e:	bf00      	nop
 800eb70:	3710      	adds	r7, #16
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b082      	sub	sp, #8
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
 800eb7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb80:	2180      	movs	r1, #128	@ 0x80
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f7fe fdb4 	bl	800d6f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eb88:	2100      	movs	r1, #0
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f7fe fdb0 	bl	800d6f0 <USBD_LL_StallEP>
}
 800eb90:	bf00      	nop
 800eb92:	3708      	adds	r7, #8
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b086      	sub	sp, #24
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	60b9      	str	r1, [r7, #8]
 800eba2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eba4:	2300      	movs	r3, #0
 800eba6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d036      	beq.n	800ec1c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ebb2:	6938      	ldr	r0, [r7, #16]
 800ebb4:	f000 f836 	bl	800ec24 <USBD_GetLen>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	3301      	adds	r3, #1
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	005b      	lsls	r3, r3, #1
 800ebc0:	b29a      	uxth	r2, r3
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ebc6:	7dfb      	ldrb	r3, [r7, #23]
 800ebc8:	68ba      	ldr	r2, [r7, #8]
 800ebca:	4413      	add	r3, r2
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	7812      	ldrb	r2, [r2, #0]
 800ebd0:	701a      	strb	r2, [r3, #0]
  idx++;
 800ebd2:	7dfb      	ldrb	r3, [r7, #23]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ebd8:	7dfb      	ldrb	r3, [r7, #23]
 800ebda:	68ba      	ldr	r2, [r7, #8]
 800ebdc:	4413      	add	r3, r2
 800ebde:	2203      	movs	r2, #3
 800ebe0:	701a      	strb	r2, [r3, #0]
  idx++;
 800ebe2:	7dfb      	ldrb	r3, [r7, #23]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ebe8:	e013      	b.n	800ec12 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ebea:	7dfb      	ldrb	r3, [r7, #23]
 800ebec:	68ba      	ldr	r2, [r7, #8]
 800ebee:	4413      	add	r3, r2
 800ebf0:	693a      	ldr	r2, [r7, #16]
 800ebf2:	7812      	ldrb	r2, [r2, #0]
 800ebf4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	613b      	str	r3, [r7, #16]
    idx++;
 800ebfc:	7dfb      	ldrb	r3, [r7, #23]
 800ebfe:	3301      	adds	r3, #1
 800ec00:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ec02:	7dfb      	ldrb	r3, [r7, #23]
 800ec04:	68ba      	ldr	r2, [r7, #8]
 800ec06:	4413      	add	r3, r2
 800ec08:	2200      	movs	r2, #0
 800ec0a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ec0c:	7dfb      	ldrb	r3, [r7, #23]
 800ec0e:	3301      	adds	r3, #1
 800ec10:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d1e7      	bne.n	800ebea <USBD_GetString+0x52>
 800ec1a:	e000      	b.n	800ec1e <USBD_GetString+0x86>
    return;
 800ec1c:	bf00      	nop
  }
}
 800ec1e:	3718      	adds	r7, #24
 800ec20:	46bd      	mov	sp, r7
 800ec22:	bd80      	pop	{r7, pc}

0800ec24 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ec34:	e005      	b.n	800ec42 <USBD_GetLen+0x1e>
  {
    len++;
 800ec36:	7bfb      	ldrb	r3, [r7, #15]
 800ec38:	3301      	adds	r3, #1
 800ec3a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ec3c:	68bb      	ldr	r3, [r7, #8]
 800ec3e:	3301      	adds	r3, #1
 800ec40:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d1f5      	bne.n	800ec36 <USBD_GetLen+0x12>
  }

  return len;
 800ec4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	3714      	adds	r7, #20
 800ec50:	46bd      	mov	sp, r7
 800ec52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec56:	4770      	bx	lr

0800ec58 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	4603      	mov	r3, r0
 800ec60:	6039      	str	r1, [r7, #0]
 800ec62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	2212      	movs	r2, #18
 800ec68:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800ec6a:	4b03      	ldr	r3, [pc, #12]	@ (800ec78 <USBD_Class_DeviceDescriptor+0x20>)
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	370c      	adds	r7, #12
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr
 800ec78:	200000ec 	.word	0x200000ec

0800ec7c <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec7c:	b480      	push	{r7}
 800ec7e:	b083      	sub	sp, #12
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	4603      	mov	r3, r0
 800ec84:	6039      	str	r1, [r7, #0]
 800ec86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	2204      	movs	r2, #4
 800ec8c:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800ec8e:	4b03      	ldr	r3, [pc, #12]	@ (800ec9c <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	370c      	adds	r7, #12
 800ec94:	46bd      	mov	sp, r7
 800ec96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9a:	4770      	bx	lr
 800ec9c:	20000100 	.word	0x20000100

0800eca0 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
 800eca6:	4603      	mov	r3, r0
 800eca8:	6039      	str	r1, [r7, #0]
 800ecaa:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800ecac:	79fb      	ldrb	r3, [r7, #7]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d105      	bne.n	800ecbe <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800ecb2:	683a      	ldr	r2, [r7, #0]
 800ecb4:	4907      	ldr	r1, [pc, #28]	@ (800ecd4 <USBD_Class_ProductStrDescriptor+0x34>)
 800ecb6:	4808      	ldr	r0, [pc, #32]	@ (800ecd8 <USBD_Class_ProductStrDescriptor+0x38>)
 800ecb8:	f7ff ff6e 	bl	800eb98 <USBD_GetString>
 800ecbc:	e004      	b.n	800ecc8 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800ecbe:	683a      	ldr	r2, [r7, #0]
 800ecc0:	4904      	ldr	r1, [pc, #16]	@ (800ecd4 <USBD_Class_ProductStrDescriptor+0x34>)
 800ecc2:	4805      	ldr	r0, [pc, #20]	@ (800ecd8 <USBD_Class_ProductStrDescriptor+0x38>)
 800ecc4:	f7ff ff68 	bl	800eb98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ecc8:	4b02      	ldr	r3, [pc, #8]	@ (800ecd4 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}
 800ecd2:	bf00      	nop
 800ecd4:	20000fa0 	.word	0x20000fa0
 800ecd8:	0800f928 	.word	0x0800f928

0800ecdc <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	4603      	mov	r3, r0
 800ece4:	6039      	str	r1, [r7, #0]
 800ece6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ece8:	683a      	ldr	r2, [r7, #0]
 800ecea:	4904      	ldr	r1, [pc, #16]	@ (800ecfc <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800ecec:	4804      	ldr	r0, [pc, #16]	@ (800ed00 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800ecee:	f7ff ff53 	bl	800eb98 <USBD_GetString>
  return USBD_StrDesc;
 800ecf2:	4b02      	ldr	r3, [pc, #8]	@ (800ecfc <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3708      	adds	r7, #8
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	20000fa0 	.word	0x20000fa0
 800ed00:	0800f940 	.word	0x0800f940

0800ed04 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	6039      	str	r1, [r7, #0]
 800ed0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	221a      	movs	r2, #26
 800ed14:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800ed16:	f000 f843 	bl	800eda0 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800ed1a:	4b02      	ldr	r3, [pc, #8]	@ (800ed24 <USBD_Class_SerialStrDescriptor+0x20>)
}
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	3708      	adds	r7, #8
 800ed20:	46bd      	mov	sp, r7
 800ed22:	bd80      	pop	{r7, pc}
 800ed24:	20000104 	.word	0x20000104

0800ed28 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	4603      	mov	r3, r0
 800ed30:	6039      	str	r1, [r7, #0]
 800ed32:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800ed34:	79fb      	ldrb	r3, [r7, #7]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d105      	bne.n	800ed46 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800ed3a:	683a      	ldr	r2, [r7, #0]
 800ed3c:	4907      	ldr	r1, [pc, #28]	@ (800ed5c <USBD_Class_ConfigStrDescriptor+0x34>)
 800ed3e:	4808      	ldr	r0, [pc, #32]	@ (800ed60 <USBD_Class_ConfigStrDescriptor+0x38>)
 800ed40:	f7ff ff2a 	bl	800eb98 <USBD_GetString>
 800ed44:	e004      	b.n	800ed50 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800ed46:	683a      	ldr	r2, [r7, #0]
 800ed48:	4904      	ldr	r1, [pc, #16]	@ (800ed5c <USBD_Class_ConfigStrDescriptor+0x34>)
 800ed4a:	4805      	ldr	r0, [pc, #20]	@ (800ed60 <USBD_Class_ConfigStrDescriptor+0x38>)
 800ed4c:	f7ff ff24 	bl	800eb98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed50:	4b02      	ldr	r3, [pc, #8]	@ (800ed5c <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800ed52:	4618      	mov	r0, r3
 800ed54:	3708      	adds	r7, #8
 800ed56:	46bd      	mov	sp, r7
 800ed58:	bd80      	pop	{r7, pc}
 800ed5a:	bf00      	nop
 800ed5c:	20000fa0 	.word	0x20000fa0
 800ed60:	0800f954 	.word	0x0800f954

0800ed64 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	6039      	str	r1, [r7, #0]
 800ed6e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800ed70:	79fb      	ldrb	r3, [r7, #7]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d105      	bne.n	800ed82 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800ed76:	683a      	ldr	r2, [r7, #0]
 800ed78:	4907      	ldr	r1, [pc, #28]	@ (800ed98 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800ed7a:	4808      	ldr	r0, [pc, #32]	@ (800ed9c <USBD_Class_InterfaceStrDescriptor+0x38>)
 800ed7c:	f7ff ff0c 	bl	800eb98 <USBD_GetString>
 800ed80:	e004      	b.n	800ed8c <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800ed82:	683a      	ldr	r2, [r7, #0]
 800ed84:	4904      	ldr	r1, [pc, #16]	@ (800ed98 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800ed86:	4805      	ldr	r0, [pc, #20]	@ (800ed9c <USBD_Class_InterfaceStrDescriptor+0x38>)
 800ed88:	f7ff ff06 	bl	800eb98 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed8c:	4b02      	ldr	r3, [pc, #8]	@ (800ed98 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3708      	adds	r7, #8
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	20000fa0 	.word	0x20000fa0
 800ed9c:	0800f960 	.word	0x0800f960

0800eda0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b084      	sub	sp, #16
 800eda4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800eda6:	4b0f      	ldr	r3, [pc, #60]	@ (800ede4 <Get_SerialNum+0x44>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800edac:	4b0e      	ldr	r3, [pc, #56]	@ (800ede8 <Get_SerialNum+0x48>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800edb2:	4b0e      	ldr	r3, [pc, #56]	@ (800edec <Get_SerialNum+0x4c>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800edb8:	68fa      	ldr	r2, [r7, #12]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	4413      	add	r3, r2
 800edbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d009      	beq.n	800edda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800edc6:	2208      	movs	r2, #8
 800edc8:	4909      	ldr	r1, [pc, #36]	@ (800edf0 <Get_SerialNum+0x50>)
 800edca:	68f8      	ldr	r0, [r7, #12]
 800edcc:	f000 f814 	bl	800edf8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800edd0:	2204      	movs	r2, #4
 800edd2:	4908      	ldr	r1, [pc, #32]	@ (800edf4 <Get_SerialNum+0x54>)
 800edd4:	68b8      	ldr	r0, [r7, #8]
 800edd6:	f000 f80f 	bl	800edf8 <IntToUnicode>
  }
}
 800edda:	bf00      	nop
 800eddc:	3710      	adds	r7, #16
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	08fff800 	.word	0x08fff800
 800ede8:	08fff804 	.word	0x08fff804
 800edec:	08fff808 	.word	0x08fff808
 800edf0:	20000106 	.word	0x20000106
 800edf4:	20000116 	.word	0x20000116

0800edf8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b087      	sub	sp, #28
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	4613      	mov	r3, r2
 800ee04:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800ee06:	2300      	movs	r3, #0
 800ee08:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	75fb      	strb	r3, [r7, #23]
 800ee0e:	e025      	b.n	800ee5c <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	0f1b      	lsrs	r3, r3, #28
 800ee14:	2b09      	cmp	r3, #9
 800ee16:	d80a      	bhi.n	800ee2e <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	0f1b      	lsrs	r3, r3, #28
 800ee1c:	b2da      	uxtb	r2, r3
 800ee1e:	7dfb      	ldrb	r3, [r7, #23]
 800ee20:	005b      	lsls	r3, r3, #1
 800ee22:	68b9      	ldr	r1, [r7, #8]
 800ee24:	440b      	add	r3, r1
 800ee26:	3230      	adds	r2, #48	@ 0x30
 800ee28:	b2d2      	uxtb	r2, r2
 800ee2a:	701a      	strb	r2, [r3, #0]
 800ee2c:	e009      	b.n	800ee42 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	0f1b      	lsrs	r3, r3, #28
 800ee32:	b2da      	uxtb	r2, r3
 800ee34:	7dfb      	ldrb	r3, [r7, #23]
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	68b9      	ldr	r1, [r7, #8]
 800ee3a:	440b      	add	r3, r1
 800ee3c:	3237      	adds	r2, #55	@ 0x37
 800ee3e:	b2d2      	uxtb	r2, r2
 800ee40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	011b      	lsls	r3, r3, #4
 800ee46:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800ee48:	7dfb      	ldrb	r3, [r7, #23]
 800ee4a:	005b      	lsls	r3, r3, #1
 800ee4c:	3301      	adds	r3, #1
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	4413      	add	r3, r2
 800ee52:	2200      	movs	r2, #0
 800ee54:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800ee56:	7dfb      	ldrb	r3, [r7, #23]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	75fb      	strb	r3, [r7, #23]
 800ee5c:	7dfa      	ldrb	r2, [r7, #23]
 800ee5e:	79fb      	ldrb	r3, [r7, #7]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d3d5      	bcc.n	800ee10 <IntToUnicode+0x18>
  }
}
 800ee64:	bf00      	nop
 800ee66:	bf00      	nop
 800ee68:	371c      	adds	r7, #28
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr

0800ee72 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ee72:	b580      	push	{r7, lr}
 800ee74:	b084      	sub	sp, #16
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	60f8      	str	r0, [r7, #12]
 800ee7a:	60b9      	str	r1, [r7, #8]
 800ee7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2202      	movs	r2, #2
 800ee82:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	2100      	movs	r1, #0
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f7fe fca0 	bl	800d7de <USBD_LL_Transmit>

  return USBD_OK;
 800ee9e:	2300      	movs	r3, #0
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3710      	adds	r7, #16
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	2100      	movs	r1, #0
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f7fe fc8f 	bl	800d7de <USBD_LL_Transmit>

  return USBD_OK;
 800eec0:	2300      	movs	r3, #0
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3710      	adds	r7, #16
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b084      	sub	sp, #16
 800eece:	af00      	add	r7, sp, #0
 800eed0:	60f8      	str	r0, [r7, #12]
 800eed2:	60b9      	str	r1, [r7, #8]
 800eed4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2203      	movs	r2, #3
 800eeda:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	2100      	movs	r1, #0
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f7fe fc8d 	bl	800d814 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eefa:	2300      	movs	r3, #0
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3710      	adds	r7, #16
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	2100      	movs	r1, #0
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f7fe fc7c 	bl	800d814 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef1c:	2300      	movs	r3, #0
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b082      	sub	sp, #8
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2204      	movs	r2, #4
 800ef32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ef36:	2300      	movs	r3, #0
 800ef38:	2200      	movs	r2, #0
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f7fe fc4e 	bl	800d7de <USBD_LL_Transmit>

  return USBD_OK;
 800ef42:	2300      	movs	r3, #0
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2205      	movs	r2, #5
 800ef58:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	2200      	movs	r2, #0
 800ef60:	2100      	movs	r1, #0
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f7fe fc56 	bl	800d814 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef68:	2300      	movs	r3, #0
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3708      	adds	r7, #8
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}
	...

0800ef74 <sniprintf>:
 800ef74:	b40c      	push	{r2, r3}
 800ef76:	4b18      	ldr	r3, [pc, #96]	@ (800efd8 <sniprintf+0x64>)
 800ef78:	b530      	push	{r4, r5, lr}
 800ef7a:	1e0c      	subs	r4, r1, #0
 800ef7c:	b09d      	sub	sp, #116	@ 0x74
 800ef7e:	681d      	ldr	r5, [r3, #0]
 800ef80:	da08      	bge.n	800ef94 <sniprintf+0x20>
 800ef82:	238b      	movs	r3, #139	@ 0x8b
 800ef84:	f04f 30ff 	mov.w	r0, #4294967295
 800ef88:	602b      	str	r3, [r5, #0]
 800ef8a:	b01d      	add	sp, #116	@ 0x74
 800ef8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef90:	b002      	add	sp, #8
 800ef92:	4770      	bx	lr
 800ef94:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ef98:	9002      	str	r0, [sp, #8]
 800ef9a:	9006      	str	r0, [sp, #24]
 800ef9c:	a902      	add	r1, sp, #8
 800ef9e:	f8ad 3014 	strh.w	r3, [sp, #20]
 800efa2:	bf14      	ite	ne
 800efa4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800efa8:	4623      	moveq	r3, r4
 800efaa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800efac:	4628      	mov	r0, r5
 800efae:	9304      	str	r3, [sp, #16]
 800efb0:	9307      	str	r3, [sp, #28]
 800efb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800efb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800efba:	ab21      	add	r3, sp, #132	@ 0x84
 800efbc:	9301      	str	r3, [sp, #4]
 800efbe:	f000 f995 	bl	800f2ec <_svfiprintf_r>
 800efc2:	1c43      	adds	r3, r0, #1
 800efc4:	bfbc      	itt	lt
 800efc6:	238b      	movlt	r3, #139	@ 0x8b
 800efc8:	602b      	strlt	r3, [r5, #0]
 800efca:	2c00      	cmp	r4, #0
 800efcc:	d0dd      	beq.n	800ef8a <sniprintf+0x16>
 800efce:	9b02      	ldr	r3, [sp, #8]
 800efd0:	2200      	movs	r2, #0
 800efd2:	701a      	strb	r2, [r3, #0]
 800efd4:	e7d9      	b.n	800ef8a <sniprintf+0x16>
 800efd6:	bf00      	nop
 800efd8:	20000120 	.word	0x20000120

0800efdc <memset>:
 800efdc:	4402      	add	r2, r0
 800efde:	4603      	mov	r3, r0
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d100      	bne.n	800efe6 <memset+0xa>
 800efe4:	4770      	bx	lr
 800efe6:	f803 1b01 	strb.w	r1, [r3], #1
 800efea:	e7f9      	b.n	800efe0 <memset+0x4>

0800efec <__errno>:
 800efec:	4b01      	ldr	r3, [pc, #4]	@ (800eff4 <__errno+0x8>)
 800efee:	6818      	ldr	r0, [r3, #0]
 800eff0:	4770      	bx	lr
 800eff2:	bf00      	nop
 800eff4:	20000120 	.word	0x20000120

0800eff8 <__libc_init_array>:
 800eff8:	b570      	push	{r4, r5, r6, lr}
 800effa:	4d0d      	ldr	r5, [pc, #52]	@ (800f030 <__libc_init_array+0x38>)
 800effc:	2600      	movs	r6, #0
 800effe:	4c0d      	ldr	r4, [pc, #52]	@ (800f034 <__libc_init_array+0x3c>)
 800f000:	1b64      	subs	r4, r4, r5
 800f002:	10a4      	asrs	r4, r4, #2
 800f004:	42a6      	cmp	r6, r4
 800f006:	d109      	bne.n	800f01c <__libc_init_array+0x24>
 800f008:	4d0b      	ldr	r5, [pc, #44]	@ (800f038 <__libc_init_array+0x40>)
 800f00a:	2600      	movs	r6, #0
 800f00c:	4c0b      	ldr	r4, [pc, #44]	@ (800f03c <__libc_init_array+0x44>)
 800f00e:	f000 fc77 	bl	800f900 <_init>
 800f012:	1b64      	subs	r4, r4, r5
 800f014:	10a4      	asrs	r4, r4, #2
 800f016:	42a6      	cmp	r6, r4
 800f018:	d105      	bne.n	800f026 <__libc_init_array+0x2e>
 800f01a:	bd70      	pop	{r4, r5, r6, pc}
 800f01c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f020:	3601      	adds	r6, #1
 800f022:	4798      	blx	r3
 800f024:	e7ee      	b.n	800f004 <__libc_init_array+0xc>
 800f026:	f855 3b04 	ldr.w	r3, [r5], #4
 800f02a:	3601      	adds	r6, #1
 800f02c:	4798      	blx	r3
 800f02e:	e7f2      	b.n	800f016 <__libc_init_array+0x1e>
 800f030:	0800f9f8 	.word	0x0800f9f8
 800f034:	0800f9f8 	.word	0x0800f9f8
 800f038:	0800f9f8 	.word	0x0800f9f8
 800f03c:	0800f9fc 	.word	0x0800f9fc

0800f040 <__retarget_lock_acquire_recursive>:
 800f040:	4770      	bx	lr

0800f042 <__retarget_lock_release_recursive>:
 800f042:	4770      	bx	lr

0800f044 <_free_r>:
 800f044:	b538      	push	{r3, r4, r5, lr}
 800f046:	4605      	mov	r5, r0
 800f048:	2900      	cmp	r1, #0
 800f04a:	d041      	beq.n	800f0d0 <_free_r+0x8c>
 800f04c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f050:	1f0c      	subs	r4, r1, #4
 800f052:	2b00      	cmp	r3, #0
 800f054:	bfb8      	it	lt
 800f056:	18e4      	addlt	r4, r4, r3
 800f058:	f000 f8e0 	bl	800f21c <__malloc_lock>
 800f05c:	4a1d      	ldr	r2, [pc, #116]	@ (800f0d4 <_free_r+0x90>)
 800f05e:	6813      	ldr	r3, [r2, #0]
 800f060:	b933      	cbnz	r3, 800f070 <_free_r+0x2c>
 800f062:	6063      	str	r3, [r4, #4]
 800f064:	6014      	str	r4, [r2, #0]
 800f066:	4628      	mov	r0, r5
 800f068:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f06c:	f000 b8dc 	b.w	800f228 <__malloc_unlock>
 800f070:	42a3      	cmp	r3, r4
 800f072:	d908      	bls.n	800f086 <_free_r+0x42>
 800f074:	6820      	ldr	r0, [r4, #0]
 800f076:	1821      	adds	r1, r4, r0
 800f078:	428b      	cmp	r3, r1
 800f07a:	bf01      	itttt	eq
 800f07c:	6819      	ldreq	r1, [r3, #0]
 800f07e:	685b      	ldreq	r3, [r3, #4]
 800f080:	1809      	addeq	r1, r1, r0
 800f082:	6021      	streq	r1, [r4, #0]
 800f084:	e7ed      	b.n	800f062 <_free_r+0x1e>
 800f086:	461a      	mov	r2, r3
 800f088:	685b      	ldr	r3, [r3, #4]
 800f08a:	b10b      	cbz	r3, 800f090 <_free_r+0x4c>
 800f08c:	42a3      	cmp	r3, r4
 800f08e:	d9fa      	bls.n	800f086 <_free_r+0x42>
 800f090:	6811      	ldr	r1, [r2, #0]
 800f092:	1850      	adds	r0, r2, r1
 800f094:	42a0      	cmp	r0, r4
 800f096:	d10b      	bne.n	800f0b0 <_free_r+0x6c>
 800f098:	6820      	ldr	r0, [r4, #0]
 800f09a:	4401      	add	r1, r0
 800f09c:	1850      	adds	r0, r2, r1
 800f09e:	6011      	str	r1, [r2, #0]
 800f0a0:	4283      	cmp	r3, r0
 800f0a2:	d1e0      	bne.n	800f066 <_free_r+0x22>
 800f0a4:	6818      	ldr	r0, [r3, #0]
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	4408      	add	r0, r1
 800f0aa:	6053      	str	r3, [r2, #4]
 800f0ac:	6010      	str	r0, [r2, #0]
 800f0ae:	e7da      	b.n	800f066 <_free_r+0x22>
 800f0b0:	d902      	bls.n	800f0b8 <_free_r+0x74>
 800f0b2:	230c      	movs	r3, #12
 800f0b4:	602b      	str	r3, [r5, #0]
 800f0b6:	e7d6      	b.n	800f066 <_free_r+0x22>
 800f0b8:	6820      	ldr	r0, [r4, #0]
 800f0ba:	1821      	adds	r1, r4, r0
 800f0bc:	428b      	cmp	r3, r1
 800f0be:	bf02      	ittt	eq
 800f0c0:	6819      	ldreq	r1, [r3, #0]
 800f0c2:	685b      	ldreq	r3, [r3, #4]
 800f0c4:	1809      	addeq	r1, r1, r0
 800f0c6:	6063      	str	r3, [r4, #4]
 800f0c8:	bf08      	it	eq
 800f0ca:	6021      	streq	r1, [r4, #0]
 800f0cc:	6054      	str	r4, [r2, #4]
 800f0ce:	e7ca      	b.n	800f066 <_free_r+0x22>
 800f0d0:	bd38      	pop	{r3, r4, r5, pc}
 800f0d2:	bf00      	nop
 800f0d4:	200011e4 	.word	0x200011e4

0800f0d8 <sbrk_aligned>:
 800f0d8:	b570      	push	{r4, r5, r6, lr}
 800f0da:	4e0f      	ldr	r6, [pc, #60]	@ (800f118 <sbrk_aligned+0x40>)
 800f0dc:	460c      	mov	r4, r1
 800f0de:	4605      	mov	r5, r0
 800f0e0:	6831      	ldr	r1, [r6, #0]
 800f0e2:	b911      	cbnz	r1, 800f0ea <sbrk_aligned+0x12>
 800f0e4:	f000 fbaa 	bl	800f83c <_sbrk_r>
 800f0e8:	6030      	str	r0, [r6, #0]
 800f0ea:	4621      	mov	r1, r4
 800f0ec:	4628      	mov	r0, r5
 800f0ee:	f000 fba5 	bl	800f83c <_sbrk_r>
 800f0f2:	1c43      	adds	r3, r0, #1
 800f0f4:	d103      	bne.n	800f0fe <sbrk_aligned+0x26>
 800f0f6:	f04f 34ff 	mov.w	r4, #4294967295
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	bd70      	pop	{r4, r5, r6, pc}
 800f0fe:	1cc4      	adds	r4, r0, #3
 800f100:	f024 0403 	bic.w	r4, r4, #3
 800f104:	42a0      	cmp	r0, r4
 800f106:	d0f8      	beq.n	800f0fa <sbrk_aligned+0x22>
 800f108:	1a21      	subs	r1, r4, r0
 800f10a:	4628      	mov	r0, r5
 800f10c:	f000 fb96 	bl	800f83c <_sbrk_r>
 800f110:	3001      	adds	r0, #1
 800f112:	d1f2      	bne.n	800f0fa <sbrk_aligned+0x22>
 800f114:	e7ef      	b.n	800f0f6 <sbrk_aligned+0x1e>
 800f116:	bf00      	nop
 800f118:	200011e0 	.word	0x200011e0

0800f11c <_malloc_r>:
 800f11c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f120:	1ccd      	adds	r5, r1, #3
 800f122:	4606      	mov	r6, r0
 800f124:	f025 0503 	bic.w	r5, r5, #3
 800f128:	3508      	adds	r5, #8
 800f12a:	2d0c      	cmp	r5, #12
 800f12c:	bf38      	it	cc
 800f12e:	250c      	movcc	r5, #12
 800f130:	2d00      	cmp	r5, #0
 800f132:	db01      	blt.n	800f138 <_malloc_r+0x1c>
 800f134:	42a9      	cmp	r1, r5
 800f136:	d904      	bls.n	800f142 <_malloc_r+0x26>
 800f138:	230c      	movs	r3, #12
 800f13a:	6033      	str	r3, [r6, #0]
 800f13c:	2000      	movs	r0, #0
 800f13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f218 <_malloc_r+0xfc>
 800f146:	f000 f869 	bl	800f21c <__malloc_lock>
 800f14a:	f8d8 3000 	ldr.w	r3, [r8]
 800f14e:	461c      	mov	r4, r3
 800f150:	bb44      	cbnz	r4, 800f1a4 <_malloc_r+0x88>
 800f152:	4629      	mov	r1, r5
 800f154:	4630      	mov	r0, r6
 800f156:	f7ff ffbf 	bl	800f0d8 <sbrk_aligned>
 800f15a:	1c43      	adds	r3, r0, #1
 800f15c:	4604      	mov	r4, r0
 800f15e:	d158      	bne.n	800f212 <_malloc_r+0xf6>
 800f160:	f8d8 4000 	ldr.w	r4, [r8]
 800f164:	4627      	mov	r7, r4
 800f166:	2f00      	cmp	r7, #0
 800f168:	d143      	bne.n	800f1f2 <_malloc_r+0xd6>
 800f16a:	2c00      	cmp	r4, #0
 800f16c:	d04b      	beq.n	800f206 <_malloc_r+0xea>
 800f16e:	6823      	ldr	r3, [r4, #0]
 800f170:	4639      	mov	r1, r7
 800f172:	4630      	mov	r0, r6
 800f174:	eb04 0903 	add.w	r9, r4, r3
 800f178:	f000 fb60 	bl	800f83c <_sbrk_r>
 800f17c:	4581      	cmp	r9, r0
 800f17e:	d142      	bne.n	800f206 <_malloc_r+0xea>
 800f180:	6821      	ldr	r1, [r4, #0]
 800f182:	4630      	mov	r0, r6
 800f184:	1a6d      	subs	r5, r5, r1
 800f186:	4629      	mov	r1, r5
 800f188:	f7ff ffa6 	bl	800f0d8 <sbrk_aligned>
 800f18c:	3001      	adds	r0, #1
 800f18e:	d03a      	beq.n	800f206 <_malloc_r+0xea>
 800f190:	6823      	ldr	r3, [r4, #0]
 800f192:	442b      	add	r3, r5
 800f194:	6023      	str	r3, [r4, #0]
 800f196:	f8d8 3000 	ldr.w	r3, [r8]
 800f19a:	685a      	ldr	r2, [r3, #4]
 800f19c:	bb62      	cbnz	r2, 800f1f8 <_malloc_r+0xdc>
 800f19e:	f8c8 7000 	str.w	r7, [r8]
 800f1a2:	e00f      	b.n	800f1c4 <_malloc_r+0xa8>
 800f1a4:	6822      	ldr	r2, [r4, #0]
 800f1a6:	1b52      	subs	r2, r2, r5
 800f1a8:	d420      	bmi.n	800f1ec <_malloc_r+0xd0>
 800f1aa:	2a0b      	cmp	r2, #11
 800f1ac:	d917      	bls.n	800f1de <_malloc_r+0xc2>
 800f1ae:	1961      	adds	r1, r4, r5
 800f1b0:	42a3      	cmp	r3, r4
 800f1b2:	6025      	str	r5, [r4, #0]
 800f1b4:	bf18      	it	ne
 800f1b6:	6059      	strne	r1, [r3, #4]
 800f1b8:	6863      	ldr	r3, [r4, #4]
 800f1ba:	bf08      	it	eq
 800f1bc:	f8c8 1000 	streq.w	r1, [r8]
 800f1c0:	5162      	str	r2, [r4, r5]
 800f1c2:	604b      	str	r3, [r1, #4]
 800f1c4:	4630      	mov	r0, r6
 800f1c6:	f000 f82f 	bl	800f228 <__malloc_unlock>
 800f1ca:	f104 000b 	add.w	r0, r4, #11
 800f1ce:	1d23      	adds	r3, r4, #4
 800f1d0:	f020 0007 	bic.w	r0, r0, #7
 800f1d4:	1ac2      	subs	r2, r0, r3
 800f1d6:	bf1c      	itt	ne
 800f1d8:	1a1b      	subne	r3, r3, r0
 800f1da:	50a3      	strne	r3, [r4, r2]
 800f1dc:	e7af      	b.n	800f13e <_malloc_r+0x22>
 800f1de:	6862      	ldr	r2, [r4, #4]
 800f1e0:	42a3      	cmp	r3, r4
 800f1e2:	bf0c      	ite	eq
 800f1e4:	f8c8 2000 	streq.w	r2, [r8]
 800f1e8:	605a      	strne	r2, [r3, #4]
 800f1ea:	e7eb      	b.n	800f1c4 <_malloc_r+0xa8>
 800f1ec:	4623      	mov	r3, r4
 800f1ee:	6864      	ldr	r4, [r4, #4]
 800f1f0:	e7ae      	b.n	800f150 <_malloc_r+0x34>
 800f1f2:	463c      	mov	r4, r7
 800f1f4:	687f      	ldr	r7, [r7, #4]
 800f1f6:	e7b6      	b.n	800f166 <_malloc_r+0x4a>
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	42a3      	cmp	r3, r4
 800f1fe:	d1fb      	bne.n	800f1f8 <_malloc_r+0xdc>
 800f200:	2300      	movs	r3, #0
 800f202:	6053      	str	r3, [r2, #4]
 800f204:	e7de      	b.n	800f1c4 <_malloc_r+0xa8>
 800f206:	230c      	movs	r3, #12
 800f208:	4630      	mov	r0, r6
 800f20a:	6033      	str	r3, [r6, #0]
 800f20c:	f000 f80c 	bl	800f228 <__malloc_unlock>
 800f210:	e794      	b.n	800f13c <_malloc_r+0x20>
 800f212:	6005      	str	r5, [r0, #0]
 800f214:	e7d6      	b.n	800f1c4 <_malloc_r+0xa8>
 800f216:	bf00      	nop
 800f218:	200011e4 	.word	0x200011e4

0800f21c <__malloc_lock>:
 800f21c:	4801      	ldr	r0, [pc, #4]	@ (800f224 <__malloc_lock+0x8>)
 800f21e:	f7ff bf0f 	b.w	800f040 <__retarget_lock_acquire_recursive>
 800f222:	bf00      	nop
 800f224:	200011dc 	.word	0x200011dc

0800f228 <__malloc_unlock>:
 800f228:	4801      	ldr	r0, [pc, #4]	@ (800f230 <__malloc_unlock+0x8>)
 800f22a:	f7ff bf0a 	b.w	800f042 <__retarget_lock_release_recursive>
 800f22e:	bf00      	nop
 800f230:	200011dc 	.word	0x200011dc

0800f234 <__ssputs_r>:
 800f234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f238:	461f      	mov	r7, r3
 800f23a:	688e      	ldr	r6, [r1, #8]
 800f23c:	4682      	mov	sl, r0
 800f23e:	460c      	mov	r4, r1
 800f240:	42be      	cmp	r6, r7
 800f242:	4690      	mov	r8, r2
 800f244:	680b      	ldr	r3, [r1, #0]
 800f246:	d82d      	bhi.n	800f2a4 <__ssputs_r+0x70>
 800f248:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f24c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f250:	d026      	beq.n	800f2a0 <__ssputs_r+0x6c>
 800f252:	6965      	ldr	r5, [r4, #20]
 800f254:	6909      	ldr	r1, [r1, #16]
 800f256:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f25a:	eba3 0901 	sub.w	r9, r3, r1
 800f25e:	1c7b      	adds	r3, r7, #1
 800f260:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f264:	444b      	add	r3, r9
 800f266:	106d      	asrs	r5, r5, #1
 800f268:	429d      	cmp	r5, r3
 800f26a:	bf38      	it	cc
 800f26c:	461d      	movcc	r5, r3
 800f26e:	0553      	lsls	r3, r2, #21
 800f270:	d527      	bpl.n	800f2c2 <__ssputs_r+0x8e>
 800f272:	4629      	mov	r1, r5
 800f274:	f7ff ff52 	bl	800f11c <_malloc_r>
 800f278:	4606      	mov	r6, r0
 800f27a:	b360      	cbz	r0, 800f2d6 <__ssputs_r+0xa2>
 800f27c:	464a      	mov	r2, r9
 800f27e:	6921      	ldr	r1, [r4, #16]
 800f280:	f000 fafa 	bl	800f878 <memcpy>
 800f284:	89a3      	ldrh	r3, [r4, #12]
 800f286:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f28a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f28e:	81a3      	strh	r3, [r4, #12]
 800f290:	6126      	str	r6, [r4, #16]
 800f292:	444e      	add	r6, r9
 800f294:	6165      	str	r5, [r4, #20]
 800f296:	eba5 0509 	sub.w	r5, r5, r9
 800f29a:	6026      	str	r6, [r4, #0]
 800f29c:	463e      	mov	r6, r7
 800f29e:	60a5      	str	r5, [r4, #8]
 800f2a0:	42be      	cmp	r6, r7
 800f2a2:	d900      	bls.n	800f2a6 <__ssputs_r+0x72>
 800f2a4:	463e      	mov	r6, r7
 800f2a6:	4632      	mov	r2, r6
 800f2a8:	4641      	mov	r1, r8
 800f2aa:	6820      	ldr	r0, [r4, #0]
 800f2ac:	f000 faac 	bl	800f808 <memmove>
 800f2b0:	68a3      	ldr	r3, [r4, #8]
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	1b9b      	subs	r3, r3, r6
 800f2b6:	60a3      	str	r3, [r4, #8]
 800f2b8:	6823      	ldr	r3, [r4, #0]
 800f2ba:	4433      	add	r3, r6
 800f2bc:	6023      	str	r3, [r4, #0]
 800f2be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2c2:	462a      	mov	r2, r5
 800f2c4:	f000 fae5 	bl	800f892 <_realloc_r>
 800f2c8:	4606      	mov	r6, r0
 800f2ca:	2800      	cmp	r0, #0
 800f2cc:	d1e0      	bne.n	800f290 <__ssputs_r+0x5c>
 800f2ce:	6921      	ldr	r1, [r4, #16]
 800f2d0:	4650      	mov	r0, sl
 800f2d2:	f7ff feb7 	bl	800f044 <_free_r>
 800f2d6:	230c      	movs	r3, #12
 800f2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2dc:	f8ca 3000 	str.w	r3, [sl]
 800f2e0:	89a3      	ldrh	r3, [r4, #12]
 800f2e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f2e6:	81a3      	strh	r3, [r4, #12]
 800f2e8:	e7e9      	b.n	800f2be <__ssputs_r+0x8a>
	...

0800f2ec <_svfiprintf_r>:
 800f2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2f0:	4698      	mov	r8, r3
 800f2f2:	898b      	ldrh	r3, [r1, #12]
 800f2f4:	b09d      	sub	sp, #116	@ 0x74
 800f2f6:	4607      	mov	r7, r0
 800f2f8:	061b      	lsls	r3, r3, #24
 800f2fa:	460d      	mov	r5, r1
 800f2fc:	4614      	mov	r4, r2
 800f2fe:	d510      	bpl.n	800f322 <_svfiprintf_r+0x36>
 800f300:	690b      	ldr	r3, [r1, #16]
 800f302:	b973      	cbnz	r3, 800f322 <_svfiprintf_r+0x36>
 800f304:	2140      	movs	r1, #64	@ 0x40
 800f306:	f7ff ff09 	bl	800f11c <_malloc_r>
 800f30a:	6028      	str	r0, [r5, #0]
 800f30c:	6128      	str	r0, [r5, #16]
 800f30e:	b930      	cbnz	r0, 800f31e <_svfiprintf_r+0x32>
 800f310:	230c      	movs	r3, #12
 800f312:	603b      	str	r3, [r7, #0]
 800f314:	f04f 30ff 	mov.w	r0, #4294967295
 800f318:	b01d      	add	sp, #116	@ 0x74
 800f31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f31e:	2340      	movs	r3, #64	@ 0x40
 800f320:	616b      	str	r3, [r5, #20]
 800f322:	2300      	movs	r3, #0
 800f324:	f8cd 800c 	str.w	r8, [sp, #12]
 800f328:	f04f 0901 	mov.w	r9, #1
 800f32c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800f4d0 <_svfiprintf_r+0x1e4>
 800f330:	9309      	str	r3, [sp, #36]	@ 0x24
 800f332:	2320      	movs	r3, #32
 800f334:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f338:	2330      	movs	r3, #48	@ 0x30
 800f33a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f33e:	4623      	mov	r3, r4
 800f340:	469a      	mov	sl, r3
 800f342:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f346:	b10a      	cbz	r2, 800f34c <_svfiprintf_r+0x60>
 800f348:	2a25      	cmp	r2, #37	@ 0x25
 800f34a:	d1f9      	bne.n	800f340 <_svfiprintf_r+0x54>
 800f34c:	ebba 0b04 	subs.w	fp, sl, r4
 800f350:	d00b      	beq.n	800f36a <_svfiprintf_r+0x7e>
 800f352:	465b      	mov	r3, fp
 800f354:	4622      	mov	r2, r4
 800f356:	4629      	mov	r1, r5
 800f358:	4638      	mov	r0, r7
 800f35a:	f7ff ff6b 	bl	800f234 <__ssputs_r>
 800f35e:	3001      	adds	r0, #1
 800f360:	f000 80a7 	beq.w	800f4b2 <_svfiprintf_r+0x1c6>
 800f364:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f366:	445a      	add	r2, fp
 800f368:	9209      	str	r2, [sp, #36]	@ 0x24
 800f36a:	f89a 3000 	ldrb.w	r3, [sl]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	f000 809f 	beq.w	800f4b2 <_svfiprintf_r+0x1c6>
 800f374:	2300      	movs	r3, #0
 800f376:	f04f 32ff 	mov.w	r2, #4294967295
 800f37a:	f10a 0a01 	add.w	sl, sl, #1
 800f37e:	9304      	str	r3, [sp, #16]
 800f380:	9307      	str	r3, [sp, #28]
 800f382:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f386:	931a      	str	r3, [sp, #104]	@ 0x68
 800f388:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f38c:	4654      	mov	r4, sl
 800f38e:	2205      	movs	r2, #5
 800f390:	484f      	ldr	r0, [pc, #316]	@ (800f4d0 <_svfiprintf_r+0x1e4>)
 800f392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f396:	f000 fa61 	bl	800f85c <memchr>
 800f39a:	9a04      	ldr	r2, [sp, #16]
 800f39c:	b9d8      	cbnz	r0, 800f3d6 <_svfiprintf_r+0xea>
 800f39e:	06d0      	lsls	r0, r2, #27
 800f3a0:	bf44      	itt	mi
 800f3a2:	2320      	movmi	r3, #32
 800f3a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3a8:	0711      	lsls	r1, r2, #28
 800f3aa:	bf44      	itt	mi
 800f3ac:	232b      	movmi	r3, #43	@ 0x2b
 800f3ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f3b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f3b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3b8:	d015      	beq.n	800f3e6 <_svfiprintf_r+0xfa>
 800f3ba:	9a07      	ldr	r2, [sp, #28]
 800f3bc:	4654      	mov	r4, sl
 800f3be:	2000      	movs	r0, #0
 800f3c0:	f04f 0c0a 	mov.w	ip, #10
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f3ca:	3b30      	subs	r3, #48	@ 0x30
 800f3cc:	2b09      	cmp	r3, #9
 800f3ce:	d94b      	bls.n	800f468 <_svfiprintf_r+0x17c>
 800f3d0:	b1b0      	cbz	r0, 800f400 <_svfiprintf_r+0x114>
 800f3d2:	9207      	str	r2, [sp, #28]
 800f3d4:	e014      	b.n	800f400 <_svfiprintf_r+0x114>
 800f3d6:	eba0 0308 	sub.w	r3, r0, r8
 800f3da:	46a2      	mov	sl, r4
 800f3dc:	fa09 f303 	lsl.w	r3, r9, r3
 800f3e0:	4313      	orrs	r3, r2
 800f3e2:	9304      	str	r3, [sp, #16]
 800f3e4:	e7d2      	b.n	800f38c <_svfiprintf_r+0xa0>
 800f3e6:	9b03      	ldr	r3, [sp, #12]
 800f3e8:	1d19      	adds	r1, r3, #4
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	9103      	str	r1, [sp, #12]
 800f3f0:	bfbb      	ittet	lt
 800f3f2:	425b      	neglt	r3, r3
 800f3f4:	f042 0202 	orrlt.w	r2, r2, #2
 800f3f8:	9307      	strge	r3, [sp, #28]
 800f3fa:	9307      	strlt	r3, [sp, #28]
 800f3fc:	bfb8      	it	lt
 800f3fe:	9204      	strlt	r2, [sp, #16]
 800f400:	7823      	ldrb	r3, [r4, #0]
 800f402:	2b2e      	cmp	r3, #46	@ 0x2e
 800f404:	d10a      	bne.n	800f41c <_svfiprintf_r+0x130>
 800f406:	7863      	ldrb	r3, [r4, #1]
 800f408:	2b2a      	cmp	r3, #42	@ 0x2a
 800f40a:	d132      	bne.n	800f472 <_svfiprintf_r+0x186>
 800f40c:	9b03      	ldr	r3, [sp, #12]
 800f40e:	3402      	adds	r4, #2
 800f410:	1d1a      	adds	r2, r3, #4
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f418:	9203      	str	r2, [sp, #12]
 800f41a:	9305      	str	r3, [sp, #20]
 800f41c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f4e0 <_svfiprintf_r+0x1f4>
 800f420:	2203      	movs	r2, #3
 800f422:	7821      	ldrb	r1, [r4, #0]
 800f424:	4650      	mov	r0, sl
 800f426:	f000 fa19 	bl	800f85c <memchr>
 800f42a:	b138      	cbz	r0, 800f43c <_svfiprintf_r+0x150>
 800f42c:	eba0 000a 	sub.w	r0, r0, sl
 800f430:	2240      	movs	r2, #64	@ 0x40
 800f432:	9b04      	ldr	r3, [sp, #16]
 800f434:	3401      	adds	r4, #1
 800f436:	4082      	lsls	r2, r0
 800f438:	4313      	orrs	r3, r2
 800f43a:	9304      	str	r3, [sp, #16]
 800f43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f440:	2206      	movs	r2, #6
 800f442:	4824      	ldr	r0, [pc, #144]	@ (800f4d4 <_svfiprintf_r+0x1e8>)
 800f444:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f448:	f000 fa08 	bl	800f85c <memchr>
 800f44c:	2800      	cmp	r0, #0
 800f44e:	d036      	beq.n	800f4be <_svfiprintf_r+0x1d2>
 800f450:	4b21      	ldr	r3, [pc, #132]	@ (800f4d8 <_svfiprintf_r+0x1ec>)
 800f452:	bb1b      	cbnz	r3, 800f49c <_svfiprintf_r+0x1b0>
 800f454:	9b03      	ldr	r3, [sp, #12]
 800f456:	3307      	adds	r3, #7
 800f458:	f023 0307 	bic.w	r3, r3, #7
 800f45c:	3308      	adds	r3, #8
 800f45e:	9303      	str	r3, [sp, #12]
 800f460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f462:	4433      	add	r3, r6
 800f464:	9309      	str	r3, [sp, #36]	@ 0x24
 800f466:	e76a      	b.n	800f33e <_svfiprintf_r+0x52>
 800f468:	fb0c 3202 	mla	r2, ip, r2, r3
 800f46c:	460c      	mov	r4, r1
 800f46e:	2001      	movs	r0, #1
 800f470:	e7a8      	b.n	800f3c4 <_svfiprintf_r+0xd8>
 800f472:	2300      	movs	r3, #0
 800f474:	3401      	adds	r4, #1
 800f476:	f04f 0c0a 	mov.w	ip, #10
 800f47a:	4619      	mov	r1, r3
 800f47c:	9305      	str	r3, [sp, #20]
 800f47e:	4620      	mov	r0, r4
 800f480:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f484:	3a30      	subs	r2, #48	@ 0x30
 800f486:	2a09      	cmp	r2, #9
 800f488:	d903      	bls.n	800f492 <_svfiprintf_r+0x1a6>
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d0c6      	beq.n	800f41c <_svfiprintf_r+0x130>
 800f48e:	9105      	str	r1, [sp, #20]
 800f490:	e7c4      	b.n	800f41c <_svfiprintf_r+0x130>
 800f492:	fb0c 2101 	mla	r1, ip, r1, r2
 800f496:	4604      	mov	r4, r0
 800f498:	2301      	movs	r3, #1
 800f49a:	e7f0      	b.n	800f47e <_svfiprintf_r+0x192>
 800f49c:	ab03      	add	r3, sp, #12
 800f49e:	462a      	mov	r2, r5
 800f4a0:	a904      	add	r1, sp, #16
 800f4a2:	4638      	mov	r0, r7
 800f4a4:	9300      	str	r3, [sp, #0]
 800f4a6:	4b0d      	ldr	r3, [pc, #52]	@ (800f4dc <_svfiprintf_r+0x1f0>)
 800f4a8:	f3af 8000 	nop.w
 800f4ac:	1c42      	adds	r2, r0, #1
 800f4ae:	4606      	mov	r6, r0
 800f4b0:	d1d6      	bne.n	800f460 <_svfiprintf_r+0x174>
 800f4b2:	89ab      	ldrh	r3, [r5, #12]
 800f4b4:	065b      	lsls	r3, r3, #25
 800f4b6:	f53f af2d 	bmi.w	800f314 <_svfiprintf_r+0x28>
 800f4ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4bc:	e72c      	b.n	800f318 <_svfiprintf_r+0x2c>
 800f4be:	ab03      	add	r3, sp, #12
 800f4c0:	462a      	mov	r2, r5
 800f4c2:	a904      	add	r1, sp, #16
 800f4c4:	4638      	mov	r0, r7
 800f4c6:	9300      	str	r3, [sp, #0]
 800f4c8:	4b04      	ldr	r3, [pc, #16]	@ (800f4dc <_svfiprintf_r+0x1f0>)
 800f4ca:	f000 f87d 	bl	800f5c8 <_printf_i>
 800f4ce:	e7ed      	b.n	800f4ac <_svfiprintf_r+0x1c0>
 800f4d0:	0800f9bc 	.word	0x0800f9bc
 800f4d4:	0800f9c6 	.word	0x0800f9c6
 800f4d8:	00000000 	.word	0x00000000
 800f4dc:	0800f235 	.word	0x0800f235
 800f4e0:	0800f9c2 	.word	0x0800f9c2

0800f4e4 <_printf_common>:
 800f4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4e8:	4616      	mov	r6, r2
 800f4ea:	4698      	mov	r8, r3
 800f4ec:	688a      	ldr	r2, [r1, #8]
 800f4ee:	4607      	mov	r7, r0
 800f4f0:	690b      	ldr	r3, [r1, #16]
 800f4f2:	460c      	mov	r4, r1
 800f4f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	bfb8      	it	lt
 800f4fc:	4613      	movlt	r3, r2
 800f4fe:	6033      	str	r3, [r6, #0]
 800f500:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f504:	b10a      	cbz	r2, 800f50a <_printf_common+0x26>
 800f506:	3301      	adds	r3, #1
 800f508:	6033      	str	r3, [r6, #0]
 800f50a:	6823      	ldr	r3, [r4, #0]
 800f50c:	0699      	lsls	r1, r3, #26
 800f50e:	bf42      	ittt	mi
 800f510:	6833      	ldrmi	r3, [r6, #0]
 800f512:	3302      	addmi	r3, #2
 800f514:	6033      	strmi	r3, [r6, #0]
 800f516:	6825      	ldr	r5, [r4, #0]
 800f518:	f015 0506 	ands.w	r5, r5, #6
 800f51c:	d106      	bne.n	800f52c <_printf_common+0x48>
 800f51e:	f104 0a19 	add.w	sl, r4, #25
 800f522:	68e3      	ldr	r3, [r4, #12]
 800f524:	6832      	ldr	r2, [r6, #0]
 800f526:	1a9b      	subs	r3, r3, r2
 800f528:	42ab      	cmp	r3, r5
 800f52a:	dc2b      	bgt.n	800f584 <_printf_common+0xa0>
 800f52c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f530:	6822      	ldr	r2, [r4, #0]
 800f532:	3b00      	subs	r3, #0
 800f534:	bf18      	it	ne
 800f536:	2301      	movne	r3, #1
 800f538:	0692      	lsls	r2, r2, #26
 800f53a:	d430      	bmi.n	800f59e <_printf_common+0xba>
 800f53c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f540:	4641      	mov	r1, r8
 800f542:	4638      	mov	r0, r7
 800f544:	47c8      	blx	r9
 800f546:	3001      	adds	r0, #1
 800f548:	d023      	beq.n	800f592 <_printf_common+0xae>
 800f54a:	6823      	ldr	r3, [r4, #0]
 800f54c:	341a      	adds	r4, #26
 800f54e:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f552:	f003 0306 	and.w	r3, r3, #6
 800f556:	2b04      	cmp	r3, #4
 800f558:	bf0a      	itet	eq
 800f55a:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800f55e:	2500      	movne	r5, #0
 800f560:	6833      	ldreq	r3, [r6, #0]
 800f562:	f04f 0600 	mov.w	r6, #0
 800f566:	bf08      	it	eq
 800f568:	1aed      	subeq	r5, r5, r3
 800f56a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f56e:	bf08      	it	eq
 800f570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f574:	4293      	cmp	r3, r2
 800f576:	bfc4      	itt	gt
 800f578:	1a9b      	subgt	r3, r3, r2
 800f57a:	18ed      	addgt	r5, r5, r3
 800f57c:	42b5      	cmp	r5, r6
 800f57e:	d11a      	bne.n	800f5b6 <_printf_common+0xd2>
 800f580:	2000      	movs	r0, #0
 800f582:	e008      	b.n	800f596 <_printf_common+0xb2>
 800f584:	2301      	movs	r3, #1
 800f586:	4652      	mov	r2, sl
 800f588:	4641      	mov	r1, r8
 800f58a:	4638      	mov	r0, r7
 800f58c:	47c8      	blx	r9
 800f58e:	3001      	adds	r0, #1
 800f590:	d103      	bne.n	800f59a <_printf_common+0xb6>
 800f592:	f04f 30ff 	mov.w	r0, #4294967295
 800f596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f59a:	3501      	adds	r5, #1
 800f59c:	e7c1      	b.n	800f522 <_printf_common+0x3e>
 800f59e:	18e1      	adds	r1, r4, r3
 800f5a0:	1c5a      	adds	r2, r3, #1
 800f5a2:	2030      	movs	r0, #48	@ 0x30
 800f5a4:	3302      	adds	r3, #2
 800f5a6:	4422      	add	r2, r4
 800f5a8:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f5ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f5b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f5b4:	e7c2      	b.n	800f53c <_printf_common+0x58>
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	4622      	mov	r2, r4
 800f5ba:	4641      	mov	r1, r8
 800f5bc:	4638      	mov	r0, r7
 800f5be:	47c8      	blx	r9
 800f5c0:	3001      	adds	r0, #1
 800f5c2:	d0e6      	beq.n	800f592 <_printf_common+0xae>
 800f5c4:	3601      	adds	r6, #1
 800f5c6:	e7d9      	b.n	800f57c <_printf_common+0x98>

0800f5c8 <_printf_i>:
 800f5c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f5cc:	7e0f      	ldrb	r7, [r1, #24]
 800f5ce:	4691      	mov	r9, r2
 800f5d0:	4680      	mov	r8, r0
 800f5d2:	460c      	mov	r4, r1
 800f5d4:	2f78      	cmp	r7, #120	@ 0x78
 800f5d6:	469a      	mov	sl, r3
 800f5d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f5da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f5de:	d807      	bhi.n	800f5f0 <_printf_i+0x28>
 800f5e0:	2f62      	cmp	r7, #98	@ 0x62
 800f5e2:	d80a      	bhi.n	800f5fa <_printf_i+0x32>
 800f5e4:	2f00      	cmp	r7, #0
 800f5e6:	f000 80d2 	beq.w	800f78e <_printf_i+0x1c6>
 800f5ea:	2f58      	cmp	r7, #88	@ 0x58
 800f5ec:	f000 80b9 	beq.w	800f762 <_printf_i+0x19a>
 800f5f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f5f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f5f8:	e03a      	b.n	800f670 <_printf_i+0xa8>
 800f5fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f5fe:	2b15      	cmp	r3, #21
 800f600:	d8f6      	bhi.n	800f5f0 <_printf_i+0x28>
 800f602:	a101      	add	r1, pc, #4	@ (adr r1, 800f608 <_printf_i+0x40>)
 800f604:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f608:	0800f661 	.word	0x0800f661
 800f60c:	0800f675 	.word	0x0800f675
 800f610:	0800f5f1 	.word	0x0800f5f1
 800f614:	0800f5f1 	.word	0x0800f5f1
 800f618:	0800f5f1 	.word	0x0800f5f1
 800f61c:	0800f5f1 	.word	0x0800f5f1
 800f620:	0800f675 	.word	0x0800f675
 800f624:	0800f5f1 	.word	0x0800f5f1
 800f628:	0800f5f1 	.word	0x0800f5f1
 800f62c:	0800f5f1 	.word	0x0800f5f1
 800f630:	0800f5f1 	.word	0x0800f5f1
 800f634:	0800f775 	.word	0x0800f775
 800f638:	0800f69f 	.word	0x0800f69f
 800f63c:	0800f72f 	.word	0x0800f72f
 800f640:	0800f5f1 	.word	0x0800f5f1
 800f644:	0800f5f1 	.word	0x0800f5f1
 800f648:	0800f797 	.word	0x0800f797
 800f64c:	0800f5f1 	.word	0x0800f5f1
 800f650:	0800f69f 	.word	0x0800f69f
 800f654:	0800f5f1 	.word	0x0800f5f1
 800f658:	0800f5f1 	.word	0x0800f5f1
 800f65c:	0800f737 	.word	0x0800f737
 800f660:	6833      	ldr	r3, [r6, #0]
 800f662:	1d1a      	adds	r2, r3, #4
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	6032      	str	r2, [r6, #0]
 800f668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f66c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f670:	2301      	movs	r3, #1
 800f672:	e09d      	b.n	800f7b0 <_printf_i+0x1e8>
 800f674:	6833      	ldr	r3, [r6, #0]
 800f676:	6820      	ldr	r0, [r4, #0]
 800f678:	1d19      	adds	r1, r3, #4
 800f67a:	6031      	str	r1, [r6, #0]
 800f67c:	0606      	lsls	r6, r0, #24
 800f67e:	d501      	bpl.n	800f684 <_printf_i+0xbc>
 800f680:	681d      	ldr	r5, [r3, #0]
 800f682:	e003      	b.n	800f68c <_printf_i+0xc4>
 800f684:	0645      	lsls	r5, r0, #25
 800f686:	d5fb      	bpl.n	800f680 <_printf_i+0xb8>
 800f688:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f68c:	2d00      	cmp	r5, #0
 800f68e:	da03      	bge.n	800f698 <_printf_i+0xd0>
 800f690:	232d      	movs	r3, #45	@ 0x2d
 800f692:	426d      	negs	r5, r5
 800f694:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f698:	4859      	ldr	r0, [pc, #356]	@ (800f800 <_printf_i+0x238>)
 800f69a:	230a      	movs	r3, #10
 800f69c:	e011      	b.n	800f6c2 <_printf_i+0xfa>
 800f69e:	6821      	ldr	r1, [r4, #0]
 800f6a0:	6833      	ldr	r3, [r6, #0]
 800f6a2:	0608      	lsls	r0, r1, #24
 800f6a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f6a8:	d402      	bmi.n	800f6b0 <_printf_i+0xe8>
 800f6aa:	0649      	lsls	r1, r1, #25
 800f6ac:	bf48      	it	mi
 800f6ae:	b2ad      	uxthmi	r5, r5
 800f6b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f6b2:	6033      	str	r3, [r6, #0]
 800f6b4:	4852      	ldr	r0, [pc, #328]	@ (800f800 <_printf_i+0x238>)
 800f6b6:	bf14      	ite	ne
 800f6b8:	230a      	movne	r3, #10
 800f6ba:	2308      	moveq	r3, #8
 800f6bc:	2100      	movs	r1, #0
 800f6be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f6c2:	6866      	ldr	r6, [r4, #4]
 800f6c4:	2e00      	cmp	r6, #0
 800f6c6:	60a6      	str	r6, [r4, #8]
 800f6c8:	bfa2      	ittt	ge
 800f6ca:	6821      	ldrge	r1, [r4, #0]
 800f6cc:	f021 0104 	bicge.w	r1, r1, #4
 800f6d0:	6021      	strge	r1, [r4, #0]
 800f6d2:	b90d      	cbnz	r5, 800f6d8 <_printf_i+0x110>
 800f6d4:	2e00      	cmp	r6, #0
 800f6d6:	d04b      	beq.n	800f770 <_printf_i+0x1a8>
 800f6d8:	4616      	mov	r6, r2
 800f6da:	fbb5 f1f3 	udiv	r1, r5, r3
 800f6de:	fb03 5711 	mls	r7, r3, r1, r5
 800f6e2:	5dc7      	ldrb	r7, [r0, r7]
 800f6e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f6e8:	462f      	mov	r7, r5
 800f6ea:	460d      	mov	r5, r1
 800f6ec:	42bb      	cmp	r3, r7
 800f6ee:	d9f4      	bls.n	800f6da <_printf_i+0x112>
 800f6f0:	2b08      	cmp	r3, #8
 800f6f2:	d10b      	bne.n	800f70c <_printf_i+0x144>
 800f6f4:	6823      	ldr	r3, [r4, #0]
 800f6f6:	07df      	lsls	r7, r3, #31
 800f6f8:	d508      	bpl.n	800f70c <_printf_i+0x144>
 800f6fa:	6923      	ldr	r3, [r4, #16]
 800f6fc:	6861      	ldr	r1, [r4, #4]
 800f6fe:	4299      	cmp	r1, r3
 800f700:	bfde      	ittt	le
 800f702:	2330      	movle	r3, #48	@ 0x30
 800f704:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f708:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f70c:	1b92      	subs	r2, r2, r6
 800f70e:	6122      	str	r2, [r4, #16]
 800f710:	464b      	mov	r3, r9
 800f712:	aa03      	add	r2, sp, #12
 800f714:	4621      	mov	r1, r4
 800f716:	4640      	mov	r0, r8
 800f718:	f8cd a000 	str.w	sl, [sp]
 800f71c:	f7ff fee2 	bl	800f4e4 <_printf_common>
 800f720:	3001      	adds	r0, #1
 800f722:	d14a      	bne.n	800f7ba <_printf_i+0x1f2>
 800f724:	f04f 30ff 	mov.w	r0, #4294967295
 800f728:	b004      	add	sp, #16
 800f72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f72e:	6823      	ldr	r3, [r4, #0]
 800f730:	f043 0320 	orr.w	r3, r3, #32
 800f734:	6023      	str	r3, [r4, #0]
 800f736:	2778      	movs	r7, #120	@ 0x78
 800f738:	4832      	ldr	r0, [pc, #200]	@ (800f804 <_printf_i+0x23c>)
 800f73a:	6823      	ldr	r3, [r4, #0]
 800f73c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f740:	061f      	lsls	r7, r3, #24
 800f742:	6831      	ldr	r1, [r6, #0]
 800f744:	f851 5b04 	ldr.w	r5, [r1], #4
 800f748:	d402      	bmi.n	800f750 <_printf_i+0x188>
 800f74a:	065f      	lsls	r7, r3, #25
 800f74c:	bf48      	it	mi
 800f74e:	b2ad      	uxthmi	r5, r5
 800f750:	6031      	str	r1, [r6, #0]
 800f752:	07d9      	lsls	r1, r3, #31
 800f754:	bf44      	itt	mi
 800f756:	f043 0320 	orrmi.w	r3, r3, #32
 800f75a:	6023      	strmi	r3, [r4, #0]
 800f75c:	b11d      	cbz	r5, 800f766 <_printf_i+0x19e>
 800f75e:	2310      	movs	r3, #16
 800f760:	e7ac      	b.n	800f6bc <_printf_i+0xf4>
 800f762:	4827      	ldr	r0, [pc, #156]	@ (800f800 <_printf_i+0x238>)
 800f764:	e7e9      	b.n	800f73a <_printf_i+0x172>
 800f766:	6823      	ldr	r3, [r4, #0]
 800f768:	f023 0320 	bic.w	r3, r3, #32
 800f76c:	6023      	str	r3, [r4, #0]
 800f76e:	e7f6      	b.n	800f75e <_printf_i+0x196>
 800f770:	4616      	mov	r6, r2
 800f772:	e7bd      	b.n	800f6f0 <_printf_i+0x128>
 800f774:	6833      	ldr	r3, [r6, #0]
 800f776:	6825      	ldr	r5, [r4, #0]
 800f778:	1d18      	adds	r0, r3, #4
 800f77a:	6961      	ldr	r1, [r4, #20]
 800f77c:	6030      	str	r0, [r6, #0]
 800f77e:	062e      	lsls	r6, r5, #24
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	d501      	bpl.n	800f788 <_printf_i+0x1c0>
 800f784:	6019      	str	r1, [r3, #0]
 800f786:	e002      	b.n	800f78e <_printf_i+0x1c6>
 800f788:	0668      	lsls	r0, r5, #25
 800f78a:	d5fb      	bpl.n	800f784 <_printf_i+0x1bc>
 800f78c:	8019      	strh	r1, [r3, #0]
 800f78e:	2300      	movs	r3, #0
 800f790:	4616      	mov	r6, r2
 800f792:	6123      	str	r3, [r4, #16]
 800f794:	e7bc      	b.n	800f710 <_printf_i+0x148>
 800f796:	6833      	ldr	r3, [r6, #0]
 800f798:	2100      	movs	r1, #0
 800f79a:	1d1a      	adds	r2, r3, #4
 800f79c:	6032      	str	r2, [r6, #0]
 800f79e:	681e      	ldr	r6, [r3, #0]
 800f7a0:	6862      	ldr	r2, [r4, #4]
 800f7a2:	4630      	mov	r0, r6
 800f7a4:	f000 f85a 	bl	800f85c <memchr>
 800f7a8:	b108      	cbz	r0, 800f7ae <_printf_i+0x1e6>
 800f7aa:	1b80      	subs	r0, r0, r6
 800f7ac:	6060      	str	r0, [r4, #4]
 800f7ae:	6863      	ldr	r3, [r4, #4]
 800f7b0:	6123      	str	r3, [r4, #16]
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f7b8:	e7aa      	b.n	800f710 <_printf_i+0x148>
 800f7ba:	6923      	ldr	r3, [r4, #16]
 800f7bc:	4632      	mov	r2, r6
 800f7be:	4649      	mov	r1, r9
 800f7c0:	4640      	mov	r0, r8
 800f7c2:	47d0      	blx	sl
 800f7c4:	3001      	adds	r0, #1
 800f7c6:	d0ad      	beq.n	800f724 <_printf_i+0x15c>
 800f7c8:	6823      	ldr	r3, [r4, #0]
 800f7ca:	079b      	lsls	r3, r3, #30
 800f7cc:	d413      	bmi.n	800f7f6 <_printf_i+0x22e>
 800f7ce:	68e0      	ldr	r0, [r4, #12]
 800f7d0:	9b03      	ldr	r3, [sp, #12]
 800f7d2:	4298      	cmp	r0, r3
 800f7d4:	bfb8      	it	lt
 800f7d6:	4618      	movlt	r0, r3
 800f7d8:	e7a6      	b.n	800f728 <_printf_i+0x160>
 800f7da:	2301      	movs	r3, #1
 800f7dc:	4632      	mov	r2, r6
 800f7de:	4649      	mov	r1, r9
 800f7e0:	4640      	mov	r0, r8
 800f7e2:	47d0      	blx	sl
 800f7e4:	3001      	adds	r0, #1
 800f7e6:	d09d      	beq.n	800f724 <_printf_i+0x15c>
 800f7e8:	3501      	adds	r5, #1
 800f7ea:	68e3      	ldr	r3, [r4, #12]
 800f7ec:	9903      	ldr	r1, [sp, #12]
 800f7ee:	1a5b      	subs	r3, r3, r1
 800f7f0:	42ab      	cmp	r3, r5
 800f7f2:	dcf2      	bgt.n	800f7da <_printf_i+0x212>
 800f7f4:	e7eb      	b.n	800f7ce <_printf_i+0x206>
 800f7f6:	2500      	movs	r5, #0
 800f7f8:	f104 0619 	add.w	r6, r4, #25
 800f7fc:	e7f5      	b.n	800f7ea <_printf_i+0x222>
 800f7fe:	bf00      	nop
 800f800:	0800f9cd 	.word	0x0800f9cd
 800f804:	0800f9de 	.word	0x0800f9de

0800f808 <memmove>:
 800f808:	4288      	cmp	r0, r1
 800f80a:	b510      	push	{r4, lr}
 800f80c:	eb01 0402 	add.w	r4, r1, r2
 800f810:	d902      	bls.n	800f818 <memmove+0x10>
 800f812:	4284      	cmp	r4, r0
 800f814:	4623      	mov	r3, r4
 800f816:	d807      	bhi.n	800f828 <memmove+0x20>
 800f818:	1e43      	subs	r3, r0, #1
 800f81a:	42a1      	cmp	r1, r4
 800f81c:	d008      	beq.n	800f830 <memmove+0x28>
 800f81e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f822:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f826:	e7f8      	b.n	800f81a <memmove+0x12>
 800f828:	4402      	add	r2, r0
 800f82a:	4601      	mov	r1, r0
 800f82c:	428a      	cmp	r2, r1
 800f82e:	d100      	bne.n	800f832 <memmove+0x2a>
 800f830:	bd10      	pop	{r4, pc}
 800f832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f836:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f83a:	e7f7      	b.n	800f82c <memmove+0x24>

0800f83c <_sbrk_r>:
 800f83c:	b538      	push	{r3, r4, r5, lr}
 800f83e:	2300      	movs	r3, #0
 800f840:	4d05      	ldr	r5, [pc, #20]	@ (800f858 <_sbrk_r+0x1c>)
 800f842:	4604      	mov	r4, r0
 800f844:	4608      	mov	r0, r1
 800f846:	602b      	str	r3, [r5, #0]
 800f848:	f7f1 fc88 	bl	800115c <_sbrk>
 800f84c:	1c43      	adds	r3, r0, #1
 800f84e:	d102      	bne.n	800f856 <_sbrk_r+0x1a>
 800f850:	682b      	ldr	r3, [r5, #0]
 800f852:	b103      	cbz	r3, 800f856 <_sbrk_r+0x1a>
 800f854:	6023      	str	r3, [r4, #0]
 800f856:	bd38      	pop	{r3, r4, r5, pc}
 800f858:	200011d8 	.word	0x200011d8

0800f85c <memchr>:
 800f85c:	b2c9      	uxtb	r1, r1
 800f85e:	4603      	mov	r3, r0
 800f860:	4402      	add	r2, r0
 800f862:	b510      	push	{r4, lr}
 800f864:	4293      	cmp	r3, r2
 800f866:	4618      	mov	r0, r3
 800f868:	d101      	bne.n	800f86e <memchr+0x12>
 800f86a:	2000      	movs	r0, #0
 800f86c:	e003      	b.n	800f876 <memchr+0x1a>
 800f86e:	7804      	ldrb	r4, [r0, #0]
 800f870:	3301      	adds	r3, #1
 800f872:	428c      	cmp	r4, r1
 800f874:	d1f6      	bne.n	800f864 <memchr+0x8>
 800f876:	bd10      	pop	{r4, pc}

0800f878 <memcpy>:
 800f878:	440a      	add	r2, r1
 800f87a:	1e43      	subs	r3, r0, #1
 800f87c:	4291      	cmp	r1, r2
 800f87e:	d100      	bne.n	800f882 <memcpy+0xa>
 800f880:	4770      	bx	lr
 800f882:	b510      	push	{r4, lr}
 800f884:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f888:	4291      	cmp	r1, r2
 800f88a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f88e:	d1f9      	bne.n	800f884 <memcpy+0xc>
 800f890:	bd10      	pop	{r4, pc}

0800f892 <_realloc_r>:
 800f892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f896:	4680      	mov	r8, r0
 800f898:	4615      	mov	r5, r2
 800f89a:	460c      	mov	r4, r1
 800f89c:	b921      	cbnz	r1, 800f8a8 <_realloc_r+0x16>
 800f89e:	4611      	mov	r1, r2
 800f8a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8a4:	f7ff bc3a 	b.w	800f11c <_malloc_r>
 800f8a8:	b92a      	cbnz	r2, 800f8b6 <_realloc_r+0x24>
 800f8aa:	f7ff fbcb 	bl	800f044 <_free_r>
 800f8ae:	2400      	movs	r4, #0
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f8b6:	f000 f81a 	bl	800f8ee <_malloc_usable_size_r>
 800f8ba:	4285      	cmp	r5, r0
 800f8bc:	4606      	mov	r6, r0
 800f8be:	d802      	bhi.n	800f8c6 <_realloc_r+0x34>
 800f8c0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f8c4:	d8f4      	bhi.n	800f8b0 <_realloc_r+0x1e>
 800f8c6:	4629      	mov	r1, r5
 800f8c8:	4640      	mov	r0, r8
 800f8ca:	f7ff fc27 	bl	800f11c <_malloc_r>
 800f8ce:	4607      	mov	r7, r0
 800f8d0:	2800      	cmp	r0, #0
 800f8d2:	d0ec      	beq.n	800f8ae <_realloc_r+0x1c>
 800f8d4:	42b5      	cmp	r5, r6
 800f8d6:	462a      	mov	r2, r5
 800f8d8:	4621      	mov	r1, r4
 800f8da:	bf28      	it	cs
 800f8dc:	4632      	movcs	r2, r6
 800f8de:	f7ff ffcb 	bl	800f878 <memcpy>
 800f8e2:	4621      	mov	r1, r4
 800f8e4:	4640      	mov	r0, r8
 800f8e6:	463c      	mov	r4, r7
 800f8e8:	f7ff fbac 	bl	800f044 <_free_r>
 800f8ec:	e7e0      	b.n	800f8b0 <_realloc_r+0x1e>

0800f8ee <_malloc_usable_size_r>:
 800f8ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f8f2:	1f18      	subs	r0, r3, #4
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	bfbc      	itt	lt
 800f8f8:	580b      	ldrlt	r3, [r1, r0]
 800f8fa:	18c0      	addlt	r0, r0, r3
 800f8fc:	4770      	bx	lr
	...

0800f900 <_init>:
 800f900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f902:	bf00      	nop
 800f904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f906:	bc08      	pop	{r3}
 800f908:	469e      	mov	lr, r3
 800f90a:	4770      	bx	lr

0800f90c <_fini>:
 800f90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f90e:	bf00      	nop
 800f910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f912:	bc08      	pop	{r3}
 800f914:	469e      	mov	lr, r3
 800f916:	4770      	bx	lr
