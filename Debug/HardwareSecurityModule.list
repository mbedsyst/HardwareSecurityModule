
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa24  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000fe80  0800fc70  0800fc70  00010c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801faf0  0801faf0  00021124  2**0
                  CONTENTS
  4 .ARM          00000008  0801faf0  0801faf0  00020af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801faf8  0801faf8  00021124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801faf8  0801faf8  00020af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801fafc  0801fafc  00020afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000124  20000000  0801fb00  00021000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001044  20000124  0801fc24  00021124  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20001168  0801fc24  00021168  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00021124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025998  00000000  00000000  0002115a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a0c  00000000  00000000  00046af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd8  00000000  00000000  0004b500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001629  00000000  00000000  0004d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006eed  00000000  00000000  0004e801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000287e6  00000000  00000000  000556ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014954b  00000000  00000000  0007ded4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001c741f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b24  00000000  00000000  001c7464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001cef88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000124 	.word	0x20000124
 8000268:	00000000 	.word	0x00000000
 800026c:	0800fc58 	.word	0x0800fc58

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000128 	.word	0x20000128
 8000288:	0800fc58 	.word	0x0800fc58

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b97e 	b.w	80005b0 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d2:	460c      	mov	r4, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14d      	bne.n	8000374 <__udivmoddi4+0xa8>
 80002d8:	428a      	cmp	r2, r1
 80002da:	460f      	mov	r7, r1
 80002dc:	4684      	mov	ip, r0
 80002de:	4696      	mov	lr, r2
 80002e0:	fab2 f382 	clz	r3, r2
 80002e4:	d960      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80002e6:	b14b      	cbz	r3, 80002fc <__udivmoddi4+0x30>
 80002e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002ec:	f1c3 0220 	rsb	r2, r3, #32
 80002f0:	409f      	lsls	r7, r3
 80002f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000300:	fa1f f48e 	uxth.w	r4, lr
 8000304:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000308:	fbb7 f1f6 	udiv	r1, r7, r6
 800030c:	fb06 7711 	mls	r7, r6, r1, r7
 8000310:	fb01 f004 	mul.w	r0, r1, r4
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	4290      	cmp	r0, r2
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x62>
 800031c:	eb1e 0202 	adds.w	r2, lr, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x60>
 8000326:	4290      	cmp	r0, r2
 8000328:	f200 812d 	bhi.w	8000586 <__udivmoddi4+0x2ba>
 800032c:	4639      	mov	r1, r7
 800032e:	1a12      	subs	r2, r2, r0
 8000330:	fa1f fc8c 	uxth.w	ip, ip
 8000334:	fbb2 f0f6 	udiv	r0, r2, r6
 8000338:	fb06 2210 	mls	r2, r6, r0, r2
 800033c:	fb00 f404 	mul.w	r4, r0, r4
 8000340:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000344:	4564      	cmp	r4, ip
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x8e>
 8000348:	eb1e 0c0c 	adds.w	ip, lr, ip
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x8c>
 8000352:	4564      	cmp	r4, ip
 8000354:	f200 811a 	bhi.w	800058c <__udivmoddi4+0x2c0>
 8000358:	4610      	mov	r0, r2
 800035a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035e:	ebac 0c04 	sub.w	ip, ip, r4
 8000362:	2100      	movs	r1, #0
 8000364:	b125      	cbz	r5, 8000370 <__udivmoddi4+0xa4>
 8000366:	fa2c f303 	lsr.w	r3, ip, r3
 800036a:	2200      	movs	r2, #0
 800036c:	e9c5 3200 	strd	r3, r2, [r5]
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d905      	bls.n	8000384 <__udivmoddi4+0xb8>
 8000378:	b10d      	cbz	r5, 800037e <__udivmoddi4+0xb2>
 800037a:	e9c5 0100 	strd	r0, r1, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	4608      	mov	r0, r1
 8000382:	e7f5      	b.n	8000370 <__udivmoddi4+0xa4>
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d14d      	bne.n	8000428 <__udivmoddi4+0x15c>
 800038c:	42a3      	cmp	r3, r4
 800038e:	f0c0 80f2 	bcc.w	8000576 <__udivmoddi4+0x2aa>
 8000392:	4290      	cmp	r0, r2
 8000394:	f080 80ef 	bcs.w	8000576 <__udivmoddi4+0x2aa>
 8000398:	4606      	mov	r6, r0
 800039a:	4623      	mov	r3, r4
 800039c:	4608      	mov	r0, r1
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e6      	beq.n	8000370 <__udivmoddi4+0xa4>
 80003a2:	e9c5 6300 	strd	r6, r3, [r5]
 80003a6:	e7e3      	b.n	8000370 <__udivmoddi4+0xa4>
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 80a2 	bne.w	80004f2 <__udivmoddi4+0x226>
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b4:	fa1f f68e 	uxth.w	r6, lr
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80003be:	fb07 2014 	mls	r0, r7, r4, r2
 80003c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb06 f004 	mul.w	r0, r6, r4
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d90f      	bls.n	80003f2 <__udivmoddi4+0x126>
 80003d2:	eb1e 0202 	adds.w	r2, lr, r2
 80003d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003da:	bf2c      	ite	cs
 80003dc:	f04f 0901 	movcs.w	r9, #1
 80003e0:	f04f 0900 	movcc.w	r9, #0
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d903      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003e8:	f1b9 0f00 	cmp.w	r9, #0
 80003ec:	f000 80c8 	beq.w	8000580 <__udivmoddi4+0x2b4>
 80003f0:	4644      	mov	r4, r8
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	fa1f fc8c 	uxth.w	ip, ip
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	fb00 f606 	mul.w	r6, r0, r6
 8000404:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000408:	4566      	cmp	r6, ip
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x152>
 800040c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x150>
 8000416:	4566      	cmp	r6, ip
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c6>
 800041c:	4610      	mov	r0, r2
 800041e:	ebac 0c06 	sub.w	ip, ip, r6
 8000422:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000426:	e79d      	b.n	8000364 <__udivmoddi4+0x98>
 8000428:	f1c1 0620 	rsb	r6, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	fa20 fc06 	lsr.w	ip, r0, r6
 800043a:	40f4      	lsrs	r4, r6
 800043c:	408a      	lsls	r2, r1
 800043e:	431f      	orrs	r7, r3
 8000440:	ea4e 030c 	orr.w	r3, lr, ip
 8000444:	fa00 fe01 	lsl.w	lr, r0, r1
 8000448:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800044c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000450:	fa1f fc87 	uxth.w	ip, r7
 8000454:	fbb4 f0f8 	udiv	r0, r4, r8
 8000458:	fb08 4410 	mls	r4, r8, r0, r4
 800045c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000460:	fb00 f90c 	mul.w	r9, r0, ip
 8000464:	45a1      	cmp	r9, r4
 8000466:	d90e      	bls.n	8000486 <__udivmoddi4+0x1ba>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 3aff 	add.w	sl, r0, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	45a1      	cmp	r9, r4
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b8>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 8093 	beq.w	80005aa <__udivmoddi4+0x2de>
 8000484:	4650      	mov	r0, sl
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000492:	fb08 4413 	mls	r4, r8, r3, r4
 8000496:	fb03 fc0c 	mul.w	ip, r3, ip
 800049a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d906      	bls.n	80004b0 <__udivmoddi4+0x1e4>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x1e2>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d87a      	bhi.n	80005a4 <__udivmoddi4+0x2d8>
 80004ae:	4643      	mov	r3, r8
 80004b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b4:	eba4 040c 	sub.w	r4, r4, ip
 80004b8:	fba0 9802 	umull	r9, r8, r0, r2
 80004bc:	4544      	cmp	r4, r8
 80004be:	46cc      	mov	ip, r9
 80004c0:	4643      	mov	r3, r8
 80004c2:	d302      	bcc.n	80004ca <__udivmoddi4+0x1fe>
 80004c4:	d106      	bne.n	80004d4 <__udivmoddi4+0x208>
 80004c6:	45ce      	cmp	lr, r9
 80004c8:	d204      	bcs.n	80004d4 <__udivmoddi4+0x208>
 80004ca:	3801      	subs	r0, #1
 80004cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004d0:	eb68 0307 	sbc.w	r3, r8, r7
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x222>
 80004d6:	ebbe 020c 	subs.w	r2, lr, ip
 80004da:	eb64 0403 	sbc.w	r4, r4, r3
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e73e      	b.n	8000370 <__udivmoddi4+0xa4>
 80004f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f6:	f1c3 0120 	rsb	r1, r3, #32
 80004fa:	fa04 f203 	lsl.w	r2, r4, r3
 80004fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000508:	fa20 f101 	lsr.w	r1, r0, r1
 800050c:	fa1f f68e 	uxth.w	r6, lr
 8000510:	fbb4 f0f7 	udiv	r0, r4, r7
 8000514:	430a      	orrs	r2, r1
 8000516:	fb07 4410 	mls	r4, r7, r0, r4
 800051a:	0c11      	lsrs	r1, r2, #16
 800051c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000520:	fb00 f406 	mul.w	r4, r0, r6
 8000524:	428c      	cmp	r4, r1
 8000526:	d90e      	bls.n	8000546 <__udivmoddi4+0x27a>
 8000528:	eb1e 0101 	adds.w	r1, lr, r1
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0901 	movcs.w	r9, #1
 8000536:	f04f 0900 	movcc.w	r9, #0
 800053a:	428c      	cmp	r4, r1
 800053c:	d902      	bls.n	8000544 <__udivmoddi4+0x278>
 800053e:	f1b9 0f00 	cmp.w	r9, #0
 8000542:	d02c      	beq.n	800059e <__udivmoddi4+0x2d2>
 8000544:	4640      	mov	r0, r8
 8000546:	1b09      	subs	r1, r1, r4
 8000548:	b292      	uxth	r2, r2
 800054a:	fbb1 f4f7 	udiv	r4, r1, r7
 800054e:	fb07 1114 	mls	r1, r7, r4, r1
 8000552:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000556:	fb04 f106 	mul.w	r1, r4, r6
 800055a:	4291      	cmp	r1, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x2a2>
 800055e:	eb1e 0202 	adds.w	r2, lr, r2
 8000562:	f104 38ff 	add.w	r8, r4, #4294967295
 8000566:	d201      	bcs.n	800056c <__udivmoddi4+0x2a0>
 8000568:	4291      	cmp	r1, r2
 800056a:	d815      	bhi.n	8000598 <__udivmoddi4+0x2cc>
 800056c:	4644      	mov	r4, r8
 800056e:	1a52      	subs	r2, r2, r1
 8000570:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000574:	e721      	b.n	80003ba <__udivmoddi4+0xee>
 8000576:	1a86      	subs	r6, r0, r2
 8000578:	eb64 0303 	sbc.w	r3, r4, r3
 800057c:	2001      	movs	r0, #1
 800057e:	e70e      	b.n	800039e <__udivmoddi4+0xd2>
 8000580:	3c02      	subs	r4, #2
 8000582:	4472      	add	r2, lr
 8000584:	e735      	b.n	80003f2 <__udivmoddi4+0x126>
 8000586:	3902      	subs	r1, #2
 8000588:	4472      	add	r2, lr
 800058a:	e6d0      	b.n	800032e <__udivmoddi4+0x62>
 800058c:	44f4      	add	ip, lr
 800058e:	3802      	subs	r0, #2
 8000590:	e6e3      	b.n	800035a <__udivmoddi4+0x8e>
 8000592:	44f4      	add	ip, lr
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x152>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e7e7      	b.n	800056e <__udivmoddi4+0x2a2>
 800059e:	3802      	subs	r0, #2
 80005a0:	4471      	add	r1, lr
 80005a2:	e7d0      	b.n	8000546 <__udivmoddi4+0x27a>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443c      	add	r4, r7
 80005a8:	e782      	b.n	80004b0 <__udivmoddi4+0x1e4>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e76a      	b.n	8000486 <__udivmoddi4+0x1ba>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <send_large_buffer>:
static void MX_RTC_Init(void);
static void MX_RNG_Init(void);
static void MX_HASH_Init(void);
/* USER CODE BEGIN PFP */
uint8_t send_large_buffer(uint8_t *data, uint32_t len)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
 80005bc:	6039      	str	r1, [r7, #0]
    uint32_t offset = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
    while (offset < len)
 80005c2:	e038      	b.n	8000636 <send_large_buffer+0x82>
    {
        uint16_t chunk_len = ((len - offset) >= CDC_CHUNK_SIZE) ? CDC_CHUNK_SIZE : (len - offset);
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	2b40      	cmp	r3, #64	@ 0x40
 80005cc:	bf28      	it	cs
 80005ce:	2340      	movcs	r3, #64	@ 0x40
 80005d0:	81fb      	strh	r3, [r7, #14]

        tx_complete = 0;  // Reset flag before each send
 80005d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000648 <send_large_buffer+0x94>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &data[offset], chunk_len);
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	4413      	add	r3, r2
 80005de:	89fa      	ldrh	r2, [r7, #14]
 80005e0:	4619      	mov	r1, r3
 80005e2:	481a      	ldr	r0, [pc, #104]	@ (800064c <send_large_buffer+0x98>)
 80005e4:	f00d fc0e 	bl	800de04 <USBD_CDC_SetTxBuffer>

        if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK)
 80005e8:	4818      	ldr	r0, [pc, #96]	@ (800064c <send_large_buffer+0x98>)
 80005ea:	f00d fc4b 	bl	800de84 <USBD_CDC_TransmitPacket>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <send_large_buffer+0x44>
            return USBD_FAIL;
 80005f4:	2303      	movs	r3, #3
 80005f6:	e023      	b.n	8000640 <send_large_buffer+0x8c>

        // Wait for previous chunk to complete
        uint32_t timeout = 1000000;
 80005f8:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <send_large_buffer+0x9c>)
 80005fa:	613b      	str	r3, [r7, #16]
        while (tx_complete == 0 && timeout--);
 80005fc:	bf00      	nop
 80005fe:	4b12      	ldr	r3, [pc, #72]	@ (8000648 <send_large_buffer+0x94>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b00      	cmp	r3, #0
 8000606:	d104      	bne.n	8000612 <send_large_buffer+0x5e>
 8000608:	693b      	ldr	r3, [r7, #16]
 800060a:	1e5a      	subs	r2, r3, #1
 800060c:	613a      	str	r2, [r7, #16]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f5      	bne.n	80005fe <send_large_buffer+0x4a>

        if (timeout == 0)
 8000612:	693b      	ldr	r3, [r7, #16]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d101      	bne.n	800061c <send_large_buffer+0x68>
            return USBD_FAIL;
 8000618:	2303      	movs	r3, #3
 800061a:	e011      	b.n	8000640 <send_large_buffer+0x8c>

        offset += chunk_len;
 800061c:	89fb      	ldrh	r3, [r7, #14]
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	4413      	add	r3, r2
 8000622:	617b      	str	r3, [r7, #20]

        // Optional delay — helps avoid subtle race in some MCUs
        for (volatile int i = 0; i < 200; i++);
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	e002      	b.n	8000630 <send_large_buffer+0x7c>
 800062a:	68bb      	ldr	r3, [r7, #8]
 800062c:	3301      	adds	r3, #1
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	2bc7      	cmp	r3, #199	@ 0xc7
 8000634:	ddf9      	ble.n	800062a <send_large_buffer+0x76>
    while (offset < len)
 8000636:	697a      	ldr	r2, [r7, #20]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	429a      	cmp	r2, r3
 800063c:	d3c2      	bcc.n	80005c4 <send_large_buffer+0x10>
    }

    return USBD_OK;
 800063e:	2300      	movs	r3, #0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000000 	.word	0x20000000
 800064c:	200006c4 	.word	0x200006c4
 8000650:	000f4240 	.word	0x000f4240

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	f5ad 4d7d 	sub.w	sp, sp, #64768	@ 0xfd00
 800065a:	b0bc      	sub	sp, #240	@ 0xf0
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  char msg[] = "0.1.2.3.4.5.6.7.8.9.10.11.12.13.14.15.16.17.18.19.20.21.22.23.24.25.26.27.28.29.30.31.32.33.34.35.36.37.38.39.40.41.42.43.44.45.46.47.48.49.50.51.52.53.54.55.56.57.58.59.60.61.62.63.64.65.66.67.68.69.70.71.72.73.74.75.76.77.78.79.80.81.82.83.84.85.86.87.88.89.90.91.92.93.94.95.96.97.98.99.100.101.102.103.104.105.106.107.108.109.110.111.112.113.114.115.116.117.118.119.120.121.122.123.124.125.126.127.128.129.130.131.132.133.134.135.136.137.138.139.140.141.142.143.144.145.146.147.148.149.150.151.152.153.154.155.156.157.158.159.160.161.162.163.164.165.166.167.168.169.170.171.172.173.174.175.176.177.178.179.180.181.182.183.184.185.186.187.188.189.190.191.192.193.194.195.196.197.198.199.200.201.202.203.204.205.206.207.208.209.210.211.212.213.214.215.216.217.218.219.220.221.222.223.224.225.226.227.228.229.230.231.232.233.234.235.236.237.238.239.240.241.242.243.244.245.246.247.248.249.250.251.252.253.254.255.256.257.258.259.260.261.262.263.264.265.266.267.268.269.270.271.272.273.274.275.276.277.278.279.280.281.282.283.284.285.286.287.288.289.290.291.292.293.294.295.296.297.298.299.300.301.302.303.304.305.306.307.308.309.310.311.312.313.314.315.316.317.318.319.320.321.322.323.324.325.326.327.328.329.330.331.332.333.334.335.336.337.338.339.340.341.342.343.344.345.346.347.348.349.350.351.352.353.354.355.356.357.358.359.360.361.362.363.364.365.366.367.368.369.370.371.372.373.374.375.376.377.378.379.380.381.382.383.384.385.386.387.388.389.390.391.392.393.394.395.396.397.398.399.400.401.402.403.404.405.406.407.408.409.410.411.412.413.414.415.416.417.418.419.420.421.422.423.424.425.426.427.428.429.430.431.432.433.434.435.436.437.438.439.440.441.442.443.444.445.446.447.448.449.450.451.452.453.454.455.456.457.458.459.460.461.462.463.464.465.466.467.468.469.470.471.472.473.474.475.476.477.478.479.480.481.482.483.484.485.486.487.488.489.490.491.492.493.494.495.496.497.498.499.500.501.502.503.504.505.506.507.508.509.510.511.512.513.514.515.516.517.518.519.520.521.522.523.524.525.526.527.528.529.530.531.532.533.534.535.536.537.538.539.540.541.542.543.544.545.546.547.548.549.550.551.552.553.554.555.556.557.558.559.560.561.562.563.564.565.566.567.568.569.570.571.572.573.574.575.576.577.578.579.580.581.582.583.584.585.586.587.588.589.590.591.592.593.594.595.596.597.598.599.600.601.602.603.604.605.606.607.608.609.610.611.612.613.614.615.616.617.618.619.620.621.622.623.624.625.626.627.628.629.630.631.632.633.634.635.636.637.638.639.640.641.642.643.644.645.646.647.648.649.650.651.652.653.654.655.656.657.658.659.660.661.662.663.664.665.666.667.668.669.670.671.672.673.674.675.676.677.678.679.680.681.682.683.684.685.686.687.688.689.690.691.692.693.694.695.696.697.698.699.700.701.702.703.704.705.706.707.708.709.710.711.712.713.714.715.716.717.718.719.720.721.722.723.724.725.726.727.728.729.730.731.732.733.734.735.736.737.738.739.740.741.742.743.744.745.746.747.748.749.750.751.752.753.754.755.756.757.758.759.760.761.762.763.764.765.766.767.768.769.770.771.772.773.774.775.776.777.778.779.780.781.782.783.784.785.786.787.788.789.790.791.792.793.794.795.796.797.798.799.800.801.802.803.804.805.806.807.808.809.810.811.812.813.814.815.816.817.818.819.820.821.822.823.824.825.826.827.828.829.830.831.832.833.834.835.836.837.838.839.840.841.842.843.844.845.846.847.848.849.850.851.852.853.854.855.856.857.858.859.860.861.862.863.864.865.866.867.868.869.870.871.872.873.874.875.876.877.878.879.880.881.882.883.884.885.886.887.888.889.890.891.892.893.894.895.896.897.898.899.900.901.902.903.904.905.906.907.908.909.910.911.912.913.914.915.916.917.918.919.920.921.922.923.924.925.926.927.928.929.930.931.932.933.934.935.936.937.938.939.940.941.942.943.944.945.946.947.948.949.950.951.952.953.954.955.956.957.958.959.960.961.962.963.964.965.966.967.968.969.970.971.972.973.974.975.976.977.978.979.980.981.982.983.984.985.986.987.988.989.990.991.992.993.994.995.996.997.998.999.1000.1001.1002.1003.1004.1005.1006.1007.1008.1009.1010.1011.1012.1013.1014.1015.1016.1017.1018.1019.1020.1021.1022.1023.1024.1025.1026.1027.1028.1029.1030.1031.1032.1033.1034.1035.1036.1037.1038.1039.1040.1041.1042.1043.1044.1045.1046.1047.1048.1049.1050.1051.1052.1053.1054.1055.1056.1057.1058.1059.1060.1061.1062.1063.1064.1065.1066.1067.1068.1069.1070.1071.1072.1073.1074.1075.1076.1077.1078.1079.1080.1081.1082.1083.1084.1085.1086.1087.1088.1089.1090.1091.1092.1093.1094.1095.1096.1097.1098.1099.1100.1101.1102.1103.1104.1105.1106.1107.1108.1109.1110.1111.1112.1113.1114.1115.1116.1117.1118.1119.1120.1121.1122.1123.1124.1125.1126.1127.1128.1129.1130.1131.1132.1133.1134.1135.1136.1137.1138.1139.1140.1141.1142.1143.1144.1145.1146.1147.1148.1149.1150.1151.1152.1153.1154.1155.1156.1157.1158.1159.1160.1161.1162.1163.1164.1165.1166.1167.1168.1169.1170.1171.1172.1173.1174.1175.1176.1177.1178.1179.1180.1181.1182.1183.1184.1185.1186.1187.1188.1189.1190.1191.1192.1193.1194.1195.1196.1197.1198.1199.1200.1201.1202.1203.1204.1205.1206.1207.1208.1209.1210.1211.1212.1213.1214.1215.1216.1217.1218.1219.1220.1221.1222.1223.1224.1225.1226.1227.1228.1229.1230.1231.1232.1233.1234.1235.1236.1237.1238.1239.1240.1241.1242.1243.1244.1245.1246.1247.1248.1249.1250.1251.1252.1253.1254.1255.1256.1257.1258.1259.1260.1261.1262.1263.1264.1265.1266.1267.1268.1269.1270.1271.1272.1273.1274.1275.1276.1277.1278.1279.1280.1281.1282.1283.1284.1285.1286.1287.1288.1289.1290.1291.1292.1293.1294.1295.1296.1297.1298.1299.1300.1301.1302.1303.1304.1305.1306.1307.1308.1309.1310.1311.1312.1313.1314.1315.1316.1317.1318.1319.1320.1321.1322.1323.1324.1325.1326.1327.1328.1329.1330.1331.1332.1333.1334.1335.1336.1337.1338.1339.1340.1341.1342.1343.1344.1345.1346.1347.1348.1349.1350.1351.1352.1353.1354.1355.1356.1357.1358.1359.1360.1361.1362.1363.1364.1365.1366.1367.1368.1369.1370.1371.1372.1373.1374.1375.1376.1377.1378.1379.1380.1381.1382.1383.1384.1385.1386.1387.1388.1389.1390.1391.1392.1393.1394.1395.1396.1397.1398.1399.1400.1401.1402.1403.1404.1405.1406.1407.1408.1409.1410.1411.1412.1413.1414.1415.1416.1417.1418.1419.1420.1421.1422.1423.1424.1425.1426.1427.1428.1429.1430.1431.1432.1433.1434.1435.1436.1437.1438.1439.1440.1441.1442.1443.1444.1445.1446.1447.1448.1449.1450.1451.1452.1453.1454.1455.1456.1457.1458.1459.1460.1461.1462.1463.1464.1465.1466.1467.1468.1469.1470.1471.1472.1473.1474.1475.1476.1477.1478.1479.1480.1481.1482.1483.1484.1485.1486.1487.1488.1489.1490.1491.1492.1493.1494.1495.1496.1497.1498.1499.1500.1501.1502.1503.1504.1505.1506.1507.1508.1509.1510.1511.1512.1513.1514.1515.1516.1517.1518.1519.1520.1521.1522.1523.1524.1525.1526.1527.1528.1529.1530.1531.1532.1533.1534.1535.1536.1537.1538.1539.1540.1541.1542.1543.1544.1545.1546.1547.1548.1549.1550.1551.1552.1553.1554.1555.1556.1557.1558.1559.1560.1561.1562.1563.1564.1565.1566.1567.1568.1569.1570.1571.1572.1573.1574.1575.1576.1577.1578.1579.1580.1581.1582.1583.1584.1585.1586.1587.1588.1589.1590.1591.1592.1593.1594.1595.1596.1597.1598.1599.1600.1601.1602.1603.1604.1605.1606.1607.1608.1609.1610.1611.1612.1613.1614.1615.1616.1617.1618.1619.1620.1621.1622.1623.1624.1625.1626.1627.1628.1629.1630.1631.1632.1633.1634.1635.1636.1637.1638.1639.1640.1641.1642.1643.1644.1645.1646.1647.1648.1649.1650.1651.1652.1653.1654.1655.1656.1657.1658.1659.1660.1661.1662.1663.1664.1665.1666.1667.1668.1669.1670.1671.1672.1673.1674.1675.1676.1677.1678.1679.1680.1681.1682.1683.1684.1685.1686.1687.1688.1689.1690.1691.1692.1693.1694.1695.1696.1697.1698.1699.1700.1701.1702.1703.1704.1705.1706.1707.1708.1709.1710.1711.1712.1713.1714.1715.1716.1717.1718.1719.1720.1721.1722.1723.1724.1725.1726.1727.1728.1729.1730.1731.1732.1733.1734.1735.1736.1737.1738.1739.1740.1741.1742.1743.1744.1745.1746.1747.1748.1749.1750.1751.1752.1753.1754.1755.1756.1757.1758.1759.1760.1761.1762.1763.1764.1765.1766.1767.1768.1769.1770.1771.1772.1773.1774.1775.1776.1777.1778.1779.1780.1781.1782.1783.1784.1785.1786.1787.1788.1789.1790.1791.1792.1793.1794.1795.1796.1797.1798.1799.1800.1801.1802.1803.1804.1805.1806.1807.1808.1809.1810.1811.1812.1813.1814.1815.1816.1817.1818.1819.1820.1821.1822.1823.1824.1825.1826.1827.1828.1829.1830.1831.1832.1833.1834.1835.1836.1837.1838.1839.1840.1841.1842.1843.1844.1845.1846.1847.1848.1849.1850.1851.1852.1853.1854.1855.1856.1857.1858.1859.1860.1861.1862.1863.1864.1865.1866.1867.1868.1869.1870.1871.1872.1873.1874.1875.1876.1877.1878.1879.1880.1881.1882.1883.1884.1885.1886.1887.1888.1889.1890.1891.1892.1893.1894.1895.1896.1897.1898.1899.1900.1901.1902.1903.1904.1905.1906.1907.1908.1909.1910.1911.1912.1913.1914.1915.1916.1917.1918.1919.1920.1921.1922.1923.1924.1925.1926.1927.1928.1929.1930.1931.1932.1933.1934.1935.1936.1937.1938.1939.1940.1941.1942.1943.1944.1945.1946.1947.1948.1949.1950.1951.1952.1953.1954.1955.1956.1957.1958.1959.1960.1961.1962.1963.1964.1965.1966.1967.1968.1969.1970.1971.1972.1973.1974.1975.1976.1977.1978.1979.1980.1981.1982.1983.1984.1985.1986.1987.1988.1989.1990.1991.1992.1993.1994.1995.1996.1997.1998.1999.2000.2001.2002.2003.2004.2005.2006.2007.2008.2009.2010.2011.2012.2013.2014.2015.2016.2017.2018.2019.2020.2021.2022.2023.2024.2025.2026.2027.2028.2029.2030.2031.2032.2033.2034.2035.2036.2037.2038.2039.2040.2041.2042.2043.2044.2045.2046.2047.2048.2049.2050.2051.2052.2053.2054.2055.2056.2057.2058.2059.2060.2061.2062.2063.2064.2065.2066.2067.2068.2069.2070.2071.2072.2073.2074.2075.2076.2077.2078.2079.2080.2081.2082.2083.2084.2085.2086.2087.2088.2089.2090.2091.2092.2093.2094.2095.2096.2097.2098.2099.2100.2101.2102.2103.2104.2105.2106.2107.2108.2109.2110.2111.2112.2113.2114.2115.2116.2117.2118.2119.2120.2121.2122.2123.2124.2125.2126.2127.2128.2129.2130.2131.2132.2133.2134.2135.2136.2137.2138.2139.2140.2141.2142.2143.2144.2145.2146.2147.2148.2149.2150.2151.2152.2153.2154.2155.2156.2157.2158.2159.2160.2161.2162.2163.2164.2165.2166.2167.2168.2169.2170.2171.2172.2173.2174.2175.2176.2177.2178.2179.2180.2181.2182.2183.2184.2185.2186.2187.2188.2189.2190.2191.2192.2193.2194.2195.2196.2197.2198.2199.2200.2201.2202.2203.2204.2205.2206.2207.2208.2209.2210.2211.2212.2213.2214.2215.2216.2217.2218.2219.2220.2221.2222.2223.2224.2225.2226.2227.2228.2229.2230.2231.2232.2233.2234.2235.2236.2237.2238.2239.2240.2241.2242.2243.2244.2245.2246.2247.2248.2249.2250.2251.2252.2253.2254.2255.2256.2257.2258.2259.2260.2261.2262.2263.2264.2265.2266.2267.2268.2269.2270.2271.2272.2273.2274.2275.2276.2277.2278.2279.2280.2281.2282.2283.2284.2285.2286.2287.2288.2289.2290.2291.2292.2293.2294.2295.2296.2297.2298.2299.2300.2301.2302.2303.2304.2305.2306.2307.2308.2309.2310.2311.2312.2313.2314.2315.2316.2317.2318.2319.2320.2321.2322.2323.2324.2325.2326.2327.2328.2329.2330.2331.2332.2333.2334.2335.2336.2337.2338.2339.2340.2341.2342.2343.2344.2345.2346.2347.2348.2349.2350.2351.2352.2353.2354.2355.2356.2357.2358.2359.2360.2361.2362.2363.2364.2365.2366.2367.2368.2369.2370.2371.2372.2373.2374.2375.2376.2377.2378.2379.2380.2381.2382.2383.2384.2385.2386.2387.2388.2389.2390.2391.2392.2393.2394.2395.2396.2397.2398.2399.2400.2401.2402.2403.2404.2405.2406.2407.2408.2409.2410.2411.2412.2413.2414.2415.2416.2417.2418.2419.2420.2421.2422.2423.2424.2425.2426.2427.2428.2429.2430.2431.2432.2433.2434.2435.2436.2437.2438.2439.2440.2441.2442.2443.2444.2445.2446.2447.2448.2449.2450.2451.2452.2453.2454.2455.2456.2457.2458.2459.2460.2461.2462.2463.2464.2465.2466.2467.2468.2469.2470.2471.2472.2473.2474.2475.2476.2477.2478.2479.2480.2481.2482.2483.2484.2485.2486.2487.2488.2489.2490.2491.2492.2493.2494.2495.2496.2497.2498.2499.2500.2501.2502.2503.2504.2505.2506.2507.2508.2509.2510.2511.2512.2513.2514.2515.2516.2517.2518.2519.2520.2521.2522.2523.2524.2525.2526.2527.2528.2529.2530.2531.2532.2533.2534.2535.2536.2537.2538.2539.2540.2541.2542.2543.2544.2545.2546.2547.2548.2549.2550.2551.2552.2553.2554.2555.2556.2557.2558.2559.2560.2561.2562.2563.2564.2565.2566.2567.2568.2569.2570.2571.2572.2573.2574.2575.2576.2577.2578.2579.2580.2581.2582.2583.2584.2585.2586.2587.2588.2589.2590.2591.2592.2593.2594.2595.2596.2597.2598.2599.2600.2601.2602.2603.2604.2605.2606.2607.2608.2609.2610.2611.2612.2613.2614.2615.2616.2617.2618.2619.2620.2621.2622.2623.2624.2625.2626.2627.2628.2629.2630.2631.2632.2633.2634.2635.2636.2637.2638.2639.2640.2641.2642.2643.2644.2645.2646.2647.2648.2649.2650.2651.2652.2653.2654.2655.2656.2657.2658.2659.2660.2661.2662.2663.2664.2665.2666.2667.2668.2669.2670.2671.2672.2673.2674.2675.2676.2677.2678.2679.2680.2681.2682.2683.2684.2685.2686.2687.2688.2689.2690.2691.2692.2693.2694.2695.2696.2697.2698.2699.2700.2701.2702.2703.2704.2705.2706.2707.2708.2709.2710.2711.2712.2713.2714.2715.2716.2717.2718.2719.2720.2721.2722.2723.2724.2725.2726.2727.2728.2729.2730.2731.2732.2733.2734.2735.2736.2737.2738.2739.2740.2741.2742.2743.2744.2745.2746.2747.2748.2749.2750.2751.2752.2753.2754.2755.2756.2757.2758.2759.2760.2761.2762.2763.2764.2765.2766.2767.2768.2769.2770.2771.2772.2773.2774.2775.2776.2777.2778.2779.2780.2781.2782.2783.2784.2785.2786.2787.2788.2789.2790.2791.2792.2793.2794.2795.2796.2797.2798.2799.2800.2801.2802.2803.2804.2805.2806.2807.2808.2809.2810.2811.2812.2813.2814.2815.2816.2817.2818.2819.2820.2821.2822.2823.2824.2825.2826.2827.2828.2829.2830.2831.2832.2833.2834.2835.2836.2837.2838.2839.2840.2841.2842.2843.2844.2845.2846.2847.2848.2849.2850.2851.2852.2853.2854.2855.2856.2857.2858.2859.2860.2861.2862.2863.2864.2865.2866.2867.2868.2869.2870.2871.2872.2873.2874.2875.2876.2877.2878.2879.2880.2881.2882.2883.2884.2885.2886.2887.2888.2889.2890.2891.2892.2893.2894.2895.2896.2897.2898.2899.2900.2901.2902.2903.2904.2905.2906.2907.2908.2909.2910.2911.2912.2913.2914.2915.2916.2917.2918.2919.2920.2921.2922.2923.2924.2925.2926.2927.2928.2929.2930.2931.2932.2933.2934.2935.2936.2937.2938.2939.2940.2941.2942.2943.2944.2945.2946.2947.2948.2949.2950.2951.2952.2953.2954.2955.2956.2957.2958.2959.2960.2961.2962.2963.2964.2965.2966.2967.2968.2969.2970.2971.2972.2973.2974.2975.2976.2977.2978.2979.2980.2981.2982.2983.2984.2985.2986.2987.2988.2989.2990.2991.2992.2993.2994.2995.2996.2997.2998.2999.3000.3001.3002.3003.3004.3005.3006.3007.3008.3009.3010.3011.3012.3013.3014.3015.3016.3017.3018.3019.3020.3021.3022.3023.3024.3025.3026.3027.3028.3029.3030.3031.3032.3033.3034.3035.3036.3037.3038.3039.3040.3041.3042.3043.3044.3045.3046.3047.3048.3049.3050.3051.3052.3053.3054.3055.3056.3057.3058.3059.3060.3061.3062.3063.3064.3065.3066.3067.3068.3069.3070.3071.3072.3073.3074.3075.3076.3077.3078.3079.3080.3081.3082.3083.3084.3085.3086.3087.3088.3089.3090.3091.3092.3093.3094.3095.3096.3097.3098.3099.3100.3101.3102.3103.3104.3105.3106.3107.3108.3109.3110.3111.3112.3113.3114.3115.3116.3117.3118.3119.3120.3121.3122.3123.3124.3125.3126.3127.3128.3129.3130.3131.3132.3133.3134.3135.3136.3137.3138.3139.3140.3141.3142.3143.3144.3145.3146.3147.3148.3149.3150.3151.3152.3153.3154.3155.3156.3157.3158.3159.3160.3161.3162.3163.3164.3165.3166.3167.3168.3169.3170.3171.3172.3173.3174.3175.3176.3177.3178.3179.3180.3181.3182.3183.3184.3185.3186.3187.3188.3189.3190.3191.3192.3193.3194.3195.3196.3197.3198.3199.3200.3201.3202.3203.3204.3205.3206.3207.3208.3209.3210.3211.3212.3213.3214.3215.3216.3217.3218.3219.3220.3221.3222.3223.3224.3225.3226.3227.3228.3229.3230.3231.3232.3233.3234.3235.3236.3237.3238.3239.3240.3241.3242.3243.3244.3245.3246.3247.3248.3249.3250.3251.3252.3253.3254.3255.3256.3257.3258.3259.3260.3261.3262.3263.3264.3265.3266.3267.3268.3269.3270.3271.3272.3273.3274.3275.3276.3277.3278.3279.3280.3281.3282.3283.3284.3285.3286.3287.3288.3289.3290.3291.3292.3293.3294.3295.3296.3297.3298.3299.3300.3301.3302.3303.3304.3305.3306.3307.3308.3309.3310.3311.3312.3313.3314.3315.3316.3317.3318.3319.3320.3321.3322.3323.3324.3325.3326.3327.3328.3329.3330.3331.3332.3333.3334.3335.3336.3337.3338.3339.3340.3341.3342.3343.3344.3345.3346.3347.3348.3349.3350.3351.3352.3353.3354.3355.3356.3357.3358.3359.3360.3361.3362.3363.3364.3365.3366.3367.3368.3369.3370.3371.3372.3373.3374.3375.3376.3377.3378.3379.3380.3381.3382.3383.3384.3385.3386.3387.3388.3389.3390.3391.3392.3393.3394.3395.3396.3397.3398.3399.3400.3401.3402.3403.3404.3405.3406.3407.3408.3409.3410.3411.3412.3413.3414.3415.3416.3417.3418.3419.3420.3421.3422.3423.3424.3425.3426.3427.3428.3429.3430.3431.3432.3433.3434.3435.3436.3437.3438.3439.3440.3441.3442.3443.3444.3445.3446.3447.3448.3449.3450.3451.3452.3453.3454.3455.3456.3457.3458.3459.3460.3461.3462.3463.3464.3465.3466.3467.3468.3469.3470.3471.3472.3473.3474.3475.3476.3477.3478.3479.3480.3481.3482.3483.3484.3485.3486.3487.3488.3489.3490.3491.3492.3493.3494.3495.3496.3497.3498.3499.3500.3501.3502.3503.3504.3505.3506.3507.3508.3509.3510.3511.3512.3513.3514.3515.3516.3517.3518.3519.3520.3521.3522.3523.3524.3525.3526.3527.3528.3529.3530.3531.3532.3533.3534.3535.3536.3537.3538.3539.3540.3541.3542.3543.3544.3545.3546.3547.3548.3549.3550.3551.3552.3553.3554.3555.3556.3557.3558.3559.3560.3561.3562.3563.3564.3565.3566.3567.3568.3569.3570.3571.3572.3573.3574.3575.3576.3577.3578.3579.3580.3581.3582.3583.3584.3585.3586.3587.3588.3589.3590.3591.3592.3593.3594.3595.3596.3597.3598.3599.3600.3601.3602.3603.3604.3605.3606.3607.3608.3609.3610.3611.3612.3613.3614.3615.3616.3617.3618.3619.3620.3621.3622.3623.3624.3625.3626.3627.3628.3629.3630.3631.3632.3633.3634.3635.3636.3637.3638.3639.3640.3641.3642.3643.3644.3645.3646.3647.3648.3649.3650.3651.3652.3653.3654.3655.3656.3657.3658.3659.3660.3661.3662.3663.3664.3665.3666.3667.3668.3669.3670.3671.3672.3673.3674.3675.3676.3677.3678.3679.3680.3681.3682.3683.3684.3685.3686.3687.3688.3689.3690.3691.3692.3693.3694.3695.3696.3697.3698.3699.3700.3701.3702.3703.3704.3705.3706.3707.3708.3709.3710.3711.3712.3713.3714.3715.3716.3717.3718.3719.3720.3721.3722.3723.3724.3725.3726.3727.3728.3729.3730.3731.3732.3733.3734.3735.3736.3737.3738.3739.3740.3741.3742.3743.3744.3745.3746.3747.3748.3749.3750.3751.3752.3753.3754.3755.3756.3757.3758.3759.3760.3761.3762.3763.3764.3765.3766.3767.3768.3769.3770.3771.3772.3773.3774.3775.3776.3777.3778.3779.3780.3781.3782.3783.3784.3785.3786.3787.3788.3789.3790.3791.3792.3793.3794.3795.3796.3797.3798.3799.3800.3801.3802.3803.3804.3805.3806.3807.3808.3809.3810.3811.3812.3813.3814.3815.3816.3817.3818.3819.3820.3821.3822.3823.3824.3825.3826.3827.3828.3829.3830.3831.3832.3833.3834.3835.3836.3837.3838.3839.3840.3841.3842.3843.3844.3845.3846.3847.3848.3849.3850.3851.3852.3853.3854.3855.3856.3857.3858.3859.3860.3861.3862.3863.3864.3865.3866.3867.3868.3869.3870.3871.3872.3873.3874.3875.3876.3877.3878.3879.3880.3881.3882.3883.3884.3885.3886.3887.3888.3889.3890.3891.3892.3893.3894.3895.3896.3897.3898.3899.3900.3901.3902.3903.3904.3905.3906.3907.3908.3909.3910.3911.3912.3913.3914.3915.3916.3917.3918.3919.3920.3921.3922.3923.3924.3925.3926.3927.3928.3929.3930.3931.3932.3933.3934.3935.3936.3937.3938.3939.3940.3941.3942.3943.3944.3945.3946.3947.3948.3949.3950.3951.3952.3953.3954.3955.3956.3957.3958.3959.3960.3961.3962.3963.3964.3965.3966.3967.3968.3969.3970.3971.3972.3973.3974.3975.3976.3977.3978.3979.3980.3981.3982.3983.3984.3985.3986.3987.3988.3989.3990.3991.3992.3993.3994.3995.3996.3997.3998.3999.4000.4001.4002.4003.4004.4005.4006.4007.4008.4009.4010.4011.4012.4013.4014.4015.4016.4017.4018.4019.4020.4021.4022.4023.4024.4025.4026.4027.4028.4029.4030.4031.4032.4033.4034.4035.4036.4037.4038.4039.4040.4041.4042.4043.4044.4045.4046.4047.4048.4049.4050.4051.4052.4053.4054.4055.4056.4057.4058.4059.4060.4061.4062.4063.4064.4065.4066.4067.4068.4069.4070.4071.4072.4073.4074.4075.4076.4077.4078.4079.4080.4081.4082.4083.4084.4085.4086.4087.4088.4089.4090.4091.4092.4093.4094.4095.4096.4097.4098.4099.4100.4101.4102.4103.4104.4105.4106.4107.4108.4109.4110.4111.4112.4113.4114.4115.4116.4117.4118.4119.4120.4121.4122.4123.4124.4125.4126.4127.4128.4129.4130.4131.4132.4133.4134.4135.4136.4137.4138.4139.4140.4141.4142.4143.4144.4145.4146.4147.4148.4149.4150.4151.4152.4153.4154.4155.4156.4157.4158.4159.4160.4161.4162.4163.4164.4165.4166.4167.4168.4169.4170.4171.4172.4173.4174.4175.4176.4177.4178.4179.4180.4181.4182.4183.4184.4185.4186.4187.4188.4189.4190.4191.4192.4193.4194.4195.4196.4197.4198.4199.4200.4201.4202.4203.4204.4205.4206.4207.4208.4209.4210.4211.4212.4213.4214.4215.4216.4217.4218.4219.4220.4221.4222.4223.4224.4225.4226.4227.4228.4229.4230.4231.4232.4233.4234.4235.4236.4237.4238.4239.4240.4241.4242.4243.4244.4245.4246.4247.4248.4249.4250.4251.4252.4253.4254.4255.4256.4257.4258.4259.4260.4261.4262.4263.4264.4265.4266.4267.4268.4269.4270.4271.4272.4273.4274.4275.4276.4277.4278.4279.4280.4281.4282.4283.4284.4285.4286.4287.4288.4289.4290.4291.4292.4293.4294.4295.4296.4297.4298.4299.4300.4301.4302.4303.4304.4305.4306.4307.4308.4309.4310.4311.4312.4313.4314.4315.4316.4317.4318.4319.4320.4321.4322.4323.4324.4325.4326.4327.4328.4329.4330.4331.4332.4333.4334.4335.4336.4337.4338.4339.4340.4341.4342.4343.4344.4345.4346.4347.4348.4349.4350.4351.4352.4353.4354.4355.4356.4357.4358.4359.4360.4361.4362.4363.4364.4365.4366.4367.4368.4369.4370.4371.4372.4373.4374.4375.4376.4377.4378.4379.4380.4381.4382.4383.4384.4385.4386.4387.4388.4389.4390.4391.4392.4393.4394.4395.4396.4397.4398.4399.4400.4401.4402.4403.4404.4405.4406.4407.4408.4409.4410.4411.4412.4413.4414.4415.4416.4417.4418.4419.4420.4421.4422.4423.4424.4425.4426.4427.4428.4429.4430.4431.4432.4433.4434.4435.4436.4437.4438.4439.4440.4441.4442.4443.4444.4445.4446.4447.4448.4449.4450.4451.4452.4453.4454.4455.4456.4457.4458.4459.4460.4461.4462.4463.4464.4465.4466.4467.4468.4469.4470.4471.4472.4473.4474.4475.4476.4477.4478.4479.4480.4481.4482.4483.4484.4485.4486.4487.4488.4489.4490.4491.4492.4493.4494.4495.4496.4497.4498.4499.4500.4501.4502.4503.4504.4505.4506.4507.4508.4509.4510.4511.4512.4513.4514.4515.4516.4517.4518.4519.4520.4521.4522.4523.4524.4525.4526.4527.4528.4529.4530.4531.4532.4533.4534.4535.4536.4537.4538.4539.4540.4541.4542.4543.4544.4545.4546.4547.4548.4549.4550.4551.4552.4553.4554.4555.4556.4557.4558.4559.4560.4561.4562.4563.4564.4565.4566.4567.4568.4569.4570.4571.4572.4573.4574.4575.4576.4577.4578.4579.4580.4581.4582.4583.4584.4585.4586.4587.4588.4589.4590.4591.4592.4593.4594.4595.4596.4597.4598.4599.4600.4601.4602.4603.4604.4605.4606.4607.4608.4609.4610.4611.4612.4613.4614.4615.4616.4617.4618.4619.4620.4621.4622.4623.4624.4625.4626.4627.4628.4629.4630.4631.4632.4633.4634.4635.4636.4637.4638.4639.4640.4641.4642.4643.4644.4645.4646.4647.4648.4649.4650.4651.4652.4653.4654.4655.4656.4657.4658.4659.4660.4661.4662.4663.4664.4665.4666.4667.4668.4669.4670.4671.4672.4673.4674.4675.4676.4677.4678.4679.4680.4681.4682.4683.4684.4685.4686.4687.4688.4689.4690.4691.4692.4693.4694.4695.4696.4697.4698.4699.4700.4701.4702.4703.4704.4705.4706.4707.4708.4709.4710.4711.4712.4713.4714.4715.4716.4717.4718.4719.4720.4721.4722.4723.4724.4725.4726.4727.4728.4729.4730.4731.4732.4733.4734.4735.4736.4737.4738.4739.4740.4741.4742.4743.4744.4745.4746.4747.4748.4749.4750.4751.4752.4753.4754.4755.4756.4757.4758.4759.4760.4761.4762.4763.4764.4765.4766.4767.4768.4769.4770.4771.4772.4773.4774.4775.4776.4777.4778.4779.4780.4781.4782.4783.4784.4785.4786.4787.4788.4789.4790.4791.4792.4793.4794.4795.4796.4797.4798.4799.4800.4801.4802.4803.4804.4805.4806.4807.4808.4809.4810.4811.4812.4813.4814.4815.4816.4817.4818.4819.4820.4821.4822.4823.4824.4825.4826.4827.4828.4829.4830.4831.4832.4833.4834.4835.4836.4837.4838.4839.4840.4841.4842.4843.4844.4845.4846.4847.4848.4849.4850.4851.4852.4853.4854.4855.4856.4857.4858.4859.4860.4861.4862.4863.4864.4865.4866.4867.4868.4869.4870.4871.4872.4873.4874.4875.4876.4877.4878.4879.4880.4881.4882.4883.4884.4885.4886.4887.4888.4889.4890.4891.4892.4893.4894.4895.4896.4897.4898.4899.4900.4901.4902.4903.4904.4905.4906.4907.4908.4909.4910.4911.4912.4913.4914.4915.4916.4917.4918.4919.4920.4921.4922.4923.4924.4925.4926.4927.4928.4929.4930.4931.4932.4933.4934.4935.4936.4937.4938.4939.4940.4941.4942.4943.4944.4945.4946.4947.4948.4949.4950.4951.4952.4953.4954.4955.4956.4957.4958.4959.4960.4961.4962.4963.4964.4965.4966.4967.4968.4969.4970.4971.4972.4973.4974.4975.4976.4977.4978.4979.4980.4981.4982.4983.4984.4985.4986.4987.4988.4989.4990.4991.4992.4993.4994.4995.4996.4997.4998.4999.5000.5001.5002.5003.5004.5005.5006.5007.5008.5009.5010.5011.5012.5013.5014.5015.5016.5017.5018.5019.5020.5021.5022.5023.5024.5025.5026.5027.5028.5029.5030.5031.5032.5033.5034.5035.5036.5037.5038.5039.5040.5041.5042.5043.5044.5045.5046.5047.5048.5049.5050.5051.5052.5053.5054.5055.5056.5057.5058.5059.5060.5061.5062.5063.5064.5065.5066.5067.5068.5069.5070.5071.5072.5073.5074.5075.5076.5077.5078.5079.5080.5081.5082.5083.5084.5085.5086.5087.5088.5089.5090.5091.5092.5093.5094.5095.5096.5097.5098.5099.5100.5101.5102.5103.5104.5105.5106.5107.5108.5109.5110.5111.5112.5113.5114.5115.5116.5117.5118.5119.5120.5121.5122.5123.5124.5125.5126.5127.5128.5129.5130.5131.5132.5133.5134.5135.5136.5137.5138.5139.5140.5141.5142.5143.5144.5145.5146.5147.5148.5149.5150.5151.5152.5153.5154.5155.5156.5157.5158.5159.5160.5161.5162.5163.5164.5165.5166.5167.5168.5169.5170.5171.5172.5173.5174.5175.5176.5177.5178.5179.5180.5181.5182.5183.5184.5185.5186.5187.5188.5189.5190.5191.5192.5193.5194.5195.5196.5197.5198.5199.5200.5201.5202.5203.5204.5205.5206.5207.5208.5209.5210.5211.5212.5213.5214.5215.5216.5217.5218.5219.5220.5221.5222.5223.5224.5225.5226.5227.5228.5229.5230.5231.5232.5233.5234.5235.5236.5237.5238.5239.5240.5241.5242.5243.5244.5245.5246.5247.5248.5249.5250.5251.5252.5253.5254.5255.5256.5257.5258.5259.5260.5261.5262.5263.5264.5265.5266.5267.5268.5269.5270.5271.5272.5273.5274.5275.5276.5277.5278.5279.5280.5281.5282.5283.5284.5285.5286.5287.5288.5289.5290.5291.5292.5293.5294.5295.5296.5297.5298.5299.5300.5301.5302.5303.5304.5305.5306.5307.5308.5309.5310.5311.5312.5313.5314.5315.5316.5317.5318.5319.5320.5321.5322.5323.5324.5325.5326.5327.5328.5329.5330.5331.5332.5333.5334.5335.5336.5337.5338.5339.5340.5341.5342.5343.5344.5345.5346.5347.5348.5349.5350.5351.5352.5353.5354.5355.5356.5357.5358.5359.5360.5361.5362.5363.5364.5365.5366.5367.5368.5369.5370.5371.5372.5373.5374.5375.5376.5377.5378.5379.5380.5381.5382.5383.5384.5385.5386.5387.5388.5389.5390.5391.5392.5393.5394.5395.5396.5397.5398.5399.5400.5401.5402.5403.5404.5405.5406.5407.5408.5409.5410.5411.5412.5413.5414.5415.5416.5417.5418.5419.5420.5421.5422.5423.5424.5425.5426.5427.5428.5429.5430.5431.5432.5433.5434.5435.5436.5437.5438.5439.5440.5441.5442.5443.5444.5445.5446.5447.5448.5449.5450.5451.5452.5453.5454.5455.5456.5457.5458.5459.5460.5461.5462.5463.5464.5465.5466.5467.5468.5469.5470.5471.5472.5473.5474.5475.5476.5477.5478.5479.5480.5481.5482.5483.5484.5485.5486.5487.5488.5489.5490.5491.5492.5493.5494.5495.5496.5497.5498.5499.5500.5501.5502.5503.5504.5505.5506.5507.5508.5509.5510.5511.5512.5513.5514.5515.5516.5517.5518.5519.5520.5521.5522.5523.5524.5525.5526.5527.5528.5529.5530.5531.5532.5533.5534.5535.5536.5537.5538.5539.5540.5541.5542.5543.5544.5545.5546.5547.5548.5549.5550.5551.5552.5553.5554.5555.5556.5557.5558.5559.5560.5561.5562.5563.5564.5565.5566.5567.5568.5569.5570.5571.5572.5573.5574.5575.5576.5577.5578.5579.5580.5581.5582.5583.5584.5585.5586.5587.5588.5589.5590.5591.5592.5593.5594.5595.5596.5597.5598.5599.5600.5601.5602.5603.5604.5605.5606.5607.5608.5609.5610.5611.5612.5613.5614.5615.5616.5617.5618.5619.5620.5621.5622.5623.5624.5625.5626.5627.5628.5629.5630.5631.5632.5633.5634.5635.5636.5637.5638.5639.5640.5641.5642.5643.5644.5645.5646.5647.5648.5649.5650.5651.5652.5653.5654.5655.5656.5657.5658.5659.5660.5661.5662.5663.5664.5665.5666.5667.5668.5669.5670.5671.5672.5673.5674.5675.5676.5677.5678.5679.5680.5681.5682.5683.5684.5685.5686.5687.5688.5689.5690.5691.5692.5693.5694.5695.5696.5697.5698.5699.5700.5701.5702.5703.5704.5705.5706.5707.5708.5709.5710.5711.5712.5713.5714.5715.5716.5717.5718.5719.5720.5721.5722.5723.5724.5725.5726.5727.5728.5729.5730.5731.5732.5733.5734.5735.5736.5737.5738.5739.5740.5741.5742.5743.5744.5745.5746.5747.5748.5749.5750.5751.5752.5753.5754.5755.5756.5757.5758.5759.5760.5761.5762.5763.5764.5765.5766.5767.5768.5769.5770.5771.5772.5773.5774.5775.5776.5777.5778.5779.5780.5781.5782.5783.5784.5785.5786.5787.5788.5789.5790.5791.5792.5793.5794.5795.5796.5797.5798.5799.5800.5801.5802.5803.5804.5805.5806.5807.5808.5809.5810.5811.5812.5813.5814.5815.5816.5817.5818.5819.5820.5821.5822.5823.5824.5825.5826.5827.5828.5829.5830.5831.5832.5833.5834.5835.5836.5837.5838.5839.5840.5841.5842.5843.5844.5845.5846.5847.5848.5849.5850.5851.5852.5853.5854.5855.5856.5857.5858.5859.5860.5861.5862.5863.5864.5865.5866.5867.5868.5869.5870.5871.5872.5873.5874.5875.5876.5877.5878.5879.5880.5881.5882.5883.5884.5885.5886.5887.5888.5889.5890.5891.5892.5893.5894.5895.5896.5897.5898.5899.5900.5901.5902.5903.5904.5905.5906.5907.5908.5909.5910.5911.5912.5913.5914.5915.5916.5917.5918.5919.5920.5921.5922.5923.5924.5925.5926.5927.5928.5929.5930.5931.5932.5933.5934.5935.5936.5937.5938.5939.5940.5941.5942.5943.5944.5945.5946.5947.5948.5949.5950.5951.5952.5953.5954.5955.5956.5957.5958.5959.5960.5961.5962.5963.5964.5965.5966.5967.5968.5969.5970.5971.5972.5973.5974.5975.5976.5977.5978.5979.5980.5981.5982.5983.5984.5985.5986.5987.5988.5989.5990.5991.5992.5993.5994.5995.5996.5997.5998.5999.6000.6001.6002.6003.6004.6005.6006.6007.6008.6009.6010.6011.6012.6013.6014.6015.6016.6017.6018.6019.6020.6021.6022.6023.6024.6025.6026.6027.6028.6029.6030.6031.6032.6033.6034.6035.6036.6037.6038.6039.6040.6041.6042.6043.6044.6045.6046.6047.6048.6049.6050.6051.6052.6053.6054.6055.6056.6057.6058.6059.6060.6061.6062.6063.6064.6065.6066.6067.6068.6069.6070.6071.6072.6073.6074.6075.6076.6077.6078.6079.6080.6081.6082.6083.6084.6085.6086.6087.6088.6089.6090.6091.6092.6093.6094.6095.6096.6097.6098.6099.6100.6101.6102.6103.6104.6105.6106.6107.6108.6109.6110.6111.6112.6113.6114.6115.6116.6117.6118.6119.6120.6121.6122.6123.6124.6125.6126.6127.6128.6129.6130.6131.6132.6133.6134.6135.6136.6137.6138.6139.6140.6141.6142.6143.6144.6145.6146.6147.6148.6149.6150.6151.6152.6153.6154.6155.6156.6157.6158.6159.6160.6161.6162.6163.6164.6165.6166.6167.6168.6169.6170.6171.6172.6173.6174.6175.6176.6177.6178.6179.6180.6181.6182.6183.6184.6185.6186.6187.6188.6189.6190.6191.6192.6193.6194.6195.6196.6197.6198.6199.6200.6201.6202.6203.6204.6205.6206.6207.6208.6209.6210.6211.6212.6213.6214.6215.6216.6217.6218.6219.6220.6221.6222.6223.6224.6225.6226.6227.6228.6229.6230.6231.6232.6233.6234.6235.6236.6237.6238.6239.6240.6241.6242.6243.6244.6245.6246.6247.6248.6249.6250.6251.6252.6253.6254.6255.6256.6257.6258.6259.6260.6261.6262.6263.6264.6265.6266.6267.6268.6269.6270.6271.6272.6273.6274.6275.6276.6277.6278.6279.6280.6281.6282.6283.6284.6285.6286.6287.6288.6289.6290.6291.6292.6293.6294.6295.6296.6297.6298.6299.6300.6301.6302.6303.6304.6305.6306.6307.6308.6309.6310.6311.6312.6313.6314.6315.6316.6317.6318.6319.6320.6321.6322.6323.6324.6325.6326.6327.6328.6329.6330.6331.6332.6333.6334.6335.6336.6337.6338.6339.6340.6341.6342.6343.6344.6345.6346.6347.6348.6349.6350.6351.6352.6353.6354.6355.6356.6357.6358.6359.6360.6361.6362.6363.6364.6365.6366.6367.6368.6369.6370.6371.6372.6373.6374.6375.6376.6377.6378.6379.6380.6381.6382.6383.6384.6385.6386.6387.6388.6389.6390.6391.6392.6393.6394.6395.6396.6397.6398.6399.6400.6401.6402.6403.6404.6405.6406.6407.6408.6409.6410.6411.6412.6413.6414.6415.6416.6417.6418.6419.6420.6421.6422.6423.6424.6425.6426.6427.6428.6429.6430.6431.6432.6433.6434.6435.6436.6437.6438.6439.6440.6441.6442.6443.6444.6445.6446.6447.6448.6449.6450.6451.6452.6453.6454.6455.6456.6457.6458.6459.6460.6461.6462.6463.6464.6465.6466.6467.6468.6469.6470.6471.6472.6473.6474.6475.6476.6477.6478.6479.6480.6481.6482.6483.6484.6485.6486.6487.6488.6489.6490.6491.6492.6493.6494.6495.6496.6497.6498.6499.6500.6501.6502.6503.6504.6505.6506.6507.6508.6509.6510.6511.6512.6513.6514.6515.6516.6517.6518.6519.6520.6521.6522.6523.6524.6525.6526.6527.6528.6529.6530.6531.6532.6533.6534.6535.6536.6537.6538.6539.6540.6541.6542.6543.6544.6545.6546.6547.6548.6549.6550.6551.6552.6553.6554.6555.6556.6557.6558.6559.6560.6561.6562.6563.6564.6565.6566.6567.6568.6569.6570.6571.6572.6573.6574.6575.6576.6577.6578.6579.6580.6581.6582.6583.6584.6585.6586.6587.6588.6589.6590.6591.6592.6593.6594.6595.6596.6597.6598.6599.6600.6601.6602.6603.6604.6605.6606.6607.6608.6609.6610.6611.6612.6613.6614.6615.6616.6617.6618.6619.6620.6621.6622.6623.6624.6625.6626.6627.6628.6629.6630.6631.6632.6633.6634.6635.6636.6637.6638.6639.6640.6641.6642.6643.6644.6645.6646.6647.6648.6649.6650.6651.6652.6653.6654.6655.6656.6657.6658.6659.6660.6661.6662.6663.6664.6665.6666.6667.6668.6669.6670.6671.6672.6673.6674.6675.6676.6677.6678.6679.6680.6681.6682.6683.6684.6685.6686.6687.6688.6689.6690.6691.6692.6693.6694.6695.6696.6697.6698.6699.6700.6701.6702.6703.6704.6705.6706.6707.6708.6709.6710.6711.6712.6713.6714.6715.6716.6717.6718.6719.6720.6721.6722.6723.6724.6725.6726.6727.6728.6729.6730.6731.6732.6733.6734.6735.6736.6737.6738.6739.6740.6741.6742.6743.6744.6745.6746.6747.6748.6749.6750.6751.6752.6753.6754.6755.6756.6757.6758.6759.6760.6761.6762.6763.6764.6765.6766.6767.6768.6769.6770.6771.6772.6773.6774.6775.6776.6777.6778.6779.6780.6781.6782.6783.6784.6785.6786.6787.6788.6789.6790.6791.6792.6793.6794.6795.6796.6797.6798.6799.6800.6801.6802.6803.6804.6805.6806.6807.6808.6809.6810.6811.6812.6813.6814.6815.6816.6817.6818.6819.6820.6821.6822.6823.6824.6825.6826.6827.6828.6829.6830.6831.6832.6833.6834.6835.6836.6837.6838.6839.6840.6841.6842.6843.6844.6845.6846.6847.6848.6849.6850.6851.6852.6853.6854.6855.6856.6857.6858.6859.6860.6861.6862.6863.6864.6865.6866.6867.6868.6869.6870.6871.6872.6873.6874.6875.6876.6877.6878.6879.6880.6881.6882.6883.6884.6885.6886.6887.6888.6889.6890.6891.6892.6893.6894.6895.6896.6897.6898.6899.6900.6901.6902.6903.6904.6905.6906.6907.6908.6909.6910.6911.6912.6913.6914.6915.6916.6917.6918.6919.6920.6921.6922.6923.6924.6925.6926.6927.6928.6929.6930.6931.6932.6933.6934.6935.6936.6937.6938.6939.6940.6941.6942.6943.6944.6945.6946.6947.6948.6949.6950.6951.6952.6953.6954.6955.6956.6957.6958.6959.6960.6961.6962.6963.6964.6965.6966.6967.6968.6969.6970.6971.6972.6973.6974.6975.6976.6977.6978.6979.6980.6981.6982.6983.6984.6985.6986.6987.6988.6989.6990.6991.6992.6993.6994.6995.6996.6997.6998.6999.7000.7001.7002.7003.7004.7005.7006.7007.7008.7009.7010.7011.7012.7013.7014.7015.7016.7017.7018.7019.7020.7021.7022.7023.7024.7025.7026.7027.7028.7029.7030.7031.7032.7033.7034.7035.7036.7037.7038.7039.7040.7041.7042.7043.7044.7045.7046.7047.7048.7049.7050.7051.7052.7053.7054.7055.7056.7057.7058.7059.7060.7061.7062.7063.7064.7065.7066.7067.7068.7069.7070.7071.7072.7073.7074.7075.7076.7077.7078.7079.7080.7081.7082.7083.7084.7085.7086.7087.7088.7089.7090.7091.7092.7093.7094.7095.7096.7097.7098.7099.7100.7101.7102.7103.7104.7105.7106.7107.7108.7109.7110.7111.7112.7113.7114.7115.7116.7117.7118.7119.7120.7121.7122.7123.7124.7125.7126.7127.7128.7129.7130.7131.7132.7133.7134.7135.7136.7137.7138.7139.7140.7141.7142.7143.7144.7145.7146.7147.7148.7149.7150.7151.7152.7153.7154.7155.7156.7157.7158.7159.7160.7161.7162.7163.7164.7165.7166.7167.7168.7169.7170.7171.7172.7173.7174.7175.7176.7177.7178.7179.7180.7181.7182.7183.7184.7185.7186.7187.7188.7189.7190.7191.7192.7193.7194.7195.7196.7197.7198.7199.7200.7201.7202.7203.7204.7205.7206.7207.7208.7209.7210.7211.7212.7213.7214.7215.7216.7217.7218.7219.7220.7221.7222.7223.7224.7225.7226.7227.7228.7229.7230.7231.7232.7233.7234.7235.7236.7237.7238.7239.7240.7241.7242.7243.7244.7245.7246.7247.7248.7249.7250.7251.7252.7253.7254.7255.7256.7257.7258.7259.7260.7261.7262.7263.7264.7265.7266.7267.7268.7269.7270.7271.7272.7273.7274.7275.7276.7277.7278.7279.7280.7281.7282.7283.7284.7285.7286.7287.7288.7289.7290.7291.7292.7293.7294.7295.7296.7297.7298.7299.7300.7301.7302.7303.7304.7305.7306.7307.7308.7309.7310.7311.7312.7313.7314.7315.7316.7317.7318.7319.7320.7321.7322.7323.7324.7325.7326.7327.7328.7329.7330.7331.7332.7333.7334.7335.7336.7337.7338.7339.7340.7341.7342.7343.7344.7345.7346.7347.7348.7349.7350.7351.7352.7353.7354.7355.7356.7357.7358.7359.7360.7361.7362.7363.7364.7365.7366.7367.7368.7369.7370.7371.7372.7373.7374.7375.7376.7377.7378.7379.7380.7381.7382.7383.7384.7385.7386.7387.7388.7389.7390.7391.7392.7393.7394.7395.7396.7397.7398.7399.7400.7401.7402.7403.7404.7405.7406.7407.7408.7409.7410.7411.7412.7413.7414.7415.7416.7417.7418.7419.7420.7421.7422.7423.7424.7425.7426.7427.7428.7429.7430.7431.7432.7433.7434.7435.7436.7437.7438.7439.7440.7441.7442.7443.7444.7445.7446.7447.7448.7449.7450.7451.7452.7453.7454.7455.7456.7457.7458.7459.7460.7461.7462.7463.7464.7465.7466.7467.7468.7469.7470.7471.7472.7473.7474.7475.7476.7477.7478.7479.7480.7481.7482.7483.7484.7485.7486.7487.7488.7489.7490.7491.7492.7493.7494.7495.7496.7497.7498.7499.7500.7501.7502.7503.7504.7505.7506.7507.7508.7509.7510.7511.7512.7513.7514.7515.7516.7517.7518.7519.7520.7521.7522.7523.7524.7525.7526.7527.7528.7529.7530.7531.7532.7533.7534.7535.7536.7537.7538.7539.7540.7541.7542.7543.7544.7545.7546.7547.7548.7549.7550.7551.7552.7553.7554.7555.7556.7557.7558.7559.7560.7561.7562.7563.7564.7565.7566.7567.7568.7569.7570.7571.7572.7573.7574.7575.7576.7577.7578.7579.7580.7581.7582.7583.7584.7585.7586.7587.7588.7589.7590.7591.7592.7593.7594.7595.7596.7597.7598.7599.7600.7601.7602.7603.7604.7605.7606.7607.7608.7609.7610.7611.7612.7613.7614.7615.7616.7617.7618.7619.7620.7621.7622.7623.7624.7625.7626.7627.7628.7629.7630.7631.7632.7633.7634.7635.7636.7637.7638.7639.7640.7641.7642.7643.7644.7645.7646.7647.7648.7649.7650.7651.7652.7653.7654.7655.7656.7657.7658.7659.7660.7661.7662.7663.7664.7665.7666.7667.7668.7669.7670.7671.7672.7673.7674.7675.7676.7677.7678.7679.7680.7681.7682.7683.7684.7685.7686.7687.7688.7689.7690.7691.7692.7693.7694.7695.7696.7697.7698.7699.7700.7701.7702.7703.7704.7705.7706.7707.7708.7709.7710.7711.7712.7713.7714.7715.7716.7717.7718.7719.7720.7721.7722.7723.7724.7725.7726.7727.7728.7729.7730.7731.7732.7733.7734.7735.7736.7737.7738.7739.7740.7741.7742.7743.7744.7745.7746.7747.7748.7749.7750.7751.7752.7753.7754.7755.7756.7757.7758.7759.7760.7761.7762.7763.7764.7765.7766.7767.7768.7769.7770.7771.7772.7773.7774.7775.7776.7777.7778.7779.7780.7781.7782.7783.7784.7785.7786.7787.7788.7789.7790.7791.7792.7793.7794.7795.7796.7797.7798.7799.7800.7801.7802.7803.7804.7805.7806.7807.7808.7809.7810.7811.7812.7813.7814.7815.7816.7817.7818.7819.7820.7821.7822.7823.7824.7825.7826.7827.7828.7829.7830.7831.7832.7833.7834.7835.7836.7837.7838.7839.7840.7841.7842.7843.7844.7845.7846.7847.7848.7849.7850.7851.7852.7853.7854.7855.7856.7857.7858.7859.7860.7861.7862.7863.7864.7865.7866.7867.7868.7869.7870.7871.7872.7873.7874.7875.7876.7877.7878.7879.7880.7881.7882.7883.7884.7885.7886.7887.7888.7889.7890.7891.7892.7893.7894.7895.7896.7897.7898.7899.7900.7901.7902.7903.7904.7905.7906.7907.7908.7909.7910.7911.7912.7913.7914.7915.7916.7917.7918.7919.7920.7921.7922.7923.7924.7925.7926.7927.7928.7929.7930.7931.7932.7933.7934.7935.7936.7937.7938.7939.7940.7941.7942.7943.7944.7945.7946.7947.7948.7949.7950.7951.7952.7953.7954.7955.7956.7957.7958.7959.7960.7961.7962.7963.7964.7965.7966.7967.7968.7969.7970.7971.7972.7973.7974.7975.7976.7977.7978.7979.7980.7981.7982.7983.7984.7985.7986.7987.7988.7989.7990.7991.7992.7993.7994.7995.7996.7997.7998.7999.8000.8001.8002.8003.8004.8005.8006.8007.8008.8009.8010.8011.8012.8013.8014.8015.8016.8017.8018.8019.8020.8021.8022.8023.8024.8025.8026.8027.8028.8029.8030.8031.8032.8033.8034.8035.8036.8037.8038.8039.8040.8041.8042.8043.8044.8045.8046.8047.8048.8049.8050.8051.8052.8053.8054.8055.8056.8057.8058.8059.8060.8061.8062.8063.8064.8065.8066.8067.8068.8069.8070.8071.8072.8073.8074.8075.8076.8077.8078.8079.8080.8081.8082.8083.8084.8085.8086.8087.8088.8089.8090.8091.8092.8093.8094.8095.8096.8097.8098.8099.8100.8101.8102.8103.8104.8105.8106.8107.8108.8109.8110.8111.8112.8113.8114.8115.8116.8117.8118.8119.8120.8121.8122.8123.8124.8125.8126.8127.8128.8129.8130.8131.8132.8133.8134.8135.8136.8137.8138.8139.8140.8141.8142.8143.8144.8145.8146.8147.8148.8149.8150.8151.8152.8153.8154.8155.8156.8157.8158.8159.8160.8161.8162.8163.8164.8165.8166.8167.8168.8169.8170.8171.8172.8173.8174.8175.8176.8177.8178.8179.8180.8181.8182.8183.8184.8185.8186.8187.8188.8189.8190.8191.8192.8193.8194.8195.8196.8197.8198.8199.8200.8201.8202.8203.8204.8205.8206.8207.8208.8209.8210.8211.8212.8213.8214.8215.8216.8217.8218.8219.8220.8221.8222.8223.8224.8225.8226.8227.8228.8229.8230.8231.8232.8233.8234.8235.8236.8237.8238.8239.8240.8241.8242.8243.8244.8245.8246.8247.8248.8249.8250.8251.8252.8253.8254.8255.8256.8257.8258.8259.8260.8261.8262.8263.8264.8265.8266.8267.8268.8269.8270.8271.8272.8273.8274.8275.8276.8277.8278.8279.8280.8281.8282.8283.8284.8285.8286.8287.8288.8289.8290.8291.8292.8293.8294.8295.8296.8297.8298.8299.8300.8301.8302.8303.8304.8305.8306.8307.8308.8309.8310.8311.8312.8313.8314.8315.8316.8317.8318.8319.8320.8321.8322.8323.8324.8325.8326.8327.8328.8329.8330.8331.8332.8333.8334.8335.8336.8337.8338.8339.8340.8341.8342.8343.8344.8345.8346.8347.8348.8349.8350.8351.8352.8353.8354.8355.8356.8357.8358.8359.8360.8361.8362.8363.8364.8365.8366.8367.8368.8369.8370.8371.8372.8373.8374.8375.8376.8377.8378.8379.8380.8381.8382.8383.8384.8385.8386.8387.8388.8389.8390.8391.8392.8393.8394.8395.8396.8397.8398.8399.8400.8401.8402.8403.8404.8405.8406.8407.8408.8409.8410.8411.8412.8413.8414.8415.8416.8417.8418.8419.8420.8421.8422.8423.8424.8425.8426.8427.8428.8429.8430.8431.8432.8433.8434.8435.8436.8437.8438.8439.8440.8441.8442.8443.8444.8445.8446.8447.8448.8449.8450.8451.8452.8453.8454.8455.8456.8457.8458.8459.8460.8461.8462.8463.8464.8465.8466.8467.8468.8469.8470.8471.8472.8473.8474.8475.8476.8477.8478.8479.8480.8481.8482.8483.8484.8485.8486.8487.8488.8489.8490.8491.8492.8493.8494.8495.8496.8497.8498.8499.8500.8501.8502.8503.8504.8505.8506.8507.8508.8509.8510.8511.8512.8513.8514.8515.8516.8517.8518.8519.8520.8521.8522.8523.8524.8525.8526.8527.8528.8529.8530.8531.8532.8533.8534.8535.8536.8537.8538.8539.8540.8541.8542.8543.8544.8545.8546.8547.8548.8549.8550.8551.8552.8553.8554.8555.8556.8557.8558.8559.8560.8561.8562.8563.8564.8565.8566.8567.8568.8569.8570.8571.8572.8573.8574.8575.8576.8577.8578.8579.8580.8581.8582.8583.8584.8585.8586.8587.8588.8589.8590.8591.8592.8593.8594.8595.8596.8597.8598.8599.8600.8601.8602.8603.8604.8605.8606.8607.8608.8609.8610.8611.8612.8613.8614.8615.8616.8617.8618.8619.8620.8621.8622.8623.8624.8625.8626.8627.8628.8629.8630.8631.8632.8633.8634.8635.8636.8637.8638.8639.8640.8641.8642.8643.8644.8645.8646.8647.8648.8649.8650.8651.8652.8653.8654.8655.8656.8657.8658.8659.8660.8661.8662.8663.8664.8665.8666.8667.8668.8669.8670.8671.8672.8673.8674.8675.8676.8677.8678.8679.8680.8681.8682.8683.8684.8685.8686.8687.8688.8689.8690.8691.8692.8693.8694.8695.8696.8697.8698.8699.8700.8701.8702.8703.8704.8705.8706.8707.8708.8709.8710.8711.8712.8713.8714.8715.8716.8717.8718.8719.8720.8721.8722.8723.8724.8725.8726.8727.8728.8729.8730.8731.8732.8733.8734.8735.8736.8737.8738.8739.8740.8741.8742.8743.8744.8745.8746.8747.8748.8749.8750.8751.8752.8753.8754.8755.8756.8757.8758.8759.8760.8761.8762.8763.8764.8765.8766.8767.8768.8769.8770.8771.8772.8773.8774.8775.8776.8777.8778.8779.8780.8781.8782.8783.8784.8785.8786.8787.8788.8789.8790.8791.8792.8793.8794.8795.8796.8797.8798.8799.8800.8801.8802.8803.8804.8805.8806.8807.8808.8809.8810.8811.8812.8813.8814.8815.8816.8817.8818.8819.8820.8821.8822.8823.8824.8825.8826.8827.8828.8829.8830.8831.8832.8833.8834.8835.8836.8837.8838.8839.8840.8841.8842.8843.8844.8845.8846.8847.8848.8849.8850.8851.8852.8853.8854.8855.8856.8857.8858.8859.8860.8861.8862.8863.8864.8865.8866.8867.8868.8869.8870.8871.8872.8873.8874.8875.8876.8877.8878.8879.8880.8881.8882.8883.8884.8885.8886.8887.8888.8889.8890.8891.8892.8893.8894.8895.8896.8897.8898.8899.8900.8901.8902.8903.8904.8905.8906.8907.8908.8909.8910.8911.8912.8913.8914.8915.8916.8917.8918.8919.8920.8921.8922.8923.8924.8925.8926.8927.8928.8929.8930.8931.8932.8933.8934.8935.8936.8937.8938.8939.8940.8941.8942.8943.8944.8945.8946.8947.8948.8949.8950.8951.8952.8953.8954.8955.8956.8957.8958.8959.8960.8961.8962.8963.8964.8965.8966.8967.8968.8969.8970.8971.8972.8973.8974.8975.8976.8977.8978.8979.8980.8981.8982.8983.8984.8985.8986.8987.8988.8989.8990.8991.8992.8993.8994.8995.8996.8997.8998.8999.9000.9001.9002.9003.9004.9005.9006.9007.9008.9009.9010.9011.9012.9013.9014.9015.9016.9017.9018.9019.9020.9021.9022.9023.9024.9025.9026.9027.9028.9029.9030.9031.9032.9033.9034.9035.9036.9037.9038.9039.9040.9041.9042.9043.9044.9045.9046.9047.9048.9049.9050.9051.9052.9053.9054.9055.9056.9057.9058.9059.9060.9061.9062.9063.9064.9065.9066.9067.9068.9069.9070.9071.9072.9073.9074.9075.9076.9077.9078.9079.9080.9081.9082.9083.9084.9085.9086.9087.9088.9089.9090.9091.9092.9093.9094.9095.9096.9097.9098.9099.9100.9101.9102.9103.9104.9105.9106.9107.9108.9109.9110.9111.9112.9113.9114.9115.9116.9117.9118.9119.9120.9121.9122.9123.9124.9125.9126.9127.9128.9129.9130.9131.9132.9133.9134.9135.9136.9137.9138.9139.9140.9141.9142.9143.9144.9145.9146.9147.9148.9149.9150.9151.9152.9153.9154.9155.9156.9157.9158.9159.9160.9161.9162.9163.9164.9165.9166.9167.9168.9169.9170.9171.9172.9173.9174.9175.9176.9177.9178.9179.9180.9181.9182.9183.9184.9185.9186.9187.9188.9189.9190.9191.9192.9193.9194.9195.9196.9197.9198.9199.9200.9201.9202.9203.9204.9205.9206.9207.9208.9209.9210.9211.9212.9213.9214.9215.9216.9217.9218.9219.9220.9221.9222.9223.9224.9225.9226.9227.9228.9229.9230.9231.9232.9233.9234.9235.9236.9237.9238.9239.9240.9241.9242.9243.9244.9245.9246.9247.9248.9249.9250.9251.9252.9253.9254.9255.9256.9257.9258.9259.9260.9261.9262.9263.9264.9265.9266.9267.9268.9269.9270.9271.9272.9273.9274.9275.9276.9277.9278.9279.9280.9281.9282.9283.9284.9285.9286.9287.9288.9289.9290.9291.9292.9293.9294.9295.9296.9297.9298.9299.9300.9301.9302.9303.9304.9305.9306.9307.9308.9309.9310.9311.9312.9313.9314.9315.9316.9317.9318.9319.9320.9321.9322.9323.9324.9325.9326.9327.9328.9329.9330.9331.9332.9333.9334.9335.9336.9337.9338.9339.9340.9341.9342.9343.9344.9345.9346.9347.9348.9349.9350.9351.9352.9353.9354.9355.9356.9357.9358.9359.9360.9361.9362.9363.9364.9365.9366.9367.9368.9369.9370.9371.9372.9373.9374.9375.9376.9377.9378.9379.9380.9381.9382.9383.9384.9385.9386.9387.9388.9389.9390.9391.9392.9393.9394.9395.9396.9397.9398.9399.9400.9401.9402.9403.9404.9405.9406.9407.9408.9409.9410.9411.9412.9413.9414.9415.9416.9417.9418.9419.9420.9421.9422.9423.9424.9425.9426.9427.9428.9429.9430.9431.9432.9433.9434.9435.9436.9437.9438.9439.9440.9441.9442.9443.9444.9445.9446.9447.9448.9449.9450.9451.9452.9453.9454.9455.9456.9457.9458.9459.9460.9461.9462.9463.9464.9465.9466.9467.9468.9469.9470.9471.9472.9473.9474.9475.9476.9477.9478.9479.9480.9481.9482.9483.9484.9485.9486.9487.9488.9489.9490.9491.9492.9493.9494.9495.9496.9497.9498.9499.9500.9501.9502.9503.9504.9505.9506.9507.9508.9509.9510.9511.9512.9513.9514.9515.9516.9517.9518.9519.9520.9521.9522.9523.9524.9525.9526.9527.9528.9529.9530.9531.9532.9533.9534.9535.9536.9537.9538.9539.9540.9541.9542.9543.9544.9545.9546.9547.9548.9549.9550.9551.9552.9553.9554.9555.9556.9557.9558.9559.9560.9561.9562.9563.9564.9565.9566.9567.9568.9569.9570.9571.9572.9573.9574.9575.9576.9577.9578.9579.9580.9581.9582.9583.9584.9585.9586.9587.9588.9589.9590.9591.9592.9593.9594.9595.9596.9597.9598.9599.9600.9601.9602.9603.9604.9605.9606.9607.9608.9609.9610.9611.9612.9613.9614.9615.9616.9617.9618.9619.9620.9621.9622.9623.9624.9625.9626.9627.9628.9629.9630.9631.9632.9633.9634.9635.9636.9637.9638.9639.9640.9641.9642.9643.9644.9645.9646.9647.9648.9649.9650.9651.9652.9653.9654.9655.9656.9657.9658.9659.9660.9661.9662.9663.9664.9665.9666.9667.9668.9669.9670.9671.9672.9673.9674.9675.9676.9677.9678.9679.9680.9681.9682.9683.9684.9685.9686.9687.9688.9689.9690.9691.9692.9693.9694.9695.9696.9697.9698.9699.9700.9701.9702.9703.9704.9705.9706.9707.9708.9709.9710.9711.9712.9713.9714.9715.9716.9717.9718.9719.9720.9721.9722.9723.9724.9725.9726.9727.9728.9729.9730.9731.9732.9733.9734.9735.9736.9737.9738.9739.9740.9741.9742.9743.9744.9745.9746.9747.9748.9749.9750.9751.9752.9753.9754.9755.9756.9757.9758.9759.9760.9761.9762.9763.9764.9765.9766.9767.9768.9769.9770.9771.9772.9773.9774.9775.9776.9777.9778.9779.9780.9781.9782.9783.9784.9785.9786.9787.9788.9789.9790.9791.9792.9793.9794.9795.9796.9797.9798.9799.9800.9801.9802.9803.9804.9805.9806.9807.9808.9809.9810.9811.9812.9813.9814.9815.9816.9817.9818.9819.9820.9821.9822.9823.9824.9825.9826.9827.9828.9829.9830.9831.9832.9833.9834.9835.9836.9837.9838.9839.9840.9841.9842.9843.9844.9845.9846.9847.9848.9849.9850.9851.9852.9853.9854.9855.9856.9857.9858.9859.9860.9861.9862.9863.9864.9865.9866.9867.9868.9869.9870.9871.9872.9873.9874.9875.9876.9877.9878.9879.9880.9881.9882.9883.9884.9885.9886.9887.9888.9889.9890.9891.9892.9893.9894.9895.9896.9897.9898.9899.9900.9901.9902.9903.9904.9905.9906.9907.9908.9909.9910.9911.9912.9913.9914.9915.9916.9917.9918.9919.9920.9921.9922.9923.9924.9925.9926.9927.9928.9929.9930.9931.9932.9933.9934.9935.9936.9937.9938.9939.9940.9941.9942.9943.9944.9945.9946.9947.9948.9949.9950.9951.9952.9953.9954.9955.9956.9957.9958.9959.9960.9961.9962.9963.9964.9965.9966.9967.9968.9969.9970.9971.9972.9973.9974.9975.9976.9977.9978.9979.9980.9981.9982.9983.9984.9985.9986.9987.9988.9989.9990.9991.9992.9993.9994.9995.9996.9997.9998.9999.10000.10001.10002.10003.10004.10005.10006.10007.10008.10009.10010.10011.10012.10013.10014.10015.10016.10017.10018.10019.10020.10021.10022.10023.10024.10025.10026.10027.10028.10029.10030.10031.10032.10033.10034.10035.10036.10037.10038.10039.10040.10041.10042.10043.10044.10045.10046.10047.10048.10049.10050.10051.10052.10053.10054.10055.10056.10057.10058.10059.10060.10061.10062.10063.10064.10065.10066.10067.10068.10069.10070.10071.10072.10073.10074.10075.10076.10077.10078.10079.10080.10081.10082.10083.10084.10085.10086.10087.10088.10089.10090.10091.10092.10093.10094.10095.10096.10097.10098.10099.10100.10101.10102.10103.10104.10105.10106.10107.10108.10109.10110.10111.10112.10113.10114.10115.10116.10117.10118.10119.10120.10121.10122.10123.10124.10125.10126.10127.10128.10129.10130.10131.10132.10133.10134.10135.10136.10137.10138.10139.10140.10141.10142.10143.10144.10145.10146.10147.10148.10149.10150.10151.10152.10153.10154.10155.10156.10157.10158.10159.10160.10161.10162.10163.10164.10165.10166.10167.10168.10169.10170.10171.10172.10173.10174.10175.10176.10177.10178.10179.10180.10181.10182.10183.10184.10185.10186.10187.10188.10189.10190.10191.10192.10193.10194.10195.10196.10197.10198.10199.10200.10201.10202.10203.10204.10205.10206.10207.10208.10209.10210.10211.10212.10213.10214.10215.10216.10217.10218.10219.10220.10221.10222.10223.10224.10225.10226.10227.10228.10229.10230.10231.10232.10233.10234.10235.10236.10237.10238.10239.10240.10241.10242.10243.10244.10245.10246.10247.10248.10249.10250.10251.10252.10253.10254.10255.10256.10257.10258.10259.10260.10261.10262.10263.10264.10265.10266.10267.10268.10269.10270.10271.10272.10273.10274.10275.10276.10277.10278.10279.10280.10281.10282.10283.10284.10285.10286.10287.10288.10289.10290.10291.10292.10293.10294.10295.10296.10297.10298.10299.10300.10301.10302.10303.10304.10305.10306.10307.10308.10309.10310.10311.10312.10313.10314.10315.10316.10317.10318.10319.10320.10321.10322.10323.10324.10325.10326.10327.10328.10329.10330.10331.10332.10333.10334.10335.10336.10337.10338.10339.10340.10341.10342.10343.10344.10345.10346.10347.10348.10349.10350.10351.10352.10353.10354.10355.10356.10357.10358.10359.10360.10361.10362.10363.10364.10365.10366.10367.10368.10369.10370.10371.10372.10373.10374.10375.10376.10377.10378.10379.10380.10381.10382.10383.10384.10385.10386.10387.10388.10389.10390.10391.10392.10393.10394.10395.10396.10397.10398.10399.10400.10401.10402.10403.10404.10405.10406.10407.10408.10409.10410.10411.10412.10413.10414.10415.10416.10417.10418.10419.10420.10421.10422.10423.10424.10425.10426.10427.10428.10429.10430.10431.10432.10433.10434.10435.10436.10437.10438.10439.10440.10441.10442.10443.10444.10445.10446.10447.10448.10449.10450.10451.10452.10453.10454.10455.10456.10457.10458.10459.10460.10461.10462.10463.10464.10465.10466.10467.10468.10469.10470.10471.10472.10473.10474.10475.10476.10477.10478.10479.10480.10481.10482.10483.10484.10485.10486.10487.10488.10489.10490.10491.10492.10493.10494.10495.10496.10497.10498.10499.10500.10501.10502.10503.10504.10505.10506.10507.10508.10509.10510.10511.10512.10513.10514.10515.10516.10517.10518.10519.10520.10521.10522.10523.10524.10525.10526.10527.10528.10529.10530.10531.10532.10533.10534.10535.10536.10537.10538.10539.10540.10541.10542.10543.10544.10545.10546.10547.10548.10549.10550.10551.10552.10553.10554.10555.10556.10557.10558.10559.10560.10561.10562.10563.10564.10565.10566.10567.10568.10569.10570.10571.10572.10573.10574.10575.10576.10577.10578.10579.10580.10581.10582.10583.10584.10585.10586.10587.10588.10589.10590.10591.10592.10593.10594.10595.10596.10597.10598.10599.10600.10601.10602.10603.10604.10605.10606.10607.10608.10609.10610.10611.10612.10613.10614.10615.10616.10617.10618.10619.10620.10621.10622.10623.10624.10625.10626.10627.10628.10629.10630.10631.10632.10633.10634.10635.10636.10637.10638.10639.10640.10641.10642.10643.10644.10645.10646.10647.10648.10649.10650.10651.10652.10653.10654.10655.10656.10657.10658.10659.10660.10661.10662.10663.10664.10665.10666.10667.10668.10669.10670.10671.10672.10673.10674.10675.10676.10677.10678.10679.10680.10681.10682.10683.10684.10685.10686.10687.10688.10689.10690.10691.10692.10693.10694.10695.10696.10697.10698.10699.10700.10701.10702.10703.10704.10705.10706.10707.10708.10709.10710.10711.10712.10713.10714.10715.10716.10717.10718.10719.10720.10721.10722.10723.10724.10725.10726.10727.10728.10729.10730.10731.10732.10733.10734.10735.10736.10737.10738.10739.10740.10741.10742.10743.10744.10745.10746.10747.10748.10749.10750.10751.10752.10753.10754.10755.10756.10757.10758.10759.10760.10761.10762.10763.10764.10765.10766.10767.10768.10769.10770.10771.10772.10773.10774.10775.10776.10777.10778.10779.10780.10781.10782.10783.10784.10785.10786.10787.10788.10789.10790.10791.10792.10793.10794.10795.10796.10797.10798.10799.10800.10801.10802.10803.10804.10805.10806.10807.10808.10809.10810.10811.10812.10813.10814.10815.10816.10817.10818.10819.10820.10821.10822.10823.10824.10825.10826.10827.10828.10829.10830.10831.10832.10833.10834.10835.10836.10837.10838.10839.10840.10841.10842.10843.10844.10845.10846.10847.10848.10849.10850.10851.10852.10853.10854.10855.10856.10857.10858.10859.10860.10861.10862.10863.10864.10865.10866.10867.10868.10869.10870.10871.10872.10873.10874.10875.10876.10877.10878.10879.10880.10881.10882.10883.10884.10885.10886.10887.10888.10889.10890.10891.10892.10893.10894.10895.10896.10897.10898.10899.10900.10901.10902.10903.10904.10905.10906.10907.10908.10909.10910.10911.10912.10913.10914.10915.10916.10917.10918.10919.10920.10921.10922.10923.10924.10925.10926.10927.10928.10929.10930.10931.10932.10933.10934.10935.10936.10937.10938.10939.10940.10941.10942.10943.10944.10945.10946.10947.10948.10949.10950.10951.10952.10953.10954.10955.10956.10957.10958.10959.10960.10961.10962.10963.10964.10965.10966.10967.10968.10969.10970.10971.10972.10973.10974.10975.10976.10977.10978.10979.10980.10981.10982.10983.10984.10985.10986.10987.10988.10989.10990.10991.10992.10993.10994.10995.10996.10997.10998.10999.11000.11001.11002.11003.11004.11005.11006.11007.11008.11009.11010.11011.11012.11013.11014.11015.11016.11017.11018.11019.11020.11021.11022.11023.11024.11025.11026.11027.11028.11029.11030.11031.11032.11033.11034.11035.11036.11037.11038.11039.11040.11041.11042.11043.11044.11045.11046.11047.11048.11049.11050.11051.11052.11053.11054.11055.11056.11057.11058.11059.11060.11061.11062.11063.11064.11065.11066.11067.11068.11069.11070.11071.11072.11073.11074.11075.11076.11077.11078.11079.11080.11081.11082.11083.11084.11085.11086.11087.11088.11089.11090.11091.11092.11093.11094.11095.11096.11097.11098.11099.11100.11101.11102.11103.11104.11105.11106.11107.11108.11109.11110.11111.11112.11113.11114.11115.11116.11117.11118.11119.11120.11121.11122.11123.11124.11125.11126.11127.11128.11129.11130.11131.11132.11133.11134.11135.11136.11137.11138.11139.11140.11141.11142.11143.11144.11145.11146.11147.11148.11149.11150.11151.11152.11153.11154.11155.11156.11157.11158.11159.11160.11161.11162.11163.11164.11165.11166.11167.11168.11169.11170.11171.11172.11173.11174.11175.11176.11177.11178.11179.11180.11181.11182.11183.11184.11185.11186.11187.11188.11189.11190.11191.11192.11193.11194.11195.11196.11197.11198.11199.11200.11201.11202.11203.11204.11205.11206.11207.11208.11209.11210.11211.11212.11213.11214.11215.11216.11217.11218.11219.11220.11221.11222.11223.11224.11225.11226.11227.11228.11229.11230.11231.11232.11233.11234.11235.11236.11237.11238.11239.11240.11241.11242.11243.11244.11245.11246.11247.11248.11249.11250.11251.11252.11253.11254.11255.11256.11257.11258.11259.11260.11261.11262.11263.11264.11265.11266.11267.11268.11269.11270.11271.11272.11273.11274.11275.11276.11277.11278.11279.11280.11281.11282.11283.11284.11285.11286.11287.11288.11289.11290.11291.11292.11293.11294.11295.11296.11297.11298.11299.11300.11301.11302.11303.11304.11305.11306.11307.11308.11309.11310.11311.11312.11313.11314.11315.11316.11317.11318.11319.11320.11321.11322.11323.11324.11325.11326.11327.11328.11329.11330.11331.11332.11333.11334.11335.11336.11337.11338.11339.11340.11341.11342.11343.11344.11345.11346.11347.11348.11349.11350.11351.11352.11353.11354.11355.11356.11357.11358.11359.11360.11361.11362.11363.11364.11365.11366.11367.11368.11369.11370.11371.11372.11373.11374.11375.11376.11377.11378.11379.11380.11381.11382.11383.11384.11385.11386.11387.11388.11389.11390.11391.11392.11393.11394.11395.11396.11397.11398.11399.11400.11401.11402.11403.11404.11405.11406.11407.11408.11409.11410.11411.11412.11413.11414.11415.11416.11417.11418.11419.11420.11421.11422.11423.11424.11425.11426.11427.11428.11429.11430.11431.11432.11433.11434.11435.11436.11437.11438.11439.11440.11441.11442.11443.11444.11445.11446.11447.11448.11449.11450.11451.11452.11453.11454.11455.11456.11457.11458.11459.11460.11461.11462.11463.11464.11465.11466.11467.11468.11469.11470.11471.11472.11473.11474.11475.11476.11477.11478.11479.11480.11481.11482.11483.11484.11485.11486.11487.11488.11489.11490.11491.11492.11493.11494.11495.11496.11497.11498.11499.11500.11501.11502.11503.11504.11505.11506.11507.11508.11509.11510.11511.11512.11513.11514.11515.11516.11517.11518.11519.11520.11521.11522.11523.11524.11525.11526.11527.11528.11529.11530.11531.11532.11533.11534.11535.11536.11537.11538.11539.11540.11541.11542.11543.11544.11545.11546.11547.11548.11549.11550.11551.11552.11553.11554.11555.11556.11557.11558.11559.11560.11561.11562.11563.11564.11565.11566.11567.11568.11569.11570.11571.11572.11573.11574.11575.11576.11577.11578.11579.11580.11581.11582.11583.11584.11585.11586.11587.11588.11589.11590.11591.11592.11593.11594.11595.11596.11597.11598.11599.11600.11601.11602.11603.11604.11605.11606.11607.11608.11609.11610.11611.11612.11613.11614.11615.11616.11617.11618.11619.11620.11621.11622.11623.11624.11625.11626.11627.11628.11629.11630.11631.11632.11633.11634.11635.11636.11637.11638.11639.11640.11641.11642.11643.11644.11645.11646.11647.11648.11649.11650.11651.11652.11653.11654.11655.11656.11657.11658.11659.11660.11661.11662.11663.11664.11665.11666.11667.11668.11669.11670.11671.11672.11673.11674.11675.11676.11677.11678.11679.11680.11681.11682.11683.11684.11685.11686.11687.11688.11689.11690.11691.11692.11693.11694.11695.11696.11697.11698.11699.11700.11701.11702.11703.11704.11705.11706.11707.11708.11709.11710.11711.11712.11713.11714.11715.11716.11717.11718.11719.11720.11721.11722.11723.11724.11725.11726.11727.11728.11729.11730.11731.11732.11733.11734.11735.11736.11737.11738.11739.11740.11741.11742.11743.11744.11745.11746.11747.11748.11749.11750.11751.11752.11753.11754.11755.11756.11757.11758.11759.11760.11761.11762.11763.11764.11765.11766.11767.11768.11769.11770.11771.11772.11773.11774.11775.11776.11777.11778.11779.11780.11781.11782.11783.11784.11785.11786.11787.11788.11789.11790.11791.11792.11793.11794.11795.11796.11797.11798.11799.11800.11801.11802.11803.11804.11805.11806.11807.11808.11809.11810.11811.11812.11813.11814.11815.11816.11817.11818.11819.11820.11821.11822.11823.11824.11825.11826.11827.11828.11829.11830.11831.11832.11833.11834.11835.11836.11837.11838.11839.11840.11841.11842.11843.11844.11845.11846.11847.11848.11849.11850.11851.11852.11853.11854.11855.11856.11857.11858.11859.11860.11861.11862.11863.11864.11865.11866.11867.11868.11869.11870.11871.11872.11873.11874.11875.11876.11877.11878.11879.11880.11881.11882.11883.11884.11885.11886.11887.11888.11889.11890.11891.11892.11893.11894.11895.11896.11897.11898.11899.11900.11901.11902.11903.11904.11905.11906.11907.11908.11909.11910.11911.11912.11913.11914.11915.11916.11917.11918.11919.11920.11921.11922.11923.11924.11925.11926.11927.11928.11929.11930.11931.11932.11933.11934.11935.11936.11937.11938.11939.11940.11941.11942.11943.11944.11945.11946.11947.11948.11949.11950.11951.11952.11953.11954.11955.11956.11957.11958.11959.11960.11961.11962.11963.11964.11965.11966.11967.11968.11969.11970.11971.11972.11973.11974.11975.11976.11977.11978.11979.11980.11981.11982.11983.11984.11985.11986.11987.11988.11989.11990.11991.11992.11993.11994.11995.11996.11997.11998.11999.12000.12001.12002.12003.12004.12005.12006.12007.12008.12009.12010.12011.12012.12013.12014.12015.12016.12017.12018.12019.12020.12021.12022.12023.12024.12025.12026.12027.12028.12029.12030.12031.12032.12033.12034.12035.12036.12037.12038.12039.12040.12041.12042.12043.12044.12045.12046.12047.12048.12049.12050.12051.12052.12053.12054.12055.12056.12057.12058.12059.12060.12061.12062.12063.12064.12065.12066.12067.12068.12069.12070.12071.12072.12073.12074.12075.12076.12077.12078.12079.12080.12081.12082.12083.12084.12085.12086.12087.12088.12089.12090.12091.12092.12093.12094.12095.12096.12097.12098.12099.12100.12101.12102.12103.12104.12105.12106.12107.12108.12109.12110.12111.12112.12113.12114.12115.12116.12117.12118.12119.12120.12121.12122.12123.12124.12125.12126.12127.12128.12129.12130.12131.12132.12133.12134.12135.12136.12137.12138.12139.12140.12141.12142.12143.12144.12145.12146.12147.12148.12149.12150.12151.12152.12153.12154.12155.12156.12157.12158.12159.12160.12161.12162.12163.12164.12165.12166.12167.12168.12169.12170.12171.12172.12173.12174.12175.12176.12177.12178.12179.12180.12181.12182.12183.12184.12185.12186.12187.12188.12189.12190.12191.12192.12193.12194.12195.12196.12197.12198.12199.12200.12201.12202.12203.12204.12205.12206.12207.12208.12209.12210.12211.12212.12213.12214.12215.12216.12217.12218.12219.12220.12221.12222.12223.12224.12225.12226.12227.12228.12229.12230.12231.12232.12233.12234.12235.12236.12237.12238.12239.12240.12241.12242.12243.12244.12245.12246.12247.12248.12249.12250.12251.12252.12253.12254.12255.12256.12257.12258.12259.12260.12261.12262.12263.12264.12265.12266.12267.12268.12269.12270.12271.12272.12273.12274.12275.12276.12277.12278.12279.12280.12281.12282.12283.12284.12285.12286.12287.12288.12289.12290.12291.12292.12293.12294.12295.12296.12297.12298.12299.12300.12301.12302.12303.12304.12305.12306.12307.12308.12309.12310.12311.12312.12313.12314.12315.12316.12317.12318.12319.12320.12321.12322.12323.12324.12325.12326.12327.12328.12329.12330.12331.12332.12333.12334.12335.12336.12337.12338.12339.12340.12341.12342.12343.12344.12345.12346.12347.12348.12349.12350.12351.12352.12353.12354.12355.12356.12357.12358.12359.12360.12361.12362.12363.12364.12365.12366.12367.12368.12369.12370.12371.12372.12373.12374.12375.12376.12377.12378.12379.12380.12381.12382.12383.12384.12385.12386.12387.12388.12389.12390.12391.12392.12393.12394.12395.12396.12397.12398.12399.12400.12401.12402.12403.12404.12405.12406.12407.12408.12409.12410.12411.12412.12413.12414.12415.12416.12417.12418.12419.12420.12421.12422.12423.12424.12425.12426.12427.12428.12429.12430.12431.12432.12433.12434.12435.12436.12437.12438.12439.12440.12441.12442.12443.12444.12445.12446.12447.12448.12449.12450.12451.12452.12453.12454.12455.12456.12457.12458.12459.12460.12461.12462.12463.12464.12465.12466.12467.12468.12469.12470.12471.12472.12473.12474.12475.12476.12477.12478.12479.12480.12481.12482.12483.12484.12485.12486.12487.12488.12489.12490.12491.12492.12493.12494.12495.12496.12497.12498.12499.12500.12501.12502.12503.12504.12505.12506.12507.12508.12509.12510.12511.12512.12513.12514.12515.12516.12517.12518.12519.12520.12521.12522.12523.12524.12525.12526.12527.12528.12529.12530.12531.12532.12533.12534.12535.12536.12537.12538.12539.12540.12541.12542.12543.12544.12545.12546.12547.12548.12549.12550.12551.12552.12553.12554.12555.12556.12557.12558.12559.12560.12561.12562.12563.12564.12565.12566.12567.12568.12569.12570.12571.12572.12573.12574.12575.12576.12577.12578.12579.12580.12581.12582.12583.12584.12585.12586.12587.12588.12589.12590.12591.12592.12593.12594.12595.12596.12597.12598.12599.12600.12601.12602.12603.12604.12605.12606.12607.12608.12609.12610.12611.12612.12613.12614.12615.12616.12617.12618.12619.12620.12621.12622.12623.12624.12625.12626.12627.12628.12629.12630.12631.12632.12633.12634.12635.12636.12637.12638.12639.12640.12641.12642.12643.12644.12645.12646.12647.12648.12649.12650.12651.12652.12653.12654.12655.12656.12657.12658.12659.12660.12661.12662.12663.12664.12665.12666.12667.12668.12669.12670.12671.12672.12673.12674.12675.12676.12677.12678.12679.12680.12681.12682.12683.12684.\r\n";
 800065e:	f507 635f 	add.w	r3, r7, #3568	@ 0xdf0
 8000662:	f6a3 53ec 	subw	r3, r3, #3564	@ 0xdec
 8000666:	4a59      	ldr	r2, [pc, #356]	@ (80007cc <main+0x178>)
 8000668:	4618      	mov	r0, r3
 800066a:	4611      	mov	r1, r2
 800066c:	f64f 53eb 	movw	r3, #65003	@ 0xfdeb
 8000670:	461a      	mov	r2, r3
 8000672:	f00f fae3 	bl	800fc3c <memcpy>
  /* USER CODE END 1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f001 fafb 	bl	8001c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f8ad 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 fb63 	bl	8000d48 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000682:	f000 faff 	bl	8000c84 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 8000686:	f000 fa65 	bl	8000b54 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800068a:	f000 f935 	bl	80008f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 800068e:	f000 fa0b 	bl	8000aa8 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000692:	f000 faab 	bl	8000bec <MX_USART6_UART_Init>
  MX_RTC_Init();
 8000696:	f000 f985 	bl	80009a4 <MX_RTC_Init>
  MX_RNG_Init();
 800069a:	f000 f96d 	bl	8000978 <MX_RNG_Init>
  MX_HASH_Init();
 800069e:	f000 f911 	bl	80008c4 <MX_HASH_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80006a2:	bf00      	nop
 80006a4:	4b4a      	ldr	r3, [pc, #296]	@ (80007d0 <main+0x17c>)
 80006a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0fa      	beq.n	80006a4 <main+0x50>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80006ae:	2000      	movs	r0, #0
 80006b0:	f001 f8e0 	bl	8001874 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f001 f8dd 	bl	8001874 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80006ba:	2002      	movs	r0, #2
 80006bc:	f001 f8da 	bl	8001874 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006c0:	2101      	movs	r1, #1
 80006c2:	2000      	movs	r0, #0
 80006c4:	f001 f976 	bl	80019b4 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80006c8:	4b42      	ldr	r3, [pc, #264]	@ (80007d4 <main+0x180>)
 80006ca:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006ce:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80006d0:	4b40      	ldr	r3, [pc, #256]	@ (80007d4 <main+0x180>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80006d6:	4b3f      	ldr	r3, [pc, #252]	@ (80007d4 <main+0x180>)
 80006d8:	2200      	movs	r2, #0
 80006da:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80006dc:	4b3d      	ldr	r3, [pc, #244]	@ (80007d4 <main+0x180>)
 80006de:	2200      	movs	r2, #0
 80006e0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80006e2:	4b3c      	ldr	r3, [pc, #240]	@ (80007d4 <main+0x180>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80006e8:	493a      	ldr	r1, [pc, #232]	@ (80007d4 <main+0x180>)
 80006ea:	2000      	movs	r0, #0
 80006ec:	f001 f9fc 	bl	8001ae8 <BSP_COM_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <main+0xa6>
  {
    Error_Handler();
 80006f6:	f000 fc23 	bl	8000f40 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f001 f930 	bl	8001960 <BSP_LED_Toggle>
 8000700:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000704:	f001 fb72 	bl	8001dec <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000708:	2002      	movs	r0, #2
 800070a:	f001 f929 	bl	8001960 <BSP_LED_Toggle>
 800070e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000712:	f001 fb6b 	bl	8001dec <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000716:	2001      	movs	r0, #1
 8000718:	f001 f922 	bl	8001960 <BSP_LED_Toggle>
 800071c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000720:	f001 fb64 	bl	8001dec <HAL_Delay>

	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000724:	2000      	movs	r0, #0
 8000726:	f001 f91b 	bl	8001960 <BSP_LED_Toggle>
 800072a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800072e:	f001 fb5d 	bl	8001dec <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000732:	2002      	movs	r0, #2
 8000734:	f001 f914 	bl	8001960 <BSP_LED_Toggle>
 8000738:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800073c:	f001 fb56 	bl	8001dec <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000740:	2001      	movs	r0, #1
 8000742:	f001 f90d 	bl	8001960 <BSP_LED_Toggle>
 8000746:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800074a:	f001 fb4f 	bl	8001dec <HAL_Delay>

	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 800074e:	2000      	movs	r0, #0
 8000750:	f001 f906 	bl	8001960 <BSP_LED_Toggle>
 8000754:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000758:	f001 fb48 	bl	8001dec <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 800075c:	2002      	movs	r0, #2
 800075e:	f001 f8ff 	bl	8001960 <BSP_LED_Toggle>
 8000762:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000766:	f001 fb41 	bl	8001dec <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 800076a:	2001      	movs	r0, #1
 800076c:	f001 f8f8 	bl	8001960 <BSP_LED_Toggle>
 8000770:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000774:	f001 fb3a 	bl	8001dec <HAL_Delay>

	BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000778:	2000      	movs	r0, #0
 800077a:	f001 f8f1 	bl	8001960 <BSP_LED_Toggle>
 800077e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000782:	f001 fb33 	bl	8001dec <HAL_Delay>
	BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000786:	2002      	movs	r0, #2
 8000788:	f001 f8ea 	bl	8001960 <BSP_LED_Toggle>
 800078c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000790:	f001 fb2c 	bl	8001dec <HAL_Delay>
	BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000794:	2001      	movs	r0, #1
 8000796:	f001 f8e3 	bl	8001960 <BSP_LED_Toggle>
 800079a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800079e:	f001 fb25 	bl	8001dec <HAL_Delay>

  while (1)
  {
	send_large_buffer((uint8_t*)msg, strlen(msg));
 80007a2:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80007a6:	3bec      	subs	r3, #236	@ 0xec
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff fd6f 	bl	800028c <strlen>
 80007ae:	4602      	mov	r2, r0
 80007b0:	f107 03f0 	add.w	r3, r7, #240	@ 0xf0
 80007b4:	3bec      	subs	r3, #236	@ 0xec
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fefb 	bl	80005b4 <send_large_buffer>
	HAL_Delay(10000);
 80007be:	f242 7010 	movw	r0, #10000	@ 0x2710
 80007c2:	f001 fb13 	bl	8001dec <HAL_Delay>
	send_large_buffer((uint8_t*)msg, strlen(msg));
 80007c6:	bf00      	nop
 80007c8:	e7eb      	b.n	80007a2 <main+0x14e>
 80007ca:	bf00      	nop
 80007cc:	0800fc70 	.word	0x0800fc70
 80007d0:	200006c4 	.word	0x200006c4
 80007d4:	20000140 	.word	0x20000140

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	@ 0x70
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2250      	movs	r2, #80	@ 0x50
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f00f f9fb 	bl	800fbe2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]
 80007fc:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007fe:	4b2f      	ldr	r3, [pc, #188]	@ (80008bc <SystemClock_Config+0xe4>)
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	4a2e      	ldr	r2, [pc, #184]	@ (80008bc <SystemClock_Config+0xe4>)
 8000804:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8000808:	6113      	str	r3, [r2, #16]
 800080a:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <SystemClock_Config+0xe4>)
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000816:	bf00      	nop
 8000818:	4b28      	ldr	r3, [pc, #160]	@ (80008bc <SystemClock_Config+0xe4>)
 800081a:	695b      	ldr	r3, [r3, #20]
 800081c:	f003 0308 	and.w	r3, r3, #8
 8000820:	2b08      	cmp	r3, #8
 8000822:	d1f9      	bne.n	8000818 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000824:	2329      	movs	r3, #41	@ 0x29
 8000826:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000828:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800082e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000832:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000838:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800083e:	2303      	movs	r3, #3
 8000840:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000842:	2304      	movs	r3, #4
 8000844:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 8000846:	23fa      	movs	r3, #250	@ 0xfa
 8000848:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800084a:	2302      	movs	r3, #2
 800084c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000852:	2302      	movs	r3, #2
 8000854:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000856:	2304      	movs	r3, #4
 8000858:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 800085a:	2300      	movs	r3, #0
 800085c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000862:	f107 0320 	add.w	r3, r7, #32
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fcee 	bl	8004248 <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000872:	f000 fb65 	bl	8000f40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	231f      	movs	r3, #31
 8000878:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087a:	2303      	movs	r3, #3
 800087c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	2105      	movs	r1, #5
 8000894:	4618      	mov	r0, r3
 8000896:	f004 f90f 	bl	8004ab8 <HAL_RCC_ClockConfig>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80008a0:	f000 fb4e 	bl	8000f40 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <SystemClock_Config+0xe8>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <SystemClock_Config+0xe8>)
 80008ae:	f043 0320 	orr.w	r3, r3, #32
 80008b2:	6013      	str	r3, [r2, #0]
}
 80008b4:	bf00      	nop
 80008b6:	3770      	adds	r7, #112	@ 0x70
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	44020800 	.word	0x44020800
 80008c0:	40022000 	.word	0x40022000

080008c4 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_HASH_Init+0x2c>)
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <MX_HASH_Init+0x30>)
 80008cc:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_HASH_Init+0x2c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_HASH_Init+0x2c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_HASH_Init+0x2c>)
 80008dc:	f001 fe46 	bl	800256c <HAL_HASH_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_HASH_Init+0x26>
  {
    Error_Handler();
 80008e6:	f000 fb2b 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000150 	.word	0x20000150
 80008f4:	420c0400 	.word	0x420c0400

080008f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	@ (800096c <MX_I2C1_Init+0x74>)
 80008fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000970 <MX_I2C1_Init+0x78>)
 8000900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8000902:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_I2C1_Init+0x74>)
 8000904:	4a1b      	ldr	r2, [pc, #108]	@ (8000974 <MX_I2C1_Init+0x7c>)
 8000906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000908:	4b18      	ldr	r3, [pc, #96]	@ (800096c <MX_I2C1_Init+0x74>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800090e:	4b17      	ldr	r3, [pc, #92]	@ (800096c <MX_I2C1_Init+0x74>)
 8000910:	2201      	movs	r2, #1
 8000912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000914:	4b15      	ldr	r3, [pc, #84]	@ (800096c <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800091a:	4b14      	ldr	r3, [pc, #80]	@ (800096c <MX_I2C1_Init+0x74>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000920:	4b12      	ldr	r3, [pc, #72]	@ (800096c <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000926:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_I2C1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092c:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000932:	480e      	ldr	r0, [pc, #56]	@ (800096c <MX_I2C1_Init+0x74>)
 8000934:	f001 fe52 	bl	80025dc <HAL_I2C_Init>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800093e:	f000 faff 	bl	8000f40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000942:	2100      	movs	r1, #0
 8000944:	4809      	ldr	r0, [pc, #36]	@ (800096c <MX_I2C1_Init+0x74>)
 8000946:	f001 fee4 	bl	8002712 <HAL_I2CEx_ConfigAnalogFilter>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000950:	f000 faf6 	bl	8000f40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000954:	2100      	movs	r1, #0
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_I2C1_Init+0x74>)
 8000958:	f001 ff26 	bl	80027a8 <HAL_I2CEx_ConfigDigitalFilter>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000962:	f000 faed 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20000190 	.word	0x20000190
 8000970:	40005400 	.word	0x40005400
 8000974:	10c043e5 	.word	0x10c043e5

08000978 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800097c:	4b07      	ldr	r3, [pc, #28]	@ (800099c <MX_RNG_Init+0x24>)
 800097e:	4a08      	ldr	r2, [pc, #32]	@ (80009a0 <MX_RNG_Init+0x28>)
 8000980:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <MX_RNG_Init+0x24>)
 8000984:	2200      	movs	r2, #0
 8000986:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	@ (800099c <MX_RNG_Init+0x24>)
 800098a:	f009 fc2f 	bl	800a1ec <HAL_RNG_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000994:	f000 fad4 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	200001e4 	.word	0x200001e4
 80009a0:	420c0800 	.word	0x420c0800

080009a4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	@ 0x38
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]
 80009ba:	615a      	str	r2, [r3, #20]
 80009bc:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009d2:	4b33      	ldr	r3, [pc, #204]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 80009d4:	4a33      	ldr	r2, [pc, #204]	@ (8000aa4 <MX_RTC_Init+0x100>)
 80009d6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009d8:	4b31      	ldr	r3, [pc, #196]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009de:	4b30      	ldr	r3, [pc, #192]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 80009e0:	227f      	movs	r2, #127	@ 0x7f
 80009e2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80009e4:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 80009e6:	22ff      	movs	r2, #255	@ 0xff
 80009e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80009ea:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80009f0:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80009f6:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80009fc:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 80009fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a02:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a04:	4b26      	ldr	r3, [pc, #152]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000a0a:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a10:	4823      	ldr	r0, [pc, #140]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 8000a12:	f009 fc89 	bl	800a328 <HAL_RTC_Init>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a1c:	f000 fa90 	bl	8000f40 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	481a      	ldr	r0, [pc, #104]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 8000a38:	f009 fedc 	bl	800a7f4 <HAL_RTCEx_PrivilegeModeSet>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a42:	f000 fa7d 	bl	8000f40 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a5a:	f107 0308 	add.w	r3, r7, #8
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4619      	mov	r1, r3
 8000a62:	480f      	ldr	r0, [pc, #60]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 8000a64:	f009 fce2 	bl	800a42c <HAL_RTC_SetTime>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000a6e:	f000 fa67 	bl	8000f40 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a72:	2301      	movs	r3, #1
 8000a74:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a76:	2301      	movs	r3, #1
 8000a78:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2201      	movs	r2, #1
 8000a86:	4619      	mov	r1, r3
 8000a88:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <MX_RTC_Init+0xfc>)
 8000a8a:	f009 fd61 	bl	800a550 <HAL_RTC_SetDate>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000a94:	f000 fa54 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a98:	bf00      	nop
 8000a9a:	3738      	adds	r7, #56	@ 0x38
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	200001f8 	.word	0x200001f8
 8000aa4:	44007800 	.word	0x44007800

08000aa8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aac:	4b27      	ldr	r3, [pc, #156]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000aae:	4a28      	ldr	r2, [pc, #160]	@ (8000b50 <MX_SPI1_Init+0xa8>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ab2:	4b26      	ldr	r3, [pc, #152]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000ab4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ab8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000aba:	4b24      	ldr	r3, [pc, #144]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000ac2:	2207      	movs	r2, #7
 8000ac4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000ad4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000ad8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000adc:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8000ae0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aee:	4b17      	ldr	r3, [pc, #92]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000af4:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000af6:	2207      	movs	r2, #7
 8000af8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000afa:	4b14      	ldr	r3, [pc, #80]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000afc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b00:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b02:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b08:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b26:	4b09      	ldr	r3, [pc, #36]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b32:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	@ (8000b4c <MX_SPI1_Init+0xa4>)
 8000b3a:	f009 fe89 	bl	800a850 <HAL_SPI_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000b44:	f000 f9fc 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000228 	.word	0x20000228
 8000b50:	40013000 	.word	0x40013000

08000b54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b58:	4b22      	ldr	r3, [pc, #136]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b5a:	4a23      	ldr	r2, [pc, #140]	@ (8000be8 <MX_USART2_UART_Init+0x94>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b1f      	ldr	r3, [pc, #124]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b1c      	ldr	r3, [pc, #112]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b1a      	ldr	r3, [pc, #104]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b19      	ldr	r3, [pc, #100]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b16      	ldr	r3, [pc, #88]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b90:	4b14      	ldr	r3, [pc, #80]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b96:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9c:	4811      	ldr	r0, [pc, #68]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000b9e:	f009 ffe2 	bl	800ab66 <HAL_UART_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ba8:	f000 f9ca 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bac:	2100      	movs	r1, #0
 8000bae:	480d      	ldr	r0, [pc, #52]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000bb0:	f00a fc70 	bl	800b494 <HAL_UARTEx_SetTxFifoThreshold>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bba:	f000 f9c1 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4808      	ldr	r0, [pc, #32]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000bc2:	f00a fca5 	bl	800b510 <HAL_UARTEx_SetRxFifoThreshold>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000bcc:	f000 f9b8 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000bd0:	4804      	ldr	r0, [pc, #16]	@ (8000be4 <MX_USART2_UART_Init+0x90>)
 8000bd2:	f00a fc26 	bl	800b422 <HAL_UARTEx_DisableFifoMode>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bdc:	f000 f9b0 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be0:	bf00      	nop
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200002b8 	.word	0x200002b8
 8000be8:	40004400 	.word	0x40004400

08000bec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bf0:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000bf2:	4a23      	ldr	r2, [pc, #140]	@ (8000c80 <MX_USART6_UART_Init+0x94>)
 8000bf4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000bf8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bfc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c10:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000c12:	220c      	movs	r2, #12
 8000c14:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c16:	4b19      	ldr	r3, [pc, #100]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1c:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c22:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c28:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c34:	4811      	ldr	r0, [pc, #68]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000c36:	f009 ff96 	bl	800ab66 <HAL_UART_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8000c40:	f000 f97e 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c44:	2100      	movs	r1, #0
 8000c46:	480d      	ldr	r0, [pc, #52]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000c48:	f00a fc24 	bl	800b494 <HAL_UARTEx_SetTxFifoThreshold>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8000c52:	f000 f975 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c56:	2100      	movs	r1, #0
 8000c58:	4808      	ldr	r0, [pc, #32]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000c5a:	f00a fc59 	bl	800b510 <HAL_UARTEx_SetRxFifoThreshold>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8000c64:	f000 f96c 	bl	8000f40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	@ (8000c7c <MX_USART6_UART_Init+0x90>)
 8000c6a:	f00a fbda 	bl	800b422 <HAL_UARTEx_DisableFifoMode>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8000c74:	f000 f964 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000034c 	.word	0x2000034c
 8000c80:	40006400 	.word	0x40006400

08000c84 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8000c88:	4b29      	ldr	r3, [pc, #164]	@ (8000d30 <MX_USB_PCD_Init+0xac>)
 8000c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8000d34 <MX_USB_PCD_Init+0xb0>)
 8000c8c:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000c90:	4b27      	ldr	r3, [pc, #156]	@ (8000d30 <MX_USB_PCD_Init+0xac>)
 8000c92:	4a29      	ldr	r2, [pc, #164]	@ (8000d38 <MX_USB_PCD_Init+0xb4>)
 8000c94:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000c96:	4b26      	ldr	r3, [pc, #152]	@ (8000d30 <MX_USB_PCD_Init+0xac>)
 8000c98:	2208      	movs	r2, #8
 8000c9a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8000c9c:	4b24      	ldr	r3, [pc, #144]	@ (8000d30 <MX_USB_PCD_Init+0xac>)
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ca2:	4b23      	ldr	r3, [pc, #140]	@ (8000d30 <MX_USB_PCD_Init+0xac>)
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000ca8:	4b21      	ldr	r3, [pc, #132]	@ (8000d30 <MX_USB_PCD_Init+0xac>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000cae:	4b20      	ldr	r3, [pc, #128]	@ (8000d30 <MX_USB_PCD_Init+0xac>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d30 <MX_USB_PCD_Init+0xac>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000cba:	4b1d      	ldr	r3, [pc, #116]	@ (8000d30 <MX_USB_PCD_Init+0xac>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <MX_USB_PCD_Init+0xac>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <MX_USB_PCD_Init+0xac>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000ccc:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <MX_USB_PCD_Init+0xac>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000cd2:	4817      	ldr	r0, [pc, #92]	@ (8000d30 <MX_USB_PCD_Init+0xac>)
 8000cd4:	f001 fe17 	bl	8002906 <HAL_PCD_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8000cde:	f000 f92f 	bl	8000f40 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	4915      	ldr	r1, [pc, #84]	@ (8000d3c <MX_USB_PCD_Init+0xb8>)
 8000ce6:	4813      	ldr	r0, [pc, #76]	@ (8000d34 <MX_USB_PCD_Init+0xb0>)
 8000ce8:	f00d fc3e 	bl	800e568 <USBD_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8000cf2:	f000 f925 	bl	8000f40 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000cf6:	4912      	ldr	r1, [pc, #72]	@ (8000d40 <MX_USB_PCD_Init+0xbc>)
 8000cf8:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <MX_USB_PCD_Init+0xb0>)
 8000cfa:	f00d fc65 	bl	800e5c8 <USBD_RegisterClass>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8000d04:	f000 f91c 	bl	8000f40 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8000d08:	490e      	ldr	r1, [pc, #56]	@ (8000d44 <MX_USB_PCD_Init+0xc0>)
 8000d0a:	480a      	ldr	r0, [pc, #40]	@ (8000d34 <MX_USB_PCD_Init+0xb0>)
 8000d0c:	f00d f860 	bl	800ddd0 <USBD_CDC_RegisterInterface>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8000d16:	f000 f913 	bl	8000f40 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000d1a:	4806      	ldr	r0, [pc, #24]	@ (8000d34 <MX_USB_PCD_Init+0xb0>)
 8000d1c:	f00d fc8a 	bl	800e634 <USBD_Start>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8000d26:	f000 f90b 	bl	8000f40 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200003e0 	.word	0x200003e0
 8000d34:	200006c4 	.word	0x200006c4
 8000d38:	40016000 	.word	0x40016000
 8000d3c:	200000d4 	.word	0x200000d4
 8000d40:	20000038 	.word	0x20000038
 8000d44:	200000b8 	.word	0x200000b8

08000d48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	@ 0x30
 8000d4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	605a      	str	r2, [r3, #4]
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	60da      	str	r2, [r3, #12]
 8000d5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d5e:	4b72      	ldr	r3, [pc, #456]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d64:	4a70      	ldr	r2, [pc, #448]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d6e:	4b6e      	ldr	r3, [pc, #440]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d74:	f003 0310 	and.w	r3, r3, #16
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7c:	4b6a      	ldr	r3, [pc, #424]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d82:	4a69      	ldr	r2, [pc, #420]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000d84:	f043 0304 	orr.w	r3, r3, #4
 8000d88:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d8c:	4b66      	ldr	r3, [pc, #408]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d92:	f003 0304 	and.w	r3, r3, #4
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	4b63      	ldr	r3, [pc, #396]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000da0:	4a61      	ldr	r2, [pc, #388]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000daa:	4b5f      	ldr	r3, [pc, #380]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db8:	4b5b      	ldr	r3, [pc, #364]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dbe:	4a5a      	ldr	r2, [pc, #360]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000dc8:	4b57      	ldr	r3, [pc, #348]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000dca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	4b54      	ldr	r3, [pc, #336]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ddc:	4a52      	ldr	r2, [pc, #328]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000de6:	4b50      	ldr	r3, [pc, #320]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dec:	f003 0302 	and.w	r3, r3, #2
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df4:	4b4c      	ldr	r3, [pc, #304]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000dfa:	4a4b      	ldr	r2, [pc, #300]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e00:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e04:	4b48      	ldr	r3, [pc, #288]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e12:	4b45      	ldr	r3, [pc, #276]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e18:	4a43      	ldr	r2, [pc, #268]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000e1a:	f043 0308 	orr.w	r3, r3, #8
 8000e1e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e22:	4b41      	ldr	r3, [pc, #260]	@ (8000f28 <MX_GPIO_Init+0x1e0>)
 8000e24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e30:	2332      	movs	r3, #50	@ 0x32
 8000e32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e40:	230b      	movs	r3, #11
 8000e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4838      	ldr	r0, [pc, #224]	@ (8000f2c <MX_GPIO_Init+0x1e4>)
 8000e4c:	f001 fa0a 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e50:	2384      	movs	r3, #132	@ 0x84
 8000e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	230b      	movs	r3, #11
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 031c 	add.w	r3, r7, #28
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4831      	ldr	r0, [pc, #196]	@ (8000f30 <MX_GPIO_Init+0x1e8>)
 8000e6c:	f001 f9fa 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000e70:	2310      	movs	r3, #16
 8000e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e74:	2303      	movs	r3, #3
 8000e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	482b      	ldr	r0, [pc, #172]	@ (8000f30 <MX_GPIO_Init+0x1e8>)
 8000e84:	f001 f9ee 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000e88:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4825      	ldr	r0, [pc, #148]	@ (8000f34 <MX_GPIO_Init+0x1ec>)
 8000e9e:	f001 f9e1 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb4:	230b      	movs	r3, #11
 8000eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	481d      	ldr	r0, [pc, #116]	@ (8000f34 <MX_GPIO_Init+0x1ec>)
 8000ec0:	f001 f9d0 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000ec4:	2380      	movs	r3, #128	@ 0x80
 8000ec6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <MX_GPIO_Init+0x1f0>)
 8000eca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 031c 	add.w	r3, r7, #28
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4819      	ldr	r0, [pc, #100]	@ (8000f3c <MX_GPIO_Init+0x1f4>)
 8000ed8:	f001 f9c4 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000edc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ee0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eea:	2302      	movs	r3, #2
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eee:	230b      	movs	r3, #11
 8000ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4810      	ldr	r0, [pc, #64]	@ (8000f3c <MX_GPIO_Init+0x1f4>)
 8000efa:	f001 f9b3 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000efe:	23c0      	movs	r3, #192	@ 0xc0
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f0e:	2308      	movs	r3, #8
 8000f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f12:	f107 031c 	add.w	r3, r7, #28
 8000f16:	4619      	mov	r1, r3
 8000f18:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <MX_GPIO_Init+0x1ec>)
 8000f1a:	f001 f9a3 	bl	8002264 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f1e:	bf00      	nop
 8000f20:	3730      	adds	r7, #48	@ 0x30
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	44020c00 	.word	0x44020c00
 8000f2c:	42020800 	.word	0x42020800
 8000f30:	42020000 	.word	0x42020000
 8000f34:	42020400 	.word	0x42020400
 8000f38:	10110000 	.word	0x10110000
 8000f3c:	42021800 	.word	0x42021800

08000f40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f44:	b672      	cpsid	i
}
 8000f46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <Error_Handler+0x8>

08000f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8000f64:	4b0a      	ldr	r3, [pc, #40]	@ (8000f90 <HAL_HASH_MspInit+0x34>)
 8000f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f6a:	4a09      	ldr	r2, [pc, #36]	@ (8000f90 <HAL_HASH_MspInit+0x34>)
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f70:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_HASH_MspInit+0x34>)
 8000f76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8000f82:	bf00      	nop
 8000f84:	3714      	adds	r7, #20
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	44020c00 	.word	0x44020c00

08000f94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0cc      	sub	sp, #304	@ 0x130
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000f9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fa2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fb8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	f00e fe0c 	bl	800fbe2 <memset>
  if(hi2c->Instance==I2C1)
 8000fca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a33      	ldr	r2, [pc, #204]	@ (80010a4 <HAL_I2C_MspInit+0x110>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d15e      	bne.n	800109a <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000fe0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000fe4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ff0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ff4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4618      	mov	r0, r3
 8001004:	f004 f89a 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 800100e:	f7ff ff97 	bl	8000f40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b25      	ldr	r3, [pc, #148]	@ (80010a8 <HAL_I2C_MspInit+0x114>)
 8001014:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001018:	4a23      	ldr	r2, [pc, #140]	@ (80010a8 <HAL_I2C_MspInit+0x114>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001022:	4b21      	ldr	r3, [pc, #132]	@ (80010a8 <HAL_I2C_MspInit+0x114>)
 8001024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001028:	f003 0202 	and.w	r2, r3, #2
 800102c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001030:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800103a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800103e:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001040:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001044:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001048:	2312      	movs	r3, #18
 800104a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001054:	2300      	movs	r3, #0
 8001056:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800105a:	2304      	movs	r3, #4
 800105c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001060:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001064:	4619      	mov	r1, r3
 8001066:	4811      	ldr	r0, [pc, #68]	@ (80010ac <HAL_I2C_MspInit+0x118>)
 8001068:	f001 f8fc 	bl	8002264 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <HAL_I2C_MspInit+0x114>)
 800106e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001072:	4a0d      	ldr	r2, [pc, #52]	@ (80010a8 <HAL_I2C_MspInit+0x114>)
 8001074:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001078:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800107c:	4b0a      	ldr	r3, [pc, #40]	@ (80010a8 <HAL_I2C_MspInit+0x114>)
 800107e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001082:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001086:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800108a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001094:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001098:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800109a:	bf00      	nop
 800109c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40005400 	.word	0x40005400
 80010a8:	44020c00 	.word	0x44020c00
 80010ac:	42020400 	.word	0x42020400

080010b0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0c6      	sub	sp, #280	@ 0x118
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010be:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80010c8:	4618      	mov	r0, r3
 80010ca:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80010ce:	461a      	mov	r2, r3
 80010d0:	2100      	movs	r1, #0
 80010d2:	f00e fd86 	bl	800fbe2 <memset>
  if(hrng->Instance==RNG)
 80010d6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001158 <HAL_RNG_MspInit+0xa8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d131      	bne.n	800114c <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80010e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80010ec:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80010f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80010fc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001100:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001104:	2200      	movs	r2, #0
 8001106:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110a:	f107 0310 	add.w	r3, r7, #16
 800110e:	4618      	mov	r0, r3
 8001110:	f004 f814 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 800111a:	f7ff ff11 	bl	8000f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800111e:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <HAL_RNG_MspInit+0xac>)
 8001120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001124:	4a0d      	ldr	r2, [pc, #52]	@ (800115c <HAL_RNG_MspInit+0xac>)
 8001126:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800112a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800112e:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <HAL_RNG_MspInit+0xac>)
 8001130:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001134:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001138:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800113c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001146:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800114a:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800114c:	bf00      	nop
 800114e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	420c0800 	.word	0x420c0800
 800115c:	44020c00 	.word	0x44020c00

08001160 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0c6      	sub	sp, #280	@ 0x118
 8001164:	af00      	add	r7, sp, #0
 8001166:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800116a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800116e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001170:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001174:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001178:	4618      	mov	r0, r3
 800117a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800117e:	461a      	mov	r2, r3
 8001180:	2100      	movs	r1, #0
 8001182:	f00e fd2e 	bl	800fbe2 <memset>
  if(hrtc->Instance==RTC)
 8001186:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800118a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a21      	ldr	r2, [pc, #132]	@ (8001218 <HAL_RTC_MspInit+0xb8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d13a      	bne.n	800120e <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001198:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800119c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80011a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011b8:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4618      	mov	r0, r3
 80011c2:	f003 ffbb 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 80011cc:	f7ff feb8 	bl	8000f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <HAL_RTC_MspInit+0xbc>)
 80011d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011d6:	4a11      	ldr	r2, [pc, #68]	@ (800121c <HAL_RTC_MspInit+0xbc>)
 80011d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80011e0:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <HAL_RTC_MspInit+0xbc>)
 80011e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80011e6:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <HAL_RTC_MspInit+0xbc>)
 80011e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011ec:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_RTC_MspInit+0xbc>)
 80011f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80011f6:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80011fa:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001208:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800120c:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800120e:	bf00      	nop
 8001210:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	44007800 	.word	0x44007800
 800121c:	44020c00 	.word	0x44020c00

08001220 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0ce      	sub	sp, #312	@ 0x138
 8001224:	af00      	add	r7, sp, #0
 8001226:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800122a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800122e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001240:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001244:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001248:	4618      	mov	r0, r3
 800124a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800124e:	461a      	mov	r2, r3
 8001250:	2100      	movs	r1, #0
 8001252:	f00e fcc6 	bl	800fbe2 <memset>
  if(hspi->Instance==SPI1)
 8001256:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800125a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a49      	ldr	r2, [pc, #292]	@ (8001388 <HAL_SPI_MspInit+0x168>)
 8001264:	4293      	cmp	r3, r2
 8001266:	f040 808a 	bne.w	800137e <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800126a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800126e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001272:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 800127e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001282:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001286:	2200      	movs	r2, #0
 8001288:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	4618      	mov	r0, r3
 8001292:	f003 ff53 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 800129c:	f7ff fe50 	bl	8000f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012a0:	4b3a      	ldr	r3, [pc, #232]	@ (800138c <HAL_SPI_MspInit+0x16c>)
 80012a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012a6:	4a39      	ldr	r2, [pc, #228]	@ (800138c <HAL_SPI_MspInit+0x16c>)
 80012a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012ac:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80012b0:	4b36      	ldr	r3, [pc, #216]	@ (800138c <HAL_SPI_MspInit+0x16c>)
 80012b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80012b6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80012ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012be:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80012cc:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	4b2f      	ldr	r3, [pc, #188]	@ (800138c <HAL_SPI_MspInit+0x16c>)
 80012d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012d4:	4a2d      	ldr	r2, [pc, #180]	@ (800138c <HAL_SPI_MspInit+0x16c>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80012de:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <HAL_SPI_MspInit+0x16c>)
 80012e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80012e4:	f003 0201 	and.w	r2, r3, #1
 80012e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012ec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80012f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012fa:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012fc:	4b23      	ldr	r3, [pc, #140]	@ (800138c <HAL_SPI_MspInit+0x16c>)
 80012fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001302:	4a22      	ldr	r2, [pc, #136]	@ (800138c <HAL_SPI_MspInit+0x16c>)
 8001304:	f043 0308 	orr.w	r3, r3, #8
 8001308:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800130c:	4b1f      	ldr	r3, [pc, #124]	@ (800138c <HAL_SPI_MspInit+0x16c>)
 800130e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001312:	f003 0208 	and.w	r2, r3, #8
 8001316:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800131a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001324:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001328:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800132a:	2360      	movs	r3, #96	@ 0x60
 800132c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001342:	2305      	movs	r3, #5
 8001344:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001348:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800134c:	4619      	mov	r1, r3
 800134e:	4810      	ldr	r0, [pc, #64]	@ (8001390 <HAL_SPI_MspInit+0x170>)
 8001350:	f000 ff88 	bl	8002264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136c:	2305      	movs	r3, #5
 800136e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001372:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001376:	4619      	mov	r1, r3
 8001378:	4806      	ldr	r0, [pc, #24]	@ (8001394 <HAL_SPI_MspInit+0x174>)
 800137a:	f000 ff73 	bl	8002264 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800137e:	bf00      	nop
 8001380:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40013000 	.word	0x40013000
 800138c:	44020c00 	.word	0x44020c00
 8001390:	42020000 	.word	0x42020000
 8001394:	42020c00 	.word	0x42020c00

08001398 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b0d0      	sub	sp, #320	@ 0x140
 800139c:	af00      	add	r7, sp, #0
 800139e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013a2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013a6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013bc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013c0:	4618      	mov	r0, r3
 80013c2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80013c6:	461a      	mov	r2, r3
 80013c8:	2100      	movs	r1, #0
 80013ca:	f00e fc0a 	bl	800fbe2 <memset>
  if(huart->Instance==USART2)
 80013ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013d2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a7c      	ldr	r2, [pc, #496]	@ (80015cc <HAL_UART_MspInit+0x234>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	f040 808a 	bne.w	80014f6 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013e6:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80013ea:	f04f 0202 	mov.w	r2, #2
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80013fa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013fe:	2200      	movs	r2, #0
 8001400:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001402:	f107 0320 	add.w	r3, r7, #32
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fe98 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8001412:	f7ff fd95 	bl	8000f40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001416:	4b6e      	ldr	r3, [pc, #440]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 8001418:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800141c:	4a6c      	ldr	r2, [pc, #432]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 800141e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001422:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001426:	4b6a      	ldr	r3, [pc, #424]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 8001428:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800142c:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8001430:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001434:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800143e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001442:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	4b62      	ldr	r3, [pc, #392]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 8001446:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800144a:	4a61      	ldr	r2, [pc, #388]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001454:	4b5e      	ldr	r3, [pc, #376]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 8001456:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800145a:	f003 0201 	and.w	r2, r3, #1
 800145e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001462:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800146c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001470:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001472:	4b57      	ldr	r3, [pc, #348]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 8001474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001478:	4a55      	ldr	r2, [pc, #340]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 800147a:	f043 0308 	orr.w	r3, r3, #8
 800147e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001482:	4b53      	ldr	r3, [pc, #332]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 8001484:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001488:	f003 0208 	and.w	r2, r3, #8
 800148c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001490:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800149a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800149e:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80014a0:	2308      	movs	r3, #8
 80014a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b2:	2300      	movs	r3, #0
 80014b4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014b8:	2307      	movs	r3, #7
 80014ba:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80014c2:	4619      	mov	r1, r3
 80014c4:	4843      	ldr	r0, [pc, #268]	@ (80015d4 <HAL_UART_MspInit+0x23c>)
 80014c6:	f000 fecd 	bl	8002264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014ca:	2320      	movs	r3, #32
 80014cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014e2:	2307      	movs	r3, #7
 80014e4:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e8:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80014ec:	4619      	mov	r1, r3
 80014ee:	483a      	ldr	r0, [pc, #232]	@ (80015d8 <HAL_UART_MspInit+0x240>)
 80014f0:	f000 feb8 	bl	8002264 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80014f4:	e065      	b.n	80015c2 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 80014f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80014fa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a36      	ldr	r2, [pc, #216]	@ (80015dc <HAL_UART_MspInit+0x244>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d15c      	bne.n	80015c2 <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8001508:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800150c:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001510:	f04f 0220 	mov.w	r2, #32
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 800151c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001520:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001524:	2200      	movs	r2, #0
 8001526:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001528:	f107 0320 	add.w	r3, r7, #32
 800152c:	4618      	mov	r0, r3
 800152e:	f003 fe05 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001538:	f7ff fd02 	bl	8000f40 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800153c:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 800153e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001542:	4a23      	ldr	r2, [pc, #140]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 8001544:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001548:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800154c:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 800154e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001552:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8001556:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800155a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001564:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001568:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156a:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 800156c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001570:	4a17      	ldr	r2, [pc, #92]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <HAL_UART_MspInit+0x238>)
 800157c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001580:	f003 0204 	and.w	r2, r3, #4
 8001584:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001588:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001592:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001596:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001598:	23c0      	movs	r3, #192	@ 0xc0
 800159a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80015b0:	2307      	movs	r3, #7
 80015b2:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b6:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80015ba:	4619      	mov	r1, r3
 80015bc:	4808      	ldr	r0, [pc, #32]	@ (80015e0 <HAL_UART_MspInit+0x248>)
 80015be:	f000 fe51 	bl	8002264 <HAL_GPIO_Init>
}
 80015c2:	bf00      	nop
 80015c4:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40004400 	.word	0x40004400
 80015d0:	44020c00 	.word	0x44020c00
 80015d4:	42020000 	.word	0x42020000
 80015d8:	42020c00 	.word	0x42020c00
 80015dc:	40006400 	.word	0x40006400
 80015e0:	42020800 	.word	0x42020800

080015e4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b0c6      	sub	sp, #280	@ 0x118
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015ee:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80015f2:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80015f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80015fc:	4618      	mov	r0, r3
 80015fe:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001602:	461a      	mov	r2, r3
 8001604:	2100      	movs	r1, #0
 8001606:	f00e faec 	bl	800fbe2 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800160a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800160e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a22      	ldr	r2, [pc, #136]	@ (80016a0 <HAL_PCD_MspInit+0xbc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d13b      	bne.n	8001694 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800161c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001620:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0310 	mov.w	r3, #16
 800162c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001630:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001634:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001638:	2230      	movs	r2, #48	@ 0x30
 800163a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	4618      	mov	r0, r3
 8001644:	f003 fd7a 	bl	800513c <HAL_RCCEx_PeriphCLKConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800164e:	f7ff fc77 	bl	8000f40 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 8001652:	f002 fde9 	bl	8004228 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001656:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <HAL_PCD_MspInit+0xc0>)
 8001658:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800165c:	4a11      	ldr	r2, [pc, #68]	@ (80016a4 <HAL_PCD_MspInit+0xc0>)
 800165e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001662:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001666:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_PCD_MspInit+0xc0>)
 8001668:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800166c:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001670:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001674:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800167e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001682:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	204a      	movs	r0, #74	@ 0x4a
 800168a:	f000 fc8b 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 800168e:	204a      	movs	r0, #74	@ 0x4a
 8001690:	f000 fca2 	bl	8001fd8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001694:	bf00      	nop
 8001696:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40016000 	.word	0x40016000
 80016a4:	44020c00 	.word	0x44020c00

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <NMI_Handler+0x4>

080016b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <HardFault_Handler+0x4>

080016b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <MemManage_Handler+0x4>

080016c0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <BusFault_Handler+0x4>

080016c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <UsageFault_Handler+0x4>

080016d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr

080016fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016fe:	f000 fb55 	bl	8001dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}

08001706 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800170a:	2000      	movs	r0, #0
 800170c:	f000 f9ca 	bl	8001aa4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8001718:	4802      	ldr	r0, [pc, #8]	@ (8001724 <USB_DRD_FS_IRQHandler+0x10>)
 800171a:	f001 fa17 	bl	8002b4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200003e0 	.word	0x200003e0

08001728 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800172e:	4b35      	ldr	r3, [pc, #212]	@ (8001804 <SystemInit+0xdc>)
 8001730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001734:	4a33      	ldr	r2, [pc, #204]	@ (8001804 <SystemInit+0xdc>)
 8001736:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800173a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800173e:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <SystemInit+0xe0>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001744:	4b30      	ldr	r3, [pc, #192]	@ (8001808 <SystemInit+0xe0>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800174a:	4b2f      	ldr	r3, [pc, #188]	@ (8001808 <SystemInit+0xe0>)
 800174c:	2200      	movs	r2, #0
 800174e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001750:	4b2d      	ldr	r3, [pc, #180]	@ (8001808 <SystemInit+0xe0>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	492c      	ldr	r1, [pc, #176]	@ (8001808 <SystemInit+0xe0>)
 8001756:	4b2d      	ldr	r3, [pc, #180]	@ (800180c <SystemInit+0xe4>)
 8001758:	4013      	ands	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800175c:	4b2a      	ldr	r3, [pc, #168]	@ (8001808 <SystemInit+0xe0>)
 800175e:	2200      	movs	r2, #0
 8001760:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001762:	4b29      	ldr	r3, [pc, #164]	@ (8001808 <SystemInit+0xe0>)
 8001764:	2200      	movs	r2, #0
 8001766:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001768:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <SystemInit+0xe0>)
 800176a:	2200      	movs	r2, #0
 800176c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800176e:	4b26      	ldr	r3, [pc, #152]	@ (8001808 <SystemInit+0xe0>)
 8001770:	4a27      	ldr	r2, [pc, #156]	@ (8001810 <SystemInit+0xe8>)
 8001772:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001774:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <SystemInit+0xe0>)
 8001776:	2200      	movs	r2, #0
 8001778:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800177a:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <SystemInit+0xe0>)
 800177c:	4a24      	ldr	r2, [pc, #144]	@ (8001810 <SystemInit+0xe8>)
 800177e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001780:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <SystemInit+0xe0>)
 8001782:	2200      	movs	r2, #0
 8001784:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001786:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <SystemInit+0xe0>)
 8001788:	4a21      	ldr	r2, [pc, #132]	@ (8001810 <SystemInit+0xe8>)
 800178a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800178c:	4b1e      	ldr	r3, [pc, #120]	@ (8001808 <SystemInit+0xe0>)
 800178e:	2200      	movs	r2, #0
 8001790:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001792:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <SystemInit+0xe0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a1c      	ldr	r2, [pc, #112]	@ (8001808 <SystemInit+0xe0>)
 8001798:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800179c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800179e:	4b1a      	ldr	r3, [pc, #104]	@ (8001808 <SystemInit+0xe0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017a4:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <SystemInit+0xdc>)
 80017a6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017aa:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80017ac:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <SystemInit+0xec>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80017b4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80017bc:	d003      	beq.n	80017c6 <SystemInit+0x9e>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80017c4:	d117      	bne.n	80017f6 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80017c6:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <SystemInit+0xec>)
 80017c8:	69db      	ldr	r3, [r3, #28]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d005      	beq.n	80017de <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <SystemInit+0xec>)
 80017d4:	4a10      	ldr	r2, [pc, #64]	@ (8001818 <SystemInit+0xf0>)
 80017d6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <SystemInit+0xec>)
 80017da:	4a10      	ldr	r2, [pc, #64]	@ (800181c <SystemInit+0xf4>)
 80017dc:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <SystemInit+0xec>)
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001814 <SystemInit+0xec>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80017ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <SystemInit+0xec>)
 80017ec:	69db      	ldr	r3, [r3, #28]
 80017ee:	4a09      	ldr	r2, [pc, #36]	@ (8001814 <SystemInit+0xec>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	61d3      	str	r3, [r2, #28]
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00
 8001808:	44020c00 	.word	0x44020c00
 800180c:	eae2eae3 	.word	0xeae2eae3
 8001810:	01010280 	.word	0x01010280
 8001814:	40022000 	.word	0x40022000
 8001818:	08192a3b 	.word	0x08192a3b
 800181c:	4c5d6e7f 	.word	0x4c5d6e7f

08001820 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001820:	480d      	ldr	r0, [pc, #52]	@ (8001858 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001822:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001824:	f7ff ff80 	bl	8001728 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001828:	480c      	ldr	r0, [pc, #48]	@ (800185c <LoopForever+0x6>)
  ldr r1, =_edata
 800182a:	490d      	ldr	r1, [pc, #52]	@ (8001860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800182c:	4a0d      	ldr	r2, [pc, #52]	@ (8001864 <LoopForever+0xe>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001840:	4c0a      	ldr	r4, [pc, #40]	@ (800186c <LoopForever+0x16>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800184e:	f00e f9d1 	bl	800fbf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001852:	f7fe feff 	bl	8000654 <main>

08001856 <LoopForever>:

LoopForever:
    b LoopForever
 8001856:	e7fe      	b.n	8001856 <LoopForever>
  ldr   r0, =_estack
 8001858:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800185c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001860:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 8001864:	0801fb00 	.word	0x0801fb00
  ldr r2, =_sbss
 8001868:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 800186c:	20001168 	.word	0x20001168

08001870 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001870:	e7fe      	b.n	8001870 <ADC1_IRQHandler>
	...

08001874 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08c      	sub	sp, #48	@ 0x30
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800187e:	2300      	movs	r3, #0
 8001880:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d009      	beq.n	800189c <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <BSP_LED_Init+0x28>
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d003      	beq.n	800189c <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001894:	f06f 0301 	mvn.w	r3, #1
 8001898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800189a:	e055      	b.n	8001948 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d10f      	bne.n	80018c2 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 80018a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001954 <BSP_LED_Init+0xe0>)
 80018a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001954 <BSP_LED_Init+0xe0>)
 80018aa:	f043 0320 	orr.w	r3, r3, #32
 80018ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b2:	4b28      	ldr	r3, [pc, #160]	@ (8001954 <BSP_LED_Init+0xe0>)
 80018b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	e021      	b.n	8001906 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d10f      	bne.n	80018e8 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 80018c8:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <BSP_LED_Init+0xe0>)
 80018ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ce:	4a21      	ldr	r2, [pc, #132]	@ (8001954 <BSP_LED_Init+0xe0>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001954 <BSP_LED_Init+0xe0>)
 80018da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	e00e      	b.n	8001906 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80018e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001954 <BSP_LED_Init+0xe0>)
 80018ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018ee:	4a19      	ldr	r2, [pc, #100]	@ (8001954 <BSP_LED_Init+0xe0>)
 80018f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018f4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018f8:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <BSP_LED_Init+0xe0>)
 80018fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	4a13      	ldr	r2, [pc, #76]	@ (8001958 <BSP_LED_Init+0xe4>)
 800190a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800190e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001910:	2301      	movs	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4a0f      	ldr	r2, [pc, #60]	@ (800195c <BSP_LED_Init+0xe8>)
 8001920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001924:	f107 0218 	add.w	r2, r7, #24
 8001928:	4611      	mov	r1, r2
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fc9a 	bl	8002264 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <BSP_LED_Init+0xe8>)
 8001934:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	4a07      	ldr	r2, [pc, #28]	@ (8001958 <BSP_LED_Init+0xe4>)
 800193c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001940:	2200      	movs	r2, #0
 8001942:	4619      	mov	r1, r3
 8001944:	f000 fde0 	bl	8002508 <HAL_GPIO_WritePin>
  }

  return ret;
 8001948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800194a:	4618      	mov	r0, r3
 800194c:	3730      	adds	r7, #48	@ 0x30
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	44020c00 	.word	0x44020c00
 8001958:	0801fabc 	.word	0x0801fabc
 800195c:	2000000c 	.word	0x2000000c

08001960 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d009      	beq.n	8001988 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d006      	beq.n	8001988 <BSP_LED_Toggle+0x28>
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d003      	beq.n	8001988 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001980:	f06f 0301 	mvn.w	r3, #1
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	e00b      	b.n	80019a0 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <BSP_LED_Toggle+0x4c>)
 800198c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001990:	79fb      	ldrb	r3, [r7, #7]
 8001992:	4907      	ldr	r1, [pc, #28]	@ (80019b0 <BSP_LED_Toggle+0x50>)
 8001994:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f000 fdcc 	bl	8002538 <HAL_GPIO_TogglePin>
  }

  return ret;
 80019a0:	68fb      	ldr	r3, [r7, #12]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	2000000c 	.word	0x2000000c
 80019b0:	0801fabc 	.word	0x0801fabc

080019b4 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	460a      	mov	r2, r1
 80019be:	71fb      	strb	r3, [r7, #7]
 80019c0:	4613      	mov	r3, r2
 80019c2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80019c4:	4b30      	ldr	r3, [pc, #192]	@ (8001a88 <BSP_PB_Init+0xd4>)
 80019c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001a88 <BSP_PB_Init+0xd4>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80019d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a88 <BSP_PB_Init+0xd4>)
 80019d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019da:	f003 0304 	and.w	r3, r3, #4
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80019e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019e6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80019e8:	2302      	movs	r3, #2
 80019ea:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4a23      	ldr	r2, [pc, #140]	@ (8001a8c <BSP_PB_Init+0xd8>)
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	f107 020c 	add.w	r2, r7, #12
 8001a06:	4611      	mov	r1, r2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fc2b 	bl	8002264 <HAL_GPIO_Init>
 8001a0e:	e036      	b.n	8001a7e <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001a10:	4b1f      	ldr	r3, [pc, #124]	@ (8001a90 <BSP_PB_Init+0xdc>)
 8001a12:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	4a1d      	ldr	r2, [pc, #116]	@ (8001a8c <BSP_PB_Init+0xd8>)
 8001a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a1c:	f107 020c 	add.w	r2, r7, #12
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f000 fc1e 	bl	8002264 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001a28:	79fa      	ldrb	r2, [r7, #7]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4a18      	ldr	r2, [pc, #96]	@ (8001a94 <BSP_PB_Init+0xe0>)
 8001a34:	441a      	add	r2, r3
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	4917      	ldr	r1, [pc, #92]	@ (8001a98 <BSP_PB_Init+0xe4>)
 8001a3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4610      	mov	r0, r2
 8001a42:	f000 fbb3 	bl	80021ac <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001a46:	79fa      	ldrb	r2, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4a10      	ldr	r2, [pc, #64]	@ (8001a94 <BSP_PB_Init+0xe0>)
 8001a52:	1898      	adds	r0, r3, r2
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	4a11      	ldr	r2, [pc, #68]	@ (8001a9c <BSP_PB_Init+0xe8>)
 8001a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	2100      	movs	r1, #0
 8001a60:	f000 fb78 	bl	8002154 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001a64:	2018      	movs	r0, #24
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa0 <BSP_PB_Init+0xec>)
 8001a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4619      	mov	r1, r3
 8001a72:	f000 fa97 	bl	8001fa4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001a76:	2318      	movs	r3, #24
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 faad 	bl	8001fd8 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	44020c00 	.word	0x44020c00
 8001a8c:	20000018 	.word	0x20000018
 8001a90:	10110000 	.word	0x10110000
 8001a94:	200009a0 	.word	0x200009a0
 8001a98:	0801fac4 	.word	0x0801fac4
 8001a9c:	2000001c 	.word	0x2000001c
 8001aa0:	20000020 	.word	0x20000020

08001aa4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001aae:	79fa      	ldrb	r2, [r7, #7]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <BSP_PB_IRQHandler+0x28>)
 8001aba:	4413      	add	r3, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fb89 	bl	80021d4 <HAL_EXTI_IRQHandler>
}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200009a0 	.word	0x200009a0

08001ad0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001afe:	f06f 0301 	mvn.w	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	e018      	b.n	8001b38 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2294      	movs	r2, #148	@ 0x94
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <BSP_COM_Init+0x5c>)
 8001b10:	4413      	add	r3, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f854 	bl	8001bc0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	2294      	movs	r2, #148	@ 0x94
 8001b1c:	fb02 f303 	mul.w	r3, r2, r3
 8001b20:	4a08      	ldr	r2, [pc, #32]	@ (8001b44 <BSP_COM_Init+0x5c>)
 8001b22:	4413      	add	r3, r2
 8001b24:	6839      	ldr	r1, [r7, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 f80e 	bl	8001b48 <MX_USART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001b32:	f06f 0303 	mvn.w	r3, #3
 8001b36:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001b38:	68fb      	ldr	r3, [r7, #12]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	200009ac 	.word	0x200009ac

08001b48 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8001b52:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <MX_USART_Init+0x64>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	220c      	movs	r2, #12
 8001b66:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	895b      	ldrh	r3, [r3, #10]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	891b      	ldrh	r3, [r3, #8]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	899b      	ldrh	r3, [r3, #12]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b94:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f008 ffe2 	bl	800ab66 <HAL_UART_Init>
 8001ba2:	4603      	mov	r3, r0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	20000008 	.word	0x20000008

08001bb0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001bb4:	2000      	movs	r0, #0
 8001bb6:	f7ff ff8b 	bl	8001ad0 <BSP_PB_Callback>
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	@ 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001bc8:	4b27      	ldr	r3, [pc, #156]	@ (8001c68 <COM1_MspInit+0xa8>)
 8001bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bce:	4a26      	ldr	r2, [pc, #152]	@ (8001c68 <COM1_MspInit+0xa8>)
 8001bd0:	f043 0308 	orr.w	r3, r3, #8
 8001bd4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bd8:	4b23      	ldr	r3, [pc, #140]	@ (8001c68 <COM1_MspInit+0xa8>)
 8001bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001be6:	4b20      	ldr	r3, [pc, #128]	@ (8001c68 <COM1_MspInit+0xa8>)
 8001be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bec:	4a1e      	ldr	r2, [pc, #120]	@ (8001c68 <COM1_MspInit+0xa8>)
 8001bee:	f043 0308 	orr.w	r3, r3, #8
 8001bf2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <COM1_MspInit+0xa8>)
 8001bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001c04:	4b18      	ldr	r3, [pc, #96]	@ (8001c68 <COM1_MspInit+0xa8>)
 8001c06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c0a:	4a17      	ldr	r2, [pc, #92]	@ (8001c68 <COM1_MspInit+0xa8>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c10:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <COM1_MspInit+0xa8>)
 8001c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001c1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001c22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c26:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001c30:	2301      	movs	r3, #1
 8001c32:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001c34:	2307      	movs	r3, #7
 8001c36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	480b      	ldr	r0, [pc, #44]	@ (8001c6c <COM1_MspInit+0xac>)
 8001c40:	f000 fb10 	bl	8002264 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001c44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c48:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001c4e:	2307      	movs	r3, #7
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001c52:	f107 0314 	add.w	r3, r7, #20
 8001c56:	4619      	mov	r1, r3
 8001c58:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <COM1_MspInit+0xac>)
 8001c5a:	f000 fb03 	bl	8002264 <HAL_GPIO_Init>
}
 8001c5e:	bf00      	nop
 8001c60:	3728      	adds	r7, #40	@ 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	44020c00 	.word	0x44020c00
 8001c6c:	42020c00 	.word	0x42020c00

08001c70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c74:	2003      	movs	r0, #3
 8001c76:	f000 f98a 	bl	8001f8e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001c7a:	f003 f8d5 	bl	8004e28 <HAL_RCC_GetSysClockFreq>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <HAL_Init+0x44>)
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	490b      	ldr	r1, [pc, #44]	@ (8001cb8 <HAL_Init+0x48>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	4a0a      	ldr	r2, [pc, #40]	@ (8001cbc <HAL_Init+0x4c>)
 8001c92:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001c94:	2004      	movs	r0, #4
 8001c96:	f000 f9cf 	bl	8002038 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c9a:	200f      	movs	r0, #15
 8001c9c:	f000 f810 	bl	8001cc0 <HAL_InitTick>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e002      	b.n	8001cb0 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001caa:	f7ff f94f 	bl	8000f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	44020c00 	.word	0x44020c00
 8001cb8:	0801faa4 	.word	0x0801faa4
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001ccc:	4b33      	ldr	r3, [pc, #204]	@ (8001d9c <HAL_InitTick+0xdc>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e05c      	b.n	8001d92 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001cd8:	4b31      	ldr	r3, [pc, #196]	@ (8001da0 <HAL_InitTick+0xe0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0304 	and.w	r3, r3, #4
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d10c      	bne.n	8001cfe <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <HAL_InitTick+0xe4>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8001d9c <HAL_InitTick+0xdc>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	e037      	b.n	8001d6e <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001cfe:	f000 f9f3 	bl	80020e8 <HAL_SYSTICK_GetCLKSourceConfig>
 8001d02:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d023      	beq.n	8001d52 <HAL_InitTick+0x92>
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d82d      	bhi.n	8001d6c <HAL_InitTick+0xac>
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_InitTick+0x5e>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d00d      	beq.n	8001d38 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8001d1c:	e026      	b.n	8001d6c <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001d1e:	4b21      	ldr	r3, [pc, #132]	@ (8001da4 <HAL_InitTick+0xe4>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4b1e      	ldr	r3, [pc, #120]	@ (8001d9c <HAL_InitTick+0xdc>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	4619      	mov	r1, r3
 8001d28:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8001d2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d34:	60fb      	str	r3, [r7, #12]
        break;
 8001d36:	e01a      	b.n	8001d6e <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001d38:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <HAL_InitTick+0xdc>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d42:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d46:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4e:	60fb      	str	r3, [r7, #12]
        break;
 8001d50:	e00d      	b.n	8001d6e <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001d52:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_InitTick+0xdc>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d60:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	60fb      	str	r3, [r7, #12]
        break;
 8001d6a:	e000      	b.n	8001d6e <HAL_InitTick+0xae>
        break;
 8001d6c:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f000 f940 	bl	8001ff4 <HAL_SYSTICK_Config>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e009      	b.n	8001d92 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	f04f 30ff 	mov.w	r0, #4294967295
 8001d86:	f000 f90d 	bl	8001fa4 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001d8a:	4a07      	ldr	r2, [pc, #28]	@ (8001da8 <HAL_InitTick+0xe8>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000028 	.word	0x20000028
 8001da0:	e000e010 	.word	0xe000e010
 8001da4:	20000004 	.word	0x20000004
 8001da8:	20000024 	.word	0x20000024

08001dac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <HAL_IncTick+0x20>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	4b06      	ldr	r3, [pc, #24]	@ (8001dd0 <HAL_IncTick+0x24>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	4a04      	ldr	r2, [pc, #16]	@ (8001dd0 <HAL_IncTick+0x24>)
 8001dbe:	6013      	str	r3, [r2, #0]
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000028 	.word	0x20000028
 8001dd0:	20000a40 	.word	0x20000a40

08001dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	@ (8001de8 <HAL_GetTick+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000a40 	.word	0x20000a40

08001dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df4:	f7ff ffee 	bl	8001dd4 <HAL_GetTick>
 8001df8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d005      	beq.n	8001e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e06:	4b0a      	ldr	r3, [pc, #40]	@ (8001e30 <HAL_Delay+0x44>)
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	4413      	add	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e12:	bf00      	nop
 8001e14:	f7ff ffde 	bl	8001dd4 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d8f7      	bhi.n	8001e14 <HAL_Delay+0x28>
  {
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000028 	.word	0x20000028

08001e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	@ (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db0b      	blt.n	8001ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4907      	ldr	r1, [pc, #28]	@ (8001ed0 <__NVIC_EnableIRQ+0x38>)
 8001eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2001      	movs	r0, #1
 8001eba:	fa00 f202 	lsl.w	r2, r0, r2
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	@ (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	@ (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	@ 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
         );
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	@ 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ff4c 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4603      	mov	r3, r0
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	607a      	str	r2, [r7, #4]
 8001fb0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb2:	f7ff ff63 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8001fb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	68b9      	ldr	r1, [r7, #8]
 8001fbc:	6978      	ldr	r0, [r7, #20]
 8001fbe:	f7ff ffb3 	bl	8001f28 <NVIC_EncodePriority>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff82 	bl	8001ed4 <__NVIC_SetPriority>
}
 8001fd0:	bf00      	nop
 8001fd2:	3718      	adds	r7, #24
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff56 	bl	8001e98 <__NVIC_EnableIRQ>
}
 8001fec:	bf00      	nop
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002004:	d301      	bcc.n	800200a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002006:	2301      	movs	r3, #1
 8002008:	e00d      	b.n	8002026 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 800200a:	4a0a      	ldr	r2, [pc, #40]	@ (8002034 <HAL_SYSTICK_Config+0x40>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002012:	4b08      	ldr	r3, [pc, #32]	@ (8002034 <HAL_SYSTICK_Config+0x40>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <HAL_SYSTICK_Config+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a05      	ldr	r2, [pc, #20]	@ (8002034 <HAL_SYSTICK_Config+0x40>)
 800201e:	f043 0303 	orr.w	r3, r3, #3
 8002022:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000e010 	.word	0xe000e010

08002038 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b04      	cmp	r3, #4
 8002044:	d844      	bhi.n	80020d0 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002046:	a201      	add	r2, pc, #4	@ (adr r2, 800204c <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800204c:	0800206f 	.word	0x0800206f
 8002050:	0800208d 	.word	0x0800208d
 8002054:	080020af 	.word	0x080020af
 8002058:	080020d1 	.word	0x080020d1
 800205c:	08002061 	.word	0x08002061
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002060:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a1e      	ldr	r2, [pc, #120]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	6013      	str	r3, [r2, #0]
      break;
 800206c:	e031      	b.n	80020d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800206e:	4b1c      	ldr	r3, [pc, #112]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a1b      	ldr	r2, [pc, #108]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002074:	f023 0304 	bic.w	r3, r3, #4
 8002078:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800207a:	4b1a      	ldr	r3, [pc, #104]	@ (80020e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800207c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002080:	4a18      	ldr	r2, [pc, #96]	@ (80020e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002082:	f023 030c 	bic.w	r3, r3, #12
 8002086:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800208a:	e022      	b.n	80020d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800208c:	4b14      	ldr	r3, [pc, #80]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a13      	ldr	r2, [pc, #76]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002092:	f023 0304 	bic.w	r3, r3, #4
 8002096:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800209a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800209e:	f023 030c 	bic.w	r3, r3, #12
 80020a2:	4a10      	ldr	r2, [pc, #64]	@ (80020e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80020ac:	e011      	b.n	80020d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80020ae:	4b0c      	ldr	r3, [pc, #48]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a0b      	ldr	r2, [pc, #44]	@ (80020e0 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 80020b4:	f023 0304 	bic.w	r3, r3, #4
 80020b8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80020c0:	f023 030c 	bic.w	r3, r3, #12
 80020c4:	4a07      	ldr	r2, [pc, #28]	@ (80020e4 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80020c6:	f043 0308 	orr.w	r3, r3, #8
 80020ca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80020ce:	e000      	b.n	80020d2 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80020d0:	bf00      	nop
  }
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e010 	.word	0xe000e010
 80020e4:	44020c00 	.word	0x44020c00

080020e8 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80020ee:	4b17      	ldr	r3, [pc, #92]	@ (800214c <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80020fa:	2304      	movs	r3, #4
 80020fc:	607b      	str	r3, [r7, #4]
 80020fe:	e01e      	b.n	800213e <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002100:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002102:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b08      	cmp	r3, #8
 8002110:	d00f      	beq.n	8002132 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d80f      	bhi.n	8002138 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b04      	cmp	r3, #4
 8002122:	d003      	beq.n	800212c <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002124:	e008      	b.n	8002138 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
        break;
 800212a:	e008      	b.n	800213e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 800212c:	2301      	movs	r3, #1
 800212e:	607b      	str	r3, [r7, #4]
        break;
 8002130:	e005      	b.n	800213e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002132:	2302      	movs	r3, #2
 8002134:	607b      	str	r3, [r7, #4]
        break;
 8002136:	e002      	b.n	800213e <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
        break;
 800213c:	bf00      	nop
    }
  }
  return systick_source;
 800213e:	687b      	ldr	r3, [r7, #4]
}
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000e010 	.word	0xe000e010
 8002150:	44020c00 	.word	0x44020c00

08002154 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	460b      	mov	r3, r1
 800215e:	607a      	str	r2, [r7, #4]
 8002160:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002162:	2300      	movs	r3, #0
 8002164:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002166:	7afb      	ldrb	r3, [r7, #11]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d011      	beq.n	8002190 <HAL_EXTI_RegisterCallback+0x3c>
 800216c:	2b02      	cmp	r3, #2
 800216e:	dc13      	bgt.n	8002198 <HAL_EXTI_RegisterCallback+0x44>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d002      	beq.n	800217a <HAL_EXTI_RegisterCallback+0x26>
 8002174:	2b01      	cmp	r3, #1
 8002176:	d007      	beq.n	8002188 <HAL_EXTI_RegisterCallback+0x34>
 8002178:	e00e      	b.n	8002198 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	609a      	str	r2, [r3, #8]
      break;
 8002186:	e00a      	b.n	800219e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	605a      	str	r2, [r3, #4]
      break;
 800218e:	e006      	b.n	800219e <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	609a      	str	r2, [r3, #8]
      break;
 8002196:	e002      	b.n	800219e <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	75fb      	strb	r3, [r7, #23]
      break;
 800219c:	bf00      	nop
  }

  return status;
 800219e:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	371c      	adds	r7, #28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d101      	bne.n	80021c0 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e003      	b.n	80021c8 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80021c6:	2300      	movs	r3, #0
  }
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	0c1b      	lsrs	r3, r3, #16
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	2201      	movs	r2, #1
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	4b17      	ldr	r3, [pc, #92]	@ (800225c <HAL_EXTI_IRQHandler+0x88>)
 80021fe:	4413      	add	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4013      	ands	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d002      	beq.n	8002226 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	4b0d      	ldr	r3, [pc, #52]	@ (8002260 <HAL_EXTI_IRQHandler+0x8c>)
 800222c:	4413      	add	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d009      	beq.n	8002254 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	4798      	blx	r3
    }
  }
}
 8002254:	bf00      	nop
 8002256:	3718      	adds	r7, #24
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	4402200c 	.word	0x4402200c
 8002260:	44022010 	.word	0x44022010

08002264 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800226e:	2300      	movs	r3, #0
 8002270:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002272:	e136      	b.n	80024e2 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2101      	movs	r1, #1
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	4013      	ands	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8128 	beq.w	80024dc <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b02      	cmp	r3, #2
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x38>
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b12      	cmp	r3, #18
 800229a:	d125      	bne.n	80022e8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022a8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f003 0307 	and.w	r3, r3, #7
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	220f      	movs	r2, #15
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4013      	ands	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	f003 020f 	and.w	r2, r3, #15
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	08da      	lsrs	r2, r3, #3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	3208      	adds	r2, #8
 80022e2:	6979      	ldr	r1, [r7, #20]
 80022e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	2203      	movs	r2, #3
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	4013      	ands	r3, r2
 80022fe:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0203 	and.w	r2, r3, #3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	697a      	ldr	r2, [r7, #20]
 8002312:	4313      	orrs	r3, r2
 8002314:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d00b      	beq.n	800233c <HAL_GPIO_Init+0xd8>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d007      	beq.n	800233c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002330:	2b11      	cmp	r3, #17
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b12      	cmp	r3, #18
 800233a:	d130      	bne.n	800239e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4013      	ands	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	4313      	orrs	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002372:	2201      	movs	r2, #1
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	4013      	ands	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	091b      	lsrs	r3, r3, #4
 8002388:	f003 0201 	and.w	r2, r3, #1
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	697a      	ldr	r2, [r7, #20]
 8002394:	4313      	orrs	r3, r2
 8002396:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d017      	beq.n	80023d6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4013      	ands	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d07c      	beq.n	80024dc <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80023e2:	4a47      	ldr	r2, [pc, #284]	@ (8002500 <HAL_GPIO_Init+0x29c>)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	3318      	adds	r3, #24
 80023ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ee:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	220f      	movs	r2, #15
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4013      	ands	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	0a9a      	lsrs	r2, r3, #10
 800240a:	4b3e      	ldr	r3, [pc, #248]	@ (8002504 <HAL_GPIO_Init+0x2a0>)
 800240c:	4013      	ands	r3, r2
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	f002 0203 	and.w	r2, r2, #3
 8002414:	00d2      	lsls	r2, r2, #3
 8002416:	4093      	lsls	r3, r2
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	4313      	orrs	r3, r2
 800241c:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800241e:	4938      	ldr	r1, [pc, #224]	@ (8002500 <HAL_GPIO_Init+0x29c>)
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	3318      	adds	r3, #24
 8002426:	697a      	ldr	r2, [r7, #20]
 8002428:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800242c:	4b34      	ldr	r3, [pc, #208]	@ (8002500 <HAL_GPIO_Init+0x29c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4013      	ands	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002450:	4a2b      	ldr	r2, [pc, #172]	@ (8002500 <HAL_GPIO_Init+0x29c>)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002456:	4b2a      	ldr	r3, [pc, #168]	@ (8002500 <HAL_GPIO_Init+0x29c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	43db      	mvns	r3, r3
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	4013      	ands	r3, r2
 8002464:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800247a:	4a21      	ldr	r2, [pc, #132]	@ (8002500 <HAL_GPIO_Init+0x29c>)
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002480:	4b1f      	ldr	r3, [pc, #124]	@ (8002500 <HAL_GPIO_Init+0x29c>)
 8002482:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002486:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	43db      	mvns	r3, r3
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4013      	ands	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80024a6:	4a16      	ldr	r2, [pc, #88]	@ (8002500 <HAL_GPIO_Init+0x29c>)
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 80024ae:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <HAL_GPIO_Init+0x29c>)
 80024b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024b4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	4013      	ands	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80024d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <HAL_GPIO_Init+0x29c>)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	3301      	adds	r3, #1
 80024e0:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f47f aec1 	bne.w	8002274 <HAL_GPIO_Init+0x10>
  }
}
 80024f2:	bf00      	nop
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr
 8002500:	44022000 	.word	0x44022000
 8002504:	002f7f7f 	.word	0x002f7f7f

08002508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	460b      	mov	r3, r1
 8002512:	807b      	strh	r3, [r7, #2]
 8002514:	4613      	mov	r3, r2
 8002516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002518:	787b      	ldrb	r3, [r7, #1]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800251e:	887a      	ldrh	r2, [r7, #2]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002524:	e002      	b.n	800252c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	695b      	ldr	r3, [r3, #20]
 8002548:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800254a:	887a      	ldrh	r2, [r7, #2]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4013      	ands	r3, r2
 8002550:	041a      	lsls	r2, r3, #16
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	43d9      	mvns	r1, r3
 8002556:	887b      	ldrh	r3, [r7, #2]
 8002558:	400b      	ands	r3, r1
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	619a      	str	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e02a      	b.n	80025d4 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b00      	cmp	r3, #0
 8002588:	d106      	bne.n	8002598 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7fe fce2 	bl	8000f5c <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 80025ae:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	68f9      	ldr	r1, [r7, #12]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3710      	adds	r7, #16
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e08d      	b.n	800270a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d106      	bne.n	8002608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7fe fcc6 	bl	8000f94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2224      	movs	r2, #36	@ 0x24
 800260c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0201 	bic.w	r2, r2, #1
 800261e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800262c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	689a      	ldr	r2, [r3, #8]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800263c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d107      	bne.n	8002656 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689a      	ldr	r2, [r3, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002652:	609a      	str	r2, [r3, #8]
 8002654:	e006      	b.n	8002664 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002662:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d108      	bne.n	800267e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	e007      	b.n	800268e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800268c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800269c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80026a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	695b      	ldr	r3, [r3, #20]
 80026ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69d9      	ldr	r1, [r3, #28]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1a      	ldr	r2, [r3, #32]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b20      	cmp	r3, #32
 8002726:	d138      	bne.n	800279a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800272e:	2b01      	cmp	r3, #1
 8002730:	d101      	bne.n	8002736 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002732:	2302      	movs	r3, #2
 8002734:	e032      	b.n	800279c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2224      	movs	r2, #36	@ 0x24
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0201 	bic.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002764:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6819      	ldr	r1, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f042 0201 	orr.w	r2, r2, #1
 8002784:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	e000      	b.n	800279c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
  }
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d139      	bne.n	8002832 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e033      	b.n	8002834 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2224      	movs	r2, #36	@ 0x24
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f022 0201 	bic.w	r2, r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80027fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	e000      	b.n	8002834 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002832:	2302      	movs	r3, #2
  }
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	460b      	mov	r3, r1
 800284a:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800284c:	230a      	movs	r3, #10
 800284e:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002850:	e002      	b.n	8002858 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3b01      	subs	r3, #1
 8002856:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f9      	bne.n	8002852 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800285e:	887b      	ldrh	r3, [r7, #2]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002866:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	b29b      	uxth	r3, r3
 8002870:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002874:	b29b      	uxth	r3, r3
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	460b      	mov	r3, r1
 800288c:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800288e:	230a      	movs	r3, #10
 8002890:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002892:	e002      	b.n	800289a <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	3b01      	subs	r3, #1
 8002898:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f9      	bne.n	8002894 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80028a0:	887b      	ldrh	r3, [r7, #2]
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	0c1b      	lsrs	r3, r3, #16
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028b6:	b29b      	uxth	r3, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3714      	adds	r7, #20
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80028d0:	230a      	movs	r3, #10
 80028d2:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80028d4:	e002      	b.n	80028dc <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3b01      	subs	r3, #1
 80028da:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1f9      	bne.n	80028d6 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80028e2:	887b      	ldrh	r3, [r7, #2]
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028f8:	b29b      	uxth	r3, r3
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af02      	add	r7, sp, #8
 800290c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0f3      	b.n	8002b00 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d106      	bne.n	8002932 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7fe fe59 	bl	80015e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2203      	movs	r2, #3
 8002936:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f008 febb 	bl	800b6ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7c1a      	ldrb	r2, [r3, #16]
 800294c:	f88d 2000 	strb.w	r2, [sp]
 8002950:	3304      	adds	r3, #4
 8002952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002954:	f008 fe7f 	bl	800b656 <USB_CoreInit>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d005      	beq.n	800296a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e0ca      	b.n	8002b00 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2100      	movs	r1, #0
 8002970:	4618      	mov	r0, r3
 8002972:	f008 feb7 	bl	800b6e4 <USB_SetCurrentMode>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d005      	beq.n	8002988 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0bb      	b.n	8002b00 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002988:	2300      	movs	r3, #0
 800298a:	73fb      	strb	r3, [r7, #15]
 800298c:	e03f      	b.n	8002a0e <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800298e:	7bfa      	ldrb	r2, [r7, #15]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	440b      	add	r3, r1
 800299c:	3315      	adds	r3, #21
 800299e:	2201      	movs	r2, #1
 80029a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029a2:	7bfa      	ldrb	r2, [r7, #15]
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	3314      	adds	r3, #20
 80029b2:	7bfa      	ldrb	r2, [r7, #15]
 80029b4:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029b6:	7bfa      	ldrb	r2, [r7, #15]
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	3317      	adds	r3, #23
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	440b      	add	r3, r1
 80029d8:	3324      	adds	r3, #36	@ 0x24
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	4413      	add	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	440b      	add	r3, r1
 80029ec:	3328      	adds	r3, #40	@ 0x28
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029f2:	7bfb      	ldrb	r3, [r7, #15]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	3304      	adds	r3, #4
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	73fb      	strb	r3, [r7, #15]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	791b      	ldrb	r3, [r3, #4]
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d3ba      	bcc.n	800298e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	73fb      	strb	r3, [r7, #15]
 8002a1c:	e044      	b.n	8002aa8 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a1e:	7bfa      	ldrb	r2, [r7, #15]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a34:	7bfa      	ldrb	r2, [r7, #15]
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	440b      	add	r3, r1
 8002a42:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a4a:	7bfa      	ldrb	r2, [r7, #15]
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a76:	7bfa      	ldrb	r2, [r7, #15]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a8c:	7bfa      	ldrb	r2, [r7, #15]
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	791b      	ldrb	r3, [r3, #4]
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d3b5      	bcc.n	8002a1e <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	7c1a      	ldrb	r2, [r3, #16]
 8002aba:	f88d 2000 	strb.w	r2, [sp]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ac2:	f008 fe32 	bl	800b72a <USB_DevInit>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2202      	movs	r2, #2
 8002ad0:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e013      	b.n	8002b00 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7b1b      	ldrb	r3, [r3, #12]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d102      	bne.n	8002af4 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f001 fb6b 	bl	80041ca <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4618      	mov	r0, r3
 8002afa:	f00a fc8b 	bl	800d414 <USB_DevDisconnect>

  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_PCD_Start+0x16>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e012      	b.n	8002b44 <HAL_PCD_Start+0x3c>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f008 fdb1 	bl	800b692 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f00a fc5c 	bl	800d3f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f00a fc6c 	bl	800d436 <USB_ReadInterrupts>
 8002b5e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d003      	beq.n	8002b72 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 faf2 	bl	8003154 <PCD_EP_ISR_Handler>

    return;
 8002b70:	e0de      	b.n	8002d30 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d010      	beq.n	8002b9e <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8002b8a:	400b      	ands	r3, r1
 8002b8c:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f00b fb3f 	bl	800e212 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b94:	2100      	movs	r1, #0
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f8e1 	bl	8002d5e <HAL_PCD_SetAddress>

    return;
 8002b9c:	e0c8      	b.n	8002d30 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8002bb6:	400b      	ands	r3, r1
 8002bb8:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002bba:	e0b9      	b.n	8002d30 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8002bd4:	400b      	ands	r3, r1
 8002bd6:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002bd8:	e0aa      	b.n	8002d30 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d029      	beq.n	8002c38 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0204 	bic.w	r2, r2, #4
 8002bf2:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0208 	bic.w	r2, r2, #8
 8002c02:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d107      	bne.n	8002c1e <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c16:	2100      	movs	r1, #0
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f001 faf8 	bl	800420e <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f893 	bl	8002d4a <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002c32:	400b      	ands	r3, r1
 8002c34:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002c36:	e07b      	b.n	8002d30 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01c      	beq.n	8002c7c <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0208 	orr.w	r2, r2, #8
 8002c50:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8002c60:	400b      	ands	r3, r1
 8002c62:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0204 	orr.w	r2, r2, #4
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f85e 	bl	8002d36 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c7a:	e059      	b.n	8002d30 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d033      	beq.n	8002cee <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8002c94:	400b      	ands	r3, r1
 8002c96:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d121      	bne.n	8002ce6 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f042 0204 	orr.w	r2, r2, #4
 8002cb0:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0208 	orr.w	r2, r2, #8
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002cdc:	2101      	movs	r1, #1
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f001 fa95 	bl	800420e <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002ce4:	e024      	b.n	8002d30 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f000 f825 	bl	8002d36 <HAL_PCD_SuspendCallback>
    return;
 8002cec:	e020      	b.n	8002d30 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00c      	beq.n	8002d12 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8002d06:	400b      	ands	r3, r1
 8002d08:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f00b fa73 	bl	800e1f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002d10:	e00e      	b.n	8002d30 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d009      	beq.n	8002d30 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8002d2a:	400b      	ands	r3, r1
 8002d2c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002d2e:	bf00      	nop
  }
}
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002d36:	b480      	push	{r7}
 8002d38:	b083      	sub	sp, #12
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
 8002d66:	460b      	mov	r3, r1
 8002d68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_PCD_SetAddress+0x1a>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e012      	b.n	8002d9e <HAL_PCD_SetAddress+0x40>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f00a fb1c 	bl	800d3cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	4608      	mov	r0, r1
 8002db0:	4611      	mov	r1, r2
 8002db2:	461a      	mov	r2, r3
 8002db4:	4603      	mov	r3, r0
 8002db6:	70fb      	strb	r3, [r7, #3]
 8002db8:	460b      	mov	r3, r1
 8002dba:	803b      	strh	r3, [r7, #0]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	da0f      	bge.n	8002dec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dcc:	78fb      	ldrb	r3, [r7, #3]
 8002dce:	f003 0207 	and.w	r2, r3, #7
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	3310      	adds	r3, #16
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	4413      	add	r3, r2
 8002de0:	3304      	adds	r3, #4
 8002de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	705a      	strb	r2, [r3, #1]
 8002dea:	e00f      	b.n	8002e0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	f003 0207 	and.w	r2, r3, #7
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	3304      	adds	r3, #4
 8002e04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002e18:	883b      	ldrh	r3, [r7, #0]
 8002e1a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	78ba      	ldrb	r2, [r7, #2]
 8002e26:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e28:	78bb      	ldrb	r3, [r7, #2]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d102      	bne.n	8002e34 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_PCD_EP_Open+0x9c>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e00e      	b.n	8002e60 <HAL_PCD_EP_Open+0xba>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68f9      	ldr	r1, [r7, #12]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f008 fc8d 	bl	800b770 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8002e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	da0f      	bge.n	8002e9c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	f003 0207 	and.w	r2, r3, #7
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	3310      	adds	r3, #16
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4413      	add	r3, r2
 8002e90:	3304      	adds	r3, #4
 8002e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2201      	movs	r2, #1
 8002e98:	705a      	strb	r2, [r3, #1]
 8002e9a:	e00f      	b.n	8002ebc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	f003 0207 	and.w	r2, r3, #7
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_PCD_EP_Close+0x6e>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e00e      	b.n	8002ef4 <HAL_PCD_EP_Close+0x8c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68f9      	ldr	r1, [r7, #12]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f008 ffa3 	bl	800be30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	603b      	str	r3, [r7, #0]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f0c:	7afb      	ldrb	r3, [r7, #11]
 8002f0e:	f003 0207 	and.w	r2, r3, #7
 8002f12:	4613      	mov	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	4413      	add	r3, r2
 8002f22:	3304      	adds	r3, #4
 8002f24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	683a      	ldr	r2, [r7, #0]
 8002f30:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2200      	movs	r2, #0
 8002f36:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f3e:	7afb      	ldrb	r3, [r7, #11]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6979      	ldr	r1, [r7, #20]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f009 f8f7 	bl	800c144 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002f6c:	78fb      	ldrb	r3, [r7, #3]
 8002f6e:	f003 0207 	and.w	r2, r3, #7
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	440b      	add	r3, r1
 8002f7e:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	607a      	str	r2, [r7, #4]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa0:	7afb      	ldrb	r3, [r7, #11]
 8002fa2:	f003 0207 	and.w	r2, r3, #7
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	3310      	adds	r3, #16
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fde:	7afb      	ldrb	r3, [r7, #11]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6979      	ldr	r1, [r7, #20]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f009 f8a7 	bl	800c144 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	7912      	ldrb	r2, [r2, #4]
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e040      	b.n	80030a0 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800301e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003022:	2b00      	cmp	r3, #0
 8003024:	da0f      	bge.n	8003046 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 0207 	and.w	r2, r3, #7
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	00db      	lsls	r3, r3, #3
 8003034:	3310      	adds	r3, #16
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	3304      	adds	r3, #4
 800303c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2201      	movs	r2, #1
 8003042:	705a      	strb	r2, [r3, #1]
 8003044:	e00d      	b.n	8003062 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003046:	78fa      	ldrb	r2, [r7, #3]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	00db      	lsls	r3, r3, #3
 8003050:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	4413      	add	r3, r2
 8003058:	3304      	adds	r3, #4
 800305a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	b2da      	uxtb	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_PCD_EP_SetStall+0x82>
 800307e:	2302      	movs	r3, #2
 8003080:	e00e      	b.n	80030a0 <HAL_PCD_EP_SetStall+0xa0>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68f9      	ldr	r1, [r7, #12]
 8003090:	4618      	mov	r0, r3
 8003092:	f00a f8c1 	bl	800d218 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	7912      	ldrb	r2, [r2, #4]
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e042      	b.n	800314c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80030c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da0f      	bge.n	80030ee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 0207 	and.w	r2, r3, #7
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	3310      	adds	r3, #16
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	3304      	adds	r3, #4
 80030e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	705a      	strb	r2, [r3, #1]
 80030ec:	e00f      	b.n	800310e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ee:	78fb      	ldrb	r3, [r7, #3]
 80030f0:	f003 0207 	and.w	r2, r3, #7
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	3304      	adds	r3, #4
 8003106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	b2da      	uxtb	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003126:	2b01      	cmp	r3, #1
 8003128:	d101      	bne.n	800312e <HAL_PCD_EP_ClrStall+0x86>
 800312a:	2302      	movs	r3, #2
 800312c:	e00e      	b.n	800314c <HAL_PCD_EP_ClrStall+0xa4>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68f9      	ldr	r1, [r7, #12]
 800313c:	4618      	mov	r0, r3
 800313e:	f00a f8b1 	bl	800d2a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08e      	sub	sp, #56	@ 0x38
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800315c:	e326      	b.n	80037ac <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003164:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8003166:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8003172:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003176:	2b00      	cmp	r3, #0
 8003178:	f040 8124 	bne.w	80033c4 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800317c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800317e:	f003 0310 	and.w	r3, r3, #16
 8003182:	2b00      	cmp	r3, #0
 8003184:	d13e      	bne.n	8003204 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b89      	ldr	r3, [pc, #548]	@ (80033b4 <PCD_EP_ISR_Handler+0x260>)
 800318e:	4013      	ands	r3, r2
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800319c:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3314      	adds	r3, #20
 80031a2:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80031a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	0c1b      	lsrs	r3, r3, #16
 80031b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80031be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	441a      	add	r2, r3
 80031c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80031cc:	2100      	movs	r1, #0
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f00a fff7 	bl	800e1c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	7c5b      	ldrb	r3, [r3, #17]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 82e6 	beq.w	80037ac <PCD_EP_ISR_Handler+0x658>
 80031e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f040 82e1 	bne.w	80037ac <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	7c5b      	ldrb	r3, [r3, #17]
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	745a      	strb	r2, [r3, #17]
 8003202:	e2d3      	b.n	80037ac <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800320a:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003214:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003216:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800321a:	2b00      	cmp	r3, #0
 800321c:	d027      	beq.n	800326e <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	4619      	mov	r1, r3
 8003228:	4610      	mov	r0, r2
 800322a:	f7ff fb09 	bl	8002840 <PCD_GET_EP_RX_CNT>
 800322e:	4603      	mov	r3, r0
 8003230:	461a      	mov	r2, r3
 8003232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003234:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8003240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003242:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003246:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003248:	b29b      	uxth	r3, r3
 800324a:	f00a f963 	bl	800d514 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b58      	ldr	r3, [pc, #352]	@ (80033b8 <PCD_EP_ISR_Handler+0x264>)
 8003256:	4013      	ands	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003264:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f00a ff7e 	bl	800e168 <HAL_PCD_SetupStageCallback>
 800326c:	e29e      	b.n	80037ac <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800326e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003272:	2b00      	cmp	r3, #0
 8003274:	f280 829a 	bge.w	80037ac <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b4e      	ldr	r3, [pc, #312]	@ (80033b8 <PCD_EP_ISR_Handler+0x264>)
 8003280:	4013      	ands	r3, r2
 8003282:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800328a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800328e:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f7ff fad0 	bl	8002840 <PCD_GET_EP_RX_CNT>
 80032a0:	4603      	mov	r3, r0
 80032a2:	461a      	mov	r2, r3
 80032a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80032a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d019      	beq.n	80032e4 <PCD_EP_ISR_Handler+0x190>
 80032b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d015      	beq.n	80032e4 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6818      	ldr	r0, [r3, #0]
 80032bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032be:	6959      	ldr	r1, [r3, #20]
 80032c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80032c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032c6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	f00a f923 	bl	800d514 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	441a      	add	r2, r3
 80032d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032da:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032dc:	2100      	movs	r1, #0
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f00a ff54 	bl	800e18c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80032ec:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80032ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f040 825a 	bne.w	80037ac <PCD_EP_ISR_Handler+0x658>
 80032f8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80032fa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80032fe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003302:	f000 8253 	beq.w	80037ac <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003306:	4b2d      	ldr	r3, [pc, #180]	@ (80033bc <PCD_EP_ISR_Handler+0x268>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4a2c      	ldr	r2, [pc, #176]	@ (80033bc <PCD_EP_ISR_Handler+0x268>)
 800330c:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8003310:	6053      	str	r3, [r2, #4]
 8003312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d106      	bne.n	8003328 <PCD_EP_ISR_Handler+0x1d4>
 800331a:	4b28      	ldr	r3, [pc, #160]	@ (80033bc <PCD_EP_ISR_Handler+0x268>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	4a27      	ldr	r2, [pc, #156]	@ (80033bc <PCD_EP_ISR_Handler+0x268>)
 8003320:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003324:	6053      	str	r3, [r2, #4]
 8003326:	e02e      	b.n	8003386 <PCD_EP_ISR_Handler+0x232>
 8003328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	2b3e      	cmp	r3, #62	@ 0x3e
 800332e:	d814      	bhi.n	800335a <PCD_EP_ISR_Handler+0x206>
 8003330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	617b      	str	r3, [r7, #20]
 8003338:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f003 0301 	and.w	r3, r3, #1
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <PCD_EP_ISR_Handler+0x1f6>
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	3301      	adds	r3, #1
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	4b1c      	ldr	r3, [pc, #112]	@ (80033bc <PCD_EP_ISR_Handler+0x268>)
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	069b      	lsls	r3, r3, #26
 8003352:	491a      	ldr	r1, [pc, #104]	@ (80033bc <PCD_EP_ISR_Handler+0x268>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
 8003358:	e015      	b.n	8003386 <PCD_EP_ISR_Handler+0x232>
 800335a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	095b      	lsrs	r3, r3, #5
 8003360:	617b      	str	r3, [r7, #20]
 8003362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <PCD_EP_ISR_Handler+0x220>
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	3b01      	subs	r3, #1
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	4b11      	ldr	r3, [pc, #68]	@ (80033bc <PCD_EP_ISR_Handler+0x268>)
 8003376:	685a      	ldr	r2, [r3, #4]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	069b      	lsls	r3, r3, #26
 800337c:	4313      	orrs	r3, r2
 800337e:	4a0f      	ldr	r2, [pc, #60]	@ (80033bc <PCD_EP_ISR_Handler+0x268>)
 8003380:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003384:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <PCD_EP_ISR_Handler+0x26c>)
 800338e:	4013      	ands	r3, r2
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033b0:	6013      	str	r3, [r2, #0]
 80033b2:	e1fb      	b.n	80037ac <PCD_EP_ISR_Handler+0x658>
 80033b4:	07ff8f0f 	.word	0x07ff8f0f
 80033b8:	07ff0f8f 	.word	0x07ff0f8f
 80033bc:	40016400 	.word	0x40016400
 80033c0:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	461a      	mov	r2, r3
 80033ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 80033d6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f280 80bd 	bge.w	800355a <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	4b9e      	ldr	r3, [pc, #632]	@ (800366c <PCD_EP_ISR_Handler+0x518>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800340a:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800340c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003410:	4613      	mov	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	4413      	add	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	4413      	add	r3, r2
 8003420:	3304      	adds	r3, #4
 8003422:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003426:	7b1b      	ldrb	r3, [r3, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d116      	bne.n	800345a <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	4619      	mov	r1, r3
 8003436:	4610      	mov	r0, r2
 8003438:	f7ff fa02 	bl	8002840 <PCD_GET_EP_RX_CNT>
 800343c:	4603      	mov	r3, r0
 800343e:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8003440:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003442:	2b00      	cmp	r3, #0
 8003444:	d067      	beq.n	8003516 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344c:	6959      	ldr	r1, [r3, #20]
 800344e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003450:	88da      	ldrh	r2, [r3, #6]
 8003452:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003454:	f00a f85e 	bl	800d514 <USB_ReadPMA>
 8003458:	e05d      	b.n	8003516 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800345a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800345c:	78db      	ldrb	r3, [r3, #3]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d108      	bne.n	8003474 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003462:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003464:	461a      	mov	r2, r3
 8003466:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f9ad 	bl	80037c8 <HAL_PCD_EP_DB_Receive>
 800346e:	4603      	mov	r3, r0
 8003470:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003472:	e050      	b.n	8003516 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	4b7a      	ldr	r3, [pc, #488]	@ (8003670 <PCD_EP_ISR_Handler+0x51c>)
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	441a      	add	r2, r3
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800349e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034a2:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d016      	beq.n	80034ea <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	4619      	mov	r1, r3
 80034c6:	4610      	mov	r0, r2
 80034c8:	f7ff f9db 	bl	8002882 <PCD_GET_EP_DBUF0_CNT>
 80034cc:	4603      	mov	r3, r0
 80034ce:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80034d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d01f      	beq.n	8003516 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034dc:	6959      	ldr	r1, [r3, #20]
 80034de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e0:	891a      	ldrh	r2, [r3, #8]
 80034e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80034e4:	f00a f816 	bl	800d514 <USB_ReadPMA>
 80034e8:	e015      	b.n	8003516 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	4619      	mov	r1, r3
 80034f4:	4610      	mov	r0, r2
 80034f6:	f7ff f9e5 	bl	80028c4 <PCD_GET_EP_DBUF1_CNT>
 80034fa:	4603      	mov	r3, r0
 80034fc:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80034fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350a:	6959      	ldr	r1, [r3, #20]
 800350c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350e:	895a      	ldrh	r2, [r3, #10]
 8003510:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003512:	f009 ffff 	bl	800d514 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800351c:	441a      	add	r2, r3
 800351e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003520:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003528:	441a      	add	r2, r3
 800352a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800352e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d004      	beq.n	8003540 <PCD_EP_ISR_Handler+0x3ec>
 8003536:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800353a:	691b      	ldr	r3, [r3, #16]
 800353c:	429a      	cmp	r2, r3
 800353e:	d206      	bcs.n	800354e <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f00a fe20 	bl	800e18c <HAL_PCD_DataOutStageCallback>
 800354c:	e005      	b.n	800355a <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003554:	4618      	mov	r0, r3
 8003556:	f008 fdf5 	bl	800c144 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800355a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800355c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8123 	beq.w	80037ac <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8003566:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 800356a:	4613      	mov	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	4413      	add	r3, r2
 8003570:	00db      	lsls	r3, r3, #3
 8003572:	3310      	adds	r3, #16
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	4413      	add	r3, r2
 8003578:	3304      	adds	r3, #4
 800357a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	461a      	mov	r2, r3
 8003582:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b39      	ldr	r3, [pc, #228]	@ (8003674 <PCD_EP_ISR_Handler+0x520>)
 800358e:	4013      	ands	r3, r2
 8003590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	461a      	mov	r2, r3
 8003598:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80035a6:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80035a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035aa:	78db      	ldrb	r3, [r3, #3]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	f040 80b8 	bne.w	8003722 <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 80035b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80035b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ba:	7b1b      	ldrb	r3, [r3, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80a9 	beq.w	8003714 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035c2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80035c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d055      	beq.n	8003678 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ce:	785b      	ldrb	r3, [r3, #1]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d124      	bne.n	800361e <PCD_EP_ISR_Handler+0x4ca>
 80035d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035f2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003602:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003612:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003616:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e07a      	b.n	8003714 <PCD_EP_ISR_Handler+0x5c0>
 800361e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d176      	bne.n	8003714 <PCD_EP_ISR_Handler+0x5c0>
 8003626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003630:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003640:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003644:	b292      	uxth	r2, r2
 8003646:	601a      	str	r2, [r3, #0]
 8003648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003652:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003660:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003664:	6812      	ldr	r2, [r2, #0]
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e054      	b.n	8003714 <PCD_EP_ISR_Handler+0x5c0>
 800366a:	bf00      	nop
 800366c:	07ff0f8f 	.word	0x07ff0f8f
 8003670:	07ff8f8f 	.word	0x07ff8f8f
 8003674:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800367a:	785b      	ldrb	r3, [r3, #1]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d124      	bne.n	80036ca <PCD_EP_ISR_Handler+0x576>
 8003680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800368a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800369a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800369e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036c2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	e024      	b.n	8003714 <PCD_EP_ISR_Handler+0x5c0>
 80036ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036cc:	785b      	ldrb	r3, [r3, #1]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d120      	bne.n	8003714 <PCD_EP_ISR_Handler+0x5c0>
 80036d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036f0:	b292      	uxth	r2, r2
 80036f2:	605a      	str	r2, [r3, #4]
 80036f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80036fe:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800370c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003710:	6852      	ldr	r2, [r2, #4]
 8003712:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f00a fd51 	bl	800e1c2 <HAL_PCD_DataInStageCallback>
 8003720:	e044      	b.n	80037ac <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003722:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003728:	2b00      	cmp	r3, #0
 800372a:	d139      	bne.n	80037a0 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800372c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003736:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	b29b      	uxth	r3, r3
 8003740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003744:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8003746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800374c:	429a      	cmp	r2, r3
 800374e:	d906      	bls.n	800375e <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8003750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003752:	699a      	ldr	r2, [r3, #24]
 8003754:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003756:	1ad2      	subs	r2, r2, r3
 8003758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375a:	619a      	str	r2, [r3, #24]
 800375c:	e002      	b.n	8003764 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 800375e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003760:	2200      	movs	r2, #0
 8003762:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800376c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4619      	mov	r1, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f00a fd25 	bl	800e1c2 <HAL_PCD_DataInStageCallback>
 8003778:	e018      	b.n	80037ac <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800377a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003780:	441a      	add	r2, r3
 8003782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003784:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003788:	69da      	ldr	r2, [r3, #28]
 800378a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800378c:	441a      	add	r2, r3
 800378e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003790:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003798:	4618      	mov	r0, r3
 800379a:	f008 fcd3 	bl	800c144 <USB_EPStartXfer>
 800379e:	e005      	b.n	80037ac <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80037a0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80037a2:	461a      	mov	r2, r3
 80037a4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8e8 	bl	800397c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f47f acd1 	bne.w	800315e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3738      	adds	r7, #56	@ 0x38
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop

080037c8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	@ 0x28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	4613      	mov	r3, r2
 80037d4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d062      	beq.n	80038a6 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	4619      	mov	r1, r3
 80037ea:	4610      	mov	r0, r2
 80037ec:	f7ff f849 	bl	8002882 <PCD_GET_EP_DBUF0_CNT>
 80037f0:	4603      	mov	r3, r0
 80037f2:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	8bfb      	ldrh	r3, [r7, #30]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d306      	bcc.n	800380c <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	8bfb      	ldrh	r3, [r7, #30]
 8003804:	1ad2      	subs	r2, r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	619a      	str	r2, [r3, #24]
 800380a:	e002      	b.n	8003812 <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2200      	movs	r2, #0
 8003810:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11b      	bne.n	8003852 <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	4b52      	ldr	r3, [pc, #328]	@ (8003974 <HAL_PCD_EP_DB_Receive+0x1ac>)
 800382c:	4013      	ands	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003836:	61bb      	str	r3, [r7, #24]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	441a      	add	r2, r3
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800384c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003850:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003858:	2b00      	cmp	r3, #0
 800385a:	d017      	beq.n	800388c <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	461a      	mov	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4413      	add	r3, r2
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b42      	ldr	r3, [pc, #264]	@ (8003978 <HAL_PCD_EP_DB_Receive+0x1b0>)
 800386e:	4013      	ands	r3, r2
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	441a      	add	r2, r3
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003886:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800388a:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 800388c:	8bfb      	ldrh	r3, [r7, #30]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d06b      	beq.n	800396a <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	6959      	ldr	r1, [r3, #20]
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	891a      	ldrh	r2, [r3, #8]
 800389e:	8bfb      	ldrh	r3, [r7, #30]
 80038a0:	f009 fe38 	bl	800d514 <USB_ReadPMA>
 80038a4:	e061      	b.n	800396a <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f7ff f807 	bl	80028c4 <PCD_GET_EP_DBUF1_CNT>
 80038b6:	4603      	mov	r3, r0
 80038b8:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	8bfb      	ldrh	r3, [r7, #30]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d306      	bcc.n	80038d2 <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	699a      	ldr	r2, [r3, #24]
 80038c8:	8bfb      	ldrh	r3, [r7, #30]
 80038ca:	1ad2      	subs	r2, r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	619a      	str	r2, [r3, #24]
 80038d0:	e002      	b.n	80038d8 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2200      	movs	r2, #0
 80038d6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d11b      	bne.n	8003918 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	461a      	mov	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	4413      	add	r3, r2
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b20      	ldr	r3, [pc, #128]	@ (8003974 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	441a      	add	r2, r3
 800390c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800390e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003916:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d117      	bne.n	8003952 <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b11      	ldr	r3, [pc, #68]	@ (8003978 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003934:	4013      	ands	r3, r2
 8003936:	623b      	str	r3, [r7, #32]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	441a      	add	r2, r3
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800394c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003950:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8003952:	8bfb      	ldrh	r3, [r7, #30]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	6959      	ldr	r1, [r3, #20]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	895a      	ldrh	r2, [r3, #10]
 8003964:	8bfb      	ldrh	r3, [r7, #30]
 8003966:	f009 fdd5 	bl	800d514 <USB_ReadPMA>
    }
  }

  return count;
 800396a:	8bfb      	ldrh	r3, [r7, #30]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3728      	adds	r7, #40	@ 0x28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	07ffbf8f 	.word	0x07ffbf8f
 8003978:	07ff8f8f 	.word	0x07ff8f8f

0800397c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08e      	sub	sp, #56	@ 0x38
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	4613      	mov	r3, r2
 8003988:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800398a:	88fb      	ldrh	r3, [r7, #6]
 800398c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 81d5 	beq.w	8003d40 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	4619      	mov	r1, r3
 80039a0:	4610      	mov	r0, r2
 80039a2:	f7fe ff6e 	bl	8002882 <PCD_GET_EP_DBUF0_CNT>
 80039a6:	4603      	mov	r3, r0
 80039a8:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	8bfb      	ldrh	r3, [r7, #30]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d906      	bls.n	80039c2 <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	8bfb      	ldrh	r3, [r7, #30]
 80039ba:	1ad2      	subs	r2, r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	619a      	str	r2, [r3, #24]
 80039c0:	e002      	b.n	80039c8 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 80c1 	bne.w	8003b54 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	785b      	ldrb	r3, [r3, #1]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d124      	bne.n	8003a24 <HAL_PCD_EP_DB_Transmit+0xa8>
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039f8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80039fc:	601a      	str	r2, [r3, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a18:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a1c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	e024      	b.n	8003a6e <HAL_PCD_EP_DB_Transmit+0xf2>
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	785b      	ldrb	r3, [r3, #1]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d120      	bne.n	8003a6e <HAL_PCD_EP_DB_Transmit+0xf2>
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a4a:	b292      	uxth	r2, r2
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003a58:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	781b      	ldrb	r3, [r3, #0]
 8003a60:	00db      	lsls	r3, r3, #3
 8003a62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	785b      	ldrb	r3, [r3, #1]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d124      	bne.n	8003ac0 <HAL_PCD_EP_DB_Transmit+0x144>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003a90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003a94:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003aa4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ab4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ab8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	e024      	b.n	8003b0a <HAL_PCD_EP_DB_Transmit+0x18e>
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	785b      	ldrb	r3, [r3, #1]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d120      	bne.n	8003b0a <HAL_PCD_EP_DB_Transmit+0x18e>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ad2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	00db      	lsls	r3, r3, #3
 8003ade:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ae2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ae6:	b292      	uxth	r2, r2
 8003ae8:	605a      	str	r2, [r3, #4]
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	00db      	lsls	r3, r3, #3
 8003af0:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003af4:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b02:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b06:	6852      	ldr	r2, [r2, #4]
 8003b08:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	4619      	mov	r1, r3
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f00a fb56 	bl	800e1c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	f000 82e5 	beq.w	80040ec <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b8e      	ldr	r3, [pc, #568]	@ (8003d6c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	441a      	add	r2, r3
 8003b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b50:	6013      	str	r3, [r2, #0]
 8003b52:	e2cb      	b.n	80040ec <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d017      	beq.n	8003b8e <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4413      	add	r3, r2
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4b7f      	ldr	r3, [pc, #508]	@ (8003d6c <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003b70:	4013      	ands	r3, r2
 8003b72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	441a      	add	r2, r3
 8003b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b8c:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	f040 82a9 	bne.w	80040ec <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	695a      	ldr	r2, [r3, #20]
 8003b9e:	8bfb      	ldrh	r3, [r7, #30]
 8003ba0:	441a      	add	r2, r3
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	8bfb      	ldrh	r3, [r7, #30]
 8003bac:	441a      	add	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6a1a      	ldr	r2, [r3, #32]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d309      	bcc.n	8003bd2 <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	1ad2      	subs	r2, r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	621a      	str	r2, [r3, #32]
 8003bd0:	e014      	b.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8003bda:	8bfb      	ldrh	r3, [r7, #30]
 8003bdc:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003be6:	e009      	b.n	8003bfc <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	785b      	ldrb	r3, [r3, #1]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d16a      	bne.n	8003cda <HAL_PCD_EP_DB_Transmit+0x35e>
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	00db      	lsls	r3, r3, #3
 8003c0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c22:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d112      	bne.n	8003c54 <HAL_PCD_EP_DB_Transmit+0x2d8>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	781b      	ldrb	r3, [r3, #0]
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c4c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e06a      	b.n	8003d2a <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c58:	d81e      	bhi.n	8003c98 <HAL_PCD_EP_DB_Transmit+0x31c>
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d002      	beq.n	8003c70 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8003c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c7e:	6819      	ldr	r1, [r3, #0]
 8003c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c82:	069a      	lsls	r2, r3, #26
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003c92:	430a      	orrs	r2, r1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e048      	b.n	8003d2a <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca0:	f003 031f 	and.w	r3, r3, #31
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d102      	bne.n	8003cae <HAL_PCD_EP_DB_Transmit+0x332>
 8003ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003caa:	3b01      	subs	r3, #1
 8003cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cc0:	069b      	lsls	r3, r3, #26
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cd2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	e027      	b.n	8003d2a <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	785b      	ldrb	r3, [r3, #1]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d123      	bne.n	8003d2a <HAL_PCD_EP_DB_Transmit+0x3ae>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	00db      	lsls	r3, r3, #3
 8003cf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003cfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d00:	b292      	uxth	r2, r2
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d12:	6819      	ldr	r1, [r3, #0]
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	041a      	lsls	r2, r3, #16
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d26:	430a      	orrs	r2, r1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	6959      	ldr	r1, [r3, #20]
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	891a      	ldrh	r2, [r3, #8]
 8003d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	f009 fb8a 	bl	800d452 <USB_WritePMA>
 8003d3e:	e1d5      	b.n	80040ec <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	4610      	mov	r0, r2
 8003d4c:	f7fe fdba 	bl	80028c4 <PCD_GET_EP_DBUF1_CNT>
 8003d50:	4603      	mov	r3, r0
 8003d52:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	699a      	ldr	r2, [r3, #24]
 8003d58:	8bfb      	ldrh	r3, [r7, #30]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d308      	bcc.n	8003d70 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	8bfb      	ldrh	r3, [r7, #30]
 8003d64:	1ad2      	subs	r2, r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	619a      	str	r2, [r3, #24]
 8003d6a:	e004      	b.n	8003d76 <HAL_PCD_EP_DB_Transmit+0x3fa>
 8003d6c:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	2200      	movs	r2, #0
 8003d74:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	699b      	ldr	r3, [r3, #24]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f040 80c1 	bne.w	8003f02 <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	785b      	ldrb	r3, [r3, #1]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d124      	bne.n	8003dd2 <HAL_PCD_EP_DB_Transmit+0x456>
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003da2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003da6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003db6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003dc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003dca:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e024      	b.n	8003e1c <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	785b      	ldrb	r3, [r3, #1]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d120      	bne.n	8003e1c <HAL_PCD_EP_DB_Transmit+0x4a0>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003de4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003df4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003df8:	b292      	uxth	r2, r2
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003e06:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	785b      	ldrb	r3, [r3, #1]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d124      	bne.n	8003e6e <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e42:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e66:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	e024      	b.n	8003eb8 <HAL_PCD_EP_DB_Transmit+0x53c>
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	785b      	ldrb	r3, [r3, #1]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d120      	bne.n	8003eb8 <HAL_PCD_EP_DB_Transmit+0x53c>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003e90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003e94:	b292      	uxth	r2, r2
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003ea2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003eb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003eb4:	6852      	ldr	r2, [r2, #4]
 8003eb6:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f00a f97f 	bl	800e1c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f040 810e 	bne.w	80040ec <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	4b95      	ldr	r3, [pc, #596]	@ (8004138 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	623b      	str	r3, [r7, #32]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	441a      	add	r2, r3
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003efe:	6013      	str	r3, [r2, #0]
 8003f00:	e0f4      	b.n	80040ec <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d117      	bne.n	8003f3c <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	4b86      	ldr	r3, [pc, #536]	@ (8004138 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003f1e:	4013      	ands	r3, r2
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	009b      	lsls	r3, r3, #2
 8003f2e:	441a      	add	r2, r3
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f3a:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	f040 80d2 	bne.w	80040ec <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	8bfb      	ldrh	r3, [r7, #30]
 8003f4e:	441a      	add	r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	8bfb      	ldrh	r3, [r7, #30]
 8003f5a:	441a      	add	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	6a1a      	ldr	r2, [r3, #32]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d309      	bcc.n	8003f80 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6a1a      	ldr	r2, [r3, #32]
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	1ad2      	subs	r2, r2, r3
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	621a      	str	r2, [r3, #32]
 8003f7e:	e014      	b.n	8003faa <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d106      	bne.n	8003f96 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8003f88:	8bfb      	ldrh	r3, [r7, #30]
 8003f8a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003f94:	e009      	b.n	8003faa <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	785b      	ldrb	r3, [r3, #1]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d16a      	bne.n	8004088 <HAL_PCD_EP_DB_Transmit+0x70c>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fcc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003fd0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003fd4:	605a      	str	r2, [r3, #4]
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d112      	bne.n	8004002 <HAL_PCD_EP_DB_Transmit+0x686>
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003fe6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ff6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ffa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	e06a      	b.n	80040d8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	2b3e      	cmp	r3, #62	@ 0x3e
 8004006:	d81e      	bhi.n	8004046 <HAL_PCD_EP_DB_Transmit+0x6ca>
 8004008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	f003 0301 	and.w	r3, r3, #1
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_PCD_EP_DB_Transmit+0x6a2>
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	3301      	adds	r3, #1
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004028:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800402c:	6859      	ldr	r1, [r3, #4]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	069a      	lsls	r2, r3, #26
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	781b      	ldrb	r3, [r3, #0]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800403c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]
 8004044:	e048      	b.n	80040d8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8004046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	61bb      	str	r3, [r7, #24]
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	f003 031f 	and.w	r3, r3, #31
 8004052:	2b00      	cmp	r3, #0
 8004054:	d102      	bne.n	800405c <HAL_PCD_EP_DB_Transmit+0x6e0>
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	3b01      	subs	r3, #1
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004066:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800406a:	685a      	ldr	r2, [r3, #4]
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	069b      	lsls	r3, r3, #26
 8004070:	431a      	orrs	r2, r3
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800407c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004080:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	e027      	b.n	80040d8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	785b      	ldrb	r3, [r3, #1]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d123      	bne.n	80040d8 <HAL_PCD_EP_DB_Transmit+0x75c>
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800409a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040ae:	b292      	uxth	r2, r2
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	781b      	ldrb	r3, [r3, #0]
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040c0:	6859      	ldr	r1, [r3, #4]
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	041a      	lsls	r2, r3, #16
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	6959      	ldr	r1, [r3, #20]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	895a      	ldrh	r2, [r3, #10]
 80040e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	f009 f9b3 	bl	800d452 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	4b0f      	ldr	r3, [pc, #60]	@ (800413c <HAL_PCD_EP_DB_Transmit+0x7c0>)
 80040fe:	4013      	ands	r3, r2
 8004100:	633b      	str	r3, [r7, #48]	@ 0x30
 8004102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004104:	f083 0310 	eor.w	r3, r3, #16
 8004108:	633b      	str	r3, [r7, #48]	@ 0x30
 800410a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410c:	f083 0320 	eor.w	r3, r3, #32
 8004110:	633b      	str	r3, [r7, #48]	@ 0x30
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	461a      	mov	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	441a      	add	r2, r3
 8004120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004122:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004126:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800412a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3738      	adds	r7, #56	@ 0x38
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	07ff8f8f 	.word	0x07ff8f8f
 800413c:	07ff8fbf 	.word	0x07ff8fbf

08004140 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	460b      	mov	r3, r1
 800414c:	817b      	strh	r3, [r7, #10]
 800414e:	4613      	mov	r3, r2
 8004150:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004152:	897b      	ldrh	r3, [r7, #10]
 8004154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004158:	b29b      	uxth	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00c      	beq.n	8004178 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800415e:	897b      	ldrh	r3, [r7, #10]
 8004160:	f003 0207 	and.w	r2, r3, #7
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	3310      	adds	r3, #16
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4413      	add	r3, r2
 8004172:	3304      	adds	r3, #4
 8004174:	617b      	str	r3, [r7, #20]
 8004176:	e00a      	b.n	800418e <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004178:	897a      	ldrh	r2, [r7, #10]
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004186:	68fa      	ldr	r2, [r7, #12]
 8004188:	4413      	add	r3, r2
 800418a:	3304      	adds	r3, #4
 800418c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800418e:	893b      	ldrh	r3, [r7, #8]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d107      	bne.n	80041a4 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2200      	movs	r2, #0
 8004198:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	b29a      	uxth	r2, r3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	80da      	strh	r2, [r3, #6]
 80041a2:	e00b      	b.n	80041bc <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2201      	movs	r2, #1
 80041a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ec:	f043 0201 	orr.w	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f8:	f043 0202 	orr.w	r2, r3, #2
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 800422c:	4b05      	ldr	r3, [pc, #20]	@ (8004244 <HAL_PWREx_EnableVddUSB+0x1c>)
 800422e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004230:	4a04      	ldr	r2, [pc, #16]	@ (8004244 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004232:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004236:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004238:	bf00      	nop
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	44020800 	.word	0x44020800

08004248 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d102      	bne.n	800425c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f000 bc28 	b.w	8004aac <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800425c:	4b94      	ldr	r3, [pc, #592]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f003 0318 	and.w	r3, r3, #24
 8004264:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8004266:	4b92      	ldr	r3, [pc, #584]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0310 	and.w	r3, r3, #16
 8004278:	2b00      	cmp	r3, #0
 800427a:	d05b      	beq.n	8004334 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b08      	cmp	r3, #8
 8004280:	d005      	beq.n	800428e <HAL_RCC_OscConfig+0x46>
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	2b18      	cmp	r3, #24
 8004286:	d114      	bne.n	80042b2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b02      	cmp	r3, #2
 800428c:	d111      	bne.n	80042b2 <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f000 bc08 	b.w	8004aac <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 800429c:	4b84      	ldr	r3, [pc, #528]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	041b      	lsls	r3, r3, #16
 80042aa:	4981      	ldr	r1, [pc, #516]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80042b0:	e040      	b.n	8004334 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d023      	beq.n	8004302 <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80042ba:	4b7d      	ldr	r3, [pc, #500]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a7c      	ldr	r2, [pc, #496]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80042c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c6:	f7fd fd85 	bl	8001dd4 <HAL_GetTick>
 80042ca:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80042cc:	e008      	b.n	80042e0 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80042ce:	f7fd fd81 	bl	8001dd4 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e3e5      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80042e0:	4b73      	ldr	r3, [pc, #460]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0f0      	beq.n	80042ce <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80042ec:	4b70      	ldr	r3, [pc, #448]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	041b      	lsls	r3, r3, #16
 80042fa:	496d      	ldr	r1, [pc, #436]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80042fc:	4313      	orrs	r3, r2
 80042fe:	618b      	str	r3, [r1, #24]
 8004300:	e018      	b.n	8004334 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004302:	4b6b      	ldr	r3, [pc, #428]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a6a      	ldr	r2, [pc, #424]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004308:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800430c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430e:	f7fd fd61 	bl	8001dd4 <HAL_GetTick>
 8004312:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004316:	f7fd fd5d 	bl	8001dd4 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e3c1      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004328:	4b61      	ldr	r3, [pc, #388]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f0      	bne.n	8004316 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0301 	and.w	r3, r3, #1
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 80a0 	beq.w	8004482 <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	2b10      	cmp	r3, #16
 8004346:	d005      	beq.n	8004354 <HAL_RCC_OscConfig+0x10c>
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	2b18      	cmp	r3, #24
 800434c:	d109      	bne.n	8004362 <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b03      	cmp	r3, #3
 8004352:	d106      	bne.n	8004362 <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	f040 8092 	bne.w	8004482 <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e3a4      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800436a:	d106      	bne.n	800437a <HAL_RCC_OscConfig+0x132>
 800436c:	4b50      	ldr	r3, [pc, #320]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a4f      	ldr	r2, [pc, #316]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004372:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	e058      	b.n	800442c <HAL_RCC_OscConfig+0x1e4>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d112      	bne.n	80043a8 <HAL_RCC_OscConfig+0x160>
 8004382:	4b4b      	ldr	r3, [pc, #300]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a4a      	ldr	r2, [pc, #296]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800438c:	6013      	str	r3, [r2, #0]
 800438e:	4b48      	ldr	r3, [pc, #288]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a47      	ldr	r2, [pc, #284]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004394:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	4b45      	ldr	r3, [pc, #276]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a44      	ldr	r2, [pc, #272]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80043a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e041      	b.n	800442c <HAL_RCC_OscConfig+0x1e4>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043b0:	d112      	bne.n	80043d8 <HAL_RCC_OscConfig+0x190>
 80043b2:	4b3f      	ldr	r3, [pc, #252]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a3e      	ldr	r2, [pc, #248]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80043b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	4b3c      	ldr	r3, [pc, #240]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a3b      	ldr	r2, [pc, #236]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80043c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	4b39      	ldr	r3, [pc, #228]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a38      	ldr	r2, [pc, #224]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e029      	b.n	800442c <HAL_RCC_OscConfig+0x1e4>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80043e0:	d112      	bne.n	8004408 <HAL_RCC_OscConfig+0x1c0>
 80043e2:	4b33      	ldr	r3, [pc, #204]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a32      	ldr	r2, [pc, #200]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80043e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	4b30      	ldr	r3, [pc, #192]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a2f      	ldr	r2, [pc, #188]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80043f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b2d      	ldr	r3, [pc, #180]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2c      	ldr	r2, [pc, #176]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e011      	b.n	800442c <HAL_RCC_OscConfig+0x1e4>
 8004408:	4b29      	ldr	r3, [pc, #164]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a28      	ldr	r2, [pc, #160]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 800440e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b26      	ldr	r3, [pc, #152]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a25      	ldr	r2, [pc, #148]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 800441a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800441e:	6013      	str	r3, [r2, #0]
 8004420:	4b23      	ldr	r3, [pc, #140]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a22      	ldr	r2, [pc, #136]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004426:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800442a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d013      	beq.n	800445c <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004434:	f7fd fcce 	bl	8001dd4 <HAL_GetTick>
 8004438:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800443c:	f7fd fcca 	bl	8001dd4 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b64      	cmp	r3, #100	@ 0x64
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e32e      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800444e:	4b18      	ldr	r3, [pc, #96]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x1f4>
 800445a:	e012      	b.n	8004482 <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445c:	f7fd fcba 	bl	8001dd4 <HAL_GetTick>
 8004460:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004464:	f7fd fcb6 	bl	8001dd4 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b64      	cmp	r3, #100	@ 0x64
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e31a      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004476:	4b0e      	ldr	r3, [pc, #56]	@ (80044b0 <HAL_RCC_OscConfig+0x268>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 809a 	beq.w	80045c4 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <HAL_RCC_OscConfig+0x25a>
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	2b18      	cmp	r3, #24
 800449a:	d149      	bne.n	8004530 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d146      	bne.n	8004530 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d104      	bne.n	80044b4 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e2fe      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
 80044ae:	bf00      	nop
 80044b0:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d11c      	bne.n	80044f4 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 80044ba:	4b9a      	ldr	r3, [pc, #616]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0218 	and.w	r2, r3, #24
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d014      	beq.n	80044f4 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80044ca:	4b96      	ldr	r3, [pc, #600]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 0218 	bic.w	r2, r3, #24
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	4993      	ldr	r1, [pc, #588]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 80044dc:	f000 fdd0 	bl	8005080 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80044e0:	4b91      	ldr	r3, [pc, #580]	@ (8004728 <HAL_RCC_OscConfig+0x4e0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fd fbeb 	bl	8001cc0 <HAL_InitTick>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e2db      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f4:	f7fd fc6e 	bl	8001dd4 <HAL_GetTick>
 80044f8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80044fc:	f7fd fc6a 	bl	8001dd4 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e2ce      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800450e:	4b85      	ldr	r3, [pc, #532]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d0f0      	beq.n	80044fc <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800451a:	4b82      	ldr	r3, [pc, #520]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	041b      	lsls	r3, r3, #16
 8004528:	497e      	ldr	r1, [pc, #504]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 800452a:	4313      	orrs	r3, r2
 800452c:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800452e:	e049      	b.n	80045c4 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d02c      	beq.n	8004592 <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004538:	4b7a      	ldr	r3, [pc, #488]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f023 0218 	bic.w	r2, r3, #24
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	4977      	ldr	r1, [pc, #476]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 800454a:	4b76      	ldr	r3, [pc, #472]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a75      	ldr	r2, [pc, #468]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fd fc3d 	bl	8001dd4 <HAL_GetTick>
 800455a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800455e:	f7fd fc39 	bl	8001dd4 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e29d      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004570:	4b6c      	ldr	r3, [pc, #432]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800457c:	4b69      	ldr	r3, [pc, #420]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	4966      	ldr	r1, [pc, #408]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 800458c:	4313      	orrs	r3, r2
 800458e:	610b      	str	r3, [r1, #16]
 8004590:	e018      	b.n	80045c4 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004592:	4b64      	ldr	r3, [pc, #400]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a63      	ldr	r2, [pc, #396]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fd fc19 	bl	8001dd4 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80045a6:	f7fd fc15 	bl	8001dd4 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e279      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d03c      	beq.n	800464a <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01c      	beq.n	8004612 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d8:	4b52      	ldr	r3, [pc, #328]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80045da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045de:	4a51      	ldr	r2, [pc, #324]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80045e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fd fbf4 	bl	8001dd4 <HAL_GetTick>
 80045ec:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80045f0:	f7fd fbf0 	bl	8001dd4 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e254      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004602:	4b48      	ldr	r3, [pc, #288]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 8004604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004608:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ef      	beq.n	80045f0 <HAL_RCC_OscConfig+0x3a8>
 8004610:	e01b      	b.n	800464a <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004612:	4b44      	ldr	r3, [pc, #272]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 8004614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004618:	4a42      	ldr	r2, [pc, #264]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 800461a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800461e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004622:	f7fd fbd7 	bl	8001dd4 <HAL_GetTick>
 8004626:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800462a:	f7fd fbd3 	bl	8001dd4 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e237      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800463c:	4b39      	ldr	r3, [pc, #228]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 800463e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004642:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1ef      	bne.n	800462a <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 80d2 	beq.w	80047fc <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004658:	4b34      	ldr	r3, [pc, #208]	@ (800472c <HAL_RCC_OscConfig+0x4e4>)
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	f003 0301 	and.w	r3, r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	d118      	bne.n	8004696 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004664:	4b31      	ldr	r3, [pc, #196]	@ (800472c <HAL_RCC_OscConfig+0x4e4>)
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	4a30      	ldr	r2, [pc, #192]	@ (800472c <HAL_RCC_OscConfig+0x4e4>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004670:	f7fd fbb0 	bl	8001dd4 <HAL_GetTick>
 8004674:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004678:	f7fd fbac 	bl	8001dd4 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e210      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800468a:	4b28      	ldr	r3, [pc, #160]	@ (800472c <HAL_RCC_OscConfig+0x4e4>)
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	f003 0301 	and.w	r3, r3, #1
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d108      	bne.n	80046b0 <HAL_RCC_OscConfig+0x468>
 800469e:	4b21      	ldr	r3, [pc, #132]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80046a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80046a6:	f043 0301 	orr.w	r3, r3, #1
 80046aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046ae:	e074      	b.n	800479a <HAL_RCC_OscConfig+0x552>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d118      	bne.n	80046ea <HAL_RCC_OscConfig+0x4a2>
 80046b8:	4b1a      	ldr	r3, [pc, #104]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80046ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046be:	4a19      	ldr	r2, [pc, #100]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046c8:	4b16      	ldr	r3, [pc, #88]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80046ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046ce:	4a15      	ldr	r2, [pc, #84]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80046d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046d8:	4b12      	ldr	r3, [pc, #72]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80046da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046de:	4a11      	ldr	r2, [pc, #68]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80046e0:	f023 0304 	bic.w	r3, r3, #4
 80046e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046e8:	e057      	b.n	800479a <HAL_RCC_OscConfig+0x552>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	d11e      	bne.n	8004730 <HAL_RCC_OscConfig+0x4e8>
 80046f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80046f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046f8:	4a0a      	ldr	r2, [pc, #40]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 80046fa:	f043 0304 	orr.w	r3, r3, #4
 80046fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004702:	4b08      	ldr	r3, [pc, #32]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 8004704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004708:	4a06      	ldr	r2, [pc, #24]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 800470a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800470e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004712:	4b04      	ldr	r3, [pc, #16]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 8004714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004718:	4a02      	ldr	r2, [pc, #8]	@ (8004724 <HAL_RCC_OscConfig+0x4dc>)
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004722:	e03a      	b.n	800479a <HAL_RCC_OscConfig+0x552>
 8004724:	44020c00 	.word	0x44020c00
 8004728:	20000024 	.word	0x20000024
 800472c:	44020800 	.word	0x44020800
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b85      	cmp	r3, #133	@ 0x85
 8004736:	d118      	bne.n	800476a <HAL_RCC_OscConfig+0x522>
 8004738:	4ba2      	ldr	r3, [pc, #648]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800473a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800473e:	4aa1      	ldr	r2, [pc, #644]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004740:	f043 0304 	orr.w	r3, r3, #4
 8004744:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004748:	4b9e      	ldr	r3, [pc, #632]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800474a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800474e:	4a9d      	ldr	r2, [pc, #628]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004754:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004758:	4b9a      	ldr	r3, [pc, #616]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800475a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800475e:	4a99      	ldr	r2, [pc, #612]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004768:	e017      	b.n	800479a <HAL_RCC_OscConfig+0x552>
 800476a:	4b96      	ldr	r3, [pc, #600]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800476c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004770:	4a94      	ldr	r2, [pc, #592]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004772:	f023 0301 	bic.w	r3, r3, #1
 8004776:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800477a:	4b92      	ldr	r3, [pc, #584]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800477c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004780:	4a90      	ldr	r2, [pc, #576]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004782:	f023 0304 	bic.w	r3, r3, #4
 8004786:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800478a:	4b8e      	ldr	r3, [pc, #568]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800478c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004790:	4a8c      	ldr	r2, [pc, #560]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004796:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a2:	f7fd fb17 	bl	8001dd4 <HAL_GetTick>
 80047a6:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a8:	e00a      	b.n	80047c0 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047aa:	f7fd fb13 	bl	8001dd4 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e175      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c0:	4b80      	ldr	r3, [pc, #512]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 80047c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0ed      	beq.n	80047aa <HAL_RCC_OscConfig+0x562>
 80047ce:	e015      	b.n	80047fc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d0:	f7fd fb00 	bl	8001dd4 <HAL_GetTick>
 80047d4:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d6:	e00a      	b.n	80047ee <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d8:	f7fd fafc 	bl	8001dd4 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e15e      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047ee:	4b75      	ldr	r3, [pc, #468]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 80047f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ed      	bne.n	80047d8 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b00      	cmp	r3, #0
 8004806:	d036      	beq.n	8004876 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480c:	2b00      	cmp	r3, #0
 800480e:	d019      	beq.n	8004844 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004810:	4b6c      	ldr	r3, [pc, #432]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a6b      	ldr	r2, [pc, #428]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004816:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800481a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fd fada 	bl	8001dd4 <HAL_GetTick>
 8004820:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004824:	f7fd fad6 	bl	8001dd4 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e13a      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004836:	4b63      	ldr	r3, [pc, #396]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f0      	beq.n	8004824 <HAL_RCC_OscConfig+0x5dc>
 8004842:	e018      	b.n	8004876 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004844:	4b5f      	ldr	r3, [pc, #380]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a5e      	ldr	r2, [pc, #376]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800484a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800484e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004850:	f7fd fac0 	bl	8001dd4 <HAL_GetTick>
 8004854:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004856:	e008      	b.n	800486a <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004858:	f7fd fabc 	bl	8001dd4 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b02      	cmp	r3, #2
 8004864:	d901      	bls.n	800486a <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e120      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800486a:	4b56      	ldr	r3, [pc, #344]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1f0      	bne.n	8004858 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 8115 	beq.w	8004aaa <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	2b18      	cmp	r3, #24
 8004884:	f000 80af 	beq.w	80049e6 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488c:	2b02      	cmp	r3, #2
 800488e:	f040 8086 	bne.w	800499e <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8004892:	4b4c      	ldr	r3, [pc, #304]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a4b      	ldr	r2, [pc, #300]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004898:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800489c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489e:	f7fd fa99 	bl	8001dd4 <HAL_GetTick>
 80048a2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80048a6:	f7fd fa95 	bl	8001dd4 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e0f9      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80048b8:	4b42      	ldr	r3, [pc, #264]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f0      	bne.n	80048a6 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80048c4:	4b3f      	ldr	r3, [pc, #252]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 80048c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80048cc:	f023 0303 	bic.w	r3, r3, #3
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048d8:	0212      	lsls	r2, r2, #8
 80048da:	430a      	orrs	r2, r1
 80048dc:	4939      	ldr	r1, [pc, #228]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	628b      	str	r3, [r1, #40]	@ 0x28
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e6:	3b01      	subs	r3, #1
 80048e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f0:	3b01      	subs	r3, #1
 80048f2:	025b      	lsls	r3, r3, #9
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fc:	3b01      	subs	r3, #1
 80048fe:	041b      	lsls	r3, r3, #16
 8004900:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490a:	3b01      	subs	r3, #1
 800490c:	061b      	lsls	r3, r3, #24
 800490e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004912:	492c      	ldr	r1, [pc, #176]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004914:	4313      	orrs	r3, r2
 8004916:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004918:	4b2a      	ldr	r3, [pc, #168]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800491a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800491c:	4a29      	ldr	r2, [pc, #164]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800491e:	f023 0310 	bic.w	r3, r3, #16
 8004922:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004928:	4a26      	ldr	r2, [pc, #152]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800492e:	4b25      	ldr	r3, [pc, #148]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004932:	4a24      	ldr	r2, [pc, #144]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004934:	f043 0310 	orr.w	r3, r3, #16
 8004938:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 800493a:	4b22      	ldr	r3, [pc, #136]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800493c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800493e:	f023 020c 	bic.w	r2, r3, #12
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004946:	491f      	ldr	r1, [pc, #124]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004948:	4313      	orrs	r3, r2
 800494a:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 800494c:	4b1d      	ldr	r3, [pc, #116]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800494e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004950:	f023 0220 	bic.w	r2, r3, #32
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004958:	491a      	ldr	r1, [pc, #104]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800495a:	4313      	orrs	r3, r2
 800495c:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800495e:	4b19      	ldr	r3, [pc, #100]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004962:	4a18      	ldr	r2, [pc, #96]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004968:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 800496a:	4b16      	ldr	r3, [pc, #88]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a15      	ldr	r2, [pc, #84]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004970:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004976:	f7fd fa2d 	bl	8001dd4 <HAL_GetTick>
 800497a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800497e:	f7fd fa29 	bl	8001dd4 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e08d      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004990:	4b0c      	ldr	r3, [pc, #48]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x736>
 800499c:	e085      	b.n	8004aaa <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800499e:	4b09      	ldr	r3, [pc, #36]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a08      	ldr	r2, [pc, #32]	@ (80049c4 <HAL_RCC_OscConfig+0x77c>)
 80049a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80049a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049aa:	f7fd fa13 	bl	8001dd4 <HAL_GetTick>
 80049ae:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80049b0:	e00a      	b.n	80049c8 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80049b2:	f7fd fa0f 	bl	8001dd4 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d903      	bls.n	80049c8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e073      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
 80049c4:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80049c8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ab4 <HAL_RCC_OscConfig+0x86c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1ee      	bne.n	80049b2 <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80049d4:	4b37      	ldr	r3, [pc, #220]	@ (8004ab4 <HAL_RCC_OscConfig+0x86c>)
 80049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d8:	4a36      	ldr	r2, [pc, #216]	@ (8004ab4 <HAL_RCC_OscConfig+0x86c>)
 80049da:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80049de:	f023 0303 	bic.w	r3, r3, #3
 80049e2:	6293      	str	r3, [r2, #40]	@ 0x28
 80049e4:	e061      	b.n	8004aaa <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80049e6:	4b33      	ldr	r3, [pc, #204]	@ (8004ab4 <HAL_RCC_OscConfig+0x86c>)
 80049e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ea:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80049ec:	4b31      	ldr	r3, [pc, #196]	@ (8004ab4 <HAL_RCC_OscConfig+0x86c>)
 80049ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049f0:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d031      	beq.n	8004a5e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	f003 0203 	and.w	r2, r3, #3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d12a      	bne.n	8004a5e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d122      	bne.n	8004a5e <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a22:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d11a      	bne.n	8004a5e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	0a5b      	lsrs	r3, r3, #9
 8004a2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a34:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d111      	bne.n	8004a5e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a46:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d108      	bne.n	8004a5e <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	0e1b      	lsrs	r3, r3, #24
 8004a50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a58:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d001      	beq.n	8004a62 <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e024      	b.n	8004aac <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004a62:	4b14      	ldr	r3, [pc, #80]	@ (8004ab4 <HAL_RCC_OscConfig+0x86c>)
 8004a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a66:	08db      	lsrs	r3, r3, #3
 8004a68:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d01a      	beq.n	8004aaa <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004a74:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab4 <HAL_RCC_OscConfig+0x86c>)
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	4a0e      	ldr	r2, [pc, #56]	@ (8004ab4 <HAL_RCC_OscConfig+0x86c>)
 8004a7a:	f023 0310 	bic.w	r3, r3, #16
 8004a7e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fd f9a8 	bl	8001dd4 <HAL_GetTick>
 8004a84:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004a86:	bf00      	nop
 8004a88:	f7fd f9a4 	bl	8001dd4 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d0f9      	beq.n	8004a88 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a98:	4a06      	ldr	r2, [pc, #24]	@ (8004ab4 <HAL_RCC_OscConfig+0x86c>)
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004a9e:	4b05      	ldr	r3, [pc, #20]	@ (8004ab4 <HAL_RCC_OscConfig+0x86c>)
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aa2:	4a04      	ldr	r2, [pc, #16]	@ (8004ab4 <HAL_RCC_OscConfig+0x86c>)
 8004aa4:	f043 0310 	orr.w	r3, r3, #16
 8004aa8:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3720      	adds	r7, #32
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	44020c00 	.word	0x44020c00

08004ab8 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e19e      	b.n	8004e0a <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004acc:	4b83      	ldr	r3, [pc, #524]	@ (8004cdc <HAL_RCC_ClockConfig+0x224>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d910      	bls.n	8004afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ada:	4b80      	ldr	r3, [pc, #512]	@ (8004cdc <HAL_RCC_ClockConfig+0x224>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f023 020f 	bic.w	r2, r3, #15
 8004ae2:	497e      	ldr	r1, [pc, #504]	@ (8004cdc <HAL_RCC_ClockConfig+0x224>)
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aea:	4b7c      	ldr	r3, [pc, #496]	@ (8004cdc <HAL_RCC_ClockConfig+0x224>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d001      	beq.n	8004afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e186      	b.n	8004e0a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d012      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	4b74      	ldr	r3, [pc, #464]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d909      	bls.n	8004b2e <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004b1a:	4b71      	ldr	r3, [pc, #452]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	496d      	ldr	r1, [pc, #436]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d012      	beq.n	8004b60 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691a      	ldr	r2, [r3, #16]
 8004b3e:	4b68      	ldr	r3, [pc, #416]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	091b      	lsrs	r3, r3, #4
 8004b44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d909      	bls.n	8004b60 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004b4c:	4b64      	ldr	r3, [pc, #400]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	4961      	ldr	r1, [pc, #388]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d010      	beq.n	8004b8e <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	4b5b      	ldr	r3, [pc, #364]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d908      	bls.n	8004b8e <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004b7c:	4b58      	ldr	r3, [pc, #352]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	4955      	ldr	r1, [pc, #340]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d010      	beq.n	8004bbc <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689a      	ldr	r2, [r3, #8]
 8004b9e:	4b50      	ldr	r3, [pc, #320]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f003 030f 	and.w	r3, r3, #15
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d908      	bls.n	8004bbc <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004baa:	4b4d      	ldr	r3, [pc, #308]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	f023 020f 	bic.w	r2, r3, #15
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	494a      	ldr	r1, [pc, #296]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 8093 	beq.w	8004cf0 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	2b03      	cmp	r3, #3
 8004bd0:	d107      	bne.n	8004be2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004bd2:	4b43      	ldr	r3, [pc, #268]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d121      	bne.n	8004c22 <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e113      	b.n	8004e0a <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d107      	bne.n	8004bfa <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bea:	4b3d      	ldr	r3, [pc, #244]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d115      	bne.n	8004c22 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e107      	b.n	8004e0a <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d107      	bne.n	8004c12 <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8004c02:	4b37      	ldr	r3, [pc, #220]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d109      	bne.n	8004c22 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e0fb      	b.n	8004e0a <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c12:	4b33      	ldr	r3, [pc, #204]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e0f3      	b.n	8004e0a <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004c22:	4b2f      	ldr	r3, [pc, #188]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	f023 0203 	bic.w	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	492c      	ldr	r1, [pc, #176]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c34:	f7fd f8ce 	bl	8001dd4 <HAL_GetTick>
 8004c38:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	2b03      	cmp	r3, #3
 8004c40:	d112      	bne.n	8004c68 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c42:	e00a      	b.n	8004c5a <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004c44:	f7fd f8c6 	bl	8001dd4 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e0d7      	b.n	8004e0a <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c5a:	4b21      	ldr	r3, [pc, #132]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	f003 0318 	and.w	r3, r3, #24
 8004c62:	2b18      	cmp	r3, #24
 8004c64:	d1ee      	bne.n	8004c44 <HAL_RCC_ClockConfig+0x18c>
 8004c66:	e043      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d112      	bne.n	8004c96 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c70:	e00a      	b.n	8004c88 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004c72:	f7fd f8af 	bl	8001dd4 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d901      	bls.n	8004c88 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e0c0      	b.n	8004e0a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c88:	4b15      	ldr	r3, [pc, #84]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f003 0318 	and.w	r3, r3, #24
 8004c90:	2b10      	cmp	r3, #16
 8004c92:	d1ee      	bne.n	8004c72 <HAL_RCC_ClockConfig+0x1ba>
 8004c94:	e02c      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d122      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004c9e:	e00a      	b.n	8004cb6 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004ca0:	f7fd f898 	bl	8001dd4 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e0a9      	b.n	8004e0a <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce0 <HAL_RCC_ClockConfig+0x228>)
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	f003 0318 	and.w	r3, r3, #24
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d1ee      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x1e8>
 8004cc2:	e015      	b.n	8004cf0 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc4:	f7fd f886 	bl	8001dd4 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d906      	bls.n	8004ce4 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e097      	b.n	8004e0a <HAL_RCC_ClockConfig+0x352>
 8004cda:	bf00      	nop
 8004cdc:	40022000 	.word	0x40022000
 8004ce0:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f003 0318 	and.w	r3, r3, #24
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e9      	bne.n	8004cc4 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d010      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689a      	ldr	r2, [r3, #8]
 8004d00:	4b44      	ldr	r3, [pc, #272]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d208      	bcs.n	8004d1e <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004d0c:	4b41      	ldr	r3, [pc, #260]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	f023 020f 	bic.w	r2, r3, #15
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	493e      	ldr	r1, [pc, #248]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8004e18 <HAL_RCC_ClockConfig+0x360>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	683a      	ldr	r2, [r7, #0]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d210      	bcs.n	8004d4e <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d2c:	4b3a      	ldr	r3, [pc, #232]	@ (8004e18 <HAL_RCC_ClockConfig+0x360>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f023 020f 	bic.w	r2, r3, #15
 8004d34:	4938      	ldr	r1, [pc, #224]	@ (8004e18 <HAL_RCC_ClockConfig+0x360>)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d3c:	4b36      	ldr	r3, [pc, #216]	@ (8004e18 <HAL_RCC_ClockConfig+0x360>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d001      	beq.n	8004d4e <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e05d      	b.n	8004e0a <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d010      	beq.n	8004d7c <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68da      	ldr	r2, [r3, #12]
 8004d5e:	4b2d      	ldr	r3, [pc, #180]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d208      	bcs.n	8004d7c <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004d6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	4927      	ldr	r1, [pc, #156]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0308 	and.w	r3, r3, #8
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d012      	beq.n	8004dae <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	4b21      	ldr	r3, [pc, #132]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d209      	bcs.n	8004dae <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	491a      	ldr	r1, [pc, #104]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d012      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	4b15      	ldr	r3, [pc, #84]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	0a1b      	lsrs	r3, r3, #8
 8004dc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d209      	bcs.n	8004de0 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004dcc:	4b11      	ldr	r3, [pc, #68]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	490e      	ldr	r1, [pc, #56]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004de0:	f000 f822 	bl	8004e28 <HAL_RCC_GetSysClockFreq>
 8004de4:	4602      	mov	r2, r0
 8004de6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e14 <HAL_RCC_ClockConfig+0x35c>)
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	490b      	ldr	r1, [pc, #44]	@ (8004e1c <HAL_RCC_ClockConfig+0x364>)
 8004df0:	5ccb      	ldrb	r3, [r1, r3]
 8004df2:	fa22 f303 	lsr.w	r3, r2, r3
 8004df6:	4a0a      	ldr	r2, [pc, #40]	@ (8004e20 <HAL_RCC_ClockConfig+0x368>)
 8004df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004e24 <HAL_RCC_ClockConfig+0x36c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fc ff5e 	bl	8001cc0 <HAL_InitTick>
 8004e04:	4603      	mov	r3, r0
 8004e06:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004e08:	7afb      	ldrb	r3, [r7, #11]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	44020c00 	.word	0x44020c00
 8004e18:	40022000 	.word	0x40022000
 8004e1c:	0801faa4 	.word	0x0801faa4
 8004e20:	20000004 	.word	0x20000004
 8004e24:	20000024 	.word	0x20000024

08004e28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b089      	sub	sp, #36	@ 0x24
 8004e2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004e2e:	4b8c      	ldr	r3, [pc, #560]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f003 0318 	and.w	r3, r3, #24
 8004e36:	2b08      	cmp	r3, #8
 8004e38:	d102      	bne.n	8004e40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004e3a:	4b8a      	ldr	r3, [pc, #552]	@ (8005064 <HAL_RCC_GetSysClockFreq+0x23c>)
 8004e3c:	61fb      	str	r3, [r7, #28]
 8004e3e:	e107      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e40:	4b87      	ldr	r3, [pc, #540]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f003 0318 	and.w	r3, r3, #24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d112      	bne.n	8004e72 <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004e4c:	4b84      	ldr	r3, [pc, #528]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0320 	and.w	r3, r3, #32
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d009      	beq.n	8004e6c <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004e58:	4b81      	ldr	r3, [pc, #516]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	08db      	lsrs	r3, r3, #3
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	4a81      	ldr	r2, [pc, #516]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x240>)
 8004e64:	fa22 f303 	lsr.w	r3, r2, r3
 8004e68:	61fb      	str	r3, [r7, #28]
 8004e6a:	e0f1      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004e6c:	4b7e      	ldr	r3, [pc, #504]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x240>)
 8004e6e:	61fb      	str	r3, [r7, #28]
 8004e70:	e0ee      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e72:	4b7b      	ldr	r3, [pc, #492]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f003 0318 	and.w	r3, r3, #24
 8004e7a:	2b10      	cmp	r3, #16
 8004e7c:	d102      	bne.n	8004e84 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004e7e:	4b7b      	ldr	r3, [pc, #492]	@ (800506c <HAL_RCC_GetSysClockFreq+0x244>)
 8004e80:	61fb      	str	r3, [r7, #28]
 8004e82:	e0e5      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e84:	4b76      	ldr	r3, [pc, #472]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f003 0318 	and.w	r3, r3, #24
 8004e8c:	2b18      	cmp	r3, #24
 8004e8e:	f040 80dd 	bne.w	800504c <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004e92:	4b73      	ldr	r3, [pc, #460]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	f003 0303 	and.w	r3, r3, #3
 8004e9a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004e9c:	4b70      	ldr	r3, [pc, #448]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea0:	0a1b      	lsrs	r3, r3, #8
 8004ea2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ea6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004ea8:	4b6d      	ldr	r3, [pc, #436]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eac:	091b      	lsrs	r3, r3, #4
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004eb4:	4b6a      	ldr	r3, [pc, #424]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004eb8:	08db      	lsrs	r3, r3, #3
 8004eba:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	fb02 f303 	mul.w	r3, r2, r3
 8004ec4:	ee07 3a90 	vmov	s15, r3
 8004ec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ecc:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 80b7 	beq.w	8005046 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d003      	beq.n	8004ee6 <HAL_RCC_GetSysClockFreq+0xbe>
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	d056      	beq.n	8004f92 <HAL_RCC_GetSysClockFreq+0x16a>
 8004ee4:	e077      	b.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004ee6:	4b5e      	ldr	r3, [pc, #376]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d02d      	beq.n	8004f4e <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	08db      	lsrs	r3, r3, #3
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	4a5a      	ldr	r2, [pc, #360]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x240>)
 8004efe:	fa22 f303 	lsr.w	r3, r2, r3
 8004f02:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	ee07 3a90 	vmov	s15, r3
 8004f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	ee07 3a90 	vmov	s15, r3
 8004f14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f1c:	4b50      	ldr	r3, [pc, #320]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f24:	ee07 3a90 	vmov	s15, r3
 8004f28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f30:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8005070 <HAL_RCC_GetSysClockFreq+0x248>
 8004f34:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f40:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f48:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004f4c:	e065      	b.n	800501a <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f58:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8005074 <HAL_RCC_GetSysClockFreq+0x24c>
 8004f5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f60:	4b3f      	ldr	r3, [pc, #252]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004f62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f68:	ee07 3a90 	vmov	s15, r3
 8004f6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f70:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f74:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005070 <HAL_RCC_GetSysClockFreq+0x248>
 8004f78:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004f80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f84:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f8c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004f90:	e043      	b.n	800501a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005078 <HAL_RCC_GetSysClockFreq+0x250>
 8004fa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fa4:	4b2e      	ldr	r3, [pc, #184]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fac:	ee07 3a90 	vmov	s15, r3
 8004fb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004fb8:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005070 <HAL_RCC_GetSysClockFreq+0x248>
 8004fbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004fc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fd0:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004fd4:	e021      	b.n	800501a <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	ee07 3a90 	vmov	s15, r3
 8004fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe0:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800507c <HAL_RCC_GetSysClockFreq+0x254>
 8004fe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 8004fea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff0:	ee07 3a90 	vmov	s15, r3
 8004ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ff8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ffc:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8005070 <HAL_RCC_GetSysClockFreq+0x248>
 8005000:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005004:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800500c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005014:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005018:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 800501a:	4b11      	ldr	r3, [pc, #68]	@ (8005060 <HAL_RCC_GetSysClockFreq+0x238>)
 800501c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800501e:	0a5b      	lsrs	r3, r3, #9
 8005020:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005024:	3301      	adds	r3, #1
 8005026:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005032:	edd7 6a06 	vldr	s13, [r7, #24]
 8005036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800503a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800503e:	ee17 3a90 	vmov	r3, s15
 8005042:	61fb      	str	r3, [r7, #28]
 8005044:	e004      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	61fb      	str	r3, [r7, #28]
 800504a:	e001      	b.n	8005050 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800504c:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <HAL_RCC_GetSysClockFreq+0x240>)
 800504e:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005050:	69fb      	ldr	r3, [r7, #28]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3724      	adds	r7, #36	@ 0x24
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	44020c00 	.word	0x44020c00
 8005064:	003d0900 	.word	0x003d0900
 8005068:	03d09000 	.word	0x03d09000
 800506c:	007a1200 	.word	0x007a1200
 8005070:	46000000 	.word	0x46000000
 8005074:	4c742400 	.word	0x4c742400
 8005078:	4af42400 	.word	0x4af42400
 800507c:	4a742400 	.word	0x4a742400

08005080 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005084:	f7ff fed0 	bl	8004e28 <HAL_RCC_GetSysClockFreq>
 8005088:	4602      	mov	r2, r0
 800508a:	4b08      	ldr	r3, [pc, #32]	@ (80050ac <HAL_RCC_GetHCLKFreq+0x2c>)
 800508c:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800508e:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005092:	4907      	ldr	r1, [pc, #28]	@ (80050b0 <HAL_RCC_GetHCLKFreq+0x30>)
 8005094:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005096:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800509a:	fa22 f303 	lsr.w	r3, r2, r3
 800509e:	4a05      	ldr	r2, [pc, #20]	@ (80050b4 <HAL_RCC_GetHCLKFreq+0x34>)
 80050a0:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 80050a2:	4b04      	ldr	r3, [pc, #16]	@ (80050b4 <HAL_RCC_GetHCLKFreq+0x34>)
 80050a4:	681b      	ldr	r3, [r3, #0]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	44020c00 	.word	0x44020c00
 80050b0:	0801faa4 	.word	0x0801faa4
 80050b4:	20000004 	.word	0x20000004

080050b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80050bc:	f7ff ffe0 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 80050c0:	4602      	mov	r2, r0
 80050c2:	4b06      	ldr	r3, [pc, #24]	@ (80050dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	091b      	lsrs	r3, r3, #4
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	4904      	ldr	r1, [pc, #16]	@ (80050e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ce:	5ccb      	ldrb	r3, [r1, r3]
 80050d0:	f003 031f 	and.w	r3, r3, #31
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	44020c00 	.word	0x44020c00
 80050e0:	0801fab4 	.word	0x0801fab4

080050e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80050e8:	f7ff ffca 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b06      	ldr	r3, [pc, #24]	@ (8005108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	0a1b      	lsrs	r3, r3, #8
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	4904      	ldr	r1, [pc, #16]	@ (800510c <HAL_RCC_GetPCLK2Freq+0x28>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	44020c00 	.word	0x44020c00
 800510c:	0801fab4 	.word	0x0801fab4

08005110 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005114:	f7ff ffb4 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 8005118:	4602      	mov	r2, r0
 800511a:	4b06      	ldr	r3, [pc, #24]	@ (8005134 <HAL_RCC_GetPCLK3Freq+0x24>)
 800511c:	6a1b      	ldr	r3, [r3, #32]
 800511e:	0b1b      	lsrs	r3, r3, #12
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	4904      	ldr	r1, [pc, #16]	@ (8005138 <HAL_RCC_GetPCLK3Freq+0x28>)
 8005126:	5ccb      	ldrb	r3, [r1, r3]
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	44020c00 	.word	0x44020c00
 8005138:	0801fab4 	.word	0x0801fab4

0800513c <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800513c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005140:	b0d8      	sub	sp, #352	@ 0x160
 8005142:	af00      	add	r7, sp, #0
 8005144:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005148:	2300      	movs	r3, #0
 800514a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800514e:	2300      	movs	r3, #0
 8005150:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005154:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005160:	2500      	movs	r5, #0
 8005162:	ea54 0305 	orrs.w	r3, r4, r5
 8005166:	d00b      	beq.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8005168:	4bcd      	ldr	r3, [pc, #820]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800516a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800516e:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8005172:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005176:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005178:	4ac9      	ldr	r2, [pc, #804]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800517a:	430b      	orrs	r3, r1
 800517c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005180:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f002 0801 	and.w	r8, r2, #1
 800518c:	f04f 0900 	mov.w	r9, #0
 8005190:	ea58 0309 	orrs.w	r3, r8, r9
 8005194:	d042      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8005196:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800519a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800519c:	2b05      	cmp	r3, #5
 800519e:	d823      	bhi.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0xac>
 80051a0:	a201      	add	r2, pc, #4	@ (adr r2, 80051a8 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051f1 	.word	0x080051f1
 80051ac:	080051c1 	.word	0x080051c1
 80051b0:	080051d5 	.word	0x080051d5
 80051b4:	080051f1 	.word	0x080051f1
 80051b8:	080051f1 	.word	0x080051f1
 80051bc:	080051f1 	.word	0x080051f1
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051c4:	3308      	adds	r3, #8
 80051c6:	4618      	mov	r0, r3
 80051c8:	f004 fee0 	bl	8009f8c <RCCEx_PLL2_Config>
 80051cc:	4603      	mov	r3, r0
 80051ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80051d2:	e00e      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051d8:	3330      	adds	r3, #48	@ 0x30
 80051da:	4618      	mov	r0, r3
 80051dc:	f004 ff6e 	bl	800a0bc <RCCEx_PLL3_Config>
 80051e0:	4603      	mov	r3, r0
 80051e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 80051e6:	e004      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80051ee:	e000      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 80051f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10c      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80051fa:	4ba9      	ldr	r3, [pc, #676]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80051fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005200:	f023 0107 	bic.w	r1, r3, #7
 8005204:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800520a:	4aa5      	ldr	r2, [pc, #660]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800520c:	430b      	orrs	r3, r1
 800520e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005212:	e003      	b.n	800521c <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005218:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800521c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005224:	f002 0a02 	and.w	sl, r2, #2
 8005228:	f04f 0b00 	mov.w	fp, #0
 800522c:	ea5a 030b 	orrs.w	r3, sl, fp
 8005230:	f000 8088 	beq.w	8005344 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8005234:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800523a:	2b28      	cmp	r3, #40	@ 0x28
 800523c:	d868      	bhi.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800523e:	a201      	add	r2, pc, #4	@ (adr r2, 8005244 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005244:	08005319 	.word	0x08005319
 8005248:	08005311 	.word	0x08005311
 800524c:	08005311 	.word	0x08005311
 8005250:	08005311 	.word	0x08005311
 8005254:	08005311 	.word	0x08005311
 8005258:	08005311 	.word	0x08005311
 800525c:	08005311 	.word	0x08005311
 8005260:	08005311 	.word	0x08005311
 8005264:	080052e9 	.word	0x080052e9
 8005268:	08005311 	.word	0x08005311
 800526c:	08005311 	.word	0x08005311
 8005270:	08005311 	.word	0x08005311
 8005274:	08005311 	.word	0x08005311
 8005278:	08005311 	.word	0x08005311
 800527c:	08005311 	.word	0x08005311
 8005280:	08005311 	.word	0x08005311
 8005284:	080052fd 	.word	0x080052fd
 8005288:	08005311 	.word	0x08005311
 800528c:	08005311 	.word	0x08005311
 8005290:	08005311 	.word	0x08005311
 8005294:	08005311 	.word	0x08005311
 8005298:	08005311 	.word	0x08005311
 800529c:	08005311 	.word	0x08005311
 80052a0:	08005311 	.word	0x08005311
 80052a4:	08005319 	.word	0x08005319
 80052a8:	08005311 	.word	0x08005311
 80052ac:	08005311 	.word	0x08005311
 80052b0:	08005311 	.word	0x08005311
 80052b4:	08005311 	.word	0x08005311
 80052b8:	08005311 	.word	0x08005311
 80052bc:	08005311 	.word	0x08005311
 80052c0:	08005311 	.word	0x08005311
 80052c4:	08005319 	.word	0x08005319
 80052c8:	08005311 	.word	0x08005311
 80052cc:	08005311 	.word	0x08005311
 80052d0:	08005311 	.word	0x08005311
 80052d4:	08005311 	.word	0x08005311
 80052d8:	08005311 	.word	0x08005311
 80052dc:	08005311 	.word	0x08005311
 80052e0:	08005311 	.word	0x08005311
 80052e4:	08005319 	.word	0x08005319
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052ec:	3308      	adds	r3, #8
 80052ee:	4618      	mov	r0, r3
 80052f0:	f004 fe4c 	bl	8009f8c <RCCEx_PLL2_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80052fa:	e00e      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005300:	3330      	adds	r3, #48	@ 0x30
 8005302:	4618      	mov	r0, r3
 8005304:	f004 feda 	bl	800a0bc <RCCEx_PLL3_Config>
 8005308:	4603      	mov	r3, r0
 800530a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 800530e:	e004      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005316:	e000      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8005318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800531a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10c      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005322:	4b5f      	ldr	r3, [pc, #380]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005324:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005328:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800532c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005330:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005332:	4a5b      	ldr	r2, [pc, #364]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005334:	430b      	orrs	r3, r1
 8005336:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800533a:	e003      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005340:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005344:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800534c:	f002 0304 	and.w	r3, r2, #4
 8005350:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8005354:	2300      	movs	r3, #0
 8005356:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 800535a:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800535e:	460b      	mov	r3, r1
 8005360:	4313      	orrs	r3, r2
 8005362:	d04e      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8005364:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005368:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800536a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800536e:	d02c      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8005370:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8005374:	d825      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800537a:	d028      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 800537c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005380:	d81f      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005382:	2bc0      	cmp	r3, #192	@ 0xc0
 8005384:	d025      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8005386:	2bc0      	cmp	r3, #192	@ 0xc0
 8005388:	d81b      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 800538a:	2b80      	cmp	r3, #128	@ 0x80
 800538c:	d00f      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x272>
 800538e:	2b80      	cmp	r3, #128	@ 0x80
 8005390:	d817      	bhi.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d01f      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8005396:	2b40      	cmp	r3, #64	@ 0x40
 8005398:	d113      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800539a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800539e:	3308      	adds	r3, #8
 80053a0:	4618      	mov	r0, r3
 80053a2:	f004 fdf3 	bl	8009f8c <RCCEx_PLL2_Config>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80053ac:	e014      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80053ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053b2:	3330      	adds	r3, #48	@ 0x30
 80053b4:	4618      	mov	r0, r3
 80053b6:	f004 fe81 	bl	800a0bc <RCCEx_PLL3_Config>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 80053c0:	e00a      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80053c8:	e006      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80053ca:	bf00      	nop
 80053cc:	e004      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80053ce:	bf00      	nop
 80053d0:	e002      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80053d2:	bf00      	nop
 80053d4:	e000      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 80053d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10c      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80053e0:	4b2f      	ldr	r3, [pc, #188]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80053e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053e6:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80053ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80053f0:	4a2b      	ldr	r2, [pc, #172]	@ (80054a0 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80053f2:	430b      	orrs	r3, r1
 80053f4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80053f8:	e003      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053fa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053fe:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005402:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f002 0308 	and.w	r3, r2, #8
 800540e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8005412:	2300      	movs	r3, #0
 8005414:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8005418:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 800541c:	460b      	mov	r3, r1
 800541e:	4313      	orrs	r3, r2
 8005420:	d056      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8005422:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005426:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005428:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800542c:	d031      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x356>
 800542e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8005432:	d82a      	bhi.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005438:	d02d      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800543a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800543e:	d824      	bhi.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005440:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005444:	d029      	beq.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005446:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800544a:	d81e      	bhi.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800544c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005450:	d011      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005456:	d818      	bhi.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d023      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800545c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005460:	d113      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005462:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005466:	3308      	adds	r3, #8
 8005468:	4618      	mov	r0, r3
 800546a:	f004 fd8f 	bl	8009f8c <RCCEx_PLL2_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005474:	e017      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005476:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800547a:	3330      	adds	r3, #48	@ 0x30
 800547c:	4618      	mov	r0, r3
 800547e:	f004 fe1d 	bl	800a0bc <RCCEx_PLL3_Config>
 8005482:	4603      	mov	r3, r0
 8005484:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8005488:	e00d      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005490:	e009      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005492:	bf00      	nop
 8005494:	e007      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8005496:	bf00      	nop
 8005498:	e005      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800549a:	bf00      	nop
 800549c:	e003      	b.n	80054a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800549e:	bf00      	nop
 80054a0:	44020c00 	.word	0x44020c00
        break;
 80054a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10c      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80054ae:	4bbb      	ldr	r3, [pc, #748]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80054b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80054b4:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80054b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054be:	4ab7      	ldr	r2, [pc, #732]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80054c0:	430b      	orrs	r3, r1
 80054c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80054c6:	e003      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80054cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f002 0310 	and.w	r3, r2, #16
 80054dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80054e0:	2300      	movs	r3, #0
 80054e2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80054e6:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80054ea:	460b      	mov	r3, r1
 80054ec:	4313      	orrs	r3, r2
 80054ee:	d053      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80054f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054f6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80054fa:	d031      	beq.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80054fc:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005500:	d82a      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005502:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005506:	d02d      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005508:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800550c:	d824      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800550e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005512:	d029      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8005514:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005518:	d81e      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800551a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800551e:	d011      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005520:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005524:	d818      	bhi.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005526:	2b00      	cmp	r3, #0
 8005528:	d020      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x430>
 800552a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800552e:	d113      	bne.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005530:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005534:	3308      	adds	r3, #8
 8005536:	4618      	mov	r0, r3
 8005538:	f004 fd28 	bl	8009f8c <RCCEx_PLL2_Config>
 800553c:	4603      	mov	r3, r0
 800553e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005542:	e014      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005544:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005548:	3330      	adds	r3, #48	@ 0x30
 800554a:	4618      	mov	r0, r3
 800554c:	f004 fdb6 	bl	800a0bc <RCCEx_PLL3_Config>
 8005550:	4603      	mov	r3, r0
 8005552:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8005556:	e00a      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800555e:	e006      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005560:	bf00      	nop
 8005562:	e004      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005564:	bf00      	nop
 8005566:	e002      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005568:	bf00      	nop
 800556a:	e000      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800556c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800556e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10c      	bne.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005576:	4b89      	ldr	r3, [pc, #548]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800557c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005584:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005586:	4a85      	ldr	r2, [pc, #532]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005588:	430b      	orrs	r3, r1
 800558a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800558e:	e003      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005590:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005594:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005598:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800559c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a0:	f002 0320 	and.w	r3, r2, #32
 80055a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80055a8:	2300      	movs	r3, #0
 80055aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80055ae:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80055b2:	460b      	mov	r3, r1
 80055b4:	4313      	orrs	r3, r2
 80055b6:	d053      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80055b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055be:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80055c2:	d031      	beq.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80055c4:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80055c8:	d82a      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80055ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055ce:	d02d      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80055d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055d4:	d824      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80055d6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80055da:	d029      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80055dc:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80055e0:	d81e      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80055e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055e6:	d011      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80055e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055ec:	d818      	bhi.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d020      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80055f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055f6:	d113      	bne.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055fc:	3308      	adds	r3, #8
 80055fe:	4618      	mov	r0, r3
 8005600:	f004 fcc4 	bl	8009f8c <RCCEx_PLL2_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800560a:	e014      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800560c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005610:	3330      	adds	r3, #48	@ 0x30
 8005612:	4618      	mov	r0, r3
 8005614:	f004 fd52 	bl	800a0bc <RCCEx_PLL3_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 800561e:	e00a      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005626:	e006      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005628:	bf00      	nop
 800562a:	e004      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800562c:	bf00      	nop
 800562e:	e002      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005630:	bf00      	nop
 8005632:	e000      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005634:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005636:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10c      	bne.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800563e:	4b57      	ldr	r3, [pc, #348]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005640:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005644:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800564c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800564e:	4a53      	ldr	r2, [pc, #332]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005650:	430b      	orrs	r3, r1
 8005652:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005656:	e003      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005658:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800565c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005660:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005668:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800566c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005670:	2300      	movs	r3, #0
 8005672:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8005676:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 800567a:	460b      	mov	r3, r1
 800567c:	4313      	orrs	r3, r2
 800567e:	d053      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005680:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005684:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005686:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800568a:	d031      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 800568c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005690:	d82a      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8005692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005696:	d02d      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8005698:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800569c:	d824      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800569e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80056a2:	d029      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80056a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80056a8:	d81e      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80056aa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80056ae:	d011      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80056b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80056b4:	d818      	bhi.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d020      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80056ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80056be:	d113      	bne.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80056c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056c4:	3308      	adds	r3, #8
 80056c6:	4618      	mov	r0, r3
 80056c8:	f004 fc60 	bl	8009f8c <RCCEx_PLL2_Config>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80056d2:	e014      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80056d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056d8:	3330      	adds	r3, #48	@ 0x30
 80056da:	4618      	mov	r0, r3
 80056dc:	f004 fcee 	bl	800a0bc <RCCEx_PLL3_Config>
 80056e0:	4603      	mov	r3, r0
 80056e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80056e6:	e00a      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80056ee:	e006      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80056f0:	bf00      	nop
 80056f2:	e004      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80056f4:	bf00      	nop
 80056f6:	e002      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80056f8:	bf00      	nop
 80056fa:	e000      	b.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80056fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10c      	bne.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005706:	4b25      	ldr	r3, [pc, #148]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005708:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800570c:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8005710:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005716:	4a21      	ldr	r2, [pc, #132]	@ (800579c <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005718:	430b      	orrs	r3, r1
 800571a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800571e:	e003      	b.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005720:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005724:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005728:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005734:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005738:	2300      	movs	r3, #0
 800573a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800573e:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 8005742:	460b      	mov	r3, r1
 8005744:	4313      	orrs	r3, r2
 8005746:	d055      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005748:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800574c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800574e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005752:	d033      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x680>
 8005754:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005758:	d82c      	bhi.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800575a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800575e:	d02f      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005760:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005764:	d826      	bhi.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005766:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800576a:	d02b      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x688>
 800576c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005770:	d820      	bhi.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005772:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005776:	d013      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800577c:	d81a      	bhi.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d022      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 8005782:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005786:	d115      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005788:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800578c:	3308      	adds	r3, #8
 800578e:	4618      	mov	r0, r3
 8005790:	f004 fbfc 	bl	8009f8c <RCCEx_PLL2_Config>
 8005794:	4603      	mov	r3, r0
 8005796:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800579a:	e016      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
 800579c:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057a4:	3330      	adds	r3, #48	@ 0x30
 80057a6:	4618      	mov	r0, r3
 80057a8:	f004 fc88 	bl	800a0bc <RCCEx_PLL3_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80057b2:	e00a      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057ba:	e006      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80057bc:	bf00      	nop
 80057be:	e004      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80057c0:	bf00      	nop
 80057c2:	e002      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80057c4:	bf00      	nop
 80057c6:	e000      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80057c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d10c      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80057d2:	4bbb      	ldr	r3, [pc, #748]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80057d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80057d8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80057dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80057e2:	4ab7      	ldr	r2, [pc, #732]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80057e4:	430b      	orrs	r3, r1
 80057e6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80057ea:	e003      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80057f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fc:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005800:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8005804:	2300      	movs	r3, #0
 8005806:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800580a:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800580e:	460b      	mov	r3, r1
 8005810:	4313      	orrs	r3, r2
 8005812:	d053      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 8005814:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005818:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800581a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800581e:	d031      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005820:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005824:	d82a      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005826:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800582a:	d02d      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 800582c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005830:	d824      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005832:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005836:	d029      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005838:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800583c:	d81e      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800583e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005842:	d011      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8005844:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005848:	d818      	bhi.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x740>
 800584a:	2b00      	cmp	r3, #0
 800584c:	d020      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x754>
 800584e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005852:	d113      	bne.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005854:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005858:	3308      	adds	r3, #8
 800585a:	4618      	mov	r0, r3
 800585c:	f004 fb96 	bl	8009f8c <RCCEx_PLL2_Config>
 8005860:	4603      	mov	r3, r0
 8005862:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005866:	e014      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800586c:	3330      	adds	r3, #48	@ 0x30
 800586e:	4618      	mov	r0, r3
 8005870:	f004 fc24 	bl	800a0bc <RCCEx_PLL3_Config>
 8005874:	4603      	mov	r3, r0
 8005876:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800587a:	e00a      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005882:	e006      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005884:	bf00      	nop
 8005886:	e004      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005888:	bf00      	nop
 800588a:	e002      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800588c:	bf00      	nop
 800588e:	e000      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8005890:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005892:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10c      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 800589a:	4b89      	ldr	r3, [pc, #548]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800589c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80058a0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80058a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058aa:	4a85      	ldr	r2, [pc, #532]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80058ac:	430b      	orrs	r3, r1
 80058ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80058b2:	e003      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058b4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058b8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80058bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058c4:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80058c8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80058cc:	2300      	movs	r3, #0
 80058ce:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80058d2:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80058d6:	460b      	mov	r3, r1
 80058d8:	4313      	orrs	r3, r2
 80058da:	d055      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80058dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058e4:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80058e8:	d031      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x812>
 80058ea:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80058ee:	d82a      	bhi.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80058f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058f4:	d02d      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x816>
 80058f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058fa:	d824      	bhi.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80058fc:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005900:	d029      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 8005902:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005906:	d81e      	bhi.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800590c:	d011      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 800590e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005912:	d818      	bhi.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005914:	2b00      	cmp	r3, #0
 8005916:	d020      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005918:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800591c:	d113      	bne.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800591e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005922:	3308      	adds	r3, #8
 8005924:	4618      	mov	r0, r3
 8005926:	f004 fb31 	bl	8009f8c <RCCEx_PLL2_Config>
 800592a:	4603      	mov	r3, r0
 800592c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005930:	e014      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005932:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005936:	3330      	adds	r3, #48	@ 0x30
 8005938:	4618      	mov	r0, r3
 800593a:	f004 fbbf 	bl	800a0bc <RCCEx_PLL3_Config>
 800593e:	4603      	mov	r3, r0
 8005940:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005944:	e00a      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800594c:	e006      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800594e:	bf00      	nop
 8005950:	e004      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005952:	bf00      	nop
 8005954:	e002      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005956:	bf00      	nop
 8005958:	e000      	b.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800595a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800595c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10d      	bne.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005964:	4b56      	ldr	r3, [pc, #344]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005966:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800596a:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800596e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005976:	4a52      	ldr	r2, [pc, #328]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005978:	430b      	orrs	r3, r1
 800597a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800597e:	e003      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005980:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005984:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005988:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800598c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005990:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005994:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005998:	2300      	movs	r3, #0
 800599a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800599e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80059a2:	460b      	mov	r3, r1
 80059a4:	4313      	orrs	r3, r2
 80059a6:	d044      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80059a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059b0:	2b05      	cmp	r3, #5
 80059b2:	d823      	bhi.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80059b4:	a201      	add	r2, pc, #4	@ (adr r2, 80059bc <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	08005a05 	.word	0x08005a05
 80059c0:	080059d5 	.word	0x080059d5
 80059c4:	080059e9 	.word	0x080059e9
 80059c8:	08005a05 	.word	0x08005a05
 80059cc:	08005a05 	.word	0x08005a05
 80059d0:	08005a05 	.word	0x08005a05
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059d8:	3308      	adds	r3, #8
 80059da:	4618      	mov	r0, r3
 80059dc:	f004 fad6 	bl	8009f8c <RCCEx_PLL2_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80059e6:	e00e      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059ec:	3330      	adds	r3, #48	@ 0x30
 80059ee:	4618      	mov	r0, r3
 80059f0:	f004 fb64 	bl	800a0bc <RCCEx_PLL3_Config>
 80059f4:	4603      	mov	r3, r0
 80059f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80059fa:	e004      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005a02:	e000      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 8005a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10d      	bne.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8005a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005a10:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005a14:	f023 0107 	bic.w	r1, r3, #7
 8005a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a20:	4a27      	ldr	r2, [pc, #156]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005a22:	430b      	orrs	r3, r1
 8005a24:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005a28:	e003      	b.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005a2e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8005a32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005a3e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005a42:	2300      	movs	r3, #0
 8005a44:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005a48:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	d04f      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 8005a52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a5a:	2b50      	cmp	r3, #80	@ 0x50
 8005a5c:	d029      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005a5e:	2b50      	cmp	r3, #80	@ 0x50
 8005a60:	d823      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005a62:	2b40      	cmp	r3, #64	@ 0x40
 8005a64:	d027      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8005a66:	2b40      	cmp	r3, #64	@ 0x40
 8005a68:	d81f      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005a6a:	2b30      	cmp	r3, #48	@ 0x30
 8005a6c:	d025      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005a6e:	2b30      	cmp	r3, #48	@ 0x30
 8005a70:	d81b      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d00f      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d817      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d022      	beq.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005a7e:	2b10      	cmp	r3, #16
 8005a80:	d113      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a82:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a86:	3308      	adds	r3, #8
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f004 fa7f 	bl	8009f8c <RCCEx_PLL2_Config>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005a94:	e017      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a9a:	3330      	adds	r3, #48	@ 0x30
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f004 fb0d 	bl	800a0bc <RCCEx_PLL3_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8005aa8:	e00d      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ab0:	e009      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005ab2:	bf00      	nop
 8005ab4:	e007      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005ab6:	bf00      	nop
 8005ab8:	e005      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8005aba:	bf00      	nop
 8005abc:	e003      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8005abe:	bf00      	nop
 8005ac0:	44020c00 	.word	0x44020c00
        break;
 8005ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d10d      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8005ace:	4baf      	ldr	r3, [pc, #700]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ad0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005ad4:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8005ad8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ae0:	4aaa      	ldr	r2, [pc, #680]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ae2:	430b      	orrs	r3, r1
 8005ae4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005ae8:	e003      	b.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005aee:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005af2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005afe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b02:	2300      	movs	r3, #0
 8005b04:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005b08:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	d055      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005b12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b1a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b1e:	d031      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005b20:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005b24:	d82a      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005b26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b2a:	d02d      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005b2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005b30:	d824      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005b32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b36:	d029      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005b38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005b3c:	d81e      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005b3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b42:	d011      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8005b44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005b48:	d818      	bhi.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d020      	beq.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005b4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b52:	d113      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b58:	3308      	adds	r3, #8
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f004 fa16 	bl	8009f8c <RCCEx_PLL2_Config>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005b66:	e014      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b6c:	3330      	adds	r3, #48	@ 0x30
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f004 faa4 	bl	800a0bc <RCCEx_PLL3_Config>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005b7a:	e00a      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b82:	e006      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005b84:	bf00      	nop
 8005b86:	e004      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005b88:	bf00      	nop
 8005b8a:	e002      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005b8c:	bf00      	nop
 8005b8e:	e000      	b.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8005b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10d      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005b9a:	4b7c      	ldr	r3, [pc, #496]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ba0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ba4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005bac:	4a77      	ldr	r2, [pc, #476]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005bae:	430b      	orrs	r3, r1
 8005bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005bb4:	e003      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005bba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bbe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005bca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005bd4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	d03d      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8005bde:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bea:	d01b      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005bec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bf0:	d814      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005bf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bf6:	d017      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005bf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bfc:	d80e      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d014      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 8005c02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c06:	d109      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c0c:	3330      	adds	r3, #48	@ 0x30
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f004 fa54 	bl	800a0bc <RCCEx_PLL3_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005c1a:	e008      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c22:	e004      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005c24:	bf00      	nop
 8005c26:	e002      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005c28:	bf00      	nop
 8005c2a:	e000      	b.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005c2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c2e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10d      	bne.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005c36:	4b55      	ldr	r3, [pc, #340]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005c38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005c3c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005c40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c48:	4a50      	ldr	r2, [pc, #320]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005c4a:	430b      	orrs	r3, r1
 8005c4c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005c50:	e003      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c56:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c5a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c62:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005c66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c70:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4313      	orrs	r3, r2
 8005c78:	d03d      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005c7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c82:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c86:	d01b      	beq.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8005c88:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c8c:	d814      	bhi.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005c8e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c92:	d017      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8005c94:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c98:	d80e      	bhi.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d014      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8005c9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ca2:	d109      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ca8:	3330      	adds	r3, #48	@ 0x30
 8005caa:	4618      	mov	r0, r3
 8005cac:	f004 fa06 	bl	800a0bc <RCCEx_PLL3_Config>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8005cb6:	e008      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005cbe:	e004      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005cc0:	bf00      	nop
 8005cc2:	e002      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005cc4:	bf00      	nop
 8005cc6:	e000      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8005cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10d      	bne.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005cd4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005cd8:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ce0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ce4:	4a29      	ldr	r2, [pc, #164]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005ce6:	430b      	orrs	r3, r1
 8005ce8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005cec:	e003      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005cf2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cf6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005d02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d06:	2300      	movs	r3, #0
 8005d08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005d0c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d10:	460b      	mov	r3, r1
 8005d12:	4313      	orrs	r3, r2
 8005d14:	d040      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8005d16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d22:	d01b      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8005d24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005d28:	d814      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005d2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d2e:	d017      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005d30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005d34:	d80e      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d014      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005d3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005d3e:	d109      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d44:	3330      	adds	r3, #48	@ 0x30
 8005d46:	4618      	mov	r0, r3
 8005d48:	f004 f9b8 	bl	800a0bc <RCCEx_PLL3_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8005d52:	e008      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d5a:	e004      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005d5c:	bf00      	nop
 8005d5e:	e002      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005d60:	bf00      	nop
 8005d62:	e000      	b.n	8005d66 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d66:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d110      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005d6e:	4b07      	ldr	r3, [pc, #28]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005d70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d74:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005d78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005d80:	4a02      	ldr	r2, [pc, #8]	@ (8005d8c <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005d82:	430b      	orrs	r3, r1
 8005d84:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005d88:	e006      	b.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8005d8a:	bf00      	nop
 8005d8c:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d90:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d94:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005d98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	2100      	movs	r1, #0
 8005da2:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8005da6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005daa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005dae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4313      	orrs	r3, r2
 8005db6:	d03d      	beq.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8005db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005dc0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005dc4:	d01b      	beq.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005dc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005dca:	d814      	bhi.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005dcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005dd0:	d017      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005dd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005dd6:	d80e      	bhi.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d014      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8005ddc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005de0:	d109      	bne.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005de2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005de6:	3330      	adds	r3, #48	@ 0x30
 8005de8:	4618      	mov	r0, r3
 8005dea:	f004 f967 	bl	800a0bc <RCCEx_PLL3_Config>
 8005dee:	4603      	mov	r3, r0
 8005df0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8005df4:	e008      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005dfc:	e004      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005dfe:	bf00      	nop
 8005e00:	e002      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005e02:	bf00      	nop
 8005e04:	e000      	b.n	8005e08 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005e06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10d      	bne.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005e10:	4bbe      	ldr	r3, [pc, #760]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005e12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e16:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005e1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e22:	4aba      	ldr	r2, [pc, #744]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005e24:	430b      	orrs	r3, r1
 8005e26:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005e2a:	e003      	b.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e30:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8005e34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005e40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e44:	2300      	movs	r3, #0
 8005e46:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e4a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005e4e:	460b      	mov	r3, r1
 8005e50:	4313      	orrs	r3, r2
 8005e52:	d035      	beq.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8005e54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e60:	d015      	beq.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8005e62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005e66:	d80e      	bhi.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d012      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005e70:	d109      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e76:	3330      	adds	r3, #48	@ 0x30
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f004 f91f 	bl	800a0bc <RCCEx_PLL3_Config>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8005e84:	e006      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005e8c:	e002      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005e8e:	bf00      	nop
 8005e90:	e000      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8005e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10d      	bne.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8005e9c:	4b9b      	ldr	r3, [pc, #620]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005e9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005ea2:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8005ea6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005eaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005eae:	4a97      	ldr	r2, [pc, #604]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005eb6:	e003      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ebc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ec0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	2100      	movs	r1, #0
 8005eca:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8005ece:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ed2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ed6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4313      	orrs	r3, r2
 8005ede:	d00e      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8005ee0:	4b8a      	ldr	r3, [pc, #552]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	4a89      	ldr	r2, [pc, #548]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005ee6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005eea:	61d3      	str	r3, [r2, #28]
 8005eec:	4b87      	ldr	r3, [pc, #540]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005eee:	69d9      	ldr	r1, [r3, #28]
 8005ef0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ef4:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005ef8:	4a84      	ldr	r2, [pc, #528]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005efa:	430b      	orrs	r3, r1
 8005efc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005efe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005f0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f14:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f18:	460b      	mov	r3, r1
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	d055      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005f1e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f26:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005f2a:	d031      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005f2c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005f30:	d82a      	bhi.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f36:	d02d      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005f38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f3c:	d824      	bhi.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005f3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f42:	d029      	beq.n	8005f98 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005f44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f48:	d81e      	bhi.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005f4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f4e:	d011      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f54:	d818      	bhi.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d020      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005f5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f5e:	d113      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f64:	3308      	adds	r3, #8
 8005f66:	4618      	mov	r0, r3
 8005f68:	f004 f810 	bl	8009f8c <RCCEx_PLL2_Config>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005f72:	e014      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f78:	3330      	adds	r3, #48	@ 0x30
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f004 f89e 	bl	800a0bc <RCCEx_PLL3_Config>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005f86:	e00a      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f8e:	e006      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005f90:	bf00      	nop
 8005f92:	e004      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005f94:	bf00      	nop
 8005f96:	e002      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005f98:	bf00      	nop
 8005f9a:	e000      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f9e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d10d      	bne.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005fa6:	4b59      	ldr	r3, [pc, #356]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005fa8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005fac:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005fb0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fb8:	4a54      	ldr	r2, [pc, #336]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005fba:	430b      	orrs	r3, r1
 8005fbc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005fc0:	e003      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fc6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005fca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fe0:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	d055      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005fea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005ff2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005ff6:	d031      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005ff8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005ffc:	d82a      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005ffe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006002:	d02d      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8006004:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006008:	d824      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800600a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800600e:	d029      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8006010:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006014:	d81e      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006016:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800601a:	d011      	beq.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 800601c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006020:	d818      	bhi.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006022:	2b00      	cmp	r3, #0
 8006024:	d020      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800602a:	d113      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800602c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006030:	3308      	adds	r3, #8
 8006032:	4618      	mov	r0, r3
 8006034:	f003 ffaa 	bl	8009f8c <RCCEx_PLL2_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 800603e:	e014      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006040:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006044:	3330      	adds	r3, #48	@ 0x30
 8006046:	4618      	mov	r0, r3
 8006048:	f004 f838 	bl	800a0bc <RCCEx_PLL3_Config>
 800604c:	4603      	mov	r3, r0
 800604e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006052:	e00a      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800605a:	e006      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 800605c:	bf00      	nop
 800605e:	e004      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006060:	bf00      	nop
 8006062:	e002      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006064:	bf00      	nop
 8006066:	e000      	b.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006068:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10d      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006072:	4b26      	ldr	r3, [pc, #152]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006074:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006078:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800607c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006080:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006084:	4a21      	ldr	r2, [pc, #132]	@ (800610c <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006086:	430b      	orrs	r3, r1
 8006088:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800608c:	e003      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006092:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006096:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	2100      	movs	r1, #0
 80060a0:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060b0:	460b      	mov	r3, r1
 80060b2:	4313      	orrs	r3, r2
 80060b4:	d057      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 80060b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80060be:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060c2:	d033      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0xff0>
 80060c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80060c8:	d82c      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80060ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060ce:	d02f      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 80060d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80060d4:	d826      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80060d6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060da:	d02b      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 80060dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80060e0:	d820      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80060e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060e6:	d013      	beq.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80060e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80060ec:	d81a      	bhi.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d022      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 80060f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060f6:	d115      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060fc:	3308      	adds	r3, #8
 80060fe:	4618      	mov	r0, r3
 8006100:	f003 ff44 	bl	8009f8c <RCCEx_PLL2_Config>
 8006104:	4603      	mov	r3, r0
 8006106:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 800610a:	e016      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xffe>
 800610c:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006114:	3330      	adds	r3, #48	@ 0x30
 8006116:	4618      	mov	r0, r3
 8006118:	f003 ffd0 	bl	800a0bc <RCCEx_PLL3_Config>
 800611c:	4603      	mov	r3, r0
 800611e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8006122:	e00a      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800612a:	e006      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 800612c:	bf00      	nop
 800612e:	e004      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006130:	bf00      	nop
 8006132:	e002      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006134:	bf00      	nop
 8006136:	e000      	b.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800613a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10d      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8006142:	4bbb      	ldr	r3, [pc, #748]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006144:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006148:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800614c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006150:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006154:	4ab6      	ldr	r2, [pc, #728]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006156:	430b      	orrs	r3, r1
 8006158:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800615c:	e003      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006162:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8006166:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	2100      	movs	r1, #0
 8006170:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8006174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006178:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800617c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006180:	460b      	mov	r3, r1
 8006182:	4313      	orrs	r3, r2
 8006184:	d055      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8006186:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800618a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800618e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006192:	d031      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006194:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006198:	d82a      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 800619a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800619e:	d02d      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 80061a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061a4:	d824      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80061a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061aa:	d029      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 80061ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061b0:	d81e      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80061b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061b6:	d011      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 80061b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061bc:	d818      	bhi.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d020      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 80061c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061c6:	d113      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061cc:	3308      	adds	r3, #8
 80061ce:	4618      	mov	r0, r3
 80061d0:	f003 fedc 	bl	8009f8c <RCCEx_PLL2_Config>
 80061d4:	4603      	mov	r3, r0
 80061d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80061da:	e014      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061e0:	3330      	adds	r3, #48	@ 0x30
 80061e2:	4618      	mov	r0, r3
 80061e4:	f003 ff6a 	bl	800a0bc <RCCEx_PLL3_Config>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 80061ee:	e00a      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80061f6:	e006      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80061f8:	bf00      	nop
 80061fa:	e004      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 80061fc:	bf00      	nop
 80061fe:	e002      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006200:	bf00      	nop
 8006202:	e000      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006204:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006206:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10d      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800620e:	4b88      	ldr	r3, [pc, #544]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006210:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006214:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8006218:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800621c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006220:	4a83      	ldr	r2, [pc, #524]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006222:	430b      	orrs	r3, r1
 8006224:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006228:	e003      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800622e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8006232:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	2100      	movs	r1, #0
 800623c:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8006240:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006244:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006248:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800624c:	460b      	mov	r3, r1
 800624e:	4313      	orrs	r3, r2
 8006250:	d055      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8006252:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006256:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800625a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800625e:	d031      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8006260:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8006264:	d82a      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006266:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800626a:	d02d      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 800626c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006270:	d824      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8006272:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006276:	d029      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8006278:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800627c:	d81e      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800627e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006282:	d011      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8006284:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006288:	d818      	bhi.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d020      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800628e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006292:	d113      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006294:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006298:	3308      	adds	r3, #8
 800629a:	4618      	mov	r0, r3
 800629c:	f003 fe76 	bl	8009f8c <RCCEx_PLL2_Config>
 80062a0:	4603      	mov	r3, r0
 80062a2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80062a6:	e014      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062ac:	3330      	adds	r3, #48	@ 0x30
 80062ae:	4618      	mov	r0, r3
 80062b0:	f003 ff04 	bl	800a0bc <RCCEx_PLL3_Config>
 80062b4:	4603      	mov	r3, r0
 80062b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 80062ba:	e00a      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80062c2:	e006      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80062c4:	bf00      	nop
 80062c6:	e004      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80062c8:	bf00      	nop
 80062ca:	e002      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80062cc:	bf00      	nop
 80062ce:	e000      	b.n	80062d2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 80062d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10d      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80062da:	4b55      	ldr	r3, [pc, #340]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80062dc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80062e0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80062e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062e8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80062ec:	4a50      	ldr	r2, [pc, #320]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80062ee:	430b      	orrs	r3, r1
 80062f0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80062f4:	e003      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062fa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80062fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006306:	2100      	movs	r1, #0
 8006308:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800630c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006310:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006314:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006318:	460b      	mov	r3, r1
 800631a:	4313      	orrs	r3, r2
 800631c:	d055      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 800631e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006322:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006326:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800632a:	d031      	beq.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 800632c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006330:	d82a      	bhi.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006336:	d02d      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800633c:	d824      	bhi.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800633e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006342:	d029      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006344:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006348:	d81e      	bhi.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 800634a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800634e:	d011      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8006350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006354:	d818      	bhi.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8006356:	2b00      	cmp	r3, #0
 8006358:	d020      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x1260>
 800635a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800635e:	d113      	bne.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006360:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006364:	3308      	adds	r3, #8
 8006366:	4618      	mov	r0, r3
 8006368:	f003 fe10 	bl	8009f8c <RCCEx_PLL2_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006372:	e014      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006374:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006378:	3330      	adds	r3, #48	@ 0x30
 800637a:	4618      	mov	r0, r3
 800637c:	f003 fe9e 	bl	800a0bc <RCCEx_PLL3_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8006386:	e00a      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800638e:	e006      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006390:	bf00      	nop
 8006392:	e004      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006394:	bf00      	nop
 8006396:	e002      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8006398:	bf00      	nop
 800639a:	e000      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800639c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800639e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10d      	bne.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80063a6:	4b22      	ldr	r3, [pc, #136]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80063a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80063ac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80063b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80063b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80063ba:	430b      	orrs	r3, r1
 80063bc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80063c0:	e003      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063c6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80063d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063da:	2300      	movs	r3, #0
 80063dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80063e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80063e4:	460b      	mov	r3, r1
 80063e6:	4313      	orrs	r3, r2
 80063e8:	d055      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80063ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80063f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063f6:	d035      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80063f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80063fc:	d82e      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80063fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006402:	d031      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8006404:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006408:	d828      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 800640a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800640e:	d01b      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006410:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006414:	d822      	bhi.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 800641a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800641e:	d009      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8006420:	e01c      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006422:	4b03      	ldr	r3, [pc, #12]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006426:	4a02      	ldr	r2, [pc, #8]	@ (8006430 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006428:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800642c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800642e:	e01c      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8006430:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006434:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006438:	3308      	adds	r3, #8
 800643a:	4618      	mov	r0, r3
 800643c:	f003 fda6 	bl	8009f8c <RCCEx_PLL2_Config>
 8006440:	4603      	mov	r3, r0
 8006442:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006446:	e010      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006448:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800644c:	3330      	adds	r3, #48	@ 0x30
 800644e:	4618      	mov	r0, r3
 8006450:	f003 fe34 	bl	800a0bc <RCCEx_PLL3_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 800645a:	e006      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006462:	e002      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006464:	bf00      	nop
 8006466:	e000      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8006468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800646a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10d      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006472:	4bc3      	ldr	r3, [pc, #780]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006478:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800647c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006480:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006484:	4abe      	ldr	r2, [pc, #760]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006486:	430b      	orrs	r3, r1
 8006488:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800648c:	e003      	b.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006492:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006496:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649e:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80064a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064a6:	2300      	movs	r3, #0
 80064a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064ac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80064b0:	460b      	mov	r3, r1
 80064b2:	4313      	orrs	r3, r2
 80064b4:	d051      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80064b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064ba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80064be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064c2:	d033      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80064c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064c8:	d82c      	bhi.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80064ca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80064ce:	d02d      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 80064d0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80064d4:	d826      	bhi.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80064d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064da:	d019      	beq.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 80064dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064e0:	d820      	bhi.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80064e6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80064ea:	d007      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80064ec:	e01a      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ee:	4ba4      	ldr	r3, [pc, #656]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f2:	4aa3      	ldr	r2, [pc, #652]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80064f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064f8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80064fa:	e018      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006500:	3308      	adds	r3, #8
 8006502:	4618      	mov	r0, r3
 8006504:	f003 fd42 	bl	8009f8c <RCCEx_PLL2_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800650e:	e00e      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006510:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006514:	3330      	adds	r3, #48	@ 0x30
 8006516:	4618      	mov	r0, r3
 8006518:	f003 fdd0 	bl	800a0bc <RCCEx_PLL3_Config>
 800651c:	4603      	mov	r3, r0
 800651e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006522:	e004      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006524:	2301      	movs	r3, #1
 8006526:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800652a:	e000      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 800652c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800652e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006532:	2b00      	cmp	r3, #0
 8006534:	d10d      	bne.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006536:	4b92      	ldr	r3, [pc, #584]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006538:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800653c:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8006540:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006544:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006548:	4a8d      	ldr	r2, [pc, #564]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800654a:	430b      	orrs	r3, r1
 800654c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006550:	e003      	b.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006552:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006556:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800655a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800655e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006562:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006566:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006568:	2300      	movs	r3, #0
 800656a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800656c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006570:	460b      	mov	r3, r1
 8006572:	4313      	orrs	r3, r2
 8006574:	d032      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006576:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800657a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800657e:	2b05      	cmp	r3, #5
 8006580:	d80f      	bhi.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8006582:	2b03      	cmp	r3, #3
 8006584:	d211      	bcs.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8006586:	2b01      	cmp	r3, #1
 8006588:	d911      	bls.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x1472>
 800658a:	2b02      	cmp	r3, #2
 800658c:	d109      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800658e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006592:	3308      	adds	r3, #8
 8006594:	4618      	mov	r0, r3
 8006596:	f003 fcf9 	bl	8009f8c <RCCEx_PLL2_Config>
 800659a:	4603      	mov	r3, r0
 800659c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065a0:	e006      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80065a8:	e002      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80065aa:	bf00      	nop
 80065ac:	e000      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80065ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065b0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10d      	bne.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80065b8:	4b71      	ldr	r3, [pc, #452]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80065be:	f023 0107 	bic.w	r1, r3, #7
 80065c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80065ca:	4a6d      	ldr	r2, [pc, #436]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80065cc:	430b      	orrs	r3, r1
 80065ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80065d2:	e003      	b.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065d8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80065dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e4:	2100      	movs	r1, #0
 80065e6:	6739      	str	r1, [r7, #112]	@ 0x70
 80065e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80065ee:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80065f2:	460b      	mov	r3, r1
 80065f4:	4313      	orrs	r3, r2
 80065f6:	d024      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80065f8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8006604:	2b08      	cmp	r3, #8
 8006606:	d005      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800660e:	e002      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006610:	bf00      	nop
 8006612:	e000      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006614:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006616:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10d      	bne.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 800661e:	4b58      	ldr	r3, [pc, #352]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006624:	f023 0108 	bic.w	r1, r3, #8
 8006628:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800662c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006630:	4a53      	ldr	r2, [pc, #332]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006632:	430b      	orrs	r3, r1
 8006634:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006638:	e003      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800663a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800663e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006642:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800664e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006650:	2300      	movs	r3, #0
 8006652:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006654:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006658:	460b      	mov	r3, r1
 800665a:	4313      	orrs	r3, r2
 800665c:	f000 80b9 	beq.w	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006660:	4b48      	ldr	r3, [pc, #288]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006664:	4a47      	ldr	r2, [pc, #284]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006666:	f043 0301 	orr.w	r3, r3, #1
 800666a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800666c:	f7fb fbb2 	bl	8001dd4 <HAL_GetTick>
 8006670:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006674:	e00b      	b.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006676:	f7fb fbad 	bl	8001dd4 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006680:	1ad3      	subs	r3, r2, r3
 8006682:	2b02      	cmp	r3, #2
 8006684:	d903      	bls.n	800668e <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800668c:	e005      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800668e:	4b3d      	ldr	r3, [pc, #244]	@ (8006784 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8006690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0ed      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 800669a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f040 8093 	bne.w	80067ca <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80066a4:	4b36      	ldr	r3, [pc, #216]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80066a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ae:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80066b2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d023      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80066ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066be:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80066c2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01b      	beq.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80066ca:	4b2d      	ldr	r3, [pc, #180]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80066cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066d4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80066d8:	4b29      	ldr	r3, [pc, #164]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80066da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066de:	4a28      	ldr	r2, [pc, #160]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80066e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066e4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80066e8:	4b25      	ldr	r3, [pc, #148]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80066ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80066ee:	4a24      	ldr	r2, [pc, #144]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80066f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066f4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80066f8:	4a21      	ldr	r2, [pc, #132]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80066fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80066fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006702:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d019      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800670e:	f7fb fb61 	bl	8001dd4 <HAL_GetTick>
 8006712:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006716:	e00d      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006718:	f7fb fb5c 	bl	8001dd4 <HAL_GetTick>
 800671c:	4602      	mov	r2, r0
 800671e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006722:	1ad2      	subs	r2, r2, r3
 8006724:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006728:	429a      	cmp	r2, r3
 800672a:	d903      	bls.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 800672c:	2303      	movs	r3, #3
 800672e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 8006732:	e006      	b.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006734:	4b12      	ldr	r3, [pc, #72]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0ea      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 8006742:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006746:	2b00      	cmp	r3, #0
 8006748:	d13a      	bne.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800674a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800674e:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006752:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006756:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800675a:	d115      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 800675c:	4b08      	ldr	r3, [pc, #32]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800675e:	69db      	ldr	r3, [r3, #28]
 8006760:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006764:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006768:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800676c:	091b      	lsrs	r3, r3, #4
 800676e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006772:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8006776:	4a02      	ldr	r2, [pc, #8]	@ (8006780 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006778:	430b      	orrs	r3, r1
 800677a:	61d3      	str	r3, [r2, #28]
 800677c:	e00a      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800677e:	bf00      	nop
 8006780:	44020c00 	.word	0x44020c00
 8006784:	44020800 	.word	0x44020800
 8006788:	4b9f      	ldr	r3, [pc, #636]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800678a:	69db      	ldr	r3, [r3, #28]
 800678c:	4a9e      	ldr	r2, [pc, #632]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800678e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006792:	61d3      	str	r3, [r2, #28]
 8006794:	4b9c      	ldr	r3, [pc, #624]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006796:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800679a:	4a9b      	ldr	r2, [pc, #620]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800679c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80067a4:	4b98      	ldr	r3, [pc, #608]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067a6:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80067aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067ae:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80067b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067b6:	4a94      	ldr	r2, [pc, #592]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80067b8:	430b      	orrs	r3, r1
 80067ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80067be:	e008      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80067c0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067c4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80067c8:	e003      	b.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067da:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80067de:	663b      	str	r3, [r7, #96]	@ 0x60
 80067e0:	2300      	movs	r3, #0
 80067e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80067e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80067e8:	460b      	mov	r3, r1
 80067ea:	4313      	orrs	r3, r2
 80067ec:	d035      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80067ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067f2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80067f6:	2b30      	cmp	r3, #48	@ 0x30
 80067f8:	d014      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80067fa:	2b30      	cmp	r3, #48	@ 0x30
 80067fc:	d80e      	bhi.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80067fe:	2b20      	cmp	r3, #32
 8006800:	d012      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 8006802:	2b20      	cmp	r3, #32
 8006804:	d80a      	bhi.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d010      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800680a:	2b10      	cmp	r3, #16
 800680c:	d106      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800680e:	4b7e      	ldr	r3, [pc, #504]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006812:	4a7d      	ldr	r2, [pc, #500]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006818:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 800681a:	e008      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006822:	e004      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006824:	bf00      	nop
 8006826:	e002      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006828:	bf00      	nop
 800682a:	e000      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800682c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800682e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006832:	2b00      	cmp	r3, #0
 8006834:	d10d      	bne.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006836:	4b74      	ldr	r3, [pc, #464]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006838:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800683c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006840:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006844:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006848:	4a6f      	ldr	r2, [pc, #444]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800684a:	430b      	orrs	r3, r1
 800684c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006850:	e003      	b.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006852:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006856:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800685a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800685e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006862:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006866:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006868:	2300      	movs	r3, #0
 800686a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800686c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006870:	460b      	mov	r3, r1
 8006872:	4313      	orrs	r3, r2
 8006874:	d033      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006876:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800687a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 8006882:	2b40      	cmp	r3, #64	@ 0x40
 8006884:	d007      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8006886:	e010      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006888:	4b5f      	ldr	r3, [pc, #380]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800688a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800688c:	4a5e      	ldr	r2, [pc, #376]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800688e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006892:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8006894:	e00d      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006896:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800689a:	3308      	adds	r3, #8
 800689c:	4618      	mov	r0, r3
 800689e:	f003 fb75 	bl	8009f8c <RCCEx_PLL2_Config>
 80068a2:	4603      	mov	r3, r0
 80068a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80068a8:	e003      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80068b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10d      	bne.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80068ba:	4b53      	ldr	r3, [pc, #332]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80068bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80068c0:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80068c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068c8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80068cc:	4a4e      	ldr	r2, [pc, #312]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80068ce:	430b      	orrs	r3, r1
 80068d0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80068d4:	e003      	b.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068da:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80068de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e6:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80068ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80068ec:	2300      	movs	r3, #0
 80068ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80068f0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80068f4:	460b      	mov	r3, r1
 80068f6:	4313      	orrs	r3, r2
 80068f8:	d033      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80068fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068fe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 8006906:	2b80      	cmp	r3, #128	@ 0x80
 8006908:	d007      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x17de>
 800690a:	e010      	b.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800690c:	4b3e      	ldr	r3, [pc, #248]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800690e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006910:	4a3d      	ldr	r2, [pc, #244]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006916:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006918:	e00d      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800691a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800691e:	3308      	adds	r3, #8
 8006920:	4618      	mov	r0, r3
 8006922:	f003 fb33 	bl	8009f8c <RCCEx_PLL2_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 800692c:	e003      	b.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006936:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10d      	bne.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 800693e:	4b32      	ldr	r3, [pc, #200]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006940:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006944:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006948:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800694c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006950:	4a2d      	ldr	r2, [pc, #180]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006952:	430b      	orrs	r3, r1
 8006954:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006958:	e003      	b.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800695e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006962:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800696e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006970:	2300      	movs	r3, #0
 8006972:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006974:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006978:	460b      	mov	r3, r1
 800697a:	4313      	orrs	r3, r2
 800697c:	d04a      	beq.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800697e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006982:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006986:	2b04      	cmp	r3, #4
 8006988:	d827      	bhi.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x189e>
 800698a:	a201      	add	r2, pc, #4	@ (adr r2, 8006990 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 800698c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006990:	080069a5 	.word	0x080069a5
 8006994:	080069b3 	.word	0x080069b3
 8006998:	080069c7 	.word	0x080069c7
 800699c:	080069e3 	.word	0x080069e3
 80069a0:	080069e3 	.word	0x080069e3
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a4:	4b18      	ldr	r3, [pc, #96]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80069a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a8:	4a17      	ldr	r2, [pc, #92]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80069aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ae:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80069b0:	e018      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069b6:	3308      	adds	r3, #8
 80069b8:	4618      	mov	r0, r3
 80069ba:	f003 fae7 	bl	8009f8c <RCCEx_PLL2_Config>
 80069be:	4603      	mov	r3, r0
 80069c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80069c4:	e00e      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069ca:	3330      	adds	r3, #48	@ 0x30
 80069cc:	4618      	mov	r0, r3
 80069ce:	f003 fb75 	bl	800a0bc <RCCEx_PLL3_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80069d8:	e004      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069e0:	e000      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80069e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069e4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d10f      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80069ec:	4b06      	ldr	r3, [pc, #24]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80069ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069f2:	f023 0107 	bic.w	r1, r3, #7
 80069f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069fe:	4a02      	ldr	r2, [pc, #8]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006a00:	430b      	orrs	r3, r1
 8006a02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006a06:	e005      	b.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8006a08:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a10:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006a14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006a20:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a22:	2300      	movs	r3, #0
 8006a24:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a26:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	f000 8081 	beq.w	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 8006a32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a36:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a3a:	2b20      	cmp	r3, #32
 8006a3c:	d85f      	bhi.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006a3e:	a201      	add	r2, pc, #4	@ (adr r2, 8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a44:	08006ac9 	.word	0x08006ac9
 8006a48:	08006aff 	.word	0x08006aff
 8006a4c:	08006aff 	.word	0x08006aff
 8006a50:	08006aff 	.word	0x08006aff
 8006a54:	08006aff 	.word	0x08006aff
 8006a58:	08006aff 	.word	0x08006aff
 8006a5c:	08006aff 	.word	0x08006aff
 8006a60:	08006aff 	.word	0x08006aff
 8006a64:	08006ad7 	.word	0x08006ad7
 8006a68:	08006aff 	.word	0x08006aff
 8006a6c:	08006aff 	.word	0x08006aff
 8006a70:	08006aff 	.word	0x08006aff
 8006a74:	08006aff 	.word	0x08006aff
 8006a78:	08006aff 	.word	0x08006aff
 8006a7c:	08006aff 	.word	0x08006aff
 8006a80:	08006aff 	.word	0x08006aff
 8006a84:	08006aeb 	.word	0x08006aeb
 8006a88:	08006aff 	.word	0x08006aff
 8006a8c:	08006aff 	.word	0x08006aff
 8006a90:	08006aff 	.word	0x08006aff
 8006a94:	08006aff 	.word	0x08006aff
 8006a98:	08006aff 	.word	0x08006aff
 8006a9c:	08006aff 	.word	0x08006aff
 8006aa0:	08006aff 	.word	0x08006aff
 8006aa4:	08006b07 	.word	0x08006b07
 8006aa8:	08006aff 	.word	0x08006aff
 8006aac:	08006aff 	.word	0x08006aff
 8006ab0:	08006aff 	.word	0x08006aff
 8006ab4:	08006aff 	.word	0x08006aff
 8006ab8:	08006aff 	.word	0x08006aff
 8006abc:	08006aff 	.word	0x08006aff
 8006ac0:	08006aff 	.word	0x08006aff
 8006ac4:	08006b07 	.word	0x08006b07
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac8:	4bab      	ldr	r3, [pc, #684]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006acc:	4aaa      	ldr	r2, [pc, #680]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006ace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ad2:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006ad4:	e018      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ad6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ada:	3308      	adds	r3, #8
 8006adc:	4618      	mov	r0, r3
 8006ade:	f003 fa55 	bl	8009f8c <RCCEx_PLL2_Config>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006ae8:	e00e      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006aea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aee:	3330      	adds	r3, #48	@ 0x30
 8006af0:	4618      	mov	r0, r3
 8006af2:	f003 fae3 	bl	800a0bc <RCCEx_PLL3_Config>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006afc:	e004      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b04:	e000      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 8006b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10d      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006b10:	4b99      	ldr	r3, [pc, #612]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006b16:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006b1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b1e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b22:	4a95      	ldr	r2, [pc, #596]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b24:	430b      	orrs	r3, r1
 8006b26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006b2a:	e003      	b.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b30:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006b40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006b42:	2300      	movs	r3, #0
 8006b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d04e      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006b50:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b5c:	d02e      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006b5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b62:	d827      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006b64:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b66:	d02b      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006b68:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b6a:	d823      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006b6c:	2b80      	cmp	r3, #128	@ 0x80
 8006b6e:	d017      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006b70:	2b80      	cmp	r3, #128	@ 0x80
 8006b72:	d81f      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d002      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006b78:	2b40      	cmp	r3, #64	@ 0x40
 8006b7a:	d007      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006b7c:	e01a      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b7e:	4b7e      	ldr	r3, [pc, #504]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b82:	4a7d      	ldr	r2, [pc, #500]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b88:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006b8a:	e01a      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b90:	3308      	adds	r3, #8
 8006b92:	4618      	mov	r0, r3
 8006b94:	f003 f9fa 	bl	8009f8c <RCCEx_PLL2_Config>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006b9e:	e010      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ba0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ba4:	3330      	adds	r3, #48	@ 0x30
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f003 fa88 	bl	800a0bc <RCCEx_PLL3_Config>
 8006bac:	4603      	mov	r3, r0
 8006bae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8006bb2:	e006      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006bba:	e002      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006bbc:	bf00      	nop
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8006bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10d      	bne.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006bca:	4b6b      	ldr	r3, [pc, #428]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bd0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006bd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bdc:	4a66      	ldr	r2, [pc, #408]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006bde:	430b      	orrs	r3, r1
 8006be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006be4:	e003      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006bee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006bfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c00:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006c04:	460b      	mov	r3, r1
 8006c06:	4313      	orrs	r3, r2
 8006c08:	d055      	beq.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006c0a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006c12:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006c16:	d031      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006c18:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006c1c:	d82a      	bhi.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006c1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c22:	d02d      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 8006c24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c28:	d824      	bhi.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006c2a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006c2e:	d029      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006c30:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006c34:	d81e      	bhi.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006c36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c3a:	d011      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006c3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c40:	d818      	bhi.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d020      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8006c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c4a:	d113      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c50:	3308      	adds	r3, #8
 8006c52:	4618      	mov	r0, r3
 8006c54:	f003 f99a 	bl	8009f8c <RCCEx_PLL2_Config>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006c5e:	e014      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c64:	3330      	adds	r3, #48	@ 0x30
 8006c66:	4618      	mov	r0, r3
 8006c68:	f003 fa28 	bl	800a0bc <RCCEx_PLL3_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006c72:	e00a      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c7a:	e006      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006c7c:	bf00      	nop
 8006c7e:	e004      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006c80:	bf00      	nop
 8006c82:	e002      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006c84:	bf00      	nop
 8006c86:	e000      	b.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c8a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d10d      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006c92:	4b39      	ldr	r3, [pc, #228]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c98:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006c9c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ca0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8006ca4:	4a34      	ldr	r2, [pc, #208]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006ca6:	430b      	orrs	r3, r1
 8006ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006cac:	e003      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cb2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006cb6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbe:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cc8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	d058      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8006cd2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006cda:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006cde:	d031      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8006ce0:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006ce4:	d82a      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006ce6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cea:	d02d      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006cec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006cf0:	d824      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006cf2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006cf6:	d029      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8006cf8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006cfc:	d81e      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006cfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d02:	d011      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8006d04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d08:	d818      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d020      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8006d0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d12:	d113      	bne.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d18:	3308      	adds	r3, #8
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f003 f936 	bl	8009f8c <RCCEx_PLL2_Config>
 8006d20:	4603      	mov	r3, r0
 8006d22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006d26:	e014      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d2c:	3330      	adds	r3, #48	@ 0x30
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f003 f9c4 	bl	800a0bc <RCCEx_PLL3_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006d3a:	e00a      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d42:	e006      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006d44:	bf00      	nop
 8006d46:	e004      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006d48:	bf00      	nop
 8006d4a:	e002      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006d4c:	bf00      	nop
 8006d4e:	e000      	b.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006d50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d110      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006d5a:	4b07      	ldr	r3, [pc, #28]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d60:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8006d64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d6c:	4902      	ldr	r1, [pc, #8]	@ (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006d74:	e006      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8006d76:	bf00      	nop
 8006d78:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d80:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	6239      	str	r1, [r7, #32]
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d96:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	d055      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8006da0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006da8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006dac:	d031      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8006dae:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006db2:	d82a      	bhi.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006db4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006db8:	d02d      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8006dba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006dbe:	d824      	bhi.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006dc0:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006dc4:	d029      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8006dc6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006dca:	d81e      	bhi.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd0:	d011      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8006dd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd6:	d818      	bhi.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d020      	beq.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8006ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006de0:	d113      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006de2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006de6:	3308      	adds	r3, #8
 8006de8:	4618      	mov	r0, r3
 8006dea:	f003 f8cf 	bl	8009f8c <RCCEx_PLL2_Config>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006df4:	e014      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006df6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dfa:	3330      	adds	r3, #48	@ 0x30
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f003 f95d 	bl	800a0bc <RCCEx_PLL3_Config>
 8006e02:	4603      	mov	r3, r0
 8006e04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006e08:	e00a      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e10:	e006      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006e12:	bf00      	nop
 8006e14:	e004      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006e16:	bf00      	nop
 8006e18:	e002      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006e1a:	bf00      	nop
 8006e1c:	e000      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e20:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d10d      	bne.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006e28:	4b88      	ldr	r3, [pc, #544]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e2e:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8006e32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e3a:	4984      	ldr	r1, [pc, #528]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006e42:	e003      	b.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e44:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e48:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006e4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	2100      	movs	r1, #0
 8006e56:	61b9      	str	r1, [r7, #24]
 8006e58:	f003 0302 	and.w	r3, r3, #2
 8006e5c:	61fb      	str	r3, [r7, #28]
 8006e5e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006e62:	460b      	mov	r3, r1
 8006e64:	4313      	orrs	r3, r2
 8006e66:	d03d      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e6c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d81c      	bhi.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8006e74:	a201      	add	r2, pc, #4	@ (adr r2, 8006e7c <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006eb7 	.word	0x08006eb7
 8006e80:	08006e8d 	.word	0x08006e8d
 8006e84:	08006e9b 	.word	0x08006e9b
 8006e88:	08006eb7 	.word	0x08006eb7
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e8c:	4b6f      	ldr	r3, [pc, #444]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e90:	4a6e      	ldr	r2, [pc, #440]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e96:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8006e98:	e00e      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006e9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f003 f873 	bl	8009f8c <RCCEx_PLL2_Config>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8006eac:	e004      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006eb4:	e000      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8006eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d10d      	bne.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006ec0:	4b62      	ldr	r3, [pc, #392]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ec2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006ec6:	f023 0203 	bic.w	r2, r3, #3
 8006eca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ece:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006ed2:	495e      	ldr	r1, [pc, #376]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006eda:	e003      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006edc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006ee0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006ee4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	2100      	movs	r1, #0
 8006eee:	6139      	str	r1, [r7, #16]
 8006ef0:	f003 0304 	and.w	r3, r3, #4
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006efa:	460b      	mov	r3, r1
 8006efc:	4313      	orrs	r3, r2
 8006efe:	d03a      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006f00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f0c:	d00e      	beq.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8006f0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f12:	d815      	bhi.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d017      	beq.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006f18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f1c:	d110      	bne.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f22:	4a4a      	ldr	r2, [pc, #296]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f28:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006f2a:	e00e      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f2c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f30:	3308      	adds	r3, #8
 8006f32:	4618      	mov	r0, r3
 8006f34:	f003 f82a 	bl	8009f8c <RCCEx_PLL2_Config>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006f3e:	e004      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f46:	e000      	b.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10d      	bne.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006f52:	4b3e      	ldr	r3, [pc, #248]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006f58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006f5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f60:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006f64:	4939      	ldr	r1, [pc, #228]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006f6c:	e003      	b.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f72:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	2100      	movs	r1, #0
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	f003 0310 	and.w	r3, r3, #16
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	d038      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006f92:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f96:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006f9a:	2b30      	cmp	r3, #48	@ 0x30
 8006f9c:	d01b      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8006f9e:	2b30      	cmp	r3, #48	@ 0x30
 8006fa0:	d815      	bhi.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8006fa2:	2b10      	cmp	r3, #16
 8006fa4:	d002      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8006fa6:	2b20      	cmp	r3, #32
 8006fa8:	d007      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006faa:	e010      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fac:	4b27      	ldr	r3, [pc, #156]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fb0:	4a26      	ldr	r2, [pc, #152]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006fb6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006fb8:	e00e      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006fba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fbe:	3330      	adds	r3, #48	@ 0x30
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f003 f87b 	bl	800a0bc <RCCEx_PLL3_Config>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006fcc:	e004      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fd4:	e000      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8006fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fd8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10d      	bne.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006fe2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006fe6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006fea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fee:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006ff2:	4916      	ldr	r1, [pc, #88]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006ffa:	e003      	b.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ffc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007000:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007004:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	2100      	movs	r1, #0
 800700e:	6039      	str	r1, [r7, #0]
 8007010:	f003 0308 	and.w	r3, r3, #8
 8007014:	607b      	str	r3, [r7, #4]
 8007016:	e9d7 1200 	ldrd	r1, r2, [r7]
 800701a:	460b      	mov	r3, r1
 800701c:	4313      	orrs	r3, r2
 800701e:	d00c      	beq.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8007020:	4b0a      	ldr	r3, [pc, #40]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007026:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800702a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800702e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8007032:	4906      	ldr	r1, [pc, #24]	@ (800704c <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007034:	4313      	orrs	r3, r2
 8007036:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 800703a:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 800703e:	4618      	mov	r0, r3
 8007040:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8007044:	46bd      	mov	sp, r7
 8007046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800704a:	bf00      	nop
 800704c:	44020c00 	.word	0x44020c00

08007050 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007050:	b480      	push	{r7}
 8007052:	b08b      	sub	sp, #44	@ 0x2c
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007058:	4bae      	ldr	r3, [pc, #696]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800705a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800705c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007060:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007062:	4bac      	ldr	r3, [pc, #688]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800706c:	4ba9      	ldr	r3, [pc, #676]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800706e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007070:	0a1b      	lsrs	r3, r3, #8
 8007072:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007076:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007078:	4ba6      	ldr	r3, [pc, #664]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800707a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007084:	4ba3      	ldr	r3, [pc, #652]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007088:	08db      	lsrs	r3, r3, #3
 800708a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	fb02 f303 	mul.w	r3, r2, r3
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 8126 	beq.w	80072f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	2b03      	cmp	r3, #3
 80070ac:	d053      	beq.n	8007156 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	2b03      	cmp	r3, #3
 80070b2:	d86f      	bhi.n	8007194 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d003      	beq.n	80070c2 <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d02b      	beq.n	8007118 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80070c0:	e068      	b.n	8007194 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80070c2:	4b94      	ldr	r3, [pc, #592]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	08db      	lsrs	r3, r3, #3
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	4a92      	ldr	r2, [pc, #584]	@ (8007318 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80070ce:	fa22 f303 	lsr.w	r3, r2, r3
 80070d2:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	ee07 3a90 	vmov	s15, r3
 80070da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	ee07 3a90 	vmov	s15, r3
 80070e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ec:	6a3b      	ldr	r3, [r7, #32]
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070f6:	ed97 6a04 	vldr	s12, [r7, #16]
 80070fa:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800731c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80070fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007106:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800710a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800710e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007112:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007116:	e068      	b.n	80071ea <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007122:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007320 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8007126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	ee07 3a90 	vmov	s15, r3
 8007130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007134:	ed97 6a04 	vldr	s12, [r7, #16]
 8007138:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800731c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800713c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007140:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007144:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007148:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800714c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007150:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007154:	e049      	b.n	80071ea <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007156:	69bb      	ldr	r3, [r7, #24]
 8007158:	ee07 3a90 	vmov	s15, r3
 800715c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007160:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007324 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8007164:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	ee07 3a90 	vmov	s15, r3
 800716e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007172:	ed97 6a04 	vldr	s12, [r7, #16]
 8007176:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800731c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 800717a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800717e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800718a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800718e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007192:	e02a      	b.n	80071ea <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007194:	4b5f      	ldr	r3, [pc, #380]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	08db      	lsrs	r3, r3, #3
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	4a5e      	ldr	r2, [pc, #376]	@ (8007318 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80071a0:	fa22 f303 	lsr.w	r3, r2, r3
 80071a4:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	ee07 3a90 	vmov	s15, r3
 80071b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80071cc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800731c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 80071d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80071e8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80071ea:	4b4a      	ldr	r3, [pc, #296]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80071f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071f6:	d121      	bne.n	800723c <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80071f8:	4b46      	ldr	r3, [pc, #280]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80071fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d017      	beq.n	8007234 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007204:	4b43      	ldr	r3, [pc, #268]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007206:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007208:	0a5b      	lsrs	r3, r3, #9
 800720a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800720e:	ee07 3a90 	vmov	s15, r3
 8007212:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8007216:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800721a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800721e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800722a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	601a      	str	r2, [r3, #0]
 8007232:	e006      	b.n	8007242 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	e002      	b.n	8007242 <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007242:	4b34      	ldr	r3, [pc, #208]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800724a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800724e:	d121      	bne.n	8007294 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007250:	4b30      	ldr	r3, [pc, #192]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d017      	beq.n	800728c <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800725c:	4b2d      	ldr	r3, [pc, #180]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800725e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007260:	0c1b      	lsrs	r3, r3, #16
 8007262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800726e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007272:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007276:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800727a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800727e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007282:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	605a      	str	r2, [r3, #4]
 800728a:	e006      	b.n	800729a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	605a      	str	r2, [r3, #4]
 8007292:	e002      	b.n	800729a <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800729a:	4b1e      	ldr	r3, [pc, #120]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072a2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072a6:	d121      	bne.n	80072ec <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80072a8:	4b1a      	ldr	r3, [pc, #104]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80072aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d017      	beq.n	80072e4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80072b4:	4b17      	ldr	r3, [pc, #92]	@ (8007314 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80072b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072b8:	0e1b      	lsrs	r3, r3, #24
 80072ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072be:	ee07 3a90 	vmov	s15, r3
 80072c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 80072c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072ca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 80072ce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80072d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072da:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80072e2:	e010      	b.n	8007306 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	609a      	str	r2, [r3, #8]
}
 80072ea:	e00c      	b.n	8007306 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	609a      	str	r2, [r3, #8]
}
 80072f2:	e008      	b.n	8007306 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	609a      	str	r2, [r3, #8]
}
 8007306:	bf00      	nop
 8007308:	372c      	adds	r7, #44	@ 0x2c
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	44020c00 	.word	0x44020c00
 8007318:	03d09000 	.word	0x03d09000
 800731c:	46000000 	.word	0x46000000
 8007320:	4a742400 	.word	0x4a742400
 8007324:	4af42400 	.word	0x4af42400

08007328 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8007328:	b480      	push	{r7}
 800732a:	b08b      	sub	sp, #44	@ 0x2c
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007330:	4bae      	ldr	r3, [pc, #696]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007338:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800733a:	4bac      	ldr	r3, [pc, #688]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800733c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733e:	f003 0303 	and.w	r3, r3, #3
 8007342:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007344:	4ba9      	ldr	r3, [pc, #676]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007348:	0a1b      	lsrs	r3, r3, #8
 800734a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800734e:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007350:	4ba6      	ldr	r3, [pc, #664]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007354:	091b      	lsrs	r3, r3, #4
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800735c:	4ba3      	ldr	r3, [pc, #652]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800735e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007360:	08db      	lsrs	r3, r3, #3
 8007362:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	fb02 f303 	mul.w	r3, r2, r3
 800736c:	ee07 3a90 	vmov	s15, r3
 8007370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007374:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007378:	69bb      	ldr	r3, [r7, #24]
 800737a:	2b00      	cmp	r3, #0
 800737c:	f000 8126 	beq.w	80075cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	2b03      	cmp	r3, #3
 8007384:	d053      	beq.n	800742e <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	2b03      	cmp	r3, #3
 800738a:	d86f      	bhi.n	800746c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800738c:	69fb      	ldr	r3, [r7, #28]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d003      	beq.n	800739a <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	2b02      	cmp	r3, #2
 8007396:	d02b      	beq.n	80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8007398:	e068      	b.n	800746c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800739a:	4b94      	ldr	r3, [pc, #592]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	08db      	lsrs	r3, r3, #3
 80073a0:	f003 0303 	and.w	r3, r3, #3
 80073a4:	4a92      	ldr	r2, [pc, #584]	@ (80075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80073a6:	fa22 f303 	lsr.w	r3, r2, r3
 80073aa:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	ee07 3a90 	vmov	s15, r3
 80073b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	ee07 3a90 	vmov	s15, r3
 80073bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	ee07 3a90 	vmov	s15, r3
 80073ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ce:	ed97 6a04 	vldr	s12, [r7, #16]
 80073d2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80073d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80073e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ea:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80073ee:	e068      	b.n	80074c2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	ee07 3a90 	vmov	s15, r3
 80073f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fa:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80073fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	ee07 3a90 	vmov	s15, r3
 8007408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740c:	ed97 6a04 	vldr	s12, [r7, #16]
 8007410:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007414:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007418:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007428:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800742c:	e049      	b.n	80074c2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	ee07 3a90 	vmov	s15, r3
 8007434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007438:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80075fc <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 800743c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	ee07 3a90 	vmov	s15, r3
 8007446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744a:	ed97 6a04 	vldr	s12, [r7, #16]
 800744e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8007452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800745e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007466:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800746a:	e02a      	b.n	80074c2 <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800746c:	4b5f      	ldr	r3, [pc, #380]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	08db      	lsrs	r3, r3, #3
 8007472:	f003 0303 	and.w	r3, r3, #3
 8007476:	4a5e      	ldr	r2, [pc, #376]	@ (80075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007478:	fa22 f303 	lsr.w	r3, r2, r3
 800747c:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	ee07 3a90 	vmov	s15, r3
 8007484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007496:	6a3b      	ldr	r3, [r7, #32]
 8007498:	ee07 3a90 	vmov	s15, r3
 800749c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80074a4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80074a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80074b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80074c0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074c2:	4b4a      	ldr	r3, [pc, #296]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80074ce:	d121      	bne.n	8007514 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80074d0:	4b46      	ldr	r3, [pc, #280]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80074d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d017      	beq.n	800750c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80074dc:	4b43      	ldr	r3, [pc, #268]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80074de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e0:	0a5b      	lsrs	r3, r3, #9
 80074e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80074ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074f2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80074f6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80074fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007502:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	601a      	str	r2, [r3, #0]
 800750a:	e006      	b.n	800751a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	e002      	b.n	800751a <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800751a:	4b34      	ldr	r3, [pc, #208]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007522:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007526:	d121      	bne.n	800756c <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007528:	4b30      	ldr	r3, [pc, #192]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800752a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d017      	beq.n	8007564 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007534:	4b2d      	ldr	r3, [pc, #180]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007538:	0c1b      	lsrs	r3, r3, #16
 800753a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800753e:	ee07 3a90 	vmov	s15, r3
 8007542:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007546:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800754a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800754e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007552:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007556:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800755a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	605a      	str	r2, [r3, #4]
 8007562:	e006      	b.n	8007572 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	605a      	str	r2, [r3, #4]
 800756a:	e002      	b.n	8007572 <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007572:	4b1e      	ldr	r3, [pc, #120]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800757a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800757e:	d121      	bne.n	80075c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007580:	4b1a      	ldr	r3, [pc, #104]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007584:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d017      	beq.n	80075bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800758c:	4b17      	ldr	r3, [pc, #92]	@ (80075ec <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800758e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007590:	0e1b      	lsrs	r3, r3, #24
 8007592:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800759e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80075a2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80075a6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80075aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075ba:	e010      	b.n	80075de <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	609a      	str	r2, [r3, #8]
}
 80075c2:	e00c      	b.n	80075de <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	609a      	str	r2, [r3, #8]
}
 80075ca:	e008      	b.n	80075de <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	609a      	str	r2, [r3, #8]
}
 80075de:	bf00      	nop
 80075e0:	372c      	adds	r7, #44	@ 0x2c
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
 80075ea:	bf00      	nop
 80075ec:	44020c00 	.word	0x44020c00
 80075f0:	03d09000 	.word	0x03d09000
 80075f4:	46000000 	.word	0x46000000
 80075f8:	4a742400 	.word	0x4a742400
 80075fc:	4af42400 	.word	0x4af42400

08007600 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007600:	b480      	push	{r7}
 8007602:	b08b      	sub	sp, #44	@ 0x2c
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007608:	4bae      	ldr	r3, [pc, #696]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800760a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800760c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007610:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007612:	4bac      	ldr	r3, [pc, #688]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007616:	f003 0303 	and.w	r3, r3, #3
 800761a:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800761c:	4ba9      	ldr	r3, [pc, #676]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800761e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007620:	0a1b      	lsrs	r3, r3, #8
 8007622:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007626:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007628:	4ba6      	ldr	r3, [pc, #664]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800762a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800762c:	091b      	lsrs	r3, r3, #4
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007634:	4ba3      	ldr	r3, [pc, #652]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007638:	08db      	lsrs	r3, r3, #3
 800763a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	fb02 f303 	mul.w	r3, r2, r3
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	2b00      	cmp	r3, #0
 8007654:	f000 8126 	beq.w	80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	2b03      	cmp	r3, #3
 800765c:	d053      	beq.n	8007706 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	2b03      	cmp	r3, #3
 8007662:	d86f      	bhi.n	8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d003      	beq.n	8007672 <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	2b02      	cmp	r3, #2
 800766e:	d02b      	beq.n	80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007670:	e068      	b.n	8007744 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007672:	4b94      	ldr	r3, [pc, #592]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	08db      	lsrs	r3, r3, #3
 8007678:	f003 0303 	and.w	r3, r3, #3
 800767c:	4a92      	ldr	r2, [pc, #584]	@ (80078c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800767e:	fa22 f303 	lsr.w	r3, r2, r3
 8007682:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	ee07 3a90 	vmov	s15, r3
 8007694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769c:	6a3b      	ldr	r3, [r7, #32]
 800769e:	ee07 3a90 	vmov	s15, r3
 80076a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a6:	ed97 6a04 	vldr	s12, [r7, #16]
 80076aa:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80076ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076c2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80076c6:	e068      	b.n	800779a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076d2:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80078d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80076d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	ee07 3a90 	vmov	s15, r3
 80076e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e4:	ed97 6a04 	vldr	s12, [r7, #16]
 80076e8:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80076ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007700:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007704:	e049      	b.n	800779a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	ee07 3a90 	vmov	s15, r3
 800770c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007710:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80078d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 8007714:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007722:	ed97 6a04 	vldr	s12, [r7, #16]
 8007726:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800772a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800773a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007742:	e02a      	b.n	800779a <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007744:	4b5f      	ldr	r3, [pc, #380]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	08db      	lsrs	r3, r3, #3
 800774a:	f003 0303 	and.w	r3, r3, #3
 800774e:	4a5e      	ldr	r2, [pc, #376]	@ (80078c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007750:	fa22 f303 	lsr.w	r3, r2, r3
 8007754:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	ee07 3a90 	vmov	s15, r3
 800775c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	ee07 3a90 	vmov	s15, r3
 8007774:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007778:	ed97 6a04 	vldr	s12, [r7, #16]
 800777c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80078cc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007780:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007784:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007788:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800778c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007790:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007794:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007798:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800779a:	4b4a      	ldr	r3, [pc, #296]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077a6:	d121      	bne.n	80077ec <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80077a8:	4b46      	ldr	r3, [pc, #280]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80077aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d017      	beq.n	80077e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80077b4:	4b43      	ldr	r3, [pc, #268]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80077b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077b8:	0a5b      	lsrs	r3, r3, #9
 80077ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80077c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80077ca:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80077ce:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80077d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077da:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	e006      	b.n	80077f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	e002      	b.n	80077f2 <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80077f2:	4b34      	ldr	r3, [pc, #208]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80077fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077fe:	d121      	bne.n	8007844 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007800:	4b30      	ldr	r3, [pc, #192]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007808:	2b00      	cmp	r3, #0
 800780a:	d017      	beq.n	800783c <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800780c:	4b2d      	ldr	r3, [pc, #180]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800780e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007810:	0c1b      	lsrs	r3, r3, #16
 8007812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007816:	ee07 3a90 	vmov	s15, r3
 800781a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800781e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007822:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007826:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800782a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800782e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007832:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	605a      	str	r2, [r3, #4]
 800783a:	e006      	b.n	800784a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	605a      	str	r2, [r3, #4]
 8007842:	e002      	b.n	800784a <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800784a:	4b1e      	ldr	r3, [pc, #120]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007856:	d121      	bne.n	800789c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007858:	4b1a      	ldr	r3, [pc, #104]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800785a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800785c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d017      	beq.n	8007894 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007864:	4b17      	ldr	r3, [pc, #92]	@ (80078c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007868:	0e1b      	lsrs	r3, r3, #24
 800786a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007876:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800787a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800787e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800788a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007892:	e010      	b.n	80078b6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2200      	movs	r2, #0
 8007898:	609a      	str	r2, [r3, #8]
}
 800789a:	e00c      	b.n	80078b6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	609a      	str	r2, [r3, #8]
}
 80078a2:	e008      	b.n	80078b6 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	609a      	str	r2, [r3, #8]
}
 80078b6:	bf00      	nop
 80078b8:	372c      	adds	r7, #44	@ 0x2c
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	44020c00 	.word	0x44020c00
 80078c8:	03d09000 	.word	0x03d09000
 80078cc:	46000000 	.word	0x46000000
 80078d0:	4a742400 	.word	0x4a742400
 80078d4:	4af42400 	.word	0x4af42400

080078d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80078d8:	b590      	push	{r4, r7, lr}
 80078da:	b08f      	sub	sp, #60	@ 0x3c
 80078dc:	af00      	add	r7, sp, #0
 80078de:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80078e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078e6:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80078ea:	4321      	orrs	r1, r4
 80078ec:	d150      	bne.n	8007990 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80078ee:	4b26      	ldr	r3, [pc, #152]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80078f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078f8:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80078fa:	4b23      	ldr	r3, [pc, #140]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80078fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b02      	cmp	r3, #2
 8007906:	d108      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800790a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800790e:	d104      	bne.n	800791a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007910:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007914:	637b      	str	r3, [r7, #52]	@ 0x34
 8007916:	f002 bb2a 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800791a:	4b1b      	ldr	r3, [pc, #108]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800791c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007924:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007928:	d108      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 800792a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007930:	d104      	bne.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 8007932:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8007936:	637b      	str	r3, [r7, #52]	@ 0x34
 8007938:	f002 bb19 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 800793c:	4b12      	ldr	r3, [pc, #72]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007944:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007948:	d119      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 800794a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800794c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007950:	d115      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007952:	4b0d      	ldr	r3, [pc, #52]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 800795a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800795e:	d30a      	bcc.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007960:	4b09      	ldr	r3, [pc, #36]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	0a1b      	lsrs	r3, r3, #8
 8007966:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800796a:	4a08      	ldr	r2, [pc, #32]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800796c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007970:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007972:	f002 bafc 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800797a:	f002 baf8 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	637b      	str	r3, [r7, #52]	@ 0x34
 8007982:	f002 baf4 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007986:	bf00      	nop
 8007988:	44020c00 	.word	0x44020c00
 800798c:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8007990:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007994:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8007998:	ea50 0104 	orrs.w	r1, r0, r4
 800799c:	f001 8275 	beq.w	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80079a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079a4:	2801      	cmp	r0, #1
 80079a6:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80079aa:	f082 82dd 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079b2:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80079b6:	ea50 0104 	orrs.w	r1, r0, r4
 80079ba:	f001 816c 	beq.w	8008c96 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80079be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079c2:	2801      	cmp	r0, #1
 80079c4:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80079c8:	f082 82ce 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079d0:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80079d4:	ea50 0104 	orrs.w	r1, r0, r4
 80079d8:	f001 8602 	beq.w	80095e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80079dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079e0:	2801      	cmp	r0, #1
 80079e2:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80079e6:	f082 82bf 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80079ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079ee:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80079f2:	ea50 0104 	orrs.w	r1, r0, r4
 80079f6:	f001 854c 	beq.w	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80079fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80079fe:	2801      	cmp	r0, #1
 8007a00:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 8007a04:	f082 82b0 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a08:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a0c:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8007a10:	ea50 0104 	orrs.w	r1, r0, r4
 8007a14:	f001 849e 	beq.w	8009354 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a1c:	2801      	cmp	r0, #1
 8007a1e:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 8007a22:	f082 82a1 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a2a:	f1a1 0420 	sub.w	r4, r1, #32
 8007a2e:	ea50 0104 	orrs.w	r1, r0, r4
 8007a32:	f001 83e8 	beq.w	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 8007a36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a3a:	2801      	cmp	r0, #1
 8007a3c:	f171 0120 	sbcs.w	r1, r1, #32
 8007a40:	f082 8292 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a44:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a48:	f1a1 0410 	sub.w	r4, r1, #16
 8007a4c:	ea50 0104 	orrs.w	r1, r0, r4
 8007a50:	f002 8256 	beq.w	8009f00 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8007a54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a58:	2801      	cmp	r0, #1
 8007a5a:	f171 0110 	sbcs.w	r1, r1, #16
 8007a5e:	f082 8283 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a66:	f1a1 0408 	sub.w	r4, r1, #8
 8007a6a:	ea50 0104 	orrs.w	r1, r0, r4
 8007a6e:	f002 81cc 	beq.w	8009e0a <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 8007a72:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a76:	2801      	cmp	r0, #1
 8007a78:	f171 0108 	sbcs.w	r1, r1, #8
 8007a7c:	f082 8274 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a80:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a84:	1f0c      	subs	r4, r1, #4
 8007a86:	ea50 0104 	orrs.w	r1, r0, r4
 8007a8a:	f001 8648 	beq.w	800971e <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8007a8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a92:	2801      	cmp	r0, #1
 8007a94:	f171 0104 	sbcs.w	r1, r1, #4
 8007a98:	f082 8266 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aa0:	1e8c      	subs	r4, r1, #2
 8007aa2:	ea50 0104 	orrs.w	r1, r0, r4
 8007aa6:	f002 8143 	beq.w	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8007aaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aae:	2801      	cmp	r0, #1
 8007ab0:	f171 0102 	sbcs.w	r1, r1, #2
 8007ab4:	f082 8258 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ab8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007abc:	1e4c      	subs	r4, r1, #1
 8007abe:	ea50 0104 	orrs.w	r1, r0, r4
 8007ac2:	f002 80ce 	beq.w	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8007ac6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007aca:	2801      	cmp	r0, #1
 8007acc:	f171 0101 	sbcs.w	r1, r1, #1
 8007ad0:	f082 824a 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ad8:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8007adc:	4321      	orrs	r1, r4
 8007ade:	f002 8059 	beq.w	8009b94 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 8007ae2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ae6:	4cd9      	ldr	r4, [pc, #868]	@ (8007e4c <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007ae8:	42a0      	cmp	r0, r4
 8007aea:	f171 0100 	sbcs.w	r1, r1, #0
 8007aee:	f082 823b 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007af2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007af6:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007afa:	4321      	orrs	r1, r4
 8007afc:	f001 87d9 	beq.w	8009ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8007b00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b04:	4cd2      	ldr	r4, [pc, #840]	@ (8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 8007b06:	42a0      	cmp	r0, r4
 8007b08:	f171 0100 	sbcs.w	r1, r1, #0
 8007b0c:	f082 822c 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b14:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8007b18:	4321      	orrs	r1, r4
 8007b1a:	f001 8751 	beq.w	80099c0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8007b1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b22:	4ccc      	ldr	r4, [pc, #816]	@ (8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 8007b24:	42a0      	cmp	r0, r4
 8007b26:	f171 0100 	sbcs.w	r1, r1, #0
 8007b2a:	f082 821d 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b2e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b32:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 8007b36:	4321      	orrs	r1, r4
 8007b38:	f001 869a 	beq.w	8009870 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b40:	4cc5      	ldr	r4, [pc, #788]	@ (8007e58 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 8007b42:	42a0      	cmp	r0, r4
 8007b44:	f171 0100 	sbcs.w	r1, r1, #0
 8007b48:	f082 820e 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b50:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8007b54:	4321      	orrs	r1, r4
 8007b56:	f001 8612 	beq.w	800977e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007b5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b5e:	4cbf      	ldr	r4, [pc, #764]	@ (8007e5c <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007b60:	42a0      	cmp	r0, r4
 8007b62:	f171 0100 	sbcs.w	r1, r1, #0
 8007b66:	f082 81ff 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b6a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b6e:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 8007b72:	4321      	orrs	r1, r4
 8007b74:	f002 817e 	beq.w	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007b78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b7c:	4cb8      	ldr	r4, [pc, #736]	@ (8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007b7e:	42a0      	cmp	r0, r4
 8007b80:	f171 0100 	sbcs.w	r1, r1, #0
 8007b84:	f082 81f0 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007b88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b8c:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8007b90:	4321      	orrs	r1, r4
 8007b92:	f000 829e 	beq.w	80080d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8007b96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007b9a:	4cb2      	ldr	r4, [pc, #712]	@ (8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8007b9c:	42a0      	cmp	r0, r4
 8007b9e:	f171 0100 	sbcs.w	r1, r1, #0
 8007ba2:	f082 81e1 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007ba6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007baa:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8007bae:	4321      	orrs	r1, r4
 8007bb0:	f000 826d 	beq.w	800808e <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8007bb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bb8:	4cab      	ldr	r4, [pc, #684]	@ (8007e68 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8007bba:	42a0      	cmp	r0, r4
 8007bbc:	f171 0100 	sbcs.w	r1, r1, #0
 8007bc0:	f082 81d2 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007bc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bc8:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8007bcc:	4321      	orrs	r1, r4
 8007bce:	f001 800d 	beq.w	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 8007bd2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bd6:	4ca5      	ldr	r4, [pc, #660]	@ (8007e6c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8007bd8:	42a0      	cmp	r0, r4
 8007bda:	f171 0100 	sbcs.w	r1, r1, #0
 8007bde:	f082 81c3 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007be2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007be6:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007bea:	4321      	orrs	r1, r4
 8007bec:	f000 81d0 	beq.w	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007bf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007bf4:	4c9e      	ldr	r4, [pc, #632]	@ (8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007bf6:	42a0      	cmp	r0, r4
 8007bf8:	f171 0100 	sbcs.w	r1, r1, #0
 8007bfc:	f082 81b4 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c04:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8007c08:	4321      	orrs	r1, r4
 8007c0a:	f000 8142 	beq.w	8007e92 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007c0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c12:	4c98      	ldr	r4, [pc, #608]	@ (8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007c14:	42a0      	cmp	r0, r4
 8007c16:	f171 0100 	sbcs.w	r1, r1, #0
 8007c1a:	f082 81a5 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c22:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 8007c26:	4321      	orrs	r1, r4
 8007c28:	f001 824e 	beq.w	80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c30:	4c91      	ldr	r4, [pc, #580]	@ (8007e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007c32:	42a0      	cmp	r0, r4
 8007c34:	f171 0100 	sbcs.w	r1, r1, #0
 8007c38:	f082 8196 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c40:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8007c44:	4321      	orrs	r1, r4
 8007c46:	f001 8197 	beq.w	8008f78 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007c4a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c4e:	4c8b      	ldr	r4, [pc, #556]	@ (8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007c50:	42a0      	cmp	r0, r4
 8007c52:	f171 0100 	sbcs.w	r1, r1, #0
 8007c56:	f082 8187 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c5a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c5e:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8007c62:	4321      	orrs	r1, r4
 8007c64:	f001 8154 	beq.w	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007c68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c6c:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007c70:	f171 0100 	sbcs.w	r1, r1, #0
 8007c74:	f082 8178 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c7c:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007c80:	4321      	orrs	r1, r4
 8007c82:	f001 80b7 	beq.w	8008df4 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8007c86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c8a:	f248 0401 	movw	r4, #32769	@ 0x8001
 8007c8e:	42a0      	cmp	r0, r4
 8007c90:	f171 0100 	sbcs.w	r1, r1, #0
 8007c94:	f082 8168 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007c98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007c9c:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8007ca0:	4321      	orrs	r1, r4
 8007ca2:	f001 8064 	beq.w	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8007ca6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007caa:	f244 0401 	movw	r4, #16385	@ 0x4001
 8007cae:	42a0      	cmp	r0, r4
 8007cb0:	f171 0100 	sbcs.w	r1, r1, #0
 8007cb4:	f082 8158 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cbc:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8007cc0:	4321      	orrs	r1, r4
 8007cc2:	f001 8011 	beq.w	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8007cc6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cca:	f242 0401 	movw	r4, #8193	@ 0x2001
 8007cce:	42a0      	cmp	r0, r4
 8007cd0:	f171 0100 	sbcs.w	r1, r1, #0
 8007cd4:	f082 8148 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cdc:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8007ce0:	4321      	orrs	r1, r4
 8007ce2:	f000 871e 	beq.w	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8007ce6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cea:	f241 0401 	movw	r4, #4097	@ 0x1001
 8007cee:	42a0      	cmp	r0, r4
 8007cf0:	f171 0100 	sbcs.w	r1, r1, #0
 8007cf4:	f082 8138 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007cf8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cfc:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8007d00:	4321      	orrs	r1, r4
 8007d02:	f000 86a8 	beq.w	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8007d06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d0a:	f640 0401 	movw	r4, #2049	@ 0x801
 8007d0e:	42a0      	cmp	r0, r4
 8007d10:	f171 0100 	sbcs.w	r1, r1, #0
 8007d14:	f082 8128 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d1c:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8007d20:	4321      	orrs	r1, r4
 8007d22:	f000 8632 	beq.w	800898a <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8007d26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d2a:	f240 4401 	movw	r4, #1025	@ 0x401
 8007d2e:	42a0      	cmp	r0, r4
 8007d30:	f171 0100 	sbcs.w	r1, r1, #0
 8007d34:	f082 8118 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d38:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d3c:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8007d40:	4321      	orrs	r1, r4
 8007d42:	f000 85b0 	beq.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8007d46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d4a:	f240 2401 	movw	r4, #513	@ 0x201
 8007d4e:	42a0      	cmp	r0, r4
 8007d50:	f171 0100 	sbcs.w	r1, r1, #0
 8007d54:	f082 8108 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d58:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d5c:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8007d60:	4321      	orrs	r1, r4
 8007d62:	f000 8535 	beq.w	80087d0 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8007d66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d6a:	f240 1401 	movw	r4, #257	@ 0x101
 8007d6e:	42a0      	cmp	r0, r4
 8007d70:	f171 0100 	sbcs.w	r1, r1, #0
 8007d74:	f082 80f8 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d7c:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8007d80:	4321      	orrs	r1, r4
 8007d82:	f000 84ba 	beq.w	80086fa <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8007d86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d8a:	2881      	cmp	r0, #129	@ 0x81
 8007d8c:	f171 0100 	sbcs.w	r1, r1, #0
 8007d90:	f082 80ea 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007d94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d98:	2821      	cmp	r0, #33	@ 0x21
 8007d9a:	f171 0100 	sbcs.w	r1, r1, #0
 8007d9e:	d26f      	bcs.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007da0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007da4:	4301      	orrs	r1, r0
 8007da6:	f002 80df 	beq.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007daa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007dae:	1e42      	subs	r2, r0, #1
 8007db0:	f141 33ff 	adc.w	r3, r1, #4294967295
 8007db4:	2a20      	cmp	r2, #32
 8007db6:	f173 0100 	sbcs.w	r1, r3, #0
 8007dba:	f082 80d5 	bcs.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007dbe:	2a1f      	cmp	r2, #31
 8007dc0:	f202 80d2 	bhi.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007dc4:	a101      	add	r1, pc, #4	@ (adr r1, 8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8007dc6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007dca:	bf00      	nop
 8007dcc:	0800812d 	.word	0x0800812d
 8007dd0:	080081f9 	.word	0x080081f9
 8007dd4:	08009f69 	.word	0x08009f69
 8007dd8:	080082b9 	.word	0x080082b9
 8007ddc:	08009f69 	.word	0x08009f69
 8007de0:	08009f69 	.word	0x08009f69
 8007de4:	08009f69 	.word	0x08009f69
 8007de8:	08008389 	.word	0x08008389
 8007dec:	08009f69 	.word	0x08009f69
 8007df0:	08009f69 	.word	0x08009f69
 8007df4:	08009f69 	.word	0x08009f69
 8007df8:	08009f69 	.word	0x08009f69
 8007dfc:	08009f69 	.word	0x08009f69
 8007e00:	08009f69 	.word	0x08009f69
 8007e04:	08009f69 	.word	0x08009f69
 8007e08:	0800846b 	.word	0x0800846b
 8007e0c:	08009f69 	.word	0x08009f69
 8007e10:	08009f69 	.word	0x08009f69
 8007e14:	08009f69 	.word	0x08009f69
 8007e18:	08009f69 	.word	0x08009f69
 8007e1c:	08009f69 	.word	0x08009f69
 8007e20:	08009f69 	.word	0x08009f69
 8007e24:	08009f69 	.word	0x08009f69
 8007e28:	08009f69 	.word	0x08009f69
 8007e2c:	08009f69 	.word	0x08009f69
 8007e30:	08009f69 	.word	0x08009f69
 8007e34:	08009f69 	.word	0x08009f69
 8007e38:	08009f69 	.word	0x08009f69
 8007e3c:	08009f69 	.word	0x08009f69
 8007e40:	08009f69 	.word	0x08009f69
 8007e44:	08009f69 	.word	0x08009f69
 8007e48:	08008541 	.word	0x08008541
 8007e4c:	80000001 	.word	0x80000001
 8007e50:	40000001 	.word	0x40000001
 8007e54:	20000001 	.word	0x20000001
 8007e58:	10000001 	.word	0x10000001
 8007e5c:	08000001 	.word	0x08000001
 8007e60:	04000001 	.word	0x04000001
 8007e64:	00800001 	.word	0x00800001
 8007e68:	00400001 	.word	0x00400001
 8007e6c:	00200001 	.word	0x00200001
 8007e70:	00100001 	.word	0x00100001
 8007e74:	00080001 	.word	0x00080001
 8007e78:	00040001 	.word	0x00040001
 8007e7c:	00020001 	.word	0x00020001
 8007e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e84:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8007e88:	430b      	orrs	r3, r1
 8007e8a:	f000 83c4 	beq.w	8008616 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8007e8e:	f002 b86b 	b.w	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007e92:	4ba1      	ldr	r3, [pc, #644]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007e98:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8007e9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ea4:	d036      	beq.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007eac:	d86b      	bhi.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007eb4:	d02b      	beq.n	8007f0e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007ebc:	d863      	bhi.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ec4:	d01b      	beq.n	8007efe <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ecc:	d85b      	bhi.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d004      	beq.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8007ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007eda:	d008      	beq.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8007edc:	e053      	b.n	8007f86 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ede:	f107 0320 	add.w	r3, r7, #32
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff f8b4 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007eec:	e04e      	b.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007eee:	f107 0314 	add.w	r3, r7, #20
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff fa18 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007efc:	e046      	b.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007efe:	f107 0308 	add.w	r3, r7, #8
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7ff fb7c 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f0c:	e03e      	b.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007f0e:	4b83      	ldr	r3, [pc, #524]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007f10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f12:	e03b      	b.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f14:	4b80      	ldr	r3, [pc, #512]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f1a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f20:	4b7d      	ldr	r3, [pc, #500]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b02      	cmp	r3, #2
 8007f2a:	d10c      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d109      	bne.n	8007f46 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f32:	4b79      	ldr	r3, [pc, #484]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	08db      	lsrs	r3, r3, #3
 8007f38:	f003 0303 	and.w	r3, r3, #3
 8007f3c:	4a78      	ldr	r2, [pc, #480]	@ (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8007f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f44:	e01e      	b.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f46:	4b74      	ldr	r3, [pc, #464]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f52:	d106      	bne.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f5a:	d102      	bne.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007f5c:	4b71      	ldr	r3, [pc, #452]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007f5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f60:	e010      	b.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f62:	4b6d      	ldr	r3, [pc, #436]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f6e:	d106      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f76:	d102      	bne.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007f78:	4b6b      	ldr	r3, [pc, #428]	@ (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f7c:	e002      	b.n	8007f84 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007f82:	e003      	b.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007f84:	e002      	b.n	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007f8a:	bf00      	nop
          }
        }
        break;
 8007f8c:	f001 bfef 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007f90:	4b61      	ldr	r3, [pc, #388]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f96:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8007f9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fa2:	d036      	beq.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007faa:	d86b      	bhi.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007fb2:	d02b      	beq.n	800800c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007fba:	d863      	bhi.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fc2:	d01b      	beq.n	8007ffc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fca:	d85b      	bhi.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d004      	beq.n	8007fdc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007fd8:	d008      	beq.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007fda:	e053      	b.n	8008084 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fdc:	f107 0320 	add.w	r3, r7, #32
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7ff f835 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007fea:	e04e      	b.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fec:	f107 0314 	add.w	r3, r7, #20
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7ff f999 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ffa:	e046      	b.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ffc:	f107 0308 	add.w	r3, r7, #8
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff fafd 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800800a:	e03e      	b.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800800c:	4b43      	ldr	r3, [pc, #268]	@ (800811c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800800e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008010:	e03b      	b.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008012:	4b41      	ldr	r3, [pc, #260]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008018:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800801c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800801e:	4b3e      	ldr	r3, [pc, #248]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b02      	cmp	r3, #2
 8008028:	d10c      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 800802a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800802c:	2b00      	cmp	r3, #0
 800802e:	d109      	bne.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008030:	4b39      	ldr	r3, [pc, #228]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	08db      	lsrs	r3, r3, #3
 8008036:	f003 0303 	and.w	r3, r3, #3
 800803a:	4a39      	ldr	r2, [pc, #228]	@ (8008120 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 800803c:	fa22 f303 	lsr.w	r3, r2, r3
 8008040:	637b      	str	r3, [r7, #52]	@ 0x34
 8008042:	e01e      	b.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008044:	4b34      	ldr	r3, [pc, #208]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800804c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008050:	d106      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008058:	d102      	bne.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800805a:	4b32      	ldr	r3, [pc, #200]	@ (8008124 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 800805c:	637b      	str	r3, [r7, #52]	@ 0x34
 800805e:	e010      	b.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008060:	4b2d      	ldr	r3, [pc, #180]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008068:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800806c:	d106      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 800806e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008070:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008074:	d102      	bne.n	800807c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008076:	4b2c      	ldr	r3, [pc, #176]	@ (8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008078:	637b      	str	r3, [r7, #52]	@ 0x34
 800807a:	e002      	b.n	8008082 <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008080:	e003      	b.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8008082:	e002      	b.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008088:	bf00      	nop
          }
        }
        break;
 800808a:	f001 bf70 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800808e:	4b22      	ldr	r3, [pc, #136]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008090:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008098:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	2b00      	cmp	r3, #0
 800809e:	d108      	bne.n	80080b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080a0:	f107 0320 	add.w	r3, r7, #32
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fe ffd3 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80080ae:	f001 bf5e 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 80080b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b4:	2b40      	cmp	r3, #64	@ 0x40
 80080b6:	d108      	bne.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080b8:	f107 0314 	add.w	r3, r7, #20
 80080bc:	4618      	mov	r0, r3
 80080be:	f7ff f933 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080c6:	f001 bf52 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80080ce:	f001 bf4e 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 80080d2:	4b11      	ldr	r3, [pc, #68]	@ (8008118 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80080d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80080d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080dc:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 80080de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d108      	bne.n	80080f6 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080e4:	f107 0320 	add.w	r3, r7, #32
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fe ffb1 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80080ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80080f2:	f001 bf3c 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 80080f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f8:	2b80      	cmp	r3, #128	@ 0x80
 80080fa:	d108      	bne.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080fc:	f107 0314 	add.w	r3, r7, #20
 8008100:	4618      	mov	r0, r3
 8008102:	f7ff f911 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800810a:	f001 bf30 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800810e:	2300      	movs	r3, #0
 8008110:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008112:	f001 bf2c 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008116:	bf00      	nop
 8008118:	44020c00 	.word	0x44020c00
 800811c:	00bb8000 	.word	0x00bb8000
 8008120:	03d09000 	.word	0x03d09000
 8008124:	003d0900 	.word	0x003d0900
 8008128:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800812c:	4b9d      	ldr	r3, [pc, #628]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800812e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008132:	f003 0307 	and.w	r3, r3, #7
 8008136:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813a:	2b00      	cmp	r3, #0
 800813c:	d104      	bne.n	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800813e:	f7fc ffd1 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 8008142:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008144:	f001 bf13 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008148:	4b96      	ldr	r3, [pc, #600]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008150:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008154:	d10a      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8008156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008158:	2b01      	cmp	r3, #1
 800815a:	d107      	bne.n	800816c <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800815c:	f107 0314 	add.w	r3, r7, #20
 8008160:	4618      	mov	r0, r3
 8008162:	f7ff f8e1 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	637b      	str	r3, [r7, #52]	@ 0x34
 800816a:	e043      	b.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800816c:	4b8d      	ldr	r3, [pc, #564]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008174:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008178:	d10a      	bne.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 800817a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817c:	2b02      	cmp	r3, #2
 800817e:	d107      	bne.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008180:	f107 0308 	add.w	r3, r7, #8
 8008184:	4618      	mov	r0, r3
 8008186:	f7ff fa3b 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	637b      	str	r3, [r7, #52]	@ 0x34
 800818e:	e031      	b.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008190:	4b84      	ldr	r3, [pc, #528]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b02      	cmp	r3, #2
 800819a:	d10c      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 800819c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d109      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081a2:	4b80      	ldr	r3, [pc, #512]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	08db      	lsrs	r3, r3, #3
 80081a8:	f003 0303 	and.w	r3, r3, #3
 80081ac:	4a7e      	ldr	r2, [pc, #504]	@ (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80081ae:	fa22 f303 	lsr.w	r3, r2, r3
 80081b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80081b4:	e01e      	b.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80081b6:	4b7b      	ldr	r3, [pc, #492]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081c2:	d105      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 80081c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d102      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 80081ca:	4b78      	ldr	r3, [pc, #480]	@ (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80081cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ce:	e011      	b.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80081d0:	4b74      	ldr	r3, [pc, #464]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d106      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 80081de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081e0:	2b05      	cmp	r3, #5
 80081e2:	d103      	bne.n	80081ec <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 80081e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ea:	e003      	b.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80081f0:	f001 bebd 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80081f4:	f001 bebb 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80081f8:	4b6a      	ldr	r3, [pc, #424]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80081fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80081fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008202:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008206:	2b00      	cmp	r3, #0
 8008208:	d104      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800820a:	f7fc ff55 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 800820e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008210:	f001 bead 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008214:	4b63      	ldr	r3, [pc, #396]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800821c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008220:	d10a      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8008222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008224:	2b08      	cmp	r3, #8
 8008226:	d107      	bne.n	8008238 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008228:	f107 0314 	add.w	r3, r7, #20
 800822c:	4618      	mov	r0, r3
 800822e:	f7ff f87b 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	637b      	str	r3, [r7, #52]	@ 0x34
 8008236:	e03d      	b.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823a:	2b10      	cmp	r3, #16
 800823c:	d108      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800823e:	f107 0308 	add.w	r3, r7, #8
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff f9dc 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800824c:	f001 be8f 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008250:	4b54      	ldr	r3, [pc, #336]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b02      	cmp	r3, #2
 800825a:	d10c      	bne.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 800825c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800825e:	2b18      	cmp	r3, #24
 8008260:	d109      	bne.n	8008276 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008262:	4b50      	ldr	r3, [pc, #320]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	08db      	lsrs	r3, r3, #3
 8008268:	f003 0303 	and.w	r3, r3, #3
 800826c:	4a4e      	ldr	r2, [pc, #312]	@ (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800826e:	fa22 f303 	lsr.w	r3, r2, r3
 8008272:	637b      	str	r3, [r7, #52]	@ 0x34
 8008274:	e01e      	b.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008276:	4b4b      	ldr	r3, [pc, #300]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800827e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008282:	d105      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8008284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008286:	2b20      	cmp	r3, #32
 8008288:	d102      	bne.n	8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 800828a:	4b48      	ldr	r3, [pc, #288]	@ (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800828c:	637b      	str	r3, [r7, #52]	@ 0x34
 800828e:	e011      	b.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008290:	4b44      	ldr	r3, [pc, #272]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008292:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b02      	cmp	r3, #2
 800829c:	d106      	bne.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800829e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a0:	2b28      	cmp	r3, #40	@ 0x28
 80082a2:	d103      	bne.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 80082a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082aa:	e003      	b.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 80082ac:	2300      	movs	r3, #0
 80082ae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082b0:	f001 be5d 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082b4:	f001 be5b 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80082b8:	4b3a      	ldr	r3, [pc, #232]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80082ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80082be:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80082c2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80082c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d104      	bne.n	80082d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80082ca:	f7fc fef5 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 80082ce:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 80082d0:	f001 be4d 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 80082d4:	4b33      	ldr	r3, [pc, #204]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082e0:	d10a      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 80082e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e4:	2b40      	cmp	r3, #64	@ 0x40
 80082e6:	d107      	bne.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082e8:	f107 0314 	add.w	r3, r7, #20
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff f81b 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80082f6:	e045      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80082f8:	4b2a      	ldr	r3, [pc, #168]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008300:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008304:	d10a      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8008306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008308:	2b80      	cmp	r3, #128	@ 0x80
 800830a:	d107      	bne.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800830c:	f107 0308 	add.w	r3, r7, #8
 8008310:	4618      	mov	r0, r3
 8008312:	f7ff f975 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	637b      	str	r3, [r7, #52]	@ 0x34
 800831a:	e033      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 800831c:	4b21      	ldr	r3, [pc, #132]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 0302 	and.w	r3, r3, #2
 8008324:	2b02      	cmp	r3, #2
 8008326:	d10c      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8008328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832a:	2bc0      	cmp	r3, #192	@ 0xc0
 800832c:	d109      	bne.n	8008342 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800832e:	4b1d      	ldr	r3, [pc, #116]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	08db      	lsrs	r3, r3, #3
 8008334:	f003 0303 	and.w	r3, r3, #3
 8008338:	4a1b      	ldr	r2, [pc, #108]	@ (80083a8 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800833a:	fa22 f303 	lsr.w	r3, r2, r3
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008340:	e020      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8008342:	4b18      	ldr	r3, [pc, #96]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800834a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800834e:	d106      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8008350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008356:	d102      	bne.n	800835e <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8008358:	4b14      	ldr	r3, [pc, #80]	@ (80083ac <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800835a:	637b      	str	r3, [r7, #52]	@ 0x34
 800835c:	e012      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800835e:	4b11      	ldr	r3, [pc, #68]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008360:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008364:	f003 0302 	and.w	r3, r3, #2
 8008368:	2b02      	cmp	r3, #2
 800836a:	d107      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 800836c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800836e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8008372:	d103      	bne.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8008374:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008378:	637b      	str	r3, [r7, #52]	@ 0x34
 800837a:	e003      	b.n	8008384 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008380:	f001 bdf5 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008384:	f001 bdf3 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008388:	4b06      	ldr	r3, [pc, #24]	@ (80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800838a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800838e:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8008392:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8008394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10a      	bne.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800839a:	f7fc fe8d 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 800839e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 80083a0:	f001 bde5 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083a4:	44020c00 	.word	0x44020c00
 80083a8:	03d09000 	.word	0x03d09000
 80083ac:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80083b0:	4ba0      	ldr	r3, [pc, #640]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083bc:	d10b      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 80083be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083c4:	d107      	bne.n	80083d6 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083c6:	f107 0314 	add.w	r3, r7, #20
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fe ffac 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80083d4:	e047      	b.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80083d6:	4b97      	ldr	r3, [pc, #604]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80083de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80083e2:	d10b      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80083e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083ea:	d107      	bne.n	80083fc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80083ec:	f107 0308 	add.w	r3, r7, #8
 80083f0:	4618      	mov	r0, r3
 80083f2:	f7ff f905 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80083fa:	e034      	b.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80083fc:	4b8d      	ldr	r3, [pc, #564]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0302 	and.w	r3, r3, #2
 8008404:	2b02      	cmp	r3, #2
 8008406:	d10d      	bne.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8008408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800840a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800840e:	d109      	bne.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008410:	4b88      	ldr	r3, [pc, #544]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	08db      	lsrs	r3, r3, #3
 8008416:	f003 0303 	and.w	r3, r3, #3
 800841a:	4a87      	ldr	r2, [pc, #540]	@ (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800841c:	fa22 f303 	lsr.w	r3, r2, r3
 8008420:	637b      	str	r3, [r7, #52]	@ 0x34
 8008422:	e020      	b.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008424:	4b83      	ldr	r3, [pc, #524]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800842c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008430:	d106      	bne.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8008432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008438:	d102      	bne.n	8008440 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 800843a:	4b80      	ldr	r3, [pc, #512]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800843c:	637b      	str	r3, [r7, #52]	@ 0x34
 800843e:	e012      	b.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008440:	4b7c      	ldr	r3, [pc, #496]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008446:	f003 0302 	and.w	r3, r3, #2
 800844a:	2b02      	cmp	r3, #2
 800844c:	d107      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800844e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008450:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008454:	d103      	bne.n	800845e <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8008456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800845a:	637b      	str	r3, [r7, #52]	@ 0x34
 800845c:	e003      	b.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800845e:	2300      	movs	r3, #0
 8008460:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008462:	f001 bd84 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008466:	f001 bd82 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800846a:	4b72      	ldr	r3, [pc, #456]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800846c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008470:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008474:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008478:	2b00      	cmp	r3, #0
 800847a:	d104      	bne.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800847c:	f7fc fe1c 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8008480:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8008482:	f001 bd74 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008486:	4b6b      	ldr	r3, [pc, #428]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800848e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008492:	d10b      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8008494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800849a:	d107      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800849c:	f107 0314 	add.w	r3, r7, #20
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe ff41 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80084aa:	e047      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 80084ac:	4b61      	ldr	r3, [pc, #388]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084b8:	d10b      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 80084ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084c0:	d107      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084c2:	f107 0308 	add.w	r3, r7, #8
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7ff f89a 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d0:	e034      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80084d2:	4b58      	ldr	r3, [pc, #352]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f003 0302 	and.w	r3, r3, #2
 80084da:	2b02      	cmp	r3, #2
 80084dc:	d10d      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80084de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80084e4:	d109      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084e6:	4b53      	ldr	r3, [pc, #332]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	08db      	lsrs	r3, r3, #3
 80084ec:	f003 0303 	and.w	r3, r3, #3
 80084f0:	4a51      	ldr	r2, [pc, #324]	@ (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80084f2:	fa22 f303 	lsr.w	r3, r2, r3
 80084f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80084f8:	e020      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80084fa:	4b4e      	ldr	r3, [pc, #312]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008502:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008506:	d106      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800850a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800850e:	d102      	bne.n	8008516 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8008510:	4b4a      	ldr	r3, [pc, #296]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008512:	637b      	str	r3, [r7, #52]	@ 0x34
 8008514:	e012      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008516:	4b47      	ldr	r3, [pc, #284]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008518:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b02      	cmp	r3, #2
 8008522:	d107      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8008524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008526:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800852a:	d103      	bne.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 800852c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008530:	637b      	str	r3, [r7, #52]	@ 0x34
 8008532:	e003      	b.n	800853c <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008538:	f001 bd19 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800853c:	f001 bd17 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008540:	4b3c      	ldr	r3, [pc, #240]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008542:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008546:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800854a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 800854c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800854e:	2b00      	cmp	r3, #0
 8008550:	d104      	bne.n	800855c <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008552:	f7fc fdb1 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8008556:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008558:	f001 bd09 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 800855c:	4b35      	ldr	r3, [pc, #212]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008564:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008568:	d10b      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 800856a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800856c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008570:	d107      	bne.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008572:	f107 0314 	add.w	r3, r7, #20
 8008576:	4618      	mov	r0, r3
 8008578:	f7fe fed6 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008580:	e047      	b.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008582:	4b2c      	ldr	r3, [pc, #176]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800858a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800858e:	d10b      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8008590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008596:	d107      	bne.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008598:	f107 0308 	add.w	r3, r7, #8
 800859c:	4618      	mov	r0, r3
 800859e:	f7ff f82f 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085a6:	e034      	b.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80085a8:	4b22      	ldr	r3, [pc, #136]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0302 	and.w	r3, r3, #2
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d10d      	bne.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80085ba:	d109      	bne.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	08db      	lsrs	r3, r3, #3
 80085c2:	f003 0303 	and.w	r3, r3, #3
 80085c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008638 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80085c8:	fa22 f303 	lsr.w	r3, r2, r3
 80085cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ce:	e020      	b.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80085d0:	4b18      	ldr	r3, [pc, #96]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085dc:	d106      	bne.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80085de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085e4:	d102      	bne.n	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80085e6:	4b15      	ldr	r3, [pc, #84]	@ (800863c <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80085e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ea:	e012      	b.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80085ec:	4b11      	ldr	r3, [pc, #68]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80085ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d107      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008600:	d103      	bne.n	800860a <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8008602:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008606:	637b      	str	r3, [r7, #52]	@ 0x34
 8008608:	e003      	b.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800860e:	f001 bcae 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008612:	f001 bcac 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8008616:	4b07      	ldr	r3, [pc, #28]	@ (8008634 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800861c:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8008620:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8008622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10b      	bne.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008628:	f7fc fd46 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 800862c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 800862e:	f001 bc9e 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008632:	bf00      	nop
 8008634:	44020c00 	.word	0x44020c00
 8008638:	03d09000 	.word	0x03d09000
 800863c:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008640:	4ba0      	ldr	r3, [pc, #640]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800864c:	d10b      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008654:	d107      	bne.n	8008666 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008656:	f107 0314 	add.w	r3, r7, #20
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe fe64 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	637b      	str	r3, [r7, #52]	@ 0x34
 8008664:	e047      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008666:	4b97      	ldr	r3, [pc, #604]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800866e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008672:	d10b      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8008674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008676:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800867a:	d107      	bne.n	800868c <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800867c:	f107 0308 	add.w	r3, r7, #8
 8008680:	4618      	mov	r0, r3
 8008682:	f7fe ffbd 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	637b      	str	r3, [r7, #52]	@ 0x34
 800868a:	e034      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800868c:	4b8d      	ldr	r3, [pc, #564]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	2b02      	cmp	r3, #2
 8008696:	d10d      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8008698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800869e:	d109      	bne.n	80086b4 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086a0:	4b88      	ldr	r3, [pc, #544]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	08db      	lsrs	r3, r3, #3
 80086a6:	f003 0303 	and.w	r3, r3, #3
 80086aa:	4a87      	ldr	r2, [pc, #540]	@ (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80086ac:	fa22 f303 	lsr.w	r3, r2, r3
 80086b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086b2:	e020      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80086b4:	4b83      	ldr	r3, [pc, #524]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086c0:	d106      	bne.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80086c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086c8:	d102      	bne.n	80086d0 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80086ca:	4b80      	ldr	r3, [pc, #512]	@ (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80086cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ce:	e012      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80086d0:	4b7c      	ldr	r3, [pc, #496]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d107      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80086de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80086e4:	d103      	bne.n	80086ee <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80086e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80086ec:	e003      	b.n	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086f2:	f001 bc3c 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80086f6:	f001 bc3a 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80086fa:	4b72      	ldr	r3, [pc, #456]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80086fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008700:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8008704:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	2b00      	cmp	r3, #0
 800870a:	d104      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800870c:	f7fc fcd4 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8008710:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 8008712:	f001 bc2c 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008716:	4b6b      	ldr	r3, [pc, #428]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800871e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008722:	d10b      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8008724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008726:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800872a:	d107      	bne.n	800873c <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800872c:	f107 0314 	add.w	r3, r7, #20
 8008730:	4618      	mov	r0, r3
 8008732:	f7fe fdf9 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008736:	69bb      	ldr	r3, [r7, #24]
 8008738:	637b      	str	r3, [r7, #52]	@ 0x34
 800873a:	e047      	b.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800873c:	4b61      	ldr	r3, [pc, #388]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008748:	d10b      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800874a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800874c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008750:	d107      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008752:	f107 0308 	add.w	r3, r7, #8
 8008756:	4618      	mov	r0, r3
 8008758:	f7fe ff52 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008760:	e034      	b.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008762:	4b58      	ldr	r3, [pc, #352]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0302 	and.w	r3, r3, #2
 800876a:	2b02      	cmp	r3, #2
 800876c:	d10d      	bne.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008774:	d109      	bne.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008776:	4b53      	ldr	r3, [pc, #332]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	08db      	lsrs	r3, r3, #3
 800877c:	f003 0303 	and.w	r3, r3, #3
 8008780:	4a51      	ldr	r2, [pc, #324]	@ (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008782:	fa22 f303 	lsr.w	r3, r2, r3
 8008786:	637b      	str	r3, [r7, #52]	@ 0x34
 8008788:	e020      	b.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800878a:	4b4e      	ldr	r3, [pc, #312]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008792:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008796:	d106      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8008798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800879a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800879e:	d102      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80087a0:	4b4a      	ldr	r3, [pc, #296]	@ (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80087a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087a4:	e012      	b.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80087a6:	4b47      	ldr	r3, [pc, #284]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087ac:	f003 0302 	and.w	r3, r3, #2
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d107      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80087b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80087ba:	d103      	bne.n	80087c4 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80087bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80087c2:	e003      	b.n	80087cc <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80087c4:	2300      	movs	r3, #0
 80087c6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087c8:	f001 bbd1 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80087cc:	f001 bbcf 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80087d0:	4b3c      	ldr	r3, [pc, #240]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80087d6:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80087da:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80087dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d104      	bne.n	80087ec <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80087e2:	f7fc fc69 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 80087e6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80087e8:	f001 bbc1 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80087ec:	4b35      	ldr	r3, [pc, #212]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087f8:	d10b      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80087fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008800:	d107      	bne.n	8008812 <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008802:	f107 0314 	add.w	r3, r7, #20
 8008806:	4618      	mov	r0, r3
 8008808:	f7fe fd8e 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008810:	e047      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008812:	4b2c      	ldr	r3, [pc, #176]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800881a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800881e:	d10b      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008822:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008826:	d107      	bne.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008828:	f107 0308 	add.w	r3, r7, #8
 800882c:	4618      	mov	r0, r3
 800882e:	f7fe fee7 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	637b      	str	r3, [r7, #52]	@ 0x34
 8008836:	e034      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008838:	4b22      	ldr	r3, [pc, #136]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b02      	cmp	r3, #2
 8008842:	d10d      	bne.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8008844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008846:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800884a:	d109      	bne.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800884c:	4b1d      	ldr	r3, [pc, #116]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	08db      	lsrs	r3, r3, #3
 8008852:	f003 0303 	and.w	r3, r3, #3
 8008856:	4a1c      	ldr	r2, [pc, #112]	@ (80088c8 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008858:	fa22 f303 	lsr.w	r3, r2, r3
 800885c:	637b      	str	r3, [r7, #52]	@ 0x34
 800885e:	e020      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008860:	4b18      	ldr	r3, [pc, #96]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800886c:	d106      	bne.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800886e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008870:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008874:	d102      	bne.n	800887c <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8008876:	4b15      	ldr	r3, [pc, #84]	@ (80088cc <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008878:	637b      	str	r3, [r7, #52]	@ 0x34
 800887a:	e012      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800887c:	4b11      	ldr	r3, [pc, #68]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800887e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008882:	f003 0302 	and.w	r3, r3, #2
 8008886:	2b02      	cmp	r3, #2
 8008888:	d107      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800888a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800888c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008890:	d103      	bne.n	800889a <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 8008892:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008896:	637b      	str	r3, [r7, #52]	@ 0x34
 8008898:	e003      	b.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800889a:	2300      	movs	r3, #0
 800889c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800889e:	f001 bb66 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088a2:	f001 bb64 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80088a6:	4b07      	ldr	r3, [pc, #28]	@ (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80088a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80088ac:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80088b0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80088b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10b      	bne.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80088b8:	f7fc fbfe 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 80088bc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80088be:	f001 bb56 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80088c2:	bf00      	nop
 80088c4:	44020c00 	.word	0x44020c00
 80088c8:	03d09000 	.word	0x03d09000
 80088cc:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80088d0:	4ba1      	ldr	r3, [pc, #644]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088dc:	d10b      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80088de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088e4:	d107      	bne.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80088e6:	f107 0314 	add.w	r3, r7, #20
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fd1c 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f4:	e047      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80088f6:	4b98      	ldr	r3, [pc, #608]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008902:	d10b      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 8008904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008906:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800890a:	d107      	bne.n	800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800890c:	f107 0308 	add.w	r3, r7, #8
 8008910:	4618      	mov	r0, r3
 8008912:	f7fe fe75 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	637b      	str	r3, [r7, #52]	@ 0x34
 800891a:	e034      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800891c:	4b8e      	ldr	r3, [pc, #568]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0302 	and.w	r3, r3, #2
 8008924:	2b02      	cmp	r3, #2
 8008926:	d10d      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8008928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800892a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800892e:	d109      	bne.n	8008944 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008930:	4b89      	ldr	r3, [pc, #548]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	08db      	lsrs	r3, r3, #3
 8008936:	f003 0303 	and.w	r3, r3, #3
 800893a:	4a88      	ldr	r2, [pc, #544]	@ (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800893c:	fa22 f303 	lsr.w	r3, r2, r3
 8008940:	637b      	str	r3, [r7, #52]	@ 0x34
 8008942:	e020      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008944:	4b84      	ldr	r3, [pc, #528]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800894c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008950:	d106      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8008952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008958:	d102      	bne.n	8008960 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800895a:	4b81      	ldr	r3, [pc, #516]	@ (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800895c:	637b      	str	r3, [r7, #52]	@ 0x34
 800895e:	e012      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008960:	4b7d      	ldr	r3, [pc, #500]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008962:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008966:	f003 0302 	and.w	r3, r3, #2
 800896a:	2b02      	cmp	r3, #2
 800896c:	d107      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800896e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008970:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8008974:	d103      	bne.n	800897e <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8008976:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800897a:	637b      	str	r3, [r7, #52]	@ 0x34
 800897c:	e003      	b.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800897e:	2300      	movs	r3, #0
 8008980:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008982:	f001 baf4 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008986:	f001 baf2 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800898a:	4b73      	ldr	r3, [pc, #460]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800898c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008990:	f003 0307 	and.w	r3, r3, #7
 8008994:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8008996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008998:	2b00      	cmp	r3, #0
 800899a:	d104      	bne.n	80089a6 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800899c:	f7fc fb8c 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 80089a0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80089a2:	f001 bae4 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80089a6:	4b6c      	ldr	r3, [pc, #432]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089b2:	d10a      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80089b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d107      	bne.n	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089ba:	f107 0314 	add.w	r3, r7, #20
 80089be:	4618      	mov	r0, r3
 80089c0:	f7fe fcb2 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80089c8:	e043      	b.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80089ca:	4b63      	ldr	r3, [pc, #396]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089d6:	d10a      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80089d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d107      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089de:	f107 0308 	add.w	r3, r7, #8
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fe fe0c 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80089ec:	e031      	b.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80089ee:	4b5a      	ldr	r3, [pc, #360]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0302 	and.w	r3, r3, #2
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d10c      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80089fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d109      	bne.n	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a00:	4b55      	ldr	r3, [pc, #340]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	08db      	lsrs	r3, r3, #3
 8008a06:	f003 0303 	and.w	r3, r3, #3
 8008a0a:	4a54      	ldr	r2, [pc, #336]	@ (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8008a10:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a12:	e01e      	b.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8008a14:	4b50      	ldr	r3, [pc, #320]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a20:	d105      	bne.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 8008a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d102      	bne.n	8008a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8008a28:	4b4d      	ldr	r3, [pc, #308]	@ (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008a2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a2c:	e011      	b.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8008a2e:	4b4a      	ldr	r3, [pc, #296]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008a34:	f003 0302 	and.w	r3, r3, #2
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	d106      	bne.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3e:	2b05      	cmp	r3, #5
 8008a40:	d103      	bne.n	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 8008a42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a48:	e003      	b.n	8008a52 <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a4e:	f001 ba8e 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a52:	f001 ba8c 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008a56:	4b40      	ldr	r3, [pc, #256]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008a5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a60:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d104      	bne.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a68:	f7fc fb26 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8008a6c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a6e:	f001 ba7e 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008a72:	4b39      	ldr	r3, [pc, #228]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008a7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a7e:	d10a      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a82:	2b10      	cmp	r3, #16
 8008a84:	d107      	bne.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a86:	f107 0314 	add.w	r3, r7, #20
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fc4c 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a94:	e043      	b.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8008a96:	4b30      	ldr	r3, [pc, #192]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008aa2:	d10a      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa6:	2b20      	cmp	r3, #32
 8008aa8:	d107      	bne.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aaa:	f107 0308 	add.w	r3, r7, #8
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7fe fda6 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab8:	e031      	b.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8008aba:	4b27      	ldr	r3, [pc, #156]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	d10c      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac8:	2b30      	cmp	r3, #48	@ 0x30
 8008aca:	d109      	bne.n	8008ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008acc:	4b22      	ldr	r3, [pc, #136]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	08db      	lsrs	r3, r3, #3
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	4a21      	ldr	r2, [pc, #132]	@ (8008b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8008adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ade:	e01e      	b.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8008ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aec:	d105      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	2b40      	cmp	r3, #64	@ 0x40
 8008af2:	d102      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 8008af4:	4b1a      	ldr	r3, [pc, #104]	@ (8008b60 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008af8:	e011      	b.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008afa:	4b17      	ldr	r3, [pc, #92]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b00:	f003 0302 	and.w	r3, r3, #2
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d106      	bne.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0a:	2b50      	cmp	r3, #80	@ 0x50
 8008b0c:	d103      	bne.n	8008b16 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8008b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b12:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b14:	e003      	b.n	8008b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b1a:	f001 ba28 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b1e:	f001 ba26 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008b22:	4b0d      	ldr	r3, [pc, #52]	@ (8008b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008b28:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008b2c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d104      	bne.n	8008b3e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008b34:	f7fc faec 	bl	8005110 <HAL_RCC_GetPCLK3Freq>
 8008b38:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008b3a:	f001 ba18 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b44:	d10e      	bne.n	8008b64 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008b46:	f107 0314 	add.w	r3, r7, #20
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fe fbec 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b54:	f001 ba0b 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008b58:	44020c00 	.word	0x44020c00
 8008b5c:	03d09000 	.word	0x03d09000
 8008b60:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b6a:	d108      	bne.n	8008b7e <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b6c:	f107 0308 	add.w	r3, r7, #8
 8008b70:	4618      	mov	r0, r3
 8008b72:	f7fe fd45 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008b7a:	f001 b9f8 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008b7e:	4ba4      	ldr	r3, [pc, #656]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f003 0302 	and.w	r3, r3, #2
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d10d      	bne.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b90:	d109      	bne.n	8008ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b92:	4b9f      	ldr	r3, [pc, #636]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	08db      	lsrs	r3, r3, #3
 8008b98:	f003 0303 	and.w	r3, r3, #3
 8008b9c:	4a9d      	ldr	r2, [pc, #628]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ba4:	e020      	b.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008ba6:	4b9a      	ldr	r3, [pc, #616]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bb2:	d106      	bne.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8008bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008bba:	d102      	bne.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8008bbc:	4b96      	ldr	r3, [pc, #600]	@ (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc0:	e012      	b.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008bc2:	4b93      	ldr	r3, [pc, #588]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d107      	bne.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 8008bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008bd6:	d103      	bne.n	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8008bd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bde:	e003      	b.n	8008be8 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 8008be0:	2300      	movs	r3, #0
 8008be2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008be4:	f001 b9c3 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008be8:	f001 b9c1 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008bec:	4b88      	ldr	r3, [pc, #544]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008bf2:	f003 0307 	and.w	r3, r3, #7
 8008bf6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d104      	bne.n	8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008bfe:	f7fc fa3f 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 8008c02:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 8008c04:	f001 b9b3 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d104      	bne.n	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008c0e:	f7fc f90b 	bl	8004e28 <HAL_RCC_GetSysClockFreq>
 8008c12:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8008c14:	f001 b9ab 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d108      	bne.n	8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c1e:	f107 0314 	add.w	r3, r7, #20
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe fb80 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c2c:	f001 b99f 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008c30:	4b77      	ldr	r3, [pc, #476]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c3c:	d105      	bne.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c40:	2b03      	cmp	r3, #3
 8008c42:	d102      	bne.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8008c44:	4b75      	ldr	r3, [pc, #468]	@ (8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8008c46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c48:	e023      	b.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008c4a:	4b71      	ldr	r3, [pc, #452]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d10c      	bne.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8008c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d109      	bne.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008c5c:	4b6c      	ldr	r3, [pc, #432]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	08db      	lsrs	r3, r3, #3
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	4a6b      	ldr	r2, [pc, #428]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008c68:	fa22 f303 	lsr.w	r3, r2, r3
 8008c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c6e:	e010      	b.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008c70:	4b67      	ldr	r3, [pc, #412]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c7c:	d105      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c80:	2b05      	cmp	r3, #5
 8008c82:	d102      	bne.n	8008c8a <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8008c84:	4b64      	ldr	r3, [pc, #400]	@ (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c88:	e003      	b.n	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008c8e:	f001 b96e 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008c92:	f001 b96c 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008c96:	4b5e      	ldr	r3, [pc, #376]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008c98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c9c:	f003 0308 	and.w	r3, r3, #8
 8008ca0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d106      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8008cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d103      	bne.n	8008cbe <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8008cb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cbc:	e012      	b.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008cbe:	4b54      	ldr	r3, [pc, #336]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008cc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ccc:	d106      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8008cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d103      	bne.n	8008cdc <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8008cd4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cda:	e003      	b.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8008ce0:	f001 b945 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ce4:	f001 b943 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008ce8:	4b49      	ldr	r3, [pc, #292]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008cea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008cee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008cf2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d104      	bne.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008cfa:	f7fc f9dd 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8008cfe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d00:	f001 b935 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d0a:	d108      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d0c:	f107 0308 	add.w	r3, r7, #8
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7fe fc75 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d1a:	f001 b928 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008d1e:	4b3c      	ldr	r3, [pc, #240]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f003 0302 	and.w	r3, r3, #2
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d10d      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d30:	d109      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d32:	4b37      	ldr	r3, [pc, #220]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	08db      	lsrs	r3, r3, #3
 8008d38:	f003 0303 	and.w	r3, r3, #3
 8008d3c:	4a35      	ldr	r2, [pc, #212]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d42:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d44:	e011      	b.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008d46:	4b32      	ldr	r3, [pc, #200]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d52:	d106      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8008d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d5a:	d102      	bne.n	8008d62 <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008d5c:	4b2e      	ldr	r3, [pc, #184]	@ (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008d5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d60:	e003      	b.n	8008d6a <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008d66:	f001 b902 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008d6a:	f001 b900 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008d6e:	4b28      	ldr	r3, [pc, #160]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008d70:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008d74:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008d78:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d104      	bne.n	8008d8a <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008d80:	f7fc f99a 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8008d84:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008d86:	f001 b8f2 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d90:	d108      	bne.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d92:	f107 0308 	add.w	r3, r7, #8
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fe fc32 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008da0:	f001 b8e5 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008da4:	4b1a      	ldr	r3, [pc, #104]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0302 	and.w	r3, r3, #2
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d10d      	bne.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8008db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008db2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008db6:	d109      	bne.n	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008db8:	4b15      	ldr	r3, [pc, #84]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	08db      	lsrs	r3, r3, #3
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	4a14      	ldr	r2, [pc, #80]	@ (8008e14 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8008dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dca:	e011      	b.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008dcc:	4b10      	ldr	r3, [pc, #64]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dd8:	d106      	bne.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8008dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ddc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008de0:	d102      	bne.n	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8008de2:	4b0d      	ldr	r3, [pc, #52]	@ (8008e18 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008de6:	e003      	b.n	8008df0 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008dec:	f001 b8bf 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008df0:	f001 b8bd 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008df4:	4b06      	ldr	r3, [pc, #24]	@ (8008e10 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008df6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008dfa:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008dfe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10c      	bne.n	8008e20 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008e06:	f7fc f983 	bl	8005110 <HAL_RCC_GetPCLK3Freq>
 8008e0a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008e0c:	f001 b8af 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e10:	44020c00 	.word	0x44020c00
 8008e14:	03d09000 	.word	0x03d09000
 8008e18:	003d0900 	.word	0x003d0900
 8008e1c:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e26:	d108      	bne.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e28:	f107 0308 	add.w	r3, r7, #8
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f7fe fbe7 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e36:	f001 b89a 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008e3a:	4b9f      	ldr	r3, [pc, #636]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d10d      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8008e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008e4c:	d109      	bne.n	8008e62 <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e4e:	4b9a      	ldr	r3, [pc, #616]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	08db      	lsrs	r3, r3, #3
 8008e54:	f003 0303 	and.w	r3, r3, #3
 8008e58:	4a98      	ldr	r2, [pc, #608]	@ (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e60:	e011      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008e62:	4b95      	ldr	r3, [pc, #596]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e6e:	d106      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008e76:	d102      	bne.n	8008e7e <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008e78:	4b91      	ldr	r3, [pc, #580]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008e7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e7c:	e003      	b.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e82:	f001 b874 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e86:	f001 b872 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008e8a:	4b8b      	ldr	r3, [pc, #556]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008e8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e90:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008e94:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d104      	bne.n	8008ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8008e9c:	f7fc f938 	bl	8005110 <HAL_RCC_GetPCLK3Freq>
 8008ea0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8008ea2:	f001 b864 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8008ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008eac:	d108      	bne.n	8008ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eae:	f107 0308 	add.w	r3, r7, #8
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe fba4 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ebc:	f001 b857 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008ec0:	4b7d      	ldr	r3, [pc, #500]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f003 0302 	and.w	r3, r3, #2
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	d10d      	bne.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8008ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ece:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ed2:	d109      	bne.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ed4:	4b78      	ldr	r3, [pc, #480]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	08db      	lsrs	r3, r3, #3
 8008eda:	f003 0303 	and.w	r3, r3, #3
 8008ede:	4a77      	ldr	r2, [pc, #476]	@ (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ee4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ee6:	e011      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008ee8:	4b73      	ldr	r3, [pc, #460]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ef4:	d106      	bne.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008efc:	d102      	bne.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8008efe:	4b70      	ldr	r3, [pc, #448]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f02:	e003      	b.n	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f08:	f001 b831 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008f0c:	f001 b82f 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008f10:	4b69      	ldr	r3, [pc, #420]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008f16:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008f1a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d104      	bne.n	8008f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008f22:	f7fc f8c9 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 8008f26:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f28:	f001 b821 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f32:	d108      	bne.n	8008f46 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f34:	f107 0308 	add.w	r3, r7, #8
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fe fb61 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f42:	f001 b814 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008f46:	4b5c      	ldr	r3, [pc, #368]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d10e      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8008f52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008f58:	d10a      	bne.n	8008f70 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f5a:	4b57      	ldr	r3, [pc, #348]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	08db      	lsrs	r3, r3, #3
 8008f60:	f003 0303 	and.w	r3, r3, #3
 8008f64:	4a55      	ldr	r2, [pc, #340]	@ (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008f66:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f6c:	f000 bfff 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008f70:	2300      	movs	r3, #0
 8008f72:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008f74:	f000 bffb 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008f78:	4b4f      	ldr	r3, [pc, #316]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008f7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008f7e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f82:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f86:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008f8a:	d056      	beq.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008f92:	f200 808b 	bhi.w	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f9c:	d03e      	beq.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fa4:	f200 8082 	bhi.w	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fae:	d027      	beq.n	8009000 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008fb6:	d879      	bhi.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fbe:	d017      	beq.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fc6:	d871      	bhi.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d004      	beq.n	8008fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8008fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fd4:	d004      	beq.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8008fd6:	e069      	b.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008fd8:	f7fc f89a 	bl	8005110 <HAL_RCC_GetPCLK3Freq>
 8008fdc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008fde:	e068      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fe0:	f107 0314 	add.w	r3, r7, #20
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7fe f99f 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fee:	e060      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ff0:	f107 0308 	add.w	r3, r7, #8
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fe fb03 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ffe:	e058      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009000:	4b2d      	ldr	r3, [pc, #180]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009002:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	2b02      	cmp	r3, #2
 800900c:	d103      	bne.n	8009016 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800900e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009012:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009014:	e04d      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009016:	2300      	movs	r3, #0
 8009018:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800901a:	e04a      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800901c:	4b26      	ldr	r3, [pc, #152]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800901e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009022:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009026:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800902a:	d103      	bne.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800902c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009030:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009032:	e03e      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009034:	2300      	movs	r3, #0
 8009036:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009038:	e03b      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800903a:	4b1f      	ldr	r3, [pc, #124]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800903c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009040:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009044:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009046:	4b1c      	ldr	r3, [pc, #112]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0302 	and.w	r3, r3, #2
 800904e:	2b02      	cmp	r3, #2
 8009050:	d10c      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8009052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d109      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009058:	4b17      	ldr	r3, [pc, #92]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	08db      	lsrs	r3, r3, #3
 800905e:	f003 0303 	and.w	r3, r3, #3
 8009062:	4a16      	ldr	r2, [pc, #88]	@ (80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009064:	fa22 f303 	lsr.w	r3, r2, r3
 8009068:	637b      	str	r3, [r7, #52]	@ 0x34
 800906a:	e01e      	b.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800906c:	4b12      	ldr	r3, [pc, #72]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009074:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009078:	d106      	bne.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800907a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800907c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009080:	d102      	bne.n	8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009082:	4b0f      	ldr	r3, [pc, #60]	@ (80090c0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009084:	637b      	str	r3, [r7, #52]	@ 0x34
 8009086:	e010      	b.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009088:	4b0b      	ldr	r3, [pc, #44]	@ (80090b8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009094:	d106      	bne.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8009096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009098:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800909c:	d102      	bne.n	80090a4 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800909e:	4b09      	ldr	r3, [pc, #36]	@ (80090c4 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 80090a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090a2:	e002      	b.n	80090aa <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80090a8:	e003      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 80090aa:	e002      	b.n	80090b2 <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 80090ac:	2300      	movs	r3, #0
 80090ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090b0:	bf00      	nop
          }
        }
        break;
 80090b2:	f000 bf5c 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80090b6:	bf00      	nop
 80090b8:	44020c00 	.word	0x44020c00
 80090bc:	03d09000 	.word	0x03d09000
 80090c0:	003d0900 	.word	0x003d0900
 80090c4:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80090c8:	4b9e      	ldr	r3, [pc, #632]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80090ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80090ce:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80090d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80090d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090d6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80090da:	d056      	beq.n	800918a <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 80090dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090de:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80090e2:	f200 808b 	bhi.w	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80090e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090ec:	d03e      	beq.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 80090ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80090f4:	f200 8082 	bhi.w	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 80090f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090fa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80090fe:	d027      	beq.n	8009150 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8009100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009102:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009106:	d879      	bhi.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800910e:	d017      	beq.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8009110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009112:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009116:	d871      	bhi.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800911a:	2b00      	cmp	r3, #0
 800911c:	d004      	beq.n	8009128 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009124:	d004      	beq.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8009126:	e069      	b.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009128:	f7fb ffc6 	bl	80050b8 <HAL_RCC_GetPCLK1Freq>
 800912c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800912e:	e068      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009130:	f107 0314 	add.w	r3, r7, #20
 8009134:	4618      	mov	r0, r3
 8009136:	f7fe f8f7 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800913e:	e060      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009140:	f107 0308 	add.w	r3, r7, #8
 8009144:	4618      	mov	r0, r3
 8009146:	f7fe fa5b 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800914e:	e058      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009150:	4b7c      	ldr	r3, [pc, #496]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009152:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009156:	f003 0302 	and.w	r3, r3, #2
 800915a:	2b02      	cmp	r3, #2
 800915c:	d103      	bne.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800915e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009162:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009164:	e04d      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800916a:	e04a      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800916c:	4b75      	ldr	r3, [pc, #468]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800916e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009172:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009176:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800917a:	d103      	bne.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800917c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009180:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009182:	e03e      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009188:	e03b      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800918a:	4b6e      	ldr	r3, [pc, #440]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800918c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009190:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009194:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009196:	4b6b      	ldr	r3, [pc, #428]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d10c      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 80091a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d109      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091a8:	4b66      	ldr	r3, [pc, #408]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	08db      	lsrs	r3, r3, #3
 80091ae:	f003 0303 	and.w	r3, r3, #3
 80091b2:	4a65      	ldr	r2, [pc, #404]	@ (8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80091b4:	fa22 f303 	lsr.w	r3, r2, r3
 80091b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ba:	e01e      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091bc:	4b61      	ldr	r3, [pc, #388]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091c8:	d106      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 80091ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091d0:	d102      	bne.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80091d2:	4b5e      	ldr	r3, [pc, #376]	@ (800934c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 80091d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091d6:	e010      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091d8:	4b5a      	ldr	r3, [pc, #360]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80091e4:	d106      	bne.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 80091e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091ec:	d102      	bne.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80091ee:	4b58      	ldr	r3, [pc, #352]	@ (8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 80091f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80091f2:	e002      	b.n	80091fa <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80091f8:	e003      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 80091fa:	e002      	b.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009200:	bf00      	nop
          }
        }
        break;
 8009202:	f000 beb4 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009206:	4b4f      	ldr	r3, [pc, #316]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009208:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800920c:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009210:	633b      	str	r3, [r7, #48]	@ 0x30
 8009212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009214:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009218:	d056      	beq.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800921a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800921c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009220:	f200 808b 	bhi.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009226:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800922a:	d03e      	beq.n	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800922c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800922e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009232:	f200 8082 	bhi.w	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009238:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800923c:	d027      	beq.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800923e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009240:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009244:	d879      	bhi.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800924c:	d017      	beq.n	800927e <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800924e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009250:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009254:	d871      	bhi.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009258:	2b00      	cmp	r3, #0
 800925a:	d004      	beq.n	8009266 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800925c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800925e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009262:	d004      	beq.n	800926e <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8009264:	e069      	b.n	800933a <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009266:	f7fb ff53 	bl	8005110 <HAL_RCC_GetPCLK3Freq>
 800926a:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800926c:	e068      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800926e:	f107 0314 	add.w	r3, r7, #20
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe f858 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800927c:	e060      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800927e:	f107 0308 	add.w	r3, r7, #8
 8009282:	4618      	mov	r0, r3
 8009284:	f7fe f9bc 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800928c:	e058      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800928e:	4b2d      	ldr	r3, [pc, #180]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009290:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009294:	f003 0302 	and.w	r3, r3, #2
 8009298:	2b02      	cmp	r3, #2
 800929a:	d103      	bne.n	80092a4 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800929c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092a0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80092a2:	e04d      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80092a4:	2300      	movs	r3, #0
 80092a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092a8:	e04a      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80092aa:	4b26      	ldr	r3, [pc, #152]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80092ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092b8:	d103      	bne.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 80092ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80092be:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80092c0:	e03e      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092c6:	e03b      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80092ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80092ce:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80092d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092d4:	4b1b      	ldr	r3, [pc, #108]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d10c      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 80092e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d109      	bne.n	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092e6:	4b17      	ldr	r3, [pc, #92]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	08db      	lsrs	r3, r3, #3
 80092ec:	f003 0303 	and.w	r3, r3, #3
 80092f0:	4a15      	ldr	r2, [pc, #84]	@ (8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 80092f2:	fa22 f303 	lsr.w	r3, r2, r3
 80092f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092f8:	e01e      	b.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80092fa:	4b12      	ldr	r3, [pc, #72]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009302:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009306:	d106      	bne.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8009308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800930e:	d102      	bne.n	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009310:	4b0e      	ldr	r3, [pc, #56]	@ (800934c <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009312:	637b      	str	r3, [r7, #52]	@ 0x34
 8009314:	e010      	b.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009316:	4b0b      	ldr	r3, [pc, #44]	@ (8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800931e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009322:	d106      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8009324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009326:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800932a:	d102      	bne.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800932c:	4b08      	ldr	r3, [pc, #32]	@ (8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800932e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009330:	e002      	b.n	8009338 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009332:	2300      	movs	r3, #0
 8009334:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009336:	e003      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8009338:	e002      	b.n	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800933a:	2300      	movs	r3, #0
 800933c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800933e:	bf00      	nop
          }
        }
        break;
 8009340:	f000 be15 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009344:	44020c00 	.word	0x44020c00
 8009348:	03d09000 	.word	0x03d09000
 800934c:	003d0900 	.word	0x003d0900
 8009350:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009354:	4b9e      	ldr	r3, [pc, #632]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009356:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800935a:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800935e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009362:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8009366:	d056      	beq.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8009368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800936e:	f200 808b 	bhi.w	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009378:	d03e      	beq.n	80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009380:	f200 8082 	bhi.w	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009386:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800938a:	d027      	beq.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800938c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800938e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009392:	d879      	bhi.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8009394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009396:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800939a:	d017      	beq.n	80093cc <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800939c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80093a2:	d871      	bhi.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 80093a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d004      	beq.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 80093aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093b0:	d004      	beq.n	80093bc <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 80093b2:	e069      	b.n	8009488 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80093b4:	f7fb feac 	bl	8005110 <HAL_RCC_GetPCLK3Freq>
 80093b8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80093ba:	e068      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093bc:	f107 0314 	add.w	r3, r7, #20
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fd ffb1 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093ca:	e060      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093cc:	f107 0308 	add.w	r3, r7, #8
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7fe f915 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093da:	e058      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80093dc:	4b7c      	ldr	r3, [pc, #496]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80093de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093e2:	f003 0302 	and.w	r3, r3, #2
 80093e6:	2b02      	cmp	r3, #2
 80093e8:	d103      	bne.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 80093ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093ee:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80093f0:	e04d      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80093f6:	e04a      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80093f8:	4b75      	ldr	r3, [pc, #468]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80093fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009402:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009406:	d103      	bne.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8009408:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800940c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800940e:	e03e      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8009410:	2300      	movs	r3, #0
 8009412:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009414:	e03b      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009416:	4b6e      	ldr	r3, [pc, #440]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800941c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009420:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009422:	4b6b      	ldr	r3, [pc, #428]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0302 	and.w	r3, r3, #2
 800942a:	2b02      	cmp	r3, #2
 800942c:	d10c      	bne.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800942e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009430:	2b00      	cmp	r3, #0
 8009432:	d109      	bne.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009434:	4b66      	ldr	r3, [pc, #408]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	08db      	lsrs	r3, r3, #3
 800943a:	f003 0303 	and.w	r3, r3, #3
 800943e:	4a65      	ldr	r2, [pc, #404]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009440:	fa22 f303 	lsr.w	r3, r2, r3
 8009444:	637b      	str	r3, [r7, #52]	@ 0x34
 8009446:	e01e      	b.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009448:	4b61      	ldr	r3, [pc, #388]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009454:	d106      	bne.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8009456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800945c:	d102      	bne.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800945e:	4b5e      	ldr	r3, [pc, #376]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8009460:	637b      	str	r3, [r7, #52]	@ 0x34
 8009462:	e010      	b.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009464:	4b5a      	ldr	r3, [pc, #360]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800946c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009470:	d106      	bne.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8009472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009474:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009478:	d102      	bne.n	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800947a:	4b58      	ldr	r3, [pc, #352]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800947c:	637b      	str	r3, [r7, #52]	@ 0x34
 800947e:	e002      	b.n	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009480:	2300      	movs	r3, #0
 8009482:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009484:	e003      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8009486:	e002      	b.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8009488:	2300      	movs	r3, #0
 800948a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800948c:	bf00      	nop
          }
        }
        break;
 800948e:	f000 bd6e 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009492:	4b4f      	ldr	r3, [pc, #316]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009494:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009498:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800949c:	633b      	str	r3, [r7, #48]	@ 0x30
 800949e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80094a4:	d056      	beq.n	8009554 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 80094a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094a8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80094ac:	f200 808b 	bhi.w	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80094b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094b6:	d03e      	beq.n	8009536 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 80094b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80094be:	f200 8082 	bhi.w	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80094c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80094c8:	d027      	beq.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 80094ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094cc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80094d0:	d879      	bhi.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80094d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094d8:	d017      	beq.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 80094da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80094e0:	d871      	bhi.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 80094e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d004      	beq.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 80094e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094ee:	d004      	beq.n	80094fa <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 80094f0:	e069      	b.n	80095c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 80094f2:	f7fb fe0d 	bl	8005110 <HAL_RCC_GetPCLK3Freq>
 80094f6:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 80094f8:	e068      	b.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094fa:	f107 0314 	add.w	r3, r7, #20
 80094fe:	4618      	mov	r0, r3
 8009500:	f7fd ff12 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009508:	e060      	b.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800950a:	f107 0308 	add.w	r3, r7, #8
 800950e:	4618      	mov	r0, r3
 8009510:	f7fe f876 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009518:	e058      	b.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800951a:	4b2d      	ldr	r3, [pc, #180]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800951c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009520:	f003 0302 	and.w	r3, r3, #2
 8009524:	2b02      	cmp	r3, #2
 8009526:	d103      	bne.n	8009530 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009528:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800952c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800952e:	e04d      	b.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009534:	e04a      	b.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009536:	4b26      	ldr	r3, [pc, #152]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800953c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009544:	d103      	bne.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 8009546:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800954a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800954c:	e03e      	b.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009552:	e03b      	b.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009554:	4b1e      	ldr	r3, [pc, #120]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009556:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800955a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800955e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009560:	4b1b      	ldr	r3, [pc, #108]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f003 0302 	and.w	r3, r3, #2
 8009568:	2b02      	cmp	r3, #2
 800956a:	d10c      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800956c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956e:	2b00      	cmp	r3, #0
 8009570:	d109      	bne.n	8009586 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009572:	4b17      	ldr	r3, [pc, #92]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	08db      	lsrs	r3, r3, #3
 8009578:	f003 0303 	and.w	r3, r3, #3
 800957c:	4a15      	ldr	r2, [pc, #84]	@ (80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800957e:	fa22 f303 	lsr.w	r3, r2, r3
 8009582:	637b      	str	r3, [r7, #52]	@ 0x34
 8009584:	e01e      	b.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009586:	4b12      	ldr	r3, [pc, #72]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800958e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009592:	d106      	bne.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 8009594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009596:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800959a:	d102      	bne.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800959c:	4b0e      	ldr	r3, [pc, #56]	@ (80095d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800959e:	637b      	str	r3, [r7, #52]	@ 0x34
 80095a0:	e010      	b.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80095a2:	4b0b      	ldr	r3, [pc, #44]	@ (80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095ae:	d106      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80095b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095b6:	d102      	bne.n	80095be <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80095b8:	4b08      	ldr	r3, [pc, #32]	@ (80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80095ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80095bc:	e002      	b.n	80095c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80095c2:	e003      	b.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80095c4:	e002      	b.n	80095cc <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095ca:	bf00      	nop
          }
        }
        break;
 80095cc:	f000 bccf 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80095d0:	44020c00 	.word	0x44020c00
 80095d4:	03d09000 	.word	0x03d09000
 80095d8:	003d0900 	.word	0x003d0900
 80095dc:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80095e0:	4b9e      	ldr	r3, [pc, #632]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80095e2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80095e6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80095ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80095ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095f2:	d056      	beq.n	80096a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 80095f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095fa:	f200 808b 	bhi.w	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 80095fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009604:	d03e      	beq.n	8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 8009606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800960c:	f200 8082 	bhi.w	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009612:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009616:	d027      	beq.n	8009668 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800961e:	d879      	bhi.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009626:	d017      	beq.n	8009658 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800962e:	d871      	bhi.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009632:	2b00      	cmp	r3, #0
 8009634:	d004      	beq.n	8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 8009636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009638:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800963c:	d004      	beq.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800963e:	e069      	b.n	8009714 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009640:	f7fb fd66 	bl	8005110 <HAL_RCC_GetPCLK3Freq>
 8009644:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009646:	e068      	b.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009648:	f107 0314 	add.w	r3, r7, #20
 800964c:	4618      	mov	r0, r3
 800964e:	f7fd fe6b 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009656:	e060      	b.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009658:	f107 0308 	add.w	r3, r7, #8
 800965c:	4618      	mov	r0, r3
 800965e:	f7fd ffcf 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009666:	e058      	b.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009668:	4b7c      	ldr	r3, [pc, #496]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800966a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800966e:	f003 0302 	and.w	r3, r3, #2
 8009672:	2b02      	cmp	r3, #2
 8009674:	d103      	bne.n	800967e <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 8009676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800967a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800967c:	e04d      	b.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800967e:	2300      	movs	r3, #0
 8009680:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009682:	e04a      	b.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009684:	4b75      	ldr	r3, [pc, #468]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800968a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800968e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009692:	d103      	bne.n	800969c <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 8009694:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009698:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800969a:	e03e      	b.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800969c:	2300      	movs	r3, #0
 800969e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80096a0:	e03b      	b.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80096a2:	4b6e      	ldr	r3, [pc, #440]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80096a8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80096ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80096ae:	4b6b      	ldr	r3, [pc, #428]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0302 	and.w	r3, r3, #2
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d10c      	bne.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80096ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d109      	bne.n	80096d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096c0:	4b66      	ldr	r3, [pc, #408]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	08db      	lsrs	r3, r3, #3
 80096c6:	f003 0303 	and.w	r3, r3, #3
 80096ca:	4a65      	ldr	r2, [pc, #404]	@ (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80096cc:	fa22 f303 	lsr.w	r3, r2, r3
 80096d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80096d2:	e01e      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80096d4:	4b61      	ldr	r3, [pc, #388]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096e0:	d106      	bne.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80096e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80096e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096e8:	d102      	bne.n	80096f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80096ea:	4b5e      	ldr	r3, [pc, #376]	@ (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 80096ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ee:	e010      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80096f0:	4b5a      	ldr	r3, [pc, #360]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80096fc:	d106      	bne.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 80096fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009700:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009704:	d102      	bne.n	800970c <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009706:	4b58      	ldr	r3, [pc, #352]	@ (8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009708:	637b      	str	r3, [r7, #52]	@ 0x34
 800970a:	e002      	b.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009710:	e003      	b.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 8009712:	e002      	b.n	800971a <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 8009714:	2300      	movs	r3, #0
 8009716:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009718:	bf00      	nop
          }
        }
        break;
 800971a:	f000 bc28 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800971e:	4b4f      	ldr	r3, [pc, #316]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009724:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009728:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800972a:	4b4c      	ldr	r3, [pc, #304]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009732:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009736:	d106      	bne.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800973a:	2b00      	cmp	r3, #0
 800973c:	d103      	bne.n	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800973e:	4b4a      	ldr	r3, [pc, #296]	@ (8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009740:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 8009742:	f000 bc14 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009748:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800974c:	d108      	bne.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800974e:	f107 0320 	add.w	r3, r7, #32
 8009752:	4618      	mov	r0, r3
 8009754:	f7fd fc7c 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800975c:	f000 bc07 	b.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009762:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009766:	d107      	bne.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009768:	f107 0314 	add.w	r3, r7, #20
 800976c:	4618      	mov	r0, r3
 800976e:	f7fd fddb 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009776:	e3fa      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009778:	2300      	movs	r3, #0
 800977a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800977c:	e3f7      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800977e:	4b37      	ldr	r3, [pc, #220]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009784:	f003 0307 	and.w	r3, r3, #7
 8009788:	633b      	str	r3, [r7, #48]	@ 0x30
 800978a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800978c:	2b04      	cmp	r3, #4
 800978e:	d861      	bhi.n	8009854 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 8009790:	a201      	add	r2, pc, #4	@ (adr r2, 8009798 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	080097ad 	.word	0x080097ad
 800979c:	080097bd 	.word	0x080097bd
 80097a0:	080097cd 	.word	0x080097cd
 80097a4:	080097dd 	.word	0x080097dd
 80097a8:	080097e3 	.word	0x080097e3
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80097ac:	f107 0320 	add.w	r3, r7, #32
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fd fc4d 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80097b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097ba:	e04e      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097bc:	f107 0314 	add.w	r3, r7, #20
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7fd fdb1 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097ca:	e046      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097cc:	f107 0308 	add.w	r3, r7, #8
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7fd ff15 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097da:	e03e      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80097dc:	4b23      	ldr	r3, [pc, #140]	@ (800986c <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80097de:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80097e0:	e03b      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097e2:	4b1e      	ldr	r3, [pc, #120]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80097e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80097e8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80097ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097ee:	4b1b      	ldr	r3, [pc, #108]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f003 0302 	and.w	r3, r3, #2
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d10c      	bne.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 80097fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d109      	bne.n	8009814 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009800:	4b16      	ldr	r3, [pc, #88]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	08db      	lsrs	r3, r3, #3
 8009806:	f003 0303 	and.w	r3, r3, #3
 800980a:	4a15      	ldr	r2, [pc, #84]	@ (8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800980c:	fa22 f303 	lsr.w	r3, r2, r3
 8009810:	637b      	str	r3, [r7, #52]	@ 0x34
 8009812:	e01e      	b.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009814:	4b11      	ldr	r3, [pc, #68]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800981c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009820:	d106      	bne.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 8009822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009824:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009828:	d102      	bne.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800982a:	4b0e      	ldr	r3, [pc, #56]	@ (8009864 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800982c:	637b      	str	r3, [r7, #52]	@ 0x34
 800982e:	e010      	b.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009830:	4b0a      	ldr	r3, [pc, #40]	@ (800985c <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009838:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800983c:	d106      	bne.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009840:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009844:	d102      	bne.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009846:	4b08      	ldr	r3, [pc, #32]	@ (8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009848:	637b      	str	r3, [r7, #52]	@ 0x34
 800984a:	e002      	b.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800984c:	2300      	movs	r3, #0
 800984e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009850:	e003      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 8009852:	e002      	b.n	800985a <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009858:	bf00      	nop
          }
        }
        break;
 800985a:	e388      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800985c:	44020c00 	.word	0x44020c00
 8009860:	03d09000 	.word	0x03d09000
 8009864:	003d0900 	.word	0x003d0900
 8009868:	007a1200 	.word	0x007a1200
 800986c:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009870:	4ba9      	ldr	r3, [pc, #676]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009876:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800987a:	633b      	str	r3, [r7, #48]	@ 0x30
 800987c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987e:	2b20      	cmp	r3, #32
 8009880:	f200 809a 	bhi.w	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 8009884:	a201      	add	r2, pc, #4	@ (adr r2, 800988c <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 8009886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988a:	bf00      	nop
 800988c:	08009911 	.word	0x08009911
 8009890:	080099b9 	.word	0x080099b9
 8009894:	080099b9 	.word	0x080099b9
 8009898:	080099b9 	.word	0x080099b9
 800989c:	080099b9 	.word	0x080099b9
 80098a0:	080099b9 	.word	0x080099b9
 80098a4:	080099b9 	.word	0x080099b9
 80098a8:	080099b9 	.word	0x080099b9
 80098ac:	08009921 	.word	0x08009921
 80098b0:	080099b9 	.word	0x080099b9
 80098b4:	080099b9 	.word	0x080099b9
 80098b8:	080099b9 	.word	0x080099b9
 80098bc:	080099b9 	.word	0x080099b9
 80098c0:	080099b9 	.word	0x080099b9
 80098c4:	080099b9 	.word	0x080099b9
 80098c8:	080099b9 	.word	0x080099b9
 80098cc:	08009931 	.word	0x08009931
 80098d0:	080099b9 	.word	0x080099b9
 80098d4:	080099b9 	.word	0x080099b9
 80098d8:	080099b9 	.word	0x080099b9
 80098dc:	080099b9 	.word	0x080099b9
 80098e0:	080099b9 	.word	0x080099b9
 80098e4:	080099b9 	.word	0x080099b9
 80098e8:	080099b9 	.word	0x080099b9
 80098ec:	08009941 	.word	0x08009941
 80098f0:	080099b9 	.word	0x080099b9
 80098f4:	080099b9 	.word	0x080099b9
 80098f8:	080099b9 	.word	0x080099b9
 80098fc:	080099b9 	.word	0x080099b9
 8009900:	080099b9 	.word	0x080099b9
 8009904:	080099b9 	.word	0x080099b9
 8009908:	080099b9 	.word	0x080099b9
 800990c:	08009947 	.word	0x08009947
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009910:	f107 0320 	add.w	r3, r7, #32
 8009914:	4618      	mov	r0, r3
 8009916:	f7fd fb9b 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800991a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800991e:	e04e      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009920:	f107 0314 	add.w	r3, r7, #20
 8009924:	4618      	mov	r0, r3
 8009926:	f7fd fcff 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800992e:	e046      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009930:	f107 0308 	add.w	r3, r7, #8
 8009934:	4618      	mov	r0, r3
 8009936:	f7fd fe63 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800993e:	e03e      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009940:	4b76      	ldr	r3, [pc, #472]	@ (8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009942:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009944:	e03b      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009946:	4b74      	ldr	r3, [pc, #464]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800994c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009950:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009952:	4b71      	ldr	r3, [pc, #452]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f003 0302 	and.w	r3, r3, #2
 800995a:	2b02      	cmp	r3, #2
 800995c:	d10c      	bne.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800995e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009960:	2b00      	cmp	r3, #0
 8009962:	d109      	bne.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009964:	4b6c      	ldr	r3, [pc, #432]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	08db      	lsrs	r3, r3, #3
 800996a:	f003 0303 	and.w	r3, r3, #3
 800996e:	4a6c      	ldr	r2, [pc, #432]	@ (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009970:	fa22 f303 	lsr.w	r3, r2, r3
 8009974:	637b      	str	r3, [r7, #52]	@ 0x34
 8009976:	e01e      	b.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009978:	4b67      	ldr	r3, [pc, #412]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009980:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009984:	d106      	bne.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 8009986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800998c:	d102      	bne.n	8009994 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800998e:	4b65      	ldr	r3, [pc, #404]	@ (8009b24 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009990:	637b      	str	r3, [r7, #52]	@ 0x34
 8009992:	e010      	b.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009994:	4b60      	ldr	r3, [pc, #384]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800999c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099a0:	d106      	bne.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80099a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099a8:	d102      	bne.n	80099b0 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80099aa:	4b5f      	ldr	r3, [pc, #380]	@ (8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80099ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ae:	e002      	b.n	80099b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80099b0:	2300      	movs	r3, #0
 80099b2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80099b4:	e003      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80099b6:	e002      	b.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80099b8:	2300      	movs	r3, #0
 80099ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80099bc:	bf00      	nop
          }
        }
        break;
 80099be:	e2d6      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80099c0:	4b55      	ldr	r3, [pc, #340]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80099c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80099c6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80099ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80099cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099d2:	d031      	beq.n	8009a38 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80099d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099da:	d866      	bhi.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80099dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099de:	2bc0      	cmp	r3, #192	@ 0xc0
 80099e0:	d027      	beq.n	8009a32 <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80099e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e4:	2bc0      	cmp	r3, #192	@ 0xc0
 80099e6:	d860      	bhi.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	2b80      	cmp	r3, #128	@ 0x80
 80099ec:	d019      	beq.n	8009a22 <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 80099ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f0:	2b80      	cmp	r3, #128	@ 0x80
 80099f2:	d85a      	bhi.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80099f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 80099fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fc:	2b40      	cmp	r3, #64	@ 0x40
 80099fe:	d008      	beq.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8009a00:	e053      	b.n	8009aaa <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a02:	f107 0320 	add.w	r3, r7, #32
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fd fb22 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a10:	e04e      	b.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a12:	f107 0314 	add.w	r3, r7, #20
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fd fc86 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a20:	e046      	b.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a22:	f107 0308 	add.w	r3, r7, #8
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7fd fdea 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a30:	e03e      	b.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009a32:	4b3a      	ldr	r3, [pc, #232]	@ (8009b1c <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 8009a34:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a36:	e03b      	b.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009a38:	4b37      	ldr	r3, [pc, #220]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a3e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009a42:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009a44:	4b34      	ldr	r3, [pc, #208]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f003 0302 	and.w	r3, r3, #2
 8009a4c:	2b02      	cmp	r3, #2
 8009a4e:	d10c      	bne.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8009a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a56:	4b30      	ldr	r3, [pc, #192]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	08db      	lsrs	r3, r3, #3
 8009a5c:	f003 0303 	and.w	r3, r3, #3
 8009a60:	4a2f      	ldr	r2, [pc, #188]	@ (8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009a62:	fa22 f303 	lsr.w	r3, r2, r3
 8009a66:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a68:	e01e      	b.n	8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a6a:	4b2b      	ldr	r3, [pc, #172]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a76:	d106      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a7e:	d102      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009a80:	4b28      	ldr	r3, [pc, #160]	@ (8009b24 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 8009a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a84:	e010      	b.n	8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a86:	4b24      	ldr	r3, [pc, #144]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009a92:	d106      	bne.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 8009a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a96:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a9a:	d102      	bne.n	8009aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009a9c:	4b22      	ldr	r3, [pc, #136]	@ (8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 8009a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aa0:	e002      	b.n	8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009aa6:	e003      	b.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 8009aa8:	e002      	b.n	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009aae:	bf00      	nop
          }
        }
        break;
 8009ab0:	e25d      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8009ab2:	4b19      	ldr	r3, [pc, #100]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009ab8:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009abc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8009abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009ac4:	f7fb fb0e 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 8009ac8:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009aca:	e250      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8009acc:	4b12      	ldr	r3, [pc, #72]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ad4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ad8:	d10b      	bne.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 8009ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ae0:	d107      	bne.n	8009af2 <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ae2:	f107 0314 	add.w	r3, r7, #20
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7fd fc1e 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009aec:	69bb      	ldr	r3, [r7, #24]
 8009aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8009af0:	e04f      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8009af2:	4b09      	ldr	r3, [pc, #36]	@ (8009b18 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009afa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009afe:	d115      	bne.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8009b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b06:	d111      	bne.n	8009b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b08:	f107 0308 	add.w	r3, r7, #8
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7fd fd77 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b16:	e03c      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8009b18:	44020c00 	.word	0x44020c00
 8009b1c:	00bb8000 	.word	0x00bb8000
 8009b20:	03d09000 	.word	0x03d09000
 8009b24:	003d0900 	.word	0x003d0900
 8009b28:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009b2c:	4b94      	ldr	r3, [pc, #592]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f003 0302 	and.w	r3, r3, #2
 8009b34:	2b02      	cmp	r3, #2
 8009b36:	d10d      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009b3e:	d109      	bne.n	8009b54 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b40:	4b8f      	ldr	r3, [pc, #572]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	08db      	lsrs	r3, r3, #3
 8009b46:	f003 0303 	and.w	r3, r3, #3
 8009b4a:	4a8e      	ldr	r2, [pc, #568]	@ (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b52:	e01e      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009b54:	4b8a      	ldr	r3, [pc, #552]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b60:	d106      	bne.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 8009b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b68:	d102      	bne.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009b6a:	4b87      	ldr	r3, [pc, #540]	@ (8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b6e:	e010      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009b70:	4b83      	ldr	r3, [pc, #524]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b78:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b7c:	d106      	bne.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b80:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009b84:	d102      	bne.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 8009b86:	4b81      	ldr	r3, [pc, #516]	@ (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b8a:	e002      	b.n	8009b92 <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b90:	e1ed      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b92:	e1ec      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009b94:	4b7a      	ldr	r3, [pc, #488]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b9a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009b9e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d103      	bne.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009ba6:	f7fb fab3 	bl	8005110 <HAL_RCC_GetPCLK3Freq>
 8009baa:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009bac:	e1df      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8009bae:	4b74      	ldr	r3, [pc, #464]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009bba:	d10b      	bne.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 8009bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bc2:	d107      	bne.n	8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bc4:	f107 0314 	add.w	r3, r7, #20
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7fd fbad 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bd2:	e045      	b.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8009bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009be0:	d10b      	bne.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 8009be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009be8:	d107      	bne.n	8009bfa <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bea:	f107 0308 	add.w	r3, r7, #8
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f7fd fd06 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bf8:	e032      	b.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009bfa:	4b61      	ldr	r3, [pc, #388]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0302 	and.w	r3, r3, #2
 8009c02:	2b02      	cmp	r3, #2
 8009c04:	d10d      	bne.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 8009c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009c0c:	d109      	bne.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c0e:	4b5c      	ldr	r3, [pc, #368]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	08db      	lsrs	r3, r3, #3
 8009c14:	f003 0303 	and.w	r3, r3, #3
 8009c18:	4a5a      	ldr	r2, [pc, #360]	@ (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c20:	e01e      	b.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8009c22:	4b57      	ldr	r3, [pc, #348]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c2e:	d106      	bne.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c32:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c36:	d102      	bne.n	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009c38:	4b53      	ldr	r3, [pc, #332]	@ (8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009c3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c3c:	e010      	b.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009c3e:	4b50      	ldr	r3, [pc, #320]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c4a:	d106      	bne.n	8009c5a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c4e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009c52:	d102      	bne.n	8009c5a <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 8009c54:	4b4d      	ldr	r3, [pc, #308]	@ (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c58:	e002      	b.n	8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c5e:	e186      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c60:	e185      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009c62:	4b47      	ldr	r3, [pc, #284]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009c68:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009c6c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d103      	bne.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009c74:	f7fb fa36 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 8009c78:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009c7a:	e178      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009c7c:	4b40      	ldr	r3, [pc, #256]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c88:	d10b      	bne.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 8009c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c90:	d107      	bne.n	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c92:	f107 0314 	add.w	r3, r7, #20
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7fd fb46 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca0:	e045      	b.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8009ca2:	4b37      	ldr	r3, [pc, #220]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009caa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cae:	d10b      	bne.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 8009cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cb6:	d107      	bne.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cb8:	f107 0308 	add.w	r3, r7, #8
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7fd fc9f 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cc6:	e032      	b.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8009cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f003 0302 	and.w	r3, r3, #2
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d10d      	bne.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd6:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009cda:	d109      	bne.n	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009cdc:	4b28      	ldr	r3, [pc, #160]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	08db      	lsrs	r3, r3, #3
 8009ce2:	f003 0303 	and.w	r3, r3, #3
 8009ce6:	4a27      	ldr	r2, [pc, #156]	@ (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8009cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cee:	e01e      	b.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009cf0:	4b23      	ldr	r3, [pc, #140]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cfc:	d106      	bne.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8009cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d04:	d102      	bne.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 8009d06:	4b20      	ldr	r3, [pc, #128]	@ (8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d0a:	e010      	b.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8009d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d14:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d18:	d106      	bne.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009d20:	d102      	bne.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 8009d22:	4b1a      	ldr	r3, [pc, #104]	@ (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 8009d24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d26:	e002      	b.n	8009d2e <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d2c:	e11f      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d2e:	e11e      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009d30:	4b13      	ldr	r3, [pc, #76]	@ (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009d32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009d36:	f003 0303 	and.w	r3, r3, #3
 8009d3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d85f      	bhi.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 8009d42:	a201      	add	r2, pc, #4	@ (adr r2, 8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 8009d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d48:	08009d59 	.word	0x08009d59
 8009d4c:	08009d61 	.word	0x08009d61
 8009d50:	08009d71 	.word	0x08009d71
 8009d54:	08009d91 	.word	0x08009d91

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009d58:	f7fb f992 	bl	8005080 <HAL_RCC_GetHCLKFreq>
 8009d5c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009d5e:	e053      	b.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d60:	f107 0320 	add.w	r3, r7, #32
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7fd f973 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d6e:	e04b      	b.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d70:	f107 0314 	add.w	r3, r7, #20
 8009d74:	4618      	mov	r0, r3
 8009d76:	f7fd fad7 	bl	8007328 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009d7e:	e043      	b.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009d80:	44020c00 	.word	0x44020c00
 8009d84:	03d09000 	.word	0x03d09000
 8009d88:	003d0900 	.word	0x003d0900
 8009d8c:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009d90:	4b79      	ldr	r3, [pc, #484]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009d96:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009d9c:	4b76      	ldr	r3, [pc, #472]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 0302 	and.w	r3, r3, #2
 8009da4:	2b02      	cmp	r3, #2
 8009da6:	d10c      	bne.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 8009da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d109      	bne.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009dae:	4b72      	ldr	r3, [pc, #456]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	08db      	lsrs	r3, r3, #3
 8009db4:	f003 0303 	and.w	r3, r3, #3
 8009db8:	4a70      	ldr	r2, [pc, #448]	@ (8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 8009dba:	fa22 f303 	lsr.w	r3, r2, r3
 8009dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dc0:	e01e      	b.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009dc2:	4b6d      	ldr	r3, [pc, #436]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009dca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009dce:	d106      	bne.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 8009dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dd6:	d102      	bne.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009dd8:	4b69      	ldr	r3, [pc, #420]	@ (8009f80 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 8009dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ddc:	e010      	b.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009dde:	4b66      	ldr	r3, [pc, #408]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009de6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dea:	d106      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009df2:	d102      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009df4:	4b63      	ldr	r3, [pc, #396]	@ (8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 8009df6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009df8:	e002      	b.n	8009e00 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009dfe:	e003      	b.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009e00:	e002      	b.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e06:	bf00      	nop
          }
        }
        break;
 8009e08:	e0b1      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009e0a:	4b5b      	ldr	r3, [pc, #364]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e10:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009e14:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009e16:	4b58      	ldr	r3, [pc, #352]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e1c:	f003 0302 	and.w	r3, r3, #2
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d106      	bne.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 8009e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d103      	bne.n	8009e32 <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8009e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e30:	e01f      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8009e32:	4b51      	ldr	r3, [pc, #324]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e40:	d106      	bne.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 8009e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e44:	2b40      	cmp	r3, #64	@ 0x40
 8009e46:	d103      	bne.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009e48:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009e4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e4e:	e010      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009e50:	4b49      	ldr	r3, [pc, #292]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e5c:	d106      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e60:	2b80      	cmp	r3, #128	@ 0x80
 8009e62:	d103      	bne.n	8009e6c <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 8009e64:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009e68:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e6a:	e002      	b.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009e70:	e07d      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e72:	e07c      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009e74:	4b40      	ldr	r3, [pc, #256]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009e7a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009e7e:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009e80:	4b3d      	ldr	r3, [pc, #244]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009e88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e8c:	d105      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 8009e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d102      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 8009e94:	4b3c      	ldr	r3, [pc, #240]	@ (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e98:	e031      	b.n	8009efe <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009e9a:	4b37      	ldr	r3, [pc, #220]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009ea2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009ea6:	d10a      	bne.n	8009ebe <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	2b10      	cmp	r3, #16
 8009eac:	d107      	bne.n	8009ebe <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009eae:	f107 0320 	add.w	r3, r7, #32
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fd f8cc 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ebc:	e01f      	b.n	8009efe <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009ec0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ec4:	f003 0302 	and.w	r3, r3, #2
 8009ec8:	2b02      	cmp	r3, #2
 8009eca:	d106      	bne.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ece:	2b20      	cmp	r3, #32
 8009ed0:	d103      	bne.n	8009eda <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 8009ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ed8:	e011      	b.n	8009efe <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009eda:	4b27      	ldr	r3, [pc, #156]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009edc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009ee0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ee4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ee8:	d106      	bne.n	8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eec:	2b30      	cmp	r3, #48	@ 0x30
 8009eee:	d103      	bne.n	8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009ef0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009ef4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ef6:	e002      	b.n	8009efe <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009efc:	e037      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009efe:	e036      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009f00:	4b1d      	ldr	r3, [pc, #116]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009f06:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009f0a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0e:	2b10      	cmp	r3, #16
 8009f10:	d107      	bne.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f12:	f107 0320 	add.w	r3, r7, #32
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fd f89a 	bl	8007050 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f1e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009f20:	e025      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009f22:	4b15      	ldr	r3, [pc, #84]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f2e:	d10a      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f32:	2b20      	cmp	r3, #32
 8009f34:	d107      	bne.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f36:	f107 0308 	add.w	r3, r7, #8
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fd fb60 	bl	8007600 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f44:	e00f      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009f46:	4b0c      	ldr	r3, [pc, #48]	@ (8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009f4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f52:	d105      	bne.n	8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f56:	2b30      	cmp	r3, #48	@ 0x30
 8009f58:	d102      	bne.n	8009f60 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f5e:	e002      	b.n	8009f66 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009f60:	2300      	movs	r3, #0
 8009f62:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009f64:	e003      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f66:	e002      	b.n	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f6c:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8009f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	373c      	adds	r7, #60	@ 0x3c
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd90      	pop	{r4, r7, pc}
 8009f78:	44020c00 	.word	0x44020c00
 8009f7c:	03d09000 	.word	0x03d09000
 8009f80:	003d0900 	.word	0x003d0900
 8009f84:	007a1200 	.word	0x007a1200
 8009f88:	02dc6c00 	.word	0x02dc6c00

08009f8c <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009f94:	4b48      	ldr	r3, [pc, #288]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a47      	ldr	r2, [pc, #284]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 8009f9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009f9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009fa0:	f7f7 ff18 	bl	8001dd4 <HAL_GetTick>
 8009fa4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fa6:	e008      	b.n	8009fba <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009fa8:	f7f7 ff14 	bl	8001dd4 <HAL_GetTick>
 8009fac:	4602      	mov	r2, r0
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	2b02      	cmp	r3, #2
 8009fb4:	d901      	bls.n	8009fba <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e07a      	b.n	800a0b0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009fba:	4b3f      	ldr	r3, [pc, #252]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1f0      	bne.n	8009fa8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009fc6:	4b3c      	ldr	r3, [pc, #240]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 8009fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fca:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009fce:	f023 0303 	bic.w	r3, r3, #3
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	6811      	ldr	r1, [r2, #0]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	6852      	ldr	r2, [r2, #4]
 8009fda:	0212      	lsls	r2, r2, #8
 8009fdc:	430a      	orrs	r2, r1
 8009fde:	4936      	ldr	r1, [pc, #216]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	025b      	lsls	r3, r3, #9
 8009ff6:	b29b      	uxth	r3, r3
 8009ff8:	431a      	orrs	r2, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	041b      	lsls	r3, r3, #16
 800a002:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a006:	431a      	orrs	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	695b      	ldr	r3, [r3, #20]
 800a00c:	3b01      	subs	r3, #1
 800a00e:	061b      	lsls	r3, r3, #24
 800a010:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a014:	4928      	ldr	r1, [pc, #160]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a016:	4313      	orrs	r3, r2
 800a018:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a01a:	4b27      	ldr	r3, [pc, #156]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01e:	f023 020c 	bic.w	r2, r3, #12
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	699b      	ldr	r3, [r3, #24]
 800a026:	4924      	ldr	r1, [pc, #144]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a028:	4313      	orrs	r3, r2
 800a02a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800a02c:	4b22      	ldr	r3, [pc, #136]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a030:	f023 0220 	bic.w	r2, r3, #32
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	69db      	ldr	r3, [r3, #28]
 800a038:	491f      	ldr	r1, [pc, #124]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a03a:	4313      	orrs	r3, r2
 800a03c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a03e:	4b1e      	ldr	r3, [pc, #120]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a040:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a046:	491c      	ldr	r1, [pc, #112]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a048:	4313      	orrs	r3, r2
 800a04a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800a04c:	4b1a      	ldr	r3, [pc, #104]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a050:	4a19      	ldr	r2, [pc, #100]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a052:	f023 0310 	bic.w	r3, r3, #16
 800a056:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800a058:	4b17      	ldr	r3, [pc, #92]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a05a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a05c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a060:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	6a12      	ldr	r2, [r2, #32]
 800a068:	00d2      	lsls	r2, r2, #3
 800a06a:	4913      	ldr	r1, [pc, #76]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800a070:	4b11      	ldr	r3, [pc, #68]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a074:	4a10      	ldr	r2, [pc, #64]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a076:	f043 0310 	orr.w	r3, r3, #16
 800a07a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800a07c:	4b0e      	ldr	r3, [pc, #56]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	4a0d      	ldr	r2, [pc, #52]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a082:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a086:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a088:	f7f7 fea4 	bl	8001dd4 <HAL_GetTick>
 800a08c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a08e:	e008      	b.n	800a0a2 <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a090:	f7f7 fea0 	bl	8001dd4 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d901      	bls.n	800a0a2 <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e006      	b.n	800a0b0 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a0a2:	4b05      	ldr	r3, [pc, #20]	@ (800a0b8 <RCCEx_PLL2_Config+0x12c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d0f0      	beq.n	800a090 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800a0ae:	2300      	movs	r3, #0

}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	44020c00 	.word	0x44020c00

0800a0bc <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800a0c4:	4b48      	ldr	r3, [pc, #288]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a47      	ldr	r2, [pc, #284]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a0ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a0ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a0d0:	f7f7 fe80 	bl	8001dd4 <HAL_GetTick>
 800a0d4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0d6:	e008      	b.n	800a0ea <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a0d8:	f7f7 fe7c 	bl	8001dd4 <HAL_GetTick>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	1ad3      	subs	r3, r2, r3
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d901      	bls.n	800a0ea <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a0e6:	2303      	movs	r3, #3
 800a0e8:	e07a      	b.n	800a1e0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a0ea:	4b3f      	ldr	r3, [pc, #252]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d1f0      	bne.n	800a0d8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a0f6:	4b3c      	ldr	r3, [pc, #240]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a0f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0fa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a0fe:	f023 0303 	bic.w	r3, r3, #3
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	6811      	ldr	r1, [r2, #0]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	6852      	ldr	r2, [r2, #4]
 800a10a:	0212      	lsls	r2, r2, #8
 800a10c:	430a      	orrs	r2, r1
 800a10e:	4936      	ldr	r1, [pc, #216]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a110:	4313      	orrs	r3, r2
 800a112:	630b      	str	r3, [r1, #48]	@ 0x30
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	3b01      	subs	r3, #1
 800a11a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	3b01      	subs	r3, #1
 800a124:	025b      	lsls	r3, r3, #9
 800a126:	b29b      	uxth	r3, r3
 800a128:	431a      	orrs	r2, r3
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	3b01      	subs	r3, #1
 800a130:	041b      	lsls	r3, r3, #16
 800a132:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a136:	431a      	orrs	r2, r3
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	695b      	ldr	r3, [r3, #20]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	061b      	lsls	r3, r3, #24
 800a140:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a144:	4928      	ldr	r1, [pc, #160]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a146:	4313      	orrs	r3, r2
 800a148:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a14a:	4b27      	ldr	r3, [pc, #156]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a14c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a14e:	f023 020c 	bic.w	r2, r3, #12
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	699b      	ldr	r3, [r3, #24]
 800a156:	4924      	ldr	r1, [pc, #144]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a158:	4313      	orrs	r3, r2
 800a15a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800a15c:	4b22      	ldr	r3, [pc, #136]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a15e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a160:	f023 0220 	bic.w	r2, r3, #32
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	491f      	ldr	r1, [pc, #124]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a16a:	4313      	orrs	r3, r2
 800a16c:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a16e:	4b1e      	ldr	r3, [pc, #120]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a170:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a176:	491c      	ldr	r1, [pc, #112]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a178:	4313      	orrs	r3, r2
 800a17a:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800a17c:	4b1a      	ldr	r3, [pc, #104]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a17e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a180:	4a19      	ldr	r2, [pc, #100]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a182:	f023 0310 	bic.w	r3, r3, #16
 800a186:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800a188:	4b17      	ldr	r3, [pc, #92]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a18a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a18c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a190:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	6a12      	ldr	r2, [r2, #32]
 800a198:	00d2      	lsls	r2, r2, #3
 800a19a:	4913      	ldr	r1, [pc, #76]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a19c:	4313      	orrs	r3, r2
 800a19e:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800a1a0:	4b11      	ldr	r3, [pc, #68]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a1a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1a4:	4a10      	ldr	r2, [pc, #64]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a1a6:	f043 0310 	orr.w	r3, r3, #16
 800a1aa:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800a1ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a0d      	ldr	r2, [pc, #52]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a1b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1b6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a1b8:	f7f7 fe0c 	bl	8001dd4 <HAL_GetTick>
 800a1bc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1be:	e008      	b.n	800a1d2 <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a1c0:	f7f7 fe08 	bl	8001dd4 <HAL_GetTick>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	2b02      	cmp	r3, #2
 800a1cc:	d901      	bls.n	800a1d2 <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e006      	b.n	800a1e0 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a1d2:	4b05      	ldr	r3, [pc, #20]	@ (800a1e8 <RCCEx_PLL3_Config+0x12c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0f0      	beq.n	800a1c0 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800a1de:	2300      	movs	r3, #0
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	44020c00 	.word	0x44020c00

0800a1ec <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d101      	bne.n	800a1fe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	e08c      	b.n	800a318 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	7a5b      	ldrb	r3, [r3, #9]
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b00      	cmp	r3, #0
 800a206:	d105      	bne.n	800a214 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7f6 ff4e 	bl	80010b0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f022 0204 	bic.w	r2, r2, #4
 800a228:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6859      	ldr	r1, [r3, #4]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	4b3b      	ldr	r3, [pc, #236]	@ (800a320 <HAL_RNG_Init+0x134>)
 800a234:	430b      	orrs	r3, r1
 800a236:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800a240:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a37      	ldr	r2, [pc, #220]	@ (800a324 <HAL_RNG_Init+0x138>)
 800a248:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800a258:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a25a:	f7f7 fdbb 	bl	8001dd4 <HAL_GetTick>
 800a25e:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a260:	e016      	b.n	800a290 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a262:	f7f7 fdb7 	bl	8001dd4 <HAL_GetTick>
 800a266:	4602      	mov	r2, r0
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	2b04      	cmp	r3, #4
 800a26e:	d90f      	bls.n	800a290 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a27a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a27e:	d107      	bne.n	800a290 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2202      	movs	r2, #2
 800a28a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e043      	b.n	800a318 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a29a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a29e:	d0e0      	beq.n	800a262 <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f042 0204 	orr.w	r2, r2, #4
 800a2ae:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2ba:	2b40      	cmp	r3, #64	@ 0x40
 800a2bc:	d104      	bne.n	800a2c8 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2204      	movs	r2, #4
 800a2c2:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e027      	b.n	800a318 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800a2c8:	f7f7 fd84 	bl	8001dd4 <HAL_GetTick>
 800a2cc:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a2ce:	e015      	b.n	800a2fc <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800a2d0:	f7f7 fd80 	bl	8001dd4 <HAL_GetTick>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	1ad3      	subs	r3, r2, r3
 800a2da:	2b04      	cmp	r3, #4
 800a2dc:	d90e      	bls.n	800a2fc <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	f003 0301 	and.w	r3, r3, #1
 800a2e8:	2b01      	cmp	r3, #1
 800a2ea:	d007      	beq.n	800a2fc <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2204      	movs	r2, #4
 800a2f0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2202      	movs	r2, #2
 800a2f6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e00d      	b.n	800a318 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	f003 0301 	and.w	r3, r3, #1
 800a306:	2b01      	cmp	r3, #1
 800a308:	d1e2      	bne.n	800a2d0 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3710      	adds	r7, #16
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	40f00e00 	.word	0x40f00e00
 800a324:	0003af66 	.word	0x0003af66

0800a328 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d071      	beq.n	800a41e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a340:	b2db      	uxtb	r3, r3
 800a342:	2b00      	cmp	r3, #0
 800a344:	d106      	bne.n	800a354 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f7f6 ff06 	bl	8001160 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a35c:	4b32      	ldr	r3, [pc, #200]	@ (800a428 <HAL_RTC_Init+0x100>)
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f003 0310 	and.w	r3, r3, #16
 800a364:	2b10      	cmp	r3, #16
 800a366:	d051      	beq.n	800a40c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a368:	4b2f      	ldr	r3, [pc, #188]	@ (800a428 <HAL_RTC_Init+0x100>)
 800a36a:	22ca      	movs	r2, #202	@ 0xca
 800a36c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a36e:	4b2e      	ldr	r3, [pc, #184]	@ (800a428 <HAL_RTC_Init+0x100>)
 800a370:	2253      	movs	r2, #83	@ 0x53
 800a372:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f9a3 	bl	800a6c0 <RTC_EnterInitMode>
 800a37a:	4603      	mov	r3, r0
 800a37c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d13f      	bne.n	800a404 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a384:	4b28      	ldr	r3, [pc, #160]	@ (800a428 <HAL_RTC_Init+0x100>)
 800a386:	699b      	ldr	r3, [r3, #24]
 800a388:	4a27      	ldr	r2, [pc, #156]	@ (800a428 <HAL_RTC_Init+0x100>)
 800a38a:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800a38e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a392:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a394:	4b24      	ldr	r3, [pc, #144]	@ (800a428 <HAL_RTC_Init+0x100>)
 800a396:	699a      	ldr	r2, [r3, #24]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6859      	ldr	r1, [r3, #4]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	4319      	orrs	r1, r3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	699b      	ldr	r3, [r3, #24]
 800a3a6:	430b      	orrs	r3, r1
 800a3a8:	491f      	ldr	r1, [pc, #124]	@ (800a428 <HAL_RTC_Init+0x100>)
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68da      	ldr	r2, [r3, #12]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	041b      	lsls	r3, r3, #16
 800a3b8:	491b      	ldr	r1, [pc, #108]	@ (800a428 <HAL_RTC_Init+0x100>)
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a3be:	4b1a      	ldr	r3, [pc, #104]	@ (800a428 <HAL_RTC_Init+0x100>)
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ce:	430b      	orrs	r3, r1
 800a3d0:	4915      	ldr	r1, [pc, #84]	@ (800a428 <HAL_RTC_Init+0x100>)
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 f9ae 	bl	800a738 <RTC_ExitInitMode>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800a3e0:	7bfb      	ldrb	r3, [r7, #15]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10e      	bne.n	800a404 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800a3e6:	4b10      	ldr	r3, [pc, #64]	@ (800a428 <HAL_RTC_Init+0x100>)
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a19      	ldr	r1, [r3, #32]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	69db      	ldr	r3, [r3, #28]
 800a3f6:	4319      	orrs	r1, r3
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	695b      	ldr	r3, [r3, #20]
 800a3fc:	430b      	orrs	r3, r1
 800a3fe:	490a      	ldr	r1, [pc, #40]	@ (800a428 <HAL_RTC_Init+0x100>)
 800a400:	4313      	orrs	r3, r2
 800a402:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a404:	4b08      	ldr	r3, [pc, #32]	@ (800a428 <HAL_RTC_Init+0x100>)
 800a406:	22ff      	movs	r2, #255	@ 0xff
 800a408:	625a      	str	r2, [r3, #36]	@ 0x24
 800a40a:	e001      	b.n	800a410 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a40c:	2300      	movs	r3, #0
 800a40e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a410:	7bfb      	ldrb	r3, [r7, #15]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d103      	bne.n	800a41e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2201      	movs	r2, #1
 800a41a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	44007800 	.word	0x44007800

0800a42c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a42c:	b590      	push	{r4, r7, lr}
 800a42e:	b087      	sub	sp, #28
 800a430:	af00      	add	r7, sp, #0
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a43e:	2b01      	cmp	r3, #1
 800a440:	d101      	bne.n	800a446 <HAL_RTC_SetTime+0x1a>
 800a442:	2302      	movs	r3, #2
 800a444:	e07e      	b.n	800a544 <HAL_RTC_SetTime+0x118>
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	2202      	movs	r2, #2
 800a452:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a456:	4b3d      	ldr	r3, [pc, #244]	@ (800a54c <HAL_RTC_SetTime+0x120>)
 800a458:	22ca      	movs	r2, #202	@ 0xca
 800a45a:	625a      	str	r2, [r3, #36]	@ 0x24
 800a45c:	4b3b      	ldr	r3, [pc, #236]	@ (800a54c <HAL_RTC_SetTime+0x120>)
 800a45e:	2253      	movs	r2, #83	@ 0x53
 800a460:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a462:	68f8      	ldr	r0, [r7, #12]
 800a464:	f000 f92c 	bl	800a6c0 <RTC_EnterInitMode>
 800a468:	4603      	mov	r3, r0
 800a46a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a46c:	7cfb      	ldrb	r3, [r7, #19]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d159      	bne.n	800a526 <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800a472:	4b36      	ldr	r3, [pc, #216]	@ (800a54c <HAL_RTC_SetTime+0x120>)
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a47a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a47e:	d04d      	beq.n	800a51c <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d125      	bne.n	800a4d2 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a486:	4b31      	ldr	r3, [pc, #196]	@ (800a54c <HAL_RTC_SetTime+0x120>)
 800a488:	699b      	ldr	r3, [r3, #24]
 800a48a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d102      	bne.n	800a498 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	2200      	movs	r2, #0
 800a496:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	4618      	mov	r0, r3
 800a49e:	f000 f989 	bl	800a7b4 <RTC_ByteToBcd2>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	785b      	ldrb	r3, [r3, #1]
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	f000 f982 	bl	800a7b4 <RTC_ByteToBcd2>
 800a4b0:	4603      	mov	r3, r0
 800a4b2:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a4b4:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	789b      	ldrb	r3, [r3, #2]
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 f97a 	bl	800a7b4 <RTC_ByteToBcd2>
 800a4c0:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a4c2:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	78db      	ldrb	r3, [r3, #3]
 800a4ca:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	617b      	str	r3, [r7, #20]
 800a4d0:	e017      	b.n	800a502 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800a4d2:	4b1e      	ldr	r3, [pc, #120]	@ (800a54c <HAL_RTC_SetTime+0x120>)
 800a4d4:	699b      	ldr	r3, [r3, #24]
 800a4d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d102      	bne.n	800a4e4 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	781b      	ldrb	r3, [r3, #0]
 800a4e8:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	785b      	ldrb	r3, [r3, #1]
 800a4ee:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a4f0:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800a4f6:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	78db      	ldrb	r3, [r3, #3]
 800a4fc:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800a4fe:	4313      	orrs	r3, r2
 800a500:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800a502:	4a12      	ldr	r2, [pc, #72]	@ (800a54c <HAL_RTC_SetTime+0x120>)
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800a50a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a50e:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800a510:	4b0e      	ldr	r3, [pc, #56]	@ (800a54c <HAL_RTC_SetTime+0x120>)
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	4a0d      	ldr	r2, [pc, #52]	@ (800a54c <HAL_RTC_SetTime+0x120>)
 800a516:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a51a:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f000 f90b 	bl	800a738 <RTC_ExitInitMode>
 800a522:	4603      	mov	r3, r0
 800a524:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a526:	4b09      	ldr	r3, [pc, #36]	@ (800a54c <HAL_RTC_SetTime+0x120>)
 800a528:	22ff      	movs	r2, #255	@ 0xff
 800a52a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a52c:	7cfb      	ldrb	r3, [r7, #19]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d103      	bne.n	800a53a <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a542:	7cfb      	ldrb	r3, [r7, #19]
}
 800a544:	4618      	mov	r0, r3
 800a546:	371c      	adds	r7, #28
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd90      	pop	{r4, r7, pc}
 800a54c:	44007800 	.word	0x44007800

0800a550 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a550:	b590      	push	{r4, r7, lr}
 800a552:	b087      	sub	sp, #28
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a562:	2b01      	cmp	r3, #1
 800a564:	d101      	bne.n	800a56a <HAL_RTC_SetDate+0x1a>
 800a566:	2302      	movs	r3, #2
 800a568:	e071      	b.n	800a64e <HAL_RTC_SetDate+0xfe>
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2201      	movs	r2, #1
 800a56e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2202      	movs	r2, #2
 800a576:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10e      	bne.n	800a59e <HAL_RTC_SetDate+0x4e>
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	785b      	ldrb	r3, [r3, #1]
 800a584:	f003 0310 	and.w	r3, r3, #16
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d008      	beq.n	800a59e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	785b      	ldrb	r3, [r3, #1]
 800a590:	f023 0310 	bic.w	r3, r3, #16
 800a594:	b2db      	uxtb	r3, r3
 800a596:	330a      	adds	r3, #10
 800a598:	b2da      	uxtb	r2, r3
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d11c      	bne.n	800a5de <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	78db      	ldrb	r3, [r3, #3]
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f000 f903 	bl	800a7b4 <RTC_ByteToBcd2>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	785b      	ldrb	r3, [r3, #1]
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 f8fc 	bl	800a7b4 <RTC_ByteToBcd2>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a5c0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	789b      	ldrb	r3, [r3, #2]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f000 f8f4 	bl	800a7b4 <RTC_ByteToBcd2>
 800a5cc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a5ce:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	617b      	str	r3, [r7, #20]
 800a5dc:	e00e      	b.n	800a5fc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	78db      	ldrb	r3, [r3, #3]
 800a5e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	785b      	ldrb	r3, [r3, #1]
 800a5e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a5ea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800a5ec:	68ba      	ldr	r2, [r7, #8]
 800a5ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800a5f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5fc:	4b16      	ldr	r3, [pc, #88]	@ (800a658 <HAL_RTC_SetDate+0x108>)
 800a5fe:	22ca      	movs	r2, #202	@ 0xca
 800a600:	625a      	str	r2, [r3, #36]	@ 0x24
 800a602:	4b15      	ldr	r3, [pc, #84]	@ (800a658 <HAL_RTC_SetDate+0x108>)
 800a604:	2253      	movs	r2, #83	@ 0x53
 800a606:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f000 f859 	bl	800a6c0 <RTC_EnterInitMode>
 800a60e:	4603      	mov	r3, r0
 800a610:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800a612:	7cfb      	ldrb	r3, [r7, #19]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d10b      	bne.n	800a630 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800a618:	4a0f      	ldr	r2, [pc, #60]	@ (800a658 <HAL_RTC_SetDate+0x108>)
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a620:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a624:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f000 f886 	bl	800a738 <RTC_ExitInitMode>
 800a62c:	4603      	mov	r3, r0
 800a62e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a630:	4b09      	ldr	r3, [pc, #36]	@ (800a658 <HAL_RTC_SetDate+0x108>)
 800a632:	22ff      	movs	r2, #255	@ 0xff
 800a634:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800a636:	7cfb      	ldrb	r3, [r7, #19]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d103      	bne.n	800a644 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800a64c:	7cfb      	ldrb	r3, [r7, #19]
}
 800a64e:	4618      	mov	r0, r3
 800a650:	371c      	adds	r7, #28
 800a652:	46bd      	mov	sp, r7
 800a654:	bd90      	pop	{r4, r7, pc}
 800a656:	bf00      	nop
 800a658:	44007800 	.word	0x44007800

0800a65c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a664:	4b15      	ldr	r3, [pc, #84]	@ (800a6bc <HAL_RTC_WaitForSynchro+0x60>)
 800a666:	68db      	ldr	r3, [r3, #12]
 800a668:	4a14      	ldr	r2, [pc, #80]	@ (800a6bc <HAL_RTC_WaitForSynchro+0x60>)
 800a66a:	f023 0320 	bic.w	r3, r3, #32
 800a66e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a670:	f7f7 fbb0 	bl	8001dd4 <HAL_GetTick>
 800a674:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a676:	e013      	b.n	800a6a0 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a678:	f7f7 fbac 	bl	8001dd4 <HAL_GetTick>
 800a67c:	4602      	mov	r2, r0
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a686:	d90b      	bls.n	800a6a0 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a688:	4b0c      	ldr	r3, [pc, #48]	@ (800a6bc <HAL_RTC_WaitForSynchro+0x60>)
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	f003 0320 	and.w	r3, r3, #32
 800a690:	2b00      	cmp	r3, #0
 800a692:	d10c      	bne.n	800a6ae <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2203      	movs	r2, #3
 800a698:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e008      	b.n	800a6b2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a6a0:	4b06      	ldr	r3, [pc, #24]	@ (800a6bc <HAL_RTC_WaitForSynchro+0x60>)
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f003 0320 	and.w	r3, r3, #32
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d0e5      	beq.n	800a678 <HAL_RTC_WaitForSynchro+0x1c>
 800a6ac:	e000      	b.n	800a6b0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800a6ae:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800a6b0:	2300      	movs	r3, #0
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3710      	adds	r7, #16
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	44007800 	.word	0x44007800

0800a6c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b084      	sub	sp, #16
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a6cc:	4b19      	ldr	r3, [pc, #100]	@ (800a734 <RTC_EnterInitMode+0x74>)
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d128      	bne.n	800a72a <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a6d8:	4b16      	ldr	r3, [pc, #88]	@ (800a734 <RTC_EnterInitMode+0x74>)
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	4a15      	ldr	r2, [pc, #84]	@ (800a734 <RTC_EnterInitMode+0x74>)
 800a6de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6e2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a6e4:	f7f7 fb76 	bl	8001dd4 <HAL_GetTick>
 800a6e8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a6ea:	e013      	b.n	800a714 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a6ec:	f7f7 fb72 	bl	8001dd4 <HAL_GetTick>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6fa:	d90b      	bls.n	800a714 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a6fc:	4b0d      	ldr	r3, [pc, #52]	@ (800a734 <RTC_EnterInitMode+0x74>)
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10f      	bne.n	800a728 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800a708:	2303      	movs	r3, #3
 800a70a:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2203      	movs	r2, #3
 800a710:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a714:	4b07      	ldr	r3, [pc, #28]	@ (800a734 <RTC_EnterInitMode+0x74>)
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d104      	bne.n	800a72a <RTC_EnterInitMode+0x6a>
 800a720:	7bfb      	ldrb	r3, [r7, #15]
 800a722:	2b03      	cmp	r3, #3
 800a724:	d1e2      	bne.n	800a6ec <RTC_EnterInitMode+0x2c>
 800a726:	e000      	b.n	800a72a <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800a728:	bf00      	nop
        }
      }
    }
  }

  return status;
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}
 800a734:	44007800 	.word	0x44007800

0800a738 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a740:	2300      	movs	r3, #0
 800a742:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a744:	4b1a      	ldr	r3, [pc, #104]	@ (800a7b0 <RTC_ExitInitMode+0x78>)
 800a746:	68db      	ldr	r3, [r3, #12]
 800a748:	4a19      	ldr	r2, [pc, #100]	@ (800a7b0 <RTC_ExitInitMode+0x78>)
 800a74a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a74e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a750:	4b17      	ldr	r3, [pc, #92]	@ (800a7b0 <RTC_ExitInitMode+0x78>)
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	f003 0320 	and.w	r3, r3, #32
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10c      	bne.n	800a776 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7ff ff7d 	bl	800a65c <HAL_RTC_WaitForSynchro>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	d01e      	beq.n	800a7a6 <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2203      	movs	r2, #3
 800a76c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a770:	2303      	movs	r3, #3
 800a772:	73fb      	strb	r3, [r7, #15]
 800a774:	e017      	b.n	800a7a6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a776:	4b0e      	ldr	r3, [pc, #56]	@ (800a7b0 <RTC_ExitInitMode+0x78>)
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	4a0d      	ldr	r2, [pc, #52]	@ (800a7b0 <RTC_ExitInitMode+0x78>)
 800a77c:	f023 0320 	bic.w	r3, r3, #32
 800a780:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	f7ff ff6a 	bl	800a65c <HAL_RTC_WaitForSynchro>
 800a788:	4603      	mov	r3, r0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d005      	beq.n	800a79a <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2203      	movs	r2, #3
 800a792:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800a796:	2303      	movs	r3, #3
 800a798:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a79a:	4b05      	ldr	r3, [pc, #20]	@ (800a7b0 <RTC_ExitInitMode+0x78>)
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	4a04      	ldr	r2, [pc, #16]	@ (800a7b0 <RTC_ExitInitMode+0x78>)
 800a7a0:	f043 0320 	orr.w	r3, r3, #32
 800a7a4:	6193      	str	r3, [r2, #24]
  }
  return status;
 800a7a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	44007800 	.word	0x44007800

0800a7b4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b085      	sub	sp, #20
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800a7c2:	79fb      	ldrb	r3, [r7, #7]
 800a7c4:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800a7c6:	e005      	b.n	800a7d4 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	3301      	adds	r3, #1
 800a7cc:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800a7ce:	7afb      	ldrb	r3, [r7, #11]
 800a7d0:	3b0a      	subs	r3, #10
 800a7d2:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800a7d4:	7afb      	ldrb	r3, [r7, #11]
 800a7d6:	2b09      	cmp	r3, #9
 800a7d8:	d8f6      	bhi.n	800a7c8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	b2db      	uxtb	r3, r3
 800a7de:	011b      	lsls	r3, r3, #4
 800a7e0:	b2da      	uxtb	r2, r3
 800a7e2:	7afb      	ldrb	r3, [r7, #11]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	b2db      	uxtb	r3, r3
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3714      	adds	r7, #20
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	681a      	ldr	r2, [r3, #0]
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	4910      	ldr	r1, [pc, #64]	@ (800a848 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a808:	4313      	orrs	r3, r2
 800a80a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	431a      	orrs	r2, r3
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	699b      	ldr	r3, [r3, #24]
 800a81a:	490c      	ldr	r1, [pc, #48]	@ (800a84c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a81c:	4313      	orrs	r3, r2
 800a81e:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800a820:	4b0a      	ldr	r3, [pc, #40]	@ (800a84c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a822:	6a1b      	ldr	r3, [r3, #32]
 800a824:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	6919      	ldr	r1, [r3, #16]
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	041b      	lsls	r3, r3, #16
 800a832:	430b      	orrs	r3, r1
 800a834:	4905      	ldr	r1, [pc, #20]	@ (800a84c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a836:	4313      	orrs	r3, r2
 800a838:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	44007800 	.word	0x44007800
 800a84c:	44007c00 	.word	0x44007c00

0800a850 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d101      	bne.n	800a862 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e162      	b.n	800ab28 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a70      	ldr	r2, [pc, #448]	@ (800aa28 <HAL_SPI_Init+0x1d8>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d018      	beq.n	800a89e <HAL_SPI_Init+0x4e>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a6e      	ldr	r2, [pc, #440]	@ (800aa2c <HAL_SPI_Init+0x1dc>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d013      	beq.n	800a89e <HAL_SPI_Init+0x4e>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a6d      	ldr	r2, [pc, #436]	@ (800aa30 <HAL_SPI_Init+0x1e0>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d00e      	beq.n	800a89e <HAL_SPI_Init+0x4e>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a6b      	ldr	r2, [pc, #428]	@ (800aa34 <HAL_SPI_Init+0x1e4>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d009      	beq.n	800a89e <HAL_SPI_Init+0x4e>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a6a      	ldr	r2, [pc, #424]	@ (800aa38 <HAL_SPI_Init+0x1e8>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d004      	beq.n	800a89e <HAL_SPI_Init+0x4e>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a68      	ldr	r2, [pc, #416]	@ (800aa3c <HAL_SPI_Init+0x1ec>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	e000      	b.n	800a8a0 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800a89e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a5f      	ldr	r2, [pc, #380]	@ (800aa28 <HAL_SPI_Init+0x1d8>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d018      	beq.n	800a8e2 <HAL_SPI_Init+0x92>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a5d      	ldr	r2, [pc, #372]	@ (800aa2c <HAL_SPI_Init+0x1dc>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d013      	beq.n	800a8e2 <HAL_SPI_Init+0x92>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a5c      	ldr	r2, [pc, #368]	@ (800aa30 <HAL_SPI_Init+0x1e0>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d00e      	beq.n	800a8e2 <HAL_SPI_Init+0x92>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a5a      	ldr	r2, [pc, #360]	@ (800aa34 <HAL_SPI_Init+0x1e4>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d009      	beq.n	800a8e2 <HAL_SPI_Init+0x92>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a59      	ldr	r2, [pc, #356]	@ (800aa38 <HAL_SPI_Init+0x1e8>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d004      	beq.n	800a8e2 <HAL_SPI_Init+0x92>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a57      	ldr	r2, [pc, #348]	@ (800aa3c <HAL_SPI_Init+0x1ec>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d105      	bne.n	800a8ee <HAL_SPI_Init+0x9e>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	2b0f      	cmp	r3, #15
 800a8e8:	d901      	bls.n	800a8ee <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e11c      	b.n	800ab28 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f91e 	bl	800ab30 <SPI_GetPacketSize>
 800a8f4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a4b      	ldr	r2, [pc, #300]	@ (800aa28 <HAL_SPI_Init+0x1d8>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d018      	beq.n	800a932 <HAL_SPI_Init+0xe2>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a49      	ldr	r2, [pc, #292]	@ (800aa2c <HAL_SPI_Init+0x1dc>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d013      	beq.n	800a932 <HAL_SPI_Init+0xe2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	4a48      	ldr	r2, [pc, #288]	@ (800aa30 <HAL_SPI_Init+0x1e0>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d00e      	beq.n	800a932 <HAL_SPI_Init+0xe2>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a46      	ldr	r2, [pc, #280]	@ (800aa34 <HAL_SPI_Init+0x1e4>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d009      	beq.n	800a932 <HAL_SPI_Init+0xe2>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a45      	ldr	r2, [pc, #276]	@ (800aa38 <HAL_SPI_Init+0x1e8>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d004      	beq.n	800a932 <HAL_SPI_Init+0xe2>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4a43      	ldr	r2, [pc, #268]	@ (800aa3c <HAL_SPI_Init+0x1ec>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d102      	bne.n	800a938 <HAL_SPI_Init+0xe8>
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2b08      	cmp	r3, #8
 800a936:	d820      	bhi.n	800a97a <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a93c:	4a40      	ldr	r2, [pc, #256]	@ (800aa40 <HAL_SPI_Init+0x1f0>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d018      	beq.n	800a974 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a3f      	ldr	r2, [pc, #252]	@ (800aa44 <HAL_SPI_Init+0x1f4>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d013      	beq.n	800a974 <HAL_SPI_Init+0x124>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a3d      	ldr	r2, [pc, #244]	@ (800aa48 <HAL_SPI_Init+0x1f8>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d00e      	beq.n	800a974 <HAL_SPI_Init+0x124>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a3c      	ldr	r2, [pc, #240]	@ (800aa4c <HAL_SPI_Init+0x1fc>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d009      	beq.n	800a974 <HAL_SPI_Init+0x124>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a3a      	ldr	r2, [pc, #232]	@ (800aa50 <HAL_SPI_Init+0x200>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d004      	beq.n	800a974 <HAL_SPI_Init+0x124>
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	4a39      	ldr	r2, [pc, #228]	@ (800aa54 <HAL_SPI_Init+0x204>)
 800a970:	4293      	cmp	r3, r2
 800a972:	d104      	bne.n	800a97e <HAL_SPI_Init+0x12e>
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2b10      	cmp	r3, #16
 800a978:	d901      	bls.n	800a97e <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e0d4      	b.n	800ab28 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800a984:	b2db      	uxtb	r3, r3
 800a986:	2b00      	cmp	r3, #0
 800a988:	d106      	bne.n	800a998 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2200      	movs	r2, #0
 800a98e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f7f6 fc44 	bl	8001220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2202      	movs	r2, #2
 800a99c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f022 0201 	bic.w	r2, r2, #1
 800a9ae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800a9ba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a9c4:	d119      	bne.n	800a9fa <HAL_SPI_Init+0x1aa>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a9ce:	d103      	bne.n	800a9d8 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d008      	beq.n	800a9ea <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10c      	bne.n	800a9fa <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a9e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9e8:	d107      	bne.n	800a9fa <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a9f8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d028      	beq.n	800aa58 <HAL_SPI_Init+0x208>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	2b06      	cmp	r3, #6
 800aa0c:	d924      	bls.n	800aa58 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	430a      	orrs	r2, r1
 800aa22:	601a      	str	r2, [r3, #0]
 800aa24:	e020      	b.n	800aa68 <HAL_SPI_Init+0x218>
 800aa26:	bf00      	nop
 800aa28:	40014c00 	.word	0x40014c00
 800aa2c:	50014c00 	.word	0x50014c00
 800aa30:	44002000 	.word	0x44002000
 800aa34:	54002000 	.word	0x54002000
 800aa38:	40015000 	.word	0x40015000
 800aa3c:	50015000 	.word	0x50015000
 800aa40:	40013000 	.word	0x40013000
 800aa44:	50013000 	.word	0x50013000
 800aa48:	40003800 	.word	0x40003800
 800aa4c:	50003800 	.word	0x50003800
 800aa50:	40003c00 	.word	0x40003c00
 800aa54:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681a      	ldr	r2, [r3, #0]
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aa66:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	69da      	ldr	r2, [r3, #28]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa70:	431a      	orrs	r2, r3
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	431a      	orrs	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa7a:	ea42 0103 	orr.w	r1, r2, r3
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68da      	ldr	r2, [r3, #12]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	430a      	orrs	r2, r1
 800aa88:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa92:	431a      	orrs	r2, r3
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa98:	431a      	orrs	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	699b      	ldr	r3, [r3, #24]
 800aa9e:	431a      	orrs	r2, r3
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	431a      	orrs	r2, r3
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	695b      	ldr	r3, [r3, #20]
 800aaaa:	431a      	orrs	r2, r3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a1b      	ldr	r3, [r3, #32]
 800aab0:	431a      	orrs	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	431a      	orrs	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aabc:	431a      	orrs	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	431a      	orrs	r2, r3
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aac8:	431a      	orrs	r2, r3
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aace:	431a      	orrs	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aad4:	ea42 0103 	orr.w	r1, r2, r3
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	430a      	orrs	r2, r1
 800aae2:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f022 0201 	bic.w	r2, r2, #1
 800aaf2:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00a      	beq.n	800ab16 <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2200      	movs	r2, #0
 800ab1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b085      	sub	sp, #20
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab3c:	095b      	lsrs	r3, r3, #5
 800ab3e:	3301      	adds	r3, #1
 800ab40:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	3301      	adds	r3, #1
 800ab48:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	3307      	adds	r3, #7
 800ab4e:	08db      	lsrs	r3, r3, #3
 800ab50:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	fb02 f303 	mul.w	r3, r2, r3
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3714      	adds	r7, #20
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr

0800ab66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d101      	bne.n	800ab78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	e042      	b.n	800abfe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d106      	bne.n	800ab90 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ab8a:	6878      	ldr	r0, [r7, #4]
 800ab8c:	f7f6 fc04 	bl	8001398 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2224      	movs	r2, #36	@ 0x24
 800ab94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f022 0201 	bic.w	r2, r2, #1
 800aba6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abac:	2b00      	cmp	r3, #0
 800abae:	d002      	beq.n	800abb6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fa17 	bl	800afe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f826 	bl	800ac08 <UART_SetConfig>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d101      	bne.n	800abc6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e01b      	b.n	800abfe <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	685a      	ldr	r2, [r3, #4]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800abd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	689a      	ldr	r2, [r3, #8]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800abe4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f042 0201 	orr.w	r2, r2, #1
 800abf4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fa96 	bl	800b128 <UART_CheckIdleState>
 800abfc:	4603      	mov	r3, r0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
	...

0800ac08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac0c:	b094      	sub	sp, #80	@ 0x50
 800ac0e:	af00      	add	r7, sp, #0
 800ac10:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac12:	2300      	movs	r3, #0
 800ac14:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	4b78      	ldr	r3, [pc, #480]	@ (800ae00 <UART_SetConfig+0x1f8>)
 800ac1e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac22:	689a      	ldr	r2, [r3, #8]
 800ac24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac26:	691b      	ldr	r3, [r3, #16]
 800ac28:	431a      	orrs	r2, r3
 800ac2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	431a      	orrs	r2, r3
 800ac30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac32:	69db      	ldr	r3, [r3, #28]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4971      	ldr	r1, [pc, #452]	@ (800ae04 <UART_SetConfig+0x1fc>)
 800ac40:	4019      	ands	r1, r3
 800ac42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac44:	681a      	ldr	r2, [r3, #0]
 800ac46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac48:	430b      	orrs	r3, r1
 800ac4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	685b      	ldr	r3, [r3, #4]
 800ac52:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ac56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac58:	68d9      	ldr	r1, [r3, #12]
 800ac5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	ea40 0301 	orr.w	r3, r0, r1
 800ac62:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac66:	699b      	ldr	r3, [r3, #24]
 800ac68:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	4b64      	ldr	r3, [pc, #400]	@ (800ae00 <UART_SetConfig+0x1f8>)
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d009      	beq.n	800ac88 <UART_SetConfig+0x80>
 800ac74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	4b63      	ldr	r3, [pc, #396]	@ (800ae08 <UART_SetConfig+0x200>)
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d004      	beq.n	800ac88 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac80:	6a1a      	ldr	r2, [r3, #32]
 800ac82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac84:	4313      	orrs	r3, r2
 800ac86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	689b      	ldr	r3, [r3, #8]
 800ac8e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800ac92:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800ac96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ac9c:	430b      	orrs	r3, r1
 800ac9e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800aca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca6:	f023 000f 	bic.w	r0, r3, #15
 800acaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800acae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	ea40 0301 	orr.w	r3, r0, r1
 800acb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	4b53      	ldr	r3, [pc, #332]	@ (800ae0c <UART_SetConfig+0x204>)
 800acbe:	429a      	cmp	r2, r3
 800acc0:	d102      	bne.n	800acc8 <UART_SetConfig+0xc0>
 800acc2:	2301      	movs	r3, #1
 800acc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acc6:	e066      	b.n	800ad96 <UART_SetConfig+0x18e>
 800acc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	4b50      	ldr	r3, [pc, #320]	@ (800ae10 <UART_SetConfig+0x208>)
 800acce:	429a      	cmp	r2, r3
 800acd0:	d102      	bne.n	800acd8 <UART_SetConfig+0xd0>
 800acd2:	2302      	movs	r3, #2
 800acd4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acd6:	e05e      	b.n	800ad96 <UART_SetConfig+0x18e>
 800acd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	4b4d      	ldr	r3, [pc, #308]	@ (800ae14 <UART_SetConfig+0x20c>)
 800acde:	429a      	cmp	r2, r3
 800ace0:	d102      	bne.n	800ace8 <UART_SetConfig+0xe0>
 800ace2:	2304      	movs	r3, #4
 800ace4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ace6:	e056      	b.n	800ad96 <UART_SetConfig+0x18e>
 800ace8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	4b4a      	ldr	r3, [pc, #296]	@ (800ae18 <UART_SetConfig+0x210>)
 800acee:	429a      	cmp	r2, r3
 800acf0:	d102      	bne.n	800acf8 <UART_SetConfig+0xf0>
 800acf2:	2308      	movs	r3, #8
 800acf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acf6:	e04e      	b.n	800ad96 <UART_SetConfig+0x18e>
 800acf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	4b47      	ldr	r3, [pc, #284]	@ (800ae1c <UART_SetConfig+0x214>)
 800acfe:	429a      	cmp	r2, r3
 800ad00:	d102      	bne.n	800ad08 <UART_SetConfig+0x100>
 800ad02:	2310      	movs	r3, #16
 800ad04:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad06:	e046      	b.n	800ad96 <UART_SetConfig+0x18e>
 800ad08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	4b44      	ldr	r3, [pc, #272]	@ (800ae20 <UART_SetConfig+0x218>)
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d102      	bne.n	800ad18 <UART_SetConfig+0x110>
 800ad12:	2320      	movs	r3, #32
 800ad14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad16:	e03e      	b.n	800ad96 <UART_SetConfig+0x18e>
 800ad18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad1a:	681a      	ldr	r2, [r3, #0]
 800ad1c:	4b41      	ldr	r3, [pc, #260]	@ (800ae24 <UART_SetConfig+0x21c>)
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d102      	bne.n	800ad28 <UART_SetConfig+0x120>
 800ad22:	2340      	movs	r3, #64	@ 0x40
 800ad24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad26:	e036      	b.n	800ad96 <UART_SetConfig+0x18e>
 800ad28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	4b3e      	ldr	r3, [pc, #248]	@ (800ae28 <UART_SetConfig+0x220>)
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d102      	bne.n	800ad38 <UART_SetConfig+0x130>
 800ad32:	2380      	movs	r3, #128	@ 0x80
 800ad34:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad36:	e02e      	b.n	800ad96 <UART_SetConfig+0x18e>
 800ad38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	4b3b      	ldr	r3, [pc, #236]	@ (800ae2c <UART_SetConfig+0x224>)
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d103      	bne.n	800ad4a <UART_SetConfig+0x142>
 800ad42:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ad46:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad48:	e025      	b.n	800ad96 <UART_SetConfig+0x18e>
 800ad4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad4c:	681a      	ldr	r2, [r3, #0]
 800ad4e:	4b38      	ldr	r3, [pc, #224]	@ (800ae30 <UART_SetConfig+0x228>)
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d103      	bne.n	800ad5c <UART_SetConfig+0x154>
 800ad54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad5a:	e01c      	b.n	800ad96 <UART_SetConfig+0x18e>
 800ad5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad5e:	681a      	ldr	r2, [r3, #0]
 800ad60:	4b34      	ldr	r3, [pc, #208]	@ (800ae34 <UART_SetConfig+0x22c>)
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d103      	bne.n	800ad6e <UART_SetConfig+0x166>
 800ad66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad6c:	e013      	b.n	800ad96 <UART_SetConfig+0x18e>
 800ad6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	4b31      	ldr	r3, [pc, #196]	@ (800ae38 <UART_SetConfig+0x230>)
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d103      	bne.n	800ad80 <UART_SetConfig+0x178>
 800ad78:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ad7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad7e:	e00a      	b.n	800ad96 <UART_SetConfig+0x18e>
 800ad80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	4b1e      	ldr	r3, [pc, #120]	@ (800ae00 <UART_SetConfig+0x1f8>)
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d103      	bne.n	800ad92 <UART_SetConfig+0x18a>
 800ad8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad90:	e001      	b.n	800ad96 <UART_SetConfig+0x18e>
 800ad92:	2300      	movs	r3, #0
 800ad94:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ad96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	4b19      	ldr	r3, [pc, #100]	@ (800ae00 <UART_SetConfig+0x1f8>)
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d005      	beq.n	800adac <UART_SetConfig+0x1a4>
 800ada0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	4b18      	ldr	r3, [pc, #96]	@ (800ae08 <UART_SetConfig+0x200>)
 800ada6:	429a      	cmp	r2, r3
 800ada8:	f040 8094 	bne.w	800aed4 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800adac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adae:	2200      	movs	r2, #0
 800adb0:	623b      	str	r3, [r7, #32]
 800adb2:	627a      	str	r2, [r7, #36]	@ 0x24
 800adb4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800adb8:	f7fc fd8e 	bl	80078d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800adbc:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800adbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	f000 80f7 	beq.w	800afb4 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800adc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adca:	4a1c      	ldr	r2, [pc, #112]	@ (800ae3c <UART_SetConfig+0x234>)
 800adcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800add0:	461a      	mov	r2, r3
 800add2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800add4:	fbb3 f3f2 	udiv	r3, r3, r2
 800add8:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	4613      	mov	r3, r2
 800ade0:	005b      	lsls	r3, r3, #1
 800ade2:	4413      	add	r3, r2
 800ade4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d305      	bcc.n	800adf6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800adea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800adf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d924      	bls.n	800ae40 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800adfc:	e069      	b.n	800aed2 <UART_SetConfig+0x2ca>
 800adfe:	bf00      	nop
 800ae00:	44002400 	.word	0x44002400
 800ae04:	cfff69f3 	.word	0xcfff69f3
 800ae08:	54002400 	.word	0x54002400
 800ae0c:	40013800 	.word	0x40013800
 800ae10:	40004400 	.word	0x40004400
 800ae14:	40004800 	.word	0x40004800
 800ae18:	40004c00 	.word	0x40004c00
 800ae1c:	40005000 	.word	0x40005000
 800ae20:	40006400 	.word	0x40006400
 800ae24:	40007800 	.word	0x40007800
 800ae28:	40007c00 	.word	0x40007c00
 800ae2c:	40008000 	.word	0x40008000
 800ae30:	40006800 	.word	0x40006800
 800ae34:	40006c00 	.word	0x40006c00
 800ae38:	40008400 	.word	0x40008400
 800ae3c:	0801fac8 	.word	0x0801fac8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ae42:	2200      	movs	r2, #0
 800ae44:	61bb      	str	r3, [r7, #24]
 800ae46:	61fa      	str	r2, [r7, #28]
 800ae48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4c:	4a64      	ldr	r2, [pc, #400]	@ (800afe0 <UART_SetConfig+0x3d8>)
 800ae4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	2200      	movs	r2, #0
 800ae56:	613b      	str	r3, [r7, #16]
 800ae58:	617a      	str	r2, [r7, #20]
 800ae5a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ae5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ae62:	f7f5 fa1b 	bl	800029c <__aeabi_uldivmod>
 800ae66:	4602      	mov	r2, r0
 800ae68:	460b      	mov	r3, r1
 800ae6a:	4610      	mov	r0, r2
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	f04f 0200 	mov.w	r2, #0
 800ae72:	f04f 0300 	mov.w	r3, #0
 800ae76:	020b      	lsls	r3, r1, #8
 800ae78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ae7c:	0202      	lsls	r2, r0, #8
 800ae7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae80:	6849      	ldr	r1, [r1, #4]
 800ae82:	0849      	lsrs	r1, r1, #1
 800ae84:	2000      	movs	r0, #0
 800ae86:	460c      	mov	r4, r1
 800ae88:	4605      	mov	r5, r0
 800ae8a:	eb12 0804 	adds.w	r8, r2, r4
 800ae8e:	eb43 0905 	adc.w	r9, r3, r5
 800ae92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	60bb      	str	r3, [r7, #8]
 800ae9a:	60fa      	str	r2, [r7, #12]
 800ae9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800aea0:	4640      	mov	r0, r8
 800aea2:	4649      	mov	r1, r9
 800aea4:	f7f5 f9fa 	bl	800029c <__aeabi_uldivmod>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4613      	mov	r3, r2
 800aeae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aeb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeb2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800aeb6:	d308      	bcc.n	800aeca <UART_SetConfig+0x2c2>
 800aeb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aebe:	d204      	bcs.n	800aeca <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800aec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800aec6:	60da      	str	r2, [r3, #12]
 800aec8:	e003      	b.n	800aed2 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800aeca:	2301      	movs	r3, #1
 800aecc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800aed0:	e070      	b.n	800afb4 <UART_SetConfig+0x3ac>
 800aed2:	e06f      	b.n	800afb4 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed6:	69db      	ldr	r3, [r3, #28]
 800aed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aedc:	d13c      	bne.n	800af58 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800aede:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aee0:	2200      	movs	r2, #0
 800aee2:	603b      	str	r3, [r7, #0]
 800aee4:	607a      	str	r2, [r7, #4]
 800aee6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800aeea:	f7fc fcf5 	bl	80078d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800aeee:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aef0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d05e      	beq.n	800afb4 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aefa:	4a39      	ldr	r2, [pc, #228]	@ (800afe0 <UART_SetConfig+0x3d8>)
 800aefc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af00:	461a      	mov	r2, r3
 800af02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af04:	fbb3 f3f2 	udiv	r3, r3, r2
 800af08:	005a      	lsls	r2, r3, #1
 800af0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0c:	685b      	ldr	r3, [r3, #4]
 800af0e:	085b      	lsrs	r3, r3, #1
 800af10:	441a      	add	r2, r3
 800af12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	fbb2 f3f3 	udiv	r3, r2, r3
 800af1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af1e:	2b0f      	cmp	r3, #15
 800af20:	d916      	bls.n	800af50 <UART_SetConfig+0x348>
 800af22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af28:	d212      	bcs.n	800af50 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	f023 030f 	bic.w	r3, r3, #15
 800af32:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af36:	085b      	lsrs	r3, r3, #1
 800af38:	b29b      	uxth	r3, r3
 800af3a:	f003 0307 	and.w	r3, r3, #7
 800af3e:	b29a      	uxth	r2, r3
 800af40:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800af42:	4313      	orrs	r3, r2
 800af44:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800af46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800af4c:	60da      	str	r2, [r3, #12]
 800af4e:	e031      	b.n	800afb4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800af56:	e02d      	b.n	800afb4 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800af58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af5a:	2200      	movs	r2, #0
 800af5c:	469a      	mov	sl, r3
 800af5e:	4693      	mov	fp, r2
 800af60:	4650      	mov	r0, sl
 800af62:	4659      	mov	r1, fp
 800af64:	f7fc fcb8 	bl	80078d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800af68:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800af6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d021      	beq.n	800afb4 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af74:	4a1a      	ldr	r2, [pc, #104]	@ (800afe0 <UART_SetConfig+0x3d8>)
 800af76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af7a:	461a      	mov	r2, r3
 800af7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af7e:	fbb3 f2f2 	udiv	r2, r3, r2
 800af82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	085b      	lsrs	r3, r3, #1
 800af88:	441a      	add	r2, r3
 800af8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800af92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af96:	2b0f      	cmp	r3, #15
 800af98:	d909      	bls.n	800afae <UART_SetConfig+0x3a6>
 800af9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800afa0:	d205      	bcs.n	800afae <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800afa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afa4:	b29a      	uxth	r2, r3
 800afa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	60da      	str	r2, [r3, #12]
 800afac:	e002      	b.n	800afb4 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800afb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb6:	2201      	movs	r2, #1
 800afb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800afbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afbe:	2201      	movs	r2, #1
 800afc0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800afc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc6:	2200      	movs	r2, #0
 800afc8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800afca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afcc:	2200      	movs	r2, #0
 800afce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800afd0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3750      	adds	r7, #80	@ 0x50
 800afd8:	46bd      	mov	sp, r7
 800afda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800afde:	bf00      	nop
 800afe0:	0801fac8 	.word	0x0801fac8

0800afe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff0:	f003 0308 	and.w	r3, r3, #8
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00a      	beq.n	800b00e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	430a      	orrs	r2, r1
 800b00c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b012:	f003 0301 	and.w	r3, r3, #1
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00a      	beq.n	800b030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	430a      	orrs	r2, r1
 800b02e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b034:	f003 0302 	and.w	r3, r3, #2
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00a      	beq.n	800b052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	430a      	orrs	r2, r1
 800b050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b056:	f003 0304 	and.w	r3, r3, #4
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00a      	beq.n	800b074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	430a      	orrs	r2, r1
 800b072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b078:	f003 0310 	and.w	r3, r3, #16
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00a      	beq.n	800b096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b09a:	f003 0320 	and.w	r3, r3, #32
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00a      	beq.n	800b0b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d01a      	beq.n	800b0fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	430a      	orrs	r2, r1
 800b0d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b0e2:	d10a      	bne.n	800b0fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	430a      	orrs	r2, r1
 800b0f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00a      	beq.n	800b11c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	685b      	ldr	r3, [r3, #4]
 800b10c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	430a      	orrs	r2, r1
 800b11a:	605a      	str	r2, [r3, #4]
  }
}
 800b11c:	bf00      	nop
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b098      	sub	sp, #96	@ 0x60
 800b12c:	af02      	add	r7, sp, #8
 800b12e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2200      	movs	r2, #0
 800b134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b138:	f7f6 fe4c 	bl	8001dd4 <HAL_GetTick>
 800b13c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f003 0308 	and.w	r3, r3, #8
 800b148:	2b08      	cmp	r3, #8
 800b14a:	d12f      	bne.n	800b1ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b14c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b154:	2200      	movs	r2, #0
 800b156:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 f88e 	bl	800b27c <UART_WaitOnFlagUntilTimeout>
 800b160:	4603      	mov	r3, r0
 800b162:	2b00      	cmp	r3, #0
 800b164:	d022      	beq.n	800b1ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b16e:	e853 3f00 	ldrex	r3, [r3]
 800b172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b17a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	461a      	mov	r2, r3
 800b182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b184:	647b      	str	r3, [r7, #68]	@ 0x44
 800b186:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b18a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b18c:	e841 2300 	strex	r3, r2, [r1]
 800b190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e6      	bne.n	800b166 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2220      	movs	r2, #32
 800b19c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e063      	b.n	800b274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 0304 	and.w	r3, r3, #4
 800b1b6:	2b04      	cmp	r3, #4
 800b1b8:	d149      	bne.n	800b24e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f857 	bl	800b27c <UART_WaitOnFlagUntilTimeout>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d03c      	beq.n	800b24e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1dc:	e853 3f00 	ldrex	r3, [r3]
 800b1e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
 800b1e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b1e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	461a      	mov	r2, r3
 800b1f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1fa:	e841 2300 	strex	r3, r2, [r1]
 800b1fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1e6      	bne.n	800b1d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	3308      	adds	r3, #8
 800b20c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	e853 3f00 	ldrex	r3, [r3]
 800b214:	60fb      	str	r3, [r7, #12]
   return(result);
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f023 0301 	bic.w	r3, r3, #1
 800b21c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	3308      	adds	r3, #8
 800b224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b226:	61fa      	str	r2, [r7, #28]
 800b228:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22a:	69b9      	ldr	r1, [r7, #24]
 800b22c:	69fa      	ldr	r2, [r7, #28]
 800b22e:	e841 2300 	strex	r3, r2, [r1]
 800b232:	617b      	str	r3, [r7, #20]
   return(result);
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1e5      	bne.n	800b206 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2220      	movs	r2, #32
 800b23e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b24a:	2303      	movs	r3, #3
 800b24c:	e012      	b.n	800b274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	2220      	movs	r2, #32
 800b252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2220      	movs	r2, #32
 800b25a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2200      	movs	r2, #0
 800b268:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3758      	adds	r7, #88	@ 0x58
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	603b      	str	r3, [r7, #0]
 800b288:	4613      	mov	r3, r2
 800b28a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b28c:	e04f      	b.n	800b32e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b294:	d04b      	beq.n	800b32e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b296:	f7f6 fd9d 	bl	8001dd4 <HAL_GetTick>
 800b29a:	4602      	mov	r2, r0
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	1ad3      	subs	r3, r2, r3
 800b2a0:	69ba      	ldr	r2, [r7, #24]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d302      	bcc.n	800b2ac <UART_WaitOnFlagUntilTimeout+0x30>
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d101      	bne.n	800b2b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b2ac:	2303      	movs	r3, #3
 800b2ae:	e04e      	b.n	800b34e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f003 0304 	and.w	r3, r3, #4
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d037      	beq.n	800b32e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2b80      	cmp	r3, #128	@ 0x80
 800b2c2:	d034      	beq.n	800b32e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	2b40      	cmp	r3, #64	@ 0x40
 800b2c8:	d031      	beq.n	800b32e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	69db      	ldr	r3, [r3, #28]
 800b2d0:	f003 0308 	and.w	r3, r3, #8
 800b2d4:	2b08      	cmp	r3, #8
 800b2d6:	d110      	bne.n	800b2fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2208      	movs	r2, #8
 800b2de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f000 f838 	bl	800b356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2208      	movs	r2, #8
 800b2ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e029      	b.n	800b34e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	69db      	ldr	r3, [r3, #28]
 800b300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b308:	d111      	bne.n	800b32e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f000 f81e 	bl	800b356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2220      	movs	r2, #32
 800b31e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2200      	movs	r2, #0
 800b326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b32a:	2303      	movs	r3, #3
 800b32c:	e00f      	b.n	800b34e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	69da      	ldr	r2, [r3, #28]
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	4013      	ands	r3, r2
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	429a      	cmp	r2, r3
 800b33c:	bf0c      	ite	eq
 800b33e:	2301      	moveq	r3, #1
 800b340:	2300      	movne	r3, #0
 800b342:	b2db      	uxtb	r3, r3
 800b344:	461a      	mov	r2, r3
 800b346:	79fb      	ldrb	r3, [r7, #7]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d0a0      	beq.n	800b28e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}

0800b356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b356:	b480      	push	{r7}
 800b358:	b095      	sub	sp, #84	@ 0x54
 800b35a:	af00      	add	r7, sp, #0
 800b35c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b366:	e853 3f00 	ldrex	r3, [r3]
 800b36a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	461a      	mov	r2, r3
 800b37a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b37c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b37e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b380:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b382:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b384:	e841 2300 	strex	r3, r2, [r1]
 800b388:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d1e6      	bne.n	800b35e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	3308      	adds	r3, #8
 800b396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	e853 3f00 	ldrex	r3, [r3]
 800b39e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b3a6:	f023 0301 	bic.w	r3, r3, #1
 800b3aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	3308      	adds	r3, #8
 800b3b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b3b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b3ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b3bc:	e841 2300 	strex	r3, r2, [r1]
 800b3c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d1e3      	bne.n	800b390 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d118      	bne.n	800b402 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	e853 3f00 	ldrex	r3, [r3]
 800b3dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	f023 0310 	bic.w	r3, r3, #16
 800b3e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3ee:	61bb      	str	r3, [r7, #24]
 800b3f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f2:	6979      	ldr	r1, [r7, #20]
 800b3f4:	69ba      	ldr	r2, [r7, #24]
 800b3f6:	e841 2300 	strex	r3, r2, [r1]
 800b3fa:	613b      	str	r3, [r7, #16]
   return(result);
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d1e6      	bne.n	800b3d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2220      	movs	r2, #32
 800b406:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b416:	bf00      	nop
 800b418:	3754      	adds	r7, #84	@ 0x54
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr

0800b422 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b422:	b480      	push	{r7}
 800b424:	b085      	sub	sp, #20
 800b426:	af00      	add	r7, sp, #0
 800b428:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b430:	2b01      	cmp	r3, #1
 800b432:	d101      	bne.n	800b438 <HAL_UARTEx_DisableFifoMode+0x16>
 800b434:	2302      	movs	r3, #2
 800b436:	e027      	b.n	800b488 <HAL_UARTEx_DisableFifoMode+0x66>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2224      	movs	r2, #36	@ 0x24
 800b444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f022 0201 	bic.w	r2, r2, #1
 800b45e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b466:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2200      	movs	r2, #0
 800b46c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2220      	movs	r2, #32
 800b47a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b486:	2300      	movs	r3, #0
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3714      	adds	r7, #20
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d101      	bne.n	800b4ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	e02d      	b.n	800b508 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2224      	movs	r2, #36	@ 0x24
 800b4b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f022 0201 	bic.w	r2, r2, #1
 800b4d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	430a      	orrs	r2, r1
 800b4e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 f84f 	bl	800b58c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2220      	movs	r2, #32
 800b4fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b520:	2b01      	cmp	r3, #1
 800b522:	d101      	bne.n	800b528 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b524:	2302      	movs	r3, #2
 800b526:	e02d      	b.n	800b584 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	2224      	movs	r2, #36	@ 0x24
 800b534:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	681a      	ldr	r2, [r3, #0]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f022 0201 	bic.w	r2, r2, #1
 800b54e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	683a      	ldr	r2, [r7, #0]
 800b560:	430a      	orrs	r2, r1
 800b562:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b564:	6878      	ldr	r0, [r7, #4]
 800b566:	f000 f811 	bl	800b58c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2220      	movs	r2, #32
 800b576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2200      	movs	r2, #0
 800b57e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b582:	2300      	movs	r3, #0
}
 800b584:	4618      	mov	r0, r3
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d108      	bne.n	800b5ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2201      	movs	r2, #1
 800b5a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b5ac:	e031      	b.n	800b612 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b5ae:	2308      	movs	r3, #8
 800b5b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5b2:	2308      	movs	r3, #8
 800b5b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	0e5b      	lsrs	r3, r3, #25
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	f003 0307 	and.w	r3, r3, #7
 800b5c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	0f5b      	lsrs	r3, r3, #29
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	f003 0307 	and.w	r3, r3, #7
 800b5d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5d6:	7bbb      	ldrb	r3, [r7, #14]
 800b5d8:	7b3a      	ldrb	r2, [r7, #12]
 800b5da:	4911      	ldr	r1, [pc, #68]	@ (800b620 <UARTEx_SetNbDataToProcess+0x94>)
 800b5dc:	5c8a      	ldrb	r2, [r1, r2]
 800b5de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b5e2:	7b3a      	ldrb	r2, [r7, #12]
 800b5e4:	490f      	ldr	r1, [pc, #60]	@ (800b624 <UARTEx_SetNbDataToProcess+0x98>)
 800b5e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5ec:	b29a      	uxth	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
 800b5f6:	7b7a      	ldrb	r2, [r7, #13]
 800b5f8:	4909      	ldr	r1, [pc, #36]	@ (800b620 <UARTEx_SetNbDataToProcess+0x94>)
 800b5fa:	5c8a      	ldrb	r2, [r1, r2]
 800b5fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b600:	7b7a      	ldrb	r2, [r7, #13]
 800b602:	4908      	ldr	r1, [pc, #32]	@ (800b624 <UARTEx_SetNbDataToProcess+0x98>)
 800b604:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b606:	fb93 f3f2 	sdiv	r3, r3, r2
 800b60a:	b29a      	uxth	r2, r3
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b612:	bf00      	nop
 800b614:	3714      	adds	r7, #20
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	0801fae0 	.word	0x0801fae0
 800b624:	0801fae8 	.word	0x0801fae8

0800b628 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800b628:	b480      	push	{r7}
 800b62a:	b083      	sub	sp, #12
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b634:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b640:	f043 0201 	orr.w	r2, r3, #1
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	370c      	adds	r7, #12
 800b64e:	46bd      	mov	sp, r7
 800b650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b654:	4770      	bx	lr

0800b656 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b656:	b084      	sub	sp, #16
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	f107 001c 	add.w	r0, r7, #28
 800b664:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d101      	bne.n	800b672 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	e008      	b.n	800b684 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f7ff ffd8 	bl	800b628 <USB_CoreReset>
 800b678:	4603      	mov	r3, r0
 800b67a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2200      	movs	r2, #0
 800b680:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b682:	7bfb      	ldrb	r3, [r7, #15]
}
 800b684:	4618      	mov	r0, r3
 800b686:	3710      	adds	r7, #16
 800b688:	46bd      	mov	sp, r7
 800b68a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b68e:	b004      	add	sp, #16
 800b690:	4770      	bx	lr

0800b692 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b692:	b480      	push	{r7}
 800b694:	b085      	sub	sp, #20
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2200      	movs	r2, #0
 800b69e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b6a0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b6a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68fa      	ldr	r2, [r7, #12]
 800b6aa:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b6ac:	2300      	movs	r3, #0
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3714      	adds	r7, #20
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b8:	4770      	bx	lr

0800b6ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b085      	sub	sp, #20
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b6c2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b6c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	43db      	mvns	r3, r3
 800b6d0:	401a      	ands	r2, r3
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b6d6:	2300      	movs	r3, #0
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3714      	adds	r7, #20
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e2:	4770      	bx	lr

0800b6e4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800b6f0:	78fb      	ldrb	r3, [r7, #3]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d106      	bne.n	800b704 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6fa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	641a      	str	r2, [r3, #64]	@ 0x40
 800b702:	e00b      	b.n	800b71c <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800b704:	78fb      	ldrb	r3, [r7, #3]
 800b706:	2b01      	cmp	r3, #1
 800b708:	d106      	bne.n	800b718 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b70e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	641a      	str	r2, [r3, #64]	@ 0x40
 800b716:	e001      	b.n	800b71c <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800b718:	2301      	movs	r3, #1
 800b71a:	e000      	b.n	800b71e <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b728:	4770      	bx	lr

0800b72a <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800b72a:	b084      	sub	sp, #16
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b084      	sub	sp, #16
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	f107 001c 	add.w	r0, r7, #28
 800b738:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b746:	f023 0201 	bic.w	r2, r3, #1
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800b74e:	2100      	movs	r1, #0
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f7ff ffc7 	bl	800b6e4 <USB_SetCurrentMode>
 800b756:	4603      	mov	r3, r0
 800b758:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2200      	movs	r2, #0
 800b75e:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800b760:	7bfb      	ldrb	r3, [r7, #15]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b76c:	b004      	add	sp, #16
 800b76e:	4770      	bx	lr

0800b770 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b770:	b480      	push	{r7}
 800b772:	b09f      	sub	sp, #124	@ 0x7c
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	4413      	add	r3, r2
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	4ba0      	ldr	r3, [pc, #640]	@ (800ba10 <USB_ActivateEndpoint+0x2a0>)
 800b78e:	4013      	ands	r3, r2
 800b790:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	78db      	ldrb	r3, [r3, #3]
 800b796:	2b03      	cmp	r3, #3
 800b798:	d819      	bhi.n	800b7ce <USB_ActivateEndpoint+0x5e>
 800b79a:	a201      	add	r2, pc, #4	@ (adr r2, 800b7a0 <USB_ActivateEndpoint+0x30>)
 800b79c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7a0:	0800b7b1 	.word	0x0800b7b1
 800b7a4:	0800b7c5 	.word	0x0800b7c5
 800b7a8:	0800b7d7 	.word	0x0800b7d7
 800b7ac:	0800b7bb 	.word	0x0800b7bb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b7b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b7b6:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b7b8:	e00e      	b.n	800b7d8 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b7ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7bc:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b7c0:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b7c2:	e009      	b.n	800b7d8 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b7c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b7ca:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800b7cc:	e004      	b.n	800b7d8 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800b7ce:	2301      	movs	r3, #1
 800b7d0:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800b7d4:	e000      	b.n	800b7d8 <USB_ActivateEndpoint+0x68>
      break;
 800b7d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	441a      	add	r2, r3
 800b7e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b7e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ec:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	009b      	lsls	r3, r3, #2
 800b7f6:	4413      	add	r3, r2
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	4b86      	ldr	r3, [pc, #536]	@ (800ba14 <USB_ActivateEndpoint+0x2a4>)
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	7812      	ldrb	r2, [r2, #0]
 800b802:	4313      	orrs	r3, r2
 800b804:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	441a      	add	r2, r3
 800b810:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b81a:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	7b1b      	ldrb	r3, [r3, #12]
 800b820:	2b00      	cmp	r3, #0
 800b822:	f040 8177 	bne.w	800bb14 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	785b      	ldrb	r3, [r3, #1]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d079      	beq.n	800b922 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	00db      	lsls	r3, r3, #3
 800b834:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b838:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b83c:	681a      	ldr	r2, [r3, #0]
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	00db      	lsls	r3, r3, #3
 800b844:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b848:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b84c:	0c12      	lsrs	r2, r2, #16
 800b84e:	0412      	lsls	r2, r2, #16
 800b850:	601a      	str	r2, [r3, #0]
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	781b      	ldrb	r3, [r3, #0]
 800b856:	00db      	lsls	r3, r3, #3
 800b858:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b85c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b860:	6819      	ldr	r1, [r3, #0]
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	88db      	ldrh	r3, [r3, #6]
 800b866:	089b      	lsrs	r3, r3, #2
 800b868:	b29b      	uxth	r3, r3
 800b86a:	009a      	lsls	r2, r3, #2
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	00db      	lsls	r3, r3, #3
 800b872:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b876:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b87a:	430a      	orrs	r2, r1
 800b87c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b87e:	687a      	ldr	r2, [r7, #4]
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	781b      	ldrb	r3, [r3, #0]
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	4413      	add	r3, r2
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	61bb      	str	r3, [r7, #24]
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b892:	2b00      	cmp	r3, #0
 800b894:	d013      	beq.n	800b8be <USB_ActivateEndpoint+0x14e>
 800b896:	687a      	ldr	r2, [r7, #4]
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	4413      	add	r3, r2
 800b8a0:	681a      	ldr	r2, [r3, #0]
 800b8a2:	4b5c      	ldr	r3, [pc, #368]	@ (800ba14 <USB_ActivateEndpoint+0x2a4>)
 800b8a4:	4013      	ands	r3, r2
 800b8a6:	617b      	str	r3, [r7, #20]
 800b8a8:	687a      	ldr	r2, [r7, #4]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	441a      	add	r2, r3
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8b8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b8bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	78db      	ldrb	r3, [r3, #3]
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d018      	beq.n	800b8f8 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b8c6:	687a      	ldr	r2, [r7, #4]
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	781b      	ldrb	r3, [r3, #0]
 800b8cc:	009b      	lsls	r3, r3, #2
 800b8ce:	4413      	add	r3, r2
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	4b51      	ldr	r3, [pc, #324]	@ (800ba18 <USB_ActivateEndpoint+0x2a8>)
 800b8d4:	4013      	ands	r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f083 0320 	eor.w	r3, r3, #32
 800b8de:	60fb      	str	r3, [r7, #12]
 800b8e0:	687a      	ldr	r2, [r7, #4]
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	441a      	add	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8f4:	6013      	str	r3, [r2, #0]
 800b8f6:	e28c      	b.n	800be12 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	781b      	ldrb	r3, [r3, #0]
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4413      	add	r3, r2
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	4b44      	ldr	r3, [pc, #272]	@ (800ba18 <USB_ActivateEndpoint+0x2a8>)
 800b906:	4013      	ands	r3, r2
 800b908:	613b      	str	r3, [r7, #16]
 800b90a:	687a      	ldr	r2, [r7, #4]
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	441a      	add	r2, r3
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b91a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b91e:	6013      	str	r3, [r2, #0]
 800b920:	e277      	b.n	800be12 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	00db      	lsls	r3, r3, #3
 800b928:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b92c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b930:	685a      	ldr	r2, [r3, #4]
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	00db      	lsls	r3, r3, #3
 800b938:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b93c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b940:	0c12      	lsrs	r2, r2, #16
 800b942:	0412      	lsls	r2, r2, #16
 800b944:	605a      	str	r2, [r3, #4]
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	00db      	lsls	r3, r3, #3
 800b94c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b950:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b954:	6859      	ldr	r1, [r3, #4]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	88db      	ldrh	r3, [r3, #6]
 800b95a:	089b      	lsrs	r3, r3, #2
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	009a      	lsls	r2, r3, #2
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	00db      	lsls	r3, r3, #3
 800b966:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b96a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b96e:	430a      	orrs	r2, r1
 800b970:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b97c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b980:	685a      	ldr	r2, [r3, #4]
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	00db      	lsls	r3, r3, #3
 800b988:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b98c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b990:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b994:	605a      	str	r2, [r3, #4]
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d112      	bne.n	800b9c4 <USB_ActivateEndpoint+0x254>
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	00db      	lsls	r3, r3, #3
 800b9a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b9ac:	685a      	ldr	r2, [r3, #4]
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	00db      	lsls	r3, r3, #3
 800b9b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b9bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b9c0:	605a      	str	r2, [r3, #4]
 800b9c2:	e04d      	b.n	800ba60 <USB_ActivateEndpoint+0x2f0>
 800b9c4:	683b      	ldr	r3, [r7, #0]
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	2b3e      	cmp	r3, #62	@ 0x3e
 800b9ca:	d827      	bhi.n	800ba1c <USB_ActivateEndpoint+0x2ac>
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	691b      	ldr	r3, [r3, #16]
 800b9d0:	085b      	lsrs	r3, r3, #1
 800b9d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	691b      	ldr	r3, [r3, #16]
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d002      	beq.n	800b9e6 <USB_ActivateEndpoint+0x276>
 800b9e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	00db      	lsls	r3, r3, #3
 800b9ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b9f4:	6859      	ldr	r1, [r3, #4]
 800b9f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b9f8:	069a      	lsls	r2, r3, #26
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	00db      	lsls	r3, r3, #3
 800ba00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba08:	430a      	orrs	r2, r1
 800ba0a:	605a      	str	r2, [r3, #4]
 800ba0c:	e028      	b.n	800ba60 <USB_ActivateEndpoint+0x2f0>
 800ba0e:	bf00      	nop
 800ba10:	07ff898f 	.word	0x07ff898f
 800ba14:	07ff8f8f 	.word	0x07ff8f8f
 800ba18:	07ff8fbf 	.word	0x07ff8fbf
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	691b      	ldr	r3, [r3, #16]
 800ba20:	095b      	lsrs	r3, r3, #5
 800ba22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	f003 031f 	and.w	r3, r3, #31
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d102      	bne.n	800ba36 <USB_ActivateEndpoint+0x2c6>
 800ba30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba32:	3b01      	subs	r3, #1
 800ba34:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	00db      	lsls	r3, r3, #3
 800ba3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba44:	685a      	ldr	r2, [r3, #4]
 800ba46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba48:	069b      	lsls	r3, r3, #26
 800ba4a:	431a      	orrs	r2, r3
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	00db      	lsls	r3, r3, #3
 800ba52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba5a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ba5e:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	009b      	lsls	r3, r3, #2
 800ba68:	4413      	add	r3, r2
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ba6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d013      	beq.n	800baa0 <USB_ActivateEndpoint+0x330>
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	4b9c      	ldr	r3, [pc, #624]	@ (800bcf8 <USB_ActivateEndpoint+0x588>)
 800ba86:	4013      	ands	r3, r2
 800ba88:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	683b      	ldr	r3, [r7, #0]
 800ba8e:	781b      	ldrb	r3, [r3, #0]
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	441a      	add	r2, r3
 800ba94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ba9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba9e:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d11c      	bne.n	800bae2 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800baa8:	687a      	ldr	r2, [r7, #4]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	781b      	ldrb	r3, [r3, #0]
 800baae:	009b      	lsls	r3, r3, #2
 800bab0:	4413      	add	r3, r2
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	4b91      	ldr	r3, [pc, #580]	@ (800bcfc <USB_ActivateEndpoint+0x58c>)
 800bab6:	4013      	ands	r3, r2
 800bab8:	61fb      	str	r3, [r7, #28]
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bac0:	61fb      	str	r3, [r7, #28]
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bac8:	61fb      	str	r3, [r7, #28]
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	441a      	add	r2, r3
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bade:	6013      	str	r3, [r2, #0]
 800bae0:	e197      	b.n	800be12 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	781b      	ldrb	r3, [r3, #0]
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4413      	add	r3, r2
 800baec:	681a      	ldr	r2, [r3, #0]
 800baee:	4b83      	ldr	r3, [pc, #524]	@ (800bcfc <USB_ActivateEndpoint+0x58c>)
 800baf0:	4013      	ands	r3, r2
 800baf2:	623b      	str	r3, [r7, #32]
 800baf4:	6a3b      	ldr	r3, [r7, #32]
 800baf6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bafa:	623b      	str	r3, [r7, #32]
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	441a      	add	r2, r3
 800bb06:	6a3b      	ldr	r3, [r7, #32]
 800bb08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb10:	6013      	str	r3, [r2, #0]
 800bb12:	e17e      	b.n	800be12 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	78db      	ldrb	r3, [r3, #3]
 800bb18:	2b02      	cmp	r3, #2
 800bb1a:	d114      	bne.n	800bb46 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	683b      	ldr	r3, [r7, #0]
 800bb20:	781b      	ldrb	r3, [r3, #0]
 800bb22:	009b      	lsls	r3, r3, #2
 800bb24:	4413      	add	r3, r2
 800bb26:	681a      	ldr	r2, [r3, #0]
 800bb28:	4b73      	ldr	r3, [pc, #460]	@ (800bcf8 <USB_ActivateEndpoint+0x588>)
 800bb2a:	4013      	ands	r3, r2
 800bb2c:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	441a      	add	r2, r3
 800bb38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bb3a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800bb3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb42:	6013      	str	r3, [r2, #0]
 800bb44:	e013      	b.n	800bb6e <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4413      	add	r3, r2
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	4b6b      	ldr	r3, [pc, #428]	@ (800bd00 <USB_ActivateEndpoint+0x590>)
 800bb54:	4013      	ands	r3, r2
 800bb56:	667b      	str	r3, [r7, #100]	@ 0x64
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	009b      	lsls	r3, r3, #2
 800bb60:	441a      	add	r2, r3
 800bb62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb6c:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	00db      	lsls	r3, r3, #3
 800bb74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	00db      	lsls	r3, r3, #3
 800bb84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb8c:	0c12      	lsrs	r2, r2, #16
 800bb8e:	0412      	lsls	r2, r2, #16
 800bb90:	601a      	str	r2, [r3, #0]
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	00db      	lsls	r3, r3, #3
 800bb98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bba0:	6819      	ldr	r1, [r3, #0]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	891b      	ldrh	r3, [r3, #8]
 800bba6:	089b      	lsrs	r3, r3, #2
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	009a      	lsls	r2, r3, #2
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	00db      	lsls	r3, r3, #3
 800bbb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bbb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bbba:	430a      	orrs	r2, r1
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	00db      	lsls	r3, r3, #3
 800bbc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bbc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bbcc:	685a      	ldr	r2, [r3, #4]
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bbd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bbdc:	0c12      	lsrs	r2, r2, #16
 800bbde:	0412      	lsls	r2, r2, #16
 800bbe0:	605a      	str	r2, [r3, #4]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	00db      	lsls	r3, r3, #3
 800bbe8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bbec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bbf0:	6859      	ldr	r1, [r3, #4]
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	895b      	ldrh	r3, [r3, #10]
 800bbf6:	089b      	lsrs	r3, r3, #2
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	009a      	lsls	r2, r3, #2
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	00db      	lsls	r3, r3, #3
 800bc02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc06:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bc0a:	430a      	orrs	r2, r1
 800bc0c:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	785b      	ldrb	r3, [r3, #1]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d178      	bne.n	800bd08 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bc26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d013      	beq.n	800bc56 <USB_ActivateEndpoint+0x4e6>
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	683b      	ldr	r3, [r7, #0]
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	681a      	ldr	r2, [r3, #0]
 800bc3a:	4b2f      	ldr	r3, [pc, #188]	@ (800bcf8 <USB_ActivateEndpoint+0x588>)
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bc40:	687a      	ldr	r2, [r7, #4]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	441a      	add	r2, r3
 800bc4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bc50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc54:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	4413      	add	r3, r2
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d013      	beq.n	800bc96 <USB_ActivateEndpoint+0x526>
 800bc6e:	687a      	ldr	r2, [r7, #4]
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	009b      	lsls	r3, r3, #2
 800bc76:	4413      	add	r3, r2
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	4b1f      	ldr	r3, [pc, #124]	@ (800bcf8 <USB_ActivateEndpoint+0x588>)
 800bc7c:	4013      	ands	r3, r2
 800bc7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	441a      	add	r2, r3
 800bc8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bc94:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	4413      	add	r3, r2
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	4b16      	ldr	r3, [pc, #88]	@ (800bcfc <USB_ActivateEndpoint+0x58c>)
 800bca4:	4013      	ands	r3, r2
 800bca6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcaa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bcae:	633b      	str	r3, [r7, #48]	@ 0x30
 800bcb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcb2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bcb6:	633b      	str	r3, [r7, #48]	@ 0x30
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	441a      	add	r2, r3
 800bcc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bcc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bccc:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	4413      	add	r3, r2
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	4b0a      	ldr	r3, [pc, #40]	@ (800bd04 <USB_ActivateEndpoint+0x594>)
 800bcdc:	4013      	ands	r3, r2
 800bcde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	009b      	lsls	r3, r3, #2
 800bce8:	441a      	add	r2, r3
 800bcea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcf4:	6013      	str	r3, [r2, #0]
 800bcf6:	e08c      	b.n	800be12 <USB_ActivateEndpoint+0x6a2>
 800bcf8:	07ff8f8f 	.word	0x07ff8f8f
 800bcfc:	07ffbf8f 	.word	0x07ffbf8f
 800bd00:	07ff8e8f 	.word	0x07ff8e8f
 800bd04:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	4413      	add	r3, r2
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d013      	beq.n	800bd48 <USB_ActivateEndpoint+0x5d8>
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	4413      	add	r3, r2
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	4b3d      	ldr	r3, [pc, #244]	@ (800be24 <USB_ActivateEndpoint+0x6b4>)
 800bd2e:	4013      	ands	r3, r2
 800bd30:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	441a      	add	r2, r3
 800bd3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bd3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bd42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd46:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	4413      	add	r3, r2
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d013      	beq.n	800bd88 <USB_ActivateEndpoint+0x618>
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	009b      	lsls	r3, r3, #2
 800bd68:	4413      	add	r3, r2
 800bd6a:	681a      	ldr	r2, [r3, #0]
 800bd6c:	4b2d      	ldr	r3, [pc, #180]	@ (800be24 <USB_ActivateEndpoint+0x6b4>)
 800bd6e:	4013      	ands	r3, r2
 800bd70:	653b      	str	r3, [r7, #80]	@ 0x50
 800bd72:	687a      	ldr	r2, [r7, #4]
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	441a      	add	r2, r3
 800bd7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd82:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd86:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	78db      	ldrb	r3, [r3, #3]
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d018      	beq.n	800bdc2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	009b      	lsls	r3, r3, #2
 800bd98:	4413      	add	r3, r2
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	4b22      	ldr	r3, [pc, #136]	@ (800be28 <USB_ActivateEndpoint+0x6b8>)
 800bd9e:	4013      	ands	r3, r2
 800bda0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bda2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bda4:	f083 0320 	eor.w	r3, r3, #32
 800bda8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	441a      	add	r2, r3
 800bdb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bdb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdbe:	6013      	str	r3, [r2, #0]
 800bdc0:	e013      	b.n	800bdea <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	4413      	add	r3, r2
 800bdcc:	681a      	ldr	r2, [r3, #0]
 800bdce:	4b16      	ldr	r3, [pc, #88]	@ (800be28 <USB_ActivateEndpoint+0x6b8>)
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdd4:	687a      	ldr	r2, [r7, #4]
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	441a      	add	r2, r3
 800bdde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bde0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bde4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bde8:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4413      	add	r3, r2
 800bdf4:	681a      	ldr	r2, [r3, #0]
 800bdf6:	4b0d      	ldr	r3, [pc, #52]	@ (800be2c <USB_ActivateEndpoint+0x6bc>)
 800bdf8:	4013      	ands	r3, r2
 800bdfa:	647b      	str	r3, [r7, #68]	@ 0x44
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	441a      	add	r2, r3
 800be06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800be08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be10:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800be12:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800be16:	4618      	mov	r0, r3
 800be18:	377c      	adds	r7, #124	@ 0x7c
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	07ff8f8f 	.word	0x07ff8f8f
 800be28:	07ff8fbf 	.word	0x07ff8fbf
 800be2c:	07ffbf8f 	.word	0x07ffbf8f

0800be30 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800be30:	b480      	push	{r7}
 800be32:	b097      	sub	sp, #92	@ 0x5c
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	7b1b      	ldrb	r3, [r3, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d16d      	bne.n	800bf1e <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	785b      	ldrb	r3, [r3, #1]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d034      	beq.n	800beb4 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4413      	add	r3, r2
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	613b      	str	r3, [r7, #16]
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d013      	beq.n	800be8a <USB_DeactivateEndpoint+0x5a>
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	4413      	add	r3, r2
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	4b6d      	ldr	r3, [pc, #436]	@ (800c024 <USB_DeactivateEndpoint+0x1f4>)
 800be70:	4013      	ands	r3, r2
 800be72:	60fb      	str	r3, [r7, #12]
 800be74:	687a      	ldr	r2, [r7, #4]
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	781b      	ldrb	r3, [r3, #0]
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	441a      	add	r2, r3
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be88:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	781b      	ldrb	r3, [r3, #0]
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4413      	add	r3, r2
 800be94:	681a      	ldr	r2, [r3, #0]
 800be96:	4b64      	ldr	r3, [pc, #400]	@ (800c028 <USB_DeactivateEndpoint+0x1f8>)
 800be98:	4013      	ands	r3, r2
 800be9a:	60bb      	str	r3, [r7, #8]
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	441a      	add	r2, r3
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800beac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beb0:	6013      	str	r3, [r2, #0]
 800beb2:	e139      	b.n	800c128 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4413      	add	r3, r2
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	61fb      	str	r3, [r7, #28]
 800bec2:	69fb      	ldr	r3, [r7, #28]
 800bec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d013      	beq.n	800bef4 <USB_DeactivateEndpoint+0xc4>
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4413      	add	r3, r2
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	4b52      	ldr	r3, [pc, #328]	@ (800c024 <USB_DeactivateEndpoint+0x1f4>)
 800beda:	4013      	ands	r3, r2
 800bedc:	61bb      	str	r3, [r7, #24]
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	441a      	add	r2, r3
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800beee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bef2:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bef4:	687a      	ldr	r2, [r7, #4]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	009b      	lsls	r3, r3, #2
 800befc:	4413      	add	r3, r2
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	4b4a      	ldr	r3, [pc, #296]	@ (800c02c <USB_DeactivateEndpoint+0x1fc>)
 800bf02:	4013      	ands	r3, r2
 800bf04:	617b      	str	r3, [r7, #20]
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	441a      	add	r2, r3
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf1a:	6013      	str	r3, [r2, #0]
 800bf1c:	e104      	b.n	800c128 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	785b      	ldrb	r3, [r3, #1]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f040 8084 	bne.w	800c030 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4413      	add	r3, r2
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bf36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d013      	beq.n	800bf68 <USB_DeactivateEndpoint+0x138>
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	4413      	add	r3, r2
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	4b35      	ldr	r3, [pc, #212]	@ (800c024 <USB_DeactivateEndpoint+0x1f4>)
 800bf4e:	4013      	ands	r3, r2
 800bf50:	637b      	str	r3, [r7, #52]	@ 0x34
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	441a      	add	r2, r3
 800bf5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf66:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4413      	add	r3, r2
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d013      	beq.n	800bfa8 <USB_DeactivateEndpoint+0x178>
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4413      	add	r3, r2
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	4b25      	ldr	r3, [pc, #148]	@ (800c024 <USB_DeactivateEndpoint+0x1f4>)
 800bf8e:	4013      	ands	r3, r2
 800bf90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	781b      	ldrb	r3, [r3, #0]
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	441a      	add	r2, r3
 800bf9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfa2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bfa6:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	4413      	add	r3, r2
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	4b1b      	ldr	r3, [pc, #108]	@ (800c024 <USB_DeactivateEndpoint+0x1f4>)
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	009b      	lsls	r3, r3, #2
 800bfc2:	441a      	add	r2, r3
 800bfc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfca:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bfce:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4413      	add	r3, r2
 800bfda:	681a      	ldr	r2, [r3, #0]
 800bfdc:	4b13      	ldr	r3, [pc, #76]	@ (800c02c <USB_DeactivateEndpoint+0x1fc>)
 800bfde:	4013      	ands	r3, r2
 800bfe0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	441a      	add	r2, r3
 800bfec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bff6:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bff8:	687a      	ldr	r2, [r7, #4]
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	681a      	ldr	r2, [r3, #0]
 800c004:	4b08      	ldr	r3, [pc, #32]	@ (800c028 <USB_DeactivateEndpoint+0x1f8>)
 800c006:	4013      	ands	r3, r2
 800c008:	623b      	str	r3, [r7, #32]
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	441a      	add	r2, r3
 800c014:	6a3b      	ldr	r3, [r7, #32]
 800c016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c01e:	6013      	str	r3, [r2, #0]
 800c020:	e082      	b.n	800c128 <USB_DeactivateEndpoint+0x2f8>
 800c022:	bf00      	nop
 800c024:	07ff8f8f 	.word	0x07ff8f8f
 800c028:	07ff8fbf 	.word	0x07ff8fbf
 800c02c:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4413      	add	r3, r2
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c03e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c044:	2b00      	cmp	r3, #0
 800c046:	d013      	beq.n	800c070 <USB_DeactivateEndpoint+0x240>
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	4b38      	ldr	r3, [pc, #224]	@ (800c138 <USB_DeactivateEndpoint+0x308>)
 800c056:	4013      	ands	r3, r2
 800c058:	653b      	str	r3, [r7, #80]	@ 0x50
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	009b      	lsls	r3, r3, #2
 800c062:	441a      	add	r2, r3
 800c064:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c066:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c06a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c06e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c070:	687a      	ldr	r2, [r7, #4]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	009b      	lsls	r3, r3, #2
 800c078:	4413      	add	r3, r2
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c07e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c084:	2b00      	cmp	r3, #0
 800c086:	d013      	beq.n	800c0b0 <USB_DeactivateEndpoint+0x280>
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	681a      	ldr	r2, [r3, #0]
 800c094:	4b28      	ldr	r3, [pc, #160]	@ (800c138 <USB_DeactivateEndpoint+0x308>)
 800c096:	4013      	ands	r3, r2
 800c098:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	441a      	add	r2, r3
 800c0a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c0a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c0ae:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4413      	add	r3, r2
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	4b1e      	ldr	r3, [pc, #120]	@ (800c138 <USB_DeactivateEndpoint+0x308>)
 800c0be:	4013      	ands	r3, r2
 800c0c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c0c2:	687a      	ldr	r2, [r7, #4]
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	441a      	add	r2, r3
 800c0cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c0d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0d6:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c0d8:	687a      	ldr	r2, [r7, #4]
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	4413      	add	r3, r2
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	4b15      	ldr	r3, [pc, #84]	@ (800c13c <USB_DeactivateEndpoint+0x30c>)
 800c0e6:	4013      	ands	r3, r2
 800c0e8:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	441a      	add	r2, r3
 800c0f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0fe:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	4413      	add	r3, r2
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	4b0c      	ldr	r3, [pc, #48]	@ (800c140 <USB_DeactivateEndpoint+0x310>)
 800c10e:	4013      	ands	r3, r2
 800c110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	441a      	add	r2, r3
 800c11c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c11e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c126:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c128:	2300      	movs	r3, #0
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	375c      	adds	r7, #92	@ 0x5c
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr
 800c136:	bf00      	nop
 800c138:	07ff8f8f 	.word	0x07ff8f8f
 800c13c:	07ff8fbf 	.word	0x07ff8fbf
 800c140:	07ffbf8f 	.word	0x07ffbf8f

0800c144 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b096      	sub	sp, #88	@ 0x58
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	785b      	ldrb	r3, [r3, #1]
 800c152:	2b01      	cmp	r3, #1
 800c154:	f040 84ed 	bne.w	800cb32 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	699a      	ldr	r2, [r3, #24]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	691b      	ldr	r3, [r3, #16]
 800c160:	429a      	cmp	r2, r3
 800c162:	d903      	bls.n	800c16c <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	691b      	ldr	r3, [r3, #16]
 800c168:	657b      	str	r3, [r7, #84]	@ 0x54
 800c16a:	e002      	b.n	800c172 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	699b      	ldr	r3, [r3, #24]
 800c170:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	7b1b      	ldrb	r3, [r3, #12]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d12e      	bne.n	800c1d8 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	6959      	ldr	r1, [r3, #20]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	88da      	ldrh	r2, [r3, #6]
 800c182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c184:	b29b      	uxth	r3, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f001 f963 	bl	800d452 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	00db      	lsls	r3, r3, #3
 800c192:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c196:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	781b      	ldrb	r3, [r3, #0]
 800c1a0:	00db      	lsls	r3, r3, #3
 800c1a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1aa:	b292      	uxth	r2, r2
 800c1ac:	601a      	str	r2, [r3, #0]
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	00db      	lsls	r3, r3, #3
 800c1b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1bc:	6819      	ldr	r1, [r3, #0]
 800c1be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1c0:	041a      	lsls	r2, r3, #16
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	00db      	lsls	r3, r3, #3
 800c1c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1d0:	430a      	orrs	r2, r1
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	f000 bc90 	b.w	800caf8 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	78db      	ldrb	r3, [r3, #3]
 800c1dc:	2b02      	cmp	r3, #2
 800c1de:	f040 8332 	bne.w	800c846 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	6a1a      	ldr	r2, [r3, #32]
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	f240 82e4 	bls.w	800c7b8 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	781b      	ldrb	r3, [r3, #0]
 800c1f6:	009b      	lsls	r3, r3, #2
 800c1f8:	4413      	add	r3, r2
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	4ba4      	ldr	r3, [pc, #656]	@ (800c490 <USB_EPStartXfer+0x34c>)
 800c1fe:	4013      	ands	r3, r2
 800c200:	613b      	str	r3, [r7, #16]
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	441a      	add	r2, r3
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c216:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	6a1a      	ldr	r2, [r3, #32]
 800c21c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c21e:	1ad2      	subs	r2, r2, r3
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4413      	add	r3, r2
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c234:	2b00      	cmp	r3, #0
 800c236:	f000 8161 	beq.w	800c4fc <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	785b      	ldrb	r3, [r3, #1]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d16a      	bne.n	800c318 <USB_EPStartXfer+0x1d4>
 800c242:	683b      	ldr	r3, [r7, #0]
 800c244:	781b      	ldrb	r3, [r3, #0]
 800c246:	00db      	lsls	r3, r3, #3
 800c248:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c24c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c250:	685a      	ldr	r2, [r3, #4]
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	00db      	lsls	r3, r3, #3
 800c258:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c25c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c260:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c264:	605a      	str	r2, [r3, #4]
 800c266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d112      	bne.n	800c292 <USB_EPStartXfer+0x14e>
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	00db      	lsls	r3, r3, #3
 800c272:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c276:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c27a:	685a      	ldr	r2, [r3, #4]
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c286:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c28a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c28e:	605a      	str	r2, [r3, #4]
 800c290:	e06a      	b.n	800c368 <USB_EPStartXfer+0x224>
 800c292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c294:	2b3e      	cmp	r3, #62	@ 0x3e
 800c296:	d81e      	bhi.n	800c2d6 <USB_EPStartXfer+0x192>
 800c298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c29a:	085b      	lsrs	r3, r3, #1
 800c29c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c29e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2a0:	f003 0301 	and.w	r3, r3, #1
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d002      	beq.n	800c2ae <USB_EPStartXfer+0x16a>
 800c2a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	00db      	lsls	r3, r3, #3
 800c2b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2bc:	6859      	ldr	r1, [r3, #4]
 800c2be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2c0:	069a      	lsls	r2, r3, #26
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	00db      	lsls	r3, r3, #3
 800c2c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2d0:	430a      	orrs	r2, r1
 800c2d2:	605a      	str	r2, [r3, #4]
 800c2d4:	e048      	b.n	800c368 <USB_EPStartXfer+0x224>
 800c2d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2d8:	095b      	lsrs	r3, r3, #5
 800c2da:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2de:	f003 031f 	and.w	r3, r3, #31
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d102      	bne.n	800c2ec <USB_EPStartXfer+0x1a8>
 800c2e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2e8:	3b01      	subs	r3, #1
 800c2ea:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	00db      	lsls	r3, r3, #3
 800c2f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2fa:	685a      	ldr	r2, [r3, #4]
 800c2fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2fe:	069b      	lsls	r3, r3, #26
 800c300:	431a      	orrs	r2, r3
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	00db      	lsls	r3, r3, #3
 800c308:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c30c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c310:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c314:	605a      	str	r2, [r3, #4]
 800c316:	e027      	b.n	800c368 <USB_EPStartXfer+0x224>
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	785b      	ldrb	r3, [r3, #1]
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d123      	bne.n	800c368 <USB_EPStartXfer+0x224>
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	00db      	lsls	r3, r3, #3
 800c326:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c32a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c32e:	685a      	ldr	r2, [r3, #4]
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	00db      	lsls	r3, r3, #3
 800c336:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c33a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c33e:	b292      	uxth	r2, r2
 800c340:	605a      	str	r2, [r3, #4]
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	00db      	lsls	r3, r3, #3
 800c348:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c34c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c350:	6859      	ldr	r1, [r3, #4]
 800c352:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c354:	041a      	lsls	r2, r3, #16
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	781b      	ldrb	r3, [r3, #0]
 800c35a:	00db      	lsls	r3, r3, #3
 800c35c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c360:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c364:	430a      	orrs	r2, r1
 800c366:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	895b      	ldrh	r3, [r3, #10]
 800c36c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	6959      	ldr	r1, [r3, #20]
 800c372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c374:	b29b      	uxth	r3, r3
 800c376:	8b7a      	ldrh	r2, [r7, #26]
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f001 f86a 	bl	800d452 <USB_WritePMA>
            ep->xfer_buff += len;
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	695a      	ldr	r2, [r3, #20]
 800c382:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c384:	441a      	add	r2, r3
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c38a:	683b      	ldr	r3, [r7, #0]
 800c38c:	6a1a      	ldr	r2, [r3, #32]
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	429a      	cmp	r2, r3
 800c394:	d906      	bls.n	800c3a4 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	6a1a      	ldr	r2, [r3, #32]
 800c39a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c39c:	1ad2      	subs	r2, r2, r3
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	621a      	str	r2, [r3, #32]
 800c3a2:	e005      	b.n	800c3b0 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	6a1b      	ldr	r3, [r3, #32]
 800c3a8:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	785b      	ldrb	r3, [r3, #1]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d16d      	bne.n	800c494 <USB_EPStartXfer+0x350>
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	00db      	lsls	r3, r3, #3
 800c3be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	781b      	ldrb	r3, [r3, #0]
 800c3cc:	00db      	lsls	r3, r3, #3
 800c3ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3d6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c3da:	601a      	str	r2, [r3, #0]
 800c3dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d112      	bne.n	800c408 <USB_EPStartXfer+0x2c4>
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	00db      	lsls	r3, r3, #3
 800c3e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c3f0:	681a      	ldr	r2, [r3, #0]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	00db      	lsls	r3, r3, #3
 800c3f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c3fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c400:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c404:	601a      	str	r2, [r3, #0]
 800c406:	e06d      	b.n	800c4e4 <USB_EPStartXfer+0x3a0>
 800c408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c40a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c40c:	d81e      	bhi.n	800c44c <USB_EPStartXfer+0x308>
 800c40e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c410:	085b      	lsrs	r3, r3, #1
 800c412:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c416:	f003 0301 	and.w	r3, r3, #1
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d002      	beq.n	800c424 <USB_EPStartXfer+0x2e0>
 800c41e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c420:	3301      	adds	r3, #1
 800c422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	781b      	ldrb	r3, [r3, #0]
 800c428:	00db      	lsls	r3, r3, #3
 800c42a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c42e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c432:	6819      	ldr	r1, [r3, #0]
 800c434:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c436:	069a      	lsls	r2, r3, #26
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	781b      	ldrb	r3, [r3, #0]
 800c43c:	00db      	lsls	r3, r3, #3
 800c43e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c442:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c446:	430a      	orrs	r2, r1
 800c448:	601a      	str	r2, [r3, #0]
 800c44a:	e04b      	b.n	800c4e4 <USB_EPStartXfer+0x3a0>
 800c44c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c44e:	095b      	lsrs	r3, r3, #5
 800c450:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c454:	f003 031f 	and.w	r3, r3, #31
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d102      	bne.n	800c462 <USB_EPStartXfer+0x31e>
 800c45c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c45e:	3b01      	subs	r3, #1
 800c460:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	00db      	lsls	r3, r3, #3
 800c468:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c46c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c470:	681a      	ldr	r2, [r3, #0]
 800c472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c474:	069b      	lsls	r3, r3, #26
 800c476:	431a      	orrs	r2, r3
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	00db      	lsls	r3, r3, #3
 800c47e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c482:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c486:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c48a:	601a      	str	r2, [r3, #0]
 800c48c:	e02a      	b.n	800c4e4 <USB_EPStartXfer+0x3a0>
 800c48e:	bf00      	nop
 800c490:	07ff8f8f 	.word	0x07ff8f8f
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	785b      	ldrb	r3, [r3, #1]
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d123      	bne.n	800c4e4 <USB_EPStartXfer+0x3a0>
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	781b      	ldrb	r3, [r3, #0]
 800c4a0:	00db      	lsls	r3, r3, #3
 800c4a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4ba:	b292      	uxth	r2, r2
 800c4bc:	601a      	str	r2, [r3, #0]
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4cc:	6819      	ldr	r1, [r3, #0]
 800c4ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4d0:	041a      	lsls	r2, r3, #16
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	00db      	lsls	r3, r3, #3
 800c4d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4e0:	430a      	orrs	r2, r1
 800c4e2:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	891b      	ldrh	r3, [r3, #8]
 800c4e8:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	6959      	ldr	r1, [r3, #20]
 800c4ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	8b7a      	ldrh	r2, [r7, #26]
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 ffac 	bl	800d452 <USB_WritePMA>
 800c4fa:	e2fd      	b.n	800caf8 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	785b      	ldrb	r3, [r3, #1]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d16a      	bne.n	800c5da <USB_EPStartXfer+0x496>
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c50e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	00db      	lsls	r3, r3, #3
 800c51a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c51e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c522:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d112      	bne.n	800c554 <USB_EPStartXfer+0x410>
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	781b      	ldrb	r3, [r3, #0]
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c538:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	00db      	lsls	r3, r3, #3
 800c544:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c548:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c54c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c550:	601a      	str	r2, [r3, #0]
 800c552:	e06a      	b.n	800c62a <USB_EPStartXfer+0x4e6>
 800c554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c556:	2b3e      	cmp	r3, #62	@ 0x3e
 800c558:	d81e      	bhi.n	800c598 <USB_EPStartXfer+0x454>
 800c55a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c55c:	085b      	lsrs	r3, r3, #1
 800c55e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c562:	f003 0301 	and.w	r3, r3, #1
 800c566:	2b00      	cmp	r3, #0
 800c568:	d002      	beq.n	800c570 <USB_EPStartXfer+0x42c>
 800c56a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c56c:	3301      	adds	r3, #1
 800c56e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	00db      	lsls	r3, r3, #3
 800c576:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c57a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c57e:	6819      	ldr	r1, [r3, #0]
 800c580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c582:	069a      	lsls	r2, r3, #26
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	00db      	lsls	r3, r3, #3
 800c58a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c58e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c592:	430a      	orrs	r2, r1
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	e048      	b.n	800c62a <USB_EPStartXfer+0x4e6>
 800c598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c59a:	095b      	lsrs	r3, r3, #5
 800c59c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c59e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5a0:	f003 031f 	and.w	r3, r3, #31
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d102      	bne.n	800c5ae <USB_EPStartXfer+0x46a>
 800c5a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5aa:	3b01      	subs	r3, #1
 800c5ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	00db      	lsls	r3, r3, #3
 800c5b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c5c0:	069b      	lsls	r3, r3, #26
 800c5c2:	431a      	orrs	r2, r3
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	00db      	lsls	r3, r3, #3
 800c5ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5d2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c5d6:	601a      	str	r2, [r3, #0]
 800c5d8:	e027      	b.n	800c62a <USB_EPStartXfer+0x4e6>
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	785b      	ldrb	r3, [r3, #1]
 800c5de:	2b01      	cmp	r3, #1
 800c5e0:	d123      	bne.n	800c62a <USB_EPStartXfer+0x4e6>
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	781b      	ldrb	r3, [r3, #0]
 800c5e6:	00db      	lsls	r3, r3, #3
 800c5e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	00db      	lsls	r3, r3, #3
 800c5f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c600:	b292      	uxth	r2, r2
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	00db      	lsls	r3, r3, #3
 800c60a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c60e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c612:	6819      	ldr	r1, [r3, #0]
 800c614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c616:	041a      	lsls	r2, r3, #16
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	781b      	ldrb	r3, [r3, #0]
 800c61c:	00db      	lsls	r3, r3, #3
 800c61e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c622:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c626:	430a      	orrs	r2, r1
 800c628:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	891b      	ldrh	r3, [r3, #8]
 800c62e:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	6959      	ldr	r1, [r3, #20]
 800c634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c636:	b29b      	uxth	r3, r3
 800c638:	8b7a      	ldrh	r2, [r7, #26]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 ff09 	bl	800d452 <USB_WritePMA>
            ep->xfer_buff += len;
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	695a      	ldr	r2, [r3, #20]
 800c644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c646:	441a      	add	r2, r3
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	6a1a      	ldr	r2, [r3, #32]
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	429a      	cmp	r2, r3
 800c656:	d906      	bls.n	800c666 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	6a1a      	ldr	r2, [r3, #32]
 800c65c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c65e:	1ad2      	subs	r2, r2, r3
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	621a      	str	r2, [r3, #32]
 800c664:	e005      	b.n	800c672 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	6a1b      	ldr	r3, [r3, #32]
 800c66a:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	2200      	movs	r2, #0
 800c670:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	785b      	ldrb	r3, [r3, #1]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d16a      	bne.n	800c750 <USB_EPStartXfer+0x60c>
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	00db      	lsls	r3, r3, #3
 800c680:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c684:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	781b      	ldrb	r3, [r3, #0]
 800c68e:	00db      	lsls	r3, r3, #3
 800c690:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c694:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c698:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c69c:	605a      	str	r2, [r3, #4]
 800c69e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d112      	bne.n	800c6ca <USB_EPStartXfer+0x586>
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	00db      	lsls	r3, r3, #3
 800c6aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6b2:	685a      	ldr	r2, [r3, #4]
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	00db      	lsls	r3, r3, #3
 800c6ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6c2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c6c6:	605a      	str	r2, [r3, #4]
 800c6c8:	e06a      	b.n	800c7a0 <USB_EPStartXfer+0x65c>
 800c6ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6cc:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6ce:	d81e      	bhi.n	800c70e <USB_EPStartXfer+0x5ca>
 800c6d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6d2:	085b      	lsrs	r3, r3, #1
 800c6d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6d8:	f003 0301 	and.w	r3, r3, #1
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d002      	beq.n	800c6e6 <USB_EPStartXfer+0x5a2>
 800c6e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	781b      	ldrb	r3, [r3, #0]
 800c6ea:	00db      	lsls	r3, r3, #3
 800c6ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c6f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c6f4:	6859      	ldr	r1, [r3, #4]
 800c6f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6f8:	069a      	lsls	r2, r3, #26
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	00db      	lsls	r3, r3, #3
 800c700:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c704:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c708:	430a      	orrs	r2, r1
 800c70a:	605a      	str	r2, [r3, #4]
 800c70c:	e048      	b.n	800c7a0 <USB_EPStartXfer+0x65c>
 800c70e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c710:	095b      	lsrs	r3, r3, #5
 800c712:	647b      	str	r3, [r7, #68]	@ 0x44
 800c714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c716:	f003 031f 	and.w	r3, r3, #31
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d102      	bne.n	800c724 <USB_EPStartXfer+0x5e0>
 800c71e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c720:	3b01      	subs	r3, #1
 800c722:	647b      	str	r3, [r7, #68]	@ 0x44
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	00db      	lsls	r3, r3, #3
 800c72a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c72e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c732:	685a      	ldr	r2, [r3, #4]
 800c734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c736:	069b      	lsls	r3, r3, #26
 800c738:	431a      	orrs	r2, r3
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	00db      	lsls	r3, r3, #3
 800c740:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c744:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c748:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c74c:	605a      	str	r2, [r3, #4]
 800c74e:	e027      	b.n	800c7a0 <USB_EPStartXfer+0x65c>
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	785b      	ldrb	r3, [r3, #1]
 800c754:	2b01      	cmp	r3, #1
 800c756:	d123      	bne.n	800c7a0 <USB_EPStartXfer+0x65c>
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	00db      	lsls	r3, r3, #3
 800c75e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c762:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	781b      	ldrb	r3, [r3, #0]
 800c76c:	00db      	lsls	r3, r3, #3
 800c76e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c772:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c776:	b292      	uxth	r2, r2
 800c778:	605a      	str	r2, [r3, #4]
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	00db      	lsls	r3, r3, #3
 800c780:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c784:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c788:	6859      	ldr	r1, [r3, #4]
 800c78a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c78c:	041a      	lsls	r2, r3, #16
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	00db      	lsls	r3, r3, #3
 800c794:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c798:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c79c:	430a      	orrs	r2, r1
 800c79e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	895b      	ldrh	r3, [r3, #10]
 800c7a4:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	6959      	ldr	r1, [r3, #20]
 800c7aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	8b7a      	ldrh	r2, [r7, #26]
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 fe4e 	bl	800d452 <USB_WritePMA>
 800c7b6:	e19f      	b.n	800caf8 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	6a1b      	ldr	r3, [r3, #32]
 800c7bc:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	009b      	lsls	r3, r3, #2
 800c7c6:	4413      	add	r3, r2
 800c7c8:	681a      	ldr	r2, [r3, #0]
 800c7ca:	4ba0      	ldr	r3, [pc, #640]	@ (800ca4c <USB_EPStartXfer+0x908>)
 800c7cc:	4013      	ands	r3, r2
 800c7ce:	617b      	str	r3, [r7, #20]
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	441a      	add	r2, r3
 800c7da:	697b      	ldr	r3, [r7, #20]
 800c7dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7e4:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	00db      	lsls	r3, r3, #3
 800c7ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c7f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c7f4:	681a      	ldr	r2, [r3, #0]
 800c7f6:	683b      	ldr	r3, [r7, #0]
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	00db      	lsls	r3, r3, #3
 800c7fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c800:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c804:	b292      	uxth	r2, r2
 800c806:	601a      	str	r2, [r3, #0]
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	00db      	lsls	r3, r3, #3
 800c80e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c812:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c816:	6819      	ldr	r1, [r3, #0]
 800c818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c81a:	041a      	lsls	r2, r3, #16
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	781b      	ldrb	r3, [r3, #0]
 800c820:	00db      	lsls	r3, r3, #3
 800c822:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c826:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c82a:	430a      	orrs	r2, r1
 800c82c:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	891b      	ldrh	r3, [r3, #8]
 800c832:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	6959      	ldr	r1, [r3, #20]
 800c838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	8b7a      	ldrh	r2, [r7, #26]
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 fe07 	bl	800d452 <USB_WritePMA>
 800c844:	e158      	b.n	800caf8 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	6a1a      	ldr	r2, [r3, #32]
 800c84a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c84c:	1ad2      	subs	r2, r2, r3
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4413      	add	r3, r2
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c862:	2b00      	cmp	r3, #0
 800c864:	f000 80a3 	beq.w	800c9ae <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	785b      	ldrb	r3, [r3, #1]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d16a      	bne.n	800c946 <USB_EPStartXfer+0x802>
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	00db      	lsls	r3, r3, #3
 800c876:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c87a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	00db      	lsls	r3, r3, #3
 800c886:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c88a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c88e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c892:	605a      	str	r2, [r3, #4]
 800c894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c896:	2b00      	cmp	r3, #0
 800c898:	d112      	bne.n	800c8c0 <USB_EPStartXfer+0x77c>
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	00db      	lsls	r3, r3, #3
 800c8a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8a4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8a8:	685a      	ldr	r2, [r3, #4]
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	00db      	lsls	r3, r3, #3
 800c8b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8b8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c8bc:	605a      	str	r2, [r3, #4]
 800c8be:	e06a      	b.n	800c996 <USB_EPStartXfer+0x852>
 800c8c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8c2:	2b3e      	cmp	r3, #62	@ 0x3e
 800c8c4:	d81e      	bhi.n	800c904 <USB_EPStartXfer+0x7c0>
 800c8c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8c8:	085b      	lsrs	r3, r3, #1
 800c8ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8ce:	f003 0301 	and.w	r3, r3, #1
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d002      	beq.n	800c8dc <USB_EPStartXfer+0x798>
 800c8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8d8:	3301      	adds	r3, #1
 800c8da:	643b      	str	r3, [r7, #64]	@ 0x40
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	00db      	lsls	r3, r3, #3
 800c8e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8ea:	6859      	ldr	r1, [r3, #4]
 800c8ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c8ee:	069a      	lsls	r2, r3, #26
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	00db      	lsls	r3, r3, #3
 800c8f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c8fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c8fe:	430a      	orrs	r2, r1
 800c900:	605a      	str	r2, [r3, #4]
 800c902:	e048      	b.n	800c996 <USB_EPStartXfer+0x852>
 800c904:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c906:	095b      	lsrs	r3, r3, #5
 800c908:	643b      	str	r3, [r7, #64]	@ 0x40
 800c90a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c90c:	f003 031f 	and.w	r3, r3, #31
 800c910:	2b00      	cmp	r3, #0
 800c912:	d102      	bne.n	800c91a <USB_EPStartXfer+0x7d6>
 800c914:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c916:	3b01      	subs	r3, #1
 800c918:	643b      	str	r3, [r7, #64]	@ 0x40
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	00db      	lsls	r3, r3, #3
 800c920:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c924:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c928:	685a      	ldr	r2, [r3, #4]
 800c92a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c92c:	069b      	lsls	r3, r3, #26
 800c92e:	431a      	orrs	r2, r3
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	00db      	lsls	r3, r3, #3
 800c936:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c93a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c93e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c942:	605a      	str	r2, [r3, #4]
 800c944:	e027      	b.n	800c996 <USB_EPStartXfer+0x852>
 800c946:	683b      	ldr	r3, [r7, #0]
 800c948:	785b      	ldrb	r3, [r3, #1]
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d123      	bne.n	800c996 <USB_EPStartXfer+0x852>
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	00db      	lsls	r3, r3, #3
 800c954:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c958:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c95c:	685a      	ldr	r2, [r3, #4]
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	00db      	lsls	r3, r3, #3
 800c964:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c968:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c96c:	b292      	uxth	r2, r2
 800c96e:	605a      	str	r2, [r3, #4]
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	00db      	lsls	r3, r3, #3
 800c976:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c97a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c97e:	6859      	ldr	r1, [r3, #4]
 800c980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c982:	041a      	lsls	r2, r3, #16
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	00db      	lsls	r3, r3, #3
 800c98a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c98e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c992:	430a      	orrs	r2, r1
 800c994:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	895b      	ldrh	r3, [r3, #10]
 800c99a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	6959      	ldr	r1, [r3, #20]
 800c9a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	8b7a      	ldrh	r2, [r7, #26]
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 fd53 	bl	800d452 <USB_WritePMA>
 800c9ac:	e0a4      	b.n	800caf8 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	785b      	ldrb	r3, [r3, #1]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d16d      	bne.n	800ca92 <USB_EPStartXfer+0x94e>
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	00db      	lsls	r3, r3, #3
 800c9bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	781b      	ldrb	r3, [r3, #0]
 800c9ca:	00db      	lsls	r3, r3, #3
 800c9cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9d4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d112      	bne.n	800ca06 <USB_EPStartXfer+0x8c2>
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	00db      	lsls	r3, r3, #3
 800c9e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9ee:	681a      	ldr	r2, [r3, #0]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	00db      	lsls	r3, r3, #3
 800c9f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	e06d      	b.n	800cae2 <USB_EPStartXfer+0x99e>
 800ca06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca08:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca0a:	d821      	bhi.n	800ca50 <USB_EPStartXfer+0x90c>
 800ca0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca0e:	085b      	lsrs	r3, r3, #1
 800ca10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca14:	f003 0301 	and.w	r3, r3, #1
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d002      	beq.n	800ca22 <USB_EPStartXfer+0x8de>
 800ca1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca1e:	3301      	adds	r3, #1
 800ca20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	781b      	ldrb	r3, [r3, #0]
 800ca26:	00db      	lsls	r3, r3, #3
 800ca28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca30:	6819      	ldr	r1, [r3, #0]
 800ca32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca34:	069a      	lsls	r2, r3, #26
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca44:	430a      	orrs	r2, r1
 800ca46:	601a      	str	r2, [r3, #0]
 800ca48:	e04b      	b.n	800cae2 <USB_EPStartXfer+0x99e>
 800ca4a:	bf00      	nop
 800ca4c:	07ff8e8f 	.word	0x07ff8e8f
 800ca50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca52:	095b      	lsrs	r3, r3, #5
 800ca54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca58:	f003 031f 	and.w	r3, r3, #31
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d102      	bne.n	800ca66 <USB_EPStartXfer+0x922>
 800ca60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca62:	3b01      	subs	r3, #1
 800ca64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	00db      	lsls	r3, r3, #3
 800ca6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca78:	069b      	lsls	r3, r3, #26
 800ca7a:	431a      	orrs	r2, r3
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	00db      	lsls	r3, r3, #3
 800ca82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca8a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ca8e:	601a      	str	r2, [r3, #0]
 800ca90:	e027      	b.n	800cae2 <USB_EPStartXfer+0x99e>
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	785b      	ldrb	r3, [r3, #1]
 800ca96:	2b01      	cmp	r3, #1
 800ca98:	d123      	bne.n	800cae2 <USB_EPStartXfer+0x99e>
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	00db      	lsls	r3, r3, #3
 800caa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caa4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cab4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cab8:	b292      	uxth	r2, r2
 800caba:	601a      	str	r2, [r3, #0]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cac6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caca:	6819      	ldr	r1, [r3, #0]
 800cacc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cace:	041a      	lsls	r2, r3, #16
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	00db      	lsls	r3, r3, #3
 800cad6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cada:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cade:	430a      	orrs	r2, r1
 800cae0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	891b      	ldrh	r3, [r3, #8]
 800cae6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	6959      	ldr	r1, [r3, #20]
 800caec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caee:	b29b      	uxth	r3, r3
 800caf0:	8b7a      	ldrh	r2, [r7, #26]
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 fcad 	bl	800d452 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	4413      	add	r3, r2
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	4b8b      	ldr	r3, [pc, #556]	@ (800cd34 <USB_EPStartXfer+0xbf0>)
 800cb06:	4013      	ands	r3, r2
 800cb08:	60fb      	str	r3, [r7, #12]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f083 0310 	eor.w	r3, r3, #16
 800cb10:	60fb      	str	r3, [r7, #12]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f083 0320 	eor.w	r3, r3, #32
 800cb18:	60fb      	str	r3, [r7, #12]
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	441a      	add	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb2e:	6013      	str	r3, [r2, #0]
 800cb30:	e36b      	b.n	800d20a <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	7b1b      	ldrb	r3, [r3, #12]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	f040 8081 	bne.w	800cc3e <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	699a      	ldr	r2, [r3, #24]
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	691b      	ldr	r3, [r3, #16]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d909      	bls.n	800cb5c <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	691b      	ldr	r3, [r3, #16]
 800cb4c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	699a      	ldr	r2, [r3, #24]
 800cb52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb54:	1ad2      	subs	r2, r2, r3
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	619a      	str	r2, [r3, #24]
 800cb5a:	e005      	b.n	800cb68 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	699b      	ldr	r3, [r3, #24]
 800cb60:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	2200      	movs	r2, #0
 800cb66:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	00db      	lsls	r3, r3, #3
 800cb6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb76:	685a      	ldr	r2, [r3, #4]
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	00db      	lsls	r3, r3, #3
 800cb7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb86:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cb8a:	605a      	str	r2, [r3, #4]
 800cb8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d112      	bne.n	800cbb8 <USB_EPStartXfer+0xa74>
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cba0:	685a      	ldr	r2, [r3, #4]
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	00db      	lsls	r3, r3, #3
 800cba8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbb0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cbb4:	605a      	str	r2, [r3, #4]
 800cbb6:	e30c      	b.n	800d1d2 <USB_EPStartXfer+0x108e>
 800cbb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbba:	2b3e      	cmp	r3, #62	@ 0x3e
 800cbbc:	d81e      	bhi.n	800cbfc <USB_EPStartXfer+0xab8>
 800cbbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbc0:	085b      	lsrs	r3, r3, #1
 800cbc2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d002      	beq.n	800cbd4 <USB_EPStartXfer+0xa90>
 800cbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbe2:	6859      	ldr	r1, [r3, #4]
 800cbe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe6:	069a      	lsls	r2, r3, #26
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	00db      	lsls	r3, r3, #3
 800cbee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cbf2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cbf6:	430a      	orrs	r2, r1
 800cbf8:	605a      	str	r2, [r3, #4]
 800cbfa:	e2ea      	b.n	800d1d2 <USB_EPStartXfer+0x108e>
 800cbfc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbfe:	095b      	lsrs	r3, r3, #5
 800cc00:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc04:	f003 031f 	and.w	r3, r3, #31
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d102      	bne.n	800cc12 <USB_EPStartXfer+0xace>
 800cc0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc0e:	3b01      	subs	r3, #1
 800cc10:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	00db      	lsls	r3, r3, #3
 800cc18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc20:	685a      	ldr	r2, [r3, #4]
 800cc22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc24:	069b      	lsls	r3, r3, #26
 800cc26:	431a      	orrs	r2, r3
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	00db      	lsls	r3, r3, #3
 800cc2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc32:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc36:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cc3a:	605a      	str	r2, [r3, #4]
 800cc3c:	e2c9      	b.n	800d1d2 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	78db      	ldrb	r3, [r3, #3]
 800cc42:	2b02      	cmp	r3, #2
 800cc44:	f040 8176 	bne.w	800cf34 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	785b      	ldrb	r3, [r3, #1]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d173      	bne.n	800cd38 <USB_EPStartXfer+0xbf4>
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	00db      	lsls	r3, r3, #3
 800cc56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	00db      	lsls	r3, r3, #3
 800cc66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc6e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cc72:	601a      	str	r2, [r3, #0]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	691b      	ldr	r3, [r3, #16]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d112      	bne.n	800cca2 <USB_EPStartXfer+0xb5e>
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	00db      	lsls	r3, r3, #3
 800cc82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc8a:	681a      	ldr	r2, [r3, #0]
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	00db      	lsls	r3, r3, #3
 800cc92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc9a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	e073      	b.n	800cd8a <USB_EPStartXfer+0xc46>
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	2b3e      	cmp	r3, #62	@ 0x3e
 800cca8:	d820      	bhi.n	800ccec <USB_EPStartXfer+0xba8>
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	691b      	ldr	r3, [r3, #16]
 800ccae:	085b      	lsrs	r3, r3, #1
 800ccb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	f003 0301 	and.w	r3, r3, #1
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d002      	beq.n	800ccc4 <USB_EPStartXfer+0xb80>
 800ccbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccc0:	3301      	adds	r3, #1
 800ccc2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	00db      	lsls	r3, r3, #3
 800ccca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccd2:	6819      	ldr	r1, [r3, #0]
 800ccd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccd6:	069a      	lsls	r2, r3, #26
 800ccd8:	683b      	ldr	r3, [r7, #0]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	00db      	lsls	r3, r3, #3
 800ccde:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cce2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cce6:	430a      	orrs	r2, r1
 800cce8:	601a      	str	r2, [r3, #0]
 800ccea:	e04e      	b.n	800cd8a <USB_EPStartXfer+0xc46>
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	095b      	lsrs	r3, r3, #5
 800ccf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	691b      	ldr	r3, [r3, #16]
 800ccf8:	f003 031f 	and.w	r3, r3, #31
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d102      	bne.n	800cd06 <USB_EPStartXfer+0xbc2>
 800cd00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd02:	3b01      	subs	r3, #1
 800cd04:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	00db      	lsls	r3, r3, #3
 800cd0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd18:	069b      	lsls	r3, r3, #26
 800cd1a:	431a      	orrs	r2, r3
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	00db      	lsls	r3, r3, #3
 800cd22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd2a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cd2e:	601a      	str	r2, [r3, #0]
 800cd30:	e02b      	b.n	800cd8a <USB_EPStartXfer+0xc46>
 800cd32:	bf00      	nop
 800cd34:	07ff8fbf 	.word	0x07ff8fbf
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	785b      	ldrb	r3, [r3, #1]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d124      	bne.n	800cd8a <USB_EPStartXfer+0xc46>
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	781b      	ldrb	r3, [r3, #0]
 800cd44:	00db      	lsls	r3, r3, #3
 800cd46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd4e:	681a      	ldr	r2, [r3, #0]
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	00db      	lsls	r3, r3, #3
 800cd56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd5e:	b292      	uxth	r2, r2
 800cd60:	601a      	str	r2, [r3, #0]
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	00db      	lsls	r3, r3, #3
 800cd68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd70:	6819      	ldr	r1, [r3, #0]
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	691b      	ldr	r3, [r3, #16]
 800cd76:	041a      	lsls	r2, r3, #16
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	781b      	ldrb	r3, [r3, #0]
 800cd7c:	00db      	lsls	r3, r3, #3
 800cd7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd86:	430a      	orrs	r2, r1
 800cd88:	601a      	str	r2, [r3, #0]
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	785b      	ldrb	r3, [r3, #1]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d170      	bne.n	800ce74 <USB_EPStartXfer+0xd30>
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	00db      	lsls	r3, r3, #3
 800cd98:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd9c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cda0:	685a      	ldr	r2, [r3, #4]
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	00db      	lsls	r3, r3, #3
 800cda8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdb0:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cdb4:	605a      	str	r2, [r3, #4]
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	691b      	ldr	r3, [r3, #16]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d112      	bne.n	800cde4 <USB_EPStartXfer+0xca0>
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	00db      	lsls	r3, r3, #3
 800cdc4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdc8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cdcc:	685a      	ldr	r2, [r3, #4]
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	00db      	lsls	r3, r3, #3
 800cdd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cddc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cde0:	605a      	str	r2, [r3, #4]
 800cde2:	e070      	b.n	800cec6 <USB_EPStartXfer+0xd82>
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	691b      	ldr	r3, [r3, #16]
 800cde8:	2b3e      	cmp	r3, #62	@ 0x3e
 800cdea:	d820      	bhi.n	800ce2e <USB_EPStartXfer+0xcea>
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	691b      	ldr	r3, [r3, #16]
 800cdf0:	085b      	lsrs	r3, r3, #1
 800cdf2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	691b      	ldr	r3, [r3, #16]
 800cdf8:	f003 0301 	and.w	r3, r3, #1
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d002      	beq.n	800ce06 <USB_EPStartXfer+0xcc2>
 800ce00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce02:	3301      	adds	r3, #1
 800ce04:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce06:	683b      	ldr	r3, [r7, #0]
 800ce08:	781b      	ldrb	r3, [r3, #0]
 800ce0a:	00db      	lsls	r3, r3, #3
 800ce0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce14:	6859      	ldr	r1, [r3, #4]
 800ce16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce18:	069a      	lsls	r2, r3, #26
 800ce1a:	683b      	ldr	r3, [r7, #0]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	00db      	lsls	r3, r3, #3
 800ce20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce28:	430a      	orrs	r2, r1
 800ce2a:	605a      	str	r2, [r3, #4]
 800ce2c:	e04b      	b.n	800cec6 <USB_EPStartXfer+0xd82>
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	691b      	ldr	r3, [r3, #16]
 800ce32:	095b      	lsrs	r3, r3, #5
 800ce34:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	691b      	ldr	r3, [r3, #16]
 800ce3a:	f003 031f 	and.w	r3, r3, #31
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d102      	bne.n	800ce48 <USB_EPStartXfer+0xd04>
 800ce42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce44:	3b01      	subs	r3, #1
 800ce46:	633b      	str	r3, [r7, #48]	@ 0x30
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	00db      	lsls	r3, r3, #3
 800ce4e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce52:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce56:	685a      	ldr	r2, [r3, #4]
 800ce58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce5a:	069b      	lsls	r3, r3, #26
 800ce5c:	431a      	orrs	r2, r3
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	781b      	ldrb	r3, [r3, #0]
 800ce62:	00db      	lsls	r3, r3, #3
 800ce64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce6c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ce70:	605a      	str	r2, [r3, #4]
 800ce72:	e028      	b.n	800cec6 <USB_EPStartXfer+0xd82>
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	785b      	ldrb	r3, [r3, #1]
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d124      	bne.n	800cec6 <USB_EPStartXfer+0xd82>
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	00db      	lsls	r3, r3, #3
 800ce82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce8a:	685a      	ldr	r2, [r3, #4]
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	00db      	lsls	r3, r3, #3
 800ce92:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce96:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ce9a:	b292      	uxth	r2, r2
 800ce9c:	605a      	str	r2, [r3, #4]
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	00db      	lsls	r3, r3, #3
 800cea4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cea8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ceac:	6859      	ldr	r1, [r3, #4]
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	041a      	lsls	r2, r3, #16
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	00db      	lsls	r3, r3, #3
 800ceba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cebe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cec2:	430a      	orrs	r2, r1
 800cec4:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	69db      	ldr	r3, [r3, #28]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	f000 8181 	beq.w	800d1d2 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4413      	add	r3, r2
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cede:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cee0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d004      	beq.n	800cef2 <USB_EPStartXfer+0xdae>
 800cee8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ceea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d10b      	bne.n	800cf0a <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cef2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cef4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	f040 816a 	bne.w	800d1d2 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cefe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cf00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f040 8164 	bne.w	800d1d2 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	009b      	lsls	r3, r3, #2
 800cf12:	4413      	add	r3, r2
 800cf14:	681a      	ldr	r2, [r3, #0]
 800cf16:	4b98      	ldr	r3, [pc, #608]	@ (800d178 <USB_EPStartXfer+0x1034>)
 800cf18:	4013      	ands	r3, r2
 800cf1a:	623b      	str	r3, [r7, #32]
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	441a      	add	r2, r3
 800cf26:	6a3b      	ldr	r3, [r7, #32]
 800cf28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cf30:	6013      	str	r3, [r2, #0]
 800cf32:	e14e      	b.n	800d1d2 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	78db      	ldrb	r3, [r3, #3]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	f040 8148 	bne.w	800d1ce <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	699a      	ldr	r2, [r3, #24]
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d909      	bls.n	800cf5e <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	691b      	ldr	r3, [r3, #16]
 800cf4e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	699a      	ldr	r2, [r3, #24]
 800cf54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf56:	1ad2      	subs	r2, r2, r3
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	619a      	str	r2, [r3, #24]
 800cf5c:	e005      	b.n	800cf6a <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	699b      	ldr	r3, [r3, #24]
 800cf62:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	2200      	movs	r2, #0
 800cf68:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800cf6a:	683b      	ldr	r3, [r7, #0]
 800cf6c:	785b      	ldrb	r3, [r3, #1]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d16a      	bne.n	800d048 <USB_EPStartXfer+0xf04>
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	00db      	lsls	r3, r3, #3
 800cf78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	00db      	lsls	r3, r3, #3
 800cf88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cf90:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800cf94:	601a      	str	r2, [r3, #0]
 800cf96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d112      	bne.n	800cfc2 <USB_EPStartXfer+0xe7e>
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	00db      	lsls	r3, r3, #3
 800cfa2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfa6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	00db      	lsls	r3, r3, #3
 800cfb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfba:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cfbe:	601a      	str	r2, [r3, #0]
 800cfc0:	e06a      	b.n	800d098 <USB_EPStartXfer+0xf54>
 800cfc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfc4:	2b3e      	cmp	r3, #62	@ 0x3e
 800cfc6:	d81e      	bhi.n	800d006 <USB_EPStartXfer+0xec2>
 800cfc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfca:	085b      	lsrs	r3, r3, #1
 800cfcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cfce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cfd0:	f003 0301 	and.w	r3, r3, #1
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d002      	beq.n	800cfde <USB_EPStartXfer+0xe9a>
 800cfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfda:	3301      	adds	r3, #1
 800cfdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	00db      	lsls	r3, r3, #3
 800cfe4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cfe8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cfec:	6819      	ldr	r1, [r3, #0]
 800cfee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cff0:	069a      	lsls	r2, r3, #26
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	00db      	lsls	r3, r3, #3
 800cff8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cffc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d000:	430a      	orrs	r2, r1
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	e048      	b.n	800d098 <USB_EPStartXfer+0xf54>
 800d006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d008:	095b      	lsrs	r3, r3, #5
 800d00a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d00c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d00e:	f003 031f 	and.w	r3, r3, #31
 800d012:	2b00      	cmp	r3, #0
 800d014:	d102      	bne.n	800d01c <USB_EPStartXfer+0xed8>
 800d016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d018:	3b01      	subs	r3, #1
 800d01a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	00db      	lsls	r3, r3, #3
 800d022:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d026:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d02a:	681a      	ldr	r2, [r3, #0]
 800d02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d02e:	069b      	lsls	r3, r3, #26
 800d030:	431a      	orrs	r2, r3
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	00db      	lsls	r3, r3, #3
 800d038:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d03c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d040:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d044:	601a      	str	r2, [r3, #0]
 800d046:	e027      	b.n	800d098 <USB_EPStartXfer+0xf54>
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	785b      	ldrb	r3, [r3, #1]
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d123      	bne.n	800d098 <USB_EPStartXfer+0xf54>
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	00db      	lsls	r3, r3, #3
 800d056:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d05a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	683b      	ldr	r3, [r7, #0]
 800d062:	781b      	ldrb	r3, [r3, #0]
 800d064:	00db      	lsls	r3, r3, #3
 800d066:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d06a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d06e:	b292      	uxth	r2, r2
 800d070:	601a      	str	r2, [r3, #0]
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	781b      	ldrb	r3, [r3, #0]
 800d076:	00db      	lsls	r3, r3, #3
 800d078:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d07c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d080:	6819      	ldr	r1, [r3, #0]
 800d082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d084:	041a      	lsls	r2, r3, #16
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	00db      	lsls	r3, r3, #3
 800d08c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d090:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d094:	430a      	orrs	r2, r1
 800d096:	601a      	str	r2, [r3, #0]
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	785b      	ldrb	r3, [r3, #1]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d16d      	bne.n	800d17c <USB_EPStartXfer+0x1038>
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	00db      	lsls	r3, r3, #3
 800d0a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0ae:	685a      	ldr	r2, [r3, #4]
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	00db      	lsls	r3, r3, #3
 800d0b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0be:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d0c2:	605a      	str	r2, [r3, #4]
 800d0c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d112      	bne.n	800d0f0 <USB_EPStartXfer+0xfac>
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	00db      	lsls	r3, r3, #3
 800d0d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0d8:	685a      	ldr	r2, [r3, #4]
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	00db      	lsls	r3, r3, #3
 800d0e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d0e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d0e8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d0ec:	605a      	str	r2, [r3, #4]
 800d0ee:	e070      	b.n	800d1d2 <USB_EPStartXfer+0x108e>
 800d0f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0f2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d0f4:	d81e      	bhi.n	800d134 <USB_EPStartXfer+0xff0>
 800d0f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0f8:	085b      	lsrs	r3, r3, #1
 800d0fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d0fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d0fe:	f003 0301 	and.w	r3, r3, #1
 800d102:	2b00      	cmp	r3, #0
 800d104:	d002      	beq.n	800d10c <USB_EPStartXfer+0xfc8>
 800d106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d108:	3301      	adds	r3, #1
 800d10a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	00db      	lsls	r3, r3, #3
 800d112:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d116:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d11a:	6859      	ldr	r1, [r3, #4]
 800d11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d11e:	069a      	lsls	r2, r3, #26
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	781b      	ldrb	r3, [r3, #0]
 800d124:	00db      	lsls	r3, r3, #3
 800d126:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d12a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d12e:	430a      	orrs	r2, r1
 800d130:	605a      	str	r2, [r3, #4]
 800d132:	e04e      	b.n	800d1d2 <USB_EPStartXfer+0x108e>
 800d134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d136:	095b      	lsrs	r3, r3, #5
 800d138:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d13a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d13c:	f003 031f 	and.w	r3, r3, #31
 800d140:	2b00      	cmp	r3, #0
 800d142:	d102      	bne.n	800d14a <USB_EPStartXfer+0x1006>
 800d144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d146:	3b01      	subs	r3, #1
 800d148:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	00db      	lsls	r3, r3, #3
 800d150:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d154:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d158:	685a      	ldr	r2, [r3, #4]
 800d15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d15c:	069b      	lsls	r3, r3, #26
 800d15e:	431a      	orrs	r2, r3
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	00db      	lsls	r3, r3, #3
 800d166:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d16a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d16e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d172:	605a      	str	r2, [r3, #4]
 800d174:	e02d      	b.n	800d1d2 <USB_EPStartXfer+0x108e>
 800d176:	bf00      	nop
 800d178:	07ff8f8f 	.word	0x07ff8f8f
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	785b      	ldrb	r3, [r3, #1]
 800d180:	2b01      	cmp	r3, #1
 800d182:	d126      	bne.n	800d1d2 <USB_EPStartXfer+0x108e>
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	00db      	lsls	r3, r3, #3
 800d18a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d18e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d192:	685a      	ldr	r2, [r3, #4]
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	00db      	lsls	r3, r3, #3
 800d19a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d19e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1a2:	b292      	uxth	r2, r2
 800d1a4:	605a      	str	r2, [r3, #4]
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	00db      	lsls	r3, r3, #3
 800d1ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1b4:	6859      	ldr	r1, [r3, #4]
 800d1b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1b8:	041a      	lsls	r2, r3, #16
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	00db      	lsls	r3, r3, #3
 800d1c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d1c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d1c8:	430a      	orrs	r2, r1
 800d1ca:	605a      	str	r2, [r3, #4]
 800d1cc:	e001      	b.n	800d1d2 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e01c      	b.n	800d20c <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d1d2:	687a      	ldr	r2, [r7, #4]
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	4413      	add	r3, r2
 800d1dc:	681a      	ldr	r2, [r3, #0]
 800d1de:	4b0d      	ldr	r3, [pc, #52]	@ (800d214 <USB_EPStartXfer+0x10d0>)
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	61fb      	str	r3, [r7, #28]
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d1ea:	61fb      	str	r3, [r7, #28]
 800d1ec:	69fb      	ldr	r3, [r7, #28]
 800d1ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d1f2:	61fb      	str	r3, [r7, #28]
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	781b      	ldrb	r3, [r3, #0]
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	441a      	add	r2, r3
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d208:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d20a:	2300      	movs	r3, #0
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3758      	adds	r7, #88	@ 0x58
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	07ffbf8f 	.word	0x07ffbf8f

0800d218 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d218:	b480      	push	{r7}
 800d21a:	b085      	sub	sp, #20
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	785b      	ldrb	r3, [r3, #1]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d018      	beq.n	800d25c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d22a:	687a      	ldr	r2, [r7, #4]
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	781b      	ldrb	r3, [r3, #0]
 800d230:	009b      	lsls	r3, r3, #2
 800d232:	4413      	add	r3, r2
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	4b19      	ldr	r3, [pc, #100]	@ (800d29c <USB_EPSetStall+0x84>)
 800d238:	4013      	ands	r3, r2
 800d23a:	60bb      	str	r3, [r7, #8]
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	f083 0310 	eor.w	r3, r3, #16
 800d242:	60bb      	str	r3, [r7, #8]
 800d244:	687a      	ldr	r2, [r7, #4]
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	009b      	lsls	r3, r3, #2
 800d24c:	441a      	add	r2, r3
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d254:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d258:	6013      	str	r3, [r2, #0]
 800d25a:	e017      	b.n	800d28c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4413      	add	r3, r2
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	4b0d      	ldr	r3, [pc, #52]	@ (800d2a0 <USB_EPSetStall+0x88>)
 800d26a:	4013      	ands	r3, r2
 800d26c:	60fb      	str	r3, [r7, #12]
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d274:	60fb      	str	r3, [r7, #12]
 800d276:	687a      	ldr	r2, [r7, #4]
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	441a      	add	r2, r3
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d28a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d28c:	2300      	movs	r3, #0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3714      	adds	r7, #20
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr
 800d29a:	bf00      	nop
 800d29c:	07ff8fbf 	.word	0x07ff8fbf
 800d2a0:	07ffbf8f 	.word	0x07ffbf8f

0800d2a4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b089      	sub	sp, #36	@ 0x24
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	7b1b      	ldrb	r3, [r3, #12]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d17c      	bne.n	800d3b0 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800d2b6:	683b      	ldr	r3, [r7, #0]
 800d2b8:	785b      	ldrb	r3, [r3, #1]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d03c      	beq.n	800d338 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d2be:	687a      	ldr	r2, [r7, #4]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	781b      	ldrb	r3, [r3, #0]
 800d2c4:	009b      	lsls	r3, r3, #2
 800d2c6:	4413      	add	r3, r2
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	613b      	str	r3, [r7, #16]
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d013      	beq.n	800d2fe <USB_EPClearStall+0x5a>
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4413      	add	r3, r2
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	4b37      	ldr	r3, [pc, #220]	@ (800d3c0 <USB_EPClearStall+0x11c>)
 800d2e4:	4013      	ands	r3, r2
 800d2e6:	60fb      	str	r3, [r7, #12]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	441a      	add	r2, r3
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d2f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d2fc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	78db      	ldrb	r3, [r3, #3]
 800d302:	2b01      	cmp	r3, #1
 800d304:	d054      	beq.n	800d3b0 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4413      	add	r3, r2
 800d310:	681a      	ldr	r2, [r3, #0]
 800d312:	4b2c      	ldr	r3, [pc, #176]	@ (800d3c4 <USB_EPClearStall+0x120>)
 800d314:	4013      	ands	r3, r2
 800d316:	60bb      	str	r3, [r7, #8]
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	f083 0320 	eor.w	r3, r3, #32
 800d31e:	60bb      	str	r3, [r7, #8]
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	441a      	add	r2, r3
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d334:	6013      	str	r3, [r2, #0]
 800d336:	e03b      	b.n	800d3b0 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	4413      	add	r3, r2
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	61fb      	str	r3, [r7, #28]
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d013      	beq.n	800d378 <USB_EPClearStall+0xd4>
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	4413      	add	r3, r2
 800d35a:	681a      	ldr	r2, [r3, #0]
 800d35c:	4b18      	ldr	r3, [pc, #96]	@ (800d3c0 <USB_EPClearStall+0x11c>)
 800d35e:	4013      	ands	r3, r2
 800d360:	61bb      	str	r3, [r7, #24]
 800d362:	687a      	ldr	r2, [r7, #4]
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	009b      	lsls	r3, r3, #2
 800d36a:	441a      	add	r2, r3
 800d36c:	69bb      	ldr	r3, [r7, #24]
 800d36e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d372:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d376:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	781b      	ldrb	r3, [r3, #0]
 800d37e:	009b      	lsls	r3, r3, #2
 800d380:	4413      	add	r3, r2
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	4b10      	ldr	r3, [pc, #64]	@ (800d3c8 <USB_EPClearStall+0x124>)
 800d386:	4013      	ands	r3, r2
 800d388:	617b      	str	r3, [r7, #20]
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d390:	617b      	str	r3, [r7, #20]
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d398:	617b      	str	r3, [r7, #20]
 800d39a:	687a      	ldr	r2, [r7, #4]
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	441a      	add	r2, r3
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3ae:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3724      	adds	r7, #36	@ 0x24
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	07ff8f8f 	.word	0x07ff8f8f
 800d3c4:	07ff8fbf 	.word	0x07ff8fbf
 800d3c8:	07ffbf8f 	.word	0x07ffbf8f

0800d3cc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d3d8:	78fb      	ldrb	r3, [r7, #3]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d102      	bne.n	800d3e4 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2280      	movs	r2, #128	@ 0x80
 800d3e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d3e4:	2300      	movs	r3, #0
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	370c      	adds	r7, #12
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800d3f2:	b480      	push	{r7}
 800d3f4:	b083      	sub	sp, #12
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d3fe:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d406:	2300      	movs	r3, #0
}
 800d408:	4618      	mov	r0, r3
 800d40a:	370c      	adds	r7, #12
 800d40c:	46bd      	mov	sp, r7
 800d40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d412:	4770      	bx	lr

0800d414 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800d414:	b480      	push	{r7}
 800d416:	b083      	sub	sp, #12
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d420:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d428:	2300      	movs	r3, #0
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	370c      	adds	r7, #12
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr

0800d436 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800d436:	b480      	push	{r7}
 800d438:	b085      	sub	sp, #20
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d442:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d444:	68fb      	ldr	r3, [r7, #12]
}
 800d446:	4618      	mov	r0, r3
 800d448:	3714      	adds	r7, #20
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d452:	b480      	push	{r7}
 800d454:	b08b      	sub	sp, #44	@ 0x2c
 800d456:	af00      	add	r7, sp, #0
 800d458:	60f8      	str	r0, [r7, #12]
 800d45a:	60b9      	str	r1, [r7, #8]
 800d45c:	4611      	mov	r1, r2
 800d45e:	461a      	mov	r2, r3
 800d460:	460b      	mov	r3, r1
 800d462:	80fb      	strh	r3, [r7, #6]
 800d464:	4613      	mov	r3, r2
 800d466:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d468:	88bb      	ldrh	r3, [r7, #4]
 800d46a:	3303      	adds	r3, #3
 800d46c:	089b      	lsrs	r3, r3, #2
 800d46e:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d470:	88bb      	ldrh	r3, [r7, #4]
 800d472:	f003 0303 	and.w	r3, r3, #3
 800d476:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800d47c:	8afb      	ldrh	r3, [r7, #22]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d002      	beq.n	800d488 <USB_WritePMA+0x36>
  {
    NbWords--;
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	3b01      	subs	r3, #1
 800d486:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d488:	88fb      	ldrh	r3, [r7, #6]
 800d48a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d48e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d492:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	623b      	str	r3, [r7, #32]
 800d498:	e015      	b.n	800d4c6 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800d49a:	693b      	ldr	r3, [r7, #16]
 800d49c:	681a      	ldr	r2, [r3, #0]
 800d49e:	69fb      	ldr	r3, [r7, #28]
 800d4a0:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	3304      	adds	r3, #4
 800d4a6:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	3301      	adds	r3, #1
 800d4ac:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	3301      	adds	r3, #1
 800d4b2:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	3301      	adds	r3, #1
 800d4be:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800d4c0:	6a3b      	ldr	r3, [r7, #32]
 800d4c2:	3b01      	subs	r3, #1
 800d4c4:	623b      	str	r3, [r7, #32]
 800d4c6:	6a3b      	ldr	r3, [r7, #32]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d1e6      	bne.n	800d49a <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800d4cc:	8afb      	ldrh	r3, [r7, #22]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d01a      	beq.n	800d508 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	781b      	ldrb	r3, [r3, #0]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	6a3b      	ldr	r3, [r7, #32]
 800d4de:	00db      	lsls	r3, r3, #3
 800d4e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d4e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d4e6:	4313      	orrs	r3, r2
 800d4e8:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800d4ea:	6a3b      	ldr	r3, [r7, #32]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	623b      	str	r3, [r7, #32]
      pBuf++;
 800d4f0:	693b      	ldr	r3, [r7, #16]
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800d4f6:	8afb      	ldrh	r3, [r7, #22]
 800d4f8:	3b01      	subs	r3, #1
 800d4fa:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800d4fc:	8afb      	ldrh	r3, [r7, #22]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d1e9      	bne.n	800d4d6 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d506:	601a      	str	r2, [r3, #0]
  }
}
 800d508:	bf00      	nop
 800d50a:	372c      	adds	r7, #44	@ 0x2c
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d514:	b480      	push	{r7}
 800d516:	b08b      	sub	sp, #44	@ 0x2c
 800d518:	af00      	add	r7, sp, #0
 800d51a:	60f8      	str	r0, [r7, #12]
 800d51c:	60b9      	str	r1, [r7, #8]
 800d51e:	4611      	mov	r1, r2
 800d520:	461a      	mov	r2, r3
 800d522:	460b      	mov	r3, r1
 800d524:	80fb      	strh	r3, [r7, #6]
 800d526:	4613      	mov	r3, r2
 800d528:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d52a:	88bb      	ldrh	r3, [r7, #4]
 800d52c:	3303      	adds	r3, #3
 800d52e:	089b      	lsrs	r3, r3, #2
 800d530:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d532:	88bb      	ldrh	r3, [r7, #4]
 800d534:	f003 0303 	and.w	r3, r3, #3
 800d538:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800d53a:	68bb      	ldr	r3, [r7, #8]
 800d53c:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d53e:	88fb      	ldrh	r3, [r7, #6]
 800d540:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d544:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d548:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800d54a:	8b7b      	ldrh	r3, [r7, #26]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d002      	beq.n	800d556 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800d550:	69fb      	ldr	r3, [r7, #28]
 800d552:	3b01      	subs	r3, #1
 800d554:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	627b      	str	r3, [r7, #36]	@ 0x24
 800d55a:	e015      	b.n	800d588 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800d55c:	6a3b      	ldr	r3, [r7, #32]
 800d55e:	681a      	ldr	r2, [r3, #0]
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800d564:	6a3b      	ldr	r3, [r7, #32]
 800d566:	3304      	adds	r3, #4
 800d568:	623b      	str	r3, [r7, #32]
    pBuf++;
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	3301      	adds	r3, #1
 800d56e:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	3301      	adds	r3, #1
 800d574:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	3301      	adds	r3, #1
 800d57a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	3301      	adds	r3, #1
 800d580:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800d582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d584:	3b01      	subs	r3, #1
 800d586:	627b      	str	r3, [r7, #36]	@ 0x24
 800d588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1e6      	bne.n	800d55c <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800d58e:	8b7b      	ldrh	r3, [r7, #26]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d017      	beq.n	800d5c4 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800d594:	6a3b      	ldr	r3, [r7, #32]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800d59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d59c:	b2db      	uxtb	r3, r3
 800d59e:	00db      	lsls	r3, r3, #3
 800d5a0:	693a      	ldr	r2, [r7, #16]
 800d5a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d5a6:	b2da      	uxtb	r2, r3
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	701a      	strb	r2, [r3, #0]
      count++;
 800d5ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800d5b8:	8b7b      	ldrh	r3, [r7, #26]
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800d5be:	8b7b      	ldrh	r3, [r7, #26]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1ea      	bne.n	800d59a <USB_ReadPMA+0x86>
  }
}
 800d5c4:	bf00      	nop
 800d5c6:	372c      	adds	r7, #44	@ 0x2c
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d5dc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d5e0:	f000 ff7e 	bl	800e4e0 <USBD_static_malloc>
 800d5e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d109      	bne.n	800d600 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	32b0      	adds	r2, #176	@ 0xb0
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d5fc:	2302      	movs	r3, #2
 800d5fe:	e0d4      	b.n	800d7aa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d600:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800d604:	2100      	movs	r1, #0
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	f002 faeb 	bl	800fbe2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	32b0      	adds	r2, #176	@ 0xb0
 800d616:	68f9      	ldr	r1, [r7, #12]
 800d618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	32b0      	adds	r2, #176	@ 0xb0
 800d626:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	7c1b      	ldrb	r3, [r3, #16]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d138      	bne.n	800d6aa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d638:	4b5e      	ldr	r3, [pc, #376]	@ (800d7b4 <USBD_CDC_Init+0x1e4>)
 800d63a:	7819      	ldrb	r1, [r3, #0]
 800d63c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d640:	2202      	movs	r2, #2
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 fe53 	bl	800e2ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d648:	4b5a      	ldr	r3, [pc, #360]	@ (800d7b4 <USBD_CDC_Init+0x1e4>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	f003 020f 	and.w	r2, r3, #15
 800d650:	6879      	ldr	r1, [r7, #4]
 800d652:	4613      	mov	r3, r2
 800d654:	009b      	lsls	r3, r3, #2
 800d656:	4413      	add	r3, r2
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	440b      	add	r3, r1
 800d65c:	3324      	adds	r3, #36	@ 0x24
 800d65e:	2201      	movs	r2, #1
 800d660:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d662:	4b55      	ldr	r3, [pc, #340]	@ (800d7b8 <USBD_CDC_Init+0x1e8>)
 800d664:	7819      	ldrb	r1, [r3, #0]
 800d666:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d66a:	2202      	movs	r2, #2
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 fe3e 	bl	800e2ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d672:	4b51      	ldr	r3, [pc, #324]	@ (800d7b8 <USBD_CDC_Init+0x1e8>)
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	f003 020f 	and.w	r2, r3, #15
 800d67a:	6879      	ldr	r1, [r7, #4]
 800d67c:	4613      	mov	r3, r2
 800d67e:	009b      	lsls	r3, r3, #2
 800d680:	4413      	add	r3, r2
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	440b      	add	r3, r1
 800d686:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d68a:	2201      	movs	r2, #1
 800d68c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d68e:	4b4b      	ldr	r3, [pc, #300]	@ (800d7bc <USBD_CDC_Init+0x1ec>)
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	f003 020f 	and.w	r2, r3, #15
 800d696:	6879      	ldr	r1, [r7, #4]
 800d698:	4613      	mov	r3, r2
 800d69a:	009b      	lsls	r3, r3, #2
 800d69c:	4413      	add	r3, r2
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	440b      	add	r3, r1
 800d6a2:	3326      	adds	r3, #38	@ 0x26
 800d6a4:	2210      	movs	r2, #16
 800d6a6:	801a      	strh	r2, [r3, #0]
 800d6a8:	e035      	b.n	800d716 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d6aa:	4b42      	ldr	r3, [pc, #264]	@ (800d7b4 <USBD_CDC_Init+0x1e4>)
 800d6ac:	7819      	ldrb	r1, [r3, #0]
 800d6ae:	2340      	movs	r3, #64	@ 0x40
 800d6b0:	2202      	movs	r2, #2
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 fe1b 	bl	800e2ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d6b8:	4b3e      	ldr	r3, [pc, #248]	@ (800d7b4 <USBD_CDC_Init+0x1e4>)
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	f003 020f 	and.w	r2, r3, #15
 800d6c0:	6879      	ldr	r1, [r7, #4]
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	009b      	lsls	r3, r3, #2
 800d6c6:	4413      	add	r3, r2
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	440b      	add	r3, r1
 800d6cc:	3324      	adds	r3, #36	@ 0x24
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d6d2:	4b39      	ldr	r3, [pc, #228]	@ (800d7b8 <USBD_CDC_Init+0x1e8>)
 800d6d4:	7819      	ldrb	r1, [r3, #0]
 800d6d6:	2340      	movs	r3, #64	@ 0x40
 800d6d8:	2202      	movs	r2, #2
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 fe07 	bl	800e2ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d6e0:	4b35      	ldr	r3, [pc, #212]	@ (800d7b8 <USBD_CDC_Init+0x1e8>)
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	f003 020f 	and.w	r2, r3, #15
 800d6e8:	6879      	ldr	r1, [r7, #4]
 800d6ea:	4613      	mov	r3, r2
 800d6ec:	009b      	lsls	r3, r3, #2
 800d6ee:	4413      	add	r3, r2
 800d6f0:	009b      	lsls	r3, r3, #2
 800d6f2:	440b      	add	r3, r1
 800d6f4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d6fc:	4b2f      	ldr	r3, [pc, #188]	@ (800d7bc <USBD_CDC_Init+0x1ec>)
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	f003 020f 	and.w	r2, r3, #15
 800d704:	6879      	ldr	r1, [r7, #4]
 800d706:	4613      	mov	r3, r2
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4413      	add	r3, r2
 800d70c:	009b      	lsls	r3, r3, #2
 800d70e:	440b      	add	r3, r1
 800d710:	3326      	adds	r3, #38	@ 0x26
 800d712:	2210      	movs	r2, #16
 800d714:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d716:	4b29      	ldr	r3, [pc, #164]	@ (800d7bc <USBD_CDC_Init+0x1ec>)
 800d718:	7819      	ldrb	r1, [r3, #0]
 800d71a:	2308      	movs	r3, #8
 800d71c:	2203      	movs	r2, #3
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 fde5 	bl	800e2ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d724:	4b25      	ldr	r3, [pc, #148]	@ (800d7bc <USBD_CDC_Init+0x1ec>)
 800d726:	781b      	ldrb	r3, [r3, #0]
 800d728:	f003 020f 	and.w	r2, r3, #15
 800d72c:	6879      	ldr	r1, [r7, #4]
 800d72e:	4613      	mov	r3, r2
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	4413      	add	r3, r2
 800d734:	009b      	lsls	r3, r3, #2
 800d736:	440b      	add	r3, r1
 800d738:	3324      	adds	r3, #36	@ 0x24
 800d73a:	2201      	movs	r2, #1
 800d73c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2200      	movs	r2, #0
 800d742:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d74c:	687a      	ldr	r2, [r7, #4]
 800d74e:	33b0      	adds	r3, #176	@ 0xb0
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	4413      	add	r3, r2
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2200      	movs	r2, #0
 800d75e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	2200      	movs	r2, #0
 800d766:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800d770:	2b00      	cmp	r3, #0
 800d772:	d101      	bne.n	800d778 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800d774:	2302      	movs	r3, #2
 800d776:	e018      	b.n	800d7aa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	7c1b      	ldrb	r3, [r3, #16]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10a      	bne.n	800d796 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d780:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b8 <USBD_CDC_Init+0x1e8>)
 800d782:	7819      	ldrb	r1, [r3, #0]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d78a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 fe78 	bl	800e484 <USBD_LL_PrepareReceive>
 800d794:	e008      	b.n	800d7a8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d796:	4b08      	ldr	r3, [pc, #32]	@ (800d7b8 <USBD_CDC_Init+0x1e8>)
 800d798:	7819      	ldrb	r1, [r3, #0]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d7a0:	2340      	movs	r3, #64	@ 0x40
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fe6e 	bl	800e484 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d7a8:	2300      	movs	r3, #0
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3710      	adds	r7, #16
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}
 800d7b2:	bf00      	nop
 800d7b4:	200000b3 	.word	0x200000b3
 800d7b8:	200000b4 	.word	0x200000b4
 800d7bc:	200000b5 	.word	0x200000b5

0800d7c0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b082      	sub	sp, #8
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	460b      	mov	r3, r1
 800d7ca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d7cc:	4b3a      	ldr	r3, [pc, #232]	@ (800d8b8 <USBD_CDC_DeInit+0xf8>)
 800d7ce:	781b      	ldrb	r3, [r3, #0]
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f000 fdab 	bl	800e32e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d7d8:	4b37      	ldr	r3, [pc, #220]	@ (800d8b8 <USBD_CDC_DeInit+0xf8>)
 800d7da:	781b      	ldrb	r3, [r3, #0]
 800d7dc:	f003 020f 	and.w	r2, r3, #15
 800d7e0:	6879      	ldr	r1, [r7, #4]
 800d7e2:	4613      	mov	r3, r2
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	4413      	add	r3, r2
 800d7e8:	009b      	lsls	r3, r3, #2
 800d7ea:	440b      	add	r3, r1
 800d7ec:	3324      	adds	r3, #36	@ 0x24
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d7f2:	4b32      	ldr	r3, [pc, #200]	@ (800d8bc <USBD_CDC_DeInit+0xfc>)
 800d7f4:	781b      	ldrb	r3, [r3, #0]
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 fd98 	bl	800e32e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d7fe:	4b2f      	ldr	r3, [pc, #188]	@ (800d8bc <USBD_CDC_DeInit+0xfc>)
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	f003 020f 	and.w	r2, r3, #15
 800d806:	6879      	ldr	r1, [r7, #4]
 800d808:	4613      	mov	r3, r2
 800d80a:	009b      	lsls	r3, r3, #2
 800d80c:	4413      	add	r3, r2
 800d80e:	009b      	lsls	r3, r3, #2
 800d810:	440b      	add	r3, r1
 800d812:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d816:	2200      	movs	r2, #0
 800d818:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d81a:	4b29      	ldr	r3, [pc, #164]	@ (800d8c0 <USBD_CDC_DeInit+0x100>)
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	4619      	mov	r1, r3
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 fd84 	bl	800e32e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d826:	4b26      	ldr	r3, [pc, #152]	@ (800d8c0 <USBD_CDC_DeInit+0x100>)
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	f003 020f 	and.w	r2, r3, #15
 800d82e:	6879      	ldr	r1, [r7, #4]
 800d830:	4613      	mov	r3, r2
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	4413      	add	r3, r2
 800d836:	009b      	lsls	r3, r3, #2
 800d838:	440b      	add	r3, r1
 800d83a:	3324      	adds	r3, #36	@ 0x24
 800d83c:	2200      	movs	r2, #0
 800d83e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d840:	4b1f      	ldr	r3, [pc, #124]	@ (800d8c0 <USBD_CDC_DeInit+0x100>)
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	f003 020f 	and.w	r2, r3, #15
 800d848:	6879      	ldr	r1, [r7, #4]
 800d84a:	4613      	mov	r3, r2
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4413      	add	r3, r2
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	440b      	add	r3, r1
 800d854:	3326      	adds	r3, #38	@ 0x26
 800d856:	2200      	movs	r2, #0
 800d858:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	32b0      	adds	r2, #176	@ 0xb0
 800d864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d01f      	beq.n	800d8ac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	33b0      	adds	r3, #176	@ 0xb0
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	4413      	add	r3, r2
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	32b0      	adds	r2, #176	@ 0xb0
 800d88a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 fe34 	bl	800e4fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	32b0      	adds	r2, #176	@ 0xb0
 800d89e:	2100      	movs	r1, #0
 800d8a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d8ac:	2300      	movs	r3, #0
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3708      	adds	r7, #8
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	200000b3 	.word	0x200000b3
 800d8bc:	200000b4 	.word	0x200000b4
 800d8c0:	200000b5 	.word	0x200000b5

0800d8c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b086      	sub	sp, #24
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	32b0      	adds	r2, #176	@ 0xb0
 800d8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d101      	bne.n	800d8f4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d8f0:	2303      	movs	r3, #3
 800d8f2:	e0bf      	b.n	800da74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	781b      	ldrb	r3, [r3, #0]
 800d8f8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d050      	beq.n	800d9a2 <USBD_CDC_Setup+0xde>
 800d900:	2b20      	cmp	r3, #32
 800d902:	f040 80af 	bne.w	800da64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d906:	683b      	ldr	r3, [r7, #0]
 800d908:	88db      	ldrh	r3, [r3, #6]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d03a      	beq.n	800d984 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	b25b      	sxtb	r3, r3
 800d914:	2b00      	cmp	r3, #0
 800d916:	da1b      	bge.n	800d950 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d91e:	687a      	ldr	r2, [r7, #4]
 800d920:	33b0      	adds	r3, #176	@ 0xb0
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	4413      	add	r3, r2
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	689b      	ldr	r3, [r3, #8]
 800d92a:	683a      	ldr	r2, [r7, #0]
 800d92c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d92e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d930:	683a      	ldr	r2, [r7, #0]
 800d932:	88d2      	ldrh	r2, [r2, #6]
 800d934:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	88db      	ldrh	r3, [r3, #6]
 800d93a:	2b07      	cmp	r3, #7
 800d93c:	bf28      	it	cs
 800d93e:	2307      	movcs	r3, #7
 800d940:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	89fa      	ldrh	r2, [r7, #14]
 800d946:	4619      	mov	r1, r3
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f002 f8ca 	bl	800fae2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d94e:	e090      	b.n	800da72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	785a      	ldrb	r2, [r3, #1]
 800d954:	693b      	ldr	r3, [r7, #16]
 800d956:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	88db      	ldrh	r3, [r3, #6]
 800d95e:	2b3f      	cmp	r3, #63	@ 0x3f
 800d960:	d803      	bhi.n	800d96a <USBD_CDC_Setup+0xa6>
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	88db      	ldrh	r3, [r3, #6]
 800d966:	b2da      	uxtb	r2, r3
 800d968:	e000      	b.n	800d96c <USBD_CDC_Setup+0xa8>
 800d96a:	2240      	movs	r2, #64	@ 0x40
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d972:	6939      	ldr	r1, [r7, #16]
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800d97a:	461a      	mov	r2, r3
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f002 f8dc 	bl	800fb3a <USBD_CtlPrepareRx>
      break;
 800d982:	e076      	b.n	800da72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	33b0      	adds	r3, #176	@ 0xb0
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	4413      	add	r3, r2
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	689b      	ldr	r3, [r3, #8]
 800d996:	683a      	ldr	r2, [r7, #0]
 800d998:	7850      	ldrb	r0, [r2, #1]
 800d99a:	2200      	movs	r2, #0
 800d99c:	6839      	ldr	r1, [r7, #0]
 800d99e:	4798      	blx	r3
      break;
 800d9a0:	e067      	b.n	800da72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	785b      	ldrb	r3, [r3, #1]
 800d9a6:	2b0b      	cmp	r3, #11
 800d9a8:	d851      	bhi.n	800da4e <USBD_CDC_Setup+0x18a>
 800d9aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d9b0 <USBD_CDC_Setup+0xec>)
 800d9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9b0:	0800d9e1 	.word	0x0800d9e1
 800d9b4:	0800da5d 	.word	0x0800da5d
 800d9b8:	0800da4f 	.word	0x0800da4f
 800d9bc:	0800da4f 	.word	0x0800da4f
 800d9c0:	0800da4f 	.word	0x0800da4f
 800d9c4:	0800da4f 	.word	0x0800da4f
 800d9c8:	0800da4f 	.word	0x0800da4f
 800d9cc:	0800da4f 	.word	0x0800da4f
 800d9d0:	0800da4f 	.word	0x0800da4f
 800d9d4:	0800da4f 	.word	0x0800da4f
 800d9d8:	0800da0b 	.word	0x0800da0b
 800d9dc:	0800da35 	.word	0x0800da35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9e6:	b2db      	uxtb	r3, r3
 800d9e8:	2b03      	cmp	r3, #3
 800d9ea:	d107      	bne.n	800d9fc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d9ec:	f107 030a 	add.w	r3, r7, #10
 800d9f0:	2202      	movs	r2, #2
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f002 f874 	bl	800fae2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d9fa:	e032      	b.n	800da62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f001 fef1 	bl	800f7e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800da04:	2303      	movs	r3, #3
 800da06:	75fb      	strb	r3, [r7, #23]
          break;
 800da08:	e02b      	b.n	800da62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da10:	b2db      	uxtb	r3, r3
 800da12:	2b03      	cmp	r3, #3
 800da14:	d107      	bne.n	800da26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800da16:	f107 030d 	add.w	r3, r7, #13
 800da1a:	2201      	movs	r2, #1
 800da1c:	4619      	mov	r1, r3
 800da1e:	6878      	ldr	r0, [r7, #4]
 800da20:	f002 f85f 	bl	800fae2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800da24:	e01d      	b.n	800da62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800da26:	6839      	ldr	r1, [r7, #0]
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f001 fedc 	bl	800f7e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800da2e:	2303      	movs	r3, #3
 800da30:	75fb      	strb	r3, [r7, #23]
          break;
 800da32:	e016      	b.n	800da62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	2b03      	cmp	r3, #3
 800da3e:	d00f      	beq.n	800da60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800da40:	6839      	ldr	r1, [r7, #0]
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f001 fecf 	bl	800f7e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800da48:	2303      	movs	r3, #3
 800da4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800da4c:	e008      	b.n	800da60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800da4e:	6839      	ldr	r1, [r7, #0]
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f001 fec8 	bl	800f7e6 <USBD_CtlError>
          ret = USBD_FAIL;
 800da56:	2303      	movs	r3, #3
 800da58:	75fb      	strb	r3, [r7, #23]
          break;
 800da5a:	e002      	b.n	800da62 <USBD_CDC_Setup+0x19e>
          break;
 800da5c:	bf00      	nop
 800da5e:	e008      	b.n	800da72 <USBD_CDC_Setup+0x1ae>
          break;
 800da60:	bf00      	nop
      }
      break;
 800da62:	e006      	b.n	800da72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800da64:	6839      	ldr	r1, [r7, #0]
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f001 febd 	bl	800f7e6 <USBD_CtlError>
      ret = USBD_FAIL;
 800da6c:	2303      	movs	r3, #3
 800da6e:	75fb      	strb	r3, [r7, #23]
      break;
 800da70:	bf00      	nop
  }

  return (uint8_t)ret;
 800da72:	7dfb      	ldrb	r3, [r7, #23]
}
 800da74:	4618      	mov	r0, r3
 800da76:	3718      	adds	r7, #24
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	460b      	mov	r3, r1
 800da86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	32b0      	adds	r2, #176	@ 0xb0
 800da9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d101      	bne.n	800daa6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800daa2:	2303      	movs	r3, #3
 800daa4:	e065      	b.n	800db72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	32b0      	adds	r2, #176	@ 0xb0
 800dab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dab4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dab6:	78fb      	ldrb	r3, [r7, #3]
 800dab8:	f003 020f 	and.w	r2, r3, #15
 800dabc:	6879      	ldr	r1, [r7, #4]
 800dabe:	4613      	mov	r3, r2
 800dac0:	009b      	lsls	r3, r3, #2
 800dac2:	4413      	add	r3, r2
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	440b      	add	r3, r1
 800dac8:	3318      	adds	r3, #24
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d02f      	beq.n	800db30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800dad0:	78fb      	ldrb	r3, [r7, #3]
 800dad2:	f003 020f 	and.w	r2, r3, #15
 800dad6:	6879      	ldr	r1, [r7, #4]
 800dad8:	4613      	mov	r3, r2
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	4413      	add	r3, r2
 800dade:	009b      	lsls	r3, r3, #2
 800dae0:	440b      	add	r3, r1
 800dae2:	3318      	adds	r3, #24
 800dae4:	681a      	ldr	r2, [r3, #0]
 800dae6:	78fb      	ldrb	r3, [r7, #3]
 800dae8:	f003 010f 	and.w	r1, r3, #15
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	460b      	mov	r3, r1
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	440b      	add	r3, r1
 800daf4:	00db      	lsls	r3, r3, #3
 800daf6:	4403      	add	r3, r0
 800daf8:	3324      	adds	r3, #36	@ 0x24
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	fbb2 f1f3 	udiv	r1, r2, r3
 800db00:	fb01 f303 	mul.w	r3, r1, r3
 800db04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800db06:	2b00      	cmp	r3, #0
 800db08:	d112      	bne.n	800db30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800db0a:	78fb      	ldrb	r3, [r7, #3]
 800db0c:	f003 020f 	and.w	r2, r3, #15
 800db10:	6879      	ldr	r1, [r7, #4]
 800db12:	4613      	mov	r3, r2
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	4413      	add	r3, r2
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	440b      	add	r3, r1
 800db1c:	3318      	adds	r3, #24
 800db1e:	2200      	movs	r2, #0
 800db20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800db22:	78f9      	ldrb	r1, [r7, #3]
 800db24:	2300      	movs	r3, #0
 800db26:	2200      	movs	r2, #0
 800db28:	6878      	ldr	r0, [r7, #4]
 800db2a:	f000 fc90 	bl	800e44e <USBD_LL_Transmit>
 800db2e:	e01f      	b.n	800db70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	2200      	movs	r2, #0
 800db34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	33b0      	adds	r3, #176	@ 0xb0
 800db42:	009b      	lsls	r3, r3, #2
 800db44:	4413      	add	r3, r2
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	691b      	ldr	r3, [r3, #16]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d010      	beq.n	800db70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	33b0      	adds	r3, #176	@ 0xb0
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	4413      	add	r3, r2
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	691b      	ldr	r3, [r3, #16]
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800db66:	68ba      	ldr	r2, [r7, #8]
 800db68:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800db6c:	78fa      	ldrb	r2, [r7, #3]
 800db6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800db70:	2300      	movs	r3, #0
}
 800db72:	4618      	mov	r0, r3
 800db74:	3710      	adds	r7, #16
 800db76:	46bd      	mov	sp, r7
 800db78:	bd80      	pop	{r7, pc}

0800db7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b084      	sub	sp, #16
 800db7e:	af00      	add	r7, sp, #0
 800db80:	6078      	str	r0, [r7, #4]
 800db82:	460b      	mov	r3, r1
 800db84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	32b0      	adds	r2, #176	@ 0xb0
 800db90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	32b0      	adds	r2, #176	@ 0xb0
 800dba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800dba8:	2303      	movs	r3, #3
 800dbaa:	e01a      	b.n	800dbe2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dbac:	78fb      	ldrb	r3, [r7, #3]
 800dbae:	4619      	mov	r1, r3
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f000 fc82 	bl	800e4ba <USBD_LL_GetRxDataSize>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	33b0      	adds	r3, #176	@ 0xb0
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	4413      	add	r3, r2
 800dbcc:	685b      	ldr	r3, [r3, #4]
 800dbce:	68db      	ldr	r3, [r3, #12]
 800dbd0:	68fa      	ldr	r2, [r7, #12]
 800dbd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800dbdc:	4611      	mov	r1, r2
 800dbde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dbe0:	2300      	movs	r3, #0
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}

0800dbea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dbea:	b580      	push	{r7, lr}
 800dbec:	b084      	sub	sp, #16
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	32b0      	adds	r2, #176	@ 0xb0
 800dbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc00:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d101      	bne.n	800dc0c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800dc08:	2303      	movs	r3, #3
 800dc0a:	e024      	b.n	800dc56 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	33b0      	adds	r3, #176	@ 0xb0
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	4413      	add	r3, r2
 800dc1a:	685b      	ldr	r3, [r3, #4]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d019      	beq.n	800dc54 <USBD_CDC_EP0_RxReady+0x6a>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800dc26:	2bff      	cmp	r3, #255	@ 0xff
 800dc28:	d014      	beq.n	800dc54 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	33b0      	adds	r3, #176	@ 0xb0
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	4413      	add	r3, r2
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	689b      	ldr	r3, [r3, #8]
 800dc3c:	68fa      	ldr	r2, [r7, #12]
 800dc3e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800dc42:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800dc44:	68fa      	ldr	r2, [r7, #12]
 800dc46:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800dc4a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	22ff      	movs	r2, #255	@ 0xff
 800dc50:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
	...

0800dc60 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b086      	sub	sp, #24
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dc68:	2182      	movs	r1, #130	@ 0x82
 800dc6a:	4818      	ldr	r0, [pc, #96]	@ (800dccc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dc6c:	f000 ff85 	bl	800eb7a <USBD_GetEpDesc>
 800dc70:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dc72:	2101      	movs	r1, #1
 800dc74:	4815      	ldr	r0, [pc, #84]	@ (800dccc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dc76:	f000 ff80 	bl	800eb7a <USBD_GetEpDesc>
 800dc7a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dc7c:	2181      	movs	r1, #129	@ 0x81
 800dc7e:	4813      	ldr	r0, [pc, #76]	@ (800dccc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800dc80:	f000 ff7b 	bl	800eb7a <USBD_GetEpDesc>
 800dc84:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d002      	beq.n	800dc92 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	2210      	movs	r2, #16
 800dc90:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dc92:	693b      	ldr	r3, [r7, #16]
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d006      	beq.n	800dca6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dc98:	693b      	ldr	r3, [r7, #16]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dca0:	711a      	strb	r2, [r3, #4]
 800dca2:	2200      	movs	r2, #0
 800dca4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d006      	beq.n	800dcba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	2200      	movs	r2, #0
 800dcb0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dcb4:	711a      	strb	r2, [r3, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2243      	movs	r2, #67	@ 0x43
 800dcbe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dcc0:	4b02      	ldr	r3, [pc, #8]	@ (800dccc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3718      	adds	r7, #24
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	20000070 	.word	0x20000070

0800dcd0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b086      	sub	sp, #24
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dcd8:	2182      	movs	r1, #130	@ 0x82
 800dcda:	4818      	ldr	r0, [pc, #96]	@ (800dd3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dcdc:	f000 ff4d 	bl	800eb7a <USBD_GetEpDesc>
 800dce0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dce2:	2101      	movs	r1, #1
 800dce4:	4815      	ldr	r0, [pc, #84]	@ (800dd3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dce6:	f000 ff48 	bl	800eb7a <USBD_GetEpDesc>
 800dcea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dcec:	2181      	movs	r1, #129	@ 0x81
 800dcee:	4813      	ldr	r0, [pc, #76]	@ (800dd3c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800dcf0:	f000 ff43 	bl	800eb7a <USBD_GetEpDesc>
 800dcf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d002      	beq.n	800dd02 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	2210      	movs	r2, #16
 800dd00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d006      	beq.n	800dd16 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dd08:	693b      	ldr	r3, [r7, #16]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	711a      	strb	r2, [r3, #4]
 800dd0e:	2200      	movs	r2, #0
 800dd10:	f042 0202 	orr.w	r2, r2, #2
 800dd14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d006      	beq.n	800dd2a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	711a      	strb	r2, [r3, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f042 0202 	orr.w	r2, r2, #2
 800dd28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2243      	movs	r2, #67	@ 0x43
 800dd2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dd30:	4b02      	ldr	r3, [pc, #8]	@ (800dd3c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3718      	adds	r7, #24
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	20000070 	.word	0x20000070

0800dd40 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b086      	sub	sp, #24
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800dd48:	2182      	movs	r1, #130	@ 0x82
 800dd4a:	4818      	ldr	r0, [pc, #96]	@ (800ddac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dd4c:	f000 ff15 	bl	800eb7a <USBD_GetEpDesc>
 800dd50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800dd52:	2101      	movs	r1, #1
 800dd54:	4815      	ldr	r0, [pc, #84]	@ (800ddac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dd56:	f000 ff10 	bl	800eb7a <USBD_GetEpDesc>
 800dd5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800dd5c:	2181      	movs	r1, #129	@ 0x81
 800dd5e:	4813      	ldr	r0, [pc, #76]	@ (800ddac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800dd60:	f000 ff0b 	bl	800eb7a <USBD_GetEpDesc>
 800dd64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d002      	beq.n	800dd72 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800dd6c:	697b      	ldr	r3, [r7, #20]
 800dd6e:	2210      	movs	r2, #16
 800dd70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d006      	beq.n	800dd86 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	2200      	movs	r2, #0
 800dd7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd80:	711a      	strb	r2, [r3, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d006      	beq.n	800dd9a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd94:	711a      	strb	r2, [r3, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2243      	movs	r2, #67	@ 0x43
 800dd9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800dda0:	4b02      	ldr	r3, [pc, #8]	@ (800ddac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3718      	adds	r7, #24
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	20000070 	.word	0x20000070

0800ddb0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b083      	sub	sp, #12
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	220a      	movs	r2, #10
 800ddbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ddbe:	4b03      	ldr	r3, [pc, #12]	@ (800ddcc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr
 800ddcc:	2000002c 	.word	0x2000002c

0800ddd0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
 800ddd8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d101      	bne.n	800dde4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dde0:	2303      	movs	r3, #3
 800dde2:	e009      	b.n	800ddf8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ddea:	687a      	ldr	r2, [r7, #4]
 800ddec:	33b0      	adds	r3, #176	@ 0xb0
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	4413      	add	r3, r2
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800de04:	b480      	push	{r7}
 800de06:	b087      	sub	sp, #28
 800de08:	af00      	add	r7, sp, #0
 800de0a:	60f8      	str	r0, [r7, #12]
 800de0c:	60b9      	str	r1, [r7, #8]
 800de0e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	32b0      	adds	r2, #176	@ 0xb0
 800de1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de1e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d101      	bne.n	800de2a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800de26:	2303      	movs	r3, #3
 800de28:	e008      	b.n	800de3c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	68ba      	ldr	r2, [r7, #8]
 800de2e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	687a      	ldr	r2, [r7, #4]
 800de36:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800de3a:	2300      	movs	r3, #0
}
 800de3c:	4618      	mov	r0, r3
 800de3e:	371c      	adds	r7, #28
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800de48:	b480      	push	{r7}
 800de4a:	b085      	sub	sp, #20
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	32b0      	adds	r2, #176	@ 0xb0
 800de5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d101      	bne.n	800de6c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800de68:	2303      	movs	r3, #3
 800de6a:	e004      	b.n	800de76 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	683a      	ldr	r2, [r7, #0]
 800de70:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3714      	adds	r7, #20
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr
	...

0800de84 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	32b0      	adds	r2, #176	@ 0xb0
 800de96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de9a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800de9c:	2301      	movs	r3, #1
 800de9e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d101      	bne.n	800deaa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800dea6:	2303      	movs	r3, #3
 800dea8:	e025      	b.n	800def6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d11f      	bne.n	800def4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800deb4:	68bb      	ldr	r3, [r7, #8]
 800deb6:	2201      	movs	r2, #1
 800deb8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800debc:	4b10      	ldr	r3, [pc, #64]	@ (800df00 <USBD_CDC_TransmitPacket+0x7c>)
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	f003 020f 	and.w	r2, r3, #15
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	4613      	mov	r3, r2
 800dece:	009b      	lsls	r3, r3, #2
 800ded0:	4413      	add	r3, r2
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	4403      	add	r3, r0
 800ded6:	3318      	adds	r3, #24
 800ded8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800deda:	4b09      	ldr	r3, [pc, #36]	@ (800df00 <USBD_CDC_TransmitPacket+0x7c>)
 800dedc:	7819      	ldrb	r1, [r3, #0]
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 faaf 	bl	800e44e <USBD_LL_Transmit>

    ret = USBD_OK;
 800def0:	2300      	movs	r3, #0
 800def2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800def4:	7bfb      	ldrb	r3, [r7, #15]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	200000b3 	.word	0x200000b3

0800df04 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b084      	sub	sp, #16
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	32b0      	adds	r2, #176	@ 0xb0
 800df16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df1a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	32b0      	adds	r2, #176	@ 0xb0
 800df26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d101      	bne.n	800df32 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800df2e:	2303      	movs	r3, #3
 800df30:	e018      	b.n	800df64 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	7c1b      	ldrb	r3, [r3, #16]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d10a      	bne.n	800df50 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800df3a:	4b0c      	ldr	r3, [pc, #48]	@ (800df6c <USBD_CDC_ReceivePacket+0x68>)
 800df3c:	7819      	ldrb	r1, [r3, #0]
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800df44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 fa9b 	bl	800e484 <USBD_LL_PrepareReceive>
 800df4e:	e008      	b.n	800df62 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800df50:	4b06      	ldr	r3, [pc, #24]	@ (800df6c <USBD_CDC_ReceivePacket+0x68>)
 800df52:	7819      	ldrb	r1, [r3, #0]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800df5a:	2340      	movs	r3, #64	@ 0x40
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f000 fa91 	bl	800e484 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df62:	2300      	movs	r3, #0
}
 800df64:	4618      	mov	r0, r3
 800df66:	3710      	adds	r7, #16
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	200000b4 	.word	0x200000b4

0800df70 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800df74:	2200      	movs	r2, #0
 800df76:	4905      	ldr	r1, [pc, #20]	@ (800df8c <TEMPLATE_Init+0x1c>)
 800df78:	4805      	ldr	r0, [pc, #20]	@ (800df90 <TEMPLATE_Init+0x20>)
 800df7a:	f7ff ff43 	bl	800de04 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800df7e:	4905      	ldr	r1, [pc, #20]	@ (800df94 <TEMPLATE_Init+0x24>)
 800df80:	4803      	ldr	r0, [pc, #12]	@ (800df90 <TEMPLATE_Init+0x20>)
 800df82:	f7ff ff61 	bl	800de48 <USBD_CDC_SetRxBuffer>
      return (0);
 800df86:	2300      	movs	r3, #0
}
 800df88:	4618      	mov	r0, r3
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	20000c44 	.word	0x20000c44
 800df90:	200006c4 	.word	0x200006c4
 800df94:	20000a44 	.word	0x20000a44

0800df98 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800df98:	b480      	push	{r7}
 800df9a:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800df9c:	2300      	movs	r3, #0
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa6:	4770      	bx	lr

0800dfa8 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b083      	sub	sp, #12
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	4603      	mov	r3, r0
 800dfb0:	6039      	str	r1, [r7, #0]
 800dfb2:	71fb      	strb	r3, [r7, #7]
 800dfb4:	4613      	mov	r3, r2
 800dfb6:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800dfb8:	79fb      	ldrb	r3, [r7, #7]
 800dfba:	2b23      	cmp	r3, #35	@ 0x23
 800dfbc:	f200 8098 	bhi.w	800e0f0 <TEMPLATE_Control+0x148>
 800dfc0:	a201      	add	r2, pc, #4	@ (adr r2, 800dfc8 <TEMPLATE_Control+0x20>)
 800dfc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc6:	bf00      	nop
 800dfc8:	0800e0f1 	.word	0x0800e0f1
 800dfcc:	0800e0f1 	.word	0x0800e0f1
 800dfd0:	0800e0f1 	.word	0x0800e0f1
 800dfd4:	0800e0f1 	.word	0x0800e0f1
 800dfd8:	0800e0f1 	.word	0x0800e0f1
 800dfdc:	0800e0f1 	.word	0x0800e0f1
 800dfe0:	0800e0f1 	.word	0x0800e0f1
 800dfe4:	0800e0f1 	.word	0x0800e0f1
 800dfe8:	0800e0f1 	.word	0x0800e0f1
 800dfec:	0800e0f1 	.word	0x0800e0f1
 800dff0:	0800e0f1 	.word	0x0800e0f1
 800dff4:	0800e0f1 	.word	0x0800e0f1
 800dff8:	0800e0f1 	.word	0x0800e0f1
 800dffc:	0800e0f1 	.word	0x0800e0f1
 800e000:	0800e0f1 	.word	0x0800e0f1
 800e004:	0800e0f1 	.word	0x0800e0f1
 800e008:	0800e0f1 	.word	0x0800e0f1
 800e00c:	0800e0f1 	.word	0x0800e0f1
 800e010:	0800e0f1 	.word	0x0800e0f1
 800e014:	0800e0f1 	.word	0x0800e0f1
 800e018:	0800e0f1 	.word	0x0800e0f1
 800e01c:	0800e0f1 	.word	0x0800e0f1
 800e020:	0800e0f1 	.word	0x0800e0f1
 800e024:	0800e0f1 	.word	0x0800e0f1
 800e028:	0800e0f1 	.word	0x0800e0f1
 800e02c:	0800e0f1 	.word	0x0800e0f1
 800e030:	0800e0f1 	.word	0x0800e0f1
 800e034:	0800e0f1 	.word	0x0800e0f1
 800e038:	0800e0f1 	.word	0x0800e0f1
 800e03c:	0800e0f1 	.word	0x0800e0f1
 800e040:	0800e0f1 	.word	0x0800e0f1
 800e044:	0800e0f1 	.word	0x0800e0f1
 800e048:	0800e059 	.word	0x0800e059
 800e04c:	0800e09d 	.word	0x0800e09d
 800e050:	0800e0f1 	.word	0x0800e0f1
 800e054:	0800e0f1 	.word	0x0800e0f1
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	461a      	mov	r2, r3
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	3301      	adds	r3, #1
 800e062:	781b      	ldrb	r3, [r3, #0]
 800e064:	021b      	lsls	r3, r3, #8
 800e066:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	3302      	adds	r3, #2
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e070:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	3303      	adds	r3, #3
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	061b      	lsls	r3, r3, #24
 800e07a:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e07c:	461a      	mov	r2, r3
 800e07e:	4b20      	ldr	r3, [pc, #128]	@ (800e100 <TEMPLATE_Control+0x158>)
 800e080:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	791a      	ldrb	r2, [r3, #4]
 800e086:	4b1e      	ldr	r3, [pc, #120]	@ (800e100 <TEMPLATE_Control+0x158>)
 800e088:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	795a      	ldrb	r2, [r3, #5]
 800e08e:	4b1c      	ldr	r3, [pc, #112]	@ (800e100 <TEMPLATE_Control+0x158>)
 800e090:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	799a      	ldrb	r2, [r3, #6]
 800e096:	4b1a      	ldr	r3, [pc, #104]	@ (800e100 <TEMPLATE_Control+0x158>)
 800e098:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800e09a:	e02a      	b.n	800e0f2 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800e09c:	4b18      	ldr	r3, [pc, #96]	@ (800e100 <TEMPLATE_Control+0x158>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	b2da      	uxtb	r2, r3
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800e0a6:	4b16      	ldr	r3, [pc, #88]	@ (800e100 <TEMPLATE_Control+0x158>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	0a1a      	lsrs	r2, r3, #8
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	3301      	adds	r3, #1
 800e0b0:	b2d2      	uxtb	r2, r2
 800e0b2:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800e0b4:	4b12      	ldr	r3, [pc, #72]	@ (800e100 <TEMPLATE_Control+0x158>)
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	0c1a      	lsrs	r2, r3, #16
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	3302      	adds	r3, #2
 800e0be:	b2d2      	uxtb	r2, r2
 800e0c0:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800e0c2:	4b0f      	ldr	r3, [pc, #60]	@ (800e100 <TEMPLATE_Control+0x158>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	0e1a      	lsrs	r2, r3, #24
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	3303      	adds	r3, #3
 800e0cc:	b2d2      	uxtb	r2, r2
 800e0ce:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	3304      	adds	r3, #4
 800e0d4:	4a0a      	ldr	r2, [pc, #40]	@ (800e100 <TEMPLATE_Control+0x158>)
 800e0d6:	7912      	ldrb	r2, [r2, #4]
 800e0d8:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	3305      	adds	r3, #5
 800e0de:	4a08      	ldr	r2, [pc, #32]	@ (800e100 <TEMPLATE_Control+0x158>)
 800e0e0:	7952      	ldrb	r2, [r2, #5]
 800e0e2:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	3306      	adds	r3, #6
 800e0e8:	4a05      	ldr	r2, [pc, #20]	@ (800e100 <TEMPLATE_Control+0x158>)
 800e0ea:	7992      	ldrb	r2, [r2, #6]
 800e0ec:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800e0ee:	e000      	b.n	800e0f2 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800e0f0:	bf00      	nop
  }

  return (0);
 800e0f2:	2300      	movs	r3, #0
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	370c      	adds	r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr
 800e100:	200000cc 	.word	0x200000cc

0800e104 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	6039      	str	r1, [r7, #0]
      if(Buf[0] == '1')
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	2b31      	cmp	r3, #49	@ 0x31
 800e114:	d105      	bne.n	800e122 <TEMPLATE_Receive+0x1e>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800e116:	2201      	movs	r2, #1
 800e118:	2120      	movs	r1, #32
 800e11a:	480a      	ldr	r0, [pc, #40]	@ (800e144 <TEMPLATE_Receive+0x40>)
 800e11c:	f7f4 f9f4 	bl	8002508 <HAL_GPIO_WritePin>
 800e120:	e008      	b.n	800e134 <TEMPLATE_Receive+0x30>
      else if(Buf[0] == '0')
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	2b30      	cmp	r3, #48	@ 0x30
 800e128:	d104      	bne.n	800e134 <TEMPLATE_Receive+0x30>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800e12a:	2200      	movs	r2, #0
 800e12c:	2120      	movs	r1, #32
 800e12e:	4805      	ldr	r0, [pc, #20]	@ (800e144 <TEMPLATE_Receive+0x40>)
 800e130:	f7f4 f9ea 	bl	8002508 <HAL_GPIO_WritePin>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e134:	4804      	ldr	r0, [pc, #16]	@ (800e148 <TEMPLATE_Receive+0x44>)
 800e136:	f7ff fee5 	bl	800df04 <USBD_CDC_ReceivePacket>
      return (USBD_OK);
 800e13a:	2300      	movs	r3, #0
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	42020000 	.word	0x42020000
 800e148:	200006c4 	.word	0x200006c4

0800e14c <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	4613      	mov	r3, r2
 800e158:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 800e15a:	2300      	movs	r3, #0

}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3714      	adds	r7, #20
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b082      	sub	sp, #8
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800e17c:	4619      	mov	r1, r3
 800e17e:	4610      	mov	r0, r2
 800e180:	f000 faa5 	bl	800e6ce <USBD_LL_SetupStage>
}
 800e184:	bf00      	nop
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	460b      	mov	r3, r1
 800e196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e19e:	78fa      	ldrb	r2, [r7, #3]
 800e1a0:	6879      	ldr	r1, [r7, #4]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	4413      	add	r3, r2
 800e1a8:	00db      	lsls	r3, r3, #3
 800e1aa:	440b      	add	r3, r1
 800e1ac:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800e1b0:	681a      	ldr	r2, [r3, #0]
 800e1b2:	78fb      	ldrb	r3, [r7, #3]
 800e1b4:	4619      	mov	r1, r3
 800e1b6:	f000 fadf 	bl	800e778 <USBD_LL_DataOutStage>
}
 800e1ba:	bf00      	nop
 800e1bc:	3708      	adds	r7, #8
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b082      	sub	sp, #8
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	6078      	str	r0, [r7, #4]
 800e1ca:	460b      	mov	r3, r1
 800e1cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800e1d4:	78fa      	ldrb	r2, [r7, #3]
 800e1d6:	6879      	ldr	r1, [r7, #4]
 800e1d8:	4613      	mov	r3, r2
 800e1da:	009b      	lsls	r3, r3, #2
 800e1dc:	4413      	add	r3, r2
 800e1de:	00db      	lsls	r3, r3, #3
 800e1e0:	440b      	add	r3, r1
 800e1e2:	3328      	adds	r3, #40	@ 0x28
 800e1e4:	681a      	ldr	r2, [r3, #0]
 800e1e6:	78fb      	ldrb	r3, [r7, #3]
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	f000 fb78 	bl	800e8de <USBD_LL_DataInStage>
}
 800e1ee:	bf00      	nop
 800e1f0:	3708      	adds	r7, #8
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}

0800e1f6 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b082      	sub	sp, #8
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e204:	4618      	mov	r0, r3
 800e206:	f000 fc7e 	bl	800eb06 <USBD_LL_SOF>
}
 800e20a:	bf00      	nop
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b084      	sub	sp, #16
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e21a:	2301      	movs	r3, #1
 800e21c:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	79db      	ldrb	r3, [r3, #7]
 800e222:	2b02      	cmp	r3, #2
 800e224:	d001      	beq.n	800e22a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e226:	f7f2 fe8b 	bl	8000f40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e230:	7bfa      	ldrb	r2, [r7, #15]
 800e232:	4611      	mov	r1, r2
 800e234:	4618      	mov	r0, r3
 800e236:	f000 fc56 	bl	800eae6 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800e240:	4618      	mov	r0, r3
 800e242:	f000 fbfe 	bl	800ea42 <USBD_LL_Reset>
}
 800e246:	bf00      	nop
 800e248:	3710      	adds	r7, #16
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
	...

0800e250 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	4a19      	ldr	r2, [pc, #100]	@ (800e2c0 <USBD_LL_Init+0x70>)
 800e25c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e266:	2340      	movs	r3, #64	@ 0x40
 800e268:	2200      	movs	r2, #0
 800e26a:	2100      	movs	r1, #0
 800e26c:	f7f5 ff68 	bl	8004140 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e276:	2380      	movs	r3, #128	@ 0x80
 800e278:	2200      	movs	r2, #0
 800e27a:	2180      	movs	r1, #128	@ 0x80
 800e27c:	f7f5 ff60 	bl	8004140 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e286:	23c0      	movs	r3, #192	@ 0xc0
 800e288:	2200      	movs	r2, #0
 800e28a:	2181      	movs	r1, #129	@ 0x81
 800e28c:	f7f5 ff58 	bl	8004140 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e296:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e29a:	2200      	movs	r2, #0
 800e29c:	2101      	movs	r1, #1
 800e29e:	f7f5 ff4f 	bl	8004140 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e2a8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	2182      	movs	r1, #130	@ 0x82
 800e2b0:	f7f5 ff46 	bl	8004140 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3708      	adds	r7, #8
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	200003e0 	.word	0x200003e0

0800e2c4 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	f7f4 fc18 	bl	8002b08 <HAL_PCD_Start>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800e2dc:	7bfb      	ldrb	r3, [r7, #15]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f000 f916 	bl	800e510 <USBD_Get_USB_Status>
 800e2e4:	4603      	mov	r3, r0
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3710      	adds	r7, #16
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b084      	sub	sp, #16
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	4608      	mov	r0, r1
 800e2f8:	4611      	mov	r1, r2
 800e2fa:	461a      	mov	r2, r3
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	70fb      	strb	r3, [r7, #3]
 800e300:	460b      	mov	r3, r1
 800e302:	70bb      	strb	r3, [r7, #2]
 800e304:	4613      	mov	r3, r2
 800e306:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e30e:	78bb      	ldrb	r3, [r7, #2]
 800e310:	883a      	ldrh	r2, [r7, #0]
 800e312:	78f9      	ldrb	r1, [r7, #3]
 800e314:	f7f4 fd47 	bl	8002da6 <HAL_PCD_EP_Open>
 800e318:	4603      	mov	r3, r0
 800e31a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e31c:	7bfb      	ldrb	r3, [r7, #15]
 800e31e:	4618      	mov	r0, r3
 800e320:	f000 f8f6 	bl	800e510 <USBD_Get_USB_Status>
 800e324:	4603      	mov	r3, r0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e32e:	b580      	push	{r7, lr}
 800e330:	b084      	sub	sp, #16
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
 800e336:	460b      	mov	r3, r1
 800e338:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e340:	78fa      	ldrb	r2, [r7, #3]
 800e342:	4611      	mov	r1, r2
 800e344:	4618      	mov	r0, r3
 800e346:	f7f4 fd8f 	bl	8002e68 <HAL_PCD_EP_Close>
 800e34a:	4603      	mov	r3, r0
 800e34c:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e34e:	7bfb      	ldrb	r3, [r7, #15]
 800e350:	4618      	mov	r0, r3
 800e352:	f000 f8dd 	bl	800e510 <USBD_Get_USB_Status>
 800e356:	4603      	mov	r3, r0
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	460b      	mov	r3, r1
 800e36a:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e372:	78fa      	ldrb	r2, [r7, #3]
 800e374:	4611      	mov	r1, r2
 800e376:	4618      	mov	r0, r3
 800e378:	f7f4 fe42 	bl	8003000 <HAL_PCD_EP_SetStall>
 800e37c:	4603      	mov	r3, r0
 800e37e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e380:	7bfb      	ldrb	r3, [r7, #15]
 800e382:	4618      	mov	r0, r3
 800e384:	f000 f8c4 	bl	800e510 <USBD_Get_USB_Status>
 800e388:	4603      	mov	r3, r0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3710      	adds	r7, #16
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b084      	sub	sp, #16
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	460b      	mov	r3, r1
 800e39c:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3a4:	78fa      	ldrb	r2, [r7, #3]
 800e3a6:	4611      	mov	r1, r2
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7f4 fe7d 	bl	80030a8 <HAL_PCD_EP_ClrStall>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e3b2:	7bfb      	ldrb	r3, [r7, #15]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f000 f8ab 	bl	800e510 <USBD_Get_USB_Status>
 800e3ba:	4603      	mov	r3, r0
}
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3710      	adds	r7, #16
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b085      	sub	sp, #20
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3d6:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800e3d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	da0b      	bge.n	800e3f8 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e3e0:	78fb      	ldrb	r3, [r7, #3]
 800e3e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3e6:	68f9      	ldr	r1, [r7, #12]
 800e3e8:	4613      	mov	r3, r2
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	4413      	add	r3, r2
 800e3ee:	00db      	lsls	r3, r3, #3
 800e3f0:	440b      	add	r3, r1
 800e3f2:	3316      	adds	r3, #22
 800e3f4:	781b      	ldrb	r3, [r3, #0]
 800e3f6:	e00b      	b.n	800e410 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e3f8:	78fb      	ldrb	r3, [r7, #3]
 800e3fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e3fe:	68f9      	ldr	r1, [r7, #12]
 800e400:	4613      	mov	r3, r2
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	4413      	add	r3, r2
 800e406:	00db      	lsls	r3, r3, #3
 800e408:	440b      	add	r3, r1
 800e40a:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800e40e:	781b      	ldrb	r3, [r3, #0]
      }
}
 800e410:	4618      	mov	r0, r3
 800e412:	3714      	adds	r7, #20
 800e414:	46bd      	mov	sp, r7
 800e416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41a:	4770      	bx	lr

0800e41c <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
 800e424:	460b      	mov	r3, r1
 800e426:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e42e:	78fa      	ldrb	r2, [r7, #3]
 800e430:	4611      	mov	r1, r2
 800e432:	4618      	mov	r0, r3
 800e434:	f7f4 fc93 	bl	8002d5e <HAL_PCD_SetAddress>
 800e438:	4603      	mov	r3, r0
 800e43a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800e43c:	7bfb      	ldrb	r3, [r7, #15]
 800e43e:	4618      	mov	r0, r3
 800e440:	f000 f866 	bl	800e510 <USBD_Get_USB_Status>
 800e444:	4603      	mov	r3, r0
}
 800e446:	4618      	mov	r0, r3
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b086      	sub	sp, #24
 800e452:	af00      	add	r7, sp, #0
 800e454:	60f8      	str	r0, [r7, #12]
 800e456:	607a      	str	r2, [r7, #4]
 800e458:	603b      	str	r3, [r7, #0]
 800e45a:	460b      	mov	r3, r1
 800e45c:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e464:	7af9      	ldrb	r1, [r7, #11]
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	f7f4 fd91 	bl	8002f90 <HAL_PCD_EP_Transmit>
 800e46e:	4603      	mov	r3, r0
 800e470:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e472:	7dfb      	ldrb	r3, [r7, #23]
 800e474:	4618      	mov	r0, r3
 800e476:	f000 f84b 	bl	800e510 <USBD_Get_USB_Status>
 800e47a:	4603      	mov	r3, r0
}
 800e47c:	4618      	mov	r0, r3
 800e47e:	3718      	adds	r7, #24
 800e480:	46bd      	mov	sp, r7
 800e482:	bd80      	pop	{r7, pc}

0800e484 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b086      	sub	sp, #24
 800e488:	af00      	add	r7, sp, #0
 800e48a:	60f8      	str	r0, [r7, #12]
 800e48c:	607a      	str	r2, [r7, #4]
 800e48e:	603b      	str	r3, [r7, #0]
 800e490:	460b      	mov	r3, r1
 800e492:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e49a:	7af9      	ldrb	r1, [r7, #11]
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	f7f4 fd2c 	bl	8002efc <HAL_PCD_EP_Receive>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800e4a8:	7dfb      	ldrb	r3, [r7, #23]
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f000 f830 	bl	800e510 <USBD_Get_USB_Status>
 800e4b0:	4603      	mov	r3, r0
}
 800e4b2:	4618      	mov	r0, r3
 800e4b4:	3718      	adds	r7, #24
 800e4b6:	46bd      	mov	sp, r7
 800e4b8:	bd80      	pop	{r7, pc}

0800e4ba <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4ba:	b580      	push	{r7, lr}
 800e4bc:	b082      	sub	sp, #8
 800e4be:	af00      	add	r7, sp, #0
 800e4c0:	6078      	str	r0, [r7, #4]
 800e4c2:	460b      	mov	r3, r1
 800e4c4:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4cc:	78fa      	ldrb	r2, [r7, #3]
 800e4ce:	4611      	mov	r1, r2
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7f4 fd45 	bl	8002f60 <HAL_PCD_EP_GetRxCount>
 800e4d6:	4603      	mov	r3, r0
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	3708      	adds	r7, #8
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}

0800e4e0 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b083      	sub	sp, #12
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800e4e8:	4b03      	ldr	r3, [pc, #12]	@ (800e4f8 <USBD_static_malloc+0x18>)
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	370c      	adds	r7, #12
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr
 800e4f6:	bf00      	nop
 800e4f8:	20000e44 	.word	0x20000e44

0800e4fc <USBD_static_free>:

void USBD_static_free(void *p)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800e504:	bf00      	nop
 800e506:	370c      	adds	r7, #12
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e510:	b480      	push	{r7}
 800e512:	b085      	sub	sp, #20
 800e514:	af00      	add	r7, sp, #0
 800e516:	4603      	mov	r3, r0
 800e518:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800e51a:	2300      	movs	r3, #0
 800e51c:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800e51e:	79fb      	ldrb	r3, [r7, #7]
 800e520:	2b03      	cmp	r3, #3
 800e522:	d817      	bhi.n	800e554 <USBD_Get_USB_Status+0x44>
 800e524:	a201      	add	r2, pc, #4	@ (adr r2, 800e52c <USBD_Get_USB_Status+0x1c>)
 800e526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e52a:	bf00      	nop
 800e52c:	0800e53d 	.word	0x0800e53d
 800e530:	0800e543 	.word	0x0800e543
 800e534:	0800e549 	.word	0x0800e549
 800e538:	0800e54f 	.word	0x0800e54f
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800e53c:	2300      	movs	r3, #0
 800e53e:	73fb      	strb	r3, [r7, #15]
             break;
 800e540:	e00b      	b.n	800e55a <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800e542:	2303      	movs	r3, #3
 800e544:	73fb      	strb	r3, [r7, #15]
             break;
 800e546:	e008      	b.n	800e55a <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800e548:	2301      	movs	r3, #1
 800e54a:	73fb      	strb	r3, [r7, #15]
             break;
 800e54c:	e005      	b.n	800e55a <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800e54e:	2303      	movs	r3, #3
 800e550:	73fb      	strb	r3, [r7, #15]
             break;
 800e552:	e002      	b.n	800e55a <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800e554:	2303      	movs	r3, #3
 800e556:	73fb      	strb	r3, [r7, #15]
             break;
 800e558:	bf00      	nop
      }
      return usb_status;
 800e55a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3714      	adds	r7, #20
 800e560:	46bd      	mov	sp, r7
 800e562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e566:	4770      	bx	lr

0800e568 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b086      	sub	sp, #24
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	60b9      	str	r1, [r7, #8]
 800e572:	4613      	mov	r3, r2
 800e574:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d101      	bne.n	800e580 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e57c:	2303      	movs	r3, #3
 800e57e:	e01f      	b.n	800e5c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2200      	movs	r2, #0
 800e584:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2200      	movs	r2, #0
 800e58c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2200      	movs	r2, #0
 800e594:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e598:	68bb      	ldr	r3, [r7, #8]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d003      	beq.n	800e5a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	68ba      	ldr	r2, [r7, #8]
 800e5a2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2201      	movs	r2, #1
 800e5aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	79fa      	ldrb	r2, [r7, #7]
 800e5b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	f7ff fe4b 	bl	800e250 <USBD_LL_Init>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e5be:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3718      	adds	r7, #24
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d101      	bne.n	800e5e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e5dc:	2303      	movs	r3, #3
 800e5de:	e025      	b.n	800e62c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	683a      	ldr	r2, [r7, #0]
 800e5e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	32ae      	adds	r2, #174	@ 0xae
 800e5f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d00f      	beq.n	800e61c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	32ae      	adds	r2, #174	@ 0xae
 800e606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e60c:	f107 020e 	add.w	r2, r7, #14
 800e610:	4610      	mov	r0, r2
 800e612:	4798      	blx	r3
 800e614:	4602      	mov	r2, r0
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e622:	1c5a      	adds	r2, r3, #1
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e62a:	2300      	movs	r3, #0
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3710      	adds	r7, #16
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f7ff fe41 	bl	800e2c4 <USBD_LL_Start>
 800e642:	4603      	mov	r3, r0
}
 800e644:	4618      	mov	r0, r3
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e654:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e656:	4618      	mov	r0, r3
 800e658:	370c      	adds	r7, #12
 800e65a:	46bd      	mov	sp, r7
 800e65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e660:	4770      	bx	lr

0800e662 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e662:	b580      	push	{r7, lr}
 800e664:	b084      	sub	sp, #16
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
 800e66a:	460b      	mov	r3, r1
 800e66c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e66e:	2300      	movs	r3, #0
 800e670:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d009      	beq.n	800e690 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	78fa      	ldrb	r2, [r7, #3]
 800e686:	4611      	mov	r1, r2
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	4798      	blx	r3
 800e68c:	4603      	mov	r3, r0
 800e68e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e690:	7bfb      	ldrb	r3, [r7, #15]
}
 800e692:	4618      	mov	r0, r3
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b084      	sub	sp, #16
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	6078      	str	r0, [r7, #4]
 800e6a2:	460b      	mov	r3, r1
 800e6a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	78fa      	ldrb	r2, [r7, #3]
 800e6b4:	4611      	mov	r1, r2
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	4798      	blx	r3
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d001      	beq.n	800e6c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e6c0:	2303      	movs	r3, #3
 800e6c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3710      	adds	r7, #16
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b084      	sub	sp, #16
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
 800e6d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e6de:	6839      	ldr	r1, [r7, #0]
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f001 f846 	bl	800f772 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2201      	movs	r2, #1
 800e6ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e702:	f003 031f 	and.w	r3, r3, #31
 800e706:	2b02      	cmp	r3, #2
 800e708:	d01a      	beq.n	800e740 <USBD_LL_SetupStage+0x72>
 800e70a:	2b02      	cmp	r3, #2
 800e70c:	d822      	bhi.n	800e754 <USBD_LL_SetupStage+0x86>
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d002      	beq.n	800e718 <USBD_LL_SetupStage+0x4a>
 800e712:	2b01      	cmp	r3, #1
 800e714:	d00a      	beq.n	800e72c <USBD_LL_SetupStage+0x5e>
 800e716:	e01d      	b.n	800e754 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e71e:	4619      	mov	r1, r3
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 fa9d 	bl	800ec60 <USBD_StdDevReq>
 800e726:	4603      	mov	r3, r0
 800e728:	73fb      	strb	r3, [r7, #15]
      break;
 800e72a:	e020      	b.n	800e76e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e732:	4619      	mov	r1, r3
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f000 fb05 	bl	800ed44 <USBD_StdItfReq>
 800e73a:	4603      	mov	r3, r0
 800e73c:	73fb      	strb	r3, [r7, #15]
      break;
 800e73e:	e016      	b.n	800e76e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e746:	4619      	mov	r1, r3
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f000 fb67 	bl	800ee1c <USBD_StdEPReq>
 800e74e:	4603      	mov	r3, r0
 800e750:	73fb      	strb	r3, [r7, #15]
      break;
 800e752:	e00c      	b.n	800e76e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e75a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e75e:	b2db      	uxtb	r3, r3
 800e760:	4619      	mov	r1, r3
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f7ff fdfc 	bl	800e360 <USBD_LL_StallEP>
 800e768:	4603      	mov	r3, r0
 800e76a:	73fb      	strb	r3, [r7, #15]
      break;
 800e76c:	bf00      	nop
  }

  return ret;
 800e76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e770:	4618      	mov	r0, r3
 800e772:	3710      	adds	r7, #16
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b086      	sub	sp, #24
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	60f8      	str	r0, [r7, #12]
 800e780:	460b      	mov	r3, r1
 800e782:	607a      	str	r2, [r7, #4]
 800e784:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e786:	2300      	movs	r3, #0
 800e788:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e78a:	7afb      	ldrb	r3, [r7, #11]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d16e      	bne.n	800e86e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e796:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e79e:	2b03      	cmp	r3, #3
 800e7a0:	f040 8098 	bne.w	800e8d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e7a4:	693b      	ldr	r3, [r7, #16]
 800e7a6:	689a      	ldr	r2, [r3, #8]
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	68db      	ldr	r3, [r3, #12]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d913      	bls.n	800e7d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	689a      	ldr	r2, [r3, #8]
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	1ad2      	subs	r2, r2, r3
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	68da      	ldr	r2, [r3, #12]
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	689b      	ldr	r3, [r3, #8]
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	bf28      	it	cs
 800e7ca:	4613      	movcs	r3, r2
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	6879      	ldr	r1, [r7, #4]
 800e7d0:	68f8      	ldr	r0, [r7, #12]
 800e7d2:	f001 f9cf 	bl	800fb74 <USBD_CtlContinueRx>
 800e7d6:	e07d      	b.n	800e8d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e7de:	f003 031f 	and.w	r3, r3, #31
 800e7e2:	2b02      	cmp	r3, #2
 800e7e4:	d014      	beq.n	800e810 <USBD_LL_DataOutStage+0x98>
 800e7e6:	2b02      	cmp	r3, #2
 800e7e8:	d81d      	bhi.n	800e826 <USBD_LL_DataOutStage+0xae>
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d002      	beq.n	800e7f4 <USBD_LL_DataOutStage+0x7c>
 800e7ee:	2b01      	cmp	r3, #1
 800e7f0:	d003      	beq.n	800e7fa <USBD_LL_DataOutStage+0x82>
 800e7f2:	e018      	b.n	800e826 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	75bb      	strb	r3, [r7, #22]
            break;
 800e7f8:	e018      	b.n	800e82c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e800:	b2db      	uxtb	r3, r3
 800e802:	4619      	mov	r1, r3
 800e804:	68f8      	ldr	r0, [r7, #12]
 800e806:	f000 f99e 	bl	800eb46 <USBD_CoreFindIF>
 800e80a:	4603      	mov	r3, r0
 800e80c:	75bb      	strb	r3, [r7, #22]
            break;
 800e80e:	e00d      	b.n	800e82c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e816:	b2db      	uxtb	r3, r3
 800e818:	4619      	mov	r1, r3
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	f000 f9a0 	bl	800eb60 <USBD_CoreFindEP>
 800e820:	4603      	mov	r3, r0
 800e822:	75bb      	strb	r3, [r7, #22]
            break;
 800e824:	e002      	b.n	800e82c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e826:	2300      	movs	r3, #0
 800e828:	75bb      	strb	r3, [r7, #22]
            break;
 800e82a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e82c:	7dbb      	ldrb	r3, [r7, #22]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d119      	bne.n	800e866 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b03      	cmp	r3, #3
 800e83c:	d113      	bne.n	800e866 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e83e:	7dba      	ldrb	r2, [r7, #22]
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	32ae      	adds	r2, #174	@ 0xae
 800e844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e848:	691b      	ldr	r3, [r3, #16]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d00b      	beq.n	800e866 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e84e:	7dba      	ldrb	r2, [r7, #22]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e856:	7dba      	ldrb	r2, [r7, #22]
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	32ae      	adds	r2, #174	@ 0xae
 800e85c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e860:	691b      	ldr	r3, [r3, #16]
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	f001 f995 	bl	800fb96 <USBD_CtlSendStatus>
 800e86c:	e032      	b.n	800e8d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e86e:	7afb      	ldrb	r3, [r7, #11]
 800e870:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e874:	b2db      	uxtb	r3, r3
 800e876:	4619      	mov	r1, r3
 800e878:	68f8      	ldr	r0, [r7, #12]
 800e87a:	f000 f971 	bl	800eb60 <USBD_CoreFindEP>
 800e87e:	4603      	mov	r3, r0
 800e880:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e882:	7dbb      	ldrb	r3, [r7, #22]
 800e884:	2bff      	cmp	r3, #255	@ 0xff
 800e886:	d025      	beq.n	800e8d4 <USBD_LL_DataOutStage+0x15c>
 800e888:	7dbb      	ldrb	r3, [r7, #22]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d122      	bne.n	800e8d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e894:	b2db      	uxtb	r3, r3
 800e896:	2b03      	cmp	r3, #3
 800e898:	d117      	bne.n	800e8ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e89a:	7dba      	ldrb	r2, [r7, #22]
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	32ae      	adds	r2, #174	@ 0xae
 800e8a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8a4:	699b      	ldr	r3, [r3, #24]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00f      	beq.n	800e8ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e8aa:	7dba      	ldrb	r2, [r7, #22]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e8b2:	7dba      	ldrb	r2, [r7, #22]
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	32ae      	adds	r2, #174	@ 0xae
 800e8b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8bc:	699b      	ldr	r3, [r3, #24]
 800e8be:	7afa      	ldrb	r2, [r7, #11]
 800e8c0:	4611      	mov	r1, r2
 800e8c2:	68f8      	ldr	r0, [r7, #12]
 800e8c4:	4798      	blx	r3
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e8ca:	7dfb      	ldrb	r3, [r7, #23]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d001      	beq.n	800e8d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e8d0:	7dfb      	ldrb	r3, [r7, #23]
 800e8d2:	e000      	b.n	800e8d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e8d4:	2300      	movs	r3, #0
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3718      	adds	r7, #24
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b086      	sub	sp, #24
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	60f8      	str	r0, [r7, #12]
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	607a      	str	r2, [r7, #4]
 800e8ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e8ec:	7afb      	ldrb	r3, [r7, #11]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d16f      	bne.n	800e9d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	3314      	adds	r3, #20
 800e8f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e8fe:	2b02      	cmp	r3, #2
 800e900:	d15a      	bne.n	800e9b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e902:	693b      	ldr	r3, [r7, #16]
 800e904:	689a      	ldr	r2, [r3, #8]
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	68db      	ldr	r3, [r3, #12]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d914      	bls.n	800e938 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	689a      	ldr	r2, [r3, #8]
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	68db      	ldr	r3, [r3, #12]
 800e916:	1ad2      	subs	r2, r2, r3
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	461a      	mov	r2, r3
 800e922:	6879      	ldr	r1, [r7, #4]
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f001 f8f7 	bl	800fb18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e92a:	2300      	movs	r3, #0
 800e92c:	2200      	movs	r2, #0
 800e92e:	2100      	movs	r1, #0
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	f7ff fda7 	bl	800e484 <USBD_LL_PrepareReceive>
 800e936:	e03f      	b.n	800e9b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	68da      	ldr	r2, [r3, #12]
 800e93c:	693b      	ldr	r3, [r7, #16]
 800e93e:	689b      	ldr	r3, [r3, #8]
 800e940:	429a      	cmp	r2, r3
 800e942:	d11c      	bne.n	800e97e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	685a      	ldr	r2, [r3, #4]
 800e948:	693b      	ldr	r3, [r7, #16]
 800e94a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d316      	bcc.n	800e97e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	685a      	ldr	r2, [r3, #4]
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d20f      	bcs.n	800e97e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e95e:	2200      	movs	r2, #0
 800e960:	2100      	movs	r1, #0
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	f001 f8d8 	bl	800fb18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	2200      	movs	r2, #0
 800e96c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e970:	2300      	movs	r3, #0
 800e972:	2200      	movs	r2, #0
 800e974:	2100      	movs	r1, #0
 800e976:	68f8      	ldr	r0, [r7, #12]
 800e978:	f7ff fd84 	bl	800e484 <USBD_LL_PrepareReceive>
 800e97c:	e01c      	b.n	800e9b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e984:	b2db      	uxtb	r3, r3
 800e986:	2b03      	cmp	r3, #3
 800e988:	d10f      	bne.n	800e9aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e990:	68db      	ldr	r3, [r3, #12]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d009      	beq.n	800e9aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2200      	movs	r2, #0
 800e99a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9a4:	68db      	ldr	r3, [r3, #12]
 800e9a6:	68f8      	ldr	r0, [r7, #12]
 800e9a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9aa:	2180      	movs	r1, #128	@ 0x80
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f7ff fcd7 	bl	800e360 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e9b2:	68f8      	ldr	r0, [r7, #12]
 800e9b4:	f001 f902 	bl	800fbbc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d03a      	beq.n	800ea38 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f7ff fe42 	bl	800e64c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2200      	movs	r2, #0
 800e9cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e9d0:	e032      	b.n	800ea38 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e9d2:	7afb      	ldrb	r3, [r7, #11]
 800e9d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	4619      	mov	r1, r3
 800e9dc:	68f8      	ldr	r0, [r7, #12]
 800e9de:	f000 f8bf 	bl	800eb60 <USBD_CoreFindEP>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e9e6:	7dfb      	ldrb	r3, [r7, #23]
 800e9e8:	2bff      	cmp	r3, #255	@ 0xff
 800e9ea:	d025      	beq.n	800ea38 <USBD_LL_DataInStage+0x15a>
 800e9ec:	7dfb      	ldrb	r3, [r7, #23]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d122      	bne.n	800ea38 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9f8:	b2db      	uxtb	r3, r3
 800e9fa:	2b03      	cmp	r3, #3
 800e9fc:	d11c      	bne.n	800ea38 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e9fe:	7dfa      	ldrb	r2, [r7, #23]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	32ae      	adds	r2, #174	@ 0xae
 800ea04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea08:	695b      	ldr	r3, [r3, #20]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d014      	beq.n	800ea38 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ea0e:	7dfa      	ldrb	r2, [r7, #23]
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ea16:	7dfa      	ldrb	r2, [r7, #23]
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	32ae      	adds	r2, #174	@ 0xae
 800ea1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea20:	695b      	ldr	r3, [r3, #20]
 800ea22:	7afa      	ldrb	r2, [r7, #11]
 800ea24:	4611      	mov	r1, r2
 800ea26:	68f8      	ldr	r0, [r7, #12]
 800ea28:	4798      	blx	r3
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ea2e:	7dbb      	ldrb	r3, [r7, #22]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d001      	beq.n	800ea38 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ea34:	7dbb      	ldrb	r3, [r7, #22]
 800ea36:	e000      	b.n	800ea3a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ea38:	2300      	movs	r3, #0
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3718      	adds	r7, #24
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}

0800ea42 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ea42:	b580      	push	{r7, lr}
 800ea44:	b084      	sub	sp, #16
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2201      	movs	r2, #1
 800ea52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2200      	movs	r2, #0
 800ea62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2200      	movs	r2, #0
 800ea68:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d014      	beq.n	800eaa8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d00e      	beq.n	800eaa8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	6852      	ldr	r2, [r2, #4]
 800ea96:	b2d2      	uxtb	r2, r2
 800ea98:	4611      	mov	r1, r2
 800ea9a:	6878      	ldr	r0, [r7, #4]
 800ea9c:	4798      	blx	r3
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d001      	beq.n	800eaa8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800eaa4:	2303      	movs	r3, #3
 800eaa6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eaa8:	2340      	movs	r3, #64	@ 0x40
 800eaaa:	2200      	movs	r2, #0
 800eaac:	2100      	movs	r1, #0
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f7ff fc1d 	bl	800e2ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2201      	movs	r2, #1
 800eab8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2240      	movs	r2, #64	@ 0x40
 800eac0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eac4:	2340      	movs	r3, #64	@ 0x40
 800eac6:	2200      	movs	r2, #0
 800eac8:	2180      	movs	r1, #128	@ 0x80
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f7ff fc0f 	bl	800e2ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	2201      	movs	r2, #1
 800ead4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	2240      	movs	r2, #64	@ 0x40
 800eada:	621a      	str	r2, [r3, #32]

  return ret;
 800eadc:	7bfb      	ldrb	r3, [r7, #15]
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3710      	adds	r7, #16
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}

0800eae6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eae6:	b480      	push	{r7}
 800eae8:	b083      	sub	sp, #12
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
 800eaee:	460b      	mov	r3, r1
 800eaf0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	78fa      	ldrb	r2, [r7, #3]
 800eaf6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eaf8:	2300      	movs	r3, #0
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	370c      	adds	r7, #12
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr

0800eb06 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b082      	sub	sp, #8
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	2b03      	cmp	r3, #3
 800eb18:	d110      	bne.n	800eb3c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d00b      	beq.n	800eb3c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb2a:	69db      	ldr	r3, [r3, #28]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d005      	beq.n	800eb3c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb36:	69db      	ldr	r3, [r3, #28]
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800eb3c:	2300      	movs	r3, #0
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3708      	adds	r7, #8
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}

0800eb46 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eb46:	b480      	push	{r7}
 800eb48:	b083      	sub	sp, #12
 800eb4a:	af00      	add	r7, sp, #0
 800eb4c:	6078      	str	r0, [r7, #4]
 800eb4e:	460b      	mov	r3, r1
 800eb50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eb52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	370c      	adds	r7, #12
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
 800eb68:	460b      	mov	r3, r1
 800eb6a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eb6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	370c      	adds	r7, #12
 800eb72:	46bd      	mov	sp, r7
 800eb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb78:	4770      	bx	lr

0800eb7a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800eb7a:	b580      	push	{r7, lr}
 800eb7c:	b086      	sub	sp, #24
 800eb7e:	af00      	add	r7, sp, #0
 800eb80:	6078      	str	r0, [r7, #4]
 800eb82:	460b      	mov	r3, r1
 800eb84:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	885b      	ldrh	r3, [r3, #2]
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	68fa      	ldr	r2, [r7, #12]
 800eb9a:	7812      	ldrb	r2, [r2, #0]
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	d91f      	bls.n	800ebe0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	781b      	ldrb	r3, [r3, #0]
 800eba4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800eba6:	e013      	b.n	800ebd0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800eba8:	f107 030a 	add.w	r3, r7, #10
 800ebac:	4619      	mov	r1, r3
 800ebae:	6978      	ldr	r0, [r7, #20]
 800ebb0:	f000 f81b 	bl	800ebea <USBD_GetNextDesc>
 800ebb4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	785b      	ldrb	r3, [r3, #1]
 800ebba:	2b05      	cmp	r3, #5
 800ebbc:	d108      	bne.n	800ebd0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ebbe:	697b      	ldr	r3, [r7, #20]
 800ebc0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	789b      	ldrb	r3, [r3, #2]
 800ebc6:	78fa      	ldrb	r2, [r7, #3]
 800ebc8:	429a      	cmp	r2, r3
 800ebca:	d008      	beq.n	800ebde <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	885b      	ldrh	r3, [r3, #2]
 800ebd4:	b29a      	uxth	r2, r3
 800ebd6:	897b      	ldrh	r3, [r7, #10]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d8e5      	bhi.n	800eba8 <USBD_GetEpDesc+0x2e>
 800ebdc:	e000      	b.n	800ebe0 <USBD_GetEpDesc+0x66>
          break;
 800ebde:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ebe0:	693b      	ldr	r3, [r7, #16]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3718      	adds	r7, #24
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ebea:	b480      	push	{r7}
 800ebec:	b085      	sub	sp, #20
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
 800ebf2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	881b      	ldrh	r3, [r3, #0]
 800ebfc:	68fa      	ldr	r2, [r7, #12]
 800ebfe:	7812      	ldrb	r2, [r2, #0]
 800ec00:	4413      	add	r3, r2
 800ec02:	b29a      	uxth	r2, r3
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	461a      	mov	r2, r3
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	4413      	add	r3, r2
 800ec12:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ec14:	68fb      	ldr	r3, [r7, #12]
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3714      	adds	r7, #20
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr

0800ec22 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ec22:	b480      	push	{r7}
 800ec24:	b087      	sub	sp, #28
 800ec26:	af00      	add	r7, sp, #0
 800ec28:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	3301      	adds	r3, #1
 800ec38:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ec40:	8a3b      	ldrh	r3, [r7, #16]
 800ec42:	021b      	lsls	r3, r3, #8
 800ec44:	b21a      	sxth	r2, r3
 800ec46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	b21b      	sxth	r3, r3
 800ec4e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ec50:	89fb      	ldrh	r3, [r7, #14]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	371c      	adds	r7, #28
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr
	...

0800ec60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b084      	sub	sp, #16
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	781b      	ldrb	r3, [r3, #0]
 800ec72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec76:	2b40      	cmp	r3, #64	@ 0x40
 800ec78:	d005      	beq.n	800ec86 <USBD_StdDevReq+0x26>
 800ec7a:	2b40      	cmp	r3, #64	@ 0x40
 800ec7c:	d857      	bhi.n	800ed2e <USBD_StdDevReq+0xce>
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d00f      	beq.n	800eca2 <USBD_StdDevReq+0x42>
 800ec82:	2b20      	cmp	r3, #32
 800ec84:	d153      	bne.n	800ed2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	32ae      	adds	r2, #174	@ 0xae
 800ec90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	6839      	ldr	r1, [r7, #0]
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	4798      	blx	r3
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	73fb      	strb	r3, [r7, #15]
      break;
 800eca0:	e04a      	b.n	800ed38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	785b      	ldrb	r3, [r3, #1]
 800eca6:	2b09      	cmp	r3, #9
 800eca8:	d83b      	bhi.n	800ed22 <USBD_StdDevReq+0xc2>
 800ecaa:	a201      	add	r2, pc, #4	@ (adr r2, 800ecb0 <USBD_StdDevReq+0x50>)
 800ecac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecb0:	0800ed05 	.word	0x0800ed05
 800ecb4:	0800ed19 	.word	0x0800ed19
 800ecb8:	0800ed23 	.word	0x0800ed23
 800ecbc:	0800ed0f 	.word	0x0800ed0f
 800ecc0:	0800ed23 	.word	0x0800ed23
 800ecc4:	0800ece3 	.word	0x0800ece3
 800ecc8:	0800ecd9 	.word	0x0800ecd9
 800eccc:	0800ed23 	.word	0x0800ed23
 800ecd0:	0800ecfb 	.word	0x0800ecfb
 800ecd4:	0800eced 	.word	0x0800eced
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ecd8:	6839      	ldr	r1, [r7, #0]
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f000 fa3c 	bl	800f158 <USBD_GetDescriptor>
          break;
 800ece0:	e024      	b.n	800ed2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ece2:	6839      	ldr	r1, [r7, #0]
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f000 fba1 	bl	800f42c <USBD_SetAddress>
          break;
 800ecea:	e01f      	b.n	800ed2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ecec:	6839      	ldr	r1, [r7, #0]
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	f000 fbe0 	bl	800f4b4 <USBD_SetConfig>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	73fb      	strb	r3, [r7, #15]
          break;
 800ecf8:	e018      	b.n	800ed2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ecfa:	6839      	ldr	r1, [r7, #0]
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f000 fc83 	bl	800f608 <USBD_GetConfig>
          break;
 800ed02:	e013      	b.n	800ed2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ed04:	6839      	ldr	r1, [r7, #0]
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f000 fcb4 	bl	800f674 <USBD_GetStatus>
          break;
 800ed0c:	e00e      	b.n	800ed2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ed0e:	6839      	ldr	r1, [r7, #0]
 800ed10:	6878      	ldr	r0, [r7, #4]
 800ed12:	f000 fce3 	bl	800f6dc <USBD_SetFeature>
          break;
 800ed16:	e009      	b.n	800ed2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ed18:	6839      	ldr	r1, [r7, #0]
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 fd07 	bl	800f72e <USBD_ClrFeature>
          break;
 800ed20:	e004      	b.n	800ed2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ed22:	6839      	ldr	r1, [r7, #0]
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 fd5e 	bl	800f7e6 <USBD_CtlError>
          break;
 800ed2a:	bf00      	nop
      }
      break;
 800ed2c:	e004      	b.n	800ed38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ed2e:	6839      	ldr	r1, [r7, #0]
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 fd58 	bl	800f7e6 <USBD_CtlError>
      break;
 800ed36:	bf00      	nop
  }

  return ret;
 800ed38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop

0800ed44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ed5a:	2b40      	cmp	r3, #64	@ 0x40
 800ed5c:	d005      	beq.n	800ed6a <USBD_StdItfReq+0x26>
 800ed5e:	2b40      	cmp	r3, #64	@ 0x40
 800ed60:	d852      	bhi.n	800ee08 <USBD_StdItfReq+0xc4>
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d001      	beq.n	800ed6a <USBD_StdItfReq+0x26>
 800ed66:	2b20      	cmp	r3, #32
 800ed68:	d14e      	bne.n	800ee08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	3b01      	subs	r3, #1
 800ed74:	2b02      	cmp	r3, #2
 800ed76:	d840      	bhi.n	800edfa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	889b      	ldrh	r3, [r3, #4]
 800ed7c:	b2db      	uxtb	r3, r3
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	d836      	bhi.n	800edf0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	889b      	ldrh	r3, [r3, #4]
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	4619      	mov	r1, r3
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f7ff fedb 	bl	800eb46 <USBD_CoreFindIF>
 800ed90:	4603      	mov	r3, r0
 800ed92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ed94:	7bbb      	ldrb	r3, [r7, #14]
 800ed96:	2bff      	cmp	r3, #255	@ 0xff
 800ed98:	d01d      	beq.n	800edd6 <USBD_StdItfReq+0x92>
 800ed9a:	7bbb      	ldrb	r3, [r7, #14]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d11a      	bne.n	800edd6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800eda0:	7bba      	ldrb	r2, [r7, #14]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	32ae      	adds	r2, #174	@ 0xae
 800eda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d00f      	beq.n	800edd0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800edb0:	7bba      	ldrb	r2, [r7, #14]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800edb8:	7bba      	ldrb	r2, [r7, #14]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	32ae      	adds	r2, #174	@ 0xae
 800edbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edc2:	689b      	ldr	r3, [r3, #8]
 800edc4:	6839      	ldr	r1, [r7, #0]
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	4798      	blx	r3
 800edca:	4603      	mov	r3, r0
 800edcc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800edce:	e004      	b.n	800edda <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800edd0:	2303      	movs	r3, #3
 800edd2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800edd4:	e001      	b.n	800edda <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800edd6:	2303      	movs	r3, #3
 800edd8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	88db      	ldrh	r3, [r3, #6]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d110      	bne.n	800ee04 <USBD_StdItfReq+0xc0>
 800ede2:	7bfb      	ldrb	r3, [r7, #15]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d10d      	bne.n	800ee04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f000 fed4 	bl	800fb96 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800edee:	e009      	b.n	800ee04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800edf0:	6839      	ldr	r1, [r7, #0]
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f000 fcf7 	bl	800f7e6 <USBD_CtlError>
          break;
 800edf8:	e004      	b.n	800ee04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800edfa:	6839      	ldr	r1, [r7, #0]
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 fcf2 	bl	800f7e6 <USBD_CtlError>
          break;
 800ee02:	e000      	b.n	800ee06 <USBD_StdItfReq+0xc2>
          break;
 800ee04:	bf00      	nop
      }
      break;
 800ee06:	e004      	b.n	800ee12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ee08:	6839      	ldr	r1, [r7, #0]
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 fceb 	bl	800f7e6 <USBD_CtlError>
      break;
 800ee10:	bf00      	nop
  }

  return ret;
 800ee12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3710      	adds	r7, #16
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b084      	sub	sp, #16
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ee26:	2300      	movs	r3, #0
 800ee28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	889b      	ldrh	r3, [r3, #4]
 800ee2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	781b      	ldrb	r3, [r3, #0]
 800ee34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ee38:	2b40      	cmp	r3, #64	@ 0x40
 800ee3a:	d007      	beq.n	800ee4c <USBD_StdEPReq+0x30>
 800ee3c:	2b40      	cmp	r3, #64	@ 0x40
 800ee3e:	f200 817f 	bhi.w	800f140 <USBD_StdEPReq+0x324>
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d02a      	beq.n	800ee9c <USBD_StdEPReq+0x80>
 800ee46:	2b20      	cmp	r3, #32
 800ee48:	f040 817a 	bne.w	800f140 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ee4c:	7bbb      	ldrb	r3, [r7, #14]
 800ee4e:	4619      	mov	r1, r3
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f7ff fe85 	bl	800eb60 <USBD_CoreFindEP>
 800ee56:	4603      	mov	r3, r0
 800ee58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ee5a:	7b7b      	ldrb	r3, [r7, #13]
 800ee5c:	2bff      	cmp	r3, #255	@ 0xff
 800ee5e:	f000 8174 	beq.w	800f14a <USBD_StdEPReq+0x32e>
 800ee62:	7b7b      	ldrb	r3, [r7, #13]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f040 8170 	bne.w	800f14a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ee6a:	7b7a      	ldrb	r2, [r7, #13]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ee72:	7b7a      	ldrb	r2, [r7, #13]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	32ae      	adds	r2, #174	@ 0xae
 800ee78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee7c:	689b      	ldr	r3, [r3, #8]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	f000 8163 	beq.w	800f14a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ee84:	7b7a      	ldrb	r2, [r7, #13]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	32ae      	adds	r2, #174	@ 0xae
 800ee8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee8e:	689b      	ldr	r3, [r3, #8]
 800ee90:	6839      	ldr	r1, [r7, #0]
 800ee92:	6878      	ldr	r0, [r7, #4]
 800ee94:	4798      	blx	r3
 800ee96:	4603      	mov	r3, r0
 800ee98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ee9a:	e156      	b.n	800f14a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	785b      	ldrb	r3, [r3, #1]
 800eea0:	2b03      	cmp	r3, #3
 800eea2:	d008      	beq.n	800eeb6 <USBD_StdEPReq+0x9a>
 800eea4:	2b03      	cmp	r3, #3
 800eea6:	f300 8145 	bgt.w	800f134 <USBD_StdEPReq+0x318>
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	f000 809b 	beq.w	800efe6 <USBD_StdEPReq+0x1ca>
 800eeb0:	2b01      	cmp	r3, #1
 800eeb2:	d03c      	beq.n	800ef2e <USBD_StdEPReq+0x112>
 800eeb4:	e13e      	b.n	800f134 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eebc:	b2db      	uxtb	r3, r3
 800eebe:	2b02      	cmp	r3, #2
 800eec0:	d002      	beq.n	800eec8 <USBD_StdEPReq+0xac>
 800eec2:	2b03      	cmp	r3, #3
 800eec4:	d016      	beq.n	800eef4 <USBD_StdEPReq+0xd8>
 800eec6:	e02c      	b.n	800ef22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eec8:	7bbb      	ldrb	r3, [r7, #14]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d00d      	beq.n	800eeea <USBD_StdEPReq+0xce>
 800eece:	7bbb      	ldrb	r3, [r7, #14]
 800eed0:	2b80      	cmp	r3, #128	@ 0x80
 800eed2:	d00a      	beq.n	800eeea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800eed4:	7bbb      	ldrb	r3, [r7, #14]
 800eed6:	4619      	mov	r1, r3
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f7ff fa41 	bl	800e360 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eede:	2180      	movs	r1, #128	@ 0x80
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f7ff fa3d 	bl	800e360 <USBD_LL_StallEP>
 800eee6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eee8:	e020      	b.n	800ef2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800eeea:	6839      	ldr	r1, [r7, #0]
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f000 fc7a 	bl	800f7e6 <USBD_CtlError>
              break;
 800eef2:	e01b      	b.n	800ef2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	885b      	ldrh	r3, [r3, #2]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d10e      	bne.n	800ef1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eefc:	7bbb      	ldrb	r3, [r7, #14]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d00b      	beq.n	800ef1a <USBD_StdEPReq+0xfe>
 800ef02:	7bbb      	ldrb	r3, [r7, #14]
 800ef04:	2b80      	cmp	r3, #128	@ 0x80
 800ef06:	d008      	beq.n	800ef1a <USBD_StdEPReq+0xfe>
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	88db      	ldrh	r3, [r3, #6]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d104      	bne.n	800ef1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef10:	7bbb      	ldrb	r3, [r7, #14]
 800ef12:	4619      	mov	r1, r3
 800ef14:	6878      	ldr	r0, [r7, #4]
 800ef16:	f7ff fa23 	bl	800e360 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 fe3b 	bl	800fb96 <USBD_CtlSendStatus>

              break;
 800ef20:	e004      	b.n	800ef2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ef22:	6839      	ldr	r1, [r7, #0]
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f000 fc5e 	bl	800f7e6 <USBD_CtlError>
              break;
 800ef2a:	bf00      	nop
          }
          break;
 800ef2c:	e107      	b.n	800f13e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef34:	b2db      	uxtb	r3, r3
 800ef36:	2b02      	cmp	r3, #2
 800ef38:	d002      	beq.n	800ef40 <USBD_StdEPReq+0x124>
 800ef3a:	2b03      	cmp	r3, #3
 800ef3c:	d016      	beq.n	800ef6c <USBD_StdEPReq+0x150>
 800ef3e:	e04b      	b.n	800efd8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef40:	7bbb      	ldrb	r3, [r7, #14]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d00d      	beq.n	800ef62 <USBD_StdEPReq+0x146>
 800ef46:	7bbb      	ldrb	r3, [r7, #14]
 800ef48:	2b80      	cmp	r3, #128	@ 0x80
 800ef4a:	d00a      	beq.n	800ef62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef4c:	7bbb      	ldrb	r3, [r7, #14]
 800ef4e:	4619      	mov	r1, r3
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f7ff fa05 	bl	800e360 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef56:	2180      	movs	r1, #128	@ 0x80
 800ef58:	6878      	ldr	r0, [r7, #4]
 800ef5a:	f7ff fa01 	bl	800e360 <USBD_LL_StallEP>
 800ef5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ef60:	e040      	b.n	800efe4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ef62:	6839      	ldr	r1, [r7, #0]
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f000 fc3e 	bl	800f7e6 <USBD_CtlError>
              break;
 800ef6a:	e03b      	b.n	800efe4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ef6c:	683b      	ldr	r3, [r7, #0]
 800ef6e:	885b      	ldrh	r3, [r3, #2]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d136      	bne.n	800efe2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ef74:	7bbb      	ldrb	r3, [r7, #14]
 800ef76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d004      	beq.n	800ef88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ef7e:	7bbb      	ldrb	r3, [r7, #14]
 800ef80:	4619      	mov	r1, r3
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f7ff fa05 	bl	800e392 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 fe04 	bl	800fb96 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ef8e:	7bbb      	ldrb	r3, [r7, #14]
 800ef90:	4619      	mov	r1, r3
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f7ff fde4 	bl	800eb60 <USBD_CoreFindEP>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ef9c:	7b7b      	ldrb	r3, [r7, #13]
 800ef9e:	2bff      	cmp	r3, #255	@ 0xff
 800efa0:	d01f      	beq.n	800efe2 <USBD_StdEPReq+0x1c6>
 800efa2:	7b7b      	ldrb	r3, [r7, #13]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d11c      	bne.n	800efe2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800efa8:	7b7a      	ldrb	r2, [r7, #13]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800efb0:	7b7a      	ldrb	r2, [r7, #13]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	32ae      	adds	r2, #174	@ 0xae
 800efb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d010      	beq.n	800efe2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800efc0:	7b7a      	ldrb	r2, [r7, #13]
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	32ae      	adds	r2, #174	@ 0xae
 800efc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efca:	689b      	ldr	r3, [r3, #8]
 800efcc:	6839      	ldr	r1, [r7, #0]
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	4798      	blx	r3
 800efd2:	4603      	mov	r3, r0
 800efd4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800efd6:	e004      	b.n	800efe2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800efd8:	6839      	ldr	r1, [r7, #0]
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f000 fc03 	bl	800f7e6 <USBD_CtlError>
              break;
 800efe0:	e000      	b.n	800efe4 <USBD_StdEPReq+0x1c8>
              break;
 800efe2:	bf00      	nop
          }
          break;
 800efe4:	e0ab      	b.n	800f13e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800efec:	b2db      	uxtb	r3, r3
 800efee:	2b02      	cmp	r3, #2
 800eff0:	d002      	beq.n	800eff8 <USBD_StdEPReq+0x1dc>
 800eff2:	2b03      	cmp	r3, #3
 800eff4:	d032      	beq.n	800f05c <USBD_StdEPReq+0x240>
 800eff6:	e097      	b.n	800f128 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eff8:	7bbb      	ldrb	r3, [r7, #14]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d007      	beq.n	800f00e <USBD_StdEPReq+0x1f2>
 800effe:	7bbb      	ldrb	r3, [r7, #14]
 800f000:	2b80      	cmp	r3, #128	@ 0x80
 800f002:	d004      	beq.n	800f00e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f004:	6839      	ldr	r1, [r7, #0]
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f000 fbed 	bl	800f7e6 <USBD_CtlError>
                break;
 800f00c:	e091      	b.n	800f132 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f00e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f012:	2b00      	cmp	r3, #0
 800f014:	da0b      	bge.n	800f02e <USBD_StdEPReq+0x212>
 800f016:	7bbb      	ldrb	r3, [r7, #14]
 800f018:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f01c:	4613      	mov	r3, r2
 800f01e:	009b      	lsls	r3, r3, #2
 800f020:	4413      	add	r3, r2
 800f022:	009b      	lsls	r3, r3, #2
 800f024:	3310      	adds	r3, #16
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	4413      	add	r3, r2
 800f02a:	3304      	adds	r3, #4
 800f02c:	e00b      	b.n	800f046 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f02e:	7bbb      	ldrb	r3, [r7, #14]
 800f030:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f034:	4613      	mov	r3, r2
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	4413      	add	r3, r2
 800f03a:	009b      	lsls	r3, r3, #2
 800f03c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f040:	687a      	ldr	r2, [r7, #4]
 800f042:	4413      	add	r3, r2
 800f044:	3304      	adds	r3, #4
 800f046:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f048:	68bb      	ldr	r3, [r7, #8]
 800f04a:	2200      	movs	r2, #0
 800f04c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	2202      	movs	r2, #2
 800f052:	4619      	mov	r1, r3
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f000 fd44 	bl	800fae2 <USBD_CtlSendData>
              break;
 800f05a:	e06a      	b.n	800f132 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f05c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f060:	2b00      	cmp	r3, #0
 800f062:	da11      	bge.n	800f088 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f064:	7bbb      	ldrb	r3, [r7, #14]
 800f066:	f003 020f 	and.w	r2, r3, #15
 800f06a:	6879      	ldr	r1, [r7, #4]
 800f06c:	4613      	mov	r3, r2
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	4413      	add	r3, r2
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	440b      	add	r3, r1
 800f076:	3324      	adds	r3, #36	@ 0x24
 800f078:	881b      	ldrh	r3, [r3, #0]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d117      	bne.n	800f0ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f07e:	6839      	ldr	r1, [r7, #0]
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f000 fbb0 	bl	800f7e6 <USBD_CtlError>
                  break;
 800f086:	e054      	b.n	800f132 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f088:	7bbb      	ldrb	r3, [r7, #14]
 800f08a:	f003 020f 	and.w	r2, r3, #15
 800f08e:	6879      	ldr	r1, [r7, #4]
 800f090:	4613      	mov	r3, r2
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	4413      	add	r3, r2
 800f096:	009b      	lsls	r3, r3, #2
 800f098:	440b      	add	r3, r1
 800f09a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f09e:	881b      	ldrh	r3, [r3, #0]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d104      	bne.n	800f0ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f0a4:	6839      	ldr	r1, [r7, #0]
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 fb9d 	bl	800f7e6 <USBD_CtlError>
                  break;
 800f0ac:	e041      	b.n	800f132 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f0ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	da0b      	bge.n	800f0ce <USBD_StdEPReq+0x2b2>
 800f0b6:	7bbb      	ldrb	r3, [r7, #14]
 800f0b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f0bc:	4613      	mov	r3, r2
 800f0be:	009b      	lsls	r3, r3, #2
 800f0c0:	4413      	add	r3, r2
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	3310      	adds	r3, #16
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	4413      	add	r3, r2
 800f0ca:	3304      	adds	r3, #4
 800f0cc:	e00b      	b.n	800f0e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f0ce:	7bbb      	ldrb	r3, [r7, #14]
 800f0d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	009b      	lsls	r3, r3, #2
 800f0d8:	4413      	add	r3, r2
 800f0da:	009b      	lsls	r3, r3, #2
 800f0dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f0e0:	687a      	ldr	r2, [r7, #4]
 800f0e2:	4413      	add	r3, r2
 800f0e4:	3304      	adds	r3, #4
 800f0e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f0e8:	7bbb      	ldrb	r3, [r7, #14]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d002      	beq.n	800f0f4 <USBD_StdEPReq+0x2d8>
 800f0ee:	7bbb      	ldrb	r3, [r7, #14]
 800f0f0:	2b80      	cmp	r3, #128	@ 0x80
 800f0f2:	d103      	bne.n	800f0fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	601a      	str	r2, [r3, #0]
 800f0fa:	e00e      	b.n	800f11a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f0fc:	7bbb      	ldrb	r3, [r7, #14]
 800f0fe:	4619      	mov	r1, r3
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f7ff f95f 	bl	800e3c4 <USBD_LL_IsStallEP>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d003      	beq.n	800f114 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f10c:	68bb      	ldr	r3, [r7, #8]
 800f10e:	2201      	movs	r2, #1
 800f110:	601a      	str	r2, [r3, #0]
 800f112:	e002      	b.n	800f11a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	2200      	movs	r2, #0
 800f118:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	2202      	movs	r2, #2
 800f11e:	4619      	mov	r1, r3
 800f120:	6878      	ldr	r0, [r7, #4]
 800f122:	f000 fcde 	bl	800fae2 <USBD_CtlSendData>
              break;
 800f126:	e004      	b.n	800f132 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f128:	6839      	ldr	r1, [r7, #0]
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f000 fb5b 	bl	800f7e6 <USBD_CtlError>
              break;
 800f130:	bf00      	nop
          }
          break;
 800f132:	e004      	b.n	800f13e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f134:	6839      	ldr	r1, [r7, #0]
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 fb55 	bl	800f7e6 <USBD_CtlError>
          break;
 800f13c:	bf00      	nop
      }
      break;
 800f13e:	e005      	b.n	800f14c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f140:	6839      	ldr	r1, [r7, #0]
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 fb4f 	bl	800f7e6 <USBD_CtlError>
      break;
 800f148:	e000      	b.n	800f14c <USBD_StdEPReq+0x330>
      break;
 800f14a:	bf00      	nop
  }

  return ret;
 800f14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
	...

0800f158 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f162:	2300      	movs	r3, #0
 800f164:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f166:	2300      	movs	r3, #0
 800f168:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f16a:	2300      	movs	r3, #0
 800f16c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	885b      	ldrh	r3, [r3, #2]
 800f172:	0a1b      	lsrs	r3, r3, #8
 800f174:	b29b      	uxth	r3, r3
 800f176:	3b01      	subs	r3, #1
 800f178:	2b06      	cmp	r3, #6
 800f17a:	f200 8128 	bhi.w	800f3ce <USBD_GetDescriptor+0x276>
 800f17e:	a201      	add	r2, pc, #4	@ (adr r2, 800f184 <USBD_GetDescriptor+0x2c>)
 800f180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f184:	0800f1a1 	.word	0x0800f1a1
 800f188:	0800f1b9 	.word	0x0800f1b9
 800f18c:	0800f1f9 	.word	0x0800f1f9
 800f190:	0800f3cf 	.word	0x0800f3cf
 800f194:	0800f3cf 	.word	0x0800f3cf
 800f198:	0800f36f 	.word	0x0800f36f
 800f19c:	0800f39b 	.word	0x0800f39b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	7c12      	ldrb	r2, [r2, #16]
 800f1ac:	f107 0108 	add.w	r1, r7, #8
 800f1b0:	4610      	mov	r0, r2
 800f1b2:	4798      	blx	r3
 800f1b4:	60f8      	str	r0, [r7, #12]
      break;
 800f1b6:	e112      	b.n	800f3de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	7c1b      	ldrb	r3, [r3, #16]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d10d      	bne.n	800f1dc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1c8:	f107 0208 	add.w	r2, r7, #8
 800f1cc:	4610      	mov	r0, r2
 800f1ce:	4798      	blx	r3
 800f1d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	2202      	movs	r2, #2
 800f1d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f1da:	e100      	b.n	800f3de <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1e4:	f107 0208 	add.w	r2, r7, #8
 800f1e8:	4610      	mov	r0, r2
 800f1ea:	4798      	blx	r3
 800f1ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	2202      	movs	r2, #2
 800f1f4:	701a      	strb	r2, [r3, #0]
      break;
 800f1f6:	e0f2      	b.n	800f3de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	885b      	ldrh	r3, [r3, #2]
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	2b05      	cmp	r3, #5
 800f200:	f200 80ac 	bhi.w	800f35c <USBD_GetDescriptor+0x204>
 800f204:	a201      	add	r2, pc, #4	@ (adr r2, 800f20c <USBD_GetDescriptor+0xb4>)
 800f206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f20a:	bf00      	nop
 800f20c:	0800f225 	.word	0x0800f225
 800f210:	0800f259 	.word	0x0800f259
 800f214:	0800f28d 	.word	0x0800f28d
 800f218:	0800f2c1 	.word	0x0800f2c1
 800f21c:	0800f2f5 	.word	0x0800f2f5
 800f220:	0800f329 	.word	0x0800f329
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d00b      	beq.n	800f248 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f236:	685b      	ldr	r3, [r3, #4]
 800f238:	687a      	ldr	r2, [r7, #4]
 800f23a:	7c12      	ldrb	r2, [r2, #16]
 800f23c:	f107 0108 	add.w	r1, r7, #8
 800f240:	4610      	mov	r0, r2
 800f242:	4798      	blx	r3
 800f244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f246:	e091      	b.n	800f36c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f248:	6839      	ldr	r1, [r7, #0]
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 facb 	bl	800f7e6 <USBD_CtlError>
            err++;
 800f250:	7afb      	ldrb	r3, [r7, #11]
 800f252:	3301      	adds	r3, #1
 800f254:	72fb      	strb	r3, [r7, #11]
          break;
 800f256:	e089      	b.n	800f36c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00b      	beq.n	800f27c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f26a:	689b      	ldr	r3, [r3, #8]
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	7c12      	ldrb	r2, [r2, #16]
 800f270:	f107 0108 	add.w	r1, r7, #8
 800f274:	4610      	mov	r0, r2
 800f276:	4798      	blx	r3
 800f278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f27a:	e077      	b.n	800f36c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f27c:	6839      	ldr	r1, [r7, #0]
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 fab1 	bl	800f7e6 <USBD_CtlError>
            err++;
 800f284:	7afb      	ldrb	r3, [r7, #11]
 800f286:	3301      	adds	r3, #1
 800f288:	72fb      	strb	r3, [r7, #11]
          break;
 800f28a:	e06f      	b.n	800f36c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d00b      	beq.n	800f2b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f29e:	68db      	ldr	r3, [r3, #12]
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	7c12      	ldrb	r2, [r2, #16]
 800f2a4:	f107 0108 	add.w	r1, r7, #8
 800f2a8:	4610      	mov	r0, r2
 800f2aa:	4798      	blx	r3
 800f2ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2ae:	e05d      	b.n	800f36c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f2b0:	6839      	ldr	r1, [r7, #0]
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f000 fa97 	bl	800f7e6 <USBD_CtlError>
            err++;
 800f2b8:	7afb      	ldrb	r3, [r7, #11]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	72fb      	strb	r3, [r7, #11]
          break;
 800f2be:	e055      	b.n	800f36c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2c6:	691b      	ldr	r3, [r3, #16]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d00b      	beq.n	800f2e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2d2:	691b      	ldr	r3, [r3, #16]
 800f2d4:	687a      	ldr	r2, [r7, #4]
 800f2d6:	7c12      	ldrb	r2, [r2, #16]
 800f2d8:	f107 0108 	add.w	r1, r7, #8
 800f2dc:	4610      	mov	r0, r2
 800f2de:	4798      	blx	r3
 800f2e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2e2:	e043      	b.n	800f36c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f2e4:	6839      	ldr	r1, [r7, #0]
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f000 fa7d 	bl	800f7e6 <USBD_CtlError>
            err++;
 800f2ec:	7afb      	ldrb	r3, [r7, #11]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	72fb      	strb	r3, [r7, #11]
          break;
 800f2f2:	e03b      	b.n	800f36c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2fa:	695b      	ldr	r3, [r3, #20]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d00b      	beq.n	800f318 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f306:	695b      	ldr	r3, [r3, #20]
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	7c12      	ldrb	r2, [r2, #16]
 800f30c:	f107 0108 	add.w	r1, r7, #8
 800f310:	4610      	mov	r0, r2
 800f312:	4798      	blx	r3
 800f314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f316:	e029      	b.n	800f36c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f318:	6839      	ldr	r1, [r7, #0]
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 fa63 	bl	800f7e6 <USBD_CtlError>
            err++;
 800f320:	7afb      	ldrb	r3, [r7, #11]
 800f322:	3301      	adds	r3, #1
 800f324:	72fb      	strb	r3, [r7, #11]
          break;
 800f326:	e021      	b.n	800f36c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f32e:	699b      	ldr	r3, [r3, #24]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d00b      	beq.n	800f34c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f33a:	699b      	ldr	r3, [r3, #24]
 800f33c:	687a      	ldr	r2, [r7, #4]
 800f33e:	7c12      	ldrb	r2, [r2, #16]
 800f340:	f107 0108 	add.w	r1, r7, #8
 800f344:	4610      	mov	r0, r2
 800f346:	4798      	blx	r3
 800f348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f34a:	e00f      	b.n	800f36c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f34c:	6839      	ldr	r1, [r7, #0]
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 fa49 	bl	800f7e6 <USBD_CtlError>
            err++;
 800f354:	7afb      	ldrb	r3, [r7, #11]
 800f356:	3301      	adds	r3, #1
 800f358:	72fb      	strb	r3, [r7, #11]
          break;
 800f35a:	e007      	b.n	800f36c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f35c:	6839      	ldr	r1, [r7, #0]
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 fa41 	bl	800f7e6 <USBD_CtlError>
          err++;
 800f364:	7afb      	ldrb	r3, [r7, #11]
 800f366:	3301      	adds	r3, #1
 800f368:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f36a:	bf00      	nop
      }
      break;
 800f36c:	e037      	b.n	800f3de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	7c1b      	ldrb	r3, [r3, #16]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d109      	bne.n	800f38a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f37c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f37e:	f107 0208 	add.w	r2, r7, #8
 800f382:	4610      	mov	r0, r2
 800f384:	4798      	blx	r3
 800f386:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f388:	e029      	b.n	800f3de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f38a:	6839      	ldr	r1, [r7, #0]
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f000 fa2a 	bl	800f7e6 <USBD_CtlError>
        err++;
 800f392:	7afb      	ldrb	r3, [r7, #11]
 800f394:	3301      	adds	r3, #1
 800f396:	72fb      	strb	r3, [r7, #11]
      break;
 800f398:	e021      	b.n	800f3de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	7c1b      	ldrb	r3, [r3, #16]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d10d      	bne.n	800f3be <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f3aa:	f107 0208 	add.w	r2, r7, #8
 800f3ae:	4610      	mov	r0, r2
 800f3b0:	4798      	blx	r3
 800f3b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	2207      	movs	r2, #7
 800f3ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f3bc:	e00f      	b.n	800f3de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f3be:	6839      	ldr	r1, [r7, #0]
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 fa10 	bl	800f7e6 <USBD_CtlError>
        err++;
 800f3c6:	7afb      	ldrb	r3, [r7, #11]
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	72fb      	strb	r3, [r7, #11]
      break;
 800f3cc:	e007      	b.n	800f3de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f3ce:	6839      	ldr	r1, [r7, #0]
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 fa08 	bl	800f7e6 <USBD_CtlError>
      err++;
 800f3d6:	7afb      	ldrb	r3, [r7, #11]
 800f3d8:	3301      	adds	r3, #1
 800f3da:	72fb      	strb	r3, [r7, #11]
      break;
 800f3dc:	bf00      	nop
  }

  if (err != 0U)
 800f3de:	7afb      	ldrb	r3, [r7, #11]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d11e      	bne.n	800f422 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	88db      	ldrh	r3, [r3, #6]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d016      	beq.n	800f41a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f3ec:	893b      	ldrh	r3, [r7, #8]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d00e      	beq.n	800f410 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	88da      	ldrh	r2, [r3, #6]
 800f3f6:	893b      	ldrh	r3, [r7, #8]
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	bf28      	it	cs
 800f3fc:	4613      	movcs	r3, r2
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f402:	893b      	ldrh	r3, [r7, #8]
 800f404:	461a      	mov	r2, r3
 800f406:	68f9      	ldr	r1, [r7, #12]
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 fb6a 	bl	800fae2 <USBD_CtlSendData>
 800f40e:	e009      	b.n	800f424 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f410:	6839      	ldr	r1, [r7, #0]
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 f9e7 	bl	800f7e6 <USBD_CtlError>
 800f418:	e004      	b.n	800f424 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 fbbb 	bl	800fb96 <USBD_CtlSendStatus>
 800f420:	e000      	b.n	800f424 <USBD_GetDescriptor+0x2cc>
    return;
 800f422:	bf00      	nop
  }
}
 800f424:	3710      	adds	r7, #16
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop

0800f42c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	889b      	ldrh	r3, [r3, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d131      	bne.n	800f4a2 <USBD_SetAddress+0x76>
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	88db      	ldrh	r3, [r3, #6]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d12d      	bne.n	800f4a2 <USBD_SetAddress+0x76>
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	885b      	ldrh	r3, [r3, #2]
 800f44a:	2b7f      	cmp	r3, #127	@ 0x7f
 800f44c:	d829      	bhi.n	800f4a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	885b      	ldrh	r3, [r3, #2]
 800f452:	b2db      	uxtb	r3, r3
 800f454:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f458:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b03      	cmp	r3, #3
 800f464:	d104      	bne.n	800f470 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f466:	6839      	ldr	r1, [r7, #0]
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 f9bc 	bl	800f7e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f46e:	e01d      	b.n	800f4ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	7bfa      	ldrb	r2, [r7, #15]
 800f474:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f478:	7bfb      	ldrb	r3, [r7, #15]
 800f47a:	4619      	mov	r1, r3
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7fe ffcd 	bl	800e41c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 fb87 	bl	800fb96 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f488:	7bfb      	ldrb	r3, [r7, #15]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d004      	beq.n	800f498 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2202      	movs	r2, #2
 800f492:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f496:	e009      	b.n	800f4ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2201      	movs	r2, #1
 800f49c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4a0:	e004      	b.n	800f4ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f4a2:	6839      	ldr	r1, [r7, #0]
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f000 f99e 	bl	800f7e6 <USBD_CtlError>
  }
}
 800f4aa:	bf00      	nop
 800f4ac:	bf00      	nop
 800f4ae:	3710      	adds	r7, #16
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	885b      	ldrh	r3, [r3, #2]
 800f4c6:	b2da      	uxtb	r2, r3
 800f4c8:	4b4e      	ldr	r3, [pc, #312]	@ (800f604 <USBD_SetConfig+0x150>)
 800f4ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f4cc:	4b4d      	ldr	r3, [pc, #308]	@ (800f604 <USBD_SetConfig+0x150>)
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	d905      	bls.n	800f4e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f4d4:	6839      	ldr	r1, [r7, #0]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 f985 	bl	800f7e6 <USBD_CtlError>
    return USBD_FAIL;
 800f4dc:	2303      	movs	r3, #3
 800f4de:	e08c      	b.n	800f5fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	2b02      	cmp	r3, #2
 800f4ea:	d002      	beq.n	800f4f2 <USBD_SetConfig+0x3e>
 800f4ec:	2b03      	cmp	r3, #3
 800f4ee:	d029      	beq.n	800f544 <USBD_SetConfig+0x90>
 800f4f0:	e075      	b.n	800f5de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f4f2:	4b44      	ldr	r3, [pc, #272]	@ (800f604 <USBD_SetConfig+0x150>)
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d020      	beq.n	800f53c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f4fa:	4b42      	ldr	r3, [pc, #264]	@ (800f604 <USBD_SetConfig+0x150>)
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	461a      	mov	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f504:	4b3f      	ldr	r3, [pc, #252]	@ (800f604 <USBD_SetConfig+0x150>)
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	4619      	mov	r1, r3
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f7ff f8a9 	bl	800e662 <USBD_SetClassConfig>
 800f510:	4603      	mov	r3, r0
 800f512:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f514:	7bfb      	ldrb	r3, [r7, #15]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d008      	beq.n	800f52c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f51a:	6839      	ldr	r1, [r7, #0]
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 f962 	bl	800f7e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2202      	movs	r2, #2
 800f526:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f52a:	e065      	b.n	800f5f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 fb32 	bl	800fb96 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2203      	movs	r2, #3
 800f536:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f53a:	e05d      	b.n	800f5f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 fb2a 	bl	800fb96 <USBD_CtlSendStatus>
      break;
 800f542:	e059      	b.n	800f5f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f544:	4b2f      	ldr	r3, [pc, #188]	@ (800f604 <USBD_SetConfig+0x150>)
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d112      	bne.n	800f572 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2202      	movs	r2, #2
 800f550:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f554:	4b2b      	ldr	r3, [pc, #172]	@ (800f604 <USBD_SetConfig+0x150>)
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	461a      	mov	r2, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f55e:	4b29      	ldr	r3, [pc, #164]	@ (800f604 <USBD_SetConfig+0x150>)
 800f560:	781b      	ldrb	r3, [r3, #0]
 800f562:	4619      	mov	r1, r3
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f7ff f898 	bl	800e69a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f000 fb13 	bl	800fb96 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f570:	e042      	b.n	800f5f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f572:	4b24      	ldr	r3, [pc, #144]	@ (800f604 <USBD_SetConfig+0x150>)
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	461a      	mov	r2, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d02a      	beq.n	800f5d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	b2db      	uxtb	r3, r3
 800f586:	4619      	mov	r1, r3
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f7ff f886 	bl	800e69a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f58e:	4b1d      	ldr	r3, [pc, #116]	@ (800f604 <USBD_SetConfig+0x150>)
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	461a      	mov	r2, r3
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f598:	4b1a      	ldr	r3, [pc, #104]	@ (800f604 <USBD_SetConfig+0x150>)
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	4619      	mov	r1, r3
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f7ff f85f 	bl	800e662 <USBD_SetClassConfig>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f5a8:	7bfb      	ldrb	r3, [r7, #15]
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d00f      	beq.n	800f5ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f5ae:	6839      	ldr	r1, [r7, #0]
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f000 f918 	bl	800f7e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	4619      	mov	r1, r3
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f7ff f86b 	bl	800e69a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2202      	movs	r2, #2
 800f5c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f5cc:	e014      	b.n	800f5f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f000 fae1 	bl	800fb96 <USBD_CtlSendStatus>
      break;
 800f5d4:	e010      	b.n	800f5f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 fadd 	bl	800fb96 <USBD_CtlSendStatus>
      break;
 800f5dc:	e00c      	b.n	800f5f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f5de:	6839      	ldr	r1, [r7, #0]
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f000 f900 	bl	800f7e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f5e6:	4b07      	ldr	r3, [pc, #28]	@ (800f604 <USBD_SetConfig+0x150>)
 800f5e8:	781b      	ldrb	r3, [r3, #0]
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f7ff f854 	bl	800e69a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f5f2:	2303      	movs	r3, #3
 800f5f4:	73fb      	strb	r3, [r7, #15]
      break;
 800f5f6:	bf00      	nop
  }

  return ret;
 800f5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3710      	adds	r7, #16
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	20001064 	.word	0x20001064

0800f608 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	88db      	ldrh	r3, [r3, #6]
 800f616:	2b01      	cmp	r3, #1
 800f618:	d004      	beq.n	800f624 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f61a:	6839      	ldr	r1, [r7, #0]
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f000 f8e2 	bl	800f7e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f622:	e023      	b.n	800f66c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f62a:	b2db      	uxtb	r3, r3
 800f62c:	2b02      	cmp	r3, #2
 800f62e:	dc02      	bgt.n	800f636 <USBD_GetConfig+0x2e>
 800f630:	2b00      	cmp	r3, #0
 800f632:	dc03      	bgt.n	800f63c <USBD_GetConfig+0x34>
 800f634:	e015      	b.n	800f662 <USBD_GetConfig+0x5a>
 800f636:	2b03      	cmp	r3, #3
 800f638:	d00b      	beq.n	800f652 <USBD_GetConfig+0x4a>
 800f63a:	e012      	b.n	800f662 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	3308      	adds	r3, #8
 800f646:	2201      	movs	r2, #1
 800f648:	4619      	mov	r1, r3
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	f000 fa49 	bl	800fae2 <USBD_CtlSendData>
        break;
 800f650:	e00c      	b.n	800f66c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	3304      	adds	r3, #4
 800f656:	2201      	movs	r2, #1
 800f658:	4619      	mov	r1, r3
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f000 fa41 	bl	800fae2 <USBD_CtlSendData>
        break;
 800f660:	e004      	b.n	800f66c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f662:	6839      	ldr	r1, [r7, #0]
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f000 f8be 	bl	800f7e6 <USBD_CtlError>
        break;
 800f66a:	bf00      	nop
}
 800f66c:	bf00      	nop
 800f66e:	3708      	adds	r7, #8
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}

0800f674 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b082      	sub	sp, #8
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f684:	b2db      	uxtb	r3, r3
 800f686:	3b01      	subs	r3, #1
 800f688:	2b02      	cmp	r3, #2
 800f68a:	d81e      	bhi.n	800f6ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	88db      	ldrh	r3, [r3, #6]
 800f690:	2b02      	cmp	r3, #2
 800f692:	d004      	beq.n	800f69e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f694:	6839      	ldr	r1, [r7, #0]
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f000 f8a5 	bl	800f7e6 <USBD_CtlError>
        break;
 800f69c:	e01a      	b.n	800f6d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d005      	beq.n	800f6ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	68db      	ldr	r3, [r3, #12]
 800f6b2:	f043 0202 	orr.w	r2, r3, #2
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	330c      	adds	r3, #12
 800f6be:	2202      	movs	r2, #2
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 fa0d 	bl	800fae2 <USBD_CtlSendData>
      break;
 800f6c8:	e004      	b.n	800f6d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f6ca:	6839      	ldr	r1, [r7, #0]
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f000 f88a 	bl	800f7e6 <USBD_CtlError>
      break;
 800f6d2:	bf00      	nop
  }
}
 800f6d4:	bf00      	nop
 800f6d6:	3708      	adds	r7, #8
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
 800f6e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	885b      	ldrh	r3, [r3, #2]
 800f6ea:	2b01      	cmp	r3, #1
 800f6ec:	d107      	bne.n	800f6fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2201      	movs	r2, #1
 800f6f2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 fa4d 	bl	800fb96 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f6fc:	e013      	b.n	800f726 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	885b      	ldrh	r3, [r3, #2]
 800f702:	2b02      	cmp	r3, #2
 800f704:	d10b      	bne.n	800f71e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	889b      	ldrh	r3, [r3, #4]
 800f70a:	0a1b      	lsrs	r3, r3, #8
 800f70c:	b29b      	uxth	r3, r3
 800f70e:	b2da      	uxtb	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f000 fa3d 	bl	800fb96 <USBD_CtlSendStatus>
}
 800f71c:	e003      	b.n	800f726 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f71e:	6839      	ldr	r1, [r7, #0]
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f000 f860 	bl	800f7e6 <USBD_CtlError>
}
 800f726:	bf00      	nop
 800f728:	3708      	adds	r7, #8
 800f72a:	46bd      	mov	sp, r7
 800f72c:	bd80      	pop	{r7, pc}

0800f72e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f72e:	b580      	push	{r7, lr}
 800f730:	b082      	sub	sp, #8
 800f732:	af00      	add	r7, sp, #0
 800f734:	6078      	str	r0, [r7, #4]
 800f736:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f73e:	b2db      	uxtb	r3, r3
 800f740:	3b01      	subs	r3, #1
 800f742:	2b02      	cmp	r3, #2
 800f744:	d80b      	bhi.n	800f75e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f746:	683b      	ldr	r3, [r7, #0]
 800f748:	885b      	ldrh	r3, [r3, #2]
 800f74a:	2b01      	cmp	r3, #1
 800f74c:	d10c      	bne.n	800f768 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2200      	movs	r2, #0
 800f752:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 fa1d 	bl	800fb96 <USBD_CtlSendStatus>
      }
      break;
 800f75c:	e004      	b.n	800f768 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f75e:	6839      	ldr	r1, [r7, #0]
 800f760:	6878      	ldr	r0, [r7, #4]
 800f762:	f000 f840 	bl	800f7e6 <USBD_CtlError>
      break;
 800f766:	e000      	b.n	800f76a <USBD_ClrFeature+0x3c>
      break;
 800f768:	bf00      	nop
  }
}
 800f76a:	bf00      	nop
 800f76c:	3708      	adds	r7, #8
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}

0800f772 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f772:	b580      	push	{r7, lr}
 800f774:	b084      	sub	sp, #16
 800f776:	af00      	add	r7, sp, #0
 800f778:	6078      	str	r0, [r7, #4]
 800f77a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	781a      	ldrb	r2, [r3, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	3301      	adds	r3, #1
 800f78c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	781a      	ldrb	r2, [r3, #0]
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	3301      	adds	r3, #1
 800f79a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f79c:	68f8      	ldr	r0, [r7, #12]
 800f79e:	f7ff fa40 	bl	800ec22 <SWAPBYTE>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f7ff fa33 	bl	800ec22 <SWAPBYTE>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	461a      	mov	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	3301      	adds	r3, #1
 800f7ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f7d0:	68f8      	ldr	r0, [r7, #12]
 800f7d2:	f7ff fa26 	bl	800ec22 <SWAPBYTE>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	461a      	mov	r2, r3
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	80da      	strh	r2, [r3, #6]
}
 800f7de:	bf00      	nop
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b082      	sub	sp, #8
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f7f0:	2180      	movs	r1, #128	@ 0x80
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f7fe fdb4 	bl	800e360 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f7f8:	2100      	movs	r1, #0
 800f7fa:	6878      	ldr	r0, [r7, #4]
 800f7fc:	f7fe fdb0 	bl	800e360 <USBD_LL_StallEP>
}
 800f800:	bf00      	nop
 800f802:	3708      	adds	r7, #8
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	b086      	sub	sp, #24
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f814:	2300      	movs	r3, #0
 800f816:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d036      	beq.n	800f88c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f822:	6938      	ldr	r0, [r7, #16]
 800f824:	f000 f836 	bl	800f894 <USBD_GetLen>
 800f828:	4603      	mov	r3, r0
 800f82a:	3301      	adds	r3, #1
 800f82c:	b29b      	uxth	r3, r3
 800f82e:	005b      	lsls	r3, r3, #1
 800f830:	b29a      	uxth	r2, r3
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f836:	7dfb      	ldrb	r3, [r7, #23]
 800f838:	68ba      	ldr	r2, [r7, #8]
 800f83a:	4413      	add	r3, r2
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	7812      	ldrb	r2, [r2, #0]
 800f840:	701a      	strb	r2, [r3, #0]
  idx++;
 800f842:	7dfb      	ldrb	r3, [r7, #23]
 800f844:	3301      	adds	r3, #1
 800f846:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f848:	7dfb      	ldrb	r3, [r7, #23]
 800f84a:	68ba      	ldr	r2, [r7, #8]
 800f84c:	4413      	add	r3, r2
 800f84e:	2203      	movs	r2, #3
 800f850:	701a      	strb	r2, [r3, #0]
  idx++;
 800f852:	7dfb      	ldrb	r3, [r7, #23]
 800f854:	3301      	adds	r3, #1
 800f856:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f858:	e013      	b.n	800f882 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f85a:	7dfb      	ldrb	r3, [r7, #23]
 800f85c:	68ba      	ldr	r2, [r7, #8]
 800f85e:	4413      	add	r3, r2
 800f860:	693a      	ldr	r2, [r7, #16]
 800f862:	7812      	ldrb	r2, [r2, #0]
 800f864:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	3301      	adds	r3, #1
 800f86a:	613b      	str	r3, [r7, #16]
    idx++;
 800f86c:	7dfb      	ldrb	r3, [r7, #23]
 800f86e:	3301      	adds	r3, #1
 800f870:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f872:	7dfb      	ldrb	r3, [r7, #23]
 800f874:	68ba      	ldr	r2, [r7, #8]
 800f876:	4413      	add	r3, r2
 800f878:	2200      	movs	r2, #0
 800f87a:	701a      	strb	r2, [r3, #0]
    idx++;
 800f87c:	7dfb      	ldrb	r3, [r7, #23]
 800f87e:	3301      	adds	r3, #1
 800f880:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d1e7      	bne.n	800f85a <USBD_GetString+0x52>
 800f88a:	e000      	b.n	800f88e <USBD_GetString+0x86>
    return;
 800f88c:	bf00      	nop
  }
}
 800f88e:	3718      	adds	r7, #24
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}

0800f894 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f894:	b480      	push	{r7}
 800f896:	b085      	sub	sp, #20
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f89c:	2300      	movs	r3, #0
 800f89e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f8a4:	e005      	b.n	800f8b2 <USBD_GetLen+0x1e>
  {
    len++;
 800f8a6:	7bfb      	ldrb	r3, [r7, #15]
 800f8a8:	3301      	adds	r3, #1
 800f8aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f8b2:	68bb      	ldr	r3, [r7, #8]
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d1f5      	bne.n	800f8a6 <USBD_GetLen+0x12>
  }

  return len;
 800f8ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3714      	adds	r7, #20
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c6:	4770      	bx	lr

0800f8c8 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b083      	sub	sp, #12
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	6039      	str	r1, [r7, #0]
 800f8d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	2212      	movs	r2, #18
 800f8d8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800f8da:	4b03      	ldr	r3, [pc, #12]	@ (800f8e8 <USBD_Class_DeviceDescriptor+0x20>)
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr
 800f8e8:	200000f0 	.word	0x200000f0

0800f8ec <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b083      	sub	sp, #12
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	6039      	str	r1, [r7, #0]
 800f8f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	2204      	movs	r2, #4
 800f8fc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800f8fe:	4b03      	ldr	r3, [pc, #12]	@ (800f90c <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800f900:	4618      	mov	r0, r3
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr
 800f90c:	20000104 	.word	0x20000104

0800f910 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b082      	sub	sp, #8
 800f914:	af00      	add	r7, sp, #0
 800f916:	4603      	mov	r3, r0
 800f918:	6039      	str	r1, [r7, #0]
 800f91a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f91c:	79fb      	ldrb	r3, [r7, #7]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d105      	bne.n	800f92e <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800f922:	683a      	ldr	r2, [r7, #0]
 800f924:	4907      	ldr	r1, [pc, #28]	@ (800f944 <USBD_Class_ProductStrDescriptor+0x34>)
 800f926:	4808      	ldr	r0, [pc, #32]	@ (800f948 <USBD_Class_ProductStrDescriptor+0x38>)
 800f928:	f7ff ff6e 	bl	800f808 <USBD_GetString>
 800f92c:	e004      	b.n	800f938 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800f92e:	683a      	ldr	r2, [r7, #0]
 800f930:	4904      	ldr	r1, [pc, #16]	@ (800f944 <USBD_Class_ProductStrDescriptor+0x34>)
 800f932:	4805      	ldr	r0, [pc, #20]	@ (800f948 <USBD_Class_ProductStrDescriptor+0x38>)
 800f934:	f7ff ff68 	bl	800f808 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f938:	4b02      	ldr	r3, [pc, #8]	@ (800f944 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800f93a:	4618      	mov	r0, r3
 800f93c:	3708      	adds	r7, #8
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	bf00      	nop
 800f944:	20001068 	.word	0x20001068
 800f948:	0801fa5c 	.word	0x0801fa5c

0800f94c <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
 800f952:	4603      	mov	r3, r0
 800f954:	6039      	str	r1, [r7, #0]
 800f956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f958:	683a      	ldr	r2, [r7, #0]
 800f95a:	4904      	ldr	r1, [pc, #16]	@ (800f96c <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800f95c:	4804      	ldr	r0, [pc, #16]	@ (800f970 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800f95e:	f7ff ff53 	bl	800f808 <USBD_GetString>
  return USBD_StrDesc;
 800f962:	4b02      	ldr	r3, [pc, #8]	@ (800f96c <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800f964:	4618      	mov	r0, r3
 800f966:	3708      	adds	r7, #8
 800f968:	46bd      	mov	sp, r7
 800f96a:	bd80      	pop	{r7, pc}
 800f96c:	20001068 	.word	0x20001068
 800f970:	0801fa74 	.word	0x0801fa74

0800f974 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b082      	sub	sp, #8
 800f978:	af00      	add	r7, sp, #0
 800f97a:	4603      	mov	r3, r0
 800f97c:	6039      	str	r1, [r7, #0]
 800f97e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	221a      	movs	r2, #26
 800f984:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800f986:	f000 f843 	bl	800fa10 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800f98a:	4b02      	ldr	r3, [pc, #8]	@ (800f994 <USBD_Class_SerialStrDescriptor+0x20>)
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3708      	adds	r7, #8
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}
 800f994:	20000108 	.word	0x20000108

0800f998 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	4603      	mov	r3, r0
 800f9a0:	6039      	str	r1, [r7, #0]
 800f9a2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f9a4:	79fb      	ldrb	r3, [r7, #7]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d105      	bne.n	800f9b6 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800f9aa:	683a      	ldr	r2, [r7, #0]
 800f9ac:	4907      	ldr	r1, [pc, #28]	@ (800f9cc <USBD_Class_ConfigStrDescriptor+0x34>)
 800f9ae:	4808      	ldr	r0, [pc, #32]	@ (800f9d0 <USBD_Class_ConfigStrDescriptor+0x38>)
 800f9b0:	f7ff ff2a 	bl	800f808 <USBD_GetString>
 800f9b4:	e004      	b.n	800f9c0 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800f9b6:	683a      	ldr	r2, [r7, #0]
 800f9b8:	4904      	ldr	r1, [pc, #16]	@ (800f9cc <USBD_Class_ConfigStrDescriptor+0x34>)
 800f9ba:	4805      	ldr	r0, [pc, #20]	@ (800f9d0 <USBD_Class_ConfigStrDescriptor+0x38>)
 800f9bc:	f7ff ff24 	bl	800f808 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f9c0:	4b02      	ldr	r3, [pc, #8]	@ (800f9cc <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3708      	adds	r7, #8
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	20001068 	.word	0x20001068
 800f9d0:	0801fa88 	.word	0x0801fa88

0800f9d4 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	4603      	mov	r3, r0
 800f9dc:	6039      	str	r1, [r7, #0]
 800f9de:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800f9e0:	79fb      	ldrb	r3, [r7, #7]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d105      	bne.n	800f9f2 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800f9e6:	683a      	ldr	r2, [r7, #0]
 800f9e8:	4907      	ldr	r1, [pc, #28]	@ (800fa08 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800f9ea:	4808      	ldr	r0, [pc, #32]	@ (800fa0c <USBD_Class_InterfaceStrDescriptor+0x38>)
 800f9ec:	f7ff ff0c 	bl	800f808 <USBD_GetString>
 800f9f0:	e004      	b.n	800f9fc <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800f9f2:	683a      	ldr	r2, [r7, #0]
 800f9f4:	4904      	ldr	r1, [pc, #16]	@ (800fa08 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800f9f6:	4805      	ldr	r0, [pc, #20]	@ (800fa0c <USBD_Class_InterfaceStrDescriptor+0x38>)
 800f9f8:	f7ff ff06 	bl	800f808 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f9fc:	4b02      	ldr	r3, [pc, #8]	@ (800fa08 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	20001068 	.word	0x20001068
 800fa0c:	0801fa94 	.word	0x0801fa94

0800fa10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800fa16:	4b0f      	ldr	r3, [pc, #60]	@ (800fa54 <Get_SerialNum+0x44>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800fa1c:	4b0e      	ldr	r3, [pc, #56]	@ (800fa58 <Get_SerialNum+0x48>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800fa22:	4b0e      	ldr	r3, [pc, #56]	@ (800fa5c <Get_SerialNum+0x4c>)
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800fa28:	68fa      	ldr	r2, [r7, #12]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d009      	beq.n	800fa4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800fa36:	2208      	movs	r2, #8
 800fa38:	4909      	ldr	r1, [pc, #36]	@ (800fa60 <Get_SerialNum+0x50>)
 800fa3a:	68f8      	ldr	r0, [r7, #12]
 800fa3c:	f000 f814 	bl	800fa68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800fa40:	2204      	movs	r2, #4
 800fa42:	4908      	ldr	r1, [pc, #32]	@ (800fa64 <Get_SerialNum+0x54>)
 800fa44:	68b8      	ldr	r0, [r7, #8]
 800fa46:	f000 f80f 	bl	800fa68 <IntToUnicode>
  }
}
 800fa4a:	bf00      	nop
 800fa4c:	3710      	adds	r7, #16
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
 800fa52:	bf00      	nop
 800fa54:	08fff800 	.word	0x08fff800
 800fa58:	08fff804 	.word	0x08fff804
 800fa5c:	08fff808 	.word	0x08fff808
 800fa60:	2000010a 	.word	0x2000010a
 800fa64:	2000011a 	.word	0x2000011a

0800fa68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b087      	sub	sp, #28
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	60b9      	str	r1, [r7, #8]
 800fa72:	4613      	mov	r3, r2
 800fa74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800fa76:	2300      	movs	r3, #0
 800fa78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800fa7a:	2300      	movs	r3, #0
 800fa7c:	75fb      	strb	r3, [r7, #23]
 800fa7e:	e025      	b.n	800facc <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	0f1b      	lsrs	r3, r3, #28
 800fa84:	2b09      	cmp	r3, #9
 800fa86:	d80a      	bhi.n	800fa9e <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	0f1b      	lsrs	r3, r3, #28
 800fa8c:	b2da      	uxtb	r2, r3
 800fa8e:	7dfb      	ldrb	r3, [r7, #23]
 800fa90:	005b      	lsls	r3, r3, #1
 800fa92:	68b9      	ldr	r1, [r7, #8]
 800fa94:	440b      	add	r3, r1
 800fa96:	3230      	adds	r2, #48	@ 0x30
 800fa98:	b2d2      	uxtb	r2, r2
 800fa9a:	701a      	strb	r2, [r3, #0]
 800fa9c:	e009      	b.n	800fab2 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	0f1b      	lsrs	r3, r3, #28
 800faa2:	b2da      	uxtb	r2, r3
 800faa4:	7dfb      	ldrb	r3, [r7, #23]
 800faa6:	005b      	lsls	r3, r3, #1
 800faa8:	68b9      	ldr	r1, [r7, #8]
 800faaa:	440b      	add	r3, r1
 800faac:	3237      	adds	r2, #55	@ 0x37
 800faae:	b2d2      	uxtb	r2, r2
 800fab0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	011b      	lsls	r3, r3, #4
 800fab6:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800fab8:	7dfb      	ldrb	r3, [r7, #23]
 800faba:	005b      	lsls	r3, r3, #1
 800fabc:	3301      	adds	r3, #1
 800fabe:	68ba      	ldr	r2, [r7, #8]
 800fac0:	4413      	add	r3, r2
 800fac2:	2200      	movs	r2, #0
 800fac4:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800fac6:	7dfb      	ldrb	r3, [r7, #23]
 800fac8:	3301      	adds	r3, #1
 800faca:	75fb      	strb	r3, [r7, #23]
 800facc:	7dfa      	ldrb	r2, [r7, #23]
 800face:	79fb      	ldrb	r3, [r7, #7]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d3d5      	bcc.n	800fa80 <IntToUnicode+0x18>
  }
}
 800fad4:	bf00      	nop
 800fad6:	bf00      	nop
 800fad8:	371c      	adds	r7, #28
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr

0800fae2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fae2:	b580      	push	{r7, lr}
 800fae4:	b084      	sub	sp, #16
 800fae6:	af00      	add	r7, sp, #0
 800fae8:	60f8      	str	r0, [r7, #12]
 800faea:	60b9      	str	r1, [r7, #8]
 800faec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	2202      	movs	r2, #2
 800faf2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	687a      	ldr	r2, [r7, #4]
 800fafa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	68ba      	ldr	r2, [r7, #8]
 800fb06:	2100      	movs	r1, #0
 800fb08:	68f8      	ldr	r0, [r7, #12]
 800fb0a:	f7fe fca0 	bl	800e44e <USBD_LL_Transmit>

  return USBD_OK;
 800fb0e:	2300      	movs	r3, #0
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3710      	adds	r7, #16
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b084      	sub	sp, #16
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	60f8      	str	r0, [r7, #12]
 800fb20:	60b9      	str	r1, [r7, #8]
 800fb22:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	68ba      	ldr	r2, [r7, #8]
 800fb28:	2100      	movs	r1, #0
 800fb2a:	68f8      	ldr	r0, [r7, #12]
 800fb2c:	f7fe fc8f 	bl	800e44e <USBD_LL_Transmit>

  return USBD_OK;
 800fb30:	2300      	movs	r3, #0
}
 800fb32:	4618      	mov	r0, r3
 800fb34:	3710      	adds	r7, #16
 800fb36:	46bd      	mov	sp, r7
 800fb38:	bd80      	pop	{r7, pc}

0800fb3a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fb3a:	b580      	push	{r7, lr}
 800fb3c:	b084      	sub	sp, #16
 800fb3e:	af00      	add	r7, sp, #0
 800fb40:	60f8      	str	r0, [r7, #12]
 800fb42:	60b9      	str	r1, [r7, #8]
 800fb44:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2203      	movs	r2, #3
 800fb4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	687a      	ldr	r2, [r7, #4]
 800fb5a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	68ba      	ldr	r2, [r7, #8]
 800fb62:	2100      	movs	r1, #0
 800fb64:	68f8      	ldr	r0, [r7, #12]
 800fb66:	f7fe fc8d 	bl	800e484 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb6a:	2300      	movs	r3, #0
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3710      	adds	r7, #16
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b084      	sub	sp, #16
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	68ba      	ldr	r2, [r7, #8]
 800fb84:	2100      	movs	r1, #0
 800fb86:	68f8      	ldr	r0, [r7, #12]
 800fb88:	f7fe fc7c 	bl	800e484 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb8c:	2300      	movs	r3, #0
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3710      	adds	r7, #16
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}

0800fb96 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fb96:	b580      	push	{r7, lr}
 800fb98:	b082      	sub	sp, #8
 800fb9a:	af00      	add	r7, sp, #0
 800fb9c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2204      	movs	r2, #4
 800fba2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fba6:	2300      	movs	r3, #0
 800fba8:	2200      	movs	r2, #0
 800fbaa:	2100      	movs	r1, #0
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f7fe fc4e 	bl	800e44e <USBD_LL_Transmit>

  return USBD_OK;
 800fbb2:	2300      	movs	r3, #0
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	3708      	adds	r7, #8
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	bd80      	pop	{r7, pc}

0800fbbc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b082      	sub	sp, #8
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2205      	movs	r2, #5
 800fbc8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fbcc:	2300      	movs	r3, #0
 800fbce:	2200      	movs	r2, #0
 800fbd0:	2100      	movs	r1, #0
 800fbd2:	6878      	ldr	r0, [r7, #4]
 800fbd4:	f7fe fc56 	bl	800e484 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbd8:	2300      	movs	r3, #0
}
 800fbda:	4618      	mov	r0, r3
 800fbdc:	3708      	adds	r7, #8
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}

0800fbe2 <memset>:
 800fbe2:	4402      	add	r2, r0
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d100      	bne.n	800fbec <memset+0xa>
 800fbea:	4770      	bx	lr
 800fbec:	f803 1b01 	strb.w	r1, [r3], #1
 800fbf0:	e7f9      	b.n	800fbe6 <memset+0x4>
	...

0800fbf4 <__libc_init_array>:
 800fbf4:	b570      	push	{r4, r5, r6, lr}
 800fbf6:	4d0d      	ldr	r5, [pc, #52]	@ (800fc2c <__libc_init_array+0x38>)
 800fbf8:	2600      	movs	r6, #0
 800fbfa:	4c0d      	ldr	r4, [pc, #52]	@ (800fc30 <__libc_init_array+0x3c>)
 800fbfc:	1b64      	subs	r4, r4, r5
 800fbfe:	10a4      	asrs	r4, r4, #2
 800fc00:	42a6      	cmp	r6, r4
 800fc02:	d109      	bne.n	800fc18 <__libc_init_array+0x24>
 800fc04:	4d0b      	ldr	r5, [pc, #44]	@ (800fc34 <__libc_init_array+0x40>)
 800fc06:	2600      	movs	r6, #0
 800fc08:	4c0b      	ldr	r4, [pc, #44]	@ (800fc38 <__libc_init_array+0x44>)
 800fc0a:	f000 f825 	bl	800fc58 <_init>
 800fc0e:	1b64      	subs	r4, r4, r5
 800fc10:	10a4      	asrs	r4, r4, #2
 800fc12:	42a6      	cmp	r6, r4
 800fc14:	d105      	bne.n	800fc22 <__libc_init_array+0x2e>
 800fc16:	bd70      	pop	{r4, r5, r6, pc}
 800fc18:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc1c:	3601      	adds	r6, #1
 800fc1e:	4798      	blx	r3
 800fc20:	e7ee      	b.n	800fc00 <__libc_init_array+0xc>
 800fc22:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc26:	3601      	adds	r6, #1
 800fc28:	4798      	blx	r3
 800fc2a:	e7f2      	b.n	800fc12 <__libc_init_array+0x1e>
 800fc2c:	0801faf8 	.word	0x0801faf8
 800fc30:	0801faf8 	.word	0x0801faf8
 800fc34:	0801faf8 	.word	0x0801faf8
 800fc38:	0801fafc 	.word	0x0801fafc

0800fc3c <memcpy>:
 800fc3c:	440a      	add	r2, r1
 800fc3e:	1e43      	subs	r3, r0, #1
 800fc40:	4291      	cmp	r1, r2
 800fc42:	d100      	bne.n	800fc46 <memcpy+0xa>
 800fc44:	4770      	bx	lr
 800fc46:	b510      	push	{r4, lr}
 800fc48:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc4c:	4291      	cmp	r1, r2
 800fc4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc52:	d1f9      	bne.n	800fc48 <memcpy+0xc>
 800fc54:	bd10      	pop	{r4, pc}
	...

0800fc58 <_init>:
 800fc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc5a:	bf00      	nop
 800fc5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc5e:	bc08      	pop	{r3}
 800fc60:	469e      	mov	lr, r3
 800fc62:	4770      	bx	lr

0800fc64 <_fini>:
 800fc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc66:	bf00      	nop
 800fc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc6a:	bc08      	pop	{r3}
 800fc6c:	469e      	mov	lr, r3
 800fc6e:	4770      	bx	lr
