
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f83c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800fa88  0800fa88  00010a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb60  0800fb60  00011170  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb60  0800fb60  00010b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb68  0800fb68  00011170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb68  0800fb68  00010b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800fb6c  0800fb6c  00010b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  0800fb70  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000110c  20000170  0800fce0  00011170  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  2000127c  0800fce0  0001127c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00011170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002046d  00000000  00000000  000111a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041b4  00000000  00000000  00031613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  000357c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001218  00000000  00000000  00036f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000604c  00000000  00000000  00038180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021f59  00000000  00000000  0003e1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013e793  00000000  00000000  00060125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0019e8b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000686c  00000000  00000000  0019e8fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  001a5168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000170 	.word	0x20000170
 8000268:	00000000 	.word	0x00000000
 800026c:	0800fa70 	.word	0x0800fa70

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000174 	.word	0x20000174
 8000288:	0800fa70 	.word	0x0800fa70

0800028c <strlen>:
 800028c:	4603      	mov	r3, r0
 800028e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000292:	2a00      	cmp	r2, #0
 8000294:	d1fb      	bne.n	800028e <strlen+0x2>
 8000296:	1a18      	subs	r0, r3, r0
 8000298:	3801      	subs	r0, #1
 800029a:	4770      	bx	lr

0800029c <__aeabi_uldivmod>:
 800029c:	b953      	cbnz	r3, 80002b4 <__aeabi_uldivmod+0x18>
 800029e:	b94a      	cbnz	r2, 80002b4 <__aeabi_uldivmod+0x18>
 80002a0:	2900      	cmp	r1, #0
 80002a2:	bf08      	it	eq
 80002a4:	2800      	cmpeq	r0, #0
 80002a6:	bf1c      	itt	ne
 80002a8:	f04f 31ff 	movne.w	r1, #4294967295
 80002ac:	f04f 30ff 	movne.w	r0, #4294967295
 80002b0:	f000 b97e 	b.w	80005b0 <__aeabi_idiv0>
 80002b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002bc:	f000 f806 	bl	80002cc <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4770      	bx	lr

080002cc <__udivmoddi4>:
 80002cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002d0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002d2:	460c      	mov	r4, r1
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d14d      	bne.n	8000374 <__udivmoddi4+0xa8>
 80002d8:	428a      	cmp	r2, r1
 80002da:	460f      	mov	r7, r1
 80002dc:	4684      	mov	ip, r0
 80002de:	4696      	mov	lr, r2
 80002e0:	fab2 f382 	clz	r3, r2
 80002e4:	d960      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80002e6:	b14b      	cbz	r3, 80002fc <__udivmoddi4+0x30>
 80002e8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002ec:	f1c3 0220 	rsb	r2, r3, #32
 80002f0:	409f      	lsls	r7, r3
 80002f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000300:	fa1f f48e 	uxth.w	r4, lr
 8000304:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000308:	fbb7 f1f6 	udiv	r1, r7, r6
 800030c:	fb06 7711 	mls	r7, r6, r1, r7
 8000310:	fb01 f004 	mul.w	r0, r1, r4
 8000314:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000318:	4290      	cmp	r0, r2
 800031a:	d908      	bls.n	800032e <__udivmoddi4+0x62>
 800031c:	eb1e 0202 	adds.w	r2, lr, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x60>
 8000326:	4290      	cmp	r0, r2
 8000328:	f200 812d 	bhi.w	8000586 <__udivmoddi4+0x2ba>
 800032c:	4639      	mov	r1, r7
 800032e:	1a12      	subs	r2, r2, r0
 8000330:	fa1f fc8c 	uxth.w	ip, ip
 8000334:	fbb2 f0f6 	udiv	r0, r2, r6
 8000338:	fb06 2210 	mls	r2, r6, r0, r2
 800033c:	fb00 f404 	mul.w	r4, r0, r4
 8000340:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000344:	4564      	cmp	r4, ip
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x8e>
 8000348:	eb1e 0c0c 	adds.w	ip, lr, ip
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x8c>
 8000352:	4564      	cmp	r4, ip
 8000354:	f200 811a 	bhi.w	800058c <__udivmoddi4+0x2c0>
 8000358:	4610      	mov	r0, r2
 800035a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800035e:	ebac 0c04 	sub.w	ip, ip, r4
 8000362:	2100      	movs	r1, #0
 8000364:	b125      	cbz	r5, 8000370 <__udivmoddi4+0xa4>
 8000366:	fa2c f303 	lsr.w	r3, ip, r3
 800036a:	2200      	movs	r2, #0
 800036c:	e9c5 3200 	strd	r3, r2, [r5]
 8000370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d905      	bls.n	8000384 <__udivmoddi4+0xb8>
 8000378:	b10d      	cbz	r5, 800037e <__udivmoddi4+0xb2>
 800037a:	e9c5 0100 	strd	r0, r1, [r5]
 800037e:	2100      	movs	r1, #0
 8000380:	4608      	mov	r0, r1
 8000382:	e7f5      	b.n	8000370 <__udivmoddi4+0xa4>
 8000384:	fab3 f183 	clz	r1, r3
 8000388:	2900      	cmp	r1, #0
 800038a:	d14d      	bne.n	8000428 <__udivmoddi4+0x15c>
 800038c:	42a3      	cmp	r3, r4
 800038e:	f0c0 80f2 	bcc.w	8000576 <__udivmoddi4+0x2aa>
 8000392:	4290      	cmp	r0, r2
 8000394:	f080 80ef 	bcs.w	8000576 <__udivmoddi4+0x2aa>
 8000398:	4606      	mov	r6, r0
 800039a:	4623      	mov	r3, r4
 800039c:	4608      	mov	r0, r1
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e6      	beq.n	8000370 <__udivmoddi4+0xa4>
 80003a2:	e9c5 6300 	strd	r6, r3, [r5]
 80003a6:	e7e3      	b.n	8000370 <__udivmoddi4+0xa4>
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	f040 80a2 	bne.w	80004f2 <__udivmoddi4+0x226>
 80003ae:	1a8a      	subs	r2, r1, r2
 80003b0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003b4:	fa1f f68e 	uxth.w	r6, lr
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 f4f7 	udiv	r4, r2, r7
 80003be:	fb07 2014 	mls	r0, r7, r4, r2
 80003c2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb06 f004 	mul.w	r0, r6, r4
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d90f      	bls.n	80003f2 <__udivmoddi4+0x126>
 80003d2:	eb1e 0202 	adds.w	r2, lr, r2
 80003d6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003da:	bf2c      	ite	cs
 80003dc:	f04f 0901 	movcs.w	r9, #1
 80003e0:	f04f 0900 	movcc.w	r9, #0
 80003e4:	4290      	cmp	r0, r2
 80003e6:	d903      	bls.n	80003f0 <__udivmoddi4+0x124>
 80003e8:	f1b9 0f00 	cmp.w	r9, #0
 80003ec:	f000 80c8 	beq.w	8000580 <__udivmoddi4+0x2b4>
 80003f0:	4644      	mov	r4, r8
 80003f2:	1a12      	subs	r2, r2, r0
 80003f4:	fa1f fc8c 	uxth.w	ip, ip
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	fb00 f606 	mul.w	r6, r0, r6
 8000404:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000408:	4566      	cmp	r6, ip
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x152>
 800040c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x150>
 8000416:	4566      	cmp	r6, ip
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c6>
 800041c:	4610      	mov	r0, r2
 800041e:	ebac 0c06 	sub.w	ip, ip, r6
 8000422:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000426:	e79d      	b.n	8000364 <__udivmoddi4+0x98>
 8000428:	f1c1 0620 	rsb	r6, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	fa20 fc06 	lsr.w	ip, r0, r6
 800043a:	40f4      	lsrs	r4, r6
 800043c:	408a      	lsls	r2, r1
 800043e:	431f      	orrs	r7, r3
 8000440:	ea4e 030c 	orr.w	r3, lr, ip
 8000444:	fa00 fe01 	lsl.w	lr, r0, r1
 8000448:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800044c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000450:	fa1f fc87 	uxth.w	ip, r7
 8000454:	fbb4 f0f8 	udiv	r0, r4, r8
 8000458:	fb08 4410 	mls	r4, r8, r0, r4
 800045c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000460:	fb00 f90c 	mul.w	r9, r0, ip
 8000464:	45a1      	cmp	r9, r4
 8000466:	d90e      	bls.n	8000486 <__udivmoddi4+0x1ba>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 3aff 	add.w	sl, r0, #4294967295
 800046e:	bf2c      	ite	cs
 8000470:	f04f 0b01 	movcs.w	fp, #1
 8000474:	f04f 0b00 	movcc.w	fp, #0
 8000478:	45a1      	cmp	r9, r4
 800047a:	d903      	bls.n	8000484 <__udivmoddi4+0x1b8>
 800047c:	f1bb 0f00 	cmp.w	fp, #0
 8000480:	f000 8093 	beq.w	80005aa <__udivmoddi4+0x2de>
 8000484:	4650      	mov	r0, sl
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000492:	fb08 4413 	mls	r4, r8, r3, r4
 8000496:	fb03 fc0c 	mul.w	ip, r3, ip
 800049a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d906      	bls.n	80004b0 <__udivmoddi4+0x1e4>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x1e2>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d87a      	bhi.n	80005a4 <__udivmoddi4+0x2d8>
 80004ae:	4643      	mov	r3, r8
 80004b0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b4:	eba4 040c 	sub.w	r4, r4, ip
 80004b8:	fba0 9802 	umull	r9, r8, r0, r2
 80004bc:	4544      	cmp	r4, r8
 80004be:	46cc      	mov	ip, r9
 80004c0:	4643      	mov	r3, r8
 80004c2:	d302      	bcc.n	80004ca <__udivmoddi4+0x1fe>
 80004c4:	d106      	bne.n	80004d4 <__udivmoddi4+0x208>
 80004c6:	45ce      	cmp	lr, r9
 80004c8:	d204      	bcs.n	80004d4 <__udivmoddi4+0x208>
 80004ca:	3801      	subs	r0, #1
 80004cc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004d0:	eb68 0307 	sbc.w	r3, r8, r7
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x222>
 80004d6:	ebbe 020c 	subs.w	r2, lr, ip
 80004da:	eb64 0403 	sbc.w	r4, r4, r3
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	40cc      	lsrs	r4, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e73e      	b.n	8000370 <__udivmoddi4+0xa4>
 80004f2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004f6:	f1c3 0120 	rsb	r1, r3, #32
 80004fa:	fa04 f203 	lsl.w	r2, r4, r3
 80004fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000508:	fa20 f101 	lsr.w	r1, r0, r1
 800050c:	fa1f f68e 	uxth.w	r6, lr
 8000510:	fbb4 f0f7 	udiv	r0, r4, r7
 8000514:	430a      	orrs	r2, r1
 8000516:	fb07 4410 	mls	r4, r7, r0, r4
 800051a:	0c11      	lsrs	r1, r2, #16
 800051c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000520:	fb00 f406 	mul.w	r4, r0, r6
 8000524:	428c      	cmp	r4, r1
 8000526:	d90e      	bls.n	8000546 <__udivmoddi4+0x27a>
 8000528:	eb1e 0101 	adds.w	r1, lr, r1
 800052c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000530:	bf2c      	ite	cs
 8000532:	f04f 0901 	movcs.w	r9, #1
 8000536:	f04f 0900 	movcc.w	r9, #0
 800053a:	428c      	cmp	r4, r1
 800053c:	d902      	bls.n	8000544 <__udivmoddi4+0x278>
 800053e:	f1b9 0f00 	cmp.w	r9, #0
 8000542:	d02c      	beq.n	800059e <__udivmoddi4+0x2d2>
 8000544:	4640      	mov	r0, r8
 8000546:	1b09      	subs	r1, r1, r4
 8000548:	b292      	uxth	r2, r2
 800054a:	fbb1 f4f7 	udiv	r4, r1, r7
 800054e:	fb07 1114 	mls	r1, r7, r4, r1
 8000552:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000556:	fb04 f106 	mul.w	r1, r4, r6
 800055a:	4291      	cmp	r1, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x2a2>
 800055e:	eb1e 0202 	adds.w	r2, lr, r2
 8000562:	f104 38ff 	add.w	r8, r4, #4294967295
 8000566:	d201      	bcs.n	800056c <__udivmoddi4+0x2a0>
 8000568:	4291      	cmp	r1, r2
 800056a:	d815      	bhi.n	8000598 <__udivmoddi4+0x2cc>
 800056c:	4644      	mov	r4, r8
 800056e:	1a52      	subs	r2, r2, r1
 8000570:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000574:	e721      	b.n	80003ba <__udivmoddi4+0xee>
 8000576:	1a86      	subs	r6, r0, r2
 8000578:	eb64 0303 	sbc.w	r3, r4, r3
 800057c:	2001      	movs	r0, #1
 800057e:	e70e      	b.n	800039e <__udivmoddi4+0xd2>
 8000580:	3c02      	subs	r4, #2
 8000582:	4472      	add	r2, lr
 8000584:	e735      	b.n	80003f2 <__udivmoddi4+0x126>
 8000586:	3902      	subs	r1, #2
 8000588:	4472      	add	r2, lr
 800058a:	e6d0      	b.n	800032e <__udivmoddi4+0x62>
 800058c:	44f4      	add	ip, lr
 800058e:	3802      	subs	r0, #2
 8000590:	e6e3      	b.n	800035a <__udivmoddi4+0x8e>
 8000592:	44f4      	add	ip, lr
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x152>
 8000598:	3c02      	subs	r4, #2
 800059a:	4472      	add	r2, lr
 800059c:	e7e7      	b.n	800056e <__udivmoddi4+0x2a2>
 800059e:	3802      	subs	r0, #2
 80005a0:	4471      	add	r1, lr
 80005a2:	e7d0      	b.n	8000546 <__udivmoddi4+0x27a>
 80005a4:	3b02      	subs	r3, #2
 80005a6:	443c      	add	r4, r7
 80005a8:	e782      	b.n	80004b0 <__udivmoddi4+0x1e4>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e76a      	b.n	8000486 <__udivmoddi4+0x1ba>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b092      	sub	sp, #72	@ 0x48
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f001 f937 	bl	800182c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f865 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 fa67 	bl	8000a94 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80005c6:	f000 fa03 	bl	80009d0 <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80005ca:	f000 f969 	bl	80008a0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ce:	f000 f8d1 	bl	8000774 <MX_I2C1_Init>
  MX_SPI1_Init();
 80005d2:	f000 f90f 	bl	80007f4 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80005d6:	f000 f9af 	bl	8000938 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80005da:	bf00      	nop
 80005dc:	4b27      	ldr	r3, [pc, #156]	@ (800067c <main+0xc8>)
 80005de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0fa      	beq.n	80005dc <main+0x28>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80005e6:	2000      	movs	r0, #0
 80005e8:	f000 ff4c 	bl	8001484 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f000 ff49 	bl	8001484 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80005f2:	2002      	movs	r0, #2
 80005f4:	f000 ff46 	bl	8001484 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80005f8:	2101      	movs	r1, #1
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 ffb8 	bl	8001570 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000600:	4b1f      	ldr	r3, [pc, #124]	@ (8000680 <main+0xcc>)
 8000602:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000606:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000608:	4b1d      	ldr	r3, [pc, #116]	@ (8000680 <main+0xcc>)
 800060a:	2200      	movs	r2, #0
 800060c:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 800060e:	4b1c      	ldr	r3, [pc, #112]	@ (8000680 <main+0xcc>)
 8000610:	2200      	movs	r2, #0
 8000612:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	@ (8000680 <main+0xcc>)
 8000616:	2200      	movs	r2, #0
 8000618:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800061a:	4b19      	ldr	r3, [pc, #100]	@ (8000680 <main+0xcc>)
 800061c:	2200      	movs	r2, #0
 800061e:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000620:	4917      	ldr	r1, [pc, #92]	@ (8000680 <main+0xcc>)
 8000622:	2000      	movs	r0, #0
 8000624:	f001 f83e 	bl	80016a4 <BSP_COM_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <main+0x7e>
  {
    Error_Handler();
 800062e:	f000 fb2d 	bl	8000c8c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      for(uint32_t j = 0; j <= UINT32_MAX; j++)
 8000632:	2300      	movs	r3, #0
 8000634:	647b      	str	r3, [r7, #68]	@ 0x44
      {
          snprintf(TxMessageBuffer, sizeof(TxMessageBuffer), "Counter: %lu\r\n", (unsigned long)j);
 8000636:	1d38      	adds	r0, r7, #4
 8000638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800063a:	4a12      	ldr	r2, [pc, #72]	@ (8000684 <main+0xd0>)
 800063c:	2140      	movs	r1, #64	@ 0x40
 800063e:	f00e fd51 	bl	800f0e4 <sniprintf>
          TEMPLATE_Transmit((uint8_t*)TxMessageBuffer, strlen(TxMessageBuffer));
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff fe21 	bl	800028c <strlen>
 800064a:	4603      	mov	r3, r0
 800064c:	b29a      	uxth	r2, r3
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f00c ff02 	bl	800d45c <TEMPLATE_Transmit>
          HAL_Delay(j%1000);
 8000658:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800065a:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <main+0xd4>)
 800065c:	fba3 1302 	umull	r1, r3, r3, r2
 8000660:	099b      	lsrs	r3, r3, #6
 8000662:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000666:	fb01 f303 	mul.w	r3, r1, r3
 800066a:	1ad3      	subs	r3, r2, r3
 800066c:	4618      	mov	r0, r3
 800066e:	f001 f99b 	bl	80019a8 <HAL_Delay>
      for(uint32_t j = 0; j <= UINT32_MAX; j++)
 8000672:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000674:	3301      	adds	r3, #1
 8000676:	647b      	str	r3, [r7, #68]	@ 0x44
          snprintf(TxMessageBuffer, sizeof(TxMessageBuffer), "Counter: %lu\r\n", (unsigned long)j);
 8000678:	bf00      	nop
 800067a:	e7dc      	b.n	8000636 <main+0x82>
 800067c:	2000068c 	.word	0x2000068c
 8000680:	2000018c 	.word	0x2000018c
 8000684:	0800fa88 	.word	0x0800fa88
 8000688:	10624dd3 	.word	0x10624dd3

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b09c      	sub	sp, #112	@ 0x70
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2250      	movs	r2, #80	@ 0x50
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f00e fd56 	bl	800f14c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
 80006b0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006b2:	4b2e      	ldr	r3, [pc, #184]	@ (800076c <SystemClock_Config+0xe0>)
 80006b4:	691b      	ldr	r3, [r3, #16]
 80006b6:	4a2d      	ldr	r2, [pc, #180]	@ (800076c <SystemClock_Config+0xe0>)
 80006b8:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80006bc:	6113      	str	r3, [r2, #16]
 80006be:	4b2b      	ldr	r3, [pc, #172]	@ (800076c <SystemClock_Config+0xe0>)
 80006c0:	691b      	ldr	r3, [r3, #16]
 80006c2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ca:	bf00      	nop
 80006cc:	4b27      	ldr	r3, [pc, #156]	@ (800076c <SystemClock_Config+0xe0>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	f003 0308 	and.w	r3, r3, #8
 80006d4:	2b08      	cmp	r3, #8
 80006d6:	d1f9      	bne.n	80006cc <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80006d8:	2321      	movs	r3, #33	@ 0x21
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006dc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80006ec:	2303      	movs	r3, #3
 80006ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006f0:	2304      	movs	r3, #4
 80006f2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80006f4:	23fa      	movs	r3, #250	@ 0xfa
 80006f6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 8000704:	2304      	movs	r3, #4
 8000706:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000708:	2300      	movs	r3, #0
 800070a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	4618      	mov	r0, r3
 8000716:	f003 fb23 	bl	8003d60 <HAL_RCC_OscConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000720:	f000 fab4 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	231f      	movs	r3, #31
 8000726:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000728:	2303      	movs	r3, #3
 800072a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2105      	movs	r1, #5
 8000742:	4618      	mov	r0, r3
 8000744:	f003 ff44 	bl	80045d0 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800074e:	f000 fa9d 	bl	8000c8c <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000752:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <SystemClock_Config+0xe4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <SystemClock_Config+0xe4>)
 800075c:	f043 0320 	orr.w	r3, r3, #32
 8000760:	6013      	str	r3, [r2, #0]
}
 8000762:	bf00      	nop
 8000764:	3770      	adds	r7, #112	@ 0x70
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	44020800 	.word	0x44020800
 8000770:	40022000 	.word	0x40022000

08000774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <MX_I2C1_Init+0x74>)
 800077a:	4a1c      	ldr	r2, [pc, #112]	@ (80007ec <MX_I2C1_Init+0x78>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 800077e:	4b1a      	ldr	r3, [pc, #104]	@ (80007e8 <MX_I2C1_Init+0x74>)
 8000780:	4a1b      	ldr	r2, [pc, #108]	@ (80007f0 <MX_I2C1_Init+0x7c>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <MX_I2C1_Init+0x74>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <MX_I2C1_Init+0x74>)
 800078c:	2201      	movs	r2, #1
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_I2C1_Init+0x74>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_I2C1_Init+0x74>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_I2C1_Init+0x74>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ae:	480e      	ldr	r0, [pc, #56]	@ (80007e8 <MX_I2C1_Init+0x74>)
 80007b0:	f001 fca0 	bl	80020f4 <HAL_I2C_Init>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ba:	f000 fa67 	bl	8000c8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007be:	2100      	movs	r1, #0
 80007c0:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <MX_I2C1_Init+0x74>)
 80007c2:	f001 fd32 	bl	800222a <HAL_I2CEx_ConfigAnalogFilter>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007cc:	f000 fa5e 	bl	8000c8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d0:	2100      	movs	r1, #0
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_I2C1_Init+0x74>)
 80007d4:	f001 fd74 	bl	80022c0 <HAL_I2CEx_ConfigDigitalFilter>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007de:	f000 fa55 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000019c 	.word	0x2000019c
 80007ec:	40005400 	.word	0x40005400
 80007f0:	10c043e5 	.word	0x10c043e5

080007f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007f8:	4b27      	ldr	r3, [pc, #156]	@ (8000898 <MX_SPI1_Init+0xa4>)
 80007fa:	4a28      	ldr	r2, [pc, #160]	@ (800089c <MX_SPI1_Init+0xa8>)
 80007fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007fe:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000800:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000806:	4b24      	ldr	r3, [pc, #144]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800080c:	4b22      	ldr	r3, [pc, #136]	@ (8000898 <MX_SPI1_Init+0xa4>)
 800080e:	2207      	movs	r2, #7
 8000810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000812:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000818:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <MX_SPI1_Init+0xa4>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800081e:	4b1e      	ldr	r3, [pc, #120]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000820:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8000824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000826:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000828:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 800082c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000830:	2200      	movs	r2, #0
 8000832:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000836:	2200      	movs	r2, #0
 8000838:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083a:	4b17      	ldr	r3, [pc, #92]	@ (8000898 <MX_SPI1_Init+0xa4>)
 800083c:	2200      	movs	r2, #0
 800083e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000840:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000842:	2207      	movs	r2, #7
 8000844:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000846:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000848:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800084c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800084e:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000850:	2200      	movs	r2, #0
 8000852:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000854:	4b10      	ldr	r3, [pc, #64]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000856:	2200      	movs	r2, #0
 8000858:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800085a:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_SPI1_Init+0xa4>)
 800085c:	2200      	movs	r2, #0
 800085e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000860:	4b0d      	ldr	r3, [pc, #52]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000862:	2200      	movs	r2, #0
 8000864:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000866:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000868:	2200      	movs	r2, #0
 800086a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800086c:	4b0a      	ldr	r3, [pc, #40]	@ (8000898 <MX_SPI1_Init+0xa4>)
 800086e:	2200      	movs	r2, #0
 8000870:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000872:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000874:	2200      	movs	r2, #0
 8000876:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <MX_SPI1_Init+0xa4>)
 800087a:	2200      	movs	r2, #0
 800087c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000880:	2200      	movs	r2, #0
 8000882:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000884:	4804      	ldr	r0, [pc, #16]	@ (8000898 <MX_SPI1_Init+0xa4>)
 8000886:	f009 fa3d 	bl	8009d04 <HAL_SPI_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000890:	f000 f9fc 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200001f0 	.word	0x200001f0
 800089c:	40013000 	.word	0x40013000

080008a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a4:	4b22      	ldr	r3, [pc, #136]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008a6:	4a23      	ldr	r2, [pc, #140]	@ (8000934 <MX_USART2_UART_Init+0x94>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008aa:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008be:	4b1c      	ldr	r3, [pc, #112]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b17      	ldr	r3, [pc, #92]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008d6:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008dc:	4b14      	ldr	r3, [pc, #80]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e2:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e8:	4811      	ldr	r0, [pc, #68]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008ea:	f009 fb96 	bl	800a01a <HAL_UART_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008f4:	f000 f9ca 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f8:	2100      	movs	r1, #0
 80008fa:	480d      	ldr	r0, [pc, #52]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 80008fc:	f00a f824 	bl	800a948 <HAL_UARTEx_SetTxFifoThreshold>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000906:	f000 f9c1 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090a:	2100      	movs	r1, #0
 800090c:	4808      	ldr	r0, [pc, #32]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 800090e:	f00a f859 	bl	800a9c4 <HAL_UARTEx_SetRxFifoThreshold>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000918:	f000 f9b8 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_USART2_UART_Init+0x90>)
 800091e:	f009 ffda 	bl	800a8d6 <HAL_UARTEx_DisableFifoMode>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000928:	f000 f9b0 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000280 	.word	0x20000280
 8000934:	40004400 	.word	0x40004400

08000938 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800093c:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 800093e:	4a23      	ldr	r2, [pc, #140]	@ (80009cc <MX_USART6_UART_Init+0x94>)
 8000940:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000942:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000956:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000980:	4811      	ldr	r0, [pc, #68]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 8000982:	f009 fb4a 	bl	800a01a <HAL_UART_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 800098c:	f000 f97e 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 8000994:	f009 ffd8 	bl	800a948 <HAL_UARTEx_SetTxFifoThreshold>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800099e:	f000 f975 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4808      	ldr	r0, [pc, #32]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 80009a6:	f00a f80d 	bl	800a9c4 <HAL_UARTEx_SetRxFifoThreshold>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 80009b0:	f000 f96c 	bl	8000c8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_USART6_UART_Init+0x90>)
 80009b6:	f009 ff8e 	bl	800a8d6 <HAL_UARTEx_DisableFifoMode>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 80009c0:	f000 f964 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000314 	.word	0x20000314
 80009cc:	40006400 	.word	0x40006400

080009d0 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 80009d4:	4b29      	ldr	r3, [pc, #164]	@ (8000a7c <MX_USB_PCD_Init+0xac>)
 80009d6:	4a2a      	ldr	r2, [pc, #168]	@ (8000a80 <MX_USB_PCD_Init+0xb0>)
 80009d8:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80009dc:	4b27      	ldr	r3, [pc, #156]	@ (8000a7c <MX_USB_PCD_Init+0xac>)
 80009de:	4a29      	ldr	r2, [pc, #164]	@ (8000a84 <MX_USB_PCD_Init+0xb4>)
 80009e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80009e2:	4b26      	ldr	r3, [pc, #152]	@ (8000a7c <MX_USB_PCD_Init+0xac>)
 80009e4:	2208      	movs	r2, #8
 80009e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80009e8:	4b24      	ldr	r3, [pc, #144]	@ (8000a7c <MX_USB_PCD_Init+0xac>)
 80009ea:	2202      	movs	r2, #2
 80009ec:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ee:	4b23      	ldr	r3, [pc, #140]	@ (8000a7c <MX_USB_PCD_Init+0xac>)
 80009f0:	2202      	movs	r2, #2
 80009f2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80009f4:	4b21      	ldr	r3, [pc, #132]	@ (8000a7c <MX_USB_PCD_Init+0xac>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80009fa:	4b20      	ldr	r3, [pc, #128]	@ (8000a7c <MX_USB_PCD_Init+0xac>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8000a00:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <MX_USB_PCD_Init+0xac>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8000a06:	4b1d      	ldr	r3, [pc, #116]	@ (8000a7c <MX_USB_PCD_Init+0xac>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a7c <MX_USB_PCD_Init+0xac>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <MX_USB_PCD_Init+0xac>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000a18:	4b18      	ldr	r3, [pc, #96]	@ (8000a7c <MX_USB_PCD_Init+0xac>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8000a1e:	4817      	ldr	r0, [pc, #92]	@ (8000a7c <MX_USB_PCD_Init+0xac>)
 8000a20:	f001 fcfd 	bl	800241e <HAL_PCD_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8000a2a:	f000 f92f 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	4915      	ldr	r1, [pc, #84]	@ (8000a88 <MX_USB_PCD_Init+0xb8>)
 8000a32:	4813      	ldr	r0, [pc, #76]	@ (8000a80 <MX_USB_PCD_Init+0xb0>)
 8000a34:	f00d f818 	bl	800da68 <USBD_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8000a3e:	f000 f925 	bl	8000c8c <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8000a42:	4912      	ldr	r1, [pc, #72]	@ (8000a8c <MX_USB_PCD_Init+0xbc>)
 8000a44:	480e      	ldr	r0, [pc, #56]	@ (8000a80 <MX_USB_PCD_Init+0xb0>)
 8000a46:	f00d f83f 	bl	800dac8 <USBD_RegisterClass>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8000a50:	f000 f91c 	bl	8000c8c <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8000a54:	490e      	ldr	r1, [pc, #56]	@ (8000a90 <MX_USB_PCD_Init+0xc0>)
 8000a56:	480a      	ldr	r0, [pc, #40]	@ (8000a80 <MX_USB_PCD_Init+0xb0>)
 8000a58:	f00c fc14 	bl	800d284 <USBD_CDC_RegisterInterface>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8000a62:	f000 f913 	bl	8000c8c <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8000a66:	4806      	ldr	r0, [pc, #24]	@ (8000a80 <MX_USB_PCD_Init+0xb0>)
 8000a68:	f00d f864 	bl	800db34 <USBD_Start>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8000a72:	f000 f90b 	bl	8000c8c <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200003a8 	.word	0x200003a8
 8000a80:	2000068c 	.word	0x2000068c
 8000a84:	40016000 	.word	0x40016000
 8000a88:	200000d0 	.word	0x200000d0
 8000a8c:	20000034 	.word	0x20000034
 8000a90:	200000b4 	.word	0x200000b4

08000a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08c      	sub	sp, #48	@ 0x30
 8000a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	601a      	str	r2, [r3, #0]
 8000aa2:	605a      	str	r2, [r3, #4]
 8000aa4:	609a      	str	r2, [r3, #8]
 8000aa6:	60da      	str	r2, [r3, #12]
 8000aa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aaa:	4b72      	ldr	r3, [pc, #456]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ab0:	4a70      	ldr	r2, [pc, #448]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000aba:	4b6e      	ldr	r3, [pc, #440]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000abc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ac0:	f003 0310 	and.w	r3, r3, #16
 8000ac4:	61bb      	str	r3, [r7, #24]
 8000ac6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ace:	4a69      	ldr	r2, [pc, #420]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000ad0:	f043 0304 	orr.w	r3, r3, #4
 8000ad4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ad8:	4b66      	ldr	r3, [pc, #408]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000ada:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ade:	f003 0304 	and.w	r3, r3, #4
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae6:	4b63      	ldr	r3, [pc, #396]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000ae8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000aec:	4a61      	ldr	r2, [pc, #388]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000af6:	4b5f      	ldr	r3, [pc, #380]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000af8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	4b5b      	ldr	r3, [pc, #364]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b0a:	4a5a      	ldr	r2, [pc, #360]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b14:	4b57      	ldr	r3, [pc, #348]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	4b54      	ldr	r3, [pc, #336]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b28:	4a52      	ldr	r2, [pc, #328]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000b2a:	f043 0302 	orr.w	r3, r3, #2
 8000b2e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b32:	4b50      	ldr	r3, [pc, #320]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b38:	f003 0302 	and.w	r3, r3, #2
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b40:	4b4c      	ldr	r3, [pc, #304]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b46:	4a4b      	ldr	r2, [pc, #300]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b4c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b50:	4b48      	ldr	r3, [pc, #288]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000b52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	4b45      	ldr	r3, [pc, #276]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b64:	4a43      	ldr	r2, [pc, #268]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000b6e:	4b41      	ldr	r3, [pc, #260]	@ (8000c74 <MX_GPIO_Init+0x1e0>)
 8000b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b74:	f003 0308 	and.w	r3, r3, #8
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b7c:	2332      	movs	r3, #50	@ 0x32
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8c:	230b      	movs	r3, #11
 8000b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4838      	ldr	r0, [pc, #224]	@ (8000c78 <MX_GPIO_Init+0x1e4>)
 8000b98:	f001 f942 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b9c:	2384      	movs	r3, #132	@ 0x84
 8000b9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bac:	230b      	movs	r3, #11
 8000bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	4831      	ldr	r0, [pc, #196]	@ (8000c7c <MX_GPIO_Init+0x1e8>)
 8000bb8:	f001 f932 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000bbc:	2310      	movs	r3, #16
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	482b      	ldr	r0, [pc, #172]	@ (8000c7c <MX_GPIO_Init+0x1e8>)
 8000bd0:	f001 f926 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8000bd4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	4825      	ldr	r0, [pc, #148]	@ (8000c80 <MX_GPIO_Init+0x1ec>)
 8000bea:	f001 f919 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000bee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000bf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	481d      	ldr	r0, [pc, #116]	@ (8000c80 <MX_GPIO_Init+0x1ec>)
 8000c0c:	f001 f908 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000c10:	2380      	movs	r3, #128	@ 0x80
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <MX_GPIO_Init+0x1f0>)
 8000c16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 031c 	add.w	r3, r7, #28
 8000c20:	4619      	mov	r1, r3
 8000c22:	4819      	ldr	r0, [pc, #100]	@ (8000c88 <MX_GPIO_Init+0x1f4>)
 8000c24:	f001 f8fc 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8000c28:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c36:	2302      	movs	r3, #2
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c3a:	230b      	movs	r3, #11
 8000c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c3e:	f107 031c 	add.w	r3, r7, #28
 8000c42:	4619      	mov	r1, r3
 8000c44:	4810      	ldr	r0, [pc, #64]	@ (8000c88 <MX_GPIO_Init+0x1f4>)
 8000c46:	f001 f8eb 	bl	8001e20 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8000c4a:	23c0      	movs	r3, #192	@ 0xc0
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 031c 	add.w	r3, r7, #28
 8000c62:	4619      	mov	r1, r3
 8000c64:	4806      	ldr	r0, [pc, #24]	@ (8000c80 <MX_GPIO_Init+0x1ec>)
 8000c66:	f001 f8db 	bl	8001e20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3730      	adds	r7, #48	@ 0x30
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	44020c00 	.word	0x44020c00
 8000c78:	42020800 	.word	0x42020800
 8000c7c:	42020000 	.word	0x42020000
 8000c80:	42020400 	.word	0x42020400
 8000c84:	10110000 	.word	0x10110000
 8000c88:	42021800 	.word	0x42021800

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <Error_Handler+0x8>

08000c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0cc      	sub	sp, #304	@ 0x130
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cb2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000cb6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb8:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
 8000cc0:	605a      	str	r2, [r3, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
 8000cc4:	60da      	str	r2, [r3, #12]
 8000cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ccc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f00e fa37 	bl	800f14c <memset>
  if(hi2c->Instance==I2C1)
 8000cde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000ce2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a33      	ldr	r2, [pc, #204]	@ (8000db8 <HAL_I2C_MspInit+0x110>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d15e      	bne.n	8000dae <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cf0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000cf4:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000cf8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d08:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d12:	f107 0310 	add.w	r3, r7, #16
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 ff9c 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8000d22:	f7ff ffb3 	bl	8000c8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b25      	ldr	r3, [pc, #148]	@ (8000dbc <HAL_I2C_MspInit+0x114>)
 8000d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d2c:	4a23      	ldr	r2, [pc, #140]	@ (8000dbc <HAL_I2C_MspInit+0x114>)
 8000d2e:	f043 0302 	orr.w	r3, r3, #2
 8000d32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000d36:	4b21      	ldr	r3, [pc, #132]	@ (8000dbc <HAL_I2C_MspInit+0x114>)
 8000d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000d3c:	f003 0202 	and.w	r2, r3, #2
 8000d40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d44:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d4e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000d52:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d54:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d58:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5c:	2312      	movs	r3, #18
 8000d5e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d6e:	2304      	movs	r3, #4
 8000d70:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4811      	ldr	r0, [pc, #68]	@ (8000dc0 <HAL_I2C_MspInit+0x118>)
 8000d7c:	f001 f850 	bl	8001e20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d80:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <HAL_I2C_MspInit+0x114>)
 8000d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d86:	4a0d      	ldr	r2, [pc, #52]	@ (8000dbc <HAL_I2C_MspInit+0x114>)
 8000d88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d8c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d90:	4b0a      	ldr	r3, [pc, #40]	@ (8000dbc <HAL_I2C_MspInit+0x114>)
 8000d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d96:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000d9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000d9e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8000da8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000dac:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dae:	bf00      	nop
 8000db0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40005400 	.word	0x40005400
 8000dbc:	44020c00 	.word	0x44020c00
 8000dc0:	42020400 	.word	0x42020400

08000dc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b0ce      	sub	sp, #312	@ 0x138
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dce:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000dd2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000de8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000dec:	4618      	mov	r0, r3
 8000dee:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000df2:	461a      	mov	r2, r3
 8000df4:	2100      	movs	r1, #0
 8000df6:	f00e f9a9 	bl	800f14c <memset>
  if(hspi->Instance==SPI1)
 8000dfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000dfe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a49      	ldr	r2, [pc, #292]	@ (8000f2c <HAL_SPI_MspInit+0x168>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	f040 808a 	bne.w	8000f22 <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8000e0e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e12:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000e16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e1a:	f04f 0300 	mov.w	r3, #0
 8000e1e:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8000e22:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e26:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e30:	f107 0318 	add.w	r3, r7, #24
 8000e34:	4618      	mov	r0, r3
 8000e36:	f003 ff0d 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8000e40:	f7ff ff24 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e44:	4b3a      	ldr	r3, [pc, #232]	@ (8000f30 <HAL_SPI_MspInit+0x16c>)
 8000e46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e4a:	4a39      	ldr	r2, [pc, #228]	@ (8000f30 <HAL_SPI_MspInit+0x16c>)
 8000e4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e50:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8000e54:	4b36      	ldr	r3, [pc, #216]	@ (8000f30 <HAL_SPI_MspInit+0x16c>)
 8000e56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000e5a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8000e5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e62:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e6c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000e70:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	4b2f      	ldr	r3, [pc, #188]	@ (8000f30 <HAL_SPI_MspInit+0x16c>)
 8000e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e78:	4a2d      	ldr	r2, [pc, #180]	@ (8000f30 <HAL_SPI_MspInit+0x16c>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000e82:	4b2b      	ldr	r3, [pc, #172]	@ (8000f30 <HAL_SPI_MspInit+0x16c>)
 8000e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000e88:	f003 0201 	and.w	r2, r3, #1
 8000e8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e90:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000e9a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8000e9e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea0:	4b23      	ldr	r3, [pc, #140]	@ (8000f30 <HAL_SPI_MspInit+0x16c>)
 8000ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ea6:	4a22      	ldr	r2, [pc, #136]	@ (8000f30 <HAL_SPI_MspInit+0x16c>)
 8000ea8:	f043 0308 	orr.w	r3, r3, #8
 8000eac:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <HAL_SPI_MspInit+0x16c>)
 8000eb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000eb6:	f003 0208 	and.w	r2, r3, #8
 8000eba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ebe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8000ec8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000ecc:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ece:	2360      	movs	r3, #96	@ 0x60
 8000ed0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ee6:	2305      	movs	r3, #5
 8000ee8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4810      	ldr	r0, [pc, #64]	@ (8000f34 <HAL_SPI_MspInit+0x170>)
 8000ef4:	f000 ff94 	bl	8001e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ef8:	2380      	movs	r3, #128	@ 0x80
 8000efa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f10:	2305      	movs	r3, #5
 8000f12:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f16:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4806      	ldr	r0, [pc, #24]	@ (8000f38 <HAL_SPI_MspInit+0x174>)
 8000f1e:	f000 ff7f 	bl	8001e20 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f22:	bf00      	nop
 8000f24:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40013000 	.word	0x40013000
 8000f30:	44020c00 	.word	0x44020c00
 8000f34:	42020000 	.word	0x42020000
 8000f38:	42020c00 	.word	0x42020c00

08000f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b0d0      	sub	sp, #320	@ 0x140
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f46:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000f4a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f60:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000f64:	4618      	mov	r0, r3
 8000f66:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	f00e f8ed 	bl	800f14c <memset>
  if(huart->Instance==USART2)
 8000f72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f76:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8001170 <HAL_UART_MspInit+0x234>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	f040 808a 	bne.w	800109a <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f86:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f8a:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8000f8e:	f04f 0202 	mov.w	r2, #2
 8000f92:	f04f 0300 	mov.w	r3, #0
 8000f96:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f9a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000f9e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 fe52 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8000fb6:	f7ff fe69 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fba:	4b6e      	ldr	r3, [pc, #440]	@ (8001174 <HAL_UART_MspInit+0x238>)
 8000fbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000fc0:	4a6c      	ldr	r2, [pc, #432]	@ (8001174 <HAL_UART_MspInit+0x238>)
 8000fc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000fca:	4b6a      	ldr	r3, [pc, #424]	@ (8001174 <HAL_UART_MspInit+0x238>)
 8000fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000fd0:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8000fd4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fd8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000fe2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8000fe6:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	4b62      	ldr	r3, [pc, #392]	@ (8001174 <HAL_UART_MspInit+0x238>)
 8000fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000fee:	4a61      	ldr	r2, [pc, #388]	@ (8001174 <HAL_UART_MspInit+0x238>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000ff8:	4b5e      	ldr	r3, [pc, #376]	@ (8001174 <HAL_UART_MspInit+0x238>)
 8000ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ffe:	f003 0201 	and.w	r2, r3, #1
 8001002:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001006:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001010:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001014:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001016:	4b57      	ldr	r3, [pc, #348]	@ (8001174 <HAL_UART_MspInit+0x238>)
 8001018:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800101c:	4a55      	ldr	r2, [pc, #340]	@ (8001174 <HAL_UART_MspInit+0x238>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001026:	4b53      	ldr	r3, [pc, #332]	@ (8001174 <HAL_UART_MspInit+0x238>)
 8001028:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800102c:	f003 0208 	and.w	r2, r3, #8
 8001030:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001034:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800103e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001042:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001044:	2308      	movs	r3, #8
 8001046:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800105c:	2307      	movs	r3, #7
 800105e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001062:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001066:	4619      	mov	r1, r3
 8001068:	4843      	ldr	r0, [pc, #268]	@ (8001178 <HAL_UART_MspInit+0x23c>)
 800106a:	f000 fed9 	bl	8001e20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800106e:	2320      	movs	r3, #32
 8001070:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001086:	2307      	movs	r3, #7
 8001088:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800108c:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8001090:	4619      	mov	r1, r3
 8001092:	483a      	ldr	r0, [pc, #232]	@ (800117c <HAL_UART_MspInit+0x240>)
 8001094:	f000 fec4 	bl	8001e20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001098:	e065      	b.n	8001166 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART6)
 800109a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800109e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a36      	ldr	r2, [pc, #216]	@ (8001180 <HAL_UART_MspInit+0x244>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d15c      	bne.n	8001166 <HAL_UART_MspInit+0x22a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80010ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010b0:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80010b4:	f04f 0220 	mov.w	r2, #32
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 80010c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010c4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80010c8:	2200      	movs	r2, #0
 80010ca:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010cc:	f107 0320 	add.w	r3, r7, #32
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fdbf 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 80010dc:	f7ff fdd6 	bl	8000c8c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80010e0:	4b24      	ldr	r3, [pc, #144]	@ (8001174 <HAL_UART_MspInit+0x238>)
 80010e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010e6:	4a23      	ldr	r2, [pc, #140]	@ (8001174 <HAL_UART_MspInit+0x238>)
 80010e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010ec:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80010f0:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <HAL_UART_MspInit+0x238>)
 80010f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80010f6:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 80010fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80010fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001108:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800110c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_UART_MspInit+0x238>)
 8001110:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001114:	4a17      	ldr	r2, [pc, #92]	@ (8001174 <HAL_UART_MspInit+0x238>)
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800111e:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <HAL_UART_MspInit+0x238>)
 8001120:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001124:	f003 0204 	and.w	r2, r3, #4
 8001128:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800112c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001136:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800113a:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800113c:	23c0      	movs	r3, #192	@ 0xc0
 800113e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8001154:	2307      	movs	r3, #7
 8001156:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115a:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800115e:	4619      	mov	r1, r3
 8001160:	4808      	ldr	r0, [pc, #32]	@ (8001184 <HAL_UART_MspInit+0x248>)
 8001162:	f000 fe5d 	bl	8001e20 <HAL_GPIO_Init>
}
 8001166:	bf00      	nop
 8001168:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40004400 	.word	0x40004400
 8001174:	44020c00 	.word	0x44020c00
 8001178:	42020000 	.word	0x42020000
 800117c:	42020c00 	.word	0x42020c00
 8001180:	40006400 	.word	0x40006400
 8001184:	42020800 	.word	0x42020800

08001188 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b0c6      	sub	sp, #280	@ 0x118
 800118c:	af00      	add	r7, sp, #0
 800118e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001192:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001196:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001198:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800119c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011a0:	4618      	mov	r0, r3
 80011a2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80011a6:	461a      	mov	r2, r3
 80011a8:	2100      	movs	r1, #0
 80011aa:	f00d ffcf 	bl	800f14c <memset>
  if(hpcd->Instance==USB_DRD_FS)
 80011ae:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a22      	ldr	r2, [pc, #136]	@ (8001244 <HAL_PCD_MspInit+0xbc>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d13b      	bne.n	8001238 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80011c0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011c4:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	f04f 0310 	mov.w	r3, #16
 80011d0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80011d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80011d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80011dc:	2230      	movs	r2, #48	@ 0x30
 80011de:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011e2:	f107 0310 	add.w	r3, r7, #16
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 fd34 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 80011f2:	f7ff fd4b 	bl	8000c8c <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 80011f6:	f002 fda3 	bl	8003d40 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80011fa:	4b13      	ldr	r3, [pc, #76]	@ (8001248 <HAL_PCD_MspInit+0xc0>)
 80011fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001200:	4a11      	ldr	r2, [pc, #68]	@ (8001248 <HAL_PCD_MspInit+0xc0>)
 8001202:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001206:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 800120a:	4b0f      	ldr	r3, [pc, #60]	@ (8001248 <HAL_PCD_MspInit+0xc0>)
 800120c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001210:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8001214:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001218:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001222:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001226:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2100      	movs	r1, #0
 800122c:	204a      	movs	r0, #74	@ 0x4a
 800122e:	f000 fc97 	bl	8001b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8001232:	204a      	movs	r0, #74	@ 0x4a
 8001234:	f000 fcae 	bl	8001b94 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 8001238:	bf00      	nop
 800123a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40016000 	.word	0x40016000
 8001248:	44020c00 	.word	0x44020c00

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <NMI_Handler+0x4>

08001254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <MemManage_Handler+0x4>

08001264 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <UsageFault_Handler+0x4>

08001274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a2:	f000 fb61 	bl	8001968 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}

080012aa <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 f9d6 	bl	8001660 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 80012bc:	4802      	ldr	r0, [pc, #8]	@ (80012c8 <USB_DRD_FS_IRQHandler+0x10>)
 80012be:	f001 f9d1 	bl	8002664 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200003a8 	.word	0x200003a8

080012cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d4:	4a14      	ldr	r2, [pc, #80]	@ (8001328 <_sbrk+0x5c>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <_sbrk+0x60>)
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e8:	4b11      	ldr	r3, [pc, #68]	@ (8001330 <_sbrk+0x64>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	@ (8001334 <_sbrk+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ee:	4b10      	ldr	r3, [pc, #64]	@ (8001330 <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d207      	bcs.n	800130c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012fc:	f00d ff2e 	bl	800f15c <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	220c      	movs	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	e009      	b.n	8001320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800130c:	4b08      	ldr	r3, [pc, #32]	@ (8001330 <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001312:	4b07      	ldr	r3, [pc, #28]	@ (8001330 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a05      	ldr	r2, [pc, #20]	@ (8001330 <_sbrk+0x64>)
 800131c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	200a0000 	.word	0x200a0000
 800132c:	00000500 	.word	0x00000500
 8001330:	20000968 	.word	0x20000968
 8001334:	20001280 	.word	0x20001280

08001338 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800133e:	4b35      	ldr	r3, [pc, #212]	@ (8001414 <SystemInit+0xdc>)
 8001340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001344:	4a33      	ldr	r2, [pc, #204]	@ (8001414 <SystemInit+0xdc>)
 8001346:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800134a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 800134e:	4b32      	ldr	r3, [pc, #200]	@ (8001418 <SystemInit+0xe0>)
 8001350:	2201      	movs	r2, #1
 8001352:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001354:	4b30      	ldr	r3, [pc, #192]	@ (8001418 <SystemInit+0xe0>)
 8001356:	2200      	movs	r2, #0
 8001358:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800135a:	4b2f      	ldr	r3, [pc, #188]	@ (8001418 <SystemInit+0xe0>)
 800135c:	2200      	movs	r2, #0
 800135e:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8001360:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <SystemInit+0xe0>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	492c      	ldr	r1, [pc, #176]	@ (8001418 <SystemInit+0xe0>)
 8001366:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <SystemInit+0xe4>)
 8001368:	4013      	ands	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 800136c:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <SystemInit+0xe0>)
 800136e:	2200      	movs	r2, #0
 8001370:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 8001372:	4b29      	ldr	r3, [pc, #164]	@ (8001418 <SystemInit+0xe0>)
 8001374:	2200      	movs	r2, #0
 8001376:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8001378:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <SystemInit+0xe0>)
 800137a:	2200      	movs	r2, #0
 800137c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800137e:	4b26      	ldr	r3, [pc, #152]	@ (8001418 <SystemInit+0xe0>)
 8001380:	4a27      	ldr	r2, [pc, #156]	@ (8001420 <SystemInit+0xe8>)
 8001382:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8001384:	4b24      	ldr	r3, [pc, #144]	@ (8001418 <SystemInit+0xe0>)
 8001386:	2200      	movs	r2, #0
 8001388:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <SystemInit+0xe0>)
 800138c:	4a24      	ldr	r2, [pc, #144]	@ (8001420 <SystemInit+0xe8>)
 800138e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8001390:	4b21      	ldr	r3, [pc, #132]	@ (8001418 <SystemInit+0xe0>)
 8001392:	2200      	movs	r2, #0
 8001394:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <SystemInit+0xe0>)
 8001398:	4a21      	ldr	r2, [pc, #132]	@ (8001420 <SystemInit+0xe8>)
 800139a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 800139c:	4b1e      	ldr	r3, [pc, #120]	@ (8001418 <SystemInit+0xe0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80013a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001418 <SystemInit+0xe0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001418 <SystemInit+0xe0>)
 80013a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <SystemInit+0xe0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <SystemInit+0xdc>)
 80013b6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80013ba:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 80013bc:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <SystemInit+0xec>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 80013c4:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80013cc:	d003      	beq.n	80013d6 <SystemInit+0x9e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80013d4:	d117      	bne.n	8001406 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 80013d6:	4b13      	ldr	r3, [pc, #76]	@ (8001424 <SystemInit+0xec>)
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	f003 0301 	and.w	r3, r3, #1
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <SystemInit+0xec>)
 80013e4:	4a10      	ldr	r2, [pc, #64]	@ (8001428 <SystemInit+0xf0>)
 80013e6:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001424 <SystemInit+0xec>)
 80013ea:	4a10      	ldr	r2, [pc, #64]	@ (800142c <SystemInit+0xf4>)
 80013ec:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 80013ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <SystemInit+0xec>)
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001424 <SystemInit+0xec>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001424 <SystemInit+0xec>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	4a09      	ldr	r2, [pc, #36]	@ (8001424 <SystemInit+0xec>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	61d3      	str	r3, [r2, #28]
  }
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	e000ed00 	.word	0xe000ed00
 8001418:	44020c00 	.word	0x44020c00
 800141c:	eae2eae3 	.word	0xeae2eae3
 8001420:	01010280 	.word	0x01010280
 8001424:	40022000 	.word	0x40022000
 8001428:	08192a3b 	.word	0x08192a3b
 800142c:	4c5d6e7f 	.word	0x4c5d6e7f

08001430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001430:	480d      	ldr	r0, [pc, #52]	@ (8001468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001432:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001434:	f7ff ff80 	bl	8001338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001438:	480c      	ldr	r0, [pc, #48]	@ (800146c <LoopForever+0x6>)
  ldr r1, =_edata
 800143a:	490d      	ldr	r1, [pc, #52]	@ (8001470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800143c:	4a0d      	ldr	r2, [pc, #52]	@ (8001474 <LoopForever+0xe>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001440:	e002      	b.n	8001448 <LoopCopyDataInit>

08001442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001446:	3304      	adds	r3, #4

08001448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800144a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800144c:	d3f9      	bcc.n	8001442 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800144e:	4a0a      	ldr	r2, [pc, #40]	@ (8001478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001450:	4c0a      	ldr	r4, [pc, #40]	@ (800147c <LoopForever+0x16>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001454:	e001      	b.n	800145a <LoopFillZerobss>

08001456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001458:	3204      	adds	r2, #4

0800145a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800145a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800145c:	d3fb      	bcc.n	8001456 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800145e:	f00d fe83 	bl	800f168 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001462:	f7ff f8a7 	bl	80005b4 <main>

08001466 <LoopForever>:

LoopForever:
    b LoopForever
 8001466:	e7fe      	b.n	8001466 <LoopForever>
  ldr   r0, =_estack
 8001468:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800146c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001470:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001474:	0800fb70 	.word	0x0800fb70
  ldr r2, =_sbss
 8001478:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 800147c:	2000127c 	.word	0x2000127c

08001480 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001480:	e7fe      	b.n	8001480 <ADC1_IRQHandler>
	...

08001484 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	@ 0x30
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d009      	beq.n	80014ac <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <BSP_LED_Init+0x28>
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d003      	beq.n	80014ac <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014a4:	f06f 0301 	mvn.w	r3, #1
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014aa:	e055      	b.n	8001558 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d10f      	bne.n	80014d2 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 80014b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001564 <BSP_LED_Init+0xe0>)
 80014b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014b8:	4a2a      	ldr	r2, [pc, #168]	@ (8001564 <BSP_LED_Init+0xe0>)
 80014ba:	f043 0320 	orr.w	r3, r3, #32
 80014be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014c2:	4b28      	ldr	r3, [pc, #160]	@ (8001564 <BSP_LED_Init+0xe0>)
 80014c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014c8:	f003 0320 	and.w	r3, r3, #32
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	e021      	b.n	8001516 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d10f      	bne.n	80014f8 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 80014d8:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <BSP_LED_Init+0xe0>)
 80014da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014de:	4a21      	ldr	r2, [pc, #132]	@ (8001564 <BSP_LED_Init+0xe0>)
 80014e0:	f043 0302 	orr.w	r3, r3, #2
 80014e4:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80014e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001564 <BSP_LED_Init+0xe0>)
 80014ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	e00e      	b.n	8001516 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80014f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001564 <BSP_LED_Init+0xe0>)
 80014fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80014fe:	4a19      	ldr	r2, [pc, #100]	@ (8001564 <BSP_LED_Init+0xe0>)
 8001500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001504:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001508:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <BSP_LED_Init+0xe0>)
 800150a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800150e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4a13      	ldr	r2, [pc, #76]	@ (8001568 <BSP_LED_Init+0xe4>)
 800151a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800151e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	4a0f      	ldr	r2, [pc, #60]	@ (800156c <BSP_LED_Init+0xe8>)
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	f107 0218 	add.w	r2, r7, #24
 8001538:	4611      	mov	r1, r2
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fc70 	bl	8001e20 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4a0a      	ldr	r2, [pc, #40]	@ (800156c <BSP_LED_Init+0xe8>)
 8001544:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	4a07      	ldr	r2, [pc, #28]	@ (8001568 <BSP_LED_Init+0xe4>)
 800154c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001550:	2200      	movs	r2, #0
 8001552:	4619      	mov	r1, r3
 8001554:	f000 fdb6 	bl	80020c4 <HAL_GPIO_WritePin>
  }

  return ret;
 8001558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800155a:	4618      	mov	r0, r3
 800155c:	3730      	adds	r7, #48	@ 0x30
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	44020c00 	.word	0x44020c00
 8001568:	0800faf8 	.word	0x0800faf8
 800156c:	20000008 	.word	0x20000008

08001570 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	460a      	mov	r2, r1
 800157a:	71fb      	strb	r3, [r7, #7]
 800157c:	4613      	mov	r3, r2
 800157e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001580:	4b30      	ldr	r3, [pc, #192]	@ (8001644 <BSP_PB_Init+0xd4>)
 8001582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001586:	4a2f      	ldr	r2, [pc, #188]	@ (8001644 <BSP_PB_Init+0xd4>)
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001590:	4b2c      	ldr	r3, [pc, #176]	@ (8001644 <BSP_PB_Init+0xd4>)
 8001592:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800159e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015a2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80015a4:	2302      	movs	r3, #2
 80015a6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a8:	2302      	movs	r3, #2
 80015aa:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 80015ac:	79bb      	ldrb	r3, [r7, #6]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10c      	bne.n	80015cc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4a23      	ldr	r2, [pc, #140]	@ (8001648 <BSP_PB_Init+0xd8>)
 80015ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015be:	f107 020c 	add.w	r2, r7, #12
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fc2b 	bl	8001e20 <HAL_GPIO_Init>
 80015ca:	e036      	b.n	800163a <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80015cc:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <BSP_PB_Init+0xdc>)
 80015ce:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001648 <BSP_PB_Init+0xd8>)
 80015d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d8:	f107 020c 	add.w	r2, r7, #12
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fc1e 	bl	8001e20 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80015e4:	79fa      	ldrb	r2, [r7, #7]
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4a18      	ldr	r2, [pc, #96]	@ (8001650 <BSP_PB_Init+0xe0>)
 80015f0:	441a      	add	r2, r3
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	4917      	ldr	r1, [pc, #92]	@ (8001654 <BSP_PB_Init+0xe4>)
 80015f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4610      	mov	r0, r2
 80015fe:	f000 fbb3 	bl	8001d68 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001602:	79fa      	ldrb	r2, [r7, #7]
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4a10      	ldr	r2, [pc, #64]	@ (8001650 <BSP_PB_Init+0xe0>)
 800160e:	1898      	adds	r0, r3, r2
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	4a11      	ldr	r2, [pc, #68]	@ (8001658 <BSP_PB_Init+0xe8>)
 8001614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001618:	461a      	mov	r2, r3
 800161a:	2100      	movs	r1, #0
 800161c:	f000 fb78 	bl	8001d10 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001620:	2018      	movs	r0, #24
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	4a0d      	ldr	r2, [pc, #52]	@ (800165c <BSP_PB_Init+0xec>)
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	f000 fa97 	bl	8001b60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001632:	2318      	movs	r3, #24
 8001634:	4618      	mov	r0, r3
 8001636:	f000 faad 	bl	8001b94 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3720      	adds	r7, #32
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	44020c00 	.word	0x44020c00
 8001648:	20000014 	.word	0x20000014
 800164c:	10110000 	.word	0x10110000
 8001650:	2000096c 	.word	0x2000096c
 8001654:	0800fb00 	.word	0x0800fb00
 8001658:	20000018 	.word	0x20000018
 800165c:	2000001c 	.word	0x2000001c

08001660 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800166a:	79fa      	ldrb	r2, [r7, #7]
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4a04      	ldr	r2, [pc, #16]	@ (8001688 <BSP_PB_IRQHandler+0x28>)
 8001676:	4413      	add	r3, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fb89 	bl	8001d90 <HAL_EXTI_IRQHandler>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000096c 	.word	0x2000096c

0800168c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
	...

080016a4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80016ba:	f06f 0301 	mvn.w	r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	e018      	b.n	80016f4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	2294      	movs	r2, #148	@ 0x94
 80016c6:	fb02 f303 	mul.w	r3, r2, r3
 80016ca:	4a0d      	ldr	r2, [pc, #52]	@ (8001700 <BSP_COM_Init+0x5c>)
 80016cc:	4413      	add	r3, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f854 	bl	800177c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	2294      	movs	r2, #148	@ 0x94
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	4a08      	ldr	r2, [pc, #32]	@ (8001700 <BSP_COM_Init+0x5c>)
 80016de:	4413      	add	r3, r2
 80016e0:	6839      	ldr	r1, [r7, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f80e 	bl	8001704 <MX_USART_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d002      	beq.n	80016f4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80016ee:	f06f 0303 	mvn.w	r3, #3
 80016f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80016f4:	68fb      	ldr	r3, [r7, #12]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000978 	.word	0x20000978

08001704 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 800170e:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <MX_USART_Init+0x64>)
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	220c      	movs	r2, #12
 8001722:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	895b      	ldrh	r3, [r3, #10]
 8001728:	461a      	mov	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	891b      	ldrh	r3, [r3, #8]
 800173a:	461a      	mov	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	899b      	ldrh	r3, [r3, #12]
 8001744:	461a      	mov	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001750:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f008 fc5e 	bl	800a01a <HAL_UART_Init>
 800175e:	4603      	mov	r3, r0
}
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	20000004 	.word	0x20000004

0800176c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001770:	2000      	movs	r0, #0
 8001772:	f7ff ff8b 	bl	800168c <BSP_PB_Callback>
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
	...

0800177c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	@ 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001784:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <COM1_MspInit+0xa8>)
 8001786:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800178a:	4a26      	ldr	r2, [pc, #152]	@ (8001824 <COM1_MspInit+0xa8>)
 800178c:	f043 0308 	orr.w	r3, r3, #8
 8001790:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001794:	4b23      	ldr	r3, [pc, #140]	@ (8001824 <COM1_MspInit+0xa8>)
 8001796:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80017a2:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <COM1_MspInit+0xa8>)
 80017a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001824 <COM1_MspInit+0xa8>)
 80017aa:	f043 0308 	orr.w	r3, r3, #8
 80017ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80017b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001824 <COM1_MspInit+0xa8>)
 80017b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80017c0:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <COM1_MspInit+0xa8>)
 80017c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017c6:	4a17      	ldr	r2, [pc, #92]	@ (8001824 <COM1_MspInit+0xa8>)
 80017c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017cc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <COM1_MspInit+0xa8>)
 80017d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80017d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80017de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017e2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80017e8:	2302      	movs	r3, #2
 80017ea:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80017ec:	2301      	movs	r3, #1
 80017ee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80017f0:	2307      	movs	r3, #7
 80017f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	480b      	ldr	r0, [pc, #44]	@ (8001828 <COM1_MspInit+0xac>)
 80017fc:	f000 fb10 	bl	8001e20 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8001800:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001804:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800180a:	2307      	movs	r3, #7
 800180c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	4619      	mov	r1, r3
 8001814:	4804      	ldr	r0, [pc, #16]	@ (8001828 <COM1_MspInit+0xac>)
 8001816:	f000 fb03 	bl	8001e20 <HAL_GPIO_Init>
}
 800181a:	bf00      	nop
 800181c:	3728      	adds	r7, #40	@ 0x28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	44020c00 	.word	0x44020c00
 8001828:	42020c00 	.word	0x42020c00

0800182c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f98a 	bl	8001b4a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001836:	f003 f883 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 800183a:	4602      	mov	r2, r0
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <HAL_Init+0x44>)
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	490b      	ldr	r1, [pc, #44]	@ (8001874 <HAL_Init+0x48>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
 800184c:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <HAL_Init+0x4c>)
 800184e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001850:	2004      	movs	r0, #4
 8001852:	f000 f9cf 	bl	8001bf4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001856:	200f      	movs	r0, #15
 8001858:	f000 f810 	bl	800187c <HAL_InitTick>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e002      	b.n	800186c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001866:	f7ff fa17 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800186a:	2300      	movs	r3, #0
}
 800186c:	4618      	mov	r0, r3
 800186e:	bd80      	pop	{r7, pc}
 8001870:	44020c00 	.word	0x44020c00
 8001874:	0800fae0 	.word	0x0800fae0
 8001878:	20000000 	.word	0x20000000

0800187c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001888:	4b33      	ldr	r3, [pc, #204]	@ (8001958 <HAL_InitTick+0xdc>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e05c      	b.n	800194e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001894:	4b31      	ldr	r3, [pc, #196]	@ (800195c <HAL_InitTick+0xe0>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b04      	cmp	r3, #4
 800189e:	d10c      	bne.n	80018ba <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80018a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001960 <HAL_InitTick+0xe4>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001958 <HAL_InitTick+0xdc>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e037      	b.n	800192a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80018ba:	f000 f9f3 	bl	8001ca4 <HAL_SYSTICK_GetCLKSourceConfig>
 80018be:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d023      	beq.n	800190e <HAL_InitTick+0x92>
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d82d      	bhi.n	8001928 <HAL_InitTick+0xac>
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_InitTick+0x5e>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d00d      	beq.n	80018f4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 80018d8:	e026      	b.n	8001928 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 80018da:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <HAL_InitTick+0xe4>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <HAL_InitTick+0xdc>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	4619      	mov	r1, r3
 80018e4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80018e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f0:	60fb      	str	r3, [r7, #12]
        break;
 80018f2:	e01a      	b.n	800192a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80018f4:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <HAL_InitTick+0xdc>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8001902:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001906:	fbb2 f3f3 	udiv	r3, r2, r3
 800190a:	60fb      	str	r3, [r7, #12]
        break;
 800190c:	e00d      	b.n	800192a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800190e:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <HAL_InitTick+0xdc>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001918:	fbb3 f3f2 	udiv	r3, r3, r2
 800191c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001920:	fbb2 f3f3 	udiv	r3, r2, r3
 8001924:	60fb      	str	r3, [r7, #12]
        break;
 8001926:	e000      	b.n	800192a <HAL_InitTick+0xae>
        break;
 8001928:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f940 	bl	8001bb0 <HAL_SYSTICK_Config>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e009      	b.n	800194e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800193a:	2200      	movs	r2, #0
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	f04f 30ff 	mov.w	r0, #4294967295
 8001942:	f000 f90d 	bl	8001b60 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001946:	4a07      	ldr	r2, [pc, #28]	@ (8001964 <HAL_InitTick+0xe8>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000024 	.word	0x20000024
 800195c:	e000e010 	.word	0xe000e010
 8001960:	20000000 	.word	0x20000000
 8001964:	20000020 	.word	0x20000020

08001968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <HAL_IncTick+0x20>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x24>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4413      	add	r3, r2
 8001978:	4a04      	ldr	r2, [pc, #16]	@ (800198c <HAL_IncTick+0x24>)
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	20000024 	.word	0x20000024
 800198c:	20000a0c 	.word	0x20000a0c

08001990 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return uwTick;
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_GetTick+0x14>)
 8001996:	681b      	ldr	r3, [r3, #0]
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000a0c 	.word	0x20000a0c

080019a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b0:	f7ff ffee 	bl	8001990 <HAL_GetTick>
 80019b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c0:	d005      	beq.n	80019ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_Delay+0x44>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ce:	bf00      	nop
 80019d0:	f7ff ffde 	bl	8001990 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	429a      	cmp	r2, r3
 80019de:	d8f7      	bhi.n	80019d0 <HAL_Delay+0x28>
  {
  }
}
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000024 	.word	0x20000024

080019f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a22:	4a04      	ldr	r2, [pc, #16]	@ (8001a34 <__NVIC_SetPriorityGrouping+0x44>)
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	60d3      	str	r3, [r2, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	e000ed00 	.word	0xe000ed00

08001a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a3c:	4b04      	ldr	r3, [pc, #16]	@ (8001a50 <__NVIC_GetPriorityGrouping+0x18>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0a1b      	lsrs	r3, r3, #8
 8001a42:	f003 0307 	and.w	r3, r3, #7
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	db0b      	blt.n	8001a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	f003 021f 	and.w	r2, r3, #31
 8001a6c:	4907      	ldr	r1, [pc, #28]	@ (8001a8c <__NVIC_EnableIRQ+0x38>)
 8001a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2001      	movs	r0, #1
 8001a76:	fa00 f202 	lsl.w	r2, r0, r2
 8001a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	e000e100 	.word	0xe000e100

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	@ (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	@ (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	@ 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	@ 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ff4c 	bl	80019f0 <__NVIC_SetPriorityGrouping>
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b086      	sub	sp, #24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
 8001b6c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b6e:	f7ff ff63 	bl	8001a38 <__NVIC_GetPriorityGrouping>
 8001b72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	68b9      	ldr	r1, [r7, #8]
 8001b78:	6978      	ldr	r0, [r7, #20]
 8001b7a:	f7ff ffb3 	bl	8001ae4 <NVIC_EncodePriority>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b84:	4611      	mov	r1, r2
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff82 	bl	8001a90 <__NVIC_SetPriority>
}
 8001b8c:	bf00      	nop
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff56 	bl	8001a54 <__NVIC_EnableIRQ>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bc0:	d301      	bcc.n	8001bc6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00d      	b.n	8001be2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_SYSTICK_Config+0x40>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <HAL_SYSTICK_Config+0x40>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_SYSTICK_Config+0x40>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <HAL_SYSTICK_Config+0x40>)
 8001bda:	f043 0303 	orr.w	r3, r3, #3
 8001bde:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000e010 	.word	0xe000e010

08001bf4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d844      	bhi.n	8001c8c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8001c02:	a201      	add	r2, pc, #4	@ (adr r2, 8001c08 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8001c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c08:	08001c2b 	.word	0x08001c2b
 8001c0c:	08001c49 	.word	0x08001c49
 8001c10:	08001c6b 	.word	0x08001c6b
 8001c14:	08001c8d 	.word	0x08001c8d
 8001c18:	08001c1d 	.word	0x08001c1d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a1e      	ldr	r2, [pc, #120]	@ (8001c9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6013      	str	r3, [r2, #0]
      break;
 8001c28:	e031      	b.n	8001c8e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8001c9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c30:	f023 0304 	bic.w	r3, r3, #4
 8001c34:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001c36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ca0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c3c:	4a18      	ldr	r2, [pc, #96]	@ (8001ca0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c3e:	f023 030c 	bic.w	r3, r3, #12
 8001c42:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001c46:	e022      	b.n	8001c8e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001c48:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a13      	ldr	r2, [pc, #76]	@ (8001c9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c4e:	f023 0304 	bic.w	r3, r3, #4
 8001c52:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001c54:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c5a:	f023 030c 	bic.w	r3, r3, #12
 8001c5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ca0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001c68:	e011      	b.n	8001c8e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8001c9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001c7c:	f023 030c 	bic.w	r3, r3, #12
 8001c80:	4a07      	ldr	r2, [pc, #28]	@ (8001ca0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8001c82:	f043 0308 	orr.w	r3, r3, #8
 8001c86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8001c8a:	e000      	b.n	8001c8e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8001c8c:	bf00      	nop
  }
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000e010 	.word	0xe000e010
 8001ca0:	44020c00 	.word	0x44020c00

08001ca4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0304 	and.w	r3, r3, #4
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	607b      	str	r3, [r7, #4]
 8001cba:	e01e      	b.n	8001cfa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001cbc:	4b13      	ldr	r3, [pc, #76]	@ (8001d0c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8001cbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d00f      	beq.n	8001cee <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d80f      	bhi.n	8001cf4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d003      	beq.n	8001ce8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8001ce0:	e008      	b.n	8001cf4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
        break;
 8001ce6:	e008      	b.n	8001cfa <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	607b      	str	r3, [r7, #4]
        break;
 8001cec:	e005      	b.n	8001cfa <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	607b      	str	r3, [r7, #4]
        break;
 8001cf2:	e002      	b.n	8001cfa <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	607b      	str	r3, [r7, #4]
        break;
 8001cf8:	bf00      	nop
    }
  }
  return systick_source;
 8001cfa:	687b      	ldr	r3, [r7, #4]
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000e010 	.word	0xe000e010
 8001d0c:	44020c00 	.word	0x44020c00

08001d10 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001d10:	b480      	push	{r7}
 8001d12:	b087      	sub	sp, #28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	607a      	str	r2, [r7, #4]
 8001d1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8001d22:	7afb      	ldrb	r3, [r7, #11]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d011      	beq.n	8001d4c <HAL_EXTI_RegisterCallback+0x3c>
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	dc13      	bgt.n	8001d54 <HAL_EXTI_RegisterCallback+0x44>
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <HAL_EXTI_RegisterCallback+0x26>
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d007      	beq.n	8001d44 <HAL_EXTI_RegisterCallback+0x34>
 8001d34:	e00e      	b.n	8001d54 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	609a      	str	r2, [r3, #8]
      break;
 8001d42:	e00a      	b.n	8001d5a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	605a      	str	r2, [r3, #4]
      break;
 8001d4a:	e006      	b.n	8001d5a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	609a      	str	r2, [r3, #8]
      break;
 8001d52:	e002      	b.n	8001d5a <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	75fb      	strb	r3, [r7, #23]
      break;
 8001d58:	bf00      	nop
  }

  return status;
 8001d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e003      	b.n	8001d84 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d82:	2300      	movs	r3, #0
  }
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	0c1b      	lsrs	r3, r3, #16
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	2201      	movs	r2, #1
 8001dae:	fa02 f303 	lsl.w	r3, r2, r3
 8001db2:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	4b17      	ldr	r3, [pc, #92]	@ (8001e18 <HAL_EXTI_IRQHandler+0x88>)
 8001dba:	4413      	add	r3, r2
 8001dbc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d009      	beq.n	8001de2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d002      	beq.n	8001de2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	4b0d      	ldr	r3, [pc, #52]	@ (8001e1c <HAL_EXTI_IRQHandler+0x8c>)
 8001de8:	4413      	add	r3, r2
 8001dea:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d009      	beq.n	8001e10 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	4798      	blx	r3
    }
  }
}
 8001e10:	bf00      	nop
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	4402200c 	.word	0x4402200c
 8001e1c:	44022010 	.word	0x44022010

08001e20 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b087      	sub	sp, #28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e2e:	e136      	b.n	800209e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2101      	movs	r1, #1
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8128 	beq.w	8002098 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x38>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b12      	cmp	r3, #18
 8001e56:	d125      	bne.n	8001ea4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	08da      	lsrs	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3208      	adds	r2, #8
 8001e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e64:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	220f      	movs	r2, #15
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	f003 020f 	and.w	r2, r3, #15
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	08da      	lsrs	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3208      	adds	r2, #8
 8001e9e:	6979      	ldr	r1, [r7, #20]
 8001ea0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	2203      	movs	r2, #3
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0203 	and.w	r2, r3, #3
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d00b      	beq.n	8001ef8 <HAL_GPIO_Init+0xd8>
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d007      	beq.n	8001ef8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eec:	2b11      	cmp	r3, #17
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b12      	cmp	r3, #18
 8001ef6:	d130      	bne.n	8001f5a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f2e:	2201      	movs	r2, #1
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	091b      	lsrs	r3, r3, #4
 8001f44:	f003 0201 	and.w	r2, r3, #1
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b03      	cmp	r3, #3
 8001f60:	d017      	beq.n	8001f92 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4013      	ands	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d07c      	beq.n	8002098 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001f9e:	4a47      	ldr	r2, [pc, #284]	@ (80020bc <HAL_GPIO_Init+0x29c>)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	3318      	adds	r3, #24
 8001fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001faa:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	220f      	movs	r2, #15
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0a9a      	lsrs	r2, r3, #10
 8001fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80020c0 <HAL_GPIO_Init+0x2a0>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	f002 0203 	and.w	r2, r2, #3
 8001fd0:	00d2      	lsls	r2, r2, #3
 8001fd2:	4093      	lsls	r3, r2
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001fda:	4938      	ldr	r1, [pc, #224]	@ (80020bc <HAL_GPIO_Init+0x29c>)
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3318      	adds	r3, #24
 8001fe2:	697a      	ldr	r2, [r7, #20]
 8001fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001fe8:	4b34      	ldr	r3, [pc, #208]	@ (80020bc <HAL_GPIO_Init+0x29c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800200c:	4a2b      	ldr	r2, [pc, #172]	@ (80020bc <HAL_GPIO_Init+0x29c>)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002012:	4b2a      	ldr	r3, [pc, #168]	@ (80020bc <HAL_GPIO_Init+0x29c>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43db      	mvns	r3, r3
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	4013      	ands	r3, r2
 8002020:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8002036:	4a21      	ldr	r2, [pc, #132]	@ (80020bc <HAL_GPIO_Init+0x29c>)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800203c:	4b1f      	ldr	r3, [pc, #124]	@ (80020bc <HAL_GPIO_Init+0x29c>)
 800203e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002042:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	43db      	mvns	r3, r3
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4013      	ands	r3, r2
 800204c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4313      	orrs	r3, r2
 8002060:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8002062:	4a16      	ldr	r2, [pc, #88]	@ (80020bc <HAL_GPIO_Init+0x29c>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800206a:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <HAL_GPIO_Init+0x29c>)
 800206c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002070:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43db      	mvns	r3, r3
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	4013      	ands	r3, r2
 800207a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	4313      	orrs	r3, r2
 800208e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8002090:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <HAL_GPIO_Init+0x29c>)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	3301      	adds	r3, #1
 800209c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f47f aec1 	bne.w	8001e30 <HAL_GPIO_Init+0x10>
  }
}
 80020ae:	bf00      	nop
 80020b0:	bf00      	nop
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	44022000 	.word	0x44022000
 80020c0:	002f7f7f 	.word	0x002f7f7f

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
 80020d0:	4613      	mov	r3, r2
 80020d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d4:	787b      	ldrb	r3, [r7, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e0:	e002      	b.n	80020e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e08d      	b.n	8002222 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe fdc4 	bl	8000ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2224      	movs	r2, #36	@ 0x24
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 0201 	bic.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002144:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002154:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e006      	b.n	800217c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800217a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d108      	bne.n	8002196 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002192:	605a      	str	r2, [r3, #4]
 8002194:	e007      	b.n	80021a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	430a      	orrs	r2, r1
 80021e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69d9      	ldr	r1, [r3, #28]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1a      	ldr	r2, [r3, #32]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0201 	orr.w	r2, r2, #1
 8002202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
 8002232:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b20      	cmp	r3, #32
 800223e:	d138      	bne.n	80022b2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002246:	2b01      	cmp	r3, #1
 8002248:	d101      	bne.n	800224e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800224a:	2302      	movs	r3, #2
 800224c:	e032      	b.n	80022b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2201      	movs	r2, #1
 8002252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2224      	movs	r2, #36	@ 0x24
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0201 	bic.w	r2, r2, #1
 800226c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800227c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6819      	ldr	r1, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0201 	orr.w	r2, r2, #1
 800229c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022ae:	2300      	movs	r3, #0
 80022b0:	e000      	b.n	80022b4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022b2:	2302      	movs	r3, #2
  }
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b20      	cmp	r3, #32
 80022d4:	d139      	bne.n	800234a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e033      	b.n	800234c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2224      	movs	r2, #36	@ 0x24
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f022 0201 	bic.w	r2, r2, #1
 8002302:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002312:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2220      	movs	r2, #32
 800233a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800234a:	2302      	movs	r3, #2
  }
}
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8002364:	230a      	movs	r3, #10
 8002366:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8002368:	e002      	b.n	8002370 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	3b01      	subs	r3, #1
 800236e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1f9      	bne.n	800236a <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8002376:	887b      	ldrh	r3, [r7, #2]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800237e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	b29b      	uxth	r3, r3
 8002388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800238c:	b29b      	uxth	r3, r3
}
 800238e:	4618      	mov	r0, r3
 8002390:	3714      	adds	r7, #20
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80023a6:	230a      	movs	r3, #10
 80023a8:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80023aa:	e002      	b.n	80023b2 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f9      	bne.n	80023ac <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80023b8:	887b      	ldrh	r3, [r7, #2]
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0c1b      	lsrs	r3, r3, #16
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ce:	b29b      	uxth	r3, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80023e8:	230a      	movs	r3, #10
 80023ea:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80023ec:	e002      	b.n	80023f4 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	3b01      	subs	r3, #1
 80023f2:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f9      	bne.n	80023ee <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80023fa:	887b      	ldrh	r3, [r7, #2]
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002402:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	b29b      	uxth	r3, r3
 800240c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002410:	b29b      	uxth	r3, r3
}
 8002412:	4618      	mov	r0, r3
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr

0800241e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af02      	add	r7, sp, #8
 8002424:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0f3      	b.n	8002618 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d106      	bne.n	800244a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7fe fe9f 	bl	8001188 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2203      	movs	r2, #3
 800244e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f008 fb89 	bl	800ab6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6818      	ldr	r0, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7c1a      	ldrb	r2, [r3, #16]
 8002464:	f88d 2000 	strb.w	r2, [sp]
 8002468:	3304      	adds	r3, #4
 800246a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800246c:	f008 fb4d 	bl	800ab0a <USB_CoreInit>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d005      	beq.n	8002482 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0ca      	b.n	8002618 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f008 fb85 	bl	800ab98 <USB_SetCurrentMode>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0bb      	b.n	8002618 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a0:	2300      	movs	r3, #0
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e03f      	b.n	8002526 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	440b      	add	r3, r1
 80024b4:	3315      	adds	r3, #21
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80024ba:	7bfa      	ldrb	r2, [r7, #15]
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	3314      	adds	r3, #20
 80024ca:	7bfa      	ldrb	r2, [r7, #15]
 80024cc:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4413      	add	r3, r2
 80024d8:	00db      	lsls	r3, r3, #3
 80024da:	440b      	add	r3, r1
 80024dc:	3317      	adds	r3, #23
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80024e2:	7bfa      	ldrb	r2, [r7, #15]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	00db      	lsls	r3, r3, #3
 80024ee:	440b      	add	r3, r1
 80024f0:	3324      	adds	r3, #36	@ 0x24
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80024f6:	7bfa      	ldrb	r2, [r7, #15]
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	4613      	mov	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	440b      	add	r3, r1
 8002504:	3328      	adds	r3, #40	@ 0x28
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	6879      	ldr	r1, [r7, #4]
 800250e:	1c5a      	adds	r2, r3, #1
 8002510:	4613      	mov	r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	3304      	adds	r3, #4
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	3301      	adds	r3, #1
 8002524:	73fb      	strb	r3, [r7, #15]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	791b      	ldrb	r3, [r3, #4]
 800252a:	7bfa      	ldrb	r2, [r7, #15]
 800252c:	429a      	cmp	r2, r3
 800252e:	d3ba      	bcc.n	80024a6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002530:	2300      	movs	r3, #0
 8002532:	73fb      	strb	r3, [r7, #15]
 8002534:	e044      	b.n	80025c0 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002536:	7bfa      	ldrb	r2, [r7, #15]
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	440b      	add	r3, r1
 8002544:	f203 1355 	addw	r3, r3, #341	@ 0x155
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	440b      	add	r3, r1
 800255a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800255e:	7bfa      	ldrb	r2, [r7, #15]
 8002560:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	6879      	ldr	r1, [r7, #4]
 8002566:	4613      	mov	r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	4413      	add	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	440b      	add	r3, r1
 8002570:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800258e:	7bfa      	ldrb	r2, [r7, #15]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	440b      	add	r3, r1
 800259c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80025a4:	7bfa      	ldrb	r2, [r7, #15]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	440b      	add	r3, r1
 80025b2:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
 80025bc:	3301      	adds	r3, #1
 80025be:	73fb      	strb	r3, [r7, #15]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	791b      	ldrb	r3, [r3, #4]
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d3b5      	bcc.n	8002536 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7c1a      	ldrb	r2, [r3, #16]
 80025d2:	f88d 2000 	strb.w	r2, [sp]
 80025d6:	3304      	adds	r3, #4
 80025d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025da:	f008 fb00 	bl	800abde <USB_DevInit>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d005      	beq.n	80025f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e013      	b.n	8002618 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	7b1b      	ldrb	r3, [r3, #12]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d102      	bne.n	800260c <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f001 fb6b 	bl	8003ce2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f00a f959 	bl	800c8c8 <USB_DevDisconnect>

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_PCD_Start+0x16>
 8002632:	2302      	movs	r3, #2
 8002634:	e012      	b.n	800265c <HAL_PCD_Start+0x3c>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f008 fa7f 	bl	800ab46 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4618      	mov	r0, r3
 800264e:	f00a f92a 	bl	800c8a6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4618      	mov	r0, r3
 8002672:	f00a f93a 	bl	800c8ea <USB_ReadInterrupts>
 8002676:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 faf2 	bl	8002c6c <PCD_EP_ISR_Handler>

    return;
 8002688:	e0de      	b.n	8002848 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002690:	2b00      	cmp	r3, #0
 8002692:	d010      	beq.n	80026b6 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 80026a2:	400b      	ands	r3, r1
 80026a4:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f00b f833 	bl	800d712 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80026ac:	2100      	movs	r1, #0
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f8e1 	bl	8002876 <HAL_PCD_SetAddress>

    return;
 80026b4:	e0c8      	b.n	8002848 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d009      	beq.n	80026d4 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 80026ce:	400b      	ands	r3, r1
 80026d0:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80026d2:	e0b9      	b.n	8002848 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 80026ec:	400b      	ands	r3, r1
 80026ee:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80026f0:	e0aa      	b.n	8002848 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d029      	beq.n	8002750 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0204 	bic.w	r2, r2, #4
 800270a:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 0208 	bic.w	r2, r2, #8
 800271a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8002722:	2b01      	cmp	r3, #1
 8002724:	d107      	bne.n	8002736 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800272e:	2100      	movs	r1, #0
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f001 faf8 	bl	8003d26 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f893 	bl	8002862 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 800274a:	400b      	ands	r3, r1
 800274c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800274e:	e07b      	b.n	8002848 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002756:	2b00      	cmp	r3, #0
 8002758:	d01c      	beq.n	8002794 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0208 	orr.w	r2, r2, #8
 8002768:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8002778:	400b      	ands	r3, r1
 800277a:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0204 	orr.w	r2, r2, #4
 800278a:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 f85e 	bl	800284e <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002792:	e059      	b.n	8002848 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800279a:	2b00      	cmp	r3, #0
 800279c:	d033      	beq.n	8002806 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 80027ac:	400b      	ands	r3, r1
 80027ae:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d121      	bne.n	80027fe <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f042 0204 	orr.w	r2, r2, #4
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 0208 	orr.w	r2, r2, #8
 80027d8:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e8:	089b      	lsrs	r3, r3, #2
 80027ea:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80027f4:	2101      	movs	r1, #1
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f001 fa95 	bl	8003d26 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80027fc:	e024      	b.n	8002848 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f825 	bl	800284e <HAL_PCD_SuspendCallback>
    return;
 8002804:	e020      	b.n	8002848 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00c      	beq.n	800282a <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 800281e:	400b      	ands	r3, r1
 8002820:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f00a ff67 	bl	800d6f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002828:	e00e      	b.n	8002848 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d009      	beq.n	8002848 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8002842:	400b      	ands	r3, r1
 8002844:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8002846:	bf00      	nop
  }
}
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	460b      	mov	r3, r1
 8002880:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002888:	2b01      	cmp	r3, #1
 800288a:	d101      	bne.n	8002890 <HAL_PCD_SetAddress+0x1a>
 800288c:	2302      	movs	r3, #2
 800288e:	e012      	b.n	80028b6 <HAL_PCD_SetAddress+0x40>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	78fa      	ldrb	r2, [r7, #3]
 800289c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f009 ffea 	bl	800c880 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	4608      	mov	r0, r1
 80028c8:	4611      	mov	r1, r2
 80028ca:	461a      	mov	r2, r3
 80028cc:	4603      	mov	r3, r0
 80028ce:	70fb      	strb	r3, [r7, #3]
 80028d0:	460b      	mov	r3, r1
 80028d2:	803b      	strh	r3, [r7, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	da0f      	bge.n	8002904 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	f003 0207 	and.w	r2, r3, #7
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	3310      	adds	r3, #16
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4413      	add	r3, r2
 80028f8:	3304      	adds	r3, #4
 80028fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	705a      	strb	r2, [r3, #1]
 8002902:	e00f      	b.n	8002924 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	f003 0207 	and.w	r2, r3, #7
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	4413      	add	r3, r2
 800291a:	3304      	adds	r3, #4
 800291c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2200      	movs	r2, #0
 8002922:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	b2da      	uxtb	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002930:	883b      	ldrh	r3, [r7, #0]
 8002932:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	78ba      	ldrb	r2, [r7, #2]
 800293e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002940:	78bb      	ldrb	r3, [r7, #2]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d102      	bne.n	800294c <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002952:	2b01      	cmp	r3, #1
 8002954:	d101      	bne.n	800295a <HAL_PCD_EP_Open+0x9c>
 8002956:	2302      	movs	r3, #2
 8002958:	e00e      	b.n	8002978 <HAL_PCD_EP_Open+0xba>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68f9      	ldr	r1, [r7, #12]
 8002968:	4618      	mov	r0, r3
 800296a:	f008 f95b 	bl	800ac24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8002976:	7afb      	ldrb	r3, [r7, #11]
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	460b      	mov	r3, r1
 800298a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800298c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002990:	2b00      	cmp	r3, #0
 8002992:	da0f      	bge.n	80029b4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	f003 0207 	and.w	r2, r3, #7
 800299a:	4613      	mov	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	3310      	adds	r3, #16
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	4413      	add	r3, r2
 80029a8:	3304      	adds	r3, #4
 80029aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2201      	movs	r2, #1
 80029b0:	705a      	strb	r2, [r3, #1]
 80029b2:	e00f      	b.n	80029d4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	f003 0207 	and.w	r2, r3, #7
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	3304      	adds	r3, #4
 80029cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	b2da      	uxtb	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_PCD_EP_Close+0x6e>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e00e      	b.n	8002a0c <HAL_PCD_EP_Close+0x8c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68f9      	ldr	r1, [r7, #12]
 80029fc:	4618      	mov	r0, r3
 80029fe:	f008 fc71 	bl	800b2e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	603b      	str	r3, [r7, #0]
 8002a20:	460b      	mov	r3, r1
 8002a22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a24:	7afb      	ldrb	r3, [r7, #11]
 8002a26:	f003 0207 	and.w	r2, r3, #7
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4413      	add	r3, r2
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2200      	movs	r2, #0
 8002a54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a56:	7afb      	ldrb	r3, [r7, #11]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6979      	ldr	r1, [r7, #20]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f008 fdc5 	bl	800b5f8 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3718      	adds	r7, #24
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	f003 0207 	and.w	r2, r3, #7
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8002a9a:	681b      	ldr	r3, [r3, #0]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b086      	sub	sp, #24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab8:	7afb      	ldrb	r3, [r7, #11]
 8002aba:	f003 0207 	and.w	r2, r3, #7
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	3310      	adds	r3, #16
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	3304      	adds	r3, #4
 8002ace:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	2200      	movs	r2, #0
 8002aee:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2201      	movs	r2, #1
 8002af4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002af6:	7afb      	ldrb	r3, [r7, #11]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	b2da      	uxtb	r2, r3
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6979      	ldr	r1, [r7, #20]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f008 fd75 	bl	800b5f8 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	7912      	ldrb	r2, [r2, #4]
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e040      	b.n	8002bb8 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	da0f      	bge.n	8002b5e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	f003 0207 	and.w	r2, r3, #7
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	3310      	adds	r3, #16
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	3304      	adds	r3, #4
 8002b54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	705a      	strb	r2, [r3, #1]
 8002b5c:	e00d      	b.n	8002b7a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	4413      	add	r3, r2
 8002b70:	3304      	adds	r3, #4
 8002b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b80:	78fb      	ldrb	r3, [r7, #3]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_PCD_EP_SetStall+0x82>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e00e      	b.n	8002bb8 <HAL_PCD_EP_SetStall+0xa0>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68f9      	ldr	r1, [r7, #12]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f009 fd8f 	bl	800c6cc <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bcc:	78fb      	ldrb	r3, [r7, #3]
 8002bce:	f003 030f 	and.w	r3, r3, #15
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	7912      	ldrb	r2, [r2, #4]
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e042      	b.n	8002c64 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	da0f      	bge.n	8002c06 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	f003 0207 	and.w	r2, r3, #7
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	3310      	adds	r3, #16
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	705a      	strb	r2, [r3, #1]
 8002c04:	e00f      	b.n	8002c26 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	f003 0207 	and.w	r2, r3, #7
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	f003 0307 	and.w	r3, r3, #7
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_PCD_EP_ClrStall+0x86>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e00e      	b.n	8002c64 <HAL_PCD_EP_ClrStall+0xa4>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68f9      	ldr	r1, [r7, #12]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f009 fd7f 	bl	800c758 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08e      	sub	sp, #56	@ 0x38
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002c74:	e326      	b.n	80032c4 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7c:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8002c7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8002c8a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 8124 	bne.w	8002edc <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002c94:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d13e      	bne.n	8002d1c <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b89      	ldr	r3, [pc, #548]	@ (8002ecc <PCD_EP_ISR_Handler+0x260>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cb4:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3314      	adds	r3, #20
 8002cba:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002cc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	441a      	add	r2, r3
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ce2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f00a fceb 	bl	800d6c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	7c5b      	ldrb	r3, [r3, #17]
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 82e6 	beq.w	80032c4 <PCD_EP_ISR_Handler+0x658>
 8002cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f040 82e1 	bne.w	80032c4 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	7c5b      	ldrb	r3, [r3, #17]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	745a      	strb	r2, [r3, #17]
 8002d1a:	e2d3      	b.n	80032c4 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8002d22:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002d2c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002d2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d027      	beq.n	8002d86 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	4619      	mov	r1, r3
 8002d40:	4610      	mov	r0, r2
 8002d42:	f7ff fb09 	bl	8002358 <PCD_GET_EP_RX_CNT>
 8002d46:	4603      	mov	r3, r0
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8002d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d5a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d5e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f009 fe31 	bl	800c9c8 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	4b58      	ldr	r3, [pc, #352]	@ (8002ed0 <PCD_EP_ISR_Handler+0x264>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002d7c:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f00a fc72 	bl	800d668 <HAL_PCD_SetupStageCallback>
 8002d84:	e29e      	b.n	80032c4 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8002d86:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f280 829a 	bge.w	80032c4 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b4e      	ldr	r3, [pc, #312]	@ (8002ed0 <PCD_EP_ISR_Handler+0x264>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002da2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002da6:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f7ff fad0 	bl	8002358 <PCD_GET_EP_RX_CNT>
 8002db8:	4603      	mov	r3, r0
 8002dba:	461a      	mov	r2, r3
 8002dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dbe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d019      	beq.n	8002dfc <PCD_EP_ISR_Handler+0x190>
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d015      	beq.n	8002dfc <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6818      	ldr	r0, [r3, #0]
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dd6:	6959      	ldr	r1, [r3, #20]
 8002dd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dda:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dde:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f009 fdf1 	bl	800c9c8 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	441a      	add	r2, r3
 8002df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002df4:	2100      	movs	r1, #0
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f00a fc48 	bl	800d68c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8002e04:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f040 825a 	bne.w	80032c4 <PCD_EP_ISR_Handler+0x658>
 8002e10:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002e12:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8002e16:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002e1a:	f000 8253 	beq.w	80032c4 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed4 <PCD_EP_ISR_Handler+0x268>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a2c      	ldr	r2, [pc, #176]	@ (8002ed4 <PCD_EP_ISR_Handler+0x268>)
 8002e24:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002e28:	6053      	str	r3, [r2, #4]
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <PCD_EP_ISR_Handler+0x1d4>
 8002e32:	4b28      	ldr	r3, [pc, #160]	@ (8002ed4 <PCD_EP_ISR_Handler+0x268>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4a27      	ldr	r2, [pc, #156]	@ (8002ed4 <PCD_EP_ISR_Handler+0x268>)
 8002e38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e3c:	6053      	str	r3, [r2, #4]
 8002e3e:	e02e      	b.n	8002e9e <PCD_EP_ISR_Handler+0x232>
 8002e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	2b3e      	cmp	r3, #62	@ 0x3e
 8002e46:	d814      	bhi.n	8002e72 <PCD_EP_ISR_Handler+0x206>
 8002e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	085b      	lsrs	r3, r3, #1
 8002e4e:	617b      	str	r3, [r7, #20]
 8002e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <PCD_EP_ISR_Handler+0x1f6>
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	617b      	str	r3, [r7, #20]
 8002e62:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed4 <PCD_EP_ISR_Handler+0x268>)
 8002e64:	685a      	ldr	r2, [r3, #4]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	069b      	lsls	r3, r3, #26
 8002e6a:	491a      	ldr	r1, [pc, #104]	@ (8002ed4 <PCD_EP_ISR_Handler+0x268>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	604b      	str	r3, [r1, #4]
 8002e70:	e015      	b.n	8002e9e <PCD_EP_ISR_Handler+0x232>
 8002e72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e74:	691b      	ldr	r3, [r3, #16]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 031f 	and.w	r3, r3, #31
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <PCD_EP_ISR_Handler+0x220>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <PCD_EP_ISR_Handler+0x268>)
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	069b      	lsls	r3, r3, #26
 8002e94:	4313      	orrs	r3, r2
 8002e96:	4a0f      	ldr	r2, [pc, #60]	@ (8002ed4 <PCD_EP_ISR_Handler+0x268>)
 8002e98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e9c:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ed8 <PCD_EP_ISR_Handler+0x26c>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	e1fb      	b.n	80032c4 <PCD_EP_ISR_Handler+0x658>
 8002ecc:	07ff8f0f 	.word	0x07ff8f0f
 8002ed0:	07ff0f8f 	.word	0x07ff0f8f
 8002ed4:	40016400 	.word	0x40016400
 8002ed8:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	4413      	add	r3, r2
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8002eee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f280 80bd 	bge.w	8003072 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	4b9e      	ldr	r3, [pc, #632]	@ (8003184 <PCD_EP_ISR_Handler+0x518>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61fb      	str	r3, [r7, #28]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	69fa      	ldr	r2, [r7, #28]
 8002f1e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f22:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f24:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	4413      	add	r3, r2
 8002f38:	3304      	adds	r3, #4
 8002f3a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f3e:	7b1b      	ldrb	r3, [r3, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d116      	bne.n	8002f72 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f7ff fa02 	bl	8002358 <PCD_GET_EP_RX_CNT>
 8002f54:	4603      	mov	r3, r0
 8002f56:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8002f58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d067      	beq.n	800302e <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f64:	6959      	ldr	r1, [r3, #20]
 8002f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f68:	88da      	ldrh	r2, [r3, #6]
 8002f6a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002f6c:	f009 fd2c 	bl	800c9c8 <USB_ReadPMA>
 8002f70:	e05d      	b.n	800302e <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f74:	78db      	ldrb	r3, [r3, #3]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d108      	bne.n	8002f8c <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002f7a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f9ad 	bl	80032e0 <HAL_PCD_EP_DB_Receive>
 8002f86:	4603      	mov	r3, r0
 8002f88:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8002f8a:	e050      	b.n	800302e <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	461a      	mov	r2, r3
 8002f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	4b7a      	ldr	r3, [pc, #488]	@ (8003188 <PCD_EP_ISR_Handler+0x51c>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	441a      	add	r2, r3
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8002fba:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d016      	beq.n	8003002 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f7ff f9db 	bl	800239a <PCD_GET_EP_DBUF0_CNT>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8002fe8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d01f      	beq.n	800302e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff4:	6959      	ldr	r1, [r3, #20]
 8002ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ff8:	891a      	ldrh	r2, [r3, #8]
 8002ffa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002ffc:	f009 fce4 	bl	800c9c8 <USB_ReadPMA>
 8003000:	e015      	b.n	800302e <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	4619      	mov	r1, r3
 800300c:	4610      	mov	r0, r2
 800300e:	f7ff f9e5 	bl	80023dc <PCD_GET_EP_DBUF1_CNT>
 8003012:	4603      	mov	r3, r0
 8003014:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8003016:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003018:	2b00      	cmp	r3, #0
 800301a:	d008      	beq.n	800302e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003022:	6959      	ldr	r1, [r3, #20]
 8003024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003026:	895a      	ldrh	r2, [r3, #10]
 8003028:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800302a:	f009 fccd 	bl	800c9c8 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800302e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003034:	441a      	add	r2, r3
 8003036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003038:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800303a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800303c:	695a      	ldr	r2, [r3, #20]
 800303e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003040:	441a      	add	r2, r3
 8003042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003044:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003046:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d004      	beq.n	8003058 <PCD_EP_ISR_Handler+0x3ec>
 800304e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	429a      	cmp	r2, r3
 8003056:	d206      	bcs.n	8003066 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	4619      	mov	r1, r3
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f00a fb14 	bl	800d68c <HAL_PCD_DataOutStageCallback>
 8003064:	e005      	b.n	8003072 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800306c:	4618      	mov	r0, r3
 800306e:	f008 fac3 	bl	800b5f8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8003072:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8123 	beq.w	80032c4 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 800307e:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8003082:	4613      	mov	r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	3310      	adds	r3, #16
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	4413      	add	r3, r2
 8003090:	3304      	adds	r3, #4
 8003092:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	461a      	mov	r2, r3
 800309a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	4b39      	ldr	r3, [pc, #228]	@ (800318c <PCD_EP_ISR_Handler+0x520>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030be:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80030c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c2:	78db      	ldrb	r3, [r3, #3]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	f040 80b8 	bne.w	800323a <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 80030ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030cc:	2200      	movs	r2, #0
 80030ce:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80030d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030d2:	7b1b      	ldrb	r3, [r3, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 80a9 	beq.w	800322c <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80030da:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80030dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d055      	beq.n	8003190 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030e6:	785b      	ldrb	r3, [r3, #1]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d124      	bne.n	8003136 <PCD_EP_ISR_Handler+0x4ca>
 80030ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	00db      	lsls	r3, r3, #3
 80030f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80030f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003106:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800310a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800311a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800312a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800312e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e07a      	b.n	800322c <PCD_EP_ISR_Handler+0x5c0>
 8003136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003138:	785b      	ldrb	r3, [r3, #1]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d176      	bne.n	800322c <PCD_EP_ISR_Handler+0x5c0>
 800313e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003148:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003158:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800315c:	b292      	uxth	r2, r2
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800316a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800316e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003178:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	e054      	b.n	800322c <PCD_EP_ISR_Handler+0x5c0>
 8003182:	bf00      	nop
 8003184:	07ff0f8f 	.word	0x07ff0f8f
 8003188:	07ff8f8f 	.word	0x07ff8f8f
 800318c:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003192:	785b      	ldrb	r3, [r3, #1]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d124      	bne.n	80031e2 <PCD_EP_ISR_Handler+0x576>
 8003198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	00db      	lsls	r3, r3, #3
 800319e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031b6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80031ba:	605a      	str	r2, [r3, #4]
 80031bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	00db      	lsls	r3, r3, #3
 80031c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031da:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80031de:	605a      	str	r2, [r3, #4]
 80031e0:	e024      	b.n	800322c <PCD_EP_ISR_Handler+0x5c0>
 80031e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031e4:	785b      	ldrb	r3, [r3, #1]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d120      	bne.n	800322c <PCD_EP_ISR_Handler+0x5c0>
 80031ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80031f8:	685a      	ldr	r2, [r3, #4]
 80031fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003204:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003208:	b292      	uxth	r2, r2
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003216:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800321a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	00db      	lsls	r3, r3, #3
 8003220:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003224:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003228:	6852      	ldr	r2, [r2, #4]
 800322a:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800322c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	4619      	mov	r1, r3
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f00a fa45 	bl	800d6c2 <HAL_PCD_DataInStageCallback>
 8003238:	e044      	b.n	80032c4 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800323a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800323c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003240:	2b00      	cmp	r3, #0
 8003242:	d139      	bne.n	80032b8 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800324e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	0c1b      	lsrs	r3, r3, #16
 8003256:	b29b      	uxth	r3, r3
 8003258:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800325c:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 800325e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003264:	429a      	cmp	r2, r3
 8003266:	d906      	bls.n	8003276 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 8003268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800326e:	1ad2      	subs	r2, r2, r3
 8003270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003272:	619a      	str	r2, [r3, #24]
 8003274:	e002      	b.n	800327c <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 8003276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003278:	2200      	movs	r2, #0
 800327a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800327c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d106      	bne.n	8003292 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f00a fa19 	bl	800d6c2 <HAL_PCD_DataInStageCallback>
 8003290:	e018      	b.n	80032c4 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003298:	441a      	add	r2, r3
 800329a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800329c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800329e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a0:	69da      	ldr	r2, [r3, #28]
 80032a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80032a4:	441a      	add	r2, r3
 80032a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80032b0:	4618      	mov	r0, r3
 80032b2:	f008 f9a1 	bl	800b5f8 <USB_EPStartXfer>
 80032b6:	e005      	b.n	80032c4 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80032b8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80032ba:	461a      	mov	r2, r3
 80032bc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8e8 	bl	8003494 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f47f acd1 	bne.w	8002c76 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3738      	adds	r7, #56	@ 0x38
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop

080032e0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	@ 0x28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80032ee:	88fb      	ldrh	r3, [r7, #6]
 80032f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d062      	beq.n	80033be <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	4619      	mov	r1, r3
 8003302:	4610      	mov	r0, r2
 8003304:	f7ff f849 	bl	800239a <PCD_GET_EP_DBUF0_CNT>
 8003308:	4603      	mov	r3, r0
 800330a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	8bfb      	ldrh	r3, [r7, #30]
 8003312:	429a      	cmp	r2, r3
 8003314:	d306      	bcc.n	8003324 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	8bfb      	ldrh	r3, [r7, #30]
 800331c:	1ad2      	subs	r2, r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	619a      	str	r2, [r3, #24]
 8003322:	e002      	b.n	800332a <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2200      	movs	r2, #0
 8003328:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11b      	bne.n	800336a <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4b52      	ldr	r3, [pc, #328]	@ (800348c <HAL_PCD_EP_DB_Receive+0x1ac>)
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800334e:	61bb      	str	r3, [r7, #24]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	441a      	add	r2, r3
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003368:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d017      	beq.n	80033a4 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b42      	ldr	r3, [pc, #264]	@ (8003490 <HAL_PCD_EP_DB_Receive+0x1b0>)
 8003386:	4013      	ands	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	441a      	add	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800339e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033a2:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80033a4:	8bfb      	ldrh	r3, [r7, #30]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d06b      	beq.n	8003482 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	6959      	ldr	r1, [r3, #20]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	891a      	ldrh	r2, [r3, #8]
 80033b6:	8bfb      	ldrh	r3, [r7, #30]
 80033b8:	f009 fb06 	bl	800c9c8 <USB_ReadPMA>
 80033bc:	e061      	b.n	8003482 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f7ff f807 	bl	80023dc <PCD_GET_EP_DBUF1_CNT>
 80033ce:	4603      	mov	r3, r0
 80033d0:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	8bfb      	ldrh	r3, [r7, #30]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d306      	bcc.n	80033ea <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	699a      	ldr	r2, [r3, #24]
 80033e0:	8bfb      	ldrh	r3, [r7, #30]
 80033e2:	1ad2      	subs	r2, r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	619a      	str	r2, [r3, #24]
 80033e8:	e002      	b.n	80033f0 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2200      	movs	r2, #0
 80033ee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d11b      	bne.n	8003430 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4413      	add	r3, r2
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	4b20      	ldr	r3, [pc, #128]	@ (800348c <HAL_PCD_EP_DB_Receive+0x1ac>)
 800340a:	4013      	ands	r3, r2
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	441a      	add	r2, r3
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800342a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800342e:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d117      	bne.n	800346a <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	461a      	mov	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_PCD_EP_DB_Receive+0x1b0>)
 800344c:	4013      	ands	r3, r2
 800344e:	623b      	str	r3, [r7, #32]
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	461a      	mov	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	441a      	add	r2, r3
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003464:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003468:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 800346a:	8bfb      	ldrh	r3, [r7, #30]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d008      	beq.n	8003482 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	6959      	ldr	r1, [r3, #20]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	895a      	ldrh	r2, [r3, #10]
 800347c:	8bfb      	ldrh	r3, [r7, #30]
 800347e:	f009 faa3 	bl	800c9c8 <USB_ReadPMA>
    }
  }

  return count;
 8003482:	8bfb      	ldrh	r3, [r7, #30]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3728      	adds	r7, #40	@ 0x28
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	07ffbf8f 	.word	0x07ffbf8f
 8003490:	07ff8f8f 	.word	0x07ff8f8f

08003494 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08e      	sub	sp, #56	@ 0x38
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	4613      	mov	r3, r2
 80034a0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 81d5 	beq.w	8003858 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7fe ff6e 	bl	800239a <PCD_GET_EP_DBUF0_CNT>
 80034be:	4603      	mov	r3, r0
 80034c0:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	8bfb      	ldrh	r3, [r7, #30]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d906      	bls.n	80034da <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	699a      	ldr	r2, [r3, #24]
 80034d0:	8bfb      	ldrh	r3, [r7, #30]
 80034d2:	1ad2      	subs	r2, r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	619a      	str	r2, [r3, #24]
 80034d8:	e002      	b.n	80034e0 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2200      	movs	r2, #0
 80034de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f040 80c1 	bne.w	800366c <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	785b      	ldrb	r3, [r3, #1]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d124      	bne.n	800353c <HAL_PCD_EP_DB_Transmit+0xa8>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800350c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003510:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003520:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003530:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003534:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	e024      	b.n	8003586 <HAL_PCD_EP_DB_Transmit+0xf2>
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	785b      	ldrb	r3, [r3, #1]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d120      	bne.n	8003586 <HAL_PCD_EP_DB_Transmit+0xf2>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800354e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800355e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003562:	b292      	uxth	r2, r2
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8003570:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800357e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	785b      	ldrb	r3, [r3, #1]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d124      	bne.n	80035d8 <HAL_PCD_EP_DB_Transmit+0x144>
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003598:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035ac:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035d0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	e024      	b.n	8003622 <HAL_PCD_EP_DB_Transmit+0x18e>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	785b      	ldrb	r3, [r3, #1]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d120      	bne.n	8003622 <HAL_PCD_EP_DB_Transmit+0x18e>
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80035fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80035fe:	b292      	uxth	r2, r2
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	00db      	lsls	r3, r3, #3
 8003608:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800360c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800361a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800361e:	6852      	ldr	r2, [r2, #4]
 8003620:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	4619      	mov	r1, r3
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f00a f84a 	bl	800d6c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 82e5 	beq.w	8003c04 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b8e      	ldr	r3, [pc, #568]	@ (8003884 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 800364c:	4013      	ands	r3, r2
 800364e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	441a      	add	r2, r3
 800365e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003660:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	e2cb      	b.n	8003c04 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d017      	beq.n	80036a6 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	4b7f      	ldr	r3, [pc, #508]	@ (8003884 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 8003688:	4013      	ands	r3, r2
 800368a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	441a      	add	r2, r3
 800369a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a4:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	f040 82a9 	bne.w	8003c04 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	8bfb      	ldrh	r3, [r7, #30]
 80036b8:	441a      	add	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	69da      	ldr	r2, [r3, #28]
 80036c2:	8bfb      	ldrh	r3, [r7, #30]
 80036c4:	441a      	add	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	6a1a      	ldr	r2, [r3, #32]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d309      	bcc.n	80036ea <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	6a1a      	ldr	r2, [r3, #32]
 80036e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e2:	1ad2      	subs	r2, r2, r3
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	621a      	str	r2, [r3, #32]
 80036e8:	e014      	b.n	8003714 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 80036f2:	8bfb      	ldrh	r3, [r7, #30]
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80036fe:	e009      	b.n	8003714 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2200      	movs	r2, #0
 8003712:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	785b      	ldrb	r3, [r3, #1]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d16a      	bne.n	80037f2 <HAL_PCD_EP_DB_Transmit+0x35e>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003726:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003736:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800373a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003742:	2b00      	cmp	r3, #0
 8003744:	d112      	bne.n	800376c <HAL_PCD_EP_DB_Transmit+0x2d8>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003750:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	00db      	lsls	r3, r3, #3
 800375c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003760:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003764:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e06a      	b.n	8003842 <HAL_PCD_EP_DB_Transmit+0x3ae>
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003770:	d81e      	bhi.n	80037b0 <HAL_PCD_EP_DB_Transmit+0x31c>
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	085b      	lsrs	r3, r3, #1
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_PCD_EP_DB_Transmit+0x2f4>
 8003782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003784:	3301      	adds	r3, #1
 8003786:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003792:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003796:	6819      	ldr	r1, [r3, #0]
 8003798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379a:	069a      	lsls	r2, r3, #26
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037aa:	430a      	orrs	r2, r1
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e048      	b.n	8003842 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80037b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b8:	f003 031f 	and.w	r3, r3, #31
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d102      	bne.n	80037c6 <HAL_PCD_EP_DB_Transmit+0x332>
 80037c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c2:	3b01      	subs	r3, #1
 80037c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037d8:	069b      	lsls	r3, r3, #26
 80037da:	431a      	orrs	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80037ea:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e027      	b.n	8003842 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	785b      	ldrb	r3, [r3, #1]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d123      	bne.n	8003842 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	00db      	lsls	r3, r3, #3
 8003800:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003804:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003814:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003818:	b292      	uxth	r2, r2
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003826:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800382a:	6819      	ldr	r1, [r3, #0]
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	041a      	lsls	r2, r3, #16
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800383a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800383e:	430a      	orrs	r2, r1
 8003840:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	6959      	ldr	r1, [r3, #20]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	891a      	ldrh	r2, [r3, #8]
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	b29b      	uxth	r3, r3
 8003852:	f009 f858 	bl	800c906 <USB_WritePMA>
 8003856:	e1d5      	b.n	8003c04 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	4619      	mov	r1, r3
 8003862:	4610      	mov	r0, r2
 8003864:	f7fe fdba 	bl	80023dc <PCD_GET_EP_DBUF1_CNT>
 8003868:	4603      	mov	r3, r0
 800386a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	699a      	ldr	r2, [r3, #24]
 8003870:	8bfb      	ldrh	r3, [r7, #30]
 8003872:	429a      	cmp	r2, r3
 8003874:	d308      	bcc.n	8003888 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	8bfb      	ldrh	r3, [r7, #30]
 800387c:	1ad2      	subs	r2, r2, r3
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	619a      	str	r2, [r3, #24]
 8003882:	e004      	b.n	800388e <HAL_PCD_EP_DB_Transmit+0x3fa>
 8003884:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2200      	movs	r2, #0
 800388c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	699b      	ldr	r3, [r3, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f040 80c1 	bne.w	8003a1a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	785b      	ldrb	r3, [r3, #1]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d124      	bne.n	80038ea <HAL_PCD_EP_DB_Transmit+0x456>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038be:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80038e2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e024      	b.n	8003934 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	785b      	ldrb	r3, [r3, #1]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d120      	bne.n	8003934 <HAL_PCD_EP_DB_Transmit+0x4a0>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800390c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003910:	b292      	uxth	r2, r2
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	00db      	lsls	r3, r3, #3
 800391a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800391e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800392c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003930:	6812      	ldr	r2, [r2, #0]
 8003932:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	785b      	ldrb	r3, [r3, #1]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d124      	bne.n	8003986 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003946:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003956:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800395a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800395e:	605a      	str	r2, [r3, #4]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800396a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800397a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800397e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	e024      	b.n	80039d0 <HAL_PCD_EP_DB_Transmit+0x53c>
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d120      	bne.n	80039d0 <HAL_PCD_EP_DB_Transmit+0x53c>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003998:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039ac:	b292      	uxth	r2, r2
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80039ba:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80039c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80039cc:	6852      	ldr	r2, [r2, #4]
 80039ce:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	4619      	mov	r1, r3
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f009 fe73 	bl	800d6c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 810e 	bne.w	8003c04 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	4413      	add	r3, r2
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b95      	ldr	r3, [pc, #596]	@ (8003c50 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	623b      	str	r3, [r7, #32]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	441a      	add	r2, r3
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a16:	6013      	str	r3, [r2, #0]
 8003a18:	e0f4      	b.n	8003c04 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003a1a:	88fb      	ldrh	r3, [r7, #6]
 8003a1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d117      	bne.n	8003a54 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	4b86      	ldr	r3, [pc, #536]	@ (8003c50 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8003a36:	4013      	ands	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	441a      	add	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a52:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	f040 80d2 	bne.w	8003c04 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	8bfb      	ldrh	r3, [r7, #30]
 8003a66:	441a      	add	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	69da      	ldr	r2, [r3, #28]
 8003a70:	8bfb      	ldrh	r3, [r7, #30]
 8003a72:	441a      	add	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	6a1a      	ldr	r2, [r3, #32]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d309      	bcc.n	8003a98 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6a1a      	ldr	r2, [r3, #32]
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a90:	1ad2      	subs	r2, r2, r3
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	621a      	str	r2, [r3, #32]
 8003a96:	e014      	b.n	8003ac2 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d106      	bne.n	8003aae <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8003aa0:	8bfb      	ldrh	r3, [r7, #30]
 8003aa2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003aac:	e009      	b.n	8003ac2 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	785b      	ldrb	r3, [r3, #1]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d16a      	bne.n	8003ba0 <HAL_PCD_EP_DB_Transmit+0x70c>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ad4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ae4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003ae8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d112      	bne.n	8003b1a <HAL_PCD_EP_DB_Transmit+0x686>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003afe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b12:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	e06a      	b.n	8003bf0 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b1e:	d81e      	bhi.n	8003b5e <HAL_PCD_EP_DB_Transmit+0x6ca>
 8003b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b22:	085b      	lsrs	r3, r3, #1
 8003b24:	61bb      	str	r3, [r7, #24]
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_PCD_EP_DB_Transmit+0x6a2>
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	3301      	adds	r3, #1
 8003b34:	61bb      	str	r3, [r7, #24]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b44:	6859      	ldr	r1, [r3, #4]
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	069a      	lsls	r2, r3, #26
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]
 8003b5c:	e048      	b.n	8003bf0 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b66:	f003 031f 	and.w	r3, r3, #31
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d102      	bne.n	8003b74 <HAL_PCD_EP_DB_Transmit+0x6e0>
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	069b      	lsls	r3, r3, #26
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003b98:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	e027      	b.n	8003bf0 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d123      	bne.n	8003bf0 <HAL_PCD_EP_DB_Transmit+0x75c>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bb2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	00db      	lsls	r3, r3, #3
 8003bbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003bc6:	b292      	uxth	r2, r2
 8003bc8:	605a      	str	r2, [r3, #4]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bd4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003bd8:	6859      	ldr	r1, [r3, #4]
 8003bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bdc:	041a      	lsls	r2, r3, #16
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003be8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003bec:	430a      	orrs	r2, r1
 8003bee:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6818      	ldr	r0, [r3, #0]
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	6959      	ldr	r1, [r3, #20]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	895a      	ldrh	r2, [r3, #10]
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f008 fe81 	bl	800c906 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b0f      	ldr	r3, [pc, #60]	@ (8003c54 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1c:	f083 0310 	eor.w	r3, r3, #16
 8003c20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c24:	f083 0320 	eor.w	r3, r3, #32
 8003c28:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	441a      	add	r2, r3
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3738      	adds	r7, #56	@ 0x38
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	07ff8f8f 	.word	0x07ff8f8f
 8003c54:	07ff8fbf 	.word	0x07ff8fbf

08003c58 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	460b      	mov	r3, r1
 8003c64:	817b      	strh	r3, [r7, #10]
 8003c66:	4613      	mov	r3, r2
 8003c68:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003c6a:	897b      	ldrh	r3, [r7, #10]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00c      	beq.n	8003c90 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c76:	897b      	ldrh	r3, [r7, #10]
 8003c78:	f003 0207 	and.w	r2, r3, #7
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	3310      	adds	r3, #16
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	3304      	adds	r3, #4
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	e00a      	b.n	8003ca6 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c90:	897a      	ldrh	r2, [r7, #10]
 8003c92:	4613      	mov	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003ca6:	893b      	ldrh	r3, [r7, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d107      	bne.n	8003cbc <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	80da      	strh	r2, [r3, #6]
 8003cba:	e00b      	b.n	8003cd4 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d04:	f043 0201 	orr.w	r2, r3, #1
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d10:	f043 0202 	orr.w	r2, r3, #2
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d32:	bf00      	nop
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr
	...

08003d40 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8003d44:	4b05      	ldr	r3, [pc, #20]	@ (8003d5c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d48:	4a04      	ldr	r2, [pc, #16]	@ (8003d5c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003d4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d4e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	44020800 	.word	0x44020800

08003d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d102      	bne.n	8003d74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f000 bc28 	b.w	80045c4 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d74:	4b94      	ldr	r3, [pc, #592]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f003 0318 	and.w	r3, r3, #24
 8003d7c:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8003d7e:	4b92      	ldr	r3, [pc, #584]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d05b      	beq.n	8003e4c <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	d005      	beq.n	8003da6 <HAL_RCC_OscConfig+0x46>
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b18      	cmp	r3, #24
 8003d9e:	d114      	bne.n	8003dca <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d111      	bne.n	8003dca <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d102      	bne.n	8003db4 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	f000 bc08 	b.w	80045c4 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003db4:	4b84      	ldr	r3, [pc, #528]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	041b      	lsls	r3, r3, #16
 8003dc2:	4981      	ldr	r1, [pc, #516]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8003dc8:	e040      	b.n	8003e4c <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d023      	beq.n	8003e1a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003dd2:	4b7d      	ldr	r3, [pc, #500]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dde:	f7fd fdd7 	bl	8001990 <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003de6:	f7fd fdd3 	bl	8001990 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e3e5      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8003df8:	4b73      	ldr	r3, [pc, #460]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d0f0      	beq.n	8003de6 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8003e04:	4b70      	ldr	r3, [pc, #448]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	496d      	ldr	r1, [pc, #436]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	618b      	str	r3, [r1, #24]
 8003e18:	e018      	b.n	8003e4c <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e1a:	4b6b      	ldr	r3, [pc, #428]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a6a      	ldr	r2, [pc, #424]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e26:	f7fd fdb3 	bl	8001990 <HAL_GetTick>
 8003e2a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003e2c:	e008      	b.n	8003e40 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8003e2e:	f7fd fdaf 	bl	8001990 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e3c1      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8003e40:	4b61      	ldr	r3, [pc, #388]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1f0      	bne.n	8003e2e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80a0 	beq.w	8003f9a <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	d005      	beq.n	8003e6c <HAL_RCC_OscConfig+0x10c>
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b18      	cmp	r3, #24
 8003e64:	d109      	bne.n	8003e7a <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f040 8092 	bne.w	8003f9a <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e3a4      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e82:	d106      	bne.n	8003e92 <HAL_RCC_OscConfig+0x132>
 8003e84:	4b50      	ldr	r3, [pc, #320]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a4f      	ldr	r2, [pc, #316]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003e8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	e058      	b.n	8003f44 <HAL_RCC_OscConfig+0x1e4>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d112      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x160>
 8003e9a:	4b4b      	ldr	r3, [pc, #300]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003ea0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ea4:	6013      	str	r3, [r2, #0]
 8003ea6:	4b48      	ldr	r3, [pc, #288]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a47      	ldr	r2, [pc, #284]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003eac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	4b45      	ldr	r3, [pc, #276]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a44      	ldr	r2, [pc, #272]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003eb8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e041      	b.n	8003f44 <HAL_RCC_OscConfig+0x1e4>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ec8:	d112      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x190>
 8003eca:	4b3f      	ldr	r3, [pc, #252]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a3e      	ldr	r2, [pc, #248]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a3b      	ldr	r2, [pc, #236]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003edc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b39      	ldr	r3, [pc, #228]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a38      	ldr	r2, [pc, #224]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e029      	b.n	8003f44 <HAL_RCC_OscConfig+0x1e4>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8003ef8:	d112      	bne.n	8003f20 <HAL_RCC_OscConfig+0x1c0>
 8003efa:	4b33      	ldr	r3, [pc, #204]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a32      	ldr	r2, [pc, #200]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f04:	6013      	str	r3, [r2, #0]
 8003f06:	4b30      	ldr	r3, [pc, #192]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003f0c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b2d      	ldr	r3, [pc, #180]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2c      	ldr	r2, [pc, #176]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e011      	b.n	8003f44 <HAL_RCC_OscConfig+0x1e4>
 8003f20:	4b29      	ldr	r3, [pc, #164]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a28      	ldr	r2, [pc, #160]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	4b26      	ldr	r3, [pc, #152]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a25      	ldr	r2, [pc, #148]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003f32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	4b23      	ldr	r3, [pc, #140]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a22      	ldr	r2, [pc, #136]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003f3e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d013      	beq.n	8003f74 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4c:	f7fd fd20 	bl	8001990 <HAL_GetTick>
 8003f50:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003f54:	f7fd fd1c 	bl	8001990 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	@ 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e32e      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f66:	4b18      	ldr	r3, [pc, #96]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0x1f4>
 8003f72:	e012      	b.n	8003f9a <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fd fd0c 	bl	8001990 <HAL_GetTick>
 8003f78:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003f7c:	f7fd fd08 	bl	8001990 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b64      	cmp	r3, #100	@ 0x64
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e31a      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc8 <HAL_RCC_OscConfig+0x268>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 809a 	beq.w	80040dc <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <HAL_RCC_OscConfig+0x25a>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	2b18      	cmp	r3, #24
 8003fb2:	d149      	bne.n	8004048 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d146      	bne.n	8004048 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d104      	bne.n	8003fcc <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e2fe      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
 8003fc6:	bf00      	nop
 8003fc8:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11c      	bne.n	800400c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8003fd2:	4b9a      	ldr	r3, [pc, #616]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0218 	and.w	r2, r3, #24
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d014      	beq.n	800400c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8003fe2:	4b96      	ldr	r3, [pc, #600]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f023 0218 	bic.w	r2, r3, #24
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	4993      	ldr	r1, [pc, #588]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8003ff4:	f000 fdd0 	bl	8004b98 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ff8:	4b91      	ldr	r3, [pc, #580]	@ (8004240 <HAL_RCC_OscConfig+0x4e0>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fd fc3d 	bl	800187c <HAL_InitTick>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e2db      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fd fcc0 	bl	8001990 <HAL_GetTick>
 8004010:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004014:	f7fd fcbc 	bl	8001990 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e2ce      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004026:	4b85      	ldr	r3, [pc, #532]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004032:	4b82      	ldr	r3, [pc, #520]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	041b      	lsls	r3, r3, #16
 8004040:	497e      	ldr	r1, [pc, #504]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8004042:	4313      	orrs	r3, r2
 8004044:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004046:	e049      	b.n	80040dc <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d02c      	beq.n	80040aa <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004050:	4b7a      	ldr	r3, [pc, #488]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f023 0218 	bic.w	r2, r3, #24
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	4977      	ldr	r1, [pc, #476]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 800405e:	4313      	orrs	r3, r2
 8004060:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8004062:	4b76      	ldr	r3, [pc, #472]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a75      	ldr	r2, [pc, #468]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406e:	f7fd fc8f 	bl	8001990 <HAL_GetTick>
 8004072:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004076:	f7fd fc8b 	bl	8001990 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e29d      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004088:	4b6c      	ldr	r3, [pc, #432]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004094:	4b69      	ldr	r3, [pc, #420]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	041b      	lsls	r3, r3, #16
 80040a2:	4966      	ldr	r1, [pc, #408]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	610b      	str	r3, [r1, #16]
 80040a8:	e018      	b.n	80040dc <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040aa:	4b64      	ldr	r3, [pc, #400]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a63      	ldr	r2, [pc, #396]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b6:	f7fd fc6b 	bl	8001990 <HAL_GetTick>
 80040ba:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80040be:	f7fd fc67 	bl	8001990 <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e279      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d0:	4b5a      	ldr	r3, [pc, #360]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f0      	bne.n	80040be <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d03c      	beq.n	8004162 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d01c      	beq.n	800412a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040f0:	4b52      	ldr	r3, [pc, #328]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80040f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80040f6:	4a51      	ldr	r2, [pc, #324]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80040f8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80040fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fd fc46 	bl	8001990 <HAL_GetTick>
 8004104:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004108:	f7fd fc42 	bl	8001990 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e254      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800411a:	4b48      	ldr	r3, [pc, #288]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 800411c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004120:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ef      	beq.n	8004108 <HAL_RCC_OscConfig+0x3a8>
 8004128:	e01b      	b.n	8004162 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800412a:	4b44      	ldr	r3, [pc, #272]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 800412c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004130:	4a42      	ldr	r2, [pc, #264]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8004132:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004136:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413a:	f7fd fc29 	bl	8001990 <HAL_GetTick>
 800413e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004142:	f7fd fc25 	bl	8001990 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e237      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004154:	4b39      	ldr	r3, [pc, #228]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8004156:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800415a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d1ef      	bne.n	8004142 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 80d2 	beq.w	8004314 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004170:	4b34      	ldr	r3, [pc, #208]	@ (8004244 <HAL_RCC_OscConfig+0x4e4>)
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b00      	cmp	r3, #0
 800417a:	d118      	bne.n	80041ae <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800417c:	4b31      	ldr	r3, [pc, #196]	@ (8004244 <HAL_RCC_OscConfig+0x4e4>)
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	4a30      	ldr	r2, [pc, #192]	@ (8004244 <HAL_RCC_OscConfig+0x4e4>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004188:	f7fd fc02 	bl	8001990 <HAL_GetTick>
 800418c:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004190:	f7fd fbfe 	bl	8001990 <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e210      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80041a2:	4b28      	ldr	r3, [pc, #160]	@ (8004244 <HAL_RCC_OscConfig+0x4e4>)
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f0      	beq.n	8004190 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d108      	bne.n	80041c8 <HAL_RCC_OscConfig+0x468>
 80041b6:	4b21      	ldr	r3, [pc, #132]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80041b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041bc:	4a1f      	ldr	r2, [pc, #124]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041c6:	e074      	b.n	80042b2 <HAL_RCC_OscConfig+0x552>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d118      	bne.n	8004202 <HAL_RCC_OscConfig+0x4a2>
 80041d0:	4b1a      	ldr	r3, [pc, #104]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80041d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041d6:	4a19      	ldr	r2, [pc, #100]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041e0:	4b16      	ldr	r3, [pc, #88]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80041e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041e6:	4a15      	ldr	r2, [pc, #84]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80041e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ec:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80041f0:	4b12      	ldr	r3, [pc, #72]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80041f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80041f6:	4a11      	ldr	r2, [pc, #68]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 80041f8:	f023 0304 	bic.w	r3, r3, #4
 80041fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004200:	e057      	b.n	80042b2 <HAL_RCC_OscConfig+0x552>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b05      	cmp	r3, #5
 8004208:	d11e      	bne.n	8004248 <HAL_RCC_OscConfig+0x4e8>
 800420a:	4b0c      	ldr	r3, [pc, #48]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 800420c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004210:	4a0a      	ldr	r2, [pc, #40]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8004212:	f043 0304 	orr.w	r3, r3, #4
 8004216:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800421a:	4b08      	ldr	r3, [pc, #32]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 800421c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004220:	4a06      	ldr	r2, [pc, #24]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8004222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004226:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800422a:	4b04      	ldr	r3, [pc, #16]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 800422c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004230:	4a02      	ldr	r2, [pc, #8]	@ (800423c <HAL_RCC_OscConfig+0x4dc>)
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800423a:	e03a      	b.n	80042b2 <HAL_RCC_OscConfig+0x552>
 800423c:	44020c00 	.word	0x44020c00
 8004240:	20000020 	.word	0x20000020
 8004244:	44020800 	.word	0x44020800
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b85      	cmp	r3, #133	@ 0x85
 800424e:	d118      	bne.n	8004282 <HAL_RCC_OscConfig+0x522>
 8004250:	4ba2      	ldr	r3, [pc, #648]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004252:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004256:	4aa1      	ldr	r2, [pc, #644]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004258:	f043 0304 	orr.w	r3, r3, #4
 800425c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004260:	4b9e      	ldr	r3, [pc, #632]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004262:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004266:	4a9d      	ldr	r2, [pc, #628]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800426c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004270:	4b9a      	ldr	r3, [pc, #616]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004276:	4a99      	ldr	r2, [pc, #612]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004280:	e017      	b.n	80042b2 <HAL_RCC_OscConfig+0x552>
 8004282:	4b96      	ldr	r3, [pc, #600]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004288:	4a94      	ldr	r2, [pc, #592]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 800428a:	f023 0301 	bic.w	r3, r3, #1
 800428e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004292:	4b92      	ldr	r3, [pc, #584]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004298:	4a90      	ldr	r2, [pc, #576]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 800429a:	f023 0304 	bic.w	r3, r3, #4
 800429e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80042a2:	4b8e      	ldr	r3, [pc, #568]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 80042a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042a8:	4a8c      	ldr	r2, [pc, #560]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 80042aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d016      	beq.n	80042e8 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ba:	f7fd fb69 	bl	8001990 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042c0:	e00a      	b.n	80042d8 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fd fb65 	bl	8001990 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e175      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d8:	4b80      	ldr	r3, [pc, #512]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 80042da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0ed      	beq.n	80042c2 <HAL_RCC_OscConfig+0x562>
 80042e6:	e015      	b.n	8004314 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fd fb52 	bl	8001990 <HAL_GetTick>
 80042ec:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f0:	f7fd fb4e 	bl	8001990 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e15e      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004306:	4b75      	ldr	r3, [pc, #468]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004308:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1ed      	bne.n	80042f0 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b00      	cmp	r3, #0
 800431e:	d036      	beq.n	800438e <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d019      	beq.n	800435c <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004328:	4b6c      	ldr	r3, [pc, #432]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a6b      	ldr	r2, [pc, #428]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 800432e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004332:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fd fb2c 	bl	8001990 <HAL_GetTick>
 8004338:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800433c:	f7fd fb28 	bl	8001990 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e13a      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800434e:	4b63      	ldr	r3, [pc, #396]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x5dc>
 800435a:	e018      	b.n	800438e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800435c:	4b5f      	ldr	r3, [pc, #380]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a5e      	ldr	r2, [pc, #376]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004362:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004366:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004368:	f7fd fb12 	bl	8001990 <HAL_GetTick>
 800436c:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004370:	f7fd fb0e 	bl	8001990 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e120      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004382:	4b56      	ldr	r3, [pc, #344]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 8115 	beq.w	80045c2 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b18      	cmp	r3, #24
 800439c:	f000 80af 	beq.w	80044fe <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	f040 8086 	bne.w	80044b6 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80043aa:	4b4c      	ldr	r3, [pc, #304]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a4b      	ldr	r2, [pc, #300]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 80043b0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b6:	f7fd faeb 	bl	8001990 <HAL_GetTick>
 80043ba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80043be:	f7fd fae7 	bl	8001990 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e0f9      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043d0:	4b42      	ldr	r3, [pc, #264]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1f0      	bne.n	80043be <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 80043dc:	4b3f      	ldr	r3, [pc, #252]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80043e4:	f023 0303 	bic.w	r3, r3, #3
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043f0:	0212      	lsls	r2, r2, #8
 80043f2:	430a      	orrs	r2, r1
 80043f4:	4939      	ldr	r1, [pc, #228]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	628b      	str	r3, [r1, #40]	@ 0x28
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fe:	3b01      	subs	r3, #1
 8004400:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004408:	3b01      	subs	r3, #1
 800440a:	025b      	lsls	r3, r3, #9
 800440c:	b29b      	uxth	r3, r3
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004414:	3b01      	subs	r3, #1
 8004416:	041b      	lsls	r3, r3, #16
 8004418:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800441c:	431a      	orrs	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	3b01      	subs	r3, #1
 8004424:	061b      	lsls	r3, r3, #24
 8004426:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800442a:	492c      	ldr	r1, [pc, #176]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 800442c:	4313      	orrs	r3, r2
 800442e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004430:	4b2a      	ldr	r3, [pc, #168]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004434:	4a29      	ldr	r2, [pc, #164]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004436:	f023 0310 	bic.w	r3, r3, #16
 800443a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004440:	4a26      	ldr	r2, [pc, #152]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004446:	4b25      	ldr	r3, [pc, #148]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444a:	4a24      	ldr	r2, [pc, #144]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 800444c:	f043 0310 	orr.w	r3, r3, #16
 8004450:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004452:	4b22      	ldr	r3, [pc, #136]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	f023 020c 	bic.w	r2, r3, #12
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	491f      	ldr	r1, [pc, #124]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004460:	4313      	orrs	r3, r2
 8004462:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004464:	4b1d      	ldr	r3, [pc, #116]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004468:	f023 0220 	bic.w	r2, r3, #32
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004470:	491a      	ldr	r1, [pc, #104]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004472:	4313      	orrs	r3, r2
 8004474:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004476:	4b19      	ldr	r3, [pc, #100]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447a:	4a18      	ldr	r2, [pc, #96]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004480:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8004482:	4b16      	ldr	r3, [pc, #88]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a15      	ldr	r2, [pc, #84]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 8004488:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800448c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800448e:	f7fd fa7f 	bl	8001990 <HAL_GetTick>
 8004492:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004496:	f7fd fa7b 	bl	8001990 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e08d      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80044a8:	4b0c      	ldr	r3, [pc, #48]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x736>
 80044b4:	e085      	b.n	80045c2 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 80044b6:	4b09      	ldr	r3, [pc, #36]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a08      	ldr	r2, [pc, #32]	@ (80044dc <HAL_RCC_OscConfig+0x77c>)
 80044bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c2:	f7fd fa65 	bl	8001990 <HAL_GetTick>
 80044c6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80044c8:	e00a      	b.n	80044e0 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80044ca:	f7fd fa61 	bl	8001990 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b02      	cmp	r3, #2
 80044d6:	d903      	bls.n	80044e0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e073      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
 80044dc:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80044e0:	4b3a      	ldr	r3, [pc, #232]	@ (80045cc <HAL_RCC_OscConfig+0x86c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ee      	bne.n	80044ca <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80044ec:	4b37      	ldr	r3, [pc, #220]	@ (80045cc <HAL_RCC_OscConfig+0x86c>)
 80044ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f0:	4a36      	ldr	r2, [pc, #216]	@ (80045cc <HAL_RCC_OscConfig+0x86c>)
 80044f2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80044f6:	f023 0303 	bic.w	r3, r3, #3
 80044fa:	6293      	str	r3, [r2, #40]	@ 0x28
 80044fc:	e061      	b.n	80045c2 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80044fe:	4b33      	ldr	r3, [pc, #204]	@ (80045cc <HAL_RCC_OscConfig+0x86c>)
 8004500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004502:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004504:	4b31      	ldr	r3, [pc, #196]	@ (80045cc <HAL_RCC_OscConfig+0x86c>)
 8004506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004508:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450e:	2b01      	cmp	r3, #1
 8004510:	d031      	beq.n	8004576 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f003 0203 	and.w	r2, r3, #3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800451c:	429a      	cmp	r2, r3
 800451e:	d12a      	bne.n	8004576 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	0a1b      	lsrs	r3, r3, #8
 8004524:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800452c:	429a      	cmp	r2, r3
 800452e:	d122      	bne.n	8004576 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800453c:	429a      	cmp	r2, r3
 800453e:	d11a      	bne.n	8004576 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	0a5b      	lsrs	r3, r3, #9
 8004544:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800454e:	429a      	cmp	r2, r3
 8004550:	d111      	bne.n	8004576 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	0c1b      	lsrs	r3, r3, #16
 8004556:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d108      	bne.n	8004576 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	0e1b      	lsrs	r3, r3, #24
 8004568:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004570:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004572:	429a      	cmp	r2, r3
 8004574:	d001      	beq.n	800457a <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e024      	b.n	80045c4 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800457a:	4b14      	ldr	r3, [pc, #80]	@ (80045cc <HAL_RCC_OscConfig+0x86c>)
 800457c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457e:	08db      	lsrs	r3, r3, #3
 8004580:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004588:	429a      	cmp	r2, r3
 800458a:	d01a      	beq.n	80045c2 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 800458c:	4b0f      	ldr	r3, [pc, #60]	@ (80045cc <HAL_RCC_OscConfig+0x86c>)
 800458e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004590:	4a0e      	ldr	r2, [pc, #56]	@ (80045cc <HAL_RCC_OscConfig+0x86c>)
 8004592:	f023 0310 	bic.w	r3, r3, #16
 8004596:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fd f9fa 	bl	8001990 <HAL_GetTick>
 800459c:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 800459e:	bf00      	nop
 80045a0:	f7fd f9f6 	bl	8001990 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d0f9      	beq.n	80045a0 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045b0:	4a06      	ldr	r2, [pc, #24]	@ (80045cc <HAL_RCC_OscConfig+0x86c>)
 80045b2:	00db      	lsls	r3, r3, #3
 80045b4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80045b6:	4b05      	ldr	r3, [pc, #20]	@ (80045cc <HAL_RCC_OscConfig+0x86c>)
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	4a04      	ldr	r2, [pc, #16]	@ (80045cc <HAL_RCC_OscConfig+0x86c>)
 80045bc:	f043 0310 	orr.w	r3, r3, #16
 80045c0:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3720      	adds	r7, #32
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	44020c00 	.word	0x44020c00

080045d0 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e19e      	b.n	8004922 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045e4:	4b83      	ldr	r3, [pc, #524]	@ (80047f4 <HAL_RCC_ClockConfig+0x224>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 030f 	and.w	r3, r3, #15
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d910      	bls.n	8004614 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045f2:	4b80      	ldr	r3, [pc, #512]	@ (80047f4 <HAL_RCC_ClockConfig+0x224>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f023 020f 	bic.w	r2, r3, #15
 80045fa:	497e      	ldr	r1, [pc, #504]	@ (80047f4 <HAL_RCC_ClockConfig+0x224>)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	4313      	orrs	r3, r2
 8004600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004602:	4b7c      	ldr	r3, [pc, #496]	@ (80047f4 <HAL_RCC_ClockConfig+0x224>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	683a      	ldr	r2, [r7, #0]
 800460c:	429a      	cmp	r2, r3
 800460e:	d001      	beq.n	8004614 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e186      	b.n	8004922 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0310 	and.w	r3, r3, #16
 800461c:	2b00      	cmp	r3, #0
 800461e:	d012      	beq.n	8004646 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	695a      	ldr	r2, [r3, #20]
 8004624:	4b74      	ldr	r3, [pc, #464]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	0a1b      	lsrs	r3, r3, #8
 800462a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800462e:	429a      	cmp	r2, r3
 8004630:	d909      	bls.n	8004646 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004632:	4b71      	ldr	r3, [pc, #452]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	496d      	ldr	r1, [pc, #436]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 8004642:	4313      	orrs	r3, r2
 8004644:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0308 	and.w	r3, r3, #8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d012      	beq.n	8004678 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	4b68      	ldr	r3, [pc, #416]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	091b      	lsrs	r3, r3, #4
 800465c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004660:	429a      	cmp	r2, r3
 8004662:	d909      	bls.n	8004678 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004664:	4b64      	ldr	r3, [pc, #400]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	4961      	ldr	r1, [pc, #388]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 8004674:	4313      	orrs	r3, r2
 8004676:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f003 0304 	and.w	r3, r3, #4
 8004680:	2b00      	cmp	r3, #0
 8004682:	d010      	beq.n	80046a6 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	4b5b      	ldr	r3, [pc, #364]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004690:	429a      	cmp	r2, r3
 8004692:	d908      	bls.n	80046a6 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004694:	4b58      	ldr	r3, [pc, #352]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4955      	ldr	r1, [pc, #340]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d010      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	4b50      	ldr	r3, [pc, #320]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	429a      	cmp	r2, r3
 80046c0:	d908      	bls.n	80046d4 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80046c2:	4b4d      	ldr	r3, [pc, #308]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	f023 020f 	bic.w	r2, r3, #15
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	494a      	ldr	r1, [pc, #296]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 8093 	beq.w	8004808 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80046ea:	4b43      	ldr	r3, [pc, #268]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d121      	bne.n	800473a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e113      	b.n	8004922 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d107      	bne.n	8004712 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004702:	4b3d      	ldr	r3, [pc, #244]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d115      	bne.n	800473a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e107      	b.n	8004922 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d107      	bne.n	800472a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800471a:	4b37      	ldr	r3, [pc, #220]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004722:	2b00      	cmp	r3, #0
 8004724:	d109      	bne.n	800473a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e0fb      	b.n	8004922 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800472a:	4b33      	ldr	r3, [pc, #204]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e0f3      	b.n	8004922 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800473a:	4b2f      	ldr	r3, [pc, #188]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f023 0203 	bic.w	r2, r3, #3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	492c      	ldr	r1, [pc, #176]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 8004748:	4313      	orrs	r3, r2
 800474a:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474c:	f7fd f920 	bl	8001990 <HAL_GetTick>
 8004750:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b03      	cmp	r3, #3
 8004758:	d112      	bne.n	8004780 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800475a:	e00a      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800475c:	f7fd f918 	bl	8001990 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800476a:	4293      	cmp	r3, r2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e0d7      	b.n	8004922 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004772:	4b21      	ldr	r3, [pc, #132]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 0318 	and.w	r3, r3, #24
 800477a:	2b18      	cmp	r3, #24
 800477c:	d1ee      	bne.n	800475c <HAL_RCC_ClockConfig+0x18c>
 800477e:	e043      	b.n	8004808 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b02      	cmp	r3, #2
 8004786:	d112      	bne.n	80047ae <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004788:	e00a      	b.n	80047a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800478a:	f7fd f901 	bl	8001990 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0c0      	b.n	8004922 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80047a0:	4b15      	ldr	r3, [pc, #84]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f003 0318 	and.w	r3, r3, #24
 80047a8:	2b10      	cmp	r3, #16
 80047aa:	d1ee      	bne.n	800478a <HAL_RCC_ClockConfig+0x1ba>
 80047ac:	e02c      	b.n	8004808 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d122      	bne.n	80047fc <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80047b6:	e00a      	b.n	80047ce <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80047b8:	f7fd f8ea 	bl	8001990 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e0a9      	b.n	8004922 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80047ce:	4b0a      	ldr	r3, [pc, #40]	@ (80047f8 <HAL_RCC_ClockConfig+0x228>)
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f003 0318 	and.w	r3, r3, #24
 80047d6:	2b08      	cmp	r3, #8
 80047d8:	d1ee      	bne.n	80047b8 <HAL_RCC_ClockConfig+0x1e8>
 80047da:	e015      	b.n	8004808 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80047dc:	f7fd f8d8 	bl	8001990 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d906      	bls.n	80047fc <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e097      	b.n	8004922 <HAL_RCC_ClockConfig+0x352>
 80047f2:	bf00      	nop
 80047f4:	40022000 	.word	0x40022000
 80047f8:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80047fc:	4b4b      	ldr	r3, [pc, #300]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	f003 0318 	and.w	r3, r3, #24
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1e9      	bne.n	80047dc <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d010      	beq.n	8004836 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	4b44      	ldr	r3, [pc, #272]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	429a      	cmp	r2, r3
 8004822:	d208      	bcs.n	8004836 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8004824:	4b41      	ldr	r3, [pc, #260]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f023 020f 	bic.w	r2, r3, #15
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	493e      	ldr	r1, [pc, #248]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 8004832:	4313      	orrs	r3, r2
 8004834:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004836:	4b3e      	ldr	r3, [pc, #248]	@ (8004930 <HAL_RCC_ClockConfig+0x360>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d210      	bcs.n	8004866 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004844:	4b3a      	ldr	r3, [pc, #232]	@ (8004930 <HAL_RCC_ClockConfig+0x360>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f023 020f 	bic.w	r2, r3, #15
 800484c:	4938      	ldr	r1, [pc, #224]	@ (8004930 <HAL_RCC_ClockConfig+0x360>)
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004854:	4b36      	ldr	r3, [pc, #216]	@ (8004930 <HAL_RCC_ClockConfig+0x360>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d001      	beq.n	8004866 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e05d      	b.n	8004922 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d010      	beq.n	8004894 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68da      	ldr	r2, [r3, #12]
 8004876:	4b2d      	ldr	r3, [pc, #180]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800487e:	429a      	cmp	r2, r3
 8004880:	d208      	bcs.n	8004894 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004882:	4b2a      	ldr	r3, [pc, #168]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	4927      	ldr	r1, [pc, #156]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 8004890:	4313      	orrs	r3, r2
 8004892:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d012      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	4b21      	ldr	r3, [pc, #132]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 80048a6:	6a1b      	ldr	r3, [r3, #32]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048ae:	429a      	cmp	r2, r3
 80048b0:	d209      	bcs.n	80048c6 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80048b2:	4b1e      	ldr	r3, [pc, #120]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	011b      	lsls	r3, r3, #4
 80048c0:	491a      	ldr	r1, [pc, #104]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d012      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695a      	ldr	r2, [r3, #20]
 80048d6:	4b15      	ldr	r3, [pc, #84]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d209      	bcs.n	80048f8 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80048e4:	4b11      	ldr	r3, [pc, #68]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	021b      	lsls	r3, r3, #8
 80048f2:	490e      	ldr	r1, [pc, #56]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80048f8:	f000 f822 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b0b      	ldr	r3, [pc, #44]	@ (800492c <HAL_RCC_ClockConfig+0x35c>)
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	490b      	ldr	r1, [pc, #44]	@ (8004934 <HAL_RCC_ClockConfig+0x364>)
 8004908:	5ccb      	ldrb	r3, [r1, r3]
 800490a:	fa22 f303 	lsr.w	r3, r2, r3
 800490e:	4a0a      	ldr	r2, [pc, #40]	@ (8004938 <HAL_RCC_ClockConfig+0x368>)
 8004910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004912:	4b0a      	ldr	r3, [pc, #40]	@ (800493c <HAL_RCC_ClockConfig+0x36c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fc ffb0 	bl	800187c <HAL_InitTick>
 800491c:	4603      	mov	r3, r0
 800491e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8004920:	7afb      	ldrb	r3, [r7, #11]
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	44020c00 	.word	0x44020c00
 8004930:	40022000 	.word	0x40022000
 8004934:	0800fae0 	.word	0x0800fae0
 8004938:	20000000 	.word	0x20000000
 800493c:	20000020 	.word	0x20000020

08004940 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004940:	b480      	push	{r7}
 8004942:	b089      	sub	sp, #36	@ 0x24
 8004944:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004946:	4b8c      	ldr	r3, [pc, #560]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f003 0318 	and.w	r3, r3, #24
 800494e:	2b08      	cmp	r3, #8
 8004950:	d102      	bne.n	8004958 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004952:	4b8a      	ldr	r3, [pc, #552]	@ (8004b7c <HAL_RCC_GetSysClockFreq+0x23c>)
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	e107      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004958:	4b87      	ldr	r3, [pc, #540]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	f003 0318 	and.w	r3, r3, #24
 8004960:	2b00      	cmp	r3, #0
 8004962:	d112      	bne.n	800498a <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004964:	4b84      	ldr	r3, [pc, #528]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d009      	beq.n	8004984 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004970:	4b81      	ldr	r3, [pc, #516]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	08db      	lsrs	r3, r3, #3
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	4a81      	ldr	r2, [pc, #516]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x240>)
 800497c:	fa22 f303 	lsr.w	r3, r2, r3
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	e0f1      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004984:	4b7e      	ldr	r3, [pc, #504]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x240>)
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e0ee      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800498a:	4b7b      	ldr	r3, [pc, #492]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	f003 0318 	and.w	r3, r3, #24
 8004992:	2b10      	cmp	r3, #16
 8004994:	d102      	bne.n	800499c <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004996:	4b7b      	ldr	r3, [pc, #492]	@ (8004b84 <HAL_RCC_GetSysClockFreq+0x244>)
 8004998:	61fb      	str	r3, [r7, #28]
 800499a:	e0e5      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800499c:	4b76      	ldr	r3, [pc, #472]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	f003 0318 	and.w	r3, r3, #24
 80049a4:	2b18      	cmp	r3, #24
 80049a6:	f040 80dd 	bne.w	8004b64 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80049aa:	4b73      	ldr	r3, [pc, #460]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 80049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80049b4:	4b70      	ldr	r3, [pc, #448]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	0a1b      	lsrs	r3, r3, #8
 80049ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80049c0:	4b6d      	ldr	r3, [pc, #436]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 80049c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80049cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 80049ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80049d0:	08db      	lsrs	r3, r3, #3
 80049d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	fb02 f303 	mul.w	r3, r2, r3
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049e4:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80b7 	beq.w	8004b5e <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d003      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0xbe>
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d056      	beq.n	8004aaa <HAL_RCC_GetSysClockFreq+0x16a>
 80049fc:	e077      	b.n	8004aee <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80049fe:	4b5e      	ldr	r3, [pc, #376]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d02d      	beq.n	8004a66 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004a0a:	4b5b      	ldr	r3, [pc, #364]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	08db      	lsrs	r3, r3, #3
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	4a5a      	ldr	r2, [pc, #360]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x240>)
 8004a16:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	ee07 3a90 	vmov	s15, r3
 8004a2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a34:	4b50      	ldr	r3, [pc, #320]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3c:	ee07 3a90 	vmov	s15, r3
 8004a40:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a44:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a48:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8004b88 <HAL_RCC_GetSysClockFreq+0x248>
 8004a4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a50:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a58:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a60:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8004a64:	e065      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a70:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8004b8c <HAL_RCC_GetSysClockFreq+0x24c>
 8004a74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a78:	4b3f      	ldr	r3, [pc, #252]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a80:	ee07 3a90 	vmov	s15, r3
 8004a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a88:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a8c:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8004b88 <HAL_RCC_GetSysClockFreq+0x248>
 8004a90:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8004a98:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004aa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa4:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004aa8:	e043      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	ee07 3a90 	vmov	s15, r3
 8004ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab4:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8004b90 <HAL_RCC_GetSysClockFreq+0x250>
 8004ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004abc:	4b2e      	ldr	r3, [pc, #184]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac4:	ee07 3a90 	vmov	s15, r3
 8004ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004acc:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ad0:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8004b88 <HAL_RCC_GetSysClockFreq+0x248>
 8004ad4:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004adc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ae8:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8004aec:	e021      	b.n	8004b32 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	ee07 3a90 	vmov	s15, r3
 8004af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004b94 <HAL_RCC_GetSysClockFreq+0x254>
 8004afc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b00:	4b1d      	ldr	r3, [pc, #116]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b08:	ee07 3a90 	vmov	s15, r3
 8004b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b10:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b14:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8004b88 <HAL_RCC_GetSysClockFreq+0x248>
 8004b18:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004b20:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b24:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8004b30:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004b32:	4b11      	ldr	r3, [pc, #68]	@ (8004b78 <HAL_RCC_GetSysClockFreq+0x238>)
 8004b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b36:	0a5b      	lsrs	r3, r3, #9
 8004b38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b4a:	edd7 6a06 	vldr	s13, [r7, #24]
 8004b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b56:	ee17 3a90 	vmov	r3, s15
 8004b5a:	61fb      	str	r3, [r7, #28]
 8004b5c:	e004      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	e001      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004b64:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <HAL_RCC_GetSysClockFreq+0x240>)
 8004b66:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8004b68:	69fb      	ldr	r3, [r7, #28]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3724      	adds	r7, #36	@ 0x24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr
 8004b76:	bf00      	nop
 8004b78:	44020c00 	.word	0x44020c00
 8004b7c:	003d0900 	.word	0x003d0900
 8004b80:	03d09000 	.word	0x03d09000
 8004b84:	007a1200 	.word	0x007a1200
 8004b88:	46000000 	.word	0x46000000
 8004b8c:	4c742400 	.word	0x4c742400
 8004b90:	4af42400 	.word	0x4af42400
 8004b94:	4a742400 	.word	0x4a742400

08004b98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004b9c:	f7ff fed0 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b08      	ldr	r3, [pc, #32]	@ (8004bc4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004ba6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004baa:	4907      	ldr	r1, [pc, #28]	@ (8004bc8 <HAL_RCC_GetHCLKFreq+0x30>)
 8004bac:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004bae:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb6:	4a05      	ldr	r2, [pc, #20]	@ (8004bcc <HAL_RCC_GetHCLKFreq+0x34>)
 8004bb8:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8004bba:	4b04      	ldr	r3, [pc, #16]	@ (8004bcc <HAL_RCC_GetHCLKFreq+0x34>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	44020c00 	.word	0x44020c00
 8004bc8:	0800fae0 	.word	0x0800fae0
 8004bcc:	20000000 	.word	0x20000000

08004bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004bd4:	f7ff ffe0 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	091b      	lsrs	r3, r3, #4
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	4904      	ldr	r1, [pc, #16]	@ (8004bf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004be6:	5ccb      	ldrb	r3, [r1, r3]
 8004be8:	f003 031f 	and.w	r3, r3, #31
 8004bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	44020c00 	.word	0x44020c00
 8004bf8:	0800faf0 	.word	0x0800faf0

08004bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004c00:	f7ff ffca 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004c04:	4602      	mov	r2, r0
 8004c06:	4b06      	ldr	r3, [pc, #24]	@ (8004c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	0a1b      	lsrs	r3, r3, #8
 8004c0c:	f003 0307 	and.w	r3, r3, #7
 8004c10:	4904      	ldr	r1, [pc, #16]	@ (8004c24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c12:	5ccb      	ldrb	r3, [r1, r3]
 8004c14:	f003 031f 	and.w	r3, r3, #31
 8004c18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	44020c00 	.word	0x44020c00
 8004c24:	0800faf0 	.word	0x0800faf0

08004c28 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004c2c:	f7ff ffb4 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8004c30:	4602      	mov	r2, r0
 8004c32:	4b06      	ldr	r3, [pc, #24]	@ (8004c4c <HAL_RCC_GetPCLK3Freq+0x24>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	0b1b      	lsrs	r3, r3, #12
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	4904      	ldr	r1, [pc, #16]	@ (8004c50 <HAL_RCC_GetPCLK3Freq+0x28>)
 8004c3e:	5ccb      	ldrb	r3, [r1, r3]
 8004c40:	f003 031f 	and.w	r3, r3, #31
 8004c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	44020c00 	.word	0x44020c00
 8004c50:	0800faf0 	.word	0x0800faf0

08004c54 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c58:	b0d8      	sub	sp, #352	@ 0x160
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c60:	2300      	movs	r3, #0
 8004c62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c66:	2300      	movs	r3, #0
 8004c68:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c74:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8004c78:	2500      	movs	r5, #0
 8004c7a:	ea54 0305 	orrs.w	r3, r4, r5
 8004c7e:	d00b      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8004c80:	4bcd      	ldr	r3, [pc, #820]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004c86:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8004c8a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c90:	4ac9      	ldr	r2, [pc, #804]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004c92:	430b      	orrs	r3, r1
 8004c94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	f002 0801 	and.w	r8, r2, #1
 8004ca4:	f04f 0900 	mov.w	r9, #0
 8004ca8:	ea58 0309 	orrs.w	r3, r8, r9
 8004cac:	d042      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8004cae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	d823      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8004cb8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8004cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbe:	bf00      	nop
 8004cc0:	08004d09 	.word	0x08004d09
 8004cc4:	08004cd9 	.word	0x08004cd9
 8004cc8:	08004ced 	.word	0x08004ced
 8004ccc:	08004d09 	.word	0x08004d09
 8004cd0:	08004d09 	.word	0x08004d09
 8004cd4:	08004d09 	.word	0x08004d09
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cdc:	3308      	adds	r3, #8
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f004 fee0 	bl	8009aa4 <RCCEx_PLL2_Config>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004cea:	e00e      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004cf0:	3330      	adds	r3, #48	@ 0x30
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f004 ff6e 	bl	8009bd4 <RCCEx_PLL3_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8004cfe:	e004      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004d06:	e000      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8004d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d0a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004d12:	4ba9      	ldr	r3, [pc, #676]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d18:	f023 0107 	bic.w	r1, r3, #7
 8004d1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d22:	4aa5      	ldr	r2, [pc, #660]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004d24:	430b      	orrs	r3, r1
 8004d26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d2a:	e003      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004d30:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3c:	f002 0a02 	and.w	sl, r2, #2
 8004d40:	f04f 0b00 	mov.w	fp, #0
 8004d44:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d48:	f000 8088 	beq.w	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8004d4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d52:	2b28      	cmp	r3, #40	@ 0x28
 8004d54:	d868      	bhi.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004d56:	a201      	add	r2, pc, #4	@ (adr r2, 8004d5c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8004d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5c:	08004e31 	.word	0x08004e31
 8004d60:	08004e29 	.word	0x08004e29
 8004d64:	08004e29 	.word	0x08004e29
 8004d68:	08004e29 	.word	0x08004e29
 8004d6c:	08004e29 	.word	0x08004e29
 8004d70:	08004e29 	.word	0x08004e29
 8004d74:	08004e29 	.word	0x08004e29
 8004d78:	08004e29 	.word	0x08004e29
 8004d7c:	08004e01 	.word	0x08004e01
 8004d80:	08004e29 	.word	0x08004e29
 8004d84:	08004e29 	.word	0x08004e29
 8004d88:	08004e29 	.word	0x08004e29
 8004d8c:	08004e29 	.word	0x08004e29
 8004d90:	08004e29 	.word	0x08004e29
 8004d94:	08004e29 	.word	0x08004e29
 8004d98:	08004e29 	.word	0x08004e29
 8004d9c:	08004e15 	.word	0x08004e15
 8004da0:	08004e29 	.word	0x08004e29
 8004da4:	08004e29 	.word	0x08004e29
 8004da8:	08004e29 	.word	0x08004e29
 8004dac:	08004e29 	.word	0x08004e29
 8004db0:	08004e29 	.word	0x08004e29
 8004db4:	08004e29 	.word	0x08004e29
 8004db8:	08004e29 	.word	0x08004e29
 8004dbc:	08004e31 	.word	0x08004e31
 8004dc0:	08004e29 	.word	0x08004e29
 8004dc4:	08004e29 	.word	0x08004e29
 8004dc8:	08004e29 	.word	0x08004e29
 8004dcc:	08004e29 	.word	0x08004e29
 8004dd0:	08004e29 	.word	0x08004e29
 8004dd4:	08004e29 	.word	0x08004e29
 8004dd8:	08004e29 	.word	0x08004e29
 8004ddc:	08004e31 	.word	0x08004e31
 8004de0:	08004e29 	.word	0x08004e29
 8004de4:	08004e29 	.word	0x08004e29
 8004de8:	08004e29 	.word	0x08004e29
 8004dec:	08004e29 	.word	0x08004e29
 8004df0:	08004e29 	.word	0x08004e29
 8004df4:	08004e29 	.word	0x08004e29
 8004df8:	08004e29 	.word	0x08004e29
 8004dfc:	08004e31 	.word	0x08004e31
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004e00:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e04:	3308      	adds	r3, #8
 8004e06:	4618      	mov	r0, r3
 8004e08:	f004 fe4c 	bl	8009aa4 <RCCEx_PLL2_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004e12:	e00e      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e14:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e18:	3330      	adds	r3, #48	@ 0x30
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f004 feda 	bl	8009bd4 <RCCEx_PLL3_Config>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8004e26:	e004      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004e2e:	e000      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8004e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e32:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8004e3a:	4b5f      	ldr	r3, [pc, #380]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004e3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004e40:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004e44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e4a:	4a5b      	ldr	r2, [pc, #364]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004e4c:	430b      	orrs	r3, r1
 8004e4e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004e52:	e003      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e54:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004e58:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004e5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	f002 0304 	and.w	r3, r2, #4
 8004e68:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8004e72:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8004e76:	460b      	mov	r3, r1
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	d04e      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8004e7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004e80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e82:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004e86:	d02c      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8004e88:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8004e8c:	d825      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e92:	d028      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e98:	d81f      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004e9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e9c:	d025      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x296>
 8004e9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ea0:	d81b      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004ea2:	2b80      	cmp	r3, #128	@ 0x80
 8004ea4:	d00f      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8004ea6:	2b80      	cmp	r3, #128	@ 0x80
 8004ea8:	d817      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d01f      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8004eae:	2b40      	cmp	r3, #64	@ 0x40
 8004eb0:	d113      	bne.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004eb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004eb6:	3308      	adds	r3, #8
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f004 fdf3 	bl	8009aa4 <RCCEx_PLL2_Config>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004ec4:	e014      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004ec6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004eca:	3330      	adds	r3, #48	@ 0x30
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f004 fe81 	bl	8009bd4 <RCCEx_PLL3_Config>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8004ed8:	e00a      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004ee0:	e006      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e004      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004ee6:	bf00      	nop
 8004ee8:	e002      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004eea:	bf00      	nop
 8004eec:	e000      	b.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8004eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ef0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10c      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004efa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004efe:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004f02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f08:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8004f0a:	430b      	orrs	r3, r1
 8004f0c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004f10:	e003      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f12:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004f16:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f1a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	f002 0308 	and.w	r3, r2, #8
 8004f26:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8004f30:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8004f34:	460b      	mov	r3, r1
 8004f36:	4313      	orrs	r3, r2
 8004f38:	d056      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8004f3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004f40:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004f44:	d031      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x356>
 8004f46:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004f4a:	d82a      	bhi.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f50:	d02d      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8004f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f56:	d824      	bhi.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f58:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f5c:	d029      	beq.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8004f5e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f62:	d81e      	bhi.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f68:	d011      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6e:	d818      	bhi.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d023      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004f74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f78:	d113      	bne.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f7e:	3308      	adds	r3, #8
 8004f80:	4618      	mov	r0, r3
 8004f82:	f004 fd8f 	bl	8009aa4 <RCCEx_PLL2_Config>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004f8c:	e017      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004f92:	3330      	adds	r3, #48	@ 0x30
 8004f94:	4618      	mov	r0, r3
 8004f96:	f004 fe1d 	bl	8009bd4 <RCCEx_PLL3_Config>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8004fa0:	e00d      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8004fa8:	e009      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004faa:	bf00      	nop
 8004fac:	e007      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004fae:	bf00      	nop
 8004fb0:	e005      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8004fb2:	bf00      	nop
 8004fb4:	e003      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8004fb6:	bf00      	nop
 8004fb8:	44020c00 	.word	0x44020c00
        break;
 8004fbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fbe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10c      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004fc6:	4bbb      	ldr	r3, [pc, #748]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004fc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004fcc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8004fd0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fd4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fd6:	4ab7      	ldr	r2, [pc, #732]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004fde:	e003      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8004fe4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fe8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f002 0310 	and.w	r3, r2, #16
 8004ff4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8004ffe:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8005002:	460b      	mov	r3, r1
 8005004:	4313      	orrs	r3, r2
 8005006:	d053      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8005008:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800500c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800500e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005012:	d031      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005014:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005018:	d82a      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800501a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800501e:	d02d      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8005020:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005024:	d824      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005026:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800502a:	d029      	beq.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800502c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005030:	d81e      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005036:	d011      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005038:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800503c:	d818      	bhi.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800503e:	2b00      	cmp	r3, #0
 8005040:	d020      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8005042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005046:	d113      	bne.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005048:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800504c:	3308      	adds	r3, #8
 800504e:	4618      	mov	r0, r3
 8005050:	f004 fd28 	bl	8009aa4 <RCCEx_PLL2_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800505a:	e014      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800505c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005060:	3330      	adds	r3, #48	@ 0x30
 8005062:	4618      	mov	r0, r3
 8005064:	f004 fdb6 	bl	8009bd4 <RCCEx_PLL3_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 800506e:	e00a      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005076:	e006      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005078:	bf00      	nop
 800507a:	e004      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800507c:	bf00      	nop
 800507e:	e002      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005080:	bf00      	nop
 8005082:	e000      	b.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8005084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005086:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10c      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800508e:	4b89      	ldr	r3, [pc, #548]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005090:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005094:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005098:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800509c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800509e:	4a85      	ldr	r2, [pc, #532]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80050a0:	430b      	orrs	r3, r1
 80050a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80050a6:	e003      	b.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80050ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	f002 0320 	and.w	r3, r2, #32
 80050bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80050c0:	2300      	movs	r3, #0
 80050c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80050c6:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 80050ca:	460b      	mov	r3, r1
 80050cc:	4313      	orrs	r3, r2
 80050ce:	d053      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 80050d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80050d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050d6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80050da:	d031      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 80050dc:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80050e0:	d82a      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80050e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050e6:	d02d      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80050e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050ec:	d824      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80050ee:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80050f2:	d029      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 80050f4:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80050f8:	d81e      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80050fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050fe:	d011      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8005100:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005104:	d818      	bhi.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8005106:	2b00      	cmp	r3, #0
 8005108:	d020      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 800510a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800510e:	d113      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005114:	3308      	adds	r3, #8
 8005116:	4618      	mov	r0, r3
 8005118:	f004 fcc4 	bl	8009aa4 <RCCEx_PLL2_Config>
 800511c:	4603      	mov	r3, r0
 800511e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005122:	e014      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005124:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005128:	3330      	adds	r3, #48	@ 0x30
 800512a:	4618      	mov	r0, r3
 800512c:	f004 fd52 	bl	8009bd4 <RCCEx_PLL3_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8005136:	e00a      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800513e:	e006      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005140:	bf00      	nop
 8005142:	e004      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005144:	bf00      	nop
 8005146:	e002      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8005148:	bf00      	nop
 800514a:	e000      	b.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 800514c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800514e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10c      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005156:	4b57      	ldr	r3, [pc, #348]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005158:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800515c:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8005160:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005166:	4a53      	ldr	r2, [pc, #332]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005168:	430b      	orrs	r3, r1
 800516a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800516e:	e003      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005170:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005174:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005178:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005180:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005184:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005188:	2300      	movs	r3, #0
 800518a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800518e:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8005192:	460b      	mov	r3, r1
 8005194:	4313      	orrs	r3, r2
 8005196:	d053      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8005198:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800519c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800519e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80051a2:	d031      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 80051a4:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80051a8:	d82a      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80051aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051ae:	d02d      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 80051b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051b4:	d824      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80051b6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80051ba:	d029      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80051bc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80051c0:	d81e      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80051c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80051c6:	d011      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x598>
 80051c8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80051cc:	d818      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d020      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80051d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80051d6:	d113      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80051d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051dc:	3308      	adds	r3, #8
 80051de:	4618      	mov	r0, r3
 80051e0:	f004 fc60 	bl	8009aa4 <RCCEx_PLL2_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80051ea:	e014      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80051ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80051f0:	3330      	adds	r3, #48	@ 0x30
 80051f2:	4618      	mov	r0, r3
 80051f4:	f004 fcee 	bl	8009bd4 <RCCEx_PLL3_Config>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80051fe:	e00a      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005206:	e006      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005208:	bf00      	nop
 800520a:	e004      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800520c:	bf00      	nop
 800520e:	e002      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005210:	bf00      	nop
 8005212:	e000      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8005214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005216:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10c      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800521e:	4b25      	ldr	r3, [pc, #148]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005220:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005224:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8005228:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800522c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800522e:	4a21      	ldr	r2, [pc, #132]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8005230:	430b      	orrs	r3, r1
 8005232:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005236:	e003      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005238:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800523c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005240:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005248:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800524c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005250:	2300      	movs	r3, #0
 8005252:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005256:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 800525a:	460b      	mov	r3, r1
 800525c:	4313      	orrs	r3, r2
 800525e:	d055      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8005260:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005266:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800526a:	d033      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x680>
 800526c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005270:	d82c      	bhi.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005272:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005276:	d02f      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x684>
 8005278:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800527c:	d826      	bhi.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800527e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005282:	d02b      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x688>
 8005284:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005288:	d820      	bhi.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 800528a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800528e:	d013      	beq.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005294:	d81a      	bhi.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x678>
 8005296:	2b00      	cmp	r3, #0
 8005298:	d022      	beq.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800529a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800529e:	d115      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052a4:	3308      	adds	r3, #8
 80052a6:	4618      	mov	r0, r3
 80052a8:	f004 fbfc 	bl	8009aa4 <RCCEx_PLL2_Config>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80052b2:	e016      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 80052b4:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80052b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052bc:	3330      	adds	r3, #48	@ 0x30
 80052be:	4618      	mov	r0, r3
 80052c0:	f004 fc88 	bl	8009bd4 <RCCEx_PLL3_Config>
 80052c4:	4603      	mov	r3, r0
 80052c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 80052ca:	e00a      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80052d2:	e006      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80052d4:	bf00      	nop
 80052d6:	e004      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80052d8:	bf00      	nop
 80052da:	e002      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80052dc:	bf00      	nop
 80052de:	e000      	b.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 80052e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10c      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 80052ea:	4bbb      	ldr	r3, [pc, #748]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80052ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80052f0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80052f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80052f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80052fa:	4ab7      	ldr	r2, [pc, #732]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80052fc:	430b      	orrs	r3, r1
 80052fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005302:	e003      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005304:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005308:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800530c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005318:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800531c:	2300      	movs	r3, #0
 800531e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8005322:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005326:	460b      	mov	r3, r1
 8005328:	4313      	orrs	r3, r2
 800532a:	d053      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800532c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005330:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005332:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005336:	d031      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x748>
 8005338:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800533c:	d82a      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800533e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005342:	d02d      	beq.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 8005344:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005348:	d824      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800534a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800534e:	d029      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x750>
 8005350:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005354:	d81e      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005356:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800535a:	d011      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 800535c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005360:	d818      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8005362:	2b00      	cmp	r3, #0
 8005364:	d020      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x754>
 8005366:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800536a:	d113      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800536c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005370:	3308      	adds	r3, #8
 8005372:	4618      	mov	r0, r3
 8005374:	f004 fb96 	bl	8009aa4 <RCCEx_PLL2_Config>
 8005378:	4603      	mov	r3, r0
 800537a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 800537e:	e014      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005380:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005384:	3330      	adds	r3, #48	@ 0x30
 8005386:	4618      	mov	r0, r3
 8005388:	f004 fc24 	bl	8009bd4 <RCCEx_PLL3_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8005392:	e00a      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800539a:	e006      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800539c:	bf00      	nop
 800539e:	e004      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80053a0:	bf00      	nop
 80053a2:	e002      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80053a4:	bf00      	nop
 80053a6:	e000      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80053a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80053aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d10c      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80053b2:	4b89      	ldr	r3, [pc, #548]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80053b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80053b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80053bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053c2:	4a85      	ldr	r2, [pc, #532]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80053c4:	430b      	orrs	r3, r1
 80053c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80053ca:	e003      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053cc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80053d0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80053d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 80053e0:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80053e4:	2300      	movs	r3, #0
 80053e6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80053ea:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80053ee:	460b      	mov	r3, r1
 80053f0:	4313      	orrs	r3, r2
 80053f2:	d055      	beq.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 80053f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80053f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053fc:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005400:	d031      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8005402:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8005406:	d82a      	bhi.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800540c:	d02d      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x816>
 800540e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005412:	d824      	bhi.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005414:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8005418:	d029      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800541a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800541e:	d81e      	bhi.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8005420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005424:	d011      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8005426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800542a:	d818      	bhi.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800542c:	2b00      	cmp	r3, #0
 800542e:	d020      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8005430:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005434:	d113      	bne.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005436:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800543a:	3308      	adds	r3, #8
 800543c:	4618      	mov	r0, r3
 800543e:	f004 fb31 	bl	8009aa4 <RCCEx_PLL2_Config>
 8005442:	4603      	mov	r3, r0
 8005444:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8005448:	e014      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800544a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800544e:	3330      	adds	r3, #48	@ 0x30
 8005450:	4618      	mov	r0, r3
 8005452:	f004 fbbf 	bl	8009bd4 <RCCEx_PLL3_Config>
 8005456:	4603      	mov	r3, r0
 8005458:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 800545c:	e00a      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005464:	e006      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005466:	bf00      	nop
 8005468:	e004      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800546a:	bf00      	nop
 800546c:	e002      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800546e:	bf00      	nop
 8005470:	e000      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8005472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005474:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10d      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800547c:	4b56      	ldr	r3, [pc, #344]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800547e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005482:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 8005486:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800548a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800548e:	4a52      	ldr	r2, [pc, #328]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005490:	430b      	orrs	r3, r1
 8005492:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005496:	e003      	b.n	80054a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005498:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800549c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80054a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80054ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80054b0:	2300      	movs	r3, #0
 80054b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80054b6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80054ba:	460b      	mov	r3, r1
 80054bc:	4313      	orrs	r3, r2
 80054be:	d044      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 80054c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054c8:	2b05      	cmp	r3, #5
 80054ca:	d823      	bhi.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80054cc:	a201      	add	r2, pc, #4	@ (adr r2, 80054d4 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 80054ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d2:	bf00      	nop
 80054d4:	0800551d 	.word	0x0800551d
 80054d8:	080054ed 	.word	0x080054ed
 80054dc:	08005501 	.word	0x08005501
 80054e0:	0800551d 	.word	0x0800551d
 80054e4:	0800551d 	.word	0x0800551d
 80054e8:	0800551d 	.word	0x0800551d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80054ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80054f0:	3308      	adds	r3, #8
 80054f2:	4618      	mov	r0, r3
 80054f4:	f004 fad6 	bl	8009aa4 <RCCEx_PLL2_Config>
 80054f8:	4603      	mov	r3, r0
 80054fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80054fe:	e00e      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005500:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005504:	3330      	adds	r3, #48	@ 0x30
 8005506:	4618      	mov	r0, r3
 8005508:	f004 fb64 	bl	8009bd4 <RCCEx_PLL3_Config>
 800550c:	4603      	mov	r3, r0
 800550e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8005512:	e004      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800551a:	e000      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800551c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800551e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10d      	bne.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8005526:	4b2c      	ldr	r3, [pc, #176]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8005528:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800552c:	f023 0107 	bic.w	r1, r3, #7
 8005530:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005538:	4a27      	ldr	r2, [pc, #156]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800553a:	430b      	orrs	r3, r1
 800553c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005540:	e003      	b.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005542:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005546:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800554a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800554e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005552:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005556:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800555a:	2300      	movs	r3, #0
 800555c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005560:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005564:	460b      	mov	r3, r1
 8005566:	4313      	orrs	r3, r2
 8005568:	d04f      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800556a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800556e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005572:	2b50      	cmp	r3, #80	@ 0x50
 8005574:	d029      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005576:	2b50      	cmp	r3, #80	@ 0x50
 8005578:	d823      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800557a:	2b40      	cmp	r3, #64	@ 0x40
 800557c:	d027      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x97a>
 800557e:	2b40      	cmp	r3, #64	@ 0x40
 8005580:	d81f      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005582:	2b30      	cmp	r3, #48	@ 0x30
 8005584:	d025      	beq.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 8005586:	2b30      	cmp	r3, #48	@ 0x30
 8005588:	d81b      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800558a:	2b20      	cmp	r3, #32
 800558c:	d00f      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x95a>
 800558e:	2b20      	cmp	r3, #32
 8005590:	d817      	bhi.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8005592:	2b00      	cmp	r3, #0
 8005594:	d022      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005596:	2b10      	cmp	r3, #16
 8005598:	d113      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800559a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800559e:	3308      	adds	r3, #8
 80055a0:	4618      	mov	r0, r3
 80055a2:	f004 fa7f 	bl	8009aa4 <RCCEx_PLL2_Config>
 80055a6:	4603      	mov	r3, r0
 80055a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80055ac:	e017      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80055ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055b2:	3330      	adds	r3, #48	@ 0x30
 80055b4:	4618      	mov	r0, r3
 80055b6:	f004 fb0d 	bl	8009bd4 <RCCEx_PLL3_Config>
 80055ba:	4603      	mov	r3, r0
 80055bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 80055c0:	e00d      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80055c8:	e009      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80055ca:	bf00      	nop
 80055cc:	e007      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80055ce:	bf00      	nop
 80055d0:	e005      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 80055d2:	bf00      	nop
 80055d4:	e003      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x98a>
 80055d6:	bf00      	nop
 80055d8:	44020c00 	.word	0x44020c00
        break;
 80055dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10d      	bne.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80055e6:	4baf      	ldr	r3, [pc, #700]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80055e8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80055ec:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 80055f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055f8:	4aaa      	ldr	r2, [pc, #680]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80055fa:	430b      	orrs	r3, r1
 80055fc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005600:	e003      	b.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005602:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005606:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800560a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800560e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005612:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005616:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800561a:	2300      	movs	r3, #0
 800561c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005620:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005624:	460b      	mov	r3, r1
 8005626:	4313      	orrs	r3, r2
 8005628:	d055      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800562a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800562e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005632:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005636:	d031      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8005638:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800563c:	d82a      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800563e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005642:	d02d      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 8005644:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005648:	d824      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800564a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800564e:	d029      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 8005650:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005654:	d81e      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005656:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800565a:	d011      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800565c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005660:	d818      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d020      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 8005666:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800566a:	d113      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800566c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005670:	3308      	adds	r3, #8
 8005672:	4618      	mov	r0, r3
 8005674:	f004 fa16 	bl	8009aa4 <RCCEx_PLL2_Config>
 8005678:	4603      	mov	r3, r0
 800567a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 800567e:	e014      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005680:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005684:	3330      	adds	r3, #48	@ 0x30
 8005686:	4618      	mov	r0, r3
 8005688:	f004 faa4 	bl	8009bd4 <RCCEx_PLL3_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8005692:	e00a      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800569a:	e006      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800569c:	bf00      	nop
 800569e:	e004      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80056a0:	bf00      	nop
 80056a2:	e002      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80056a4:	bf00      	nop
 80056a6:	e000      	b.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80056a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056aa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10d      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80056b2:	4b7c      	ldr	r3, [pc, #496]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80056b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80056b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80056bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056c4:	4a77      	ldr	r2, [pc, #476]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80056c6:	430b      	orrs	r3, r1
 80056c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80056cc:	e003      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ce:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80056d2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80056e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056e6:	2300      	movs	r3, #0
 80056e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80056ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80056f0:	460b      	mov	r3, r1
 80056f2:	4313      	orrs	r3, r2
 80056f4:	d03d      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 80056f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80056fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005702:	d01b      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8005704:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005708:	d814      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800570a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800570e:	d017      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8005710:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005714:	d80e      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d014      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800571a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800571e:	d109      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005720:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005724:	3330      	adds	r3, #48	@ 0x30
 8005726:	4618      	mov	r0, r3
 8005728:	f004 fa54 	bl	8009bd4 <RCCEx_PLL3_Config>
 800572c:	4603      	mov	r3, r0
 800572e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8005732:	e008      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800573a:	e004      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800573c:	bf00      	nop
 800573e:	e002      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005740:	bf00      	nop
 8005742:	e000      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 8005744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005746:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800574a:	2b00      	cmp	r3, #0
 800574c:	d10d      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800574e:	4b55      	ldr	r3, [pc, #340]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005750:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005754:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005758:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800575c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005760:	4a50      	ldr	r2, [pc, #320]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005762:	430b      	orrs	r3, r1
 8005764:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005768:	e003      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800576e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005772:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800577e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005782:	2300      	movs	r3, #0
 8005784:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005788:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800578c:	460b      	mov	r3, r1
 800578e:	4313      	orrs	r3, r2
 8005790:	d03d      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8005792:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800579a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800579e:	d01b      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 80057a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80057a4:	d814      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80057a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057aa:	d017      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0xb88>
 80057ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80057b0:	d80e      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d014      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80057b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80057ba:	d109      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057bc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057c0:	3330      	adds	r3, #48	@ 0x30
 80057c2:	4618      	mov	r0, r3
 80057c4:	f004 fa06 	bl	8009bd4 <RCCEx_PLL3_Config>
 80057c8:	4603      	mov	r3, r0
 80057ca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 80057ce:	e008      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80057d6:	e004      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80057d8:	bf00      	nop
 80057da:	e002      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80057dc:	bf00      	nop
 80057de:	e000      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 80057e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10d      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80057ea:	4b2e      	ldr	r3, [pc, #184]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80057ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80057f0:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 80057f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80057f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80057fc:	4a29      	ldr	r2, [pc, #164]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80057fe:	430b      	orrs	r3, r1
 8005800:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005804:	e003      	b.n	800580e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005806:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800580a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800580e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005816:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800581a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800581e:	2300      	movs	r3, #0
 8005820:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005824:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005828:	460b      	mov	r3, r1
 800582a:	4313      	orrs	r3, r2
 800582c:	d040      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800582e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005832:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005836:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800583a:	d01b      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800583c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005840:	d814      	bhi.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8005842:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005846:	d017      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8005848:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800584c:	d80e      	bhi.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xc18>
 800584e:	2b00      	cmp	r3, #0
 8005850:	d014      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005852:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005856:	d109      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005858:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800585c:	3330      	adds	r3, #48	@ 0x30
 800585e:	4618      	mov	r0, r3
 8005860:	f004 f9b8 	bl	8009bd4 <RCCEx_PLL3_Config>
 8005864:	4603      	mov	r3, r0
 8005866:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 800586a:	e008      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005872:	e004      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005874:	bf00      	nop
 8005876:	e002      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8005878:	bf00      	nop
 800587a:	e000      	b.n	800587e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 800587c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800587e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005882:	2b00      	cmp	r3, #0
 8005884:	d110      	bne.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005886:	4b07      	ldr	r3, [pc, #28]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8005888:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800588c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005890:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005894:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005898:	4a02      	ldr	r2, [pc, #8]	@ (80058a4 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800589a:	430b      	orrs	r3, r1
 800589c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80058a0:	e006      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 80058a2:	bf00      	nop
 80058a4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80058ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	2100      	movs	r1, #0
 80058ba:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 80058be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80058c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80058ca:	460b      	mov	r3, r1
 80058cc:	4313      	orrs	r3, r2
 80058ce:	d03d      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 80058d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80058d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058dc:	d01b      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80058de:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80058e2:	d814      	bhi.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80058e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058e8:	d017      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80058ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058ee:	d80e      	bhi.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d014      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 80058f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058f8:	d109      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80058fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80058fe:	3330      	adds	r3, #48	@ 0x30
 8005900:	4618      	mov	r0, r3
 8005902:	f004 f967 	bl	8009bd4 <RCCEx_PLL3_Config>
 8005906:	4603      	mov	r3, r0
 8005908:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800590c:	e008      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005914:	e004      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8005916:	bf00      	nop
 8005918:	e002      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800591a:	bf00      	nop
 800591c:	e000      	b.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800591e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005920:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10d      	bne.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005928:	4bbe      	ldr	r3, [pc, #760]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800592a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800592e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005932:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005936:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800593a:	4aba      	ldr	r2, [pc, #744]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800593c:	430b      	orrs	r3, r1
 800593e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005942:	e003      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005944:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005948:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800594c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005954:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005958:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800595c:	2300      	movs	r3, #0
 800595e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005962:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005966:	460b      	mov	r3, r1
 8005968:	4313      	orrs	r3, r2
 800596a:	d035      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 800596c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005970:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005974:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005978:	d015      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 800597a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800597e:	d80e      	bhi.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8005980:	2b00      	cmp	r3, #0
 8005982:	d012      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8005984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005988:	d109      	bne.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800598a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800598e:	3330      	adds	r3, #48	@ 0x30
 8005990:	4618      	mov	r0, r3
 8005992:	f004 f91f 	bl	8009bd4 <RCCEx_PLL3_Config>
 8005996:	4603      	mov	r3, r0
 8005998:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 800599c:	e006      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80059a4:	e002      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80059a6:	bf00      	nop
 80059a8:	e000      	b.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 80059aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ac:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10d      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80059b4:	4b9b      	ldr	r3, [pc, #620]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059b6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80059ba:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 80059be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80059c6:	4a97      	ldr	r2, [pc, #604]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059c8:	430b      	orrs	r3, r1
 80059ca:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80059ce:	e003      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80059d4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80059d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	2100      	movs	r1, #0
 80059e2:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 80059e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059ea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80059ee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059f2:	460b      	mov	r3, r1
 80059f4:	4313      	orrs	r3, r2
 80059f6:	d00e      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80059f8:	4b8a      	ldr	r3, [pc, #552]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	4a89      	ldr	r2, [pc, #548]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80059fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a02:	61d3      	str	r3, [r2, #28]
 8005a04:	4b87      	ldr	r3, [pc, #540]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005a06:	69d9      	ldr	r1, [r3, #28]
 8005a08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a0c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8005a10:	4a84      	ldr	r2, [pc, #528]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005a12:	430b      	orrs	r3, r1
 8005a14:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005a22:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a26:	2300      	movs	r3, #0
 8005a28:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005a2c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005a30:	460b      	mov	r3, r1
 8005a32:	4313      	orrs	r3, r2
 8005a34:	d055      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005a36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a3e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005a42:	d031      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8005a44:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005a48:	d82a      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005a4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a4e:	d02d      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8005a50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a54:	d824      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005a56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a5a:	d029      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8005a5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a60:	d81e      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005a62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a66:	d011      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8005a68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a6c:	d818      	bhi.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d020      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8005a72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a76:	d113      	bne.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a7c:	3308      	adds	r3, #8
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f004 f810 	bl	8009aa4 <RCCEx_PLL2_Config>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005a8a:	e014      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005a90:	3330      	adds	r3, #48	@ 0x30
 8005a92:	4618      	mov	r0, r3
 8005a94:	f004 f89e 	bl	8009bd4 <RCCEx_PLL3_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8005a9e:	e00a      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005aa6:	e006      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005aa8:	bf00      	nop
 8005aaa:	e004      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005aac:	bf00      	nop
 8005aae:	e002      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005ab0:	bf00      	nop
 8005ab2:	e000      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8005ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10d      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005abe:	4b59      	ldr	r3, [pc, #356]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005ac0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005ac4:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005ac8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005acc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005ad0:	4a54      	ldr	r2, [pc, #336]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005ad8:	e003      	b.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ada:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ade:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ae2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005aee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005af2:	2300      	movs	r3, #0
 8005af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005af8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4313      	orrs	r3, r2
 8005b00:	d055      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005b02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b0a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005b0e:	d031      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8005b10:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005b14:	d82a      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005b16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b1a:	d02d      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8005b1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b20:	d824      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005b22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b26:	d029      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8005b28:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b2c:	d81e      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005b2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b32:	d011      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8005b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b38:	d818      	bhi.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d020      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8005b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b42:	d113      	bne.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005b44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b48:	3308      	adds	r3, #8
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f003 ffaa 	bl	8009aa4 <RCCEx_PLL2_Config>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005b56:	e014      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b5c:	3330      	adds	r3, #48	@ 0x30
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f004 f838 	bl	8009bd4 <RCCEx_PLL3_Config>
 8005b64:	4603      	mov	r3, r0
 8005b66:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8005b6a:	e00a      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005b72:	e006      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005b74:	bf00      	nop
 8005b76:	e004      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005b78:	bf00      	nop
 8005b7a:	e002      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005b7c:	bf00      	nop
 8005b7e:	e000      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8005b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10d      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005b8a:	4b26      	ldr	r3, [pc, #152]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005b8c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005b90:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005b94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005b98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005b9c:	4a21      	ldr	r2, [pc, #132]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005ba4:	e003      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005baa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005bae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8005bbc:	f003 0320 	and.w	r3, r3, #32
 8005bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	d057      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005bce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005bd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005bda:	d033      	beq.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8005bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005be0:	d82c      	bhi.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005be2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005be6:	d02f      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8005be8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bec:	d826      	bhi.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005bee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bf2:	d02b      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8005bf4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bf8:	d820      	bhi.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005bfa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bfe:	d013      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005c00:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c04:	d81a      	bhi.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d022      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8005c0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c0e:	d115      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c14:	3308      	adds	r3, #8
 8005c16:	4618      	mov	r0, r3
 8005c18:	f003 ff44 	bl	8009aa4 <RCCEx_PLL2_Config>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005c22:	e016      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8005c24:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c2c:	3330      	adds	r3, #48	@ 0x30
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f003 ffd0 	bl	8009bd4 <RCCEx_PLL3_Config>
 8005c34:	4603      	mov	r3, r0
 8005c36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8005c3a:	e00a      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005c42:	e006      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005c44:	bf00      	nop
 8005c46:	e004      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005c48:	bf00      	nop
 8005c4a:	e002      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005c4c:	bf00      	nop
 8005c4e:	e000      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8005c50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c52:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10d      	bne.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8005c5a:	4bbb      	ldr	r3, [pc, #748]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005c60:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005c64:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c6c:	4ab6      	ldr	r2, [pc, #728]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005c6e:	430b      	orrs	r3, r1
 8005c70:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005c74:	e003      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c76:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005c7a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8005c7e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	2100      	movs	r1, #0
 8005c88:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8005c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	d055      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005c9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ca2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ca6:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005caa:	d031      	beq.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8005cac:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8005cb0:	d82a      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005cb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cb6:	d02d      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8005cb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cbc:	d824      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005cbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cc2:	d029      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8005cc4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005cc8:	d81e      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005cca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cce:	d011      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8005cd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005cd4:	d818      	bhi.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d020      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8005cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cde:	d113      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ce0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f003 fedc 	bl	8009aa4 <RCCEx_PLL2_Config>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005cf2:	e014      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cf4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005cf8:	3330      	adds	r3, #48	@ 0x30
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f003 ff6a 	bl	8009bd4 <RCCEx_PLL3_Config>
 8005d00:	4603      	mov	r3, r0
 8005d02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8005d06:	e00a      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005d0e:	e006      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005d10:	bf00      	nop
 8005d12:	e004      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005d14:	bf00      	nop
 8005d16:	e002      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005d18:	bf00      	nop
 8005d1a:	e000      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8005d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d10d      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8005d26:	4b88      	ldr	r3, [pc, #544]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005d28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005d2c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8005d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d38:	4a83      	ldr	r2, [pc, #524]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005d3a:	430b      	orrs	r3, r1
 8005d3c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005d40:	e003      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d42:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005d46:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8005d4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	2100      	movs	r1, #0
 8005d54:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8005d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d5c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d60:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005d64:	460b      	mov	r3, r1
 8005d66:	4313      	orrs	r3, r2
 8005d68:	d055      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005d6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005d6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d72:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d76:	d031      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8005d78:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005d7c:	d82a      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005d7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d82:	d02d      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8005d84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005d88:	d824      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005d8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d8e:	d029      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8005d90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005d94:	d81e      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005d96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005d9a:	d011      	beq.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8005d9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005da0:	d818      	bhi.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d020      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8005da6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005daa:	d113      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005dac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005db0:	3308      	adds	r3, #8
 8005db2:	4618      	mov	r0, r3
 8005db4:	f003 fe76 	bl	8009aa4 <RCCEx_PLL2_Config>
 8005db8:	4603      	mov	r3, r0
 8005dba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005dbe:	e014      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005dc4:	3330      	adds	r3, #48	@ 0x30
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f003 ff04 	bl	8009bd4 <RCCEx_PLL3_Config>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8005dd2:	e00a      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005dda:	e006      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005ddc:	bf00      	nop
 8005dde:	e004      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005de0:	bf00      	nop
 8005de2:	e002      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005de4:	bf00      	nop
 8005de6:	e000      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8005de8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10d      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005df2:	4b55      	ldr	r3, [pc, #340]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005df4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005df8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e04:	4a50      	ldr	r2, [pc, #320]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005e06:	430b      	orrs	r3, r1
 8005e08:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005e0c:	e003      	b.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005e12:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8005e16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	2100      	movs	r1, #0
 8005e20:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8005e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e2c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005e30:	460b      	mov	r3, r1
 8005e32:	4313      	orrs	r3, r2
 8005e34:	d055      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8005e36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005e3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e42:	d031      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8005e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e48:	d82a      	bhi.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e4e:	d02d      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8005e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e54:	d824      	bhi.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005e56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e5a:	d029      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005e5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e60:	d81e      	bhi.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005e62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e66:	d011      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8005e68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e6c:	d818      	bhi.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d020      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8005e72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e76:	d113      	bne.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e78:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e7c:	3308      	adds	r3, #8
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f003 fe10 	bl	8009aa4 <RCCEx_PLL2_Config>
 8005e84:	4603      	mov	r3, r0
 8005e86:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005e8a:	e014      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005e8c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005e90:	3330      	adds	r3, #48	@ 0x30
 8005e92:	4618      	mov	r0, r3
 8005e94:	f003 fe9e 	bl	8009bd4 <RCCEx_PLL3_Config>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8005e9e:	e00a      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005ea6:	e006      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005ea8:	bf00      	nop
 8005eaa:	e004      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005eac:	bf00      	nop
 8005eae:	e002      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005eb0:	bf00      	nop
 8005eb2:	e000      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8005eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005eb6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10d      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8005ebe:	4b22      	ldr	r3, [pc, #136]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005ec0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005ec4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ec8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ecc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8005ed8:	e003      	b.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eda:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005ede:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005ee2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eea:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005eee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005ef8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005efc:	460b      	mov	r3, r1
 8005efe:	4313      	orrs	r3, r2
 8005f00:	d055      	beq.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005f02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f0e:	d035      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8005f10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f14:	d82e      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005f16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f1a:	d031      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8005f1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f20:	d828      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f26:	d01b      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8005f28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f2c:	d822      	bhi.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8005f32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f36:	d009      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8005f38:	e01c      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f3a:	4b03      	ldr	r3, [pc, #12]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3e:	4a02      	ldr	r2, [pc, #8]	@ (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8005f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f44:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f46:	e01c      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8005f48:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f50:	3308      	adds	r3, #8
 8005f52:	4618      	mov	r0, r3
 8005f54:	f003 fda6 	bl	8009aa4 <RCCEx_PLL2_Config>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f5e:	e010      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f64:	3330      	adds	r3, #48	@ 0x30
 8005f66:	4618      	mov	r0, r3
 8005f68:	f003 fe34 	bl	8009bd4 <RCCEx_PLL3_Config>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f72:	e006      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005f7a:	e002      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005f7c:	bf00      	nop
 8005f7e:	e000      	b.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8005f80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f82:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10d      	bne.n	8005fa6 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005f8a:	4bc3      	ldr	r3, [pc, #780]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f90:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005f94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f98:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f9c:	4abe      	ldr	r2, [pc, #760]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8005f9e:	430b      	orrs	r3, r1
 8005fa0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005fa4:	e003      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005faa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005fae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb6:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005fba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005fc4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005fc8:	460b      	mov	r3, r1
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	d051      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005fce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fd2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005fd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fda:	d033      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005fdc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fe0:	d82c      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005fe2:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005fe6:	d02d      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8005fe8:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005fec:	d826      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005fee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ff2:	d019      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8005ff4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ff8:	d820      	bhi.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8005ffe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006002:	d007      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8006004:	e01a      	b.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006006:	4ba4      	ldr	r3, [pc, #656]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600a:	4aa3      	ldr	r2, [pc, #652]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800600c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006010:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006012:	e018      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006014:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006018:	3308      	adds	r3, #8
 800601a:	4618      	mov	r0, r3
 800601c:	f003 fd42 	bl	8009aa4 <RCCEx_PLL2_Config>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006026:	e00e      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006028:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800602c:	3330      	adds	r3, #48	@ 0x30
 800602e:	4618      	mov	r0, r3
 8006030:	f003 fdd0 	bl	8009bd4 <RCCEx_PLL3_Config>
 8006034:	4603      	mov	r3, r0
 8006036:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 800603a:	e004      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006042:	e000      	b.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8006044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006046:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10d      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800604e:	4b92      	ldr	r3, [pc, #584]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006054:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8006058:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800605c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006060:	4a8d      	ldr	r2, [pc, #564]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006062:	430b      	orrs	r3, r1
 8006064:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006068:	e003      	b.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800606e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006072:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800607e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006080:	2300      	movs	r3, #0
 8006082:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006084:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006088:	460b      	mov	r3, r1
 800608a:	4313      	orrs	r3, r2
 800608c:	d032      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800608e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006092:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006096:	2b05      	cmp	r3, #5
 8006098:	d80f      	bhi.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800609a:	2b03      	cmp	r3, #3
 800609c:	d211      	bcs.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d911      	bls.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 80060a2:	2b02      	cmp	r3, #2
 80060a4:	d109      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060aa:	3308      	adds	r3, #8
 80060ac:	4618      	mov	r0, r3
 80060ae:	f003 fcf9 	bl	8009aa4 <RCCEx_PLL2_Config>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80060b8:	e006      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80060c0:	e002      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80060c2:	bf00      	nop
 80060c4:	e000      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 80060c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10d      	bne.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80060d0:	4b71      	ldr	r3, [pc, #452]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80060d6:	f023 0107 	bic.w	r1, r3, #7
 80060da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060de:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80060e2:	4a6d      	ldr	r2, [pc, #436]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80060e4:	430b      	orrs	r3, r1
 80060e6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80060ea:	e003      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060ec:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060f0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80060f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060fc:	2100      	movs	r1, #0
 80060fe:	6739      	str	r1, [r7, #112]	@ 0x70
 8006100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006104:	677b      	str	r3, [r7, #116]	@ 0x74
 8006106:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800610a:	460b      	mov	r3, r1
 800610c:	4313      	orrs	r3, r2
 800610e:	d024      	beq.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006110:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006114:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006118:	2b00      	cmp	r3, #0
 800611a:	d005      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 800611c:	2b08      	cmp	r3, #8
 800611e:	d005      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006126:	e002      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8006128:	bf00      	nop
 800612a:	e000      	b.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 800612c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800612e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10d      	bne.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006136:	4b58      	ldr	r3, [pc, #352]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800613c:	f023 0108 	bic.w	r1, r3, #8
 8006140:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006148:	4a53      	ldr	r2, [pc, #332]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800614a:	430b      	orrs	r3, r1
 800614c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006150:	e003      	b.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006152:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006156:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800615a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800615e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006162:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006166:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006168:	2300      	movs	r3, #0
 800616a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800616c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006170:	460b      	mov	r3, r1
 8006172:	4313      	orrs	r3, r2
 8006174:	f000 80b9 	beq.w	80062ea <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006178:	4b48      	ldr	r3, [pc, #288]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617c:	4a47      	ldr	r2, [pc, #284]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006184:	f7fb fc04 	bl	8001990 <HAL_GetTick>
 8006188:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800618c:	e00b      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800618e:	f7fb fbff 	bl	8001990 <HAL_GetTick>
 8006192:	4602      	mov	r2, r0
 8006194:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	2b02      	cmp	r3, #2
 800619c:	d903      	bls.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 800619e:	2303      	movs	r3, #3
 80061a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80061a4:	e005      	b.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80061a6:	4b3d      	ldr	r3, [pc, #244]	@ (800629c <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 80061a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d0ed      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 80061b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f040 8093 	bne.w	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80061bc:	4b36      	ldr	r3, [pc, #216]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80061be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061c6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80061ca:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d023      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 80061d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061d6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 80061da:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80061de:	4293      	cmp	r3, r2
 80061e0:	d01b      	beq.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80061e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ec:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061f0:	4b29      	ldr	r3, [pc, #164]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80061f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061f6:	4a28      	ldr	r2, [pc, #160]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80061f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061fc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006200:	4b25      	ldr	r3, [pc, #148]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006206:	4a24      	ldr	r2, [pc, #144]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006208:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800620c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006210:	4a21      	ldr	r2, [pc, #132]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006212:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8006216:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800621a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d019      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006226:	f7fb fbb3 	bl	8001990 <HAL_GetTick>
 800622a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800622e:	e00d      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006230:	f7fb fbae 	bl	8001990 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800623a:	1ad2      	subs	r2, r2, r3
 800623c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006240:	429a      	cmp	r2, r3
 8006242:	d903      	bls.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 800624a:	e006      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800624c:	4b12      	ldr	r3, [pc, #72]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800624e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d0ea      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 800625a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800625e:	2b00      	cmp	r3, #0
 8006260:	d13a      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006262:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006266:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800626a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800626e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006272:	d115      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8006274:	4b08      	ldr	r3, [pc, #32]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800627c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006280:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8006284:	091b      	lsrs	r3, r3, #4
 8006286:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800628a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800628e:	4a02      	ldr	r2, [pc, #8]	@ (8006298 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8006290:	430b      	orrs	r3, r1
 8006292:	61d3      	str	r3, [r2, #28]
 8006294:	e00a      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x1658>
 8006296:	bf00      	nop
 8006298:	44020c00 	.word	0x44020c00
 800629c:	44020800 	.word	0x44020800
 80062a0:	4b9f      	ldr	r3, [pc, #636]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	4a9e      	ldr	r2, [pc, #632]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062a6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80062aa:	61d3      	str	r3, [r2, #28]
 80062ac:	4b9c      	ldr	r3, [pc, #624]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062b2:	4a9b      	ldr	r2, [pc, #620]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062b8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062bc:	4b98      	ldr	r3, [pc, #608]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062be:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 80062c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062c6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80062ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ce:	4a94      	ldr	r2, [pc, #592]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80062d0:	430b      	orrs	r3, r1
 80062d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80062d6:	e008      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062d8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062dc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 80062e0:	e003      	b.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80062e6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f2:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80062f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80062f8:	2300      	movs	r3, #0
 80062fa:	667b      	str	r3, [r7, #100]	@ 0x64
 80062fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006300:	460b      	mov	r3, r1
 8006302:	4313      	orrs	r3, r2
 8006304:	d035      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006306:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800630a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800630e:	2b30      	cmp	r3, #48	@ 0x30
 8006310:	d014      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8006312:	2b30      	cmp	r3, #48	@ 0x30
 8006314:	d80e      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8006316:	2b20      	cmp	r3, #32
 8006318:	d012      	beq.n	8006340 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800631a:	2b20      	cmp	r3, #32
 800631c:	d80a      	bhi.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800631e:	2b00      	cmp	r3, #0
 8006320:	d010      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006322:	2b10      	cmp	r3, #16
 8006324:	d106      	bne.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006326:	4b7e      	ldr	r3, [pc, #504]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800632a:	4a7d      	ldr	r2, [pc, #500]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800632c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006330:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8006332:	e008      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800633a:	e004      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800633c:	bf00      	nop
 800633e:	e002      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006340:	bf00      	nop
 8006342:	e000      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 8006344:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006346:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10d      	bne.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800634e:	4b74      	ldr	r3, [pc, #464]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006354:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006358:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800635c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006360:	4a6f      	ldr	r2, [pc, #444]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006362:	430b      	orrs	r3, r1
 8006364:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8006368:	e003      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800636a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800636e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006372:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637a:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800637e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006380:	2300      	movs	r3, #0
 8006382:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006384:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006388:	460b      	mov	r3, r1
 800638a:	4313      	orrs	r3, r2
 800638c:	d033      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 800638e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006392:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800639a:	2b40      	cmp	r3, #64	@ 0x40
 800639c:	d007      	beq.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x175a>
 800639e:	e010      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063a0:	4b5f      	ldr	r3, [pc, #380]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80063a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a4:	4a5e      	ldr	r2, [pc, #376]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80063a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063aa:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80063ac:	e00d      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063b2:	3308      	adds	r3, #8
 80063b4:	4618      	mov	r0, r3
 80063b6:	f003 fb75 	bl	8009aa4 <RCCEx_PLL2_Config>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 80063c0:	e003      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80063c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10d      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 80063d2:	4b53      	ldr	r3, [pc, #332]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80063d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063d8:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 80063dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063e0:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80063e4:	4a4e      	ldr	r2, [pc, #312]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80063e6:	430b      	orrs	r3, r1
 80063e8:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80063ec:	e003      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ee:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063f2:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80063f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fe:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006402:	653b      	str	r3, [r7, #80]	@ 0x50
 8006404:	2300      	movs	r3, #0
 8006406:	657b      	str	r3, [r7, #84]	@ 0x54
 8006408:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800640c:	460b      	mov	r3, r1
 800640e:	4313      	orrs	r3, r2
 8006410:	d033      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006412:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006416:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800641e:	2b80      	cmp	r3, #128	@ 0x80
 8006420:	d007      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8006422:	e010      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006424:	4b3e      	ldr	r3, [pc, #248]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006428:	4a3d      	ldr	r2, [pc, #244]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800642a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800642e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006430:	e00d      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006432:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006436:	3308      	adds	r3, #8
 8006438:	4618      	mov	r0, r3
 800643a:	f003 fb33 	bl	8009aa4 <RCCEx_PLL2_Config>
 800643e:	4603      	mov	r3, r0
 8006440:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8006444:	e003      	b.n	800644e <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800644c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800644e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10d      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8006456:	4b32      	ldr	r3, [pc, #200]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006458:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800645c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006460:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006464:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8006468:	4a2d      	ldr	r2, [pc, #180]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800646a:	430b      	orrs	r3, r1
 800646c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006470:	e003      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006472:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006476:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800647a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006486:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006488:	2300      	movs	r3, #0
 800648a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800648c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006490:	460b      	mov	r3, r1
 8006492:	4313      	orrs	r3, r2
 8006494:	d04a      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 8006496:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800649a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800649e:	2b04      	cmp	r3, #4
 80064a0:	d827      	bhi.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 80064a2:	a201      	add	r2, pc, #4	@ (adr r2, 80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064bd 	.word	0x080064bd
 80064ac:	080064cb 	.word	0x080064cb
 80064b0:	080064df 	.word	0x080064df
 80064b4:	080064fb 	.word	0x080064fb
 80064b8:	080064fb 	.word	0x080064fb
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064bc:	4b18      	ldr	r3, [pc, #96]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80064be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c0:	4a17      	ldr	r2, [pc, #92]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80064c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064c6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80064c8:	e018      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064ce:	3308      	adds	r3, #8
 80064d0:	4618      	mov	r0, r3
 80064d2:	f003 fae7 	bl	8009aa4 <RCCEx_PLL2_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80064dc:	e00e      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064e2:	3330      	adds	r3, #48	@ 0x30
 80064e4:	4618      	mov	r0, r3
 80064e6:	f003 fb75 	bl	8009bd4 <RCCEx_PLL3_Config>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 80064f0:	e004      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80064f8:	e000      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 80064fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064fc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10f      	bne.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006504:	4b06      	ldr	r3, [pc, #24]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800650a:	f023 0107 	bic.w	r1, r3, #7
 800650e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006516:	4a02      	ldr	r2, [pc, #8]	@ (8006520 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8006518:	430b      	orrs	r3, r1
 800651a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800651e:	e005      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8006520:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006524:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006528:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800652c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006538:	643b      	str	r3, [r7, #64]	@ 0x40
 800653a:	2300      	movs	r3, #0
 800653c:	647b      	str	r3, [r7, #68]	@ 0x44
 800653e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006542:	460b      	mov	r3, r1
 8006544:	4313      	orrs	r3, r2
 8006546:	f000 8081 	beq.w	800664c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 800654a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800654e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006552:	2b20      	cmp	r3, #32
 8006554:	d85f      	bhi.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 8006556:	a201      	add	r2, pc, #4	@ (adr r2, 800655c <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 8006558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655c:	080065e1 	.word	0x080065e1
 8006560:	08006617 	.word	0x08006617
 8006564:	08006617 	.word	0x08006617
 8006568:	08006617 	.word	0x08006617
 800656c:	08006617 	.word	0x08006617
 8006570:	08006617 	.word	0x08006617
 8006574:	08006617 	.word	0x08006617
 8006578:	08006617 	.word	0x08006617
 800657c:	080065ef 	.word	0x080065ef
 8006580:	08006617 	.word	0x08006617
 8006584:	08006617 	.word	0x08006617
 8006588:	08006617 	.word	0x08006617
 800658c:	08006617 	.word	0x08006617
 8006590:	08006617 	.word	0x08006617
 8006594:	08006617 	.word	0x08006617
 8006598:	08006617 	.word	0x08006617
 800659c:	08006603 	.word	0x08006603
 80065a0:	08006617 	.word	0x08006617
 80065a4:	08006617 	.word	0x08006617
 80065a8:	08006617 	.word	0x08006617
 80065ac:	08006617 	.word	0x08006617
 80065b0:	08006617 	.word	0x08006617
 80065b4:	08006617 	.word	0x08006617
 80065b8:	08006617 	.word	0x08006617
 80065bc:	0800661f 	.word	0x0800661f
 80065c0:	08006617 	.word	0x08006617
 80065c4:	08006617 	.word	0x08006617
 80065c8:	08006617 	.word	0x08006617
 80065cc:	08006617 	.word	0x08006617
 80065d0:	08006617 	.word	0x08006617
 80065d4:	08006617 	.word	0x08006617
 80065d8:	08006617 	.word	0x08006617
 80065dc:	0800661f 	.word	0x0800661f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e0:	4bab      	ldr	r3, [pc, #684]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80065e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e4:	4aaa      	ldr	r2, [pc, #680]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80065e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ea:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80065ec:	e018      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065f2:	3308      	adds	r3, #8
 80065f4:	4618      	mov	r0, r3
 80065f6:	f003 fa55 	bl	8009aa4 <RCCEx_PLL2_Config>
 80065fa:	4603      	mov	r3, r0
 80065fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006600:	e00e      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006602:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006606:	3330      	adds	r3, #48	@ 0x30
 8006608:	4618      	mov	r0, r3
 800660a:	f003 fae3 	bl	8009bd4 <RCCEx_PLL3_Config>
 800660e:	4603      	mov	r3, r0
 8006610:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8006614:	e004      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800661c:	e000      	b.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800661e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006620:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10d      	bne.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006628:	4b99      	ldr	r3, [pc, #612]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800662a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800662e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006632:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006636:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800663a:	4a95      	ldr	r2, [pc, #596]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800663c:	430b      	orrs	r3, r1
 800663e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006642:	e003      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006644:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006648:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800664c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006654:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006658:	63bb      	str	r3, [r7, #56]	@ 0x38
 800665a:	2300      	movs	r3, #0
 800665c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800665e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006662:	460b      	mov	r3, r1
 8006664:	4313      	orrs	r3, r2
 8006666:	d04e      	beq.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 8006668:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800666c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006670:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006674:	d02e      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 8006676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800667a:	d827      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800667c:	2bc0      	cmp	r3, #192	@ 0xc0
 800667e:	d02b      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8006680:	2bc0      	cmp	r3, #192	@ 0xc0
 8006682:	d823      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8006684:	2b80      	cmp	r3, #128	@ 0x80
 8006686:	d017      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 8006688:	2b80      	cmp	r3, #128	@ 0x80
 800668a:	d81f      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8006690:	2b40      	cmp	r3, #64	@ 0x40
 8006692:	d007      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8006694:	e01a      	b.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006696:	4b7e      	ldr	r3, [pc, #504]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669a:	4a7d      	ldr	r2, [pc, #500]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800669c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066a0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80066a2:	e01a      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066a8:	3308      	adds	r3, #8
 80066aa:	4618      	mov	r0, r3
 80066ac:	f003 f9fa 	bl	8009aa4 <RCCEx_PLL2_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80066b6:	e010      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066bc:	3330      	adds	r3, #48	@ 0x30
 80066be:	4618      	mov	r0, r3
 80066c0:	f003 fa88 	bl	8009bd4 <RCCEx_PLL3_Config>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 80066ca:	e006      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80066d2:	e002      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80066d4:	bf00      	nop
 80066d6:	e000      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 80066d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066da:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10d      	bne.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80066e2:	4b6b      	ldr	r3, [pc, #428]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80066e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80066e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80066ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80066f4:	4a66      	ldr	r2, [pc, #408]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80066f6:	430b      	orrs	r3, r1
 80066f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80066fc:	e003      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006702:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006706:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800670a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006712:	633b      	str	r3, [r7, #48]	@ 0x30
 8006714:	2300      	movs	r3, #0
 8006716:	637b      	str	r3, [r7, #52]	@ 0x34
 8006718:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800671c:	460b      	mov	r3, r1
 800671e:	4313      	orrs	r3, r2
 8006720:	d055      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8006722:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006726:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800672a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800672e:	d031      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8006730:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006734:	d82a      	bhi.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800673a:	d02d      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800673c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006740:	d824      	bhi.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8006742:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006746:	d029      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 8006748:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800674c:	d81e      	bhi.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800674e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006752:	d011      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 8006754:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006758:	d818      	bhi.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d020      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 800675e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006762:	d113      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006764:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006768:	3308      	adds	r3, #8
 800676a:	4618      	mov	r0, r3
 800676c:	f003 f99a 	bl	8009aa4 <RCCEx_PLL2_Config>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8006776:	e014      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006778:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800677c:	3330      	adds	r3, #48	@ 0x30
 800677e:	4618      	mov	r0, r3
 8006780:	f003 fa28 	bl	8009bd4 <RCCEx_PLL3_Config>
 8006784:	4603      	mov	r3, r0
 8006786:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 800678a:	e00a      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006792:	e006      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006794:	bf00      	nop
 8006796:	e004      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8006798:	bf00      	nop
 800679a:	e002      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 800679c:	bf00      	nop
 800679e:	e000      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80067a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10d      	bne.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 80067aa:	4b39      	ldr	r3, [pc, #228]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80067ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067b0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 80067b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80067bc:	4a34      	ldr	r2, [pc, #208]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80067be:	430b      	orrs	r3, r1
 80067c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80067c4:	e003      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067ca:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80067ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80067da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067dc:	2300      	movs	r3, #0
 80067de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80067e4:	460b      	mov	r3, r1
 80067e6:	4313      	orrs	r3, r2
 80067e8:	d058      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 80067ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80067f2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80067f6:	d031      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 80067f8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80067fc:	d82a      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 80067fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006802:	d02d      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8006804:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006808:	d824      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800680a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800680e:	d029      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8006810:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006814:	d81e      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800681a:	d011      	beq.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800681c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006820:	d818      	bhi.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8006822:	2b00      	cmp	r3, #0
 8006824:	d020      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8006826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800682a:	d113      	bne.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800682c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006830:	3308      	adds	r3, #8
 8006832:	4618      	mov	r0, r3
 8006834:	f003 f936 	bl	8009aa4 <RCCEx_PLL2_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800683e:	e014      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006840:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006844:	3330      	adds	r3, #48	@ 0x30
 8006846:	4618      	mov	r0, r3
 8006848:	f003 f9c4 	bl	8009bd4 <RCCEx_PLL3_Config>
 800684c:	4603      	mov	r3, r0
 800684e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8006852:	e00a      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800685a:	e006      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 800685c:	bf00      	nop
 800685e:	e004      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006860:	bf00      	nop
 8006862:	e002      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006864:	bf00      	nop
 8006866:	e000      	b.n	800686a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8006868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800686a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800686e:	2b00      	cmp	r3, #0
 8006870:	d110      	bne.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8006872:	4b07      	ldr	r3, [pc, #28]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006874:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006878:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800687c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006880:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006884:	4902      	ldr	r1, [pc, #8]	@ (8006890 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8006886:	4313      	orrs	r3, r2
 8006888:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800688c:	e006      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 800688e:	bf00      	nop
 8006890:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006894:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006898:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800689c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a4:	2100      	movs	r1, #0
 80068a6:	6239      	str	r1, [r7, #32]
 80068a8:	f003 0301 	and.w	r3, r3, #1
 80068ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068b2:	460b      	mov	r3, r1
 80068b4:	4313      	orrs	r3, r2
 80068b6:	d055      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 80068b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068c0:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80068c4:	d031      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 80068c6:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80068ca:	d82a      	bhi.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80068cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068d0:	d02d      	beq.n	800692e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 80068d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068d6:	d824      	bhi.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80068d8:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80068dc:	d029      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 80068de:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80068e2:	d81e      	bhi.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80068e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068e8:	d011      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 80068ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068ee:	d818      	bhi.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d020      	beq.n	8006936 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 80068f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80068f8:	d113      	bne.n	8006922 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80068fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068fe:	3308      	adds	r3, #8
 8006900:	4618      	mov	r0, r3
 8006902:	f003 f8cf 	bl	8009aa4 <RCCEx_PLL2_Config>
 8006906:	4603      	mov	r3, r0
 8006908:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800690c:	e014      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800690e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006912:	3330      	adds	r3, #48	@ 0x30
 8006914:	4618      	mov	r0, r3
 8006916:	f003 f95d 	bl	8009bd4 <RCCEx_PLL3_Config>
 800691a:	4603      	mov	r3, r0
 800691c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006920:	e00a      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006928:	e006      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800692a:	bf00      	nop
 800692c:	e004      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800692e:	bf00      	nop
 8006930:	e002      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006932:	bf00      	nop
 8006934:	e000      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8006936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006938:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10d      	bne.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8006940:	4b88      	ldr	r3, [pc, #544]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006946:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 800694a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800694e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006952:	4984      	ldr	r1, [pc, #528]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006954:	4313      	orrs	r3, r2
 8006956:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 800695a:	e003      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800695c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006960:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006964:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696c:	2100      	movs	r1, #0
 800696e:	61b9      	str	r1, [r7, #24]
 8006970:	f003 0302 	and.w	r3, r3, #2
 8006974:	61fb      	str	r3, [r7, #28]
 8006976:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800697a:	460b      	mov	r3, r1
 800697c:	4313      	orrs	r3, r2
 800697e:	d03d      	beq.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8006980:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006984:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006988:	2b03      	cmp	r3, #3
 800698a:	d81c      	bhi.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 800698c:	a201      	add	r2, pc, #4	@ (adr r2, 8006994 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069cf 	.word	0x080069cf
 8006998:	080069a5 	.word	0x080069a5
 800699c:	080069b3 	.word	0x080069b3
 80069a0:	080069cf 	.word	0x080069cf
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069a4:	4b6f      	ldr	r3, [pc, #444]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a8:	4a6e      	ldr	r2, [pc, #440]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80069ae:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80069b0:	e00e      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069b6:	3308      	adds	r3, #8
 80069b8:	4618      	mov	r0, r3
 80069ba:	f003 f873 	bl	8009aa4 <RCCEx_PLL2_Config>
 80069be:	4603      	mov	r3, r0
 80069c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 80069c4:	e004      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069cc:	e000      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 80069ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d10d      	bne.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80069d8:	4b62      	ldr	r3, [pc, #392]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069de:	f023 0203 	bic.w	r2, r3, #3
 80069e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80069ea:	495e      	ldr	r1, [pc, #376]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80069f2:	e003      	b.n	80069fc <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069f8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80069fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a04:	2100      	movs	r1, #0
 8006a06:	6139      	str	r1, [r7, #16]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a12:	460b      	mov	r3, r1
 8006a14:	4313      	orrs	r3, r2
 8006a16:	d03a      	beq.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8006a18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a24:	d00e      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8006a26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a2a:	d815      	bhi.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d017      	beq.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8006a30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a34:	d110      	bne.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a36:	4b4b      	ldr	r3, [pc, #300]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3a:	4a4a      	ldr	r2, [pc, #296]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a40:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006a42:	e00e      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006a44:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a48:	3308      	adds	r3, #8
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f003 f82a 	bl	8009aa4 <RCCEx_PLL2_Config>
 8006a50:	4603      	mov	r3, r0
 8006a52:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006a56:	e004      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a5e:	e000      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8006a60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a62:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10d      	bne.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006a6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006a70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006a74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a78:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006a7c:	4939      	ldr	r1, [pc, #228]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8006a84:	e003      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a8a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a96:	2100      	movs	r1, #0
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	d038      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8006aaa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aae:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006ab2:	2b30      	cmp	r3, #48	@ 0x30
 8006ab4:	d01b      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8006ab6:	2b30      	cmp	r3, #48	@ 0x30
 8006ab8:	d815      	bhi.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8006aba:	2b10      	cmp	r3, #16
 8006abc:	d002      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d007      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8006ac2:	e010      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac4:	4b27      	ldr	r3, [pc, #156]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac8:	4a26      	ldr	r2, [pc, #152]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006aca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ace:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8006ad0:	e00e      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ad2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ad6:	3330      	adds	r3, #48	@ 0x30
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f003 f87b 	bl	8009bd4 <RCCEx_PLL3_Config>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8006ae4:	e004      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006aec:	e000      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8006aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10d      	bne.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006af8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006afa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006afe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b02:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b06:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006b0a:	4916      	ldr	r1, [pc, #88]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8006b12:	e003      	b.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b14:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b18:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006b1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b24:	2100      	movs	r1, #0
 8006b26:	6039      	str	r1, [r7, #0]
 8006b28:	f003 0308 	and.w	r3, r3, #8
 8006b2c:	607b      	str	r3, [r7, #4]
 8006b2e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b32:	460b      	mov	r3, r1
 8006b34:	4313      	orrs	r3, r2
 8006b36:	d00c      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006b38:	4b0a      	ldr	r3, [pc, #40]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006b3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b46:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006b4a:	4906      	ldr	r1, [pc, #24]	@ (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8006b52:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b62:	bf00      	nop
 8006b64:	44020c00 	.word	0x44020c00

08006b68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b08b      	sub	sp, #44	@ 0x2c
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006b70:	4bae      	ldr	r3, [pc, #696]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b78:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006b7a:	4bac      	ldr	r3, [pc, #688]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006b84:	4ba9      	ldr	r3, [pc, #676]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b88:	0a1b      	lsrs	r3, r3, #8
 8006b8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b8e:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006b90:	4ba6      	ldr	r3, [pc, #664]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b94:	091b      	lsrs	r3, r3, #4
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006b9c:	4ba3      	ldr	r3, [pc, #652]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba0:	08db      	lsrs	r3, r3, #3
 8006ba2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	fb02 f303 	mul.w	r3, r2, r3
 8006bac:	ee07 3a90 	vmov	s15, r3
 8006bb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bb4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f000 8126 	beq.w	8006e0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d053      	beq.n	8006c6e <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d86f      	bhi.n	8006cac <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d003      	beq.n	8006bda <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d02b      	beq.n	8006c30 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8006bd8:	e068      	b.n	8006cac <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006bda:	4b94      	ldr	r3, [pc, #592]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	08db      	lsrs	r3, r3, #3
 8006be0:	f003 0303 	and.w	r3, r3, #3
 8006be4:	4a92      	ldr	r2, [pc, #584]	@ (8006e30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006be6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bea:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	ee07 3a90 	vmov	s15, r3
 8006bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	ee07 3a90 	vmov	s15, r3
 8006bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0e:	ed97 6a04 	vldr	s12, [r7, #16]
 8006c12:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8006e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006c2e:	e068      	b.n	8006d02 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8006e38 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8006c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c42:	6a3b      	ldr	r3, [r7, #32]
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4c:	ed97 6a04 	vldr	s12, [r7, #16]
 8006c50:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006c54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c68:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006c6c:	e049      	b.n	8006d02 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c78:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8006e3c <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8006c7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c80:	6a3b      	ldr	r3, [r7, #32]
 8006c82:	ee07 3a90 	vmov	s15, r3
 8006c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8a:	ed97 6a04 	vldr	s12, [r7, #16]
 8006c8e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8006e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ca6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006caa:	e02a      	b.n	8006d02 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006cac:	4b5f      	ldr	r3, [pc, #380]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	08db      	lsrs	r3, r3, #3
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	4a5e      	ldr	r2, [pc, #376]	@ (8006e30 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbc:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	ee07 3a90 	vmov	s15, r3
 8006cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cd6:	6a3b      	ldr	r3, [r7, #32]
 8006cd8:	ee07 3a90 	vmov	s15, r3
 8006cdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ce0:	ed97 6a04 	vldr	s12, [r7, #16]
 8006ce4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8006e34 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8006ce8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cf0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006d00:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d02:	4b4a      	ldr	r3, [pc, #296]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d0e:	d121      	bne.n	8006d54 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006d10:	4b46      	ldr	r3, [pc, #280]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d017      	beq.n	8006d4c <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d1c:	4b43      	ldr	r3, [pc, #268]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d20:	0a5b      	lsrs	r3, r3, #9
 8006d22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d26:	ee07 3a90 	vmov	s15, r3
 8006d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006d2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d32:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006d36:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d42:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	601a      	str	r2, [r3, #0]
 8006d4a:	e006      	b.n	8006d5a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	601a      	str	r2, [r3, #0]
 8006d52:	e002      	b.n	8006d5a <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d5a:	4b34      	ldr	r3, [pc, #208]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d62:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d66:	d121      	bne.n	8006dac <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006d68:	4b30      	ldr	r3, [pc, #192]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d017      	beq.n	8006da4 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006d74:	4b2d      	ldr	r3, [pc, #180]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006d76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d78:	0c1b      	lsrs	r3, r3, #16
 8006d7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d7e:	ee07 3a90 	vmov	s15, r3
 8006d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006d86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d8a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006d8e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d9a:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	605a      	str	r2, [r3, #4]
 8006da2:	e006      	b.n	8006db2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	605a      	str	r2, [r3, #4]
 8006daa:	e002      	b.n	8006db2 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006db2:	4b1e      	ldr	r3, [pc, #120]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006dbe:	d121      	bne.n	8006e04 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006dc0:	4b1a      	ldr	r3, [pc, #104]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d017      	beq.n	8006dfc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006dcc:	4b17      	ldr	r3, [pc, #92]	@ (8006e2c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8006dce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dd0:	0e1b      	lsrs	r3, r3, #24
 8006dd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dd6:	ee07 3a90 	vmov	s15, r3
 8006dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006dde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006de2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8006de6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8006dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006df2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006dfa:	e010      	b.n	8006e1e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	609a      	str	r2, [r3, #8]
}
 8006e02:	e00c      	b.n	8006e1e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	609a      	str	r2, [r3, #8]
}
 8006e0a:	e008      	b.n	8006e1e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	609a      	str	r2, [r3, #8]
}
 8006e1e:	bf00      	nop
 8006e20:	372c      	adds	r7, #44	@ 0x2c
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	44020c00 	.word	0x44020c00
 8006e30:	03d09000 	.word	0x03d09000
 8006e34:	46000000 	.word	0x46000000
 8006e38:	4a742400 	.word	0x4a742400
 8006e3c:	4af42400 	.word	0x4af42400

08006e40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b08b      	sub	sp, #44	@ 0x2c
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006e48:	4bae      	ldr	r3, [pc, #696]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e50:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006e52:	4bac      	ldr	r3, [pc, #688]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e56:	f003 0303 	and.w	r3, r3, #3
 8006e5a:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8006e5c:	4ba9      	ldr	r3, [pc, #676]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e60:	0a1b      	lsrs	r3, r3, #8
 8006e62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e66:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8006e68:	4ba6      	ldr	r3, [pc, #664]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e6c:	091b      	lsrs	r3, r3, #4
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006e74:	4ba3      	ldr	r3, [pc, #652]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e78:	08db      	lsrs	r3, r3, #3
 8006e7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	fb02 f303 	mul.w	r3, r2, r3
 8006e84:	ee07 3a90 	vmov	s15, r3
 8006e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8c:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f000 8126 	beq.w	80070e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d053      	beq.n	8006f46 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d86f      	bhi.n	8006f84 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8006ea4:	69fb      	ldr	r3, [r7, #28]
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d003      	beq.n	8006eb2 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d02b      	beq.n	8006f08 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8006eb0:	e068      	b.n	8006f84 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006eb2:	4b94      	ldr	r3, [pc, #592]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	08db      	lsrs	r3, r3, #3
 8006eb8:	f003 0303 	and.w	r3, r3, #3
 8006ebc:	4a92      	ldr	r2, [pc, #584]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8006ec2:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	ee07 3a90 	vmov	s15, r3
 8006ed4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ed8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee6:	ed97 6a04 	vldr	s12, [r7, #16]
 8006eea:	eddf 5a88 	vldr	s11, [pc, #544]	@ 800710c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f02:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006f06:	e068      	b.n	8006fda <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f12:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8007110 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8006f16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f1a:	6a3b      	ldr	r3, [r7, #32]
 8006f1c:	ee07 3a90 	vmov	s15, r3
 8006f20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f24:	ed97 6a04 	vldr	s12, [r7, #16]
 8006f28:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800710c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006f2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f34:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f40:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006f44:	e049      	b.n	8006fda <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	ee07 3a90 	vmov	s15, r3
 8006f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f50:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8007114 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8006f54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f62:	ed97 6a04 	vldr	s12, [r7, #16]
 8006f66:	eddf 5a69 	vldr	s11, [pc, #420]	@ 800710c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8006f82:	e02a      	b.n	8006fda <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f84:	4b5f      	ldr	r3, [pc, #380]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	08db      	lsrs	r3, r3, #3
 8006f8a:	f003 0303 	and.w	r3, r3, #3
 8006f8e:	4a5e      	ldr	r2, [pc, #376]	@ (8007108 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006f90:	fa22 f303 	lsr.w	r3, r2, r3
 8006f94:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	ee07 3a90 	vmov	s15, r3
 8006f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa0:	69bb      	ldr	r3, [r7, #24]
 8006fa2:	ee07 3a90 	vmov	s15, r3
 8006fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006faa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	ee07 3a90 	vmov	s15, r3
 8006fb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb8:	ed97 6a04 	vldr	s12, [r7, #16]
 8006fbc:	eddf 5a53 	vldr	s11, [pc, #332]	@ 800710c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8006fc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fc8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8006fd8:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fda:	4b4a      	ldr	r3, [pc, #296]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fe2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006fe6:	d121      	bne.n	800702c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006fe8:	4b46      	ldr	r3, [pc, #280]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d017      	beq.n	8007024 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ff4:	4b43      	ldr	r3, [pc, #268]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8006ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff8:	0a5b      	lsrs	r3, r3, #9
 8006ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800700a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800700e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800701a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	e006      	b.n	8007032 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	e002      	b.n	8007032 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007032:	4b34      	ldr	r3, [pc, #208]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800703a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800703e:	d121      	bne.n	8007084 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007040:	4b30      	ldr	r3, [pc, #192]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8007042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d017      	beq.n	800707c <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800704c:	4b2d      	ldr	r3, [pc, #180]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800704e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007050:	0c1b      	lsrs	r3, r3, #16
 8007052:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800705e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007062:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8007066:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800706a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800706e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007072:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	605a      	str	r2, [r3, #4]
 800707a:	e006      	b.n	800708a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	605a      	str	r2, [r3, #4]
 8007082:	e002      	b.n	800708a <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800708a:	4b1e      	ldr	r3, [pc, #120]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007096:	d121      	bne.n	80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007098:	4b1a      	ldr	r3, [pc, #104]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800709a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d017      	beq.n	80070d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80070a4:	4b17      	ldr	r3, [pc, #92]	@ (8007104 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80070a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070a8:	0e1b      	lsrs	r3, r3, #24
 80070aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80070ae:	ee07 3a90 	vmov	s15, r3
 80070b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 80070b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80070ba:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80070be:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80070c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ca:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80070d2:	e010      	b.n	80070f6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	609a      	str	r2, [r3, #8]
}
 80070da:	e00c      	b.n	80070f6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	609a      	str	r2, [r3, #8]
}
 80070e2:	e008      	b.n	80070f6 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	609a      	str	r2, [r3, #8]
}
 80070f6:	bf00      	nop
 80070f8:	372c      	adds	r7, #44	@ 0x2c
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	44020c00 	.word	0x44020c00
 8007108:	03d09000 	.word	0x03d09000
 800710c:	46000000 	.word	0x46000000
 8007110:	4a742400 	.word	0x4a742400
 8007114:	4af42400 	.word	0x4af42400

08007118 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8007118:	b480      	push	{r7}
 800711a:	b08b      	sub	sp, #44	@ 0x2c
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007120:	4bae      	ldr	r3, [pc, #696]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007128:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800712a:	4bac      	ldr	r3, [pc, #688]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800712c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007134:	4ba9      	ldr	r3, [pc, #676]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007138:	0a1b      	lsrs	r3, r3, #8
 800713a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800713e:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007140:	4ba6      	ldr	r3, [pc, #664]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007144:	091b      	lsrs	r3, r3, #4
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800714c:	4ba3      	ldr	r3, [pc, #652]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800714e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007150:	08db      	lsrs	r3, r3, #3
 8007152:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	fb02 f303 	mul.w	r3, r2, r3
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007164:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 8126 	beq.w	80073bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	2b03      	cmp	r3, #3
 8007174:	d053      	beq.n	800721e <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	2b03      	cmp	r3, #3
 800717a:	d86f      	bhi.n	800725c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	2b01      	cmp	r3, #1
 8007180:	d003      	beq.n	800718a <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	2b02      	cmp	r3, #2
 8007186:	d02b      	beq.n	80071e0 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8007188:	e068      	b.n	800725c <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800718a:	4b94      	ldr	r3, [pc, #592]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	08db      	lsrs	r3, r3, #3
 8007190:	f003 0303 	and.w	r3, r3, #3
 8007194:	4a92      	ldr	r2, [pc, #584]	@ (80073e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007196:	fa22 f303 	lsr.w	r3, r2, r3
 800719a:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	ee07 3a90 	vmov	s15, r3
 80071a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a6:	69bb      	ldr	r3, [r7, #24]
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	ee07 3a90 	vmov	s15, r3
 80071ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071be:	ed97 6a04 	vldr	s12, [r7, #16]
 80071c2:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80073e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80071c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80071d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071da:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80071de:	e068      	b.n	80072b2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	ee07 3a90 	vmov	s15, r3
 80071e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ea:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80073e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 80071ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	ee07 3a90 	vmov	s15, r3
 80071f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fc:	ed97 6a04 	vldr	s12, [r7, #16]
 8007200:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80073e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007204:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007208:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007210:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007214:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007218:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800721c:	e049      	b.n	80072b2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	ee07 3a90 	vmov	s15, r3
 8007224:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007228:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80073ec <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 800722c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	ee07 3a90 	vmov	s15, r3
 8007236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800723a:	ed97 6a04 	vldr	s12, [r7, #16]
 800723e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80073e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800724a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800724e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007256:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800725a:	e02a      	b.n	80072b2 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800725c:	4b5f      	ldr	r3, [pc, #380]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	08db      	lsrs	r3, r3, #3
 8007262:	f003 0303 	and.w	r3, r3, #3
 8007266:	4a5e      	ldr	r2, [pc, #376]	@ (80073e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007268:	fa22 f303 	lsr.w	r3, r2, r3
 800726c:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	ee07 3a90 	vmov	s15, r3
 8007274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	ee07 3a90 	vmov	s15, r3
 800727e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	ee07 3a90 	vmov	s15, r3
 800728c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007290:	ed97 6a04 	vldr	s12, [r7, #16]
 8007294:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80073e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8007298:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80072a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80072b0:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80072b2:	4b4a      	ldr	r3, [pc, #296]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80072ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072be:	d121      	bne.n	8007304 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80072c0:	4b46      	ldr	r3, [pc, #280]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80072c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d017      	beq.n	80072fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072cc:	4b43      	ldr	r3, [pc, #268]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80072ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072d0:	0a5b      	lsrs	r3, r3, #9
 80072d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d6:	ee07 3a90 	vmov	s15, r3
 80072da:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80072de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80072e2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80072e6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80072ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	e006      	b.n	800730a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	e002      	b.n	800730a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800730a:	4b34      	ldr	r3, [pc, #208]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007312:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007316:	d121      	bne.n	800735c <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007318:	4b30      	ldr	r3, [pc, #192]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800731a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800731c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d017      	beq.n	8007354 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007324:	4b2d      	ldr	r3, [pc, #180]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007328:	0c1b      	lsrs	r3, r3, #16
 800732a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007336:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800733a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800733e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007342:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007346:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800734a:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	605a      	str	r2, [r3, #4]
 8007352:	e006      	b.n	8007362 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	605a      	str	r2, [r3, #4]
 800735a:	e002      	b.n	8007362 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007362:	4b1e      	ldr	r3, [pc, #120]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800736a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800736e:	d121      	bne.n	80073b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007370:	4b1a      	ldr	r3, [pc, #104]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8007372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007374:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d017      	beq.n	80073ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800737c:	4b17      	ldr	r3, [pc, #92]	@ (80073dc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800737e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007380:	0e1b      	lsrs	r3, r3, #24
 8007382:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007386:	ee07 3a90 	vmov	s15, r3
 800738a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800738e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007392:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8007396:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800739a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800739e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a2:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80073aa:	e010      	b.n	80073ce <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	609a      	str	r2, [r3, #8]
}
 80073b2:	e00c      	b.n	80073ce <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	609a      	str	r2, [r3, #8]
}
 80073ba:	e008      	b.n	80073ce <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	609a      	str	r2, [r3, #8]
}
 80073ce:	bf00      	nop
 80073d0:	372c      	adds	r7, #44	@ 0x2c
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	44020c00 	.word	0x44020c00
 80073e0:	03d09000 	.word	0x03d09000
 80073e4:	46000000 	.word	0x46000000
 80073e8:	4a742400 	.word	0x4a742400
 80073ec:	4af42400 	.word	0x4af42400

080073f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80073f0:	b590      	push	{r4, r7, lr}
 80073f2:	b08f      	sub	sp, #60	@ 0x3c
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80073fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073fe:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8007402:	4321      	orrs	r1, r4
 8007404:	d150      	bne.n	80074a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007406:	4b26      	ldr	r3, [pc, #152]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800740c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007410:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007412:	4b23      	ldr	r3, [pc, #140]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007414:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007418:	f003 0302 	and.w	r3, r3, #2
 800741c:	2b02      	cmp	r3, #2
 800741e:	d108      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007426:	d104      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007428:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800742c:	637b      	str	r3, [r7, #52]	@ 0x34
 800742e:	f002 bb2a 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8007432:	4b1b      	ldr	r3, [pc, #108]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007438:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800743c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007440:	d108      	bne.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 8007442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007448:	d104      	bne.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 800744a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800744e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007450:	f002 bb19 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8007454:	4b12      	ldr	r3, [pc, #72]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800745c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007460:	d119      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8007462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007464:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007468:	d115      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800746a:	4b0d      	ldr	r3, [pc, #52]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8007472:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007476:	d30a      	bcc.n	800748e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007478:	4b09      	ldr	r3, [pc, #36]	@ (80074a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	0a1b      	lsrs	r3, r3, #8
 800747e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007482:	4a08      	ldr	r2, [pc, #32]	@ (80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007484:	fbb2 f3f3 	udiv	r3, r2, r3
 8007488:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800748a:	f002 bafc 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007492:	f002 baf8 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	637b      	str	r3, [r7, #52]	@ 0x34
 800749a:	f002 baf4 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800749e:	bf00      	nop
 80074a0:	44020c00 	.word	0x44020c00
 80074a4:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80074a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ac:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 80074b0:	ea50 0104 	orrs.w	r1, r0, r4
 80074b4:	f001 8275 	beq.w	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 80074b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074bc:	2801      	cmp	r0, #1
 80074be:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 80074c2:	f082 82dd 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074ca:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 80074ce:	ea50 0104 	orrs.w	r1, r0, r4
 80074d2:	f001 816c 	beq.w	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 80074d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074da:	2801      	cmp	r0, #1
 80074dc:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 80074e0:	f082 82ce 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80074e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074e8:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 80074ec:	ea50 0104 	orrs.w	r1, r0, r4
 80074f0:	f001 8602 	beq.w	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 80074f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80074f8:	2801      	cmp	r0, #1
 80074fa:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80074fe:	f082 82bf 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007502:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007506:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800750a:	ea50 0104 	orrs.w	r1, r0, r4
 800750e:	f001 854c 	beq.w	8008faa <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8007512:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007516:	2801      	cmp	r0, #1
 8007518:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 800751c:	f082 82b0 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007520:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007524:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8007528:	ea50 0104 	orrs.w	r1, r0, r4
 800752c:	f001 849e 	beq.w	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8007530:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007534:	2801      	cmp	r0, #1
 8007536:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800753a:	f082 82a1 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800753e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007542:	f1a1 0420 	sub.w	r4, r1, #32
 8007546:	ea50 0104 	orrs.w	r1, r0, r4
 800754a:	f001 83e8 	beq.w	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 800754e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007552:	2801      	cmp	r0, #1
 8007554:	f171 0120 	sbcs.w	r1, r1, #32
 8007558:	f082 8292 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800755c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007560:	f1a1 0410 	sub.w	r4, r1, #16
 8007564:	ea50 0104 	orrs.w	r1, r0, r4
 8007568:	f002 8256 	beq.w	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 800756c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007570:	2801      	cmp	r0, #1
 8007572:	f171 0110 	sbcs.w	r1, r1, #16
 8007576:	f082 8283 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800757a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800757e:	f1a1 0408 	sub.w	r4, r1, #8
 8007582:	ea50 0104 	orrs.w	r1, r0, r4
 8007586:	f002 81cc 	beq.w	8009922 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800758a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800758e:	2801      	cmp	r0, #1
 8007590:	f171 0108 	sbcs.w	r1, r1, #8
 8007594:	f082 8274 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007598:	e9d7 0100 	ldrd	r0, r1, [r7]
 800759c:	1f0c      	subs	r4, r1, #4
 800759e:	ea50 0104 	orrs.w	r1, r0, r4
 80075a2:	f001 8648 	beq.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 80075a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075aa:	2801      	cmp	r0, #1
 80075ac:	f171 0104 	sbcs.w	r1, r1, #4
 80075b0:	f082 8266 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075b8:	1e8c      	subs	r4, r1, #2
 80075ba:	ea50 0104 	orrs.w	r1, r0, r4
 80075be:	f002 8143 	beq.w	8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 80075c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075c6:	2801      	cmp	r0, #1
 80075c8:	f171 0102 	sbcs.w	r1, r1, #2
 80075cc:	f082 8258 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075d4:	1e4c      	subs	r4, r1, #1
 80075d6:	ea50 0104 	orrs.w	r1, r0, r4
 80075da:	f002 80ce 	beq.w	800977a <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 80075de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075e2:	2801      	cmp	r0, #1
 80075e4:	f171 0101 	sbcs.w	r1, r1, #1
 80075e8:	f082 824a 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80075ec:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075f0:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80075f4:	4321      	orrs	r1, r4
 80075f6:	f002 8059 	beq.w	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 80075fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80075fe:	4cd9      	ldr	r4, [pc, #868]	@ (8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8007600:	42a0      	cmp	r0, r4
 8007602:	f171 0100 	sbcs.w	r1, r1, #0
 8007606:	f082 823b 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800760a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800760e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8007612:	4321      	orrs	r1, r4
 8007614:	f001 87d9 	beq.w	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8007618:	e9d7 0100 	ldrd	r0, r1, [r7]
 800761c:	4cd2      	ldr	r4, [pc, #840]	@ (8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800761e:	42a0      	cmp	r0, r4
 8007620:	f171 0100 	sbcs.w	r1, r1, #0
 8007624:	f082 822c 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007628:	e9d7 0100 	ldrd	r0, r1, [r7]
 800762c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8007630:	4321      	orrs	r1, r4
 8007632:	f001 8751 	beq.w	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8007636:	e9d7 0100 	ldrd	r0, r1, [r7]
 800763a:	4ccc      	ldr	r4, [pc, #816]	@ (800796c <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800763c:	42a0      	cmp	r0, r4
 800763e:	f171 0100 	sbcs.w	r1, r1, #0
 8007642:	f082 821d 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800764a:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 800764e:	4321      	orrs	r1, r4
 8007650:	f001 869a 	beq.w	8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 8007654:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007658:	4cc5      	ldr	r4, [pc, #788]	@ (8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 800765a:	42a0      	cmp	r0, r4
 800765c:	f171 0100 	sbcs.w	r1, r1, #0
 8007660:	f082 820e 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007664:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007668:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 800766c:	4321      	orrs	r1, r4
 800766e:	f001 8612 	beq.w	8009296 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8007672:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007676:	4cbf      	ldr	r4, [pc, #764]	@ (8007974 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 8007678:	42a0      	cmp	r0, r4
 800767a:	f171 0100 	sbcs.w	r1, r1, #0
 800767e:	f082 81ff 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007686:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800768a:	4321      	orrs	r1, r4
 800768c:	f002 817e 	beq.w	800998c <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8007690:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007694:	4cb8      	ldr	r4, [pc, #736]	@ (8007978 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8007696:	42a0      	cmp	r0, r4
 8007698:	f171 0100 	sbcs.w	r1, r1, #0
 800769c:	f082 81f0 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076a4:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 80076a8:	4321      	orrs	r1, r4
 80076aa:	f000 829e 	beq.w	8007bea <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 80076ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076b2:	4cb2      	ldr	r4, [pc, #712]	@ (800797c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80076b4:	42a0      	cmp	r0, r4
 80076b6:	f171 0100 	sbcs.w	r1, r1, #0
 80076ba:	f082 81e1 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076c2:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 80076c6:	4321      	orrs	r1, r4
 80076c8:	f000 826d 	beq.w	8007ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 80076cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076d0:	4cab      	ldr	r4, [pc, #684]	@ (8007980 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80076d2:	42a0      	cmp	r0, r4
 80076d4:	f171 0100 	sbcs.w	r1, r1, #0
 80076d8:	f082 81d2 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076e0:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 80076e4:	4321      	orrs	r1, r4
 80076e6:	f001 800d 	beq.w	8008704 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 80076ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076ee:	4ca5      	ldr	r4, [pc, #660]	@ (8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80076f0:	42a0      	cmp	r0, r4
 80076f2:	f171 0100 	sbcs.w	r1, r1, #0
 80076f6:	f082 81c3 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80076fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80076fe:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8007702:	4321      	orrs	r1, r4
 8007704:	f000 81d0 	beq.w	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8007708:	e9d7 0100 	ldrd	r0, r1, [r7]
 800770c:	4c9e      	ldr	r4, [pc, #632]	@ (8007988 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800770e:	42a0      	cmp	r0, r4
 8007710:	f171 0100 	sbcs.w	r1, r1, #0
 8007714:	f082 81b4 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800771c:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8007720:	4321      	orrs	r1, r4
 8007722:	f000 8142 	beq.w	80079aa <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8007726:	e9d7 0100 	ldrd	r0, r1, [r7]
 800772a:	4c98      	ldr	r4, [pc, #608]	@ (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800772c:	42a0      	cmp	r0, r4
 800772e:	f171 0100 	sbcs.w	r1, r1, #0
 8007732:	f082 81a5 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800773a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800773e:	4321      	orrs	r1, r4
 8007740:	f001 824e 	beq.w	8008be0 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 8007744:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007748:	4c91      	ldr	r4, [pc, #580]	@ (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 800774a:	42a0      	cmp	r0, r4
 800774c:	f171 0100 	sbcs.w	r1, r1, #0
 8007750:	f082 8196 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007754:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007758:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 800775c:	4321      	orrs	r1, r4
 800775e:	f001 8197 	beq.w	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8007762:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007766:	4c8b      	ldr	r4, [pc, #556]	@ (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007768:	42a0      	cmp	r0, r4
 800776a:	f171 0100 	sbcs.w	r1, r1, #0
 800776e:	f082 8187 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007772:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007776:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 800777a:	4321      	orrs	r1, r4
 800777c:	f001 8154 	beq.w	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8007780:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007784:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8007788:	f171 0100 	sbcs.w	r1, r1, #0
 800778c:	f082 8178 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007794:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8007798:	4321      	orrs	r1, r4
 800779a:	f001 80b7 	beq.w	800890c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 800779e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077a2:	f248 0401 	movw	r4, #32769	@ 0x8001
 80077a6:	42a0      	cmp	r0, r4
 80077a8:	f171 0100 	sbcs.w	r1, r1, #0
 80077ac:	f082 8168 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077b4:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 80077b8:	4321      	orrs	r1, r4
 80077ba:	f001 8064 	beq.w	8008886 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 80077be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077c2:	f244 0401 	movw	r4, #16385	@ 0x4001
 80077c6:	42a0      	cmp	r0, r4
 80077c8:	f171 0100 	sbcs.w	r1, r1, #0
 80077cc:	f082 8158 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077d4:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 80077d8:	4321      	orrs	r1, r4
 80077da:	f001 8011 	beq.w	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 80077de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077e2:	f242 0401 	movw	r4, #8193	@ 0x2001
 80077e6:	42a0      	cmp	r0, r4
 80077e8:	f171 0100 	sbcs.w	r1, r1, #0
 80077ec:	f082 8148 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80077f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80077f4:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 80077f8:	4321      	orrs	r1, r4
 80077fa:	f000 871e 	beq.w	800863a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 80077fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007802:	f241 0401 	movw	r4, #4097	@ 0x1001
 8007806:	42a0      	cmp	r0, r4
 8007808:	f171 0100 	sbcs.w	r1, r1, #0
 800780c:	f082 8138 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007810:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007814:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8007818:	4321      	orrs	r1, r4
 800781a:	f000 86a8 	beq.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800781e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007822:	f640 0401 	movw	r4, #2049	@ 0x801
 8007826:	42a0      	cmp	r0, r4
 8007828:	f171 0100 	sbcs.w	r1, r1, #0
 800782c:	f082 8128 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007830:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007834:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8007838:	4321      	orrs	r1, r4
 800783a:	f000 8632 	beq.w	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800783e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007842:	f240 4401 	movw	r4, #1025	@ 0x401
 8007846:	42a0      	cmp	r0, r4
 8007848:	f171 0100 	sbcs.w	r1, r1, #0
 800784c:	f082 8118 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007850:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007854:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8007858:	4321      	orrs	r1, r4
 800785a:	f000 85b0 	beq.w	80083be <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800785e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007862:	f240 2401 	movw	r4, #513	@ 0x201
 8007866:	42a0      	cmp	r0, r4
 8007868:	f171 0100 	sbcs.w	r1, r1, #0
 800786c:	f082 8108 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007870:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007874:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8007878:	4321      	orrs	r1, r4
 800787a:	f000 8535 	beq.w	80082e8 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 800787e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007882:	f240 1401 	movw	r4, #257	@ 0x101
 8007886:	42a0      	cmp	r0, r4
 8007888:	f171 0100 	sbcs.w	r1, r1, #0
 800788c:	f082 80f8 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8007890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007894:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8007898:	4321      	orrs	r1, r4
 800789a:	f000 84ba 	beq.w	8008212 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 800789e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078a2:	2881      	cmp	r0, #129	@ 0x81
 80078a4:	f171 0100 	sbcs.w	r1, r1, #0
 80078a8:	f082 80ea 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078b0:	2821      	cmp	r0, #33	@ 0x21
 80078b2:	f171 0100 	sbcs.w	r1, r1, #0
 80078b6:	d26f      	bcs.n	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80078b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078bc:	4301      	orrs	r1, r0
 80078be:	f002 80df 	beq.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078c6:	1e42      	subs	r2, r0, #1
 80078c8:	f141 33ff 	adc.w	r3, r1, #4294967295
 80078cc:	2a20      	cmp	r2, #32
 80078ce:	f173 0100 	sbcs.w	r1, r3, #0
 80078d2:	f082 80d5 	bcs.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078d6:	2a1f      	cmp	r2, #31
 80078d8:	f202 80d2 	bhi.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80078dc:	a101      	add	r1, pc, #4	@ (adr r1, 80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 80078de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80078e2:	bf00      	nop
 80078e4:	08007c45 	.word	0x08007c45
 80078e8:	08007d11 	.word	0x08007d11
 80078ec:	08009a81 	.word	0x08009a81
 80078f0:	08007dd1 	.word	0x08007dd1
 80078f4:	08009a81 	.word	0x08009a81
 80078f8:	08009a81 	.word	0x08009a81
 80078fc:	08009a81 	.word	0x08009a81
 8007900:	08007ea1 	.word	0x08007ea1
 8007904:	08009a81 	.word	0x08009a81
 8007908:	08009a81 	.word	0x08009a81
 800790c:	08009a81 	.word	0x08009a81
 8007910:	08009a81 	.word	0x08009a81
 8007914:	08009a81 	.word	0x08009a81
 8007918:	08009a81 	.word	0x08009a81
 800791c:	08009a81 	.word	0x08009a81
 8007920:	08007f83 	.word	0x08007f83
 8007924:	08009a81 	.word	0x08009a81
 8007928:	08009a81 	.word	0x08009a81
 800792c:	08009a81 	.word	0x08009a81
 8007930:	08009a81 	.word	0x08009a81
 8007934:	08009a81 	.word	0x08009a81
 8007938:	08009a81 	.word	0x08009a81
 800793c:	08009a81 	.word	0x08009a81
 8007940:	08009a81 	.word	0x08009a81
 8007944:	08009a81 	.word	0x08009a81
 8007948:	08009a81 	.word	0x08009a81
 800794c:	08009a81 	.word	0x08009a81
 8007950:	08009a81 	.word	0x08009a81
 8007954:	08009a81 	.word	0x08009a81
 8007958:	08009a81 	.word	0x08009a81
 800795c:	08009a81 	.word	0x08009a81
 8007960:	08008059 	.word	0x08008059
 8007964:	80000001 	.word	0x80000001
 8007968:	40000001 	.word	0x40000001
 800796c:	20000001 	.word	0x20000001
 8007970:	10000001 	.word	0x10000001
 8007974:	08000001 	.word	0x08000001
 8007978:	04000001 	.word	0x04000001
 800797c:	00800001 	.word	0x00800001
 8007980:	00400001 	.word	0x00400001
 8007984:	00200001 	.word	0x00200001
 8007988:	00100001 	.word	0x00100001
 800798c:	00080001 	.word	0x00080001
 8007990:	00040001 	.word	0x00040001
 8007994:	00020001 	.word	0x00020001
 8007998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800799c:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80079a0:	430b      	orrs	r3, r1
 80079a2:	f000 83c4 	beq.w	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 80079a6:	f002 b86b 	b.w	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80079aa:	4ba1      	ldr	r3, [pc, #644]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80079ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80079b0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80079b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80079b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079bc:	d036      	beq.n	8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 80079be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079c4:	d86b      	bhi.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80079c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079cc:	d02b      	beq.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 80079ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80079d4:	d863      	bhi.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80079d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079dc:	d01b      	beq.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80079de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079e4:	d85b      	bhi.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d004      	beq.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 80079ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079f2:	d008      	beq.n	8007a06 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 80079f4:	e053      	b.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079f6:	f107 0320 	add.w	r3, r7, #32
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff f8b4 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a04:	e04e      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a06:	f107 0314 	add.w	r3, r7, #20
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff fa18 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a14:	e046      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a16:	f107 0308 	add.w	r3, r7, #8
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f7ff fb7c 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a24:	e03e      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007a26:	4b83      	ldr	r3, [pc, #524]	@ (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007a28:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007a2a:	e03b      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a2c:	4b80      	ldr	r3, [pc, #512]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007a32:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007a36:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a38:	4b7d      	ldr	r3, [pc, #500]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0302 	and.w	r3, r3, #2
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d10c      	bne.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8007a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d109      	bne.n	8007a5e <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a4a:	4b79      	ldr	r3, [pc, #484]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	08db      	lsrs	r3, r3, #3
 8007a50:	f003 0303 	and.w	r3, r3, #3
 8007a54:	4a78      	ldr	r2, [pc, #480]	@ (8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007a56:	fa22 f303 	lsr.w	r3, r2, r3
 8007a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a5c:	e01e      	b.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a5e:	4b74      	ldr	r3, [pc, #464]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a6a:	d106      	bne.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8007a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a72:	d102      	bne.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007a74:	4b71      	ldr	r3, [pc, #452]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a78:	e010      	b.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007a7a:	4b6d      	ldr	r3, [pc, #436]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a86:	d106      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8007a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a8e:	d102      	bne.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007a90:	4b6b      	ldr	r3, [pc, #428]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007a92:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a94:	e002      	b.n	8007a9c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007a9a:	e003      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8007a9c:	e002      	b.n	8007aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007aa2:	bf00      	nop
          }
        }
        break;
 8007aa4:	f001 bfef 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007aa8:	4b61      	ldr	r3, [pc, #388]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007aaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007aae:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8007ab2:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ab6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007aba:	d036      	beq.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8007abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007abe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007ac2:	d86b      	bhi.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ac6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007aca:	d02b      	beq.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8007acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ace:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007ad2:	d863      	bhi.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ad6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ada:	d01b      	beq.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8007adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007ae2:	d85b      	bhi.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8007ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d004      	beq.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007af0:	d008      	beq.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007af2:	e053      	b.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007af4:	f107 0320 	add.w	r3, r7, #32
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7ff f835 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b00:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b02:	e04e      	b.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b04:	f107 0314 	add.w	r3, r7, #20
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f7ff f999 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b12:	e046      	b.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b14:	f107 0308 	add.w	r3, r7, #8
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff fafd 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b22:	e03e      	b.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8007b24:	4b43      	ldr	r3, [pc, #268]	@ (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007b26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007b28:	e03b      	b.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007b2a:	4b41      	ldr	r3, [pc, #260]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007b2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007b30:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007b34:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007b36:	4b3e      	ldr	r3, [pc, #248]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d10c      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8007b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d109      	bne.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007b48:	4b39      	ldr	r3, [pc, #228]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	08db      	lsrs	r3, r3, #3
 8007b4e:	f003 0303 	and.w	r3, r3, #3
 8007b52:	4a39      	ldr	r2, [pc, #228]	@ (8007c38 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8007b54:	fa22 f303 	lsr.w	r3, r2, r3
 8007b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b5a:	e01e      	b.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007b5c:	4b34      	ldr	r3, [pc, #208]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b68:	d106      	bne.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8007b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b70:	d102      	bne.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8007b72:	4b32      	ldr	r3, [pc, #200]	@ (8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8007b74:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b76:	e010      	b.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007b78:	4b2d      	ldr	r3, [pc, #180]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b84:	d106      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8007b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b8c:	d102      	bne.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8007b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8007c40 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8007b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b92:	e002      	b.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8007b98:	e003      	b.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8007b9a:	e002      	b.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8007ba0:	bf00      	nop
          }
        }
        break;
 8007ba2:	f001 bf70 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8007ba6:	4b22      	ldr	r3, [pc, #136]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ba8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb0:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d108      	bne.n	8007bca <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bb8:	f107 0320 	add.w	r3, r7, #32
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f7fe ffd3 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007bc6:	f001 bf5e 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8007bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bcc:	2b40      	cmp	r3, #64	@ 0x40
 8007bce:	d108      	bne.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007bd0:	f107 0314 	add.w	r3, r7, #20
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f7ff f933 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007bde:	f001 bf52 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007be6:	f001 bf4e 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007bea:	4b11      	ldr	r3, [pc, #68]	@ (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007bec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf4:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d108      	bne.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007bfc:	f107 0320 	add.w	r3, r7, #32
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe ffb1 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c08:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007c0a:	f001 bf3c 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8007c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c10:	2b80      	cmp	r3, #128	@ 0x80
 8007c12:	d108      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c14:	f107 0314 	add.w	r3, r7, #20
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7ff f911 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c22:	f001 bf30 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007c2a:	f001 bf2c 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007c2e:	bf00      	nop
 8007c30:	44020c00 	.word	0x44020c00
 8007c34:	00bb8000 	.word	0x00bb8000
 8007c38:	03d09000 	.word	0x03d09000
 8007c3c:	003d0900 	.word	0x003d0900
 8007c40:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007c44:	4b9d      	ldr	r3, [pc, #628]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d104      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8007c56:	f7fc ffd1 	bl	8004bfc <HAL_RCC_GetPCLK2Freq>
 8007c5a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8007c5c:	f001 bf13 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007c60:	4b96      	ldr	r3, [pc, #600]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c6c:	d10a      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d107      	bne.n	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c74:	f107 0314 	add.w	r3, r7, #20
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff f8e1 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c82:	e043      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007c84:	4b8d      	ldr	r3, [pc, #564]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007c90:	d10a      	bne.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8007c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c94:	2b02      	cmp	r3, #2
 8007c96:	d107      	bne.n	8007ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c98:	f107 0308 	add.w	r3, r7, #8
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fa3b 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ca6:	e031      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007ca8:	4b84      	ldr	r3, [pc, #528]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d10c      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d109      	bne.n	8007cce <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007cba:	4b80      	ldr	r3, [pc, #512]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	08db      	lsrs	r3, r3, #3
 8007cc0:	f003 0303 	and.w	r3, r3, #3
 8007cc4:	4a7e      	ldr	r2, [pc, #504]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cca:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ccc:	e01e      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007cce:	4b7b      	ldr	r3, [pc, #492]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007cd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cda:	d105      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cde:	2b04      	cmp	r3, #4
 8007ce0:	d102      	bne.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8007ce2:	4b78      	ldr	r3, [pc, #480]	@ (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007ce6:	e011      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007ce8:	4b74      	ldr	r3, [pc, #464]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007cea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d106      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8007cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf8:	2b05      	cmp	r3, #5
 8007cfa:	d103      	bne.n	8007d04 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8007cfc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d02:	e003      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d08:	f001 bebd 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007d0c:	f001 bebb 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007d10:	4b6a      	ldr	r3, [pc, #424]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007d16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d1a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d104      	bne.n	8007d2c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007d22:	f7fc ff55 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8007d26:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8007d28:	f001 bead 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007d2c:	4b63      	ldr	r3, [pc, #396]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d34:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007d38:	d10a      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3c:	2b08      	cmp	r3, #8
 8007d3e:	d107      	bne.n	8007d50 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d40:	f107 0314 	add.w	r3, r7, #20
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff f87b 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d4e:	e03d      	b.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d52:	2b10      	cmp	r3, #16
 8007d54:	d108      	bne.n	8007d68 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d56:	f107 0308 	add.w	r3, r7, #8
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff f9dc 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007d64:	f001 be8f 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007d68:	4b54      	ldr	r3, [pc, #336]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d10c      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8007d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d76:	2b18      	cmp	r3, #24
 8007d78:	d109      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007d7a:	4b50      	ldr	r3, [pc, #320]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	08db      	lsrs	r3, r3, #3
 8007d80:	f003 0303 	and.w	r3, r3, #3
 8007d84:	4a4e      	ldr	r2, [pc, #312]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007d86:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d8c:	e01e      	b.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8007d8e:	4b4b      	ldr	r3, [pc, #300]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d9a:	d105      	bne.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d102      	bne.n	8007da8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8007da2:	4b48      	ldr	r3, [pc, #288]	@ (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da6:	e011      	b.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007da8:	4b44      	ldr	r3, [pc, #272]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007daa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d106      	bne.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8007db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db8:	2b28      	cmp	r3, #40	@ 0x28
 8007dba:	d103      	bne.n	8007dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8007dbc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dc2:	e003      	b.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007dc8:	f001 be5d 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007dcc:	f001 be5b 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007dd2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007dd6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8007dda:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d104      	bne.n	8007dec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007de2:	f7fc fef5 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8007de6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8007de8:	f001 be4d 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007dec:	4b33      	ldr	r3, [pc, #204]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007df4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007df8:	d10a      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8007dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dfc:	2b40      	cmp	r3, #64	@ 0x40
 8007dfe:	d107      	bne.n	8007e10 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e00:	f107 0314 	add.w	r3, r7, #20
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff f81b 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e0e:	e045      	b.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007e10:	4b2a      	ldr	r3, [pc, #168]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e1c:	d10a      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e20:	2b80      	cmp	r3, #128	@ 0x80
 8007e22:	d107      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e24:	f107 0308 	add.w	r3, r7, #8
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff f975 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e32:	e033      	b.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007e34:	4b21      	ldr	r3, [pc, #132]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0302 	and.w	r3, r3, #2
 8007e3c:	2b02      	cmp	r3, #2
 8007e3e:	d10c      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8007e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e42:	2bc0      	cmp	r3, #192	@ 0xc0
 8007e44:	d109      	bne.n	8007e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e46:	4b1d      	ldr	r3, [pc, #116]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	08db      	lsrs	r3, r3, #3
 8007e4c:	f003 0303 	and.w	r3, r3, #3
 8007e50:	4a1b      	ldr	r2, [pc, #108]	@ (8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8007e52:	fa22 f303 	lsr.w	r3, r2, r3
 8007e56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e58:	e020      	b.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007e5a:	4b18      	ldr	r3, [pc, #96]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e66:	d106      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8007e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e6e:	d102      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8007e70:	4b14      	ldr	r3, [pc, #80]	@ (8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8007e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e74:	e012      	b.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007e76:	4b11      	ldr	r3, [pc, #68]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007e78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007e7c:	f003 0302 	and.w	r3, r3, #2
 8007e80:	2b02      	cmp	r3, #2
 8007e82:	d107      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8007e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e86:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8007e8a:	d103      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8007e8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e90:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e92:	e003      	b.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007e98:	f001 bdf5 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007e9c:	f001 bdf3 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007ea0:	4b06      	ldr	r3, [pc, #24]	@ (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8007ea2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007ea6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8007eaa:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d10a      	bne.n	8007ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007eb2:	f7fc fe8d 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8007eb6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8007eb8:	f001 bde5 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007ebc:	44020c00 	.word	0x44020c00
 8007ec0:	03d09000 	.word	0x03d09000
 8007ec4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007ec8:	4ba0      	ldr	r3, [pc, #640]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ed0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ed4:	d10b      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007edc:	d107      	bne.n	8007eee <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ede:	f107 0314 	add.w	r3, r7, #20
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fe ffac 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007eec:	e047      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007eee:	4b97      	ldr	r3, [pc, #604]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007ef6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007efa:	d10b      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f02:	d107      	bne.n	8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f04:	f107 0308 	add.w	r3, r7, #8
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7ff f905 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f12:	e034      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007f14:	4b8d      	ldr	r3, [pc, #564]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0302 	and.w	r3, r3, #2
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d10d      	bne.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8007f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f22:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007f26:	d109      	bne.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f28:	4b88      	ldr	r3, [pc, #544]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	08db      	lsrs	r3, r3, #3
 8007f2e:	f003 0303 	and.w	r3, r3, #3
 8007f32:	4a87      	ldr	r2, [pc, #540]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8007f34:	fa22 f303 	lsr.w	r3, r2, r3
 8007f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f3a:	e020      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007f3c:	4b83      	ldr	r3, [pc, #524]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f48:	d106      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f50:	d102      	bne.n	8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8007f52:	4b80      	ldr	r3, [pc, #512]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8007f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f56:	e012      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007f58:	4b7c      	ldr	r3, [pc, #496]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007f5e:	f003 0302 	and.w	r3, r3, #2
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d107      	bne.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8007f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f68:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007f6c:	d103      	bne.n	8007f76 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8007f6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f74:	e003      	b.n	8007f7e <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8007f76:	2300      	movs	r3, #0
 8007f78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007f7a:	f001 bd84 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8007f7e:	f001 bd82 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007f82:	4b72      	ldr	r3, [pc, #456]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007f84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007f88:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8007f8c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d104      	bne.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8007f94:	f7fc fe1c 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8007f98:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8007f9a:	f001 bd74 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007f9e:	4b6b      	ldr	r3, [pc, #428]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007fa6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007faa:	d10b      	bne.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fb2:	d107      	bne.n	8007fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fb4:	f107 0314 	add.w	r3, r7, #20
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fe ff41 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007fbe:	69bb      	ldr	r3, [r7, #24]
 8007fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc2:	e047      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007fc4:	4b61      	ldr	r3, [pc, #388]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007fcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007fd0:	d10b      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fd8:	d107      	bne.n	8007fea <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fda:	f107 0308 	add.w	r3, r7, #8
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7ff f89a 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fe8:	e034      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007fea:	4b58      	ldr	r3, [pc, #352]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d10d      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ffc:	d109      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ffe:	4b53      	ldr	r3, [pc, #332]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	08db      	lsrs	r3, r3, #3
 8008004:	f003 0303 	and.w	r3, r3, #3
 8008008:	4a51      	ldr	r2, [pc, #324]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 800800a:	fa22 f303 	lsr.w	r3, r2, r3
 800800e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008010:	e020      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008012:	4b4e      	ldr	r3, [pc, #312]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800801a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800801e:	d106      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8008020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008022:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008026:	d102      	bne.n	800802e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8008028:	4b4a      	ldr	r3, [pc, #296]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 800802a:	637b      	str	r3, [r7, #52]	@ 0x34
 800802c:	e012      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800802e:	4b47      	ldr	r3, [pc, #284]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b02      	cmp	r3, #2
 800803a:	d107      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 800803c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800803e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008042:	d103      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8008044:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008048:	637b      	str	r3, [r7, #52]	@ 0x34
 800804a:	e003      	b.n	8008054 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008050:	f001 bd19 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008054:	f001 bd17 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008058:	4b3c      	ldr	r3, [pc, #240]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800805a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800805e:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8008062:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008066:	2b00      	cmp	r3, #0
 8008068:	d104      	bne.n	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800806a:	f7fc fdb1 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 800806e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8008070:	f001 bd09 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008074:	4b35      	ldr	r3, [pc, #212]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800807c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008080:	d10b      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8008082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008088:	d107      	bne.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800808a:	f107 0314 	add.w	r3, r7, #20
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe fed6 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	637b      	str	r3, [r7, #52]	@ 0x34
 8008098:	e047      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800809a:	4b2c      	ldr	r3, [pc, #176]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80080a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80080a6:	d10b      	bne.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 80080a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080ae:	d107      	bne.n	80080c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080b0:	f107 0308 	add.w	r3, r7, #8
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff f82f 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80080be:	e034      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80080c0:	4b22      	ldr	r3, [pc, #136]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0302 	and.w	r3, r3, #2
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d10d      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 80080cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ce:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80080d2:	d109      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080d4:	4b1d      	ldr	r3, [pc, #116]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	08db      	lsrs	r3, r3, #3
 80080da:	f003 0303 	and.w	r3, r3, #3
 80080de:	4a1c      	ldr	r2, [pc, #112]	@ (8008150 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80080e0:	fa22 f303 	lsr.w	r3, r2, r3
 80080e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80080e6:	e020      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80080e8:	4b18      	ldr	r3, [pc, #96]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080f4:	d106      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 80080f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80080fc:	d102      	bne.n	8008104 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80080fe:	4b15      	ldr	r3, [pc, #84]	@ (8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8008100:	637b      	str	r3, [r7, #52]	@ 0x34
 8008102:	e012      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008104:	4b11      	ldr	r3, [pc, #68]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008106:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800810a:	f003 0302 	and.w	r3, r3, #2
 800810e:	2b02      	cmp	r3, #2
 8008110:	d107      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8008112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008114:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008118:	d103      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 800811a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800811e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008120:	e003      	b.n	800812a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8008122:	2300      	movs	r3, #0
 8008124:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008126:	f001 bcae 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800812a:	f001 bcac 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 800812e:	4b07      	ldr	r3, [pc, #28]	@ (800814c <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8008130:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008134:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8008138:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10b      	bne.n	8008158 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008140:	f7fc fd46 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8008144:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8008146:	f001 bc9e 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800814a:	bf00      	nop
 800814c:	44020c00 	.word	0x44020c00
 8008150:	03d09000 	.word	0x03d09000
 8008154:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008158:	4ba0      	ldr	r3, [pc, #640]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008160:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008164:	d10b      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8008166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008168:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800816c:	d107      	bne.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800816e:	f107 0314 	add.w	r3, r7, #20
 8008172:	4618      	mov	r0, r3
 8008174:	f7fe fe64 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	637b      	str	r3, [r7, #52]	@ 0x34
 800817c:	e047      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 800817e:	4b97      	ldr	r3, [pc, #604]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008186:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800818a:	d10b      	bne.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 800818c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008192:	d107      	bne.n	80081a4 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008194:	f107 0308 	add.w	r3, r7, #8
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe ffbd 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80081a2:	e034      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 80081a4:	4b8d      	ldr	r3, [pc, #564]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0302 	and.w	r3, r3, #2
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d10d      	bne.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80081b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80081b6:	d109      	bne.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081b8:	4b88      	ldr	r3, [pc, #544]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	08db      	lsrs	r3, r3, #3
 80081be:	f003 0303 	and.w	r3, r3, #3
 80081c2:	4a87      	ldr	r2, [pc, #540]	@ (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 80081c4:	fa22 f303 	lsr.w	r3, r2, r3
 80081c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ca:	e020      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 80081cc:	4b83      	ldr	r3, [pc, #524]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d8:	d106      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 80081da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081e0:	d102      	bne.n	80081e8 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 80081e2:	4b80      	ldr	r3, [pc, #512]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80081e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80081e6:	e012      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 80081e8:	4b7c      	ldr	r3, [pc, #496]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80081ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d107      	bne.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 80081f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081f8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80081fc:	d103      	bne.n	8008206 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80081fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008202:	637b      	str	r3, [r7, #52]	@ 0x34
 8008204:	e003      	b.n	800820e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800820a:	f001 bc3c 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800820e:	f001 bc3a 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008212:	4b72      	ldr	r3, [pc, #456]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008214:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008218:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800821c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800821e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008224:	f7fc fcd4 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8008228:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800822a:	f001 bc2c 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800822e:	4b6b      	ldr	r3, [pc, #428]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008236:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800823a:	d10b      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800823c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800823e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008242:	d107      	bne.n	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008244:	f107 0314 	add.w	r3, r7, #20
 8008248:	4618      	mov	r0, r3
 800824a:	f7fe fdf9 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	637b      	str	r3, [r7, #52]	@ 0x34
 8008252:	e047      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008254:	4b61      	ldr	r3, [pc, #388]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800825c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008260:	d10b      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8008262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008264:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008268:	d107      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800826a:	f107 0308 	add.w	r3, r7, #8
 800826e:	4618      	mov	r0, r3
 8008270:	f7fe ff52 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	637b      	str	r3, [r7, #52]	@ 0x34
 8008278:	e034      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800827a:	4b58      	ldr	r3, [pc, #352]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b02      	cmp	r3, #2
 8008284:	d10d      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 8008286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008288:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800828c:	d109      	bne.n	80082a2 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800828e:	4b53      	ldr	r3, [pc, #332]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	08db      	lsrs	r3, r3, #3
 8008294:	f003 0303 	and.w	r3, r3, #3
 8008298:	4a51      	ldr	r2, [pc, #324]	@ (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800829a:	fa22 f303 	lsr.w	r3, r2, r3
 800829e:	637b      	str	r3, [r7, #52]	@ 0x34
 80082a0:	e020      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80082a2:	4b4e      	ldr	r3, [pc, #312]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082ae:	d106      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 80082b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80082b6:	d102      	bne.n	80082be <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 80082b8:	4b4a      	ldr	r3, [pc, #296]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 80082ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80082bc:	e012      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80082be:	4b47      	ldr	r3, [pc, #284]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80082c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80082c4:	f003 0302 	and.w	r3, r3, #2
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	d107      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 80082cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082ce:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80082d2:	d103      	bne.n	80082dc <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 80082d4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80082da:	e003      	b.n	80082e4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 80082dc:	2300      	movs	r3, #0
 80082de:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80082e0:	f001 bbd1 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80082e4:	f001 bbcf 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80082e8:	4b3c      	ldr	r3, [pc, #240]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80082ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80082ee:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80082f2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d104      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80082fa:	f7fc fc69 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 80082fe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 8008300:	f001 bbc1 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008304:	4b35      	ldr	r3, [pc, #212]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800830c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008310:	d10b      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 8008312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008318:	d107      	bne.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800831a:	f107 0314 	add.w	r3, r7, #20
 800831e:	4618      	mov	r0, r3
 8008320:	f7fe fd8e 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	637b      	str	r3, [r7, #52]	@ 0x34
 8008328:	e047      	b.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800832a:	4b2c      	ldr	r3, [pc, #176]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008336:	d10b      	bne.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800833a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800833e:	d107      	bne.n	8008350 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008340:	f107 0308 	add.w	r3, r7, #8
 8008344:	4618      	mov	r0, r3
 8008346:	f7fe fee7 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	637b      	str	r3, [r7, #52]	@ 0x34
 800834e:	e034      	b.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008350:	4b22      	ldr	r3, [pc, #136]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0302 	and.w	r3, r3, #2
 8008358:	2b02      	cmp	r3, #2
 800835a:	d10d      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800835c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800835e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008362:	d109      	bne.n	8008378 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008364:	4b1d      	ldr	r3, [pc, #116]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	08db      	lsrs	r3, r3, #3
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	4a1c      	ldr	r2, [pc, #112]	@ (80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8008370:	fa22 f303 	lsr.w	r3, r2, r3
 8008374:	637b      	str	r3, [r7, #52]	@ 0x34
 8008376:	e020      	b.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008378:	4b18      	ldr	r3, [pc, #96]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008384:	d106      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 8008386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008388:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800838c:	d102      	bne.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800838e:	4b15      	ldr	r3, [pc, #84]	@ (80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8008390:	637b      	str	r3, [r7, #52]	@ 0x34
 8008392:	e012      	b.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008394:	4b11      	ldr	r3, [pc, #68]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8008396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800839a:	f003 0302 	and.w	r3, r3, #2
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d107      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 80083a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a4:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80083a8:	d103      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 80083aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80083b0:	e003      	b.n	80083ba <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80083b6:	f001 bb66 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083ba:	f001 bb64 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80083be:	4b07      	ldr	r3, [pc, #28]	@ (80083dc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80083c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80083c4:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 80083c8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80083ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10b      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80083d0:	f7fc fbfe 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 80083d4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 80083d6:	f001 bb56 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80083da:	bf00      	nop
 80083dc:	44020c00 	.word	0x44020c00
 80083e0:	03d09000 	.word	0x03d09000
 80083e4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80083e8:	4ba1      	ldr	r3, [pc, #644]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083f4:	d10b      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 80083f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80083fc:	d107      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083fe:	f107 0314 	add.w	r3, r7, #20
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fd1c 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	637b      	str	r3, [r7, #52]	@ 0x34
 800840c:	e047      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800840e:	4b98      	ldr	r3, [pc, #608]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800841a:	d10b      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800841c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008422:	d107      	bne.n	8008434 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008424:	f107 0308 	add.w	r3, r7, #8
 8008428:	4618      	mov	r0, r3
 800842a:	f7fe fe75 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	637b      	str	r3, [r7, #52]	@ 0x34
 8008432:	e034      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8008434:	4b8e      	ldr	r3, [pc, #568]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b02      	cmp	r3, #2
 800843e:	d10d      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 8008440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008442:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008446:	d109      	bne.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008448:	4b89      	ldr	r3, [pc, #548]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	08db      	lsrs	r3, r3, #3
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	4a88      	ldr	r2, [pc, #544]	@ (8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008454:	fa22 f303 	lsr.w	r3, r2, r3
 8008458:	637b      	str	r3, [r7, #52]	@ 0x34
 800845a:	e020      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800845c:	4b84      	ldr	r3, [pc, #528]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008468:	d106      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008470:	d102      	bne.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8008472:	4b81      	ldr	r3, [pc, #516]	@ (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008474:	637b      	str	r3, [r7, #52]	@ 0x34
 8008476:	e012      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008478:	4b7d      	ldr	r3, [pc, #500]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800847a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b02      	cmp	r3, #2
 8008484:	d107      	bne.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8008486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008488:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800848c:	d103      	bne.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800848e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008492:	637b      	str	r3, [r7, #52]	@ 0x34
 8008494:	e003      	b.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 8008496:	2300      	movs	r3, #0
 8008498:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800849a:	f001 baf4 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800849e:	f001 baf2 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80084a2:	4b73      	ldr	r3, [pc, #460]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80084a8:	f003 0307 	and.w	r3, r3, #7
 80084ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80084ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d104      	bne.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80084b4:	f7fc fb8c 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 80084b8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 80084ba:	f001 bae4 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80084be:	4b6c      	ldr	r3, [pc, #432]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80084ca:	d10a      	bne.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 80084cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d107      	bne.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084d2:	f107 0314 	add.w	r3, r7, #20
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe fcb2 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	637b      	str	r3, [r7, #52]	@ 0x34
 80084e0:	e043      	b.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80084e2:	4b63      	ldr	r3, [pc, #396]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80084ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80084ee:	d10a      	bne.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 80084f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d107      	bne.n	8008506 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084f6:	f107 0308 	add.w	r3, r7, #8
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe fe0c 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	637b      	str	r3, [r7, #52]	@ 0x34
 8008504:	e031      	b.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8008506:	4b5a      	ldr	r3, [pc, #360]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0302 	and.w	r3, r3, #2
 800850e:	2b02      	cmp	r3, #2
 8008510:	d10c      	bne.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 8008512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008514:	2b03      	cmp	r3, #3
 8008516:	d109      	bne.n	800852c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008518:	4b55      	ldr	r3, [pc, #340]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	08db      	lsrs	r3, r3, #3
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	4a54      	ldr	r2, [pc, #336]	@ (8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8008524:	fa22 f303 	lsr.w	r3, r2, r3
 8008528:	637b      	str	r3, [r7, #52]	@ 0x34
 800852a:	e01e      	b.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800852c:	4b50      	ldr	r3, [pc, #320]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008534:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008538:	d105      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800853a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800853c:	2b04      	cmp	r3, #4
 800853e:	d102      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 8008540:	4b4d      	ldr	r3, [pc, #308]	@ (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8008542:	637b      	str	r3, [r7, #52]	@ 0x34
 8008544:	e011      	b.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8008546:	4b4a      	ldr	r3, [pc, #296]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b02      	cmp	r3, #2
 8008552:	d106      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 8008554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008556:	2b05      	cmp	r3, #5
 8008558:	d103      	bne.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800855a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800855e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008560:	e003      	b.n	800856a <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8008562:	2300      	movs	r3, #0
 8008564:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008566:	f001 ba8e 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800856a:	f001 ba8c 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800856e:	4b40      	ldr	r3, [pc, #256]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008570:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008574:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008578:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800857a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857c:	2b00      	cmp	r3, #0
 800857e:	d104      	bne.n	800858a <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008580:	f7fc fb26 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8008584:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 8008586:	f001 ba7e 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800858a:	4b39      	ldr	r3, [pc, #228]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008592:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008596:	d10a      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 8008598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859a:	2b10      	cmp	r3, #16
 800859c:	d107      	bne.n	80085ae <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800859e:	f107 0314 	add.w	r3, r7, #20
 80085a2:	4618      	mov	r0, r3
 80085a4:	f7fe fc4c 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80085ac:	e043      	b.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80085ae:	4b30      	ldr	r3, [pc, #192]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ba:	d10a      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 80085bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085be:	2b20      	cmp	r3, #32
 80085c0:	d107      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085c2:	f107 0308 	add.w	r3, r7, #8
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe fda6 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80085d0:	e031      	b.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80085d2:	4b27      	ldr	r3, [pc, #156]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0302 	and.w	r3, r3, #2
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d10c      	bne.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 80085de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085e0:	2b30      	cmp	r3, #48	@ 0x30
 80085e2:	d109      	bne.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085e4:	4b22      	ldr	r3, [pc, #136]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	08db      	lsrs	r3, r3, #3
 80085ea:	f003 0303 	and.w	r3, r3, #3
 80085ee:	4a21      	ldr	r2, [pc, #132]	@ (8008674 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80085f0:	fa22 f303 	lsr.w	r3, r2, r3
 80085f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80085f6:	e01e      	b.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80085f8:	4b1d      	ldr	r3, [pc, #116]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008604:	d105      	bne.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8008606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008608:	2b40      	cmp	r3, #64	@ 0x40
 800860a:	d102      	bne.n	8008612 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800860c:	4b1a      	ldr	r3, [pc, #104]	@ (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800860e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008610:	e011      	b.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008612:	4b17      	ldr	r3, [pc, #92]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8008614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008618:	f003 0302 	and.w	r3, r3, #2
 800861c:	2b02      	cmp	r3, #2
 800861e:	d106      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 8008620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008622:	2b50      	cmp	r3, #80	@ 0x50
 8008624:	d103      	bne.n	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 8008626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800862a:	637b      	str	r3, [r7, #52]	@ 0x34
 800862c:	e003      	b.n	8008636 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800862e:	2300      	movs	r3, #0
 8008630:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008632:	f001 ba28 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008636:	f001 ba26 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800863a:	4b0d      	ldr	r3, [pc, #52]	@ (8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800863c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008640:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008644:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008648:	2b00      	cmp	r3, #0
 800864a:	d104      	bne.n	8008656 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800864c:	f7fc faec 	bl	8004c28 <HAL_RCC_GetPCLK3Freq>
 8008650:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008652:	f001 ba18 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008658:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800865c:	d10e      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800865e:	f107 0314 	add.w	r3, r7, #20
 8008662:	4618      	mov	r0, r3
 8008664:	f7fe fbec 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800866c:	f001 ba0b 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008670:	44020c00 	.word	0x44020c00
 8008674:	03d09000 	.word	0x03d09000
 8008678:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800867c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008682:	d108      	bne.n	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008684:	f107 0308 	add.w	r3, r7, #8
 8008688:	4618      	mov	r0, r3
 800868a:	f7fe fd45 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008692:	f001 b9f8 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008696:	4ba4      	ldr	r3, [pc, #656]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d10d      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 80086a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80086a8:	d109      	bne.n	80086be <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80086aa:	4b9f      	ldr	r3, [pc, #636]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	08db      	lsrs	r3, r3, #3
 80086b0:	f003 0303 	and.w	r3, r3, #3
 80086b4:	4a9d      	ldr	r2, [pc, #628]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80086b6:	fa22 f303 	lsr.w	r3, r2, r3
 80086ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80086bc:	e020      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80086be:	4b9a      	ldr	r3, [pc, #616]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086ca:	d106      	bne.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 80086cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80086d2:	d102      	bne.n	80086da <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 80086d4:	4b96      	ldr	r3, [pc, #600]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d8:	e012      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80086da:	4b93      	ldr	r3, [pc, #588]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80086dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086e0:	f003 0302 	and.w	r3, r3, #2
 80086e4:	2b02      	cmp	r3, #2
 80086e6:	d107      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 80086e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ea:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80086ee:	d103      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 80086f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f6:	e003      	b.n	8008700 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 80086f8:	2300      	movs	r3, #0
 80086fa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80086fc:	f001 b9c3 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008700:	f001 b9c1 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008704:	4b88      	ldr	r3, [pc, #544]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008706:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800870a:	f003 0307 	and.w	r3, r3, #7
 800870e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008712:	2b00      	cmp	r3, #0
 8008714:	d104      	bne.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 8008716:	f7fc fa3f 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 800871a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800871c:	f001 b9b3 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008722:	2b01      	cmp	r3, #1
 8008724:	d104      	bne.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 8008726:	f7fc f90b 	bl	8004940 <HAL_RCC_GetSysClockFreq>
 800872a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800872c:	f001 b9ab 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008732:	2b02      	cmp	r3, #2
 8008734:	d108      	bne.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008736:	f107 0314 	add.w	r3, r7, #20
 800873a:	4618      	mov	r0, r3
 800873c:	f7fe fb80 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008744:	f001 b99f 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008748:	4b77      	ldr	r3, [pc, #476]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008750:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008754:	d105      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 8008756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008758:	2b03      	cmp	r3, #3
 800875a:	d102      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800875c:	4b75      	ldr	r3, [pc, #468]	@ (8008934 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800875e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008760:	e023      	b.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008762:	4b71      	ldr	r3, [pc, #452]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f003 0302 	and.w	r3, r3, #2
 800876a:	2b02      	cmp	r3, #2
 800876c:	d10c      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800876e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008770:	2b04      	cmp	r3, #4
 8008772:	d109      	bne.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008774:	4b6c      	ldr	r3, [pc, #432]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	08db      	lsrs	r3, r3, #3
 800877a:	f003 0303 	and.w	r3, r3, #3
 800877e:	4a6b      	ldr	r2, [pc, #428]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008780:	fa22 f303 	lsr.w	r3, r2, r3
 8008784:	637b      	str	r3, [r7, #52]	@ 0x34
 8008786:	e010      	b.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008788:	4b67      	ldr	r3, [pc, #412]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008790:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008794:	d105      	bne.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8008796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008798:	2b05      	cmp	r3, #5
 800879a:	d102      	bne.n	80087a2 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800879c:	4b64      	ldr	r3, [pc, #400]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800879e:	637b      	str	r3, [r7, #52]	@ 0x34
 80087a0:	e003      	b.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80087a6:	f001 b96e 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80087aa:	f001 b96c 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80087ae:	4b5e      	ldr	r3, [pc, #376]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80087b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80087b4:	f003 0308 	and.w	r3, r3, #8
 80087b8:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80087ba:	4b5b      	ldr	r3, [pc, #364]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80087bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087c0:	f003 0302 	and.w	r3, r3, #2
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d106      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 80087c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d103      	bne.n	80087d6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 80087ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80087d4:	e012      	b.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80087d6:	4b54      	ldr	r3, [pc, #336]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80087d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80087dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087e4:	d106      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 80087e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087e8:	2b08      	cmp	r3, #8
 80087ea:	d103      	bne.n	80087f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 80087ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80087f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80087f2:	e003      	b.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 80087f4:	2300      	movs	r3, #0
 80087f6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 80087f8:	f001 b945 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80087fc:	f001 b943 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008800:	4b49      	ldr	r3, [pc, #292]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008802:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008806:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800880a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800880c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800880e:	2b00      	cmp	r3, #0
 8008810:	d104      	bne.n	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008812:	f7fc f9dd 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8008816:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008818:	f001 b935 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800881c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800881e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008822:	d108      	bne.n	8008836 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008824:	f107 0308 	add.w	r3, r7, #8
 8008828:	4618      	mov	r0, r3
 800882a:	f7fe fc75 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008832:	f001 b928 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008836:	4b3c      	ldr	r3, [pc, #240]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0302 	and.w	r3, r3, #2
 800883e:	2b02      	cmp	r3, #2
 8008840:	d10d      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8008842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008844:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008848:	d109      	bne.n	800885e <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800884a:	4b37      	ldr	r3, [pc, #220]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	08db      	lsrs	r3, r3, #3
 8008850:	f003 0303 	and.w	r3, r3, #3
 8008854:	4a35      	ldr	r2, [pc, #212]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8008856:	fa22 f303 	lsr.w	r3, r2, r3
 800885a:	637b      	str	r3, [r7, #52]	@ 0x34
 800885c:	e011      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800885e:	4b32      	ldr	r3, [pc, #200]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008866:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800886a:	d106      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800886c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800886e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008872:	d102      	bne.n	800887a <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8008874:	4b2e      	ldr	r3, [pc, #184]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8008876:	637b      	str	r3, [r7, #52]	@ 0x34
 8008878:	e003      	b.n	8008882 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800887a:	2300      	movs	r3, #0
 800887c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800887e:	f001 b902 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008882:	f001 b900 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008886:	4b28      	ldr	r3, [pc, #160]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8008888:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800888c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008890:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008894:	2b00      	cmp	r3, #0
 8008896:	d104      	bne.n	80088a2 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008898:	f7fc f99a 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 800889c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800889e:	f001 b8f2 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80088a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80088a8:	d108      	bne.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80088aa:	f107 0308 	add.w	r3, r7, #8
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fc32 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80088b8:	f001 b8e5 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80088bc:	4b1a      	ldr	r3, [pc, #104]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0302 	and.w	r3, r3, #2
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d10d      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 80088c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80088ce:	d109      	bne.n	80088e4 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088d0:	4b15      	ldr	r3, [pc, #84]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	08db      	lsrs	r3, r3, #3
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	4a14      	ldr	r2, [pc, #80]	@ (800892c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 80088dc:	fa22 f303 	lsr.w	r3, r2, r3
 80088e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80088e2:	e011      	b.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80088e4:	4b10      	ldr	r3, [pc, #64]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80088ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088f0:	d106      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80088f8:	d102      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 80088fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008930 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 80088fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80088fe:	e003      	b.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8008900:	2300      	movs	r3, #0
 8008902:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008904:	f001 b8bf 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008908:	f001 b8bd 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800890c:	4b06      	ldr	r3, [pc, #24]	@ (8008928 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800890e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008912:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008916:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800891a:	2b00      	cmp	r3, #0
 800891c:	d10c      	bne.n	8008938 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800891e:	f7fc f983 	bl	8004c28 <HAL_RCC_GetPCLK3Freq>
 8008922:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8008924:	f001 b8af 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008928:	44020c00 	.word	0x44020c00
 800892c:	03d09000 	.word	0x03d09000
 8008930:	003d0900 	.word	0x003d0900
 8008934:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800893a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800893e:	d108      	bne.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008940:	f107 0308 	add.w	r3, r7, #8
 8008944:	4618      	mov	r0, r3
 8008946:	f7fe fbe7 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800894e:	f001 b89a 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008952:	4b9f      	ldr	r3, [pc, #636]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0302 	and.w	r3, r3, #2
 800895a:	2b02      	cmp	r3, #2
 800895c:	d10d      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800895e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008960:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008964:	d109      	bne.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008966:	4b9a      	ldr	r3, [pc, #616]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	08db      	lsrs	r3, r3, #3
 800896c:	f003 0303 	and.w	r3, r3, #3
 8008970:	4a98      	ldr	r2, [pc, #608]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008972:	fa22 f303 	lsr.w	r3, r2, r3
 8008976:	637b      	str	r3, [r7, #52]	@ 0x34
 8008978:	e011      	b.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800897a:	4b95      	ldr	r3, [pc, #596]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008986:	d106      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8008988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800898a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800898e:	d102      	bne.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8008990:	4b91      	ldr	r3, [pc, #580]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008992:	637b      	str	r3, [r7, #52]	@ 0x34
 8008994:	e003      	b.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800899a:	f001 b874 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800899e:	f001 b872 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80089a2:	4b8b      	ldr	r3, [pc, #556]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80089a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089a8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80089ac:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80089ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d104      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80089b4:	f7fc f938 	bl	8004c28 <HAL_RCC_GetPCLK3Freq>
 80089b8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 80089ba:	f001 b864 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80089be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089c4:	d108      	bne.n	80089d8 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089c6:	f107 0308 	add.w	r3, r7, #8
 80089ca:	4618      	mov	r0, r3
 80089cc:	f7fe fba4 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80089d4:	f001 b857 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80089d8:	4b7d      	ldr	r3, [pc, #500]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 0302 	and.w	r3, r3, #2
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d10d      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 80089e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80089ea:	d109      	bne.n	8008a00 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089ec:	4b78      	ldr	r3, [pc, #480]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	08db      	lsrs	r3, r3, #3
 80089f2:	f003 0303 	and.w	r3, r3, #3
 80089f6:	4a77      	ldr	r2, [pc, #476]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 80089f8:	fa22 f303 	lsr.w	r3, r2, r3
 80089fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80089fe:	e011      	b.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8008a00:	4b73      	ldr	r3, [pc, #460]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008a08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a0c:	d106      	bne.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8008a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a10:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008a14:	d102      	bne.n	8008a1c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8008a16:	4b70      	ldr	r3, [pc, #448]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008a18:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a1a:	e003      	b.n	8008a24 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a20:	f001 b831 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008a24:	f001 b82f 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008a28:	4b69      	ldr	r3, [pc, #420]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a2a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008a2e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8008a32:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d104      	bne.n	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008a3a:	f7fc f8c9 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8008a3e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008a40:	f001 b821 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a4a:	d108      	bne.n	8008a5e <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a4c:	f107 0308 	add.w	r3, r7, #8
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fe fb61 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a5a:	f001 b814 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008a5e:	4b5c      	ldr	r3, [pc, #368]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	2b02      	cmp	r3, #2
 8008a68:	d10e      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a70:	d10a      	bne.n	8008a88 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a72:	4b57      	ldr	r3, [pc, #348]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	08db      	lsrs	r3, r3, #3
 8008a78:	f003 0303 	and.w	r3, r3, #3
 8008a7c:	4a55      	ldr	r2, [pc, #340]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008a82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a84:	f000 bfff 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008a8c:	f000 bffb 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008a90:	4b4f      	ldr	r3, [pc, #316]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008a92:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008a96:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008a9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a9e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008aa2:	d056      	beq.n	8008b52 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8008aaa:	f200 808b 	bhi.w	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ab4:	d03e      	beq.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008abc:	f200 8082 	bhi.w	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ac2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ac6:	d027      	beq.n	8008b18 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8008ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ace:	d879      	bhi.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ad6:	d017      	beq.n	8008b08 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8008ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ada:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ade:	d871      	bhi.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8008ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d004      	beq.n	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8008ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ae8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008aec:	d004      	beq.n	8008af8 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8008aee:	e069      	b.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008af0:	f7fc f89a 	bl	8004c28 <HAL_RCC_GetPCLK3Freq>
 8008af4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008af6:	e068      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008af8:	f107 0314 	add.w	r3, r7, #20
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7fe f99f 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b06:	e060      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b08:	f107 0308 	add.w	r3, r7, #8
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fe fb03 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b16:	e058      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008b18:	4b2d      	ldr	r3, [pc, #180]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008b1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d103      	bne.n	8008b2e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8008b26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008b2a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b2c:	e04d      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b32:	e04a      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008b34:	4b26      	ldr	r3, [pc, #152]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008b3a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008b3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b42:	d103      	bne.n	8008b4c <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8008b44:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008b48:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008b4a:	e03e      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008b50:	e03b      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b52:	4b1f      	ldr	r3, [pc, #124]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008b58:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d10c      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8008b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d109      	bne.n	8008b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b70:	4b17      	ldr	r3, [pc, #92]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	08db      	lsrs	r3, r3, #3
 8008b76:	f003 0303 	and.w	r3, r3, #3
 8008b7a:	4a16      	ldr	r2, [pc, #88]	@ (8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8008b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b80:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b82:	e01e      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008b84:	4b12      	ldr	r3, [pc, #72]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b90:	d106      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8008b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b98:	d102      	bne.n	8008ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8008b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b9e:	e010      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8008bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ba8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008bac:	d106      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8008bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008bb4:	d102      	bne.n	8008bbc <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008bb6:	4b09      	ldr	r3, [pc, #36]	@ (8008bdc <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8008bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bba:	e002      	b.n	8008bc2 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008bc0:	e003      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8008bc2:	e002      	b.n	8008bca <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008bc8:	bf00      	nop
          }
        }
        break;
 8008bca:	f000 bf5c 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008bce:	bf00      	nop
 8008bd0:	44020c00 	.word	0x44020c00
 8008bd4:	03d09000 	.word	0x03d09000
 8008bd8:	003d0900 	.word	0x003d0900
 8008bdc:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008be0:	4b9e      	ldr	r3, [pc, #632]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008be2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008be6:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8008bea:	633b      	str	r3, [r7, #48]	@ 0x30
 8008bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bee:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008bf2:	d056      	beq.n	8008ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8008bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008bfa:	f200 808b 	bhi.w	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c04:	d03e      	beq.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8008c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c0c:	f200 8082 	bhi.w	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c12:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c16:	d027      	beq.n	8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8008c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c1e:	d879      	bhi.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c26:	d017      	beq.n	8008c58 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8008c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c2e:	d871      	bhi.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8008c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d004      	beq.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8008c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c3c:	d004      	beq.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8008c3e:	e069      	b.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8008c40:	f7fb ffc6 	bl	8004bd0 <HAL_RCC_GetPCLK1Freq>
 8008c44:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008c46:	e068      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c48:	f107 0314 	add.w	r3, r7, #20
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7fe f8f7 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c56:	e060      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c58:	f107 0308 	add.w	r3, r7, #8
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fe fa5b 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c66:	e058      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008c68:	4b7c      	ldr	r3, [pc, #496]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d103      	bne.n	8008c7e <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8008c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008c7a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008c7c:	e04d      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008c82:	e04a      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008c84:	4b75      	ldr	r3, [pc, #468]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008c86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008c8a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008c8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c92:	d103      	bne.n	8008c9c <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8008c94:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008c98:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008c9a:	e03e      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ca0:	e03b      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ca2:	4b6e      	ldr	r3, [pc, #440]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008ca8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008cac:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cae:	4b6b      	ldr	r3, [pc, #428]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0302 	and.w	r3, r3, #2
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d10c      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8008cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d109      	bne.n	8008cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cc0:	4b66      	ldr	r3, [pc, #408]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	08db      	lsrs	r3, r3, #3
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	4a65      	ldr	r2, [pc, #404]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cd2:	e01e      	b.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008cd4:	4b61      	ldr	r3, [pc, #388]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ce0:	d106      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8008ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ce8:	d102      	bne.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008cea:	4b5e      	ldr	r3, [pc, #376]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8008cee:	e010      	b.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008cf0:	4b5a      	ldr	r3, [pc, #360]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008cf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008cfc:	d106      	bne.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8008cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d04:	d102      	bne.n	8008d0c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d06:	4b58      	ldr	r3, [pc, #352]	@ (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008d08:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d0a:	e002      	b.n	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008d10:	e003      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8008d12:	e002      	b.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8008d14:	2300      	movs	r3, #0
 8008d16:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d18:	bf00      	nop
          }
        }
        break;
 8008d1a:	f000 beb4 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008d1e:	4b4f      	ldr	r3, [pc, #316]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008d20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008d24:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008d28:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d30:	d056      	beq.n	8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8008d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d38:	f200 808b 	bhi.w	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d42:	d03e      	beq.n	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8008d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d4a:	f200 8082 	bhi.w	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d54:	d027      	beq.n	8008da6 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8008d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d58:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d5c:	d879      	bhi.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d64:	d017      	beq.n	8008d96 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 8008d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d6c:	d871      	bhi.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8008d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d004      	beq.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 8008d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d7a:	d004      	beq.n	8008d86 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 8008d7c:	e069      	b.n	8008e52 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008d7e:	f7fb ff53 	bl	8004c28 <HAL_RCC_GetPCLK3Freq>
 8008d82:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008d84:	e068      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d86:	f107 0314 	add.w	r3, r7, #20
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe f858 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d94:	e060      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d96:	f107 0308 	add.w	r3, r7, #8
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe f9bc 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008da4:	e058      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008da6:	4b2d      	ldr	r3, [pc, #180]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dac:	f003 0302 	and.w	r3, r3, #2
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d103      	bne.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 8008db4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008db8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008dba:	e04d      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dc0:	e04a      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008dc2:	4b26      	ldr	r3, [pc, #152]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008dc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008dc8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008dcc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008dd0:	d103      	bne.n	8008dda <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 8008dd2:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008dd6:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008dd8:	e03e      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dde:	e03b      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008de0:	4b1e      	ldr	r3, [pc, #120]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008de6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008dea:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dec:	4b1b      	ldr	r3, [pc, #108]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d10c      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 8008df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d109      	bne.n	8008e12 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008dfe:	4b17      	ldr	r3, [pc, #92]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	08db      	lsrs	r3, r3, #3
 8008e04:	f003 0303 	and.w	r3, r3, #3
 8008e08:	4a15      	ldr	r2, [pc, #84]	@ (8008e60 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8008e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e10:	e01e      	b.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e12:	4b12      	ldr	r3, [pc, #72]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e1e:	d106      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 8008e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e26:	d102      	bne.n	8008e2e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008e28:	4b0e      	ldr	r3, [pc, #56]	@ (8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8008e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e2c:	e010      	b.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e5c <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e3a:	d106      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 8008e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e42:	d102      	bne.n	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008e44:	4b08      	ldr	r3, [pc, #32]	@ (8008e68 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8008e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e48:	e002      	b.n	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008e4e:	e003      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 8008e50:	e002      	b.n	8008e58 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e56:	bf00      	nop
          }
        }
        break;
 8008e58:	f000 be15 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008e5c:	44020c00 	.word	0x44020c00
 8008e60:	03d09000 	.word	0x03d09000
 8008e64:	003d0900 	.word	0x003d0900
 8008e68:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008e6c:	4b9e      	ldr	r3, [pc, #632]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008e6e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008e72:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 8008e76:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e7a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008e7e:	d056      	beq.n	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 8008e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e82:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8008e86:	f200 808b 	bhi.w	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e90:	d03e      	beq.n	8008f10 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 8008e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008e98:	f200 8082 	bhi.w	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ea2:	d027      	beq.n	8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 8008ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ea6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008eaa:	d879      	bhi.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008eb2:	d017      	beq.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008eba:	d871      	bhi.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 8008ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d004      	beq.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 8008ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ec8:	d004      	beq.n	8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 8008eca:	e069      	b.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8008ecc:	f7fb feac 	bl	8004c28 <HAL_RCC_GetPCLK3Freq>
 8008ed0:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8008ed2:	e068      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ed4:	f107 0314 	add.w	r3, r7, #20
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fd ffb1 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ee2:	e060      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ee4:	f107 0308 	add.w	r3, r7, #8
 8008ee8:	4618      	mov	r0, r3
 8008eea:	f7fe f915 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ef2:	e058      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008ef4:	4b7c      	ldr	r3, [pc, #496]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008ef6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d103      	bne.n	8008f0a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 8008f02:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f06:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f08:	e04d      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f0e:	e04a      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008f10:	4b75      	ldr	r3, [pc, #468]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f1e:	d103      	bne.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 8008f20:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8008f24:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8008f26:	e03e      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008f2c:	e03b      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008f34:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008f38:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f3a:	4b6b      	ldr	r3, [pc, #428]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0302 	and.w	r3, r3, #2
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d10c      	bne.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 8008f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d109      	bne.n	8008f60 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f4c:	4b66      	ldr	r3, [pc, #408]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	08db      	lsrs	r3, r3, #3
 8008f52:	f003 0303 	and.w	r3, r3, #3
 8008f56:	4a65      	ldr	r2, [pc, #404]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8008f58:	fa22 f303 	lsr.w	r3, r2, r3
 8008f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f5e:	e01e      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008f60:	4b61      	ldr	r3, [pc, #388]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f6c:	d106      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 8008f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f74:	d102      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008f76:	4b5e      	ldr	r3, [pc, #376]	@ (80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 8008f78:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f7a:	e010      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f88:	d106      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 8008f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f90:	d102      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008f92:	4b58      	ldr	r3, [pc, #352]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 8008f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f96:	e002      	b.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008f9c:	e003      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 8008f9e:	e002      	b.n	8008fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008fa4:	bf00      	nop
          }
        }
        break;
 8008fa6:	f000 bd6e 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008faa:	4b4f      	ldr	r3, [pc, #316]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8008fac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008fb0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8008fb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008fbc:	d056      	beq.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008fc4:	f200 808b 	bhi.w	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008fce:	d03e      	beq.n	800904e <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 8008fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008fd6:	f200 8082 	bhi.w	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008fe0:	d027      	beq.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 8008fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008fe8:	d879      	bhi.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ff0:	d017      	beq.n	8009022 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008ff8:	d871      	bhi.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d004      	beq.n	800900a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 8009000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009002:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009006:	d004      	beq.n	8009012 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 8009008:	e069      	b.n	80090de <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800900a:	f7fb fe0d 	bl	8004c28 <HAL_RCC_GetPCLK3Freq>
 800900e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009010:	e068      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009012:	f107 0314 	add.w	r3, r7, #20
 8009016:	4618      	mov	r0, r3
 8009018:	f7fd ff12 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009020:	e060      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009022:	f107 0308 	add.w	r3, r7, #8
 8009026:	4618      	mov	r0, r3
 8009028:	f7fe f876 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009030:	e058      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009032:	4b2d      	ldr	r3, [pc, #180]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009034:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009038:	f003 0302 	and.w	r3, r3, #2
 800903c:	2b02      	cmp	r3, #2
 800903e:	d103      	bne.n	8009048 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 8009040:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009044:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009046:	e04d      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009048:	2300      	movs	r3, #0
 800904a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800904c:	e04a      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800904e:	4b26      	ldr	r3, [pc, #152]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 8009050:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009054:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009058:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800905c:	d103      	bne.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800905e:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009062:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009064:	e03e      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 8009066:	2300      	movs	r3, #0
 8009068:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800906a:	e03b      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800906c:	4b1e      	ldr	r3, [pc, #120]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800906e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009072:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009076:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009078:	4b1b      	ldr	r3, [pc, #108]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0302 	and.w	r3, r3, #2
 8009080:	2b02      	cmp	r3, #2
 8009082:	d10c      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 8009084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009086:	2b00      	cmp	r3, #0
 8009088:	d109      	bne.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800908a:	4b17      	ldr	r3, [pc, #92]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	08db      	lsrs	r3, r3, #3
 8009090:	f003 0303 	and.w	r3, r3, #3
 8009094:	4a15      	ldr	r2, [pc, #84]	@ (80090ec <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 8009096:	fa22 f303 	lsr.w	r3, r2, r3
 800909a:	637b      	str	r3, [r7, #52]	@ 0x34
 800909c:	e01e      	b.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800909e:	4b12      	ldr	r3, [pc, #72]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090aa:	d106      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 80090ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090b2:	d102      	bne.n	80090ba <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80090b4:	4b0e      	ldr	r3, [pc, #56]	@ (80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 80090b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b8:	e010      	b.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090ba:	4b0b      	ldr	r3, [pc, #44]	@ (80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80090c6:	d106      	bne.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 80090c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80090ce:	d102      	bne.n	80090d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80090d0:	4b08      	ldr	r3, [pc, #32]	@ (80090f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 80090d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d4:	e002      	b.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80090da:	e003      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 80090dc:	e002      	b.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 80090de:	2300      	movs	r3, #0
 80090e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80090e2:	bf00      	nop
          }
        }
        break;
 80090e4:	f000 bccf 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80090e8:	44020c00 	.word	0x44020c00
 80090ec:	03d09000 	.word	0x03d09000
 80090f0:	003d0900 	.word	0x003d0900
 80090f4:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 80090f8:	4b9e      	ldr	r3, [pc, #632]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80090fa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80090fe:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009102:	633b      	str	r3, [r7, #48]	@ 0x30
 8009104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009106:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800910a:	d056      	beq.n	80091ba <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009112:	f200 808b 	bhi.w	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800911c:	d03e      	beq.n	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800911e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009120:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009124:	f200 8082 	bhi.w	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800912e:	d027      	beq.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 8009130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009132:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009136:	d879      	bhi.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800913e:	d017      	beq.n	8009170 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 8009140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009142:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009146:	d871      	bhi.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 8009148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914a:	2b00      	cmp	r3, #0
 800914c:	d004      	beq.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800914e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009150:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009154:	d004      	beq.n	8009160 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 8009156:	e069      	b.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009158:	f7fb fd66 	bl	8004c28 <HAL_RCC_GetPCLK3Freq>
 800915c:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800915e:	e068      	b.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009160:	f107 0314 	add.w	r3, r7, #20
 8009164:	4618      	mov	r0, r3
 8009166:	f7fd fe6b 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800916e:	e060      	b.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009170:	f107 0308 	add.w	r3, r7, #8
 8009174:	4618      	mov	r0, r3
 8009176:	f7fd ffcf 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800917e:	e058      	b.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009180:	4b7c      	ldr	r3, [pc, #496]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009182:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009186:	f003 0302 	and.w	r3, r3, #2
 800918a:	2b02      	cmp	r3, #2
 800918c:	d103      	bne.n	8009196 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800918e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009192:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009194:	e04d      	b.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800919a:	e04a      	b.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800919c:	4b75      	ldr	r3, [pc, #468]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800919e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80091a2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091aa:	d103      	bne.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 80091ac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80091b0:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 80091b2:	e03e      	b.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 80091b4:	2300      	movs	r3, #0
 80091b6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80091b8:	e03b      	b.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091ba:	4b6e      	ldr	r3, [pc, #440]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80091bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80091c0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80091c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091c6:	4b6b      	ldr	r3, [pc, #428]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f003 0302 	and.w	r3, r3, #2
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d10c      	bne.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 80091d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d109      	bne.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091d8:	4b66      	ldr	r3, [pc, #408]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	08db      	lsrs	r3, r3, #3
 80091de:	f003 0303 	and.w	r3, r3, #3
 80091e2:	4a65      	ldr	r2, [pc, #404]	@ (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 80091e4:	fa22 f303 	lsr.w	r3, r2, r3
 80091e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091ea:	e01e      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091ec:	4b61      	ldr	r3, [pc, #388]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091f8:	d106      	bne.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 80091fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009200:	d102      	bne.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009202:	4b5e      	ldr	r3, [pc, #376]	@ (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009204:	637b      	str	r3, [r7, #52]	@ 0x34
 8009206:	e010      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009208:	4b5a      	ldr	r3, [pc, #360]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009210:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009214:	d106      	bne.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 8009216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800921c:	d102      	bne.n	8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800921e:	4b58      	ldr	r3, [pc, #352]	@ (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009220:	637b      	str	r3, [r7, #52]	@ 0x34
 8009222:	e002      	b.n	800922a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009224:	2300      	movs	r3, #0
 8009226:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009228:	e003      	b.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800922a:	e002      	b.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800922c:	2300      	movs	r3, #0
 800922e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009230:	bf00      	nop
          }
        }
        break;
 8009232:	f000 bc28 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009236:	4b4f      	ldr	r3, [pc, #316]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800923c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009240:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009242:	4b4c      	ldr	r3, [pc, #304]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800924a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800924e:	d106      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 8009250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009252:	2b00      	cmp	r3, #0
 8009254:	d103      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 8009256:	4b4a      	ldr	r3, [pc, #296]	@ (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009258:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800925a:	f000 bc14 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800925e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009260:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009264:	d108      	bne.n	8009278 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009266:	f107 0320 	add.w	r3, r7, #32
 800926a:	4618      	mov	r0, r3
 800926c:	f7fd fc7c 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009272:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009274:	f000 bc07 	b.w	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800927a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800927e:	d107      	bne.n	8009290 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009280:	f107 0314 	add.w	r3, r7, #20
 8009284:	4618      	mov	r0, r3
 8009286:	f7fd fddb 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800928e:	e3fa      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009290:	2300      	movs	r3, #0
 8009292:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009294:	e3f7      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009296:	4b37      	ldr	r3, [pc, #220]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800929c:	f003 0307 	and.w	r3, r3, #7
 80092a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80092a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a4:	2b04      	cmp	r3, #4
 80092a6:	d861      	bhi.n	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 80092a8:	a201      	add	r2, pc, #4	@ (adr r2, 80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 80092aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ae:	bf00      	nop
 80092b0:	080092c5 	.word	0x080092c5
 80092b4:	080092d5 	.word	0x080092d5
 80092b8:	080092e5 	.word	0x080092e5
 80092bc:	080092f5 	.word	0x080092f5
 80092c0:	080092fb 	.word	0x080092fb
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092c4:	f107 0320 	add.w	r3, r7, #32
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fd fc4d 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80092ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092d2:	e04e      	b.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092d4:	f107 0314 	add.w	r3, r7, #20
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fd fdb1 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092e2:	e046      	b.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092e4:	f107 0308 	add.w	r3, r7, #8
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fd ff15 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092f2:	e03e      	b.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 80092f4:	4b23      	ldr	r3, [pc, #140]	@ (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 80092f6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80092f8:	e03b      	b.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092fa:	4b1e      	ldr	r3, [pc, #120]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 80092fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009300:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009304:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009306:	4b1b      	ldr	r3, [pc, #108]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b02      	cmp	r3, #2
 8009310:	d10c      	bne.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 8009312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009314:	2b00      	cmp	r3, #0
 8009316:	d109      	bne.n	800932c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009318:	4b16      	ldr	r3, [pc, #88]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	08db      	lsrs	r3, r3, #3
 800931e:	f003 0303 	and.w	r3, r3, #3
 8009322:	4a15      	ldr	r2, [pc, #84]	@ (8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 8009324:	fa22 f303 	lsr.w	r3, r2, r3
 8009328:	637b      	str	r3, [r7, #52]	@ 0x34
 800932a:	e01e      	b.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800932c:	4b11      	ldr	r3, [pc, #68]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009338:	d106      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800933a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800933c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009340:	d102      	bne.n	8009348 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009342:	4b0e      	ldr	r3, [pc, #56]	@ (800937c <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 8009344:	637b      	str	r3, [r7, #52]	@ 0x34
 8009346:	e010      	b.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009348:	4b0a      	ldr	r3, [pc, #40]	@ (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009350:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009354:	d106      	bne.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 8009356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009358:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800935c:	d102      	bne.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800935e:	4b08      	ldr	r3, [pc, #32]	@ (8009380 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 8009360:	637b      	str	r3, [r7, #52]	@ 0x34
 8009362:	e002      	b.n	800936a <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009364:	2300      	movs	r3, #0
 8009366:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009368:	e003      	b.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800936a:	e002      	b.n	8009372 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800936c:	2300      	movs	r3, #0
 800936e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009370:	bf00      	nop
          }
        }
        break;
 8009372:	e388      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009374:	44020c00 	.word	0x44020c00
 8009378:	03d09000 	.word	0x03d09000
 800937c:	003d0900 	.word	0x003d0900
 8009380:	007a1200 	.word	0x007a1200
 8009384:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009388:	4ba9      	ldr	r3, [pc, #676]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800938a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800938e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009392:	633b      	str	r3, [r7, #48]	@ 0x30
 8009394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009396:	2b20      	cmp	r3, #32
 8009398:	f200 809a 	bhi.w	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800939c:	a201      	add	r2, pc, #4	@ (adr r2, 80093a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800939e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a2:	bf00      	nop
 80093a4:	08009429 	.word	0x08009429
 80093a8:	080094d1 	.word	0x080094d1
 80093ac:	080094d1 	.word	0x080094d1
 80093b0:	080094d1 	.word	0x080094d1
 80093b4:	080094d1 	.word	0x080094d1
 80093b8:	080094d1 	.word	0x080094d1
 80093bc:	080094d1 	.word	0x080094d1
 80093c0:	080094d1 	.word	0x080094d1
 80093c4:	08009439 	.word	0x08009439
 80093c8:	080094d1 	.word	0x080094d1
 80093cc:	080094d1 	.word	0x080094d1
 80093d0:	080094d1 	.word	0x080094d1
 80093d4:	080094d1 	.word	0x080094d1
 80093d8:	080094d1 	.word	0x080094d1
 80093dc:	080094d1 	.word	0x080094d1
 80093e0:	080094d1 	.word	0x080094d1
 80093e4:	08009449 	.word	0x08009449
 80093e8:	080094d1 	.word	0x080094d1
 80093ec:	080094d1 	.word	0x080094d1
 80093f0:	080094d1 	.word	0x080094d1
 80093f4:	080094d1 	.word	0x080094d1
 80093f8:	080094d1 	.word	0x080094d1
 80093fc:	080094d1 	.word	0x080094d1
 8009400:	080094d1 	.word	0x080094d1
 8009404:	08009459 	.word	0x08009459
 8009408:	080094d1 	.word	0x080094d1
 800940c:	080094d1 	.word	0x080094d1
 8009410:	080094d1 	.word	0x080094d1
 8009414:	080094d1 	.word	0x080094d1
 8009418:	080094d1 	.word	0x080094d1
 800941c:	080094d1 	.word	0x080094d1
 8009420:	080094d1 	.word	0x080094d1
 8009424:	0800945f 	.word	0x0800945f
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009428:	f107 0320 	add.w	r3, r7, #32
 800942c:	4618      	mov	r0, r3
 800942e:	f7fd fb9b 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009434:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009436:	e04e      	b.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009438:	f107 0314 	add.w	r3, r7, #20
 800943c:	4618      	mov	r0, r3
 800943e:	f7fd fcff 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009442:	697b      	ldr	r3, [r7, #20]
 8009444:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009446:	e046      	b.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009448:	f107 0308 	add.w	r3, r7, #8
 800944c:	4618      	mov	r0, r3
 800944e:	f7fd fe63 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009456:	e03e      	b.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009458:	4b76      	ldr	r3, [pc, #472]	@ (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800945a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800945c:	e03b      	b.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800945e:	4b74      	ldr	r3, [pc, #464]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009464:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009468:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800946a:	4b71      	ldr	r3, [pc, #452]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0302 	and.w	r3, r3, #2
 8009472:	2b02      	cmp	r3, #2
 8009474:	d10c      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 8009476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009478:	2b00      	cmp	r3, #0
 800947a:	d109      	bne.n	8009490 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800947c:	4b6c      	ldr	r3, [pc, #432]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	08db      	lsrs	r3, r3, #3
 8009482:	f003 0303 	and.w	r3, r3, #3
 8009486:	4a6c      	ldr	r2, [pc, #432]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 8009488:	fa22 f303 	lsr.w	r3, r2, r3
 800948c:	637b      	str	r3, [r7, #52]	@ 0x34
 800948e:	e01e      	b.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009490:	4b67      	ldr	r3, [pc, #412]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800949c:	d106      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800949e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094a4:	d102      	bne.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80094a6:	4b65      	ldr	r3, [pc, #404]	@ (800963c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 80094a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094aa:	e010      	b.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80094ac:	4b60      	ldr	r3, [pc, #384]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80094b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80094b8:	d106      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 80094ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80094c0:	d102      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80094c2:	4b5f      	ldr	r3, [pc, #380]	@ (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80094c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094c6:	e002      	b.n	80094ce <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80094c8:	2300      	movs	r3, #0
 80094ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80094cc:	e003      	b.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 80094ce:	e002      	b.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80094d4:	bf00      	nop
          }
        }
        break;
 80094d6:	e2d6      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80094d8:	4b55      	ldr	r3, [pc, #340]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80094da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80094de:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80094e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80094e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094ea:	d031      	beq.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 80094ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094f2:	d866      	bhi.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 80094f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80094f8:	d027      	beq.n	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 80094fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fc:	2bc0      	cmp	r3, #192	@ 0xc0
 80094fe:	d860      	bhi.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 8009500:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009502:	2b80      	cmp	r3, #128	@ 0x80
 8009504:	d019      	beq.n	800953a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 8009506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009508:	2b80      	cmp	r3, #128	@ 0x80
 800950a:	d85a      	bhi.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800950c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 8009512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009514:	2b40      	cmp	r3, #64	@ 0x40
 8009516:	d008      	beq.n	800952a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 8009518:	e053      	b.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800951a:	f107 0320 	add.w	r3, r7, #32
 800951e:	4618      	mov	r0, r3
 8009520:	f7fd fb22 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009526:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009528:	e04e      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800952a:	f107 0314 	add.w	r3, r7, #20
 800952e:	4618      	mov	r0, r3
 8009530:	f7fd fc86 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009538:	e046      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800953a:	f107 0308 	add.w	r3, r7, #8
 800953e:	4618      	mov	r0, r3
 8009540:	f7fd fdea 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009548:	e03e      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800954a:	4b3a      	ldr	r3, [pc, #232]	@ (8009634 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800954c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800954e:	e03b      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009550:	4b37      	ldr	r3, [pc, #220]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009552:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009556:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800955a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800955c:	4b34      	ldr	r3, [pc, #208]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0302 	and.w	r3, r3, #2
 8009564:	2b02      	cmp	r3, #2
 8009566:	d10c      	bne.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 8009568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800956a:	2b00      	cmp	r3, #0
 800956c:	d109      	bne.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800956e:	4b30      	ldr	r3, [pc, #192]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	08db      	lsrs	r3, r3, #3
 8009574:	f003 0303 	and.w	r3, r3, #3
 8009578:	4a2f      	ldr	r2, [pc, #188]	@ (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800957a:	fa22 f303 	lsr.w	r3, r2, r3
 800957e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009580:	e01e      	b.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009582:	4b2b      	ldr	r3, [pc, #172]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800958a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800958e:	d106      	bne.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 8009590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009596:	d102      	bne.n	800959e <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009598:	4b28      	ldr	r3, [pc, #160]	@ (800963c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800959a:	637b      	str	r3, [r7, #52]	@ 0x34
 800959c:	e010      	b.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800959e:	4b24      	ldr	r3, [pc, #144]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80095aa:	d106      	bne.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 80095ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80095b2:	d102      	bne.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80095b4:	4b22      	ldr	r3, [pc, #136]	@ (8009640 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 80095b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095b8:	e002      	b.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80095be:	e003      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 80095c0:	e002      	b.n	80095c8 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 80095c2:	2300      	movs	r3, #0
 80095c4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 80095c6:	bf00      	nop
          }
        }
        break;
 80095c8:	e25d      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80095ca:	4b19      	ldr	r3, [pc, #100]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80095cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80095d0:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 80095d4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80095d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d103      	bne.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 80095dc:	f7fb fb0e 	bl	8004bfc <HAL_RCC_GetPCLK2Freq>
 80095e0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80095e2:	e250      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80095e4:	4b12      	ldr	r3, [pc, #72]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095f0:	d10b      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 80095f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095f8:	d107      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095fa:	f107 0314 	add.w	r3, r7, #20
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fd fc1e 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009604:	69bb      	ldr	r3, [r7, #24]
 8009606:	637b      	str	r3, [r7, #52]	@ 0x34
 8009608:	e04f      	b.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800960a:	4b09      	ldr	r3, [pc, #36]	@ (8009630 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009612:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009616:	d115      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 8009618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800961a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800961e:	d111      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009620:	f107 0308 	add.w	r3, r7, #8
 8009624:	4618      	mov	r0, r3
 8009626:	f7fd fd77 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	637b      	str	r3, [r7, #52]	@ 0x34
 800962e:	e03c      	b.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 8009630:	44020c00 	.word	0x44020c00
 8009634:	00bb8000 	.word	0x00bb8000
 8009638:	03d09000 	.word	0x03d09000
 800963c:	003d0900 	.word	0x003d0900
 8009640:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009644:	4b94      	ldr	r3, [pc, #592]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0302 	and.w	r3, r3, #2
 800964c:	2b02      	cmp	r3, #2
 800964e:	d10d      	bne.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 8009650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009652:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009656:	d109      	bne.n	800966c <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009658:	4b8f      	ldr	r3, [pc, #572]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	08db      	lsrs	r3, r3, #3
 800965e:	f003 0303 	and.w	r3, r3, #3
 8009662:	4a8e      	ldr	r2, [pc, #568]	@ (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009664:	fa22 f303 	lsr.w	r3, r2, r3
 8009668:	637b      	str	r3, [r7, #52]	@ 0x34
 800966a:	e01e      	b.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800966c:	4b8a      	ldr	r3, [pc, #552]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009674:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009678:	d106      	bne.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800967a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800967c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009680:	d102      	bne.n	8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 8009682:	4b87      	ldr	r3, [pc, #540]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009684:	637b      	str	r3, [r7, #52]	@ 0x34
 8009686:	e010      	b.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009688:	4b83      	ldr	r3, [pc, #524]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009690:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009694:	d106      	bne.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 8009696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009698:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800969c:	d102      	bne.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800969e:	4b81      	ldr	r3, [pc, #516]	@ (80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 80096a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80096a2:	e002      	b.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 80096a4:	2300      	movs	r3, #0
 80096a6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80096a8:	e1ed      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80096aa:	e1ec      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 80096ac:	4b7a      	ldr	r3, [pc, #488]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80096b2:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80096b6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 80096b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d103      	bne.n	80096c6 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80096be:	f7fb fab3 	bl	8004c28 <HAL_RCC_GetPCLK3Freq>
 80096c2:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 80096c4:	e1df      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 80096c6:	4b74      	ldr	r3, [pc, #464]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80096ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096d2:	d10b      	bne.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 80096d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096da:	d107      	bne.n	80096ec <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096dc:	f107 0314 	add.w	r3, r7, #20
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fd fbad 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096e6:	69bb      	ldr	r3, [r7, #24]
 80096e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80096ea:	e045      	b.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80096ec:	4b6a      	ldr	r3, [pc, #424]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096f8:	d10b      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 80096fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009700:	d107      	bne.n	8009712 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009702:	f107 0308 	add.w	r3, r7, #8
 8009706:	4618      	mov	r0, r3
 8009708:	f7fd fd06 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009710:	e032      	b.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8009712:	4b61      	ldr	r3, [pc, #388]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f003 0302 	and.w	r3, r3, #2
 800971a:	2b02      	cmp	r3, #2
 800971c:	d10d      	bne.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800971e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009720:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009724:	d109      	bne.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009726:	4b5c      	ldr	r3, [pc, #368]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	08db      	lsrs	r3, r3, #3
 800972c:	f003 0303 	and.w	r3, r3, #3
 8009730:	4a5a      	ldr	r2, [pc, #360]	@ (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009732:	fa22 f303 	lsr.w	r3, r2, r3
 8009736:	637b      	str	r3, [r7, #52]	@ 0x34
 8009738:	e01e      	b.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800973a:	4b57      	ldr	r3, [pc, #348]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009746:	d106      	bne.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 8009748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800974a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800974e:	d102      	bne.n	8009756 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 8009750:	4b53      	ldr	r3, [pc, #332]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009752:	637b      	str	r3, [r7, #52]	@ 0x34
 8009754:	e010      	b.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8009756:	4b50      	ldr	r3, [pc, #320]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800975e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009762:	d106      	bne.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 8009764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009766:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800976a:	d102      	bne.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800976c:	4b4d      	ldr	r3, [pc, #308]	@ (80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800976e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009770:	e002      	b.n	8009778 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 8009772:	2300      	movs	r3, #0
 8009774:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009776:	e186      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009778:	e185      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800977a:	4b47      	ldr	r3, [pc, #284]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800977c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009780:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009784:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009788:	2b00      	cmp	r3, #0
 800978a:	d103      	bne.n	8009794 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800978c:	f7fb fa36 	bl	8004bfc <HAL_RCC_GetPCLK2Freq>
 8009790:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 8009792:	e178      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009794:	4b40      	ldr	r3, [pc, #256]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800979c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80097a0:	d10b      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 80097a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097a8:	d107      	bne.n	80097ba <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097aa:	f107 0314 	add.w	r3, r7, #20
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7fd fb46 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80097b8:	e045      	b.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80097ba:	4b37      	ldr	r3, [pc, #220]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80097c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097c6:	d10b      	bne.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 80097c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097ce:	d107      	bne.n	80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097d0:	f107 0308 	add.w	r3, r7, #8
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7fd fc9f 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80097de:	e032      	b.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 80097e0:	4b2d      	ldr	r3, [pc, #180]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0302 	and.w	r3, r3, #2
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d10d      	bne.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 80097ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ee:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 80097f2:	d109      	bne.n	8009808 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097f4:	4b28      	ldr	r3, [pc, #160]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	08db      	lsrs	r3, r3, #3
 80097fa:	f003 0303 	and.w	r3, r3, #3
 80097fe:	4a27      	ldr	r2, [pc, #156]	@ (800989c <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 8009800:	fa22 f303 	lsr.w	r3, r2, r3
 8009804:	637b      	str	r3, [r7, #52]	@ 0x34
 8009806:	e01e      	b.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8009808:	4b23      	ldr	r3, [pc, #140]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009810:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009814:	d106      	bne.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 8009816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009818:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800981c:	d102      	bne.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800981e:	4b20      	ldr	r3, [pc, #128]	@ (80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 8009820:	637b      	str	r3, [r7, #52]	@ 0x34
 8009822:	e010      	b.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8009824:	4b1c      	ldr	r3, [pc, #112]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800982c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009830:	d106      	bne.n	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 8009832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009834:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009838:	d102      	bne.n	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800983a:	4b1a      	ldr	r3, [pc, #104]	@ (80098a4 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800983c:	637b      	str	r3, [r7, #52]	@ 0x34
 800983e:	e002      	b.n	8009846 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 8009840:	2300      	movs	r3, #0
 8009842:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009844:	e11f      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009846:	e11e      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8009848:	4b13      	ldr	r3, [pc, #76]	@ (8009898 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800984a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800984e:	f003 0303 	and.w	r3, r3, #3
 8009852:	633b      	str	r3, [r7, #48]	@ 0x30
 8009854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009856:	2b03      	cmp	r3, #3
 8009858:	d85f      	bhi.n	800991a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800985a:	a201      	add	r2, pc, #4	@ (adr r2, 8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800985c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009860:	08009871 	.word	0x08009871
 8009864:	08009879 	.word	0x08009879
 8009868:	08009889 	.word	0x08009889
 800986c:	080098a9 	.word	0x080098a9

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 8009870:	f7fb f992 	bl	8004b98 <HAL_RCC_GetHCLKFreq>
 8009874:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009876:	e053      	b.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009878:	f107 0320 	add.w	r3, r7, #32
 800987c:	4618      	mov	r0, r3
 800987e:	f7fd f973 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009884:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009886:	e04b      	b.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009888:	f107 0314 	add.w	r3, r7, #20
 800988c:	4618      	mov	r0, r3
 800988e:	f7fd fad7 	bl	8006e40 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009896:	e043      	b.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009898:	44020c00 	.word	0x44020c00
 800989c:	03d09000 	.word	0x03d09000
 80098a0:	003d0900 	.word	0x003d0900
 80098a4:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80098a8:	4b79      	ldr	r3, [pc, #484]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80098ae:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80098b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80098b4:	4b76      	ldr	r3, [pc, #472]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 0302 	and.w	r3, r3, #2
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d10c      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 80098c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d109      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80098c6:	4b72      	ldr	r3, [pc, #456]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	08db      	lsrs	r3, r3, #3
 80098cc:	f003 0303 	and.w	r3, r3, #3
 80098d0:	4a70      	ldr	r2, [pc, #448]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 80098d2:	fa22 f303 	lsr.w	r3, r2, r3
 80098d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d8:	e01e      	b.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098da:	4b6d      	ldr	r3, [pc, #436]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098e6:	d106      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 80098e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098ee:	d102      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80098f0:	4b69      	ldr	r3, [pc, #420]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098f4:	e010      	b.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098f6:	4b66      	ldr	r3, [pc, #408]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009902:	d106      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 8009904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009906:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800990a:	d102      	bne.n	8009912 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800990c:	4b63      	ldr	r3, [pc, #396]	@ (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800990e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009910:	e002      	b.n	8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8009912:	2300      	movs	r3, #0
 8009914:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009916:	e003      	b.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 8009918:	e002      	b.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800991a:	2300      	movs	r3, #0
 800991c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800991e:	bf00      	nop
          }
        }
        break;
 8009920:	e0b1      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8009922:	4b5b      	ldr	r3, [pc, #364]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009924:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009928:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800992c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800992e:	4b58      	ldr	r3, [pc, #352]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009930:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	2b02      	cmp	r3, #2
 800993a:	d106      	bne.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800993c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993e:	2b00      	cmp	r3, #0
 8009940:	d103      	bne.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 8009942:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009946:	637b      	str	r3, [r7, #52]	@ 0x34
 8009948:	e01f      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800994a:	4b51      	ldr	r3, [pc, #324]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800994c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009954:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009958:	d106      	bne.n	8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995c:	2b40      	cmp	r3, #64	@ 0x40
 800995e:	d103      	bne.n	8009968 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 8009960:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009964:	637b      	str	r3, [r7, #52]	@ 0x34
 8009966:	e010      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8009968:	4b49      	ldr	r3, [pc, #292]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009974:	d106      	bne.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 8009976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009978:	2b80      	cmp	r3, #128	@ 0x80
 800997a:	d103      	bne.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800997c:	f248 0312 	movw	r3, #32786	@ 0x8012
 8009980:	637b      	str	r3, [r7, #52]	@ 0x34
 8009982:	e002      	b.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 8009984:	2300      	movs	r3, #0
 8009986:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009988:	e07d      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800998a:	e07c      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800998c:	4b40      	ldr	r3, [pc, #256]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800998e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009992:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009996:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009998:	4b3d      	ldr	r3, [pc, #244]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80099a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80099a4:	d105      	bne.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 80099a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d102      	bne.n	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 80099ac:	4b3c      	ldr	r3, [pc, #240]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 80099ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80099b0:	e031      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 80099b2:	4b37      	ldr	r3, [pc, #220]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80099ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80099be:	d10a      	bne.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 80099c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c2:	2b10      	cmp	r3, #16
 80099c4:	d107      	bne.n	80099d6 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80099c6:	f107 0320 	add.w	r3, r7, #32
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fd f8cc 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80099d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80099d4:	e01f      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 80099d6:	4b2e      	ldr	r3, [pc, #184]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80099d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099dc:	f003 0302 	and.w	r3, r3, #2
 80099e0:	2b02      	cmp	r3, #2
 80099e2:	d106      	bne.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 80099e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e6:	2b20      	cmp	r3, #32
 80099e8:	d103      	bne.n	80099f2 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 80099ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f0:	e011      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 80099f2:	4b27      	ldr	r3, [pc, #156]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 80099f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80099f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80099fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a00:	d106      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 8009a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a04:	2b30      	cmp	r3, #48	@ 0x30
 8009a06:	d103      	bne.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 8009a08:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009a0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a0e:	e002      	b.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 8009a10:	2300      	movs	r3, #0
 8009a12:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009a14:	e037      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a16:	e036      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009a18:	4b1d      	ldr	r3, [pc, #116]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009a1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a1e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009a22:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8009a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a26:	2b10      	cmp	r3, #16
 8009a28:	d107      	bne.n	8009a3a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a2a:	f107 0320 	add.w	r3, r7, #32
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7fd f89a 	bl	8006b68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a36:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8009a38:	e025      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009a3a:	4b15      	ldr	r3, [pc, #84]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a46:	d10a      	bne.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 8009a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a4a:	2b20      	cmp	r3, #32
 8009a4c:	d107      	bne.n	8009a5e <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009a4e:	f107 0308 	add.w	r3, r7, #8
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fd fb60 	bl	8007118 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a5c:	e00f      	b.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8009a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a6a:	d105      	bne.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6e:	2b30      	cmp	r3, #48	@ 0x30
 8009a70:	d102      	bne.n	8009a78 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 8009a72:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 8009a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a76:	e002      	b.n	8009a7e <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 8009a7c:	e003      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a7e:	e002      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 8009a80:	2300      	movs	r3, #0
 8009a82:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a84:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 8009a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	373c      	adds	r7, #60	@ 0x3c
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd90      	pop	{r4, r7, pc}
 8009a90:	44020c00 	.word	0x44020c00
 8009a94:	03d09000 	.word	0x03d09000
 8009a98:	003d0900 	.word	0x003d0900
 8009a9c:	007a1200 	.word	0x007a1200
 8009aa0:	02dc6c00 	.word	0x02dc6c00

08009aa4 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 8009aac:	4b48      	ldr	r3, [pc, #288]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a47      	ldr	r2, [pc, #284]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009ab2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009ab6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ab8:	f7f7 ff6a 	bl	8001990 <HAL_GetTick>
 8009abc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009abe:	e008      	b.n	8009ad2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ac0:	f7f7 ff66 	bl	8001990 <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	2b02      	cmp	r3, #2
 8009acc:	d901      	bls.n	8009ad2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009ace:	2303      	movs	r3, #3
 8009ad0:	e07a      	b.n	8009bc8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1f0      	bne.n	8009ac0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8009ade:	4b3c      	ldr	r3, [pc, #240]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ae2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009ae6:	f023 0303 	bic.w	r3, r3, #3
 8009aea:	687a      	ldr	r2, [r7, #4]
 8009aec:	6811      	ldr	r1, [r2, #0]
 8009aee:	687a      	ldr	r2, [r7, #4]
 8009af0:	6852      	ldr	r2, [r2, #4]
 8009af2:	0212      	lsls	r2, r2, #8
 8009af4:	430a      	orrs	r2, r1
 8009af6:	4936      	ldr	r1, [pc, #216]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	689b      	ldr	r3, [r3, #8]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	025b      	lsls	r3, r3, #9
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	431a      	orrs	r2, r3
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	691b      	ldr	r3, [r3, #16]
 8009b16:	3b01      	subs	r3, #1
 8009b18:	041b      	lsls	r3, r3, #16
 8009b1a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b1e:	431a      	orrs	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	695b      	ldr	r3, [r3, #20]
 8009b24:	3b01      	subs	r3, #1
 8009b26:	061b      	lsls	r3, r3, #24
 8009b28:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b2c:	4928      	ldr	r1, [pc, #160]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8009b32:	4b27      	ldr	r3, [pc, #156]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b36:	f023 020c 	bic.w	r2, r3, #12
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	699b      	ldr	r3, [r3, #24]
 8009b3e:	4924      	ldr	r1, [pc, #144]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b40:	4313      	orrs	r3, r2
 8009b42:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8009b44:	4b22      	ldr	r3, [pc, #136]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b48:	f023 0220 	bic.w	r2, r3, #32
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	491f      	ldr	r1, [pc, #124]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b52:	4313      	orrs	r3, r2
 8009b54:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009b56:	4b1e      	ldr	r3, [pc, #120]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b5e:	491c      	ldr	r1, [pc, #112]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b60:	4313      	orrs	r3, r2
 8009b62:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8009b64:	4b1a      	ldr	r3, [pc, #104]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b68:	4a19      	ldr	r2, [pc, #100]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b6a:	f023 0310 	bic.w	r3, r3, #16
 8009b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8009b70:	4b17      	ldr	r3, [pc, #92]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b74:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009b78:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	6a12      	ldr	r2, [r2, #32]
 8009b80:	00d2      	lsls	r2, r2, #3
 8009b82:	4913      	ldr	r1, [pc, #76]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8009b88:	4b11      	ldr	r3, [pc, #68]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8c:	4a10      	ldr	r2, [pc, #64]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b8e:	f043 0310 	orr.w	r3, r3, #16
 8009b92:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8009b94:	4b0e      	ldr	r3, [pc, #56]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a0d      	ldr	r2, [pc, #52]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009b9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009b9e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ba0:	f7f7 fef6 	bl	8001990 <HAL_GetTick>
 8009ba4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ba6:	e008      	b.n	8009bba <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ba8:	f7f7 fef2 	bl	8001990 <HAL_GetTick>
 8009bac:	4602      	mov	r2, r0
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d901      	bls.n	8009bba <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e006      	b.n	8009bc8 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bba:	4b05      	ldr	r3, [pc, #20]	@ (8009bd0 <RCCEx_PLL2_Config+0x12c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d0f0      	beq.n	8009ba8 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0

}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3710      	adds	r7, #16
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	44020c00 	.word	0x44020c00

08009bd4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 8009bdc:	4b48      	ldr	r3, [pc, #288]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a47      	ldr	r2, [pc, #284]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009be2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009be6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009be8:	f7f7 fed2 	bl	8001990 <HAL_GetTick>
 8009bec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bee:	e008      	b.n	8009c02 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bf0:	f7f7 fece 	bl	8001990 <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	2b02      	cmp	r3, #2
 8009bfc:	d901      	bls.n	8009c02 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	e07a      	b.n	8009cf8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c02:	4b3f      	ldr	r3, [pc, #252]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d1f0      	bne.n	8009bf0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8009c0e:	4b3c      	ldr	r3, [pc, #240]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c12:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009c16:	f023 0303 	bic.w	r3, r3, #3
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	6811      	ldr	r1, [r2, #0]
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	6852      	ldr	r2, [r2, #4]
 8009c22:	0212      	lsls	r2, r2, #8
 8009c24:	430a      	orrs	r2, r1
 8009c26:	4936      	ldr	r1, [pc, #216]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	630b      	str	r3, [r1, #48]	@ 0x30
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	3b01      	subs	r3, #1
 8009c3c:	025b      	lsls	r3, r3, #9
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	431a      	orrs	r2, r3
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	691b      	ldr	r3, [r3, #16]
 8009c46:	3b01      	subs	r3, #1
 8009c48:	041b      	lsls	r3, r3, #16
 8009c4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	3b01      	subs	r3, #1
 8009c56:	061b      	lsls	r3, r3, #24
 8009c58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009c5c:	4928      	ldr	r1, [pc, #160]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c62:	4b27      	ldr	r3, [pc, #156]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c66:	f023 020c 	bic.w	r2, r3, #12
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	4924      	ldr	r1, [pc, #144]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009c70:	4313      	orrs	r3, r2
 8009c72:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8009c74:	4b22      	ldr	r3, [pc, #136]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c78:	f023 0220 	bic.w	r2, r3, #32
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	69db      	ldr	r3, [r3, #28]
 8009c80:	491f      	ldr	r1, [pc, #124]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009c82:	4313      	orrs	r3, r2
 8009c84:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009c86:	4b1e      	ldr	r3, [pc, #120]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009c88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8e:	491c      	ldr	r1, [pc, #112]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009c90:	4313      	orrs	r3, r2
 8009c92:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8009c94:	4b1a      	ldr	r3, [pc, #104]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c98:	4a19      	ldr	r2, [pc, #100]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009c9a:	f023 0310 	bic.w	r3, r3, #16
 8009c9e:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8009ca0:	4b17      	ldr	r3, [pc, #92]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ca4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009ca8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	6a12      	ldr	r2, [r2, #32]
 8009cb0:	00d2      	lsls	r2, r2, #3
 8009cb2:	4913      	ldr	r1, [pc, #76]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8009cb8:	4b11      	ldr	r3, [pc, #68]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cbc:	4a10      	ldr	r2, [pc, #64]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009cbe:	f043 0310 	orr.w	r3, r3, #16
 8009cc2:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8009cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009cd0:	f7f7 fe5e 	bl	8001990 <HAL_GetTick>
 8009cd4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cd6:	e008      	b.n	8009cea <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009cd8:	f7f7 fe5a 	bl	8001990 <HAL_GetTick>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	1ad3      	subs	r3, r2, r3
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d901      	bls.n	8009cea <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e006      	b.n	8009cf8 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cea:	4b05      	ldr	r3, [pc, #20]	@ (8009d00 <RCCEx_PLL3_Config+0x12c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0f0      	beq.n	8009cd8 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3710      	adds	r7, #16
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	44020c00 	.word	0x44020c00

08009d04 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d101      	bne.n	8009d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	e162      	b.n	8009fdc <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a70      	ldr	r2, [pc, #448]	@ (8009edc <HAL_SPI_Init+0x1d8>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d018      	beq.n	8009d52 <HAL_SPI_Init+0x4e>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a6e      	ldr	r2, [pc, #440]	@ (8009ee0 <HAL_SPI_Init+0x1dc>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d013      	beq.n	8009d52 <HAL_SPI_Init+0x4e>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a6d      	ldr	r2, [pc, #436]	@ (8009ee4 <HAL_SPI_Init+0x1e0>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d00e      	beq.n	8009d52 <HAL_SPI_Init+0x4e>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	4a6b      	ldr	r2, [pc, #428]	@ (8009ee8 <HAL_SPI_Init+0x1e4>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d009      	beq.n	8009d52 <HAL_SPI_Init+0x4e>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a6a      	ldr	r2, [pc, #424]	@ (8009eec <HAL_SPI_Init+0x1e8>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d004      	beq.n	8009d52 <HAL_SPI_Init+0x4e>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a68      	ldr	r2, [pc, #416]	@ (8009ef0 <HAL_SPI_Init+0x1ec>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	e000      	b.n	8009d54 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8009d52:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a5f      	ldr	r2, [pc, #380]	@ (8009edc <HAL_SPI_Init+0x1d8>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d018      	beq.n	8009d96 <HAL_SPI_Init+0x92>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a5d      	ldr	r2, [pc, #372]	@ (8009ee0 <HAL_SPI_Init+0x1dc>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d013      	beq.n	8009d96 <HAL_SPI_Init+0x92>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a5c      	ldr	r2, [pc, #368]	@ (8009ee4 <HAL_SPI_Init+0x1e0>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d00e      	beq.n	8009d96 <HAL_SPI_Init+0x92>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8009ee8 <HAL_SPI_Init+0x1e4>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d009      	beq.n	8009d96 <HAL_SPI_Init+0x92>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a59      	ldr	r2, [pc, #356]	@ (8009eec <HAL_SPI_Init+0x1e8>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d004      	beq.n	8009d96 <HAL_SPI_Init+0x92>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a57      	ldr	r2, [pc, #348]	@ (8009ef0 <HAL_SPI_Init+0x1ec>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d105      	bne.n	8009da2 <HAL_SPI_Init+0x9e>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	68db      	ldr	r3, [r3, #12]
 8009d9a:	2b0f      	cmp	r3, #15
 8009d9c:	d901      	bls.n	8009da2 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e11c      	b.n	8009fdc <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f91e 	bl	8009fe4 <SPI_GetPacketSize>
 8009da8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a4b      	ldr	r2, [pc, #300]	@ (8009edc <HAL_SPI_Init+0x1d8>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d018      	beq.n	8009de6 <HAL_SPI_Init+0xe2>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	4a49      	ldr	r2, [pc, #292]	@ (8009ee0 <HAL_SPI_Init+0x1dc>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d013      	beq.n	8009de6 <HAL_SPI_Init+0xe2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a48      	ldr	r2, [pc, #288]	@ (8009ee4 <HAL_SPI_Init+0x1e0>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d00e      	beq.n	8009de6 <HAL_SPI_Init+0xe2>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	4a46      	ldr	r2, [pc, #280]	@ (8009ee8 <HAL_SPI_Init+0x1e4>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d009      	beq.n	8009de6 <HAL_SPI_Init+0xe2>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a45      	ldr	r2, [pc, #276]	@ (8009eec <HAL_SPI_Init+0x1e8>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d004      	beq.n	8009de6 <HAL_SPI_Init+0xe2>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a43      	ldr	r2, [pc, #268]	@ (8009ef0 <HAL_SPI_Init+0x1ec>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d102      	bne.n	8009dec <HAL_SPI_Init+0xe8>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2b08      	cmp	r3, #8
 8009dea:	d820      	bhi.n	8009e2e <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009df0:	4a40      	ldr	r2, [pc, #256]	@ (8009ef4 <HAL_SPI_Init+0x1f0>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d018      	beq.n	8009e28 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a3f      	ldr	r2, [pc, #252]	@ (8009ef8 <HAL_SPI_Init+0x1f4>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d013      	beq.n	8009e28 <HAL_SPI_Init+0x124>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a3d      	ldr	r2, [pc, #244]	@ (8009efc <HAL_SPI_Init+0x1f8>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d00e      	beq.n	8009e28 <HAL_SPI_Init+0x124>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a3c      	ldr	r2, [pc, #240]	@ (8009f00 <HAL_SPI_Init+0x1fc>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d009      	beq.n	8009e28 <HAL_SPI_Init+0x124>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a3a      	ldr	r2, [pc, #232]	@ (8009f04 <HAL_SPI_Init+0x200>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d004      	beq.n	8009e28 <HAL_SPI_Init+0x124>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a39      	ldr	r2, [pc, #228]	@ (8009f08 <HAL_SPI_Init+0x204>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d104      	bne.n	8009e32 <HAL_SPI_Init+0x12e>
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2b10      	cmp	r3, #16
 8009e2c:	d901      	bls.n	8009e32 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e0d4      	b.n	8009fdc <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d106      	bne.n	8009e4c <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f7f6 ffbc 	bl	8000dc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2202      	movs	r2, #2
 8009e50:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	681a      	ldr	r2, [r3, #0]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f022 0201 	bic.w	r2, r2, #1
 8009e62:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009e6e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	699b      	ldr	r3, [r3, #24]
 8009e74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009e78:	d119      	bne.n	8009eae <HAL_SPI_Init+0x1aa>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e82:	d103      	bne.n	8009e8c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d008      	beq.n	8009e9e <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10c      	bne.n	8009eae <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009e98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e9c:	d107      	bne.n	8009eae <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009eac:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d028      	beq.n	8009f0c <HAL_SPI_Init+0x208>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	2b06      	cmp	r3, #6
 8009ec0:	d924      	bls.n	8009f0c <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	430a      	orrs	r2, r1
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	e020      	b.n	8009f1c <HAL_SPI_Init+0x218>
 8009eda:	bf00      	nop
 8009edc:	40014c00 	.word	0x40014c00
 8009ee0:	50014c00 	.word	0x50014c00
 8009ee4:	44002000 	.word	0x44002000
 8009ee8:	54002000 	.word	0x54002000
 8009eec:	40015000 	.word	0x40015000
 8009ef0:	50015000 	.word	0x50015000
 8009ef4:	40013000 	.word	0x40013000
 8009ef8:	50013000 	.word	0x50013000
 8009efc:	40003800 	.word	0x40003800
 8009f00:	50003800 	.word	0x50003800
 8009f04:	40003c00 	.word	0x40003c00
 8009f08:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009f1a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	69da      	ldr	r2, [r3, #28]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f24:	431a      	orrs	r2, r3
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	431a      	orrs	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f2e:	ea42 0103 	orr.w	r1, r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	68da      	ldr	r2, [r3, #12]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	430a      	orrs	r2, r1
 8009f3c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f46:	431a      	orrs	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f4c:	431a      	orrs	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	691b      	ldr	r3, [r3, #16]
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	695b      	ldr	r3, [r3, #20]
 8009f5e:	431a      	orrs	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6a1b      	ldr	r3, [r3, #32]
 8009f64:	431a      	orrs	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	685b      	ldr	r3, [r3, #4]
 8009f6a:	431a      	orrs	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f70:	431a      	orrs	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	431a      	orrs	r2, r3
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f7c:	431a      	orrs	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f82:	431a      	orrs	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f88:	ea42 0103 	orr.w	r1, r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	430a      	orrs	r2, r1
 8009f96:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f022 0201 	bic.w	r2, r2, #1
 8009fa6:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00a      	beq.n	8009fca <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b085      	sub	sp, #20
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ff0:	095b      	lsrs	r3, r3, #5
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	3307      	adds	r3, #7
 800a002:	08db      	lsrs	r3, r3, #3
 800a004:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	68fa      	ldr	r2, [r7, #12]
 800a00a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b082      	sub	sp, #8
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d101      	bne.n	800a02c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e042      	b.n	800a0b2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a032:	2b00      	cmp	r3, #0
 800a034:	d106      	bne.n	800a044 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2200      	movs	r2, #0
 800a03a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f7f6 ff7c 	bl	8000f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2224      	movs	r2, #36	@ 0x24
 800a048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	f022 0201 	bic.w	r2, r2, #1
 800a05a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fa17 	bl	800a498 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f826 	bl	800a0bc <UART_SetConfig>
 800a070:	4603      	mov	r3, r0
 800a072:	2b01      	cmp	r3, #1
 800a074:	d101      	bne.n	800a07a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e01b      	b.n	800a0b2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a088:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	689a      	ldr	r2, [r3, #8]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a098:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f042 0201 	orr.w	r2, r2, #1
 800a0a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fa96 	bl	800a5dc <UART_CheckIdleState>
 800a0b0:	4603      	mov	r3, r0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
	...

0800a0bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0c0:	b094      	sub	sp, #80	@ 0x50
 800a0c2:	af00      	add	r7, sp, #0
 800a0c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	4b78      	ldr	r3, [pc, #480]	@ (800a2b4 <UART_SetConfig+0x1f8>)
 800a0d2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	431a      	orrs	r2, r3
 800a0de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e0:	695b      	ldr	r3, [r3, #20]
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e6:	69db      	ldr	r3, [r3, #28]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4971      	ldr	r1, [pc, #452]	@ (800a2b8 <UART_SetConfig+0x1fc>)
 800a0f4:	4019      	ands	r1, r3
 800a0f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a0fc:	430b      	orrs	r3, r1
 800a0fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	685b      	ldr	r3, [r3, #4]
 800a106:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a10a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a10c:	68d9      	ldr	r1, [r3, #12]
 800a10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	ea40 0301 	orr.w	r3, r0, r1
 800a116:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a11a:	699b      	ldr	r3, [r3, #24]
 800a11c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	4b64      	ldr	r3, [pc, #400]	@ (800a2b4 <UART_SetConfig+0x1f8>)
 800a124:	429a      	cmp	r2, r3
 800a126:	d009      	beq.n	800a13c <UART_SetConfig+0x80>
 800a128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	4b63      	ldr	r3, [pc, #396]	@ (800a2bc <UART_SetConfig+0x200>)
 800a12e:	429a      	cmp	r2, r3
 800a130:	d004      	beq.n	800a13c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a134:	6a1a      	ldr	r2, [r3, #32]
 800a136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a138:	4313      	orrs	r3, r2
 800a13a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800a146:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800a14a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a150:	430b      	orrs	r3, r1
 800a152:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a15a:	f023 000f 	bic.w	r0, r3, #15
 800a15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a160:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	ea40 0301 	orr.w	r3, r0, r1
 800a16a:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a16c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	4b53      	ldr	r3, [pc, #332]	@ (800a2c0 <UART_SetConfig+0x204>)
 800a172:	429a      	cmp	r2, r3
 800a174:	d102      	bne.n	800a17c <UART_SetConfig+0xc0>
 800a176:	2301      	movs	r3, #1
 800a178:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a17a:	e066      	b.n	800a24a <UART_SetConfig+0x18e>
 800a17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	4b50      	ldr	r3, [pc, #320]	@ (800a2c4 <UART_SetConfig+0x208>)
 800a182:	429a      	cmp	r2, r3
 800a184:	d102      	bne.n	800a18c <UART_SetConfig+0xd0>
 800a186:	2302      	movs	r3, #2
 800a188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a18a:	e05e      	b.n	800a24a <UART_SetConfig+0x18e>
 800a18c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	4b4d      	ldr	r3, [pc, #308]	@ (800a2c8 <UART_SetConfig+0x20c>)
 800a192:	429a      	cmp	r2, r3
 800a194:	d102      	bne.n	800a19c <UART_SetConfig+0xe0>
 800a196:	2304      	movs	r3, #4
 800a198:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a19a:	e056      	b.n	800a24a <UART_SetConfig+0x18e>
 800a19c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	4b4a      	ldr	r3, [pc, #296]	@ (800a2cc <UART_SetConfig+0x210>)
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d102      	bne.n	800a1ac <UART_SetConfig+0xf0>
 800a1a6:	2308      	movs	r3, #8
 800a1a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1aa:	e04e      	b.n	800a24a <UART_SetConfig+0x18e>
 800a1ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	4b47      	ldr	r3, [pc, #284]	@ (800a2d0 <UART_SetConfig+0x214>)
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d102      	bne.n	800a1bc <UART_SetConfig+0x100>
 800a1b6:	2310      	movs	r3, #16
 800a1b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1ba:	e046      	b.n	800a24a <UART_SetConfig+0x18e>
 800a1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	4b44      	ldr	r3, [pc, #272]	@ (800a2d4 <UART_SetConfig+0x218>)
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d102      	bne.n	800a1cc <UART_SetConfig+0x110>
 800a1c6:	2320      	movs	r3, #32
 800a1c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1ca:	e03e      	b.n	800a24a <UART_SetConfig+0x18e>
 800a1cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	4b41      	ldr	r3, [pc, #260]	@ (800a2d8 <UART_SetConfig+0x21c>)
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d102      	bne.n	800a1dc <UART_SetConfig+0x120>
 800a1d6:	2340      	movs	r3, #64	@ 0x40
 800a1d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1da:	e036      	b.n	800a24a <UART_SetConfig+0x18e>
 800a1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	4b3e      	ldr	r3, [pc, #248]	@ (800a2dc <UART_SetConfig+0x220>)
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d102      	bne.n	800a1ec <UART_SetConfig+0x130>
 800a1e6:	2380      	movs	r3, #128	@ 0x80
 800a1e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1ea:	e02e      	b.n	800a24a <UART_SetConfig+0x18e>
 800a1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	4b3b      	ldr	r3, [pc, #236]	@ (800a2e0 <UART_SetConfig+0x224>)
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d103      	bne.n	800a1fe <UART_SetConfig+0x142>
 800a1f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a1fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1fc:	e025      	b.n	800a24a <UART_SetConfig+0x18e>
 800a1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	4b38      	ldr	r3, [pc, #224]	@ (800a2e4 <UART_SetConfig+0x228>)
 800a204:	429a      	cmp	r2, r3
 800a206:	d103      	bne.n	800a210 <UART_SetConfig+0x154>
 800a208:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a20c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a20e:	e01c      	b.n	800a24a <UART_SetConfig+0x18e>
 800a210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	4b34      	ldr	r3, [pc, #208]	@ (800a2e8 <UART_SetConfig+0x22c>)
 800a216:	429a      	cmp	r2, r3
 800a218:	d103      	bne.n	800a222 <UART_SetConfig+0x166>
 800a21a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a21e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a220:	e013      	b.n	800a24a <UART_SetConfig+0x18e>
 800a222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	4b31      	ldr	r3, [pc, #196]	@ (800a2ec <UART_SetConfig+0x230>)
 800a228:	429a      	cmp	r2, r3
 800a22a:	d103      	bne.n	800a234 <UART_SetConfig+0x178>
 800a22c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a230:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a232:	e00a      	b.n	800a24a <UART_SetConfig+0x18e>
 800a234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	4b1e      	ldr	r3, [pc, #120]	@ (800a2b4 <UART_SetConfig+0x1f8>)
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d103      	bne.n	800a246 <UART_SetConfig+0x18a>
 800a23e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a242:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a244:	e001      	b.n	800a24a <UART_SetConfig+0x18e>
 800a246:	2300      	movs	r3, #0
 800a248:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	4b19      	ldr	r3, [pc, #100]	@ (800a2b4 <UART_SetConfig+0x1f8>)
 800a250:	429a      	cmp	r2, r3
 800a252:	d005      	beq.n	800a260 <UART_SetConfig+0x1a4>
 800a254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	4b18      	ldr	r3, [pc, #96]	@ (800a2bc <UART_SetConfig+0x200>)
 800a25a:	429a      	cmp	r2, r3
 800a25c:	f040 8094 	bne.w	800a388 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a262:	2200      	movs	r2, #0
 800a264:	623b      	str	r3, [r7, #32]
 800a266:	627a      	str	r2, [r7, #36]	@ 0x24
 800a268:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a26c:	f7fd f8c0 	bl	80073f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a270:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a272:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a274:	2b00      	cmp	r3, #0
 800a276:	f000 80f7 	beq.w	800a468 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27e:	4a1c      	ldr	r2, [pc, #112]	@ (800a2f0 <UART_SetConfig+0x234>)
 800a280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a284:	461a      	mov	r2, r3
 800a286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a288:	fbb3 f3f2 	udiv	r3, r3, r2
 800a28c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a290:	685a      	ldr	r2, [r3, #4]
 800a292:	4613      	mov	r3, r2
 800a294:	005b      	lsls	r3, r3, #1
 800a296:	4413      	add	r3, r2
 800a298:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d305      	bcc.n	800a2aa <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a29e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a2a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d924      	bls.n	800a2f4 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a2b0:	e069      	b.n	800a386 <UART_SetConfig+0x2ca>
 800a2b2:	bf00      	nop
 800a2b4:	44002400 	.word	0x44002400
 800a2b8:	cfff69f3 	.word	0xcfff69f3
 800a2bc:	54002400 	.word	0x54002400
 800a2c0:	40013800 	.word	0x40013800
 800a2c4:	40004400 	.word	0x40004400
 800a2c8:	40004800 	.word	0x40004800
 800a2cc:	40004c00 	.word	0x40004c00
 800a2d0:	40005000 	.word	0x40005000
 800a2d4:	40006400 	.word	0x40006400
 800a2d8:	40007800 	.word	0x40007800
 800a2dc:	40007c00 	.word	0x40007c00
 800a2e0:	40008000 	.word	0x40008000
 800a2e4:	40006800 	.word	0x40006800
 800a2e8:	40006c00 	.word	0x40006c00
 800a2ec:	40008400 	.word	0x40008400
 800a2f0:	0800fb04 	.word	0x0800fb04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a2f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	61bb      	str	r3, [r7, #24]
 800a2fa:	61fa      	str	r2, [r7, #28]
 800a2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a300:	4a64      	ldr	r2, [pc, #400]	@ (800a494 <UART_SetConfig+0x3d8>)
 800a302:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a306:	b29b      	uxth	r3, r3
 800a308:	2200      	movs	r2, #0
 800a30a:	613b      	str	r3, [r7, #16]
 800a30c:	617a      	str	r2, [r7, #20]
 800a30e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a312:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a316:	f7f5 ffc1 	bl	800029c <__aeabi_uldivmod>
 800a31a:	4602      	mov	r2, r0
 800a31c:	460b      	mov	r3, r1
 800a31e:	4610      	mov	r0, r2
 800a320:	4619      	mov	r1, r3
 800a322:	f04f 0200 	mov.w	r2, #0
 800a326:	f04f 0300 	mov.w	r3, #0
 800a32a:	020b      	lsls	r3, r1, #8
 800a32c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a330:	0202      	lsls	r2, r0, #8
 800a332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a334:	6849      	ldr	r1, [r1, #4]
 800a336:	0849      	lsrs	r1, r1, #1
 800a338:	2000      	movs	r0, #0
 800a33a:	460c      	mov	r4, r1
 800a33c:	4605      	mov	r5, r0
 800a33e:	eb12 0804 	adds.w	r8, r2, r4
 800a342:	eb43 0905 	adc.w	r9, r3, r5
 800a346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	2200      	movs	r2, #0
 800a34c:	60bb      	str	r3, [r7, #8]
 800a34e:	60fa      	str	r2, [r7, #12]
 800a350:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a354:	4640      	mov	r0, r8
 800a356:	4649      	mov	r1, r9
 800a358:	f7f5 ffa0 	bl	800029c <__aeabi_uldivmod>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4613      	mov	r3, r2
 800a362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a366:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a36a:	d308      	bcc.n	800a37e <UART_SetConfig+0x2c2>
 800a36c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a36e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a372:	d204      	bcs.n	800a37e <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800a374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a37a:	60da      	str	r2, [r3, #12]
 800a37c:	e003      	b.n	800a386 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800a384:	e070      	b.n	800a468 <UART_SetConfig+0x3ac>
 800a386:	e06f      	b.n	800a468 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a38a:	69db      	ldr	r3, [r3, #28]
 800a38c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a390:	d13c      	bne.n	800a40c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a392:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a394:	2200      	movs	r2, #0
 800a396:	603b      	str	r3, [r7, #0]
 800a398:	607a      	str	r2, [r7, #4]
 800a39a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a39e:	f7fd f827 	bl	80073f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a3a2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a3a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d05e      	beq.n	800a468 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ae:	4a39      	ldr	r2, [pc, #228]	@ (800a494 <UART_SetConfig+0x3d8>)
 800a3b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3bc:	005a      	lsls	r2, r3, #1
 800a3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	085b      	lsrs	r3, r3, #1
 800a3c4:	441a      	add	r2, r3
 800a3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d2:	2b0f      	cmp	r3, #15
 800a3d4:	d916      	bls.n	800a404 <UART_SetConfig+0x348>
 800a3d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3dc:	d212      	bcs.n	800a404 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	f023 030f 	bic.w	r3, r3, #15
 800a3e6:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ea:	085b      	lsrs	r3, r3, #1
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	f003 0307 	and.w	r3, r3, #7
 800a3f2:	b29a      	uxth	r2, r3
 800a3f4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800a3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800a400:	60da      	str	r2, [r3, #12]
 800a402:	e031      	b.n	800a468 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a40a:	e02d      	b.n	800a468 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a40c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a40e:	2200      	movs	r2, #0
 800a410:	469a      	mov	sl, r3
 800a412:	4693      	mov	fp, r2
 800a414:	4650      	mov	r0, sl
 800a416:	4659      	mov	r1, fp
 800a418:	f7fc ffea 	bl	80073f0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a41c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800a41e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a420:	2b00      	cmp	r3, #0
 800a422:	d021      	beq.n	800a468 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a428:	4a1a      	ldr	r2, [pc, #104]	@ (800a494 <UART_SetConfig+0x3d8>)
 800a42a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a42e:	461a      	mov	r2, r3
 800a430:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a432:	fbb3 f2f2 	udiv	r2, r3, r2
 800a436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	085b      	lsrs	r3, r3, #1
 800a43c:	441a      	add	r2, r3
 800a43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	fbb2 f3f3 	udiv	r3, r2, r3
 800a446:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a448:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a44a:	2b0f      	cmp	r3, #15
 800a44c:	d909      	bls.n	800a462 <UART_SetConfig+0x3a6>
 800a44e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a454:	d205      	bcs.n	800a462 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a458:	b29a      	uxth	r2, r3
 800a45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	60da      	str	r2, [r3, #12]
 800a460:	e002      	b.n	800a468 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a46a:	2201      	movs	r2, #1
 800a46c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a472:	2201      	movs	r2, #1
 800a474:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a47a:	2200      	movs	r2, #0
 800a47c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a480:	2200      	movs	r2, #0
 800a482:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a484:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3750      	adds	r7, #80	@ 0x50
 800a48c:	46bd      	mov	sp, r7
 800a48e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a492:	bf00      	nop
 800a494:	0800fb04 	.word	0x0800fb04

0800a498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a498:	b480      	push	{r7}
 800a49a:	b083      	sub	sp, #12
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a4:	f003 0308 	and.w	r3, r3, #8
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00a      	beq.n	800a4c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	430a      	orrs	r2, r1
 800a4c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00a      	beq.n	800a4e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	430a      	orrs	r2, r1
 800a4e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4e8:	f003 0302 	and.w	r3, r3, #2
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00a      	beq.n	800a506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	685b      	ldr	r3, [r3, #4]
 800a4f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	430a      	orrs	r2, r1
 800a504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a50a:	f003 0304 	and.w	r3, r3, #4
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d00a      	beq.n	800a528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	430a      	orrs	r2, r1
 800a526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a52c:	f003 0310 	and.w	r3, r3, #16
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00a      	beq.n	800a54a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	430a      	orrs	r2, r1
 800a548:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a54e:	f003 0320 	and.w	r3, r3, #32
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	430a      	orrs	r2, r1
 800a56a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a574:	2b00      	cmp	r3, #0
 800a576:	d01a      	beq.n	800a5ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	430a      	orrs	r2, r1
 800a58c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a592:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a596:	d10a      	bne.n	800a5ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	430a      	orrs	r2, r1
 800a5ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00a      	beq.n	800a5d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	430a      	orrs	r2, r1
 800a5ce:	605a      	str	r2, [r3, #4]
  }
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b098      	sub	sp, #96	@ 0x60
 800a5e0:	af02      	add	r7, sp, #8
 800a5e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5ec:	f7f7 f9d0 	bl	8001990 <HAL_GetTick>
 800a5f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0308 	and.w	r3, r3, #8
 800a5fc:	2b08      	cmp	r3, #8
 800a5fe:	d12f      	bne.n	800a660 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a600:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a608:	2200      	movs	r2, #0
 800a60a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f88e 	bl	800a730 <UART_WaitOnFlagUntilTimeout>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d022      	beq.n	800a660 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a622:	e853 3f00 	ldrex	r3, [r3]
 800a626:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a62a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a62e:	653b      	str	r3, [r7, #80]	@ 0x50
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	461a      	mov	r2, r3
 800a636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a638:	647b      	str	r3, [r7, #68]	@ 0x44
 800a63a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a63e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a640:	e841 2300 	strex	r3, r2, [r1]
 800a644:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a646:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d1e6      	bne.n	800a61a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2220      	movs	r2, #32
 800a650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a65c:	2303      	movs	r3, #3
 800a65e:	e063      	b.n	800a728 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 0304 	and.w	r3, r3, #4
 800a66a:	2b04      	cmp	r3, #4
 800a66c:	d149      	bne.n	800a702 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a66e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a672:	9300      	str	r3, [sp, #0]
 800a674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a676:	2200      	movs	r2, #0
 800a678:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 f857 	bl	800a730 <UART_WaitOnFlagUntilTimeout>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d03c      	beq.n	800a702 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a690:	e853 3f00 	ldrex	r3, [r3]
 800a694:	623b      	str	r3, [r7, #32]
   return(result);
 800a696:	6a3b      	ldr	r3, [r7, #32]
 800a698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a69c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a6a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a6ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6ae:	e841 2300 	strex	r3, r2, [r1]
 800a6b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1e6      	bne.n	800a688 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3308      	adds	r3, #8
 800a6c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	e853 3f00 	ldrex	r3, [r3]
 800a6c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f023 0301 	bic.w	r3, r3, #1
 800a6d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3308      	adds	r3, #8
 800a6d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a6da:	61fa      	str	r2, [r7, #28]
 800a6dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6de:	69b9      	ldr	r1, [r7, #24]
 800a6e0:	69fa      	ldr	r2, [r7, #28]
 800a6e2:	e841 2300 	strex	r3, r2, [r1]
 800a6e6:	617b      	str	r3, [r7, #20]
   return(result);
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1e5      	bne.n	800a6ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2220      	movs	r2, #32
 800a6f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a6fe:	2303      	movs	r3, #3
 800a700:	e012      	b.n	800a728 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2220      	movs	r2, #32
 800a706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2220      	movs	r2, #32
 800a70e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	2200      	movs	r2, #0
 800a716:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3758      	adds	r7, #88	@ 0x58
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	603b      	str	r3, [r7, #0]
 800a73c:	4613      	mov	r3, r2
 800a73e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a740:	e04f      	b.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a748:	d04b      	beq.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a74a:	f7f7 f921 	bl	8001990 <HAL_GetTick>
 800a74e:	4602      	mov	r2, r0
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	1ad3      	subs	r3, r2, r3
 800a754:	69ba      	ldr	r2, [r7, #24]
 800a756:	429a      	cmp	r2, r3
 800a758:	d302      	bcc.n	800a760 <UART_WaitOnFlagUntilTimeout+0x30>
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e04e      	b.n	800a802 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 0304 	and.w	r3, r3, #4
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d037      	beq.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2b80      	cmp	r3, #128	@ 0x80
 800a776:	d034      	beq.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	2b40      	cmp	r3, #64	@ 0x40
 800a77c:	d031      	beq.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	69db      	ldr	r3, [r3, #28]
 800a784:	f003 0308 	and.w	r3, r3, #8
 800a788:	2b08      	cmp	r3, #8
 800a78a:	d110      	bne.n	800a7ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	2208      	movs	r2, #8
 800a792:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a794:	68f8      	ldr	r0, [r7, #12]
 800a796:	f000 f838 	bl	800a80a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2208      	movs	r2, #8
 800a79e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	e029      	b.n	800a802 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a7b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a7bc:	d111      	bne.n	800a7e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a7c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f000 f81e 	bl	800a80a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2220      	movs	r2, #32
 800a7d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2200      	movs	r2, #0
 800a7da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	e00f      	b.n	800a802 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	69da      	ldr	r2, [r3, #28]
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	68ba      	ldr	r2, [r7, #8]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	bf0c      	ite	eq
 800a7f2:	2301      	moveq	r3, #1
 800a7f4:	2300      	movne	r3, #0
 800a7f6:	b2db      	uxtb	r3, r3
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	79fb      	ldrb	r3, [r7, #7]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d0a0      	beq.n	800a742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a800:	2300      	movs	r3, #0
}
 800a802:	4618      	mov	r0, r3
 800a804:	3710      	adds	r7, #16
 800a806:	46bd      	mov	sp, r7
 800a808:	bd80      	pop	{r7, pc}

0800a80a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a80a:	b480      	push	{r7}
 800a80c:	b095      	sub	sp, #84	@ 0x54
 800a80e:	af00      	add	r7, sp, #0
 800a810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a81a:	e853 3f00 	ldrex	r3, [r3]
 800a81e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a822:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	461a      	mov	r2, r3
 800a82e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a830:	643b      	str	r3, [r7, #64]	@ 0x40
 800a832:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a834:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a836:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a838:	e841 2300 	strex	r3, r2, [r1]
 800a83c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a83e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1e6      	bne.n	800a812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	3308      	adds	r3, #8
 800a84a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84c:	6a3b      	ldr	r3, [r7, #32]
 800a84e:	e853 3f00 	ldrex	r3, [r3]
 800a852:	61fb      	str	r3, [r7, #28]
   return(result);
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a85a:	f023 0301 	bic.w	r3, r3, #1
 800a85e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	3308      	adds	r3, #8
 800a866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a868:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a86a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a86c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a86e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a870:	e841 2300 	strex	r3, r2, [r1]
 800a874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1e3      	bne.n	800a844 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a880:	2b01      	cmp	r3, #1
 800a882:	d118      	bne.n	800a8b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	e853 3f00 	ldrex	r3, [r3]
 800a890:	60bb      	str	r3, [r7, #8]
   return(result);
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	f023 0310 	bic.w	r3, r3, #16
 800a898:	647b      	str	r3, [r7, #68]	@ 0x44
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	461a      	mov	r2, r3
 800a8a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8a2:	61bb      	str	r3, [r7, #24]
 800a8a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a6:	6979      	ldr	r1, [r7, #20]
 800a8a8:	69ba      	ldr	r2, [r7, #24]
 800a8aa:	e841 2300 	strex	r3, r2, [r1]
 800a8ae:	613b      	str	r3, [r7, #16]
   return(result);
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1e6      	bne.n	800a884 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2220      	movs	r2, #32
 800a8ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a8ca:	bf00      	nop
 800a8cc:	3754      	adds	r7, #84	@ 0x54
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b085      	sub	sp, #20
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d101      	bne.n	800a8ec <HAL_UARTEx_DisableFifoMode+0x16>
 800a8e8:	2302      	movs	r3, #2
 800a8ea:	e027      	b.n	800a93c <HAL_UARTEx_DisableFifoMode+0x66>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2224      	movs	r2, #36	@ 0x24
 800a8f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	f022 0201 	bic.w	r2, r2, #1
 800a912:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a91a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2220      	movs	r2, #32
 800a92e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a958:	2b01      	cmp	r3, #1
 800a95a:	d101      	bne.n	800a960 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a95c:	2302      	movs	r3, #2
 800a95e:	e02d      	b.n	800a9bc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2201      	movs	r2, #1
 800a964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2224      	movs	r2, #36	@ 0x24
 800a96c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f022 0201 	bic.w	r2, r2, #1
 800a986:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	430a      	orrs	r2, r1
 800a99a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 f84f 	bl	800aa40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2220      	movs	r2, #32
 800a9ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a9ba:	2300      	movs	r3, #0
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3710      	adds	r7, #16
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d101      	bne.n	800a9dc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9d8:	2302      	movs	r3, #2
 800a9da:	e02d      	b.n	800aa38 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2224      	movs	r2, #36	@ 0x24
 800a9e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f022 0201 	bic.w	r2, r2, #1
 800aa02:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	683a      	ldr	r2, [r7, #0]
 800aa14:	430a      	orrs	r2, r1
 800aa16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f000 f811 	bl	800aa40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	68fa      	ldr	r2, [r7, #12]
 800aa24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2220      	movs	r2, #32
 800aa2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800aa36:	2300      	movs	r3, #0
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d108      	bne.n	800aa62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa60:	e031      	b.n	800aac6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa62:	2308      	movs	r3, #8
 800aa64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa66:	2308      	movs	r3, #8
 800aa68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	689b      	ldr	r3, [r3, #8]
 800aa70:	0e5b      	lsrs	r3, r3, #25
 800aa72:	b2db      	uxtb	r3, r3
 800aa74:	f003 0307 	and.w	r3, r3, #7
 800aa78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	0f5b      	lsrs	r3, r3, #29
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f003 0307 	and.w	r3, r3, #7
 800aa88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa8a:	7bbb      	ldrb	r3, [r7, #14]
 800aa8c:	7b3a      	ldrb	r2, [r7, #12]
 800aa8e:	4911      	ldr	r1, [pc, #68]	@ (800aad4 <UARTEx_SetNbDataToProcess+0x94>)
 800aa90:	5c8a      	ldrb	r2, [r1, r2]
 800aa92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa96:	7b3a      	ldrb	r2, [r7, #12]
 800aa98:	490f      	ldr	r1, [pc, #60]	@ (800aad8 <UARTEx_SetNbDataToProcess+0x98>)
 800aa9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	7b7a      	ldrb	r2, [r7, #13]
 800aaac:	4909      	ldr	r1, [pc, #36]	@ (800aad4 <UARTEx_SetNbDataToProcess+0x94>)
 800aaae:	5c8a      	ldrb	r2, [r1, r2]
 800aab0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aab4:	7b7a      	ldrb	r2, [r7, #13]
 800aab6:	4908      	ldr	r1, [pc, #32]	@ (800aad8 <UARTEx_SetNbDataToProcess+0x98>)
 800aab8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaba:	fb93 f3f2 	sdiv	r3, r3, r2
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800aac6:	bf00      	nop
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	0800fb1c 	.word	0x0800fb1c
 800aad8:	0800fb24 	.word	0x0800fb24

0800aadc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800aadc:	b480      	push	{r7}
 800aade:	b083      	sub	sp, #12
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aae8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf4:	f043 0201 	orr.w	r2, r3, #1
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800ab0a:	b084      	sub	sp, #16
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	f107 001c 	add.w	r0, r7, #28
 800ab18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d101      	bne.n	800ab26 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800ab22:	2301      	movs	r3, #1
 800ab24:	e008      	b.n	800ab38 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800ab26:	6878      	ldr	r0, [r7, #4]
 800ab28:	f7ff ffd8 	bl	800aadc <USB_CoreReset>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2200      	movs	r2, #0
 800ab34:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800ab36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab42:	b004      	add	sp, #16
 800ab44:	4770      	bx	lr

0800ab46 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b085      	sub	sp, #20
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2200      	movs	r2, #0
 800ab52:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ab54:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ab58:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ab60:	2300      	movs	r3, #0
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3714      	adds	r7, #20
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr

0800ab6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800ab6e:	b480      	push	{r7}
 800ab70:	b085      	sub	sp, #20
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ab76:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800ab7a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	43db      	mvns	r3, r3
 800ab84:	401a      	ands	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3714      	adds	r7, #20
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
 800aba0:	460b      	mov	r3, r1
 800aba2:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800aba4:	78fb      	ldrb	r3, [r7, #3]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d106      	bne.n	800abb8 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	641a      	str	r2, [r3, #64]	@ 0x40
 800abb6:	e00b      	b.n	800abd0 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800abb8:	78fb      	ldrb	r3, [r7, #3]
 800abba:	2b01      	cmp	r3, #1
 800abbc:	d106      	bne.n	800abcc <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abc2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	641a      	str	r2, [r3, #64]	@ 0x40
 800abca:	e001      	b.n	800abd0 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800abcc:	2301      	movs	r3, #1
 800abce:	e000      	b.n	800abd2 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800abde:	b084      	sub	sp, #16
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	f107 001c 	add.w	r0, r7, #28
 800abec:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2201      	movs	r2, #1
 800abf4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abfa:	f023 0201 	bic.w	r2, r3, #1
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800ac02:	2100      	movs	r1, #0
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f7ff ffc7 	bl	800ab98 <USB_SetCurrentMode>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac20:	b004      	add	sp, #16
 800ac22:	4770      	bx	lr

0800ac24 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b09f      	sub	sp, #124	@ 0x7c
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	681a      	ldr	r2, [r3, #0]
 800ac40:	4ba0      	ldr	r3, [pc, #640]	@ (800aec4 <USB_ActivateEndpoint+0x2a0>)
 800ac42:	4013      	ands	r3, r2
 800ac44:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	78db      	ldrb	r3, [r3, #3]
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	d819      	bhi.n	800ac82 <USB_ActivateEndpoint+0x5e>
 800ac4e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac54 <USB_ActivateEndpoint+0x30>)
 800ac50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac54:	0800ac65 	.word	0x0800ac65
 800ac58:	0800ac79 	.word	0x0800ac79
 800ac5c:	0800ac8b 	.word	0x0800ac8b
 800ac60:	0800ac6f 	.word	0x0800ac6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ac64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ac6a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800ac6c:	e00e      	b.n	800ac8c <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ac6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac70:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800ac74:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800ac76:	e009      	b.n	800ac8c <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ac78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800ac7e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800ac80:	e004      	b.n	800ac8c <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800ac82:	2301      	movs	r3, #1
 800ac84:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800ac88:	e000      	b.n	800ac8c <USB_ActivateEndpoint+0x68>
      break;
 800ac8a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	441a      	add	r2, r3
 800ac96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ac98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aca0:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4413      	add	r3, r2
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	4b86      	ldr	r3, [pc, #536]	@ (800aec8 <USB_ActivateEndpoint+0x2a4>)
 800acb0:	4013      	ands	r3, r2
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	7812      	ldrb	r2, [r2, #0]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	441a      	add	r2, r3
 800acc4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acce:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	7b1b      	ldrb	r3, [r3, #12]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f040 8177 	bne.w	800afc8 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	785b      	ldrb	r3, [r3, #1]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d079      	beq.n	800add6 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	00db      	lsls	r3, r3, #3
 800ace8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800acec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	00db      	lsls	r3, r3, #3
 800acf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800acfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad00:	0c12      	lsrs	r2, r2, #16
 800ad02:	0412      	lsls	r2, r2, #16
 800ad04:	601a      	str	r2, [r3, #0]
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	00db      	lsls	r3, r3, #3
 800ad0c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad10:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad14:	6819      	ldr	r1, [r3, #0]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	88db      	ldrh	r3, [r3, #6]
 800ad1a:	089b      	lsrs	r3, r3, #2
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	009a      	lsls	r2, r3, #2
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	00db      	lsls	r3, r3, #3
 800ad26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ad2e:	430a      	orrs	r2, r1
 800ad30:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	009b      	lsls	r3, r3, #2
 800ad3a:	4413      	add	r3, r2
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	61bb      	str	r3, [r7, #24]
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d013      	beq.n	800ad72 <USB_ActivateEndpoint+0x14e>
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	4b5c      	ldr	r3, [pc, #368]	@ (800aec8 <USB_ActivateEndpoint+0x2a4>)
 800ad58:	4013      	ands	r3, r2
 800ad5a:	617b      	str	r3, [r7, #20]
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	441a      	add	r2, r3
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ad70:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	78db      	ldrb	r3, [r3, #3]
 800ad76:	2b01      	cmp	r3, #1
 800ad78:	d018      	beq.n	800adac <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	4b51      	ldr	r3, [pc, #324]	@ (800aecc <USB_ActivateEndpoint+0x2a8>)
 800ad88:	4013      	ands	r3, r2
 800ad8a:	60fb      	str	r3, [r7, #12]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	f083 0320 	eor.w	r3, r3, #32
 800ad92:	60fb      	str	r3, [r7, #12]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	781b      	ldrb	r3, [r3, #0]
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	441a      	add	r2, r3
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ada4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ada8:	6013      	str	r3, [r2, #0]
 800adaa:	e28c      	b.n	800b2c6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	009b      	lsls	r3, r3, #2
 800adb4:	4413      	add	r3, r2
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	4b44      	ldr	r3, [pc, #272]	@ (800aecc <USB_ActivateEndpoint+0x2a8>)
 800adba:	4013      	ands	r3, r2
 800adbc:	613b      	str	r3, [r7, #16]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	441a      	add	r2, r3
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800add2:	6013      	str	r3, [r2, #0]
 800add4:	e277      	b.n	800b2c6 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	00db      	lsls	r3, r3, #3
 800addc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ade0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ade4:	685a      	ldr	r2, [r3, #4]
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800adf0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800adf4:	0c12      	lsrs	r2, r2, #16
 800adf6:	0412      	lsls	r2, r2, #16
 800adf8:	605a      	str	r2, [r3, #4]
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	00db      	lsls	r3, r3, #3
 800ae00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ae08:	6859      	ldr	r1, [r3, #4]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	88db      	ldrh	r3, [r3, #6]
 800ae0e:	089b      	lsrs	r3, r3, #2
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	009a      	lsls	r2, r3, #2
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	00db      	lsls	r3, r3, #3
 800ae1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ae22:	430a      	orrs	r2, r1
 800ae24:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	00db      	lsls	r3, r3, #3
 800ae2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ae34:	685a      	ldr	r2, [r3, #4]
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	00db      	lsls	r3, r3, #3
 800ae3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ae44:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ae48:	605a      	str	r2, [r3, #4]
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d112      	bne.n	800ae78 <USB_ActivateEndpoint+0x254>
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	00db      	lsls	r3, r3, #3
 800ae58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ae60:	685a      	ldr	r2, [r3, #4]
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	00db      	lsls	r3, r3, #3
 800ae68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ae6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ae70:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ae74:	605a      	str	r2, [r3, #4]
 800ae76:	e04d      	b.n	800af14 <USB_ActivateEndpoint+0x2f0>
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	691b      	ldr	r3, [r3, #16]
 800ae7c:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae7e:	d827      	bhi.n	800aed0 <USB_ActivateEndpoint+0x2ac>
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	085b      	lsrs	r3, r3, #1
 800ae86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	691b      	ldr	r3, [r3, #16]
 800ae8c:	f003 0301 	and.w	r3, r3, #1
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d002      	beq.n	800ae9a <USB_ActivateEndpoint+0x276>
 800ae94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae96:	3301      	adds	r3, #1
 800ae98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	00db      	lsls	r3, r3, #3
 800aea0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aea4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aea8:	6859      	ldr	r1, [r3, #4]
 800aeaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aeac:	069a      	lsls	r2, r3, #26
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	00db      	lsls	r3, r3, #3
 800aeb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aeb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aebc:	430a      	orrs	r2, r1
 800aebe:	605a      	str	r2, [r3, #4]
 800aec0:	e028      	b.n	800af14 <USB_ActivateEndpoint+0x2f0>
 800aec2:	bf00      	nop
 800aec4:	07ff898f 	.word	0x07ff898f
 800aec8:	07ff8f8f 	.word	0x07ff8f8f
 800aecc:	07ff8fbf 	.word	0x07ff8fbf
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	095b      	lsrs	r3, r3, #5
 800aed6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	f003 031f 	and.w	r3, r3, #31
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d102      	bne.n	800aeea <USB_ActivateEndpoint+0x2c6>
 800aee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aee6:	3b01      	subs	r3, #1
 800aee8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aef4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800aef8:	685a      	ldr	r2, [r3, #4]
 800aefa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aefc:	069b      	lsls	r3, r3, #26
 800aefe:	431a      	orrs	r2, r3
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	00db      	lsls	r3, r3, #3
 800af06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800af0e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800af12:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d013      	beq.n	800af54 <USB_ActivateEndpoint+0x330>
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	4b9c      	ldr	r3, [pc, #624]	@ (800b1ac <USB_ActivateEndpoint+0x588>)
 800af3a:	4013      	ands	r3, r2
 800af3c:	627b      	str	r3, [r7, #36]	@ 0x24
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	441a      	add	r2, r3
 800af48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800af4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af52:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d11c      	bne.n	800af96 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af5c:	687a      	ldr	r2, [r7, #4]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	4413      	add	r3, r2
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	4b91      	ldr	r3, [pc, #580]	@ (800b1b0 <USB_ActivateEndpoint+0x58c>)
 800af6a:	4013      	ands	r3, r2
 800af6c:	61fb      	str	r3, [r7, #28]
 800af6e:	69fb      	ldr	r3, [r7, #28]
 800af70:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800af74:	61fb      	str	r3, [r7, #28]
 800af76:	69fb      	ldr	r3, [r7, #28]
 800af78:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800af7c:	61fb      	str	r3, [r7, #28]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	441a      	add	r2, r3
 800af88:	69fb      	ldr	r3, [r7, #28]
 800af8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	e197      	b.n	800b2c6 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	781b      	ldrb	r3, [r3, #0]
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	4b83      	ldr	r3, [pc, #524]	@ (800b1b0 <USB_ActivateEndpoint+0x58c>)
 800afa4:	4013      	ands	r3, r2
 800afa6:	623b      	str	r3, [r7, #32]
 800afa8:	6a3b      	ldr	r3, [r7, #32]
 800afaa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800afae:	623b      	str	r3, [r7, #32]
 800afb0:	687a      	ldr	r2, [r7, #4]
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	009b      	lsls	r3, r3, #2
 800afb8:	441a      	add	r2, r3
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afc4:	6013      	str	r3, [r2, #0]
 800afc6:	e17e      	b.n	800b2c6 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	78db      	ldrb	r3, [r3, #3]
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d114      	bne.n	800affa <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800afd0:	687a      	ldr	r2, [r7, #4]
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	4b73      	ldr	r3, [pc, #460]	@ (800b1ac <USB_ActivateEndpoint+0x588>)
 800afde:	4013      	ands	r3, r2
 800afe0:	663b      	str	r3, [r7, #96]	@ 0x60
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	009b      	lsls	r3, r3, #2
 800afea:	441a      	add	r2, r3
 800afec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800aff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aff6:	6013      	str	r3, [r2, #0]
 800aff8:	e013      	b.n	800b022 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800affa:	687a      	ldr	r2, [r7, #4]
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	009b      	lsls	r3, r3, #2
 800b002:	4413      	add	r3, r2
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	4b6b      	ldr	r3, [pc, #428]	@ (800b1b4 <USB_ActivateEndpoint+0x590>)
 800b008:	4013      	ands	r3, r2
 800b00a:	667b      	str	r3, [r7, #100]	@ 0x64
 800b00c:	687a      	ldr	r2, [r7, #4]
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	441a      	add	r2, r3
 800b016:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b01c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b020:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	00db      	lsls	r3, r3, #3
 800b028:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b02c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	00db      	lsls	r3, r3, #3
 800b038:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b03c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b040:	0c12      	lsrs	r2, r2, #16
 800b042:	0412      	lsls	r2, r2, #16
 800b044:	601a      	str	r2, [r3, #0]
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	781b      	ldrb	r3, [r3, #0]
 800b04a:	00db      	lsls	r3, r3, #3
 800b04c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b050:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b054:	6819      	ldr	r1, [r3, #0]
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	891b      	ldrh	r3, [r3, #8]
 800b05a:	089b      	lsrs	r3, r3, #2
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	009a      	lsls	r2, r3, #2
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	781b      	ldrb	r3, [r3, #0]
 800b064:	00db      	lsls	r3, r3, #3
 800b066:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b06a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b06e:	430a      	orrs	r2, r1
 800b070:	601a      	str	r2, [r3, #0]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	781b      	ldrb	r3, [r3, #0]
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b07c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	00db      	lsls	r3, r3, #3
 800b088:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b08c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b090:	0c12      	lsrs	r2, r2, #16
 800b092:	0412      	lsls	r2, r2, #16
 800b094:	605a      	str	r2, [r3, #4]
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	00db      	lsls	r3, r3, #3
 800b09c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b0a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b0a4:	6859      	ldr	r1, [r3, #4]
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	895b      	ldrh	r3, [r3, #10]
 800b0aa:	089b      	lsrs	r3, r3, #2
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	009a      	lsls	r2, r3, #2
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	00db      	lsls	r3, r3, #3
 800b0b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b0ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b0be:	430a      	orrs	r2, r1
 800b0c0:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	785b      	ldrb	r3, [r3, #1]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d178      	bne.n	800b1bc <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b0d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b0da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d013      	beq.n	800b10a <USB_ActivateEndpoint+0x4e6>
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	781b      	ldrb	r3, [r3, #0]
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	4b2f      	ldr	r3, [pc, #188]	@ (800b1ac <USB_ActivateEndpoint+0x588>)
 800b0f0:	4013      	ands	r3, r2
 800b0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	441a      	add	r2, r3
 800b0fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b100:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b104:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b108:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4413      	add	r3, r2
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b11a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d013      	beq.n	800b14a <USB_ActivateEndpoint+0x526>
 800b122:	687a      	ldr	r2, [r7, #4]
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	009b      	lsls	r3, r3, #2
 800b12a:	4413      	add	r3, r2
 800b12c:	681a      	ldr	r2, [r3, #0]
 800b12e:	4b1f      	ldr	r3, [pc, #124]	@ (800b1ac <USB_ActivateEndpoint+0x588>)
 800b130:	4013      	ands	r3, r2
 800b132:	637b      	str	r3, [r7, #52]	@ 0x34
 800b134:	687a      	ldr	r2, [r7, #4]
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	441a      	add	r2, r3
 800b13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b144:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b148:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b14a:	687a      	ldr	r2, [r7, #4]
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	4413      	add	r3, r2
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	4b16      	ldr	r3, [pc, #88]	@ (800b1b0 <USB_ActivateEndpoint+0x58c>)
 800b158:	4013      	ands	r3, r2
 800b15a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b15e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b162:	633b      	str	r3, [r7, #48]	@ 0x30
 800b164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b166:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b16a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	441a      	add	r2, r3
 800b176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b17c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b180:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	4413      	add	r3, r2
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	4b0a      	ldr	r3, [pc, #40]	@ (800b1b8 <USB_ActivateEndpoint+0x594>)
 800b190:	4013      	ands	r3, r2
 800b192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	781b      	ldrb	r3, [r3, #0]
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	441a      	add	r2, r3
 800b19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b1a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1a8:	6013      	str	r3, [r2, #0]
 800b1aa:	e08c      	b.n	800b2c6 <USB_ActivateEndpoint+0x6a2>
 800b1ac:	07ff8f8f 	.word	0x07ff8f8f
 800b1b0:	07ffbf8f 	.word	0x07ffbf8f
 800b1b4:	07ff8e8f 	.word	0x07ff8e8f
 800b1b8:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	009b      	lsls	r3, r3, #2
 800b1c4:	4413      	add	r3, r2
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b1ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b1cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d013      	beq.n	800b1fc <USB_ActivateEndpoint+0x5d8>
 800b1d4:	687a      	ldr	r2, [r7, #4]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	4413      	add	r3, r2
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	4b3d      	ldr	r3, [pc, #244]	@ (800b2d8 <USB_ActivateEndpoint+0x6b4>)
 800b1e2:	4013      	ands	r3, r2
 800b1e4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	781b      	ldrb	r3, [r3, #0]
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	441a      	add	r2, r3
 800b1f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b1f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1fa:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1fc:	687a      	ldr	r2, [r7, #4]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	009b      	lsls	r3, r3, #2
 800b204:	4413      	add	r3, r2
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	657b      	str	r3, [r7, #84]	@ 0x54
 800b20a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b20c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b210:	2b00      	cmp	r3, #0
 800b212:	d013      	beq.n	800b23c <USB_ActivateEndpoint+0x618>
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	4413      	add	r3, r2
 800b21e:	681a      	ldr	r2, [r3, #0]
 800b220:	4b2d      	ldr	r3, [pc, #180]	@ (800b2d8 <USB_ActivateEndpoint+0x6b4>)
 800b222:	4013      	ands	r3, r2
 800b224:	653b      	str	r3, [r7, #80]	@ 0x50
 800b226:	687a      	ldr	r2, [r7, #4]
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	009b      	lsls	r3, r3, #2
 800b22e:	441a      	add	r2, r3
 800b230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b232:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b236:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b23a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	78db      	ldrb	r3, [r3, #3]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d018      	beq.n	800b276 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4413      	add	r3, r2
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	4b22      	ldr	r3, [pc, #136]	@ (800b2dc <USB_ActivateEndpoint+0x6b8>)
 800b252:	4013      	ands	r3, r2
 800b254:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b258:	f083 0320 	eor.w	r3, r3, #32
 800b25c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	009b      	lsls	r3, r3, #2
 800b266:	441a      	add	r2, r3
 800b268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b26a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b26e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b272:	6013      	str	r3, [r2, #0]
 800b274:	e013      	b.n	800b29e <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	009b      	lsls	r3, r3, #2
 800b27e:	4413      	add	r3, r2
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	4b16      	ldr	r3, [pc, #88]	@ (800b2dc <USB_ActivateEndpoint+0x6b8>)
 800b284:	4013      	ands	r3, r2
 800b286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	441a      	add	r2, r3
 800b292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b294:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b29c:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	009b      	lsls	r3, r3, #2
 800b2a6:	4413      	add	r3, r2
 800b2a8:	681a      	ldr	r2, [r3, #0]
 800b2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e0 <USB_ActivateEndpoint+0x6bc>)
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	441a      	add	r2, r3
 800b2ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b2c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b2c4:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b2c6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	377c      	adds	r7, #124	@ 0x7c
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d4:	4770      	bx	lr
 800b2d6:	bf00      	nop
 800b2d8:	07ff8f8f 	.word	0x07ff8f8f
 800b2dc:	07ff8fbf 	.word	0x07ff8fbf
 800b2e0:	07ffbf8f 	.word	0x07ffbf8f

0800b2e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b097      	sub	sp, #92	@ 0x5c
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	7b1b      	ldrb	r3, [r3, #12]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d16d      	bne.n	800b3d2 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	785b      	ldrb	r3, [r3, #1]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d034      	beq.n	800b368 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	4413      	add	r3, r2
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	613b      	str	r3, [r7, #16]
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b312:	2b00      	cmp	r3, #0
 800b314:	d013      	beq.n	800b33e <USB_DeactivateEndpoint+0x5a>
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	681a      	ldr	r2, [r3, #0]
 800b322:	4b6d      	ldr	r3, [pc, #436]	@ (800b4d8 <USB_DeactivateEndpoint+0x1f4>)
 800b324:	4013      	ands	r3, r2
 800b326:	60fb      	str	r3, [r7, #12]
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	441a      	add	r2, r3
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b338:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b33c:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	4b64      	ldr	r3, [pc, #400]	@ (800b4dc <USB_DeactivateEndpoint+0x1f8>)
 800b34c:	4013      	ands	r3, r2
 800b34e:	60bb      	str	r3, [r7, #8]
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	441a      	add	r2, r3
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	e139      	b.n	800b5dc <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b368:	687a      	ldr	r2, [r7, #4]
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	61fb      	str	r3, [r7, #28]
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d013      	beq.n	800b3a8 <USB_DeactivateEndpoint+0xc4>
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	4413      	add	r3, r2
 800b38a:	681a      	ldr	r2, [r3, #0]
 800b38c:	4b52      	ldr	r3, [pc, #328]	@ (800b4d8 <USB_DeactivateEndpoint+0x1f4>)
 800b38e:	4013      	ands	r3, r2
 800b390:	61bb      	str	r3, [r7, #24]
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	441a      	add	r2, r3
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b3a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3a6:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b3a8:	687a      	ldr	r2, [r7, #4]
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	009b      	lsls	r3, r3, #2
 800b3b0:	4413      	add	r3, r2
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	4b4a      	ldr	r3, [pc, #296]	@ (800b4e0 <USB_DeactivateEndpoint+0x1fc>)
 800b3b6:	4013      	ands	r3, r2
 800b3b8:	617b      	str	r3, [r7, #20]
 800b3ba:	687a      	ldr	r2, [r7, #4]
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	441a      	add	r2, r3
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3ce:	6013      	str	r3, [r2, #0]
 800b3d0:	e104      	b.n	800b5dc <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	785b      	ldrb	r3, [r3, #1]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	f040 8084 	bne.w	800b4e4 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	781b      	ldrb	r3, [r3, #0]
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d013      	beq.n	800b41c <USB_DeactivateEndpoint+0x138>
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4413      	add	r3, r2
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	4b35      	ldr	r3, [pc, #212]	@ (800b4d8 <USB_DeactivateEndpoint+0x1f4>)
 800b402:	4013      	ands	r3, r2
 800b404:	637b      	str	r3, [r7, #52]	@ 0x34
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	441a      	add	r2, r3
 800b410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b412:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b41a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	781b      	ldrb	r3, [r3, #0]
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	633b      	str	r3, [r7, #48]	@ 0x30
 800b42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b430:	2b00      	cmp	r3, #0
 800b432:	d013      	beq.n	800b45c <USB_DeactivateEndpoint+0x178>
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	009b      	lsls	r3, r3, #2
 800b43c:	4413      	add	r3, r2
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	4b25      	ldr	r3, [pc, #148]	@ (800b4d8 <USB_DeactivateEndpoint+0x1f4>)
 800b442:	4013      	ands	r3, r2
 800b444:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	441a      	add	r2, r3
 800b450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b456:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b45a:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b45c:	687a      	ldr	r2, [r7, #4]
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	4413      	add	r3, r2
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	4b1b      	ldr	r3, [pc, #108]	@ (800b4d8 <USB_DeactivateEndpoint+0x1f4>)
 800b46a:	4013      	ands	r3, r2
 800b46c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	441a      	add	r2, r3
 800b478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b47e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b482:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	4413      	add	r3, r2
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	4b13      	ldr	r3, [pc, #76]	@ (800b4e0 <USB_DeactivateEndpoint+0x1fc>)
 800b492:	4013      	ands	r3, r2
 800b494:	627b      	str	r3, [r7, #36]	@ 0x24
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	009b      	lsls	r3, r3, #2
 800b49e:	441a      	add	r2, r3
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4aa:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	4413      	add	r3, r2
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	4b08      	ldr	r3, [pc, #32]	@ (800b4dc <USB_DeactivateEndpoint+0x1f8>)
 800b4ba:	4013      	ands	r3, r2
 800b4bc:	623b      	str	r3, [r7, #32]
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	009b      	lsls	r3, r3, #2
 800b4c6:	441a      	add	r2, r3
 800b4c8:	6a3b      	ldr	r3, [r7, #32]
 800b4ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	e082      	b.n	800b5dc <USB_DeactivateEndpoint+0x2f8>
 800b4d6:	bf00      	nop
 800b4d8:	07ff8f8f 	.word	0x07ff8f8f
 800b4dc:	07ff8fbf 	.word	0x07ff8fbf
 800b4e0:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	4413      	add	r3, r2
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	657b      	str	r3, [r7, #84]	@ 0x54
 800b4f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b4f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d013      	beq.n	800b524 <USB_DeactivateEndpoint+0x240>
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	4413      	add	r3, r2
 800b506:	681a      	ldr	r2, [r3, #0]
 800b508:	4b38      	ldr	r3, [pc, #224]	@ (800b5ec <USB_DeactivateEndpoint+0x308>)
 800b50a:	4013      	ands	r3, r2
 800b50c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b50e:	687a      	ldr	r2, [r7, #4]
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	009b      	lsls	r3, r3, #2
 800b516:	441a      	add	r2, r3
 800b518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b51a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b51e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b522:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	781b      	ldrb	r3, [r3, #0]
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	4413      	add	r3, r2
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d013      	beq.n	800b564 <USB_DeactivateEndpoint+0x280>
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	781b      	ldrb	r3, [r3, #0]
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	4413      	add	r3, r2
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	4b28      	ldr	r3, [pc, #160]	@ (800b5ec <USB_DeactivateEndpoint+0x308>)
 800b54a:	4013      	ands	r3, r2
 800b54c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	441a      	add	r2, r3
 800b558:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b55a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b55e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b562:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	781b      	ldrb	r3, [r3, #0]
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	4b1e      	ldr	r3, [pc, #120]	@ (800b5ec <USB_DeactivateEndpoint+0x308>)
 800b572:	4013      	ands	r3, r2
 800b574:	647b      	str	r3, [r7, #68]	@ 0x44
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	781b      	ldrb	r3, [r3, #0]
 800b57c:	009b      	lsls	r3, r3, #2
 800b57e:	441a      	add	r2, r3
 800b580:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b582:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b58a:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4413      	add	r3, r2
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	4b15      	ldr	r3, [pc, #84]	@ (800b5f0 <USB_DeactivateEndpoint+0x30c>)
 800b59a:	4013      	ands	r3, r2
 800b59c:	643b      	str	r3, [r7, #64]	@ 0x40
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	441a      	add	r2, r3
 800b5a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5b2:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	4413      	add	r3, r2
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f4 <USB_DeactivateEndpoint+0x310>)
 800b5c2:	4013      	ands	r3, r2
 800b5c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	441a      	add	r2, r3
 800b5d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b5da:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	375c      	adds	r7, #92	@ 0x5c
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	07ff8f8f 	.word	0x07ff8f8f
 800b5f0:	07ff8fbf 	.word	0x07ff8fbf
 800b5f4:	07ffbf8f 	.word	0x07ffbf8f

0800b5f8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b096      	sub	sp, #88	@ 0x58
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
 800b600:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	785b      	ldrb	r3, [r3, #1]
 800b606:	2b01      	cmp	r3, #1
 800b608:	f040 84ed 	bne.w	800bfe6 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	699a      	ldr	r2, [r3, #24]
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	691b      	ldr	r3, [r3, #16]
 800b614:	429a      	cmp	r2, r3
 800b616:	d903      	bls.n	800b620 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	691b      	ldr	r3, [r3, #16]
 800b61c:	657b      	str	r3, [r7, #84]	@ 0x54
 800b61e:	e002      	b.n	800b626 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	699b      	ldr	r3, [r3, #24]
 800b624:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	7b1b      	ldrb	r3, [r3, #12]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d12e      	bne.n	800b68c <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	6959      	ldr	r1, [r3, #20]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	88da      	ldrh	r2, [r3, #6]
 800b636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b638:	b29b      	uxth	r3, r3
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f001 f963 	bl	800c906 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	00db      	lsls	r3, r3, #3
 800b646:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b64a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	00db      	lsls	r3, r3, #3
 800b656:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b65a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b65e:	b292      	uxth	r2, r2
 800b660:	601a      	str	r2, [r3, #0]
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	00db      	lsls	r3, r3, #3
 800b668:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b66c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b670:	6819      	ldr	r1, [r3, #0]
 800b672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b674:	041a      	lsls	r2, r3, #16
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	00db      	lsls	r3, r3, #3
 800b67c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b680:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b684:	430a      	orrs	r2, r1
 800b686:	601a      	str	r2, [r3, #0]
 800b688:	f000 bc90 	b.w	800bfac <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	78db      	ldrb	r3, [r3, #3]
 800b690:	2b02      	cmp	r3, #2
 800b692:	f040 8332 	bne.w	800bcfa <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	6a1a      	ldr	r2, [r3, #32]
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	691b      	ldr	r3, [r3, #16]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	f240 82e4 	bls.w	800bc6c <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	781b      	ldrb	r3, [r3, #0]
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4413      	add	r3, r2
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	4ba4      	ldr	r3, [pc, #656]	@ (800b944 <USB_EPStartXfer+0x34c>)
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	613b      	str	r3, [r7, #16]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	441a      	add	r2, r3
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b6c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6ca:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	6a1a      	ldr	r2, [r3, #32]
 800b6d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b6d2:	1ad2      	subs	r2, r2, r3
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	781b      	ldrb	r3, [r3, #0]
 800b6de:	009b      	lsls	r3, r3, #2
 800b6e0:	4413      	add	r3, r2
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	f000 8161 	beq.w	800b9b0 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	785b      	ldrb	r3, [r3, #1]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d16a      	bne.n	800b7cc <USB_EPStartXfer+0x1d4>
 800b6f6:	683b      	ldr	r3, [r7, #0]
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	00db      	lsls	r3, r3, #3
 800b6fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b700:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	00db      	lsls	r3, r3, #3
 800b70c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b710:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b714:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b718:	605a      	str	r2, [r3, #4]
 800b71a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d112      	bne.n	800b746 <USB_EPStartXfer+0x14e>
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	00db      	lsls	r3, r3, #3
 800b726:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b72a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b72e:	685a      	ldr	r2, [r3, #4]
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	781b      	ldrb	r3, [r3, #0]
 800b734:	00db      	lsls	r3, r3, #3
 800b736:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b73a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b73e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b742:	605a      	str	r2, [r3, #4]
 800b744:	e06a      	b.n	800b81c <USB_EPStartXfer+0x224>
 800b746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b748:	2b3e      	cmp	r3, #62	@ 0x3e
 800b74a:	d81e      	bhi.n	800b78a <USB_EPStartXfer+0x192>
 800b74c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b74e:	085b      	lsrs	r3, r3, #1
 800b750:	653b      	str	r3, [r7, #80]	@ 0x50
 800b752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b754:	f003 0301 	and.w	r3, r3, #1
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d002      	beq.n	800b762 <USB_EPStartXfer+0x16a>
 800b75c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b75e:	3301      	adds	r3, #1
 800b760:	653b      	str	r3, [r7, #80]	@ 0x50
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b76c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b770:	6859      	ldr	r1, [r3, #4]
 800b772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b774:	069a      	lsls	r2, r3, #26
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	781b      	ldrb	r3, [r3, #0]
 800b77a:	00db      	lsls	r3, r3, #3
 800b77c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b780:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b784:	430a      	orrs	r2, r1
 800b786:	605a      	str	r2, [r3, #4]
 800b788:	e048      	b.n	800b81c <USB_EPStartXfer+0x224>
 800b78a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b78c:	095b      	lsrs	r3, r3, #5
 800b78e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b792:	f003 031f 	and.w	r3, r3, #31
 800b796:	2b00      	cmp	r3, #0
 800b798:	d102      	bne.n	800b7a0 <USB_EPStartXfer+0x1a8>
 800b79a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b79c:	3b01      	subs	r3, #1
 800b79e:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	00db      	lsls	r3, r3, #3
 800b7a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7ae:	685a      	ldr	r2, [r3, #4]
 800b7b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7b2:	069b      	lsls	r3, r3, #26
 800b7b4:	431a      	orrs	r2, r3
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	00db      	lsls	r3, r3, #3
 800b7bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b7c8:	605a      	str	r2, [r3, #4]
 800b7ca:	e027      	b.n	800b81c <USB_EPStartXfer+0x224>
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	785b      	ldrb	r3, [r3, #1]
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d123      	bne.n	800b81c <USB_EPStartXfer+0x224>
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	00db      	lsls	r3, r3, #3
 800b7da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7e2:	685a      	ldr	r2, [r3, #4]
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	00db      	lsls	r3, r3, #3
 800b7ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b7ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b7f2:	b292      	uxth	r2, r2
 800b7f4:	605a      	str	r2, [r3, #4]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	00db      	lsls	r3, r3, #3
 800b7fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b800:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b804:	6859      	ldr	r1, [r3, #4]
 800b806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b808:	041a      	lsls	r2, r3, #16
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	00db      	lsls	r3, r3, #3
 800b810:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b814:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b818:	430a      	orrs	r2, r1
 800b81a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	895b      	ldrh	r3, [r3, #10]
 800b820:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	6959      	ldr	r1, [r3, #20]
 800b826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b828:	b29b      	uxth	r3, r3
 800b82a:	8b7a      	ldrh	r2, [r7, #26]
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f001 f86a 	bl	800c906 <USB_WritePMA>
            ep->xfer_buff += len;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	695a      	ldr	r2, [r3, #20]
 800b836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b838:	441a      	add	r2, r3
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	6a1a      	ldr	r2, [r3, #32]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	429a      	cmp	r2, r3
 800b848:	d906      	bls.n	800b858 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	6a1a      	ldr	r2, [r3, #32]
 800b84e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b850:	1ad2      	subs	r2, r2, r3
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	621a      	str	r2, [r3, #32]
 800b856:	e005      	b.n	800b864 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	6a1b      	ldr	r3, [r3, #32]
 800b85c:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	2200      	movs	r2, #0
 800b862:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	785b      	ldrb	r3, [r3, #1]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d16d      	bne.n	800b948 <USB_EPStartXfer+0x350>
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	00db      	lsls	r3, r3, #3
 800b872:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b876:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b87a:	681a      	ldr	r2, [r3, #0]
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	00db      	lsls	r3, r3, #3
 800b882:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b886:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b88a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b88e:	601a      	str	r2, [r3, #0]
 800b890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b892:	2b00      	cmp	r3, #0
 800b894:	d112      	bne.n	800b8bc <USB_EPStartXfer+0x2c4>
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	00db      	lsls	r3, r3, #3
 800b89c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	00db      	lsls	r3, r3, #3
 800b8ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b8b4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b8b8:	601a      	str	r2, [r3, #0]
 800b8ba:	e06d      	b.n	800b998 <USB_EPStartXfer+0x3a0>
 800b8bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8be:	2b3e      	cmp	r3, #62	@ 0x3e
 800b8c0:	d81e      	bhi.n	800b900 <USB_EPStartXfer+0x308>
 800b8c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8c4:	085b      	lsrs	r3, r3, #1
 800b8c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8ca:	f003 0301 	and.w	r3, r3, #1
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d002      	beq.n	800b8d8 <USB_EPStartXfer+0x2e0>
 800b8d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	781b      	ldrb	r3, [r3, #0]
 800b8dc:	00db      	lsls	r3, r3, #3
 800b8de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b8e6:	6819      	ldr	r1, [r3, #0]
 800b8e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8ea:	069a      	lsls	r2, r3, #26
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	781b      	ldrb	r3, [r3, #0]
 800b8f0:	00db      	lsls	r3, r3, #3
 800b8f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b8f6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	601a      	str	r2, [r3, #0]
 800b8fe:	e04b      	b.n	800b998 <USB_EPStartXfer+0x3a0>
 800b900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b902:	095b      	lsrs	r3, r3, #5
 800b904:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b908:	f003 031f 	and.w	r3, r3, #31
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d102      	bne.n	800b916 <USB_EPStartXfer+0x31e>
 800b910:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b912:	3b01      	subs	r3, #1
 800b914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	00db      	lsls	r3, r3, #3
 800b91c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b920:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b928:	069b      	lsls	r3, r3, #26
 800b92a:	431a      	orrs	r2, r3
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	00db      	lsls	r3, r3, #3
 800b932:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b936:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b93a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	e02a      	b.n	800b998 <USB_EPStartXfer+0x3a0>
 800b942:	bf00      	nop
 800b944:	07ff8f8f 	.word	0x07ff8f8f
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	785b      	ldrb	r3, [r3, #1]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d123      	bne.n	800b998 <USB_EPStartXfer+0x3a0>
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	00db      	lsls	r3, r3, #3
 800b956:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b95a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	781b      	ldrb	r3, [r3, #0]
 800b964:	00db      	lsls	r3, r3, #3
 800b966:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b96a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b96e:	b292      	uxth	r2, r2
 800b970:	601a      	str	r2, [r3, #0]
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	781b      	ldrb	r3, [r3, #0]
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b97c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b980:	6819      	ldr	r1, [r3, #0]
 800b982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b984:	041a      	lsls	r2, r3, #16
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	781b      	ldrb	r3, [r3, #0]
 800b98a:	00db      	lsls	r3, r3, #3
 800b98c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b990:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b994:	430a      	orrs	r2, r1
 800b996:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	891b      	ldrh	r3, [r3, #8]
 800b99c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	6959      	ldr	r1, [r3, #20]
 800b9a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	8b7a      	ldrh	r2, [r7, #26]
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 ffac 	bl	800c906 <USB_WritePMA>
 800b9ae:	e2fd      	b.n	800bfac <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	785b      	ldrb	r3, [r3, #1]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d16a      	bne.n	800ba8e <USB_EPStartXfer+0x496>
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	781b      	ldrb	r3, [r3, #0]
 800b9bc:	00db      	lsls	r3, r3, #3
 800b9be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	00db      	lsls	r3, r3, #3
 800b9ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b9d6:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d112      	bne.n	800ba08 <USB_EPStartXfer+0x410>
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	00db      	lsls	r3, r3, #3
 800b9e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	00db      	lsls	r3, r3, #3
 800b9f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b9fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba00:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ba04:	601a      	str	r2, [r3, #0]
 800ba06:	e06a      	b.n	800bade <USB_EPStartXfer+0x4e6>
 800ba08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba0a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba0c:	d81e      	bhi.n	800ba4c <USB_EPStartXfer+0x454>
 800ba0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba10:	085b      	lsrs	r3, r3, #1
 800ba12:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba16:	f003 0301 	and.w	r3, r3, #1
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d002      	beq.n	800ba24 <USB_EPStartXfer+0x42c>
 800ba1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba20:	3301      	adds	r3, #1
 800ba22:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	00db      	lsls	r3, r3, #3
 800ba2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba32:	6819      	ldr	r1, [r3, #0]
 800ba34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba36:	069a      	lsls	r2, r3, #26
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	781b      	ldrb	r3, [r3, #0]
 800ba3c:	00db      	lsls	r3, r3, #3
 800ba3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba46:	430a      	orrs	r2, r1
 800ba48:	601a      	str	r2, [r3, #0]
 800ba4a:	e048      	b.n	800bade <USB_EPStartXfer+0x4e6>
 800ba4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba4e:	095b      	lsrs	r3, r3, #5
 800ba50:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ba54:	f003 031f 	and.w	r3, r3, #31
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d102      	bne.n	800ba62 <USB_EPStartXfer+0x46a>
 800ba5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	00db      	lsls	r3, r3, #3
 800ba68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba74:	069b      	lsls	r3, r3, #26
 800ba76:	431a      	orrs	r2, r3
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	00db      	lsls	r3, r3, #3
 800ba7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ba86:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ba8a:	601a      	str	r2, [r3, #0]
 800ba8c:	e027      	b.n	800bade <USB_EPStartXfer+0x4e6>
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	785b      	ldrb	r3, [r3, #1]
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d123      	bne.n	800bade <USB_EPStartXfer+0x4e6>
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800baa0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800baa4:	681a      	ldr	r2, [r3, #0]
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	00db      	lsls	r3, r3, #3
 800baac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bab0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bab4:	b292      	uxth	r2, r2
 800bab6:	601a      	str	r2, [r3, #0]
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	00db      	lsls	r3, r3, #3
 800babe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bac2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bac6:	6819      	ldr	r1, [r3, #0]
 800bac8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800baca:	041a      	lsls	r2, r3, #16
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	00db      	lsls	r3, r3, #3
 800bad2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bad6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bada:	430a      	orrs	r2, r1
 800badc:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	891b      	ldrh	r3, [r3, #8]
 800bae2:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	6959      	ldr	r1, [r3, #20]
 800bae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800baea:	b29b      	uxth	r3, r3
 800baec:	8b7a      	ldrh	r2, [r7, #26]
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 ff09 	bl	800c906 <USB_WritePMA>
            ep->xfer_buff += len;
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	695a      	ldr	r2, [r3, #20]
 800baf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bafa:	441a      	add	r2, r3
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	6a1a      	ldr	r2, [r3, #32]
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	691b      	ldr	r3, [r3, #16]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d906      	bls.n	800bb1a <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	6a1a      	ldr	r2, [r3, #32]
 800bb10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb12:	1ad2      	subs	r2, r2, r3
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	621a      	str	r2, [r3, #32]
 800bb18:	e005      	b.n	800bb26 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	2200      	movs	r2, #0
 800bb24:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	785b      	ldrb	r3, [r3, #1]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d16a      	bne.n	800bc04 <USB_EPStartXfer+0x60c>
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	781b      	ldrb	r3, [r3, #0]
 800bb32:	00db      	lsls	r3, r3, #3
 800bb34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb3c:	685a      	ldr	r2, [r3, #4]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	00db      	lsls	r3, r3, #3
 800bb44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb4c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800bb50:	605a      	str	r2, [r3, #4]
 800bb52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d112      	bne.n	800bb7e <USB_EPStartXfer+0x586>
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	781b      	ldrb	r3, [r3, #0]
 800bb5c:	00db      	lsls	r3, r3, #3
 800bb5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb62:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb66:	685a      	ldr	r2, [r3, #4]
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	00db      	lsls	r3, r3, #3
 800bb6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bb72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bb76:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bb7a:	605a      	str	r2, [r3, #4]
 800bb7c:	e06a      	b.n	800bc54 <USB_EPStartXfer+0x65c>
 800bb7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb80:	2b3e      	cmp	r3, #62	@ 0x3e
 800bb82:	d81e      	bhi.n	800bbc2 <USB_EPStartXfer+0x5ca>
 800bb84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb86:	085b      	lsrs	r3, r3, #1
 800bb88:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb8c:	f003 0301 	and.w	r3, r3, #1
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <USB_EPStartXfer+0x5a2>
 800bb94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb96:	3301      	adds	r3, #1
 800bb98:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	00db      	lsls	r3, r3, #3
 800bba0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bba4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bba8:	6859      	ldr	r1, [r3, #4]
 800bbaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbac:	069a      	lsls	r2, r3, #26
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	00db      	lsls	r3, r3, #3
 800bbb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bbb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bbbc:	430a      	orrs	r2, r1
 800bbbe:	605a      	str	r2, [r3, #4]
 800bbc0:	e048      	b.n	800bc54 <USB_EPStartXfer+0x65c>
 800bbc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbc4:	095b      	lsrs	r3, r3, #5
 800bbc6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bbca:	f003 031f 	and.w	r3, r3, #31
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d102      	bne.n	800bbd8 <USB_EPStartXfer+0x5e0>
 800bbd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	647b      	str	r3, [r7, #68]	@ 0x44
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	00db      	lsls	r3, r3, #3
 800bbde:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bbe2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bbe6:	685a      	ldr	r2, [r3, #4]
 800bbe8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bbea:	069b      	lsls	r3, r3, #26
 800bbec:	431a      	orrs	r2, r3
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	00db      	lsls	r3, r3, #3
 800bbf4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bbf8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bbfc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bc00:	605a      	str	r2, [r3, #4]
 800bc02:	e027      	b.n	800bc54 <USB_EPStartXfer+0x65c>
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	785b      	ldrb	r3, [r3, #1]
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d123      	bne.n	800bc54 <USB_EPStartXfer+0x65c>
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	00db      	lsls	r3, r3, #3
 800bc12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc16:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	00db      	lsls	r3, r3, #3
 800bc22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bc2a:	b292      	uxth	r2, r2
 800bc2c:	605a      	str	r2, [r3, #4]
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	00db      	lsls	r3, r3, #3
 800bc34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bc3c:	6859      	ldr	r1, [r3, #4]
 800bc3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc40:	041a      	lsls	r2, r3, #16
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	00db      	lsls	r3, r3, #3
 800bc48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bc4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bc50:	430a      	orrs	r2, r1
 800bc52:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	895b      	ldrh	r3, [r3, #10]
 800bc58:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	6959      	ldr	r1, [r3, #20]
 800bc5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bc60:	b29b      	uxth	r3, r3
 800bc62:	8b7a      	ldrh	r2, [r7, #26]
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fe4e 	bl	800c906 <USB_WritePMA>
 800bc6a:	e19f      	b.n	800bfac <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	6a1b      	ldr	r3, [r3, #32]
 800bc70:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	4ba0      	ldr	r3, [pc, #640]	@ (800bf00 <USB_EPStartXfer+0x908>)
 800bc80:	4013      	ands	r3, r2
 800bc82:	617b      	str	r3, [r7, #20]
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	441a      	add	r2, r3
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc98:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	00db      	lsls	r3, r3, #3
 800bca0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bca4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	00db      	lsls	r3, r3, #3
 800bcb0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcb4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bcb8:	b292      	uxth	r2, r2
 800bcba:	601a      	str	r2, [r3, #0]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	00db      	lsls	r3, r3, #3
 800bcc2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcc6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bcca:	6819      	ldr	r1, [r3, #0]
 800bccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcce:	041a      	lsls	r2, r3, #16
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	781b      	ldrb	r3, [r3, #0]
 800bcd4:	00db      	lsls	r3, r3, #3
 800bcd6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bcda:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bcde:	430a      	orrs	r2, r1
 800bce0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	891b      	ldrh	r3, [r3, #8]
 800bce6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	6959      	ldr	r1, [r3, #20]
 800bcec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	8b7a      	ldrh	r2, [r7, #26]
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fe07 	bl	800c906 <USB_WritePMA>
 800bcf8:	e158      	b.n	800bfac <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800bcfa:	683b      	ldr	r3, [r7, #0]
 800bcfc:	6a1a      	ldr	r2, [r3, #32]
 800bcfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd00:	1ad2      	subs	r2, r2, r3
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	4413      	add	r3, r2
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f000 80a3 	beq.w	800be62 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	785b      	ldrb	r3, [r3, #1]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d16a      	bne.n	800bdfa <USB_EPStartXfer+0x802>
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	00db      	lsls	r3, r3, #3
 800bd2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd32:	685a      	ldr	r2, [r3, #4]
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	00db      	lsls	r3, r3, #3
 800bd3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd42:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800bd46:	605a      	str	r2, [r3, #4]
 800bd48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d112      	bne.n	800bd74 <USB_EPStartXfer+0x77c>
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	00db      	lsls	r3, r3, #3
 800bd54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd5c:	685a      	ldr	r2, [r3, #4]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	00db      	lsls	r3, r3, #3
 800bd64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd6c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bd70:	605a      	str	r2, [r3, #4]
 800bd72:	e06a      	b.n	800be4a <USB_EPStartXfer+0x852>
 800bd74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd76:	2b3e      	cmp	r3, #62	@ 0x3e
 800bd78:	d81e      	bhi.n	800bdb8 <USB_EPStartXfer+0x7c0>
 800bd7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd7c:	085b      	lsrs	r3, r3, #1
 800bd7e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bd82:	f003 0301 	and.w	r3, r3, #1
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d002      	beq.n	800bd90 <USB_EPStartXfer+0x798>
 800bd8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	00db      	lsls	r3, r3, #3
 800bd96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bd9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bd9e:	6859      	ldr	r1, [r3, #4]
 800bda0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bda2:	069a      	lsls	r2, r3, #26
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	00db      	lsls	r3, r3, #3
 800bdaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdb2:	430a      	orrs	r2, r1
 800bdb4:	605a      	str	r2, [r3, #4]
 800bdb6:	e048      	b.n	800be4a <USB_EPStartXfer+0x852>
 800bdb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdba:	095b      	lsrs	r3, r3, #5
 800bdbc:	643b      	str	r3, [r7, #64]	@ 0x40
 800bdbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bdc0:	f003 031f 	and.w	r3, r3, #31
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d102      	bne.n	800bdce <USB_EPStartXfer+0x7d6>
 800bdc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	643b      	str	r3, [r7, #64]	@ 0x40
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	00db      	lsls	r3, r3, #3
 800bdd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bddc:	685a      	ldr	r2, [r3, #4]
 800bdde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bde0:	069b      	lsls	r3, r3, #26
 800bde2:	431a      	orrs	r2, r3
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	00db      	lsls	r3, r3, #3
 800bdea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bdee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bdf2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bdf6:	605a      	str	r2, [r3, #4]
 800bdf8:	e027      	b.n	800be4a <USB_EPStartXfer+0x852>
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	785b      	ldrb	r3, [r3, #1]
 800bdfe:	2b01      	cmp	r3, #1
 800be00:	d123      	bne.n	800be4a <USB_EPStartXfer+0x852>
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	00db      	lsls	r3, r3, #3
 800be08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be10:	685a      	ldr	r2, [r3, #4]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	00db      	lsls	r3, r3, #3
 800be18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be20:	b292      	uxth	r2, r2
 800be22:	605a      	str	r2, [r3, #4]
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	00db      	lsls	r3, r3, #3
 800be2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be2e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be32:	6859      	ldr	r1, [r3, #4]
 800be34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be36:	041a      	lsls	r2, r3, #16
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	00db      	lsls	r3, r3, #3
 800be3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be46:	430a      	orrs	r2, r1
 800be48:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	895b      	ldrh	r3, [r3, #10]
 800be4e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	6959      	ldr	r1, [r3, #20]
 800be54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be56:	b29b      	uxth	r3, r3
 800be58:	8b7a      	ldrh	r2, [r7, #26]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fd53 	bl	800c906 <USB_WritePMA>
 800be60:	e0a4      	b.n	800bfac <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	785b      	ldrb	r3, [r3, #1]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d16d      	bne.n	800bf46 <USB_EPStartXfer+0x94e>
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	00db      	lsls	r3, r3, #3
 800be70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	00db      	lsls	r3, r3, #3
 800be80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800be88:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800be8c:	601a      	str	r2, [r3, #0]
 800be8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be90:	2b00      	cmp	r3, #0
 800be92:	d112      	bne.n	800beba <USB_EPStartXfer+0x8c2>
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	00db      	lsls	r3, r3, #3
 800be9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800be9e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	00db      	lsls	r3, r3, #3
 800beaa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800beae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800beb2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800beb6:	601a      	str	r2, [r3, #0]
 800beb8:	e06d      	b.n	800bf96 <USB_EPStartXfer+0x99e>
 800beba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bebc:	2b3e      	cmp	r3, #62	@ 0x3e
 800bebe:	d821      	bhi.n	800bf04 <USB_EPStartXfer+0x90c>
 800bec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bec2:	085b      	lsrs	r3, r3, #1
 800bec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bec8:	f003 0301 	and.w	r3, r3, #1
 800becc:	2b00      	cmp	r3, #0
 800bece:	d002      	beq.n	800bed6 <USB_EPStartXfer+0x8de>
 800bed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bed2:	3301      	adds	r3, #1
 800bed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	00db      	lsls	r3, r3, #3
 800bedc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bee0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bee4:	6819      	ldr	r1, [r3, #0]
 800bee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bee8:	069a      	lsls	r2, r3, #26
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	00db      	lsls	r3, r3, #3
 800bef0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bef4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bef8:	430a      	orrs	r2, r1
 800befa:	601a      	str	r2, [r3, #0]
 800befc:	e04b      	b.n	800bf96 <USB_EPStartXfer+0x99e>
 800befe:	bf00      	nop
 800bf00:	07ff8e8f 	.word	0x07ff8e8f
 800bf04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf06:	095b      	lsrs	r3, r3, #5
 800bf08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf0c:	f003 031f 	and.w	r3, r3, #31
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d102      	bne.n	800bf1a <USB_EPStartXfer+0x922>
 800bf14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf16:	3b01      	subs	r3, #1
 800bf18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	00db      	lsls	r3, r3, #3
 800bf20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf24:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf28:	681a      	ldr	r2, [r3, #0]
 800bf2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf2c:	069b      	lsls	r3, r3, #26
 800bf2e:	431a      	orrs	r2, r3
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	781b      	ldrb	r3, [r3, #0]
 800bf34:	00db      	lsls	r3, r3, #3
 800bf36:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf3a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf3e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800bf42:	601a      	str	r2, [r3, #0]
 800bf44:	e027      	b.n	800bf96 <USB_EPStartXfer+0x99e>
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	785b      	ldrb	r3, [r3, #1]
 800bf4a:	2b01      	cmp	r3, #1
 800bf4c:	d123      	bne.n	800bf96 <USB_EPStartXfer+0x99e>
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	00db      	lsls	r3, r3, #3
 800bf54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf58:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf5c:	681a      	ldr	r2, [r3, #0]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	00db      	lsls	r3, r3, #3
 800bf64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf6c:	b292      	uxth	r2, r2
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	00db      	lsls	r3, r3, #3
 800bf76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf7e:	6819      	ldr	r1, [r3, #0]
 800bf80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf82:	041a      	lsls	r2, r3, #16
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	00db      	lsls	r3, r3, #3
 800bf8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800bf8e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800bf92:	430a      	orrs	r2, r1
 800bf94:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	891b      	ldrh	r3, [r3, #8]
 800bf9a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	6959      	ldr	r1, [r3, #20]
 800bfa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	8b7a      	ldrh	r2, [r7, #26]
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 fcad 	bl	800c906 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	4413      	add	r3, r2
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	4b8b      	ldr	r3, [pc, #556]	@ (800c1e8 <USB_EPStartXfer+0xbf0>)
 800bfba:	4013      	ands	r3, r2
 800bfbc:	60fb      	str	r3, [r7, #12]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f083 0310 	eor.w	r3, r3, #16
 800bfc4:	60fb      	str	r3, [r7, #12]
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f083 0320 	eor.w	r3, r3, #32
 800bfcc:	60fb      	str	r3, [r7, #12]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	441a      	add	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfe2:	6013      	str	r3, [r2, #0]
 800bfe4:	e36b      	b.n	800c6be <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	7b1b      	ldrb	r3, [r3, #12]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f040 8081 	bne.w	800c0f2 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	699a      	ldr	r2, [r3, #24]
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	691b      	ldr	r3, [r3, #16]
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d909      	bls.n	800c010 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	691b      	ldr	r3, [r3, #16]
 800c000:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	699a      	ldr	r2, [r3, #24]
 800c006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c008:	1ad2      	subs	r2, r2, r3
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	619a      	str	r2, [r3, #24]
 800c00e:	e005      	b.n	800c01c <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	699b      	ldr	r3, [r3, #24]
 800c014:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	2200      	movs	r2, #0
 800c01a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	00db      	lsls	r3, r3, #3
 800c022:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c026:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	00db      	lsls	r3, r3, #3
 800c032:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c036:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c03a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c03e:	605a      	str	r2, [r3, #4]
 800c040:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c042:	2b00      	cmp	r3, #0
 800c044:	d112      	bne.n	800c06c <USB_EPStartXfer+0xa74>
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	781b      	ldrb	r3, [r3, #0]
 800c04a:	00db      	lsls	r3, r3, #3
 800c04c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c050:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c054:	685a      	ldr	r2, [r3, #4]
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	00db      	lsls	r3, r3, #3
 800c05c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c060:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c064:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c068:	605a      	str	r2, [r3, #4]
 800c06a:	e30c      	b.n	800c686 <USB_EPStartXfer+0x108e>
 800c06c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c06e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c070:	d81e      	bhi.n	800c0b0 <USB_EPStartXfer+0xab8>
 800c072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c074:	085b      	lsrs	r3, r3, #1
 800c076:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c07a:	f003 0301 	and.w	r3, r3, #1
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d002      	beq.n	800c088 <USB_EPStartXfer+0xa90>
 800c082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c084:	3301      	adds	r3, #1
 800c086:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	781b      	ldrb	r3, [r3, #0]
 800c08c:	00db      	lsls	r3, r3, #3
 800c08e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c092:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c096:	6859      	ldr	r1, [r3, #4]
 800c098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c09a:	069a      	lsls	r2, r3, #26
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	781b      	ldrb	r3, [r3, #0]
 800c0a0:	00db      	lsls	r3, r3, #3
 800c0a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	605a      	str	r2, [r3, #4]
 800c0ae:	e2ea      	b.n	800c686 <USB_EPStartXfer+0x108e>
 800c0b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0b2:	095b      	lsrs	r3, r3, #5
 800c0b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0b8:	f003 031f 	and.w	r3, r3, #31
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d102      	bne.n	800c0c6 <USB_EPStartXfer+0xace>
 800c0c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	00db      	lsls	r3, r3, #3
 800c0cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0d4:	685a      	ldr	r2, [r3, #4]
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0d8:	069b      	lsls	r3, r3, #26
 800c0da:	431a      	orrs	r2, r3
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	00db      	lsls	r3, r3, #3
 800c0e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c0e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c0ea:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c0ee:	605a      	str	r2, [r3, #4]
 800c0f0:	e2c9      	b.n	800c686 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	78db      	ldrb	r3, [r3, #3]
 800c0f6:	2b02      	cmp	r3, #2
 800c0f8:	f040 8176 	bne.w	800c3e8 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	785b      	ldrb	r3, [r3, #1]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d173      	bne.n	800c1ec <USB_EPStartXfer+0xbf4>
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	00db      	lsls	r3, r3, #3
 800c10a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c10e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	00db      	lsls	r3, r3, #3
 800c11a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c11e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c122:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c126:	601a      	str	r2, [r3, #0]
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d112      	bne.n	800c156 <USB_EPStartXfer+0xb5e>
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	00db      	lsls	r3, r3, #3
 800c136:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c13a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	00db      	lsls	r3, r3, #3
 800c146:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c14a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c14e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c152:	601a      	str	r2, [r3, #0]
 800c154:	e073      	b.n	800c23e <USB_EPStartXfer+0xc46>
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c15c:	d820      	bhi.n	800c1a0 <USB_EPStartXfer+0xba8>
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	691b      	ldr	r3, [r3, #16]
 800c162:	085b      	lsrs	r3, r3, #1
 800c164:	637b      	str	r3, [r7, #52]	@ 0x34
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	f003 0301 	and.w	r3, r3, #1
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d002      	beq.n	800c178 <USB_EPStartXfer+0xb80>
 800c172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c174:	3301      	adds	r3, #1
 800c176:	637b      	str	r3, [r7, #52]	@ 0x34
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	781b      	ldrb	r3, [r3, #0]
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c182:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c186:	6819      	ldr	r1, [r3, #0]
 800c188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c18a:	069a      	lsls	r2, r3, #26
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	00db      	lsls	r3, r3, #3
 800c192:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c196:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c19a:	430a      	orrs	r2, r1
 800c19c:	601a      	str	r2, [r3, #0]
 800c19e:	e04e      	b.n	800c23e <USB_EPStartXfer+0xc46>
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	095b      	lsrs	r3, r3, #5
 800c1a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	691b      	ldr	r3, [r3, #16]
 800c1ac:	f003 031f 	and.w	r3, r3, #31
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d102      	bne.n	800c1ba <USB_EPStartXfer+0xbc2>
 800c1b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	00db      	lsls	r3, r3, #3
 800c1c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1cc:	069b      	lsls	r3, r3, #26
 800c1ce:	431a      	orrs	r2, r3
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	00db      	lsls	r3, r3, #3
 800c1d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c1de:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	e02b      	b.n	800c23e <USB_EPStartXfer+0xc46>
 800c1e6:	bf00      	nop
 800c1e8:	07ff8fbf 	.word	0x07ff8fbf
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	785b      	ldrb	r3, [r3, #1]
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d124      	bne.n	800c23e <USB_EPStartXfer+0xc46>
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	00db      	lsls	r3, r3, #3
 800c1fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c1fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	00db      	lsls	r3, r3, #3
 800c20a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c20e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c212:	b292      	uxth	r2, r2
 800c214:	601a      	str	r2, [r3, #0]
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	00db      	lsls	r3, r3, #3
 800c21c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c220:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c224:	6819      	ldr	r1, [r3, #0]
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	691b      	ldr	r3, [r3, #16]
 800c22a:	041a      	lsls	r2, r3, #16
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	781b      	ldrb	r3, [r3, #0]
 800c230:	00db      	lsls	r3, r3, #3
 800c232:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c236:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c23a:	430a      	orrs	r2, r1
 800c23c:	601a      	str	r2, [r3, #0]
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	785b      	ldrb	r3, [r3, #1]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d170      	bne.n	800c328 <USB_EPStartXfer+0xd30>
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	781b      	ldrb	r3, [r3, #0]
 800c24a:	00db      	lsls	r3, r3, #3
 800c24c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c250:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c254:	685a      	ldr	r2, [r3, #4]
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	781b      	ldrb	r3, [r3, #0]
 800c25a:	00db      	lsls	r3, r3, #3
 800c25c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c260:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c264:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c268:	605a      	str	r2, [r3, #4]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d112      	bne.n	800c298 <USB_EPStartXfer+0xca0>
 800c272:	683b      	ldr	r3, [r7, #0]
 800c274:	781b      	ldrb	r3, [r3, #0]
 800c276:	00db      	lsls	r3, r3, #3
 800c278:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c27c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c280:	685a      	ldr	r2, [r3, #4]
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	00db      	lsls	r3, r3, #3
 800c288:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c28c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c290:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c294:	605a      	str	r2, [r3, #4]
 800c296:	e070      	b.n	800c37a <USB_EPStartXfer+0xd82>
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c29e:	d820      	bhi.n	800c2e2 <USB_EPStartXfer+0xcea>
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	691b      	ldr	r3, [r3, #16]
 800c2a4:	085b      	lsrs	r3, r3, #1
 800c2a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	f003 0301 	and.w	r3, r3, #1
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d002      	beq.n	800c2ba <USB_EPStartXfer+0xcc2>
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b6:	3301      	adds	r3, #1
 800c2b8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	00db      	lsls	r3, r3, #3
 800c2c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2c8:	6859      	ldr	r1, [r3, #4]
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2cc:	069a      	lsls	r2, r3, #26
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	00db      	lsls	r3, r3, #3
 800c2d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c2d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c2dc:	430a      	orrs	r2, r1
 800c2de:	605a      	str	r2, [r3, #4]
 800c2e0:	e04b      	b.n	800c37a <USB_EPStartXfer+0xd82>
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	691b      	ldr	r3, [r3, #16]
 800c2e6:	095b      	lsrs	r3, r3, #5
 800c2e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	691b      	ldr	r3, [r3, #16]
 800c2ee:	f003 031f 	and.w	r3, r3, #31
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d102      	bne.n	800c2fc <USB_EPStartXfer+0xd04>
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2f8:	3b01      	subs	r3, #1
 800c2fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	00db      	lsls	r3, r3, #3
 800c302:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c306:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c30a:	685a      	ldr	r2, [r3, #4]
 800c30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c30e:	069b      	lsls	r3, r3, #26
 800c310:	431a      	orrs	r2, r3
 800c312:	683b      	ldr	r3, [r7, #0]
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	00db      	lsls	r3, r3, #3
 800c318:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c31c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c320:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c324:	605a      	str	r2, [r3, #4]
 800c326:	e028      	b.n	800c37a <USB_EPStartXfer+0xd82>
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	785b      	ldrb	r3, [r3, #1]
 800c32c:	2b01      	cmp	r3, #1
 800c32e:	d124      	bne.n	800c37a <USB_EPStartXfer+0xd82>
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	00db      	lsls	r3, r3, #3
 800c336:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c33a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c33e:	685a      	ldr	r2, [r3, #4]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	781b      	ldrb	r3, [r3, #0]
 800c344:	00db      	lsls	r3, r3, #3
 800c346:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c34a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c34e:	b292      	uxth	r2, r2
 800c350:	605a      	str	r2, [r3, #4]
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c35c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c360:	6859      	ldr	r1, [r3, #4]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	691b      	ldr	r3, [r3, #16]
 800c366:	041a      	lsls	r2, r3, #16
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	00db      	lsls	r3, r3, #3
 800c36e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c372:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c376:	430a      	orrs	r2, r1
 800c378:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	69db      	ldr	r3, [r3, #28]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	f000 8181 	beq.w	800c686 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	781b      	ldrb	r3, [r3, #0]
 800c38a:	009b      	lsls	r3, r3, #2
 800c38c:	4413      	add	r3, r2
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c392:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c394:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d004      	beq.n	800c3a6 <USB_EPStartXfer+0xdae>
 800c39c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c39e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d10b      	bne.n	800c3be <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c3a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c3a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	f040 816a 	bne.w	800c686 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c3b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c3b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	f040 8164 	bne.w	800c686 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c3be:	687a      	ldr	r2, [r7, #4]
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	4413      	add	r3, r2
 800c3c8:	681a      	ldr	r2, [r3, #0]
 800c3ca:	4b98      	ldr	r3, [pc, #608]	@ (800c62c <USB_EPStartXfer+0x1034>)
 800c3cc:	4013      	ands	r3, r2
 800c3ce:	623b      	str	r3, [r7, #32]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	781b      	ldrb	r3, [r3, #0]
 800c3d6:	009b      	lsls	r3, r3, #2
 800c3d8:	441a      	add	r2, r3
 800c3da:	6a3b      	ldr	r3, [r7, #32]
 800c3dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c3e4:	6013      	str	r3, [r2, #0]
 800c3e6:	e14e      	b.n	800c686 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	78db      	ldrb	r3, [r3, #3]
 800c3ec:	2b01      	cmp	r3, #1
 800c3ee:	f040 8148 	bne.w	800c682 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	699a      	ldr	r2, [r3, #24]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	691b      	ldr	r3, [r3, #16]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d909      	bls.n	800c412 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	691b      	ldr	r3, [r3, #16]
 800c402:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	699a      	ldr	r2, [r3, #24]
 800c408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c40a:	1ad2      	subs	r2, r2, r3
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	619a      	str	r2, [r3, #24]
 800c410:	e005      	b.n	800c41e <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	699b      	ldr	r3, [r3, #24]
 800c416:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800c418:	683b      	ldr	r3, [r7, #0]
 800c41a:	2200      	movs	r2, #0
 800c41c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	785b      	ldrb	r3, [r3, #1]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d16a      	bne.n	800c4fc <USB_EPStartXfer+0xf04>
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	00db      	lsls	r3, r3, #3
 800c42c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c430:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	00db      	lsls	r3, r3, #3
 800c43c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c440:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c444:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c448:	601a      	str	r2, [r3, #0]
 800c44a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d112      	bne.n	800c476 <USB_EPStartXfer+0xe7e>
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	00db      	lsls	r3, r3, #3
 800c456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c45a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	00db      	lsls	r3, r3, #3
 800c466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c46a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c46e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	e06a      	b.n	800c54c <USB_EPStartXfer+0xf54>
 800c476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c478:	2b3e      	cmp	r3, #62	@ 0x3e
 800c47a:	d81e      	bhi.n	800c4ba <USB_EPStartXfer+0xec2>
 800c47c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c47e:	085b      	lsrs	r3, r3, #1
 800c480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c484:	f003 0301 	and.w	r3, r3, #1
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d002      	beq.n	800c492 <USB_EPStartXfer+0xe9a>
 800c48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c48e:	3301      	adds	r3, #1
 800c490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	00db      	lsls	r3, r3, #3
 800c498:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c49c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4a0:	6819      	ldr	r1, [r3, #0]
 800c4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a4:	069a      	lsls	r2, r3, #26
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	00db      	lsls	r3, r3, #3
 800c4ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4b4:	430a      	orrs	r2, r1
 800c4b6:	601a      	str	r2, [r3, #0]
 800c4b8:	e048      	b.n	800c54c <USB_EPStartXfer+0xf54>
 800c4ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4bc:	095b      	lsrs	r3, r3, #5
 800c4be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4c2:	f003 031f 	and.w	r3, r3, #31
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d102      	bne.n	800c4d0 <USB_EPStartXfer+0xed8>
 800c4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	00db      	lsls	r3, r3, #3
 800c4d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4e2:	069b      	lsls	r3, r3, #26
 800c4e4:	431a      	orrs	r2, r3
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	00db      	lsls	r3, r3, #3
 800c4ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c4f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c4f4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c4f8:	601a      	str	r2, [r3, #0]
 800c4fa:	e027      	b.n	800c54c <USB_EPStartXfer+0xf54>
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	785b      	ldrb	r3, [r3, #1]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d123      	bne.n	800c54c <USB_EPStartXfer+0xf54>
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c50e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	781b      	ldrb	r3, [r3, #0]
 800c518:	00db      	lsls	r3, r3, #3
 800c51a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c51e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c522:	b292      	uxth	r2, r2
 800c524:	601a      	str	r2, [r3, #0]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	00db      	lsls	r3, r3, #3
 800c52c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c530:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c534:	6819      	ldr	r1, [r3, #0]
 800c536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c538:	041a      	lsls	r2, r3, #16
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	00db      	lsls	r3, r3, #3
 800c540:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c544:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c548:	430a      	orrs	r2, r1
 800c54a:	601a      	str	r2, [r3, #0]
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	785b      	ldrb	r3, [r3, #1]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d16d      	bne.n	800c630 <USB_EPStartXfer+0x1038>
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	00db      	lsls	r3, r3, #3
 800c55a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c55e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c562:	685a      	ldr	r2, [r3, #4]
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	00db      	lsls	r3, r3, #3
 800c56a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c56e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c572:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800c576:	605a      	str	r2, [r3, #4]
 800c578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d112      	bne.n	800c5a4 <USB_EPStartXfer+0xfac>
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	00db      	lsls	r3, r3, #3
 800c584:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c588:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c58c:	685a      	ldr	r2, [r3, #4]
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	00db      	lsls	r3, r3, #3
 800c594:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c598:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c59c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c5a0:	605a      	str	r2, [r3, #4]
 800c5a2:	e070      	b.n	800c686 <USB_EPStartXfer+0x108e>
 800c5a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800c5a8:	d81e      	bhi.n	800c5e8 <USB_EPStartXfer+0xff0>
 800c5aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5ac:	085b      	lsrs	r3, r3, #1
 800c5ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5b2:	f003 0301 	and.w	r3, r3, #1
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d002      	beq.n	800c5c0 <USB_EPStartXfer+0xfc8>
 800c5ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5bc:	3301      	adds	r3, #1
 800c5be:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	00db      	lsls	r3, r3, #3
 800c5c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5ce:	6859      	ldr	r1, [r3, #4]
 800c5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d2:	069a      	lsls	r2, r3, #26
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	781b      	ldrb	r3, [r3, #0]
 800c5d8:	00db      	lsls	r3, r3, #3
 800c5da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c5de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c5e2:	430a      	orrs	r2, r1
 800c5e4:	605a      	str	r2, [r3, #4]
 800c5e6:	e04e      	b.n	800c686 <USB_EPStartXfer+0x108e>
 800c5e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5ea:	095b      	lsrs	r3, r3, #5
 800c5ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5f0:	f003 031f 	and.w	r3, r3, #31
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d102      	bne.n	800c5fe <USB_EPStartXfer+0x1006>
 800c5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5fa:	3b01      	subs	r3, #1
 800c5fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	00db      	lsls	r3, r3, #3
 800c604:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c608:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c60c:	685a      	ldr	r2, [r3, #4]
 800c60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c610:	069b      	lsls	r3, r3, #26
 800c612:	431a      	orrs	r2, r3
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	00db      	lsls	r3, r3, #3
 800c61a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c61e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c622:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800c626:	605a      	str	r2, [r3, #4]
 800c628:	e02d      	b.n	800c686 <USB_EPStartXfer+0x108e>
 800c62a:	bf00      	nop
 800c62c:	07ff8f8f 	.word	0x07ff8f8f
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	785b      	ldrb	r3, [r3, #1]
 800c634:	2b01      	cmp	r3, #1
 800c636:	d126      	bne.n	800c686 <USB_EPStartXfer+0x108e>
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	00db      	lsls	r3, r3, #3
 800c63e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c642:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c646:	685a      	ldr	r2, [r3, #4]
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	00db      	lsls	r3, r3, #3
 800c64e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c652:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c656:	b292      	uxth	r2, r2
 800c658:	605a      	str	r2, [r3, #4]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	00db      	lsls	r3, r3, #3
 800c660:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c664:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c668:	6859      	ldr	r1, [r3, #4]
 800c66a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c66c:	041a      	lsls	r2, r3, #16
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	781b      	ldrb	r3, [r3, #0]
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c678:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c67c:	430a      	orrs	r2, r1
 800c67e:	605a      	str	r2, [r3, #4]
 800c680:	e001      	b.n	800c686 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800c682:	2301      	movs	r3, #1
 800c684:	e01c      	b.n	800c6c0 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c686:	687a      	ldr	r2, [r7, #4]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	4413      	add	r3, r2
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	4b0d      	ldr	r3, [pc, #52]	@ (800c6c8 <USB_EPStartXfer+0x10d0>)
 800c694:	4013      	ands	r3, r2
 800c696:	61fb      	str	r3, [r7, #28]
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c69e:	61fb      	str	r3, [r7, #28]
 800c6a0:	69fb      	ldr	r3, [r7, #28]
 800c6a2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c6a6:	61fb      	str	r3, [r7, #28]
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	441a      	add	r2, r3
 800c6b2:	69fb      	ldr	r3, [r7, #28]
 800c6b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3758      	adds	r7, #88	@ 0x58
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	07ffbf8f 	.word	0x07ffbf8f

0800c6cc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c6cc:	b480      	push	{r7}
 800c6ce:	b085      	sub	sp, #20
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	785b      	ldrb	r3, [r3, #1]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d018      	beq.n	800c710 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	681a      	ldr	r2, [r3, #0]
 800c6ea:	4b19      	ldr	r3, [pc, #100]	@ (800c750 <USB_EPSetStall+0x84>)
 800c6ec:	4013      	ands	r3, r2
 800c6ee:	60bb      	str	r3, [r7, #8]
 800c6f0:	68bb      	ldr	r3, [r7, #8]
 800c6f2:	f083 0310 	eor.w	r3, r3, #16
 800c6f6:	60bb      	str	r3, [r7, #8]
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	441a      	add	r2, r3
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c70c:	6013      	str	r3, [r2, #0]
 800c70e:	e017      	b.n	800c740 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	4b0d      	ldr	r3, [pc, #52]	@ (800c754 <USB_EPSetStall+0x88>)
 800c71e:	4013      	ands	r3, r2
 800c720:	60fb      	str	r3, [r7, #12]
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c728:	60fb      	str	r3, [r7, #12]
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	441a      	add	r2, r3
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c73a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c73e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c740:	2300      	movs	r3, #0
}
 800c742:	4618      	mov	r0, r3
 800c744:	3714      	adds	r7, #20
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	07ff8fbf 	.word	0x07ff8fbf
 800c754:	07ffbf8f 	.word	0x07ffbf8f

0800c758 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c758:	b480      	push	{r7}
 800c75a:	b089      	sub	sp, #36	@ 0x24
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
 800c760:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	7b1b      	ldrb	r3, [r3, #12]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d17c      	bne.n	800c864 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	785b      	ldrb	r3, [r3, #1]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d03c      	beq.n	800c7ec <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	009b      	lsls	r3, r3, #2
 800c77a:	4413      	add	r3, r2
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	613b      	str	r3, [r7, #16]
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c786:	2b00      	cmp	r3, #0
 800c788:	d013      	beq.n	800c7b2 <USB_EPClearStall+0x5a>
 800c78a:	687a      	ldr	r2, [r7, #4]
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	009b      	lsls	r3, r3, #2
 800c792:	4413      	add	r3, r2
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	4b37      	ldr	r3, [pc, #220]	@ (800c874 <USB_EPClearStall+0x11c>)
 800c798:	4013      	ands	r3, r2
 800c79a:	60fb      	str	r3, [r7, #12]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	441a      	add	r2, r3
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c7b0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	78db      	ldrb	r3, [r3, #3]
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d054      	beq.n	800c864 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	4413      	add	r3, r2
 800c7c4:	681a      	ldr	r2, [r3, #0]
 800c7c6:	4b2c      	ldr	r3, [pc, #176]	@ (800c878 <USB_EPClearStall+0x120>)
 800c7c8:	4013      	ands	r3, r2
 800c7ca:	60bb      	str	r3, [r7, #8]
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	f083 0320 	eor.w	r3, r3, #32
 800c7d2:	60bb      	str	r3, [r7, #8]
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	441a      	add	r2, r3
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7e8:	6013      	str	r3, [r2, #0]
 800c7ea:	e03b      	b.n	800c864 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	4413      	add	r3, r2
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	61fb      	str	r3, [r7, #28]
 800c7fa:	69fb      	ldr	r3, [r7, #28]
 800c7fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c800:	2b00      	cmp	r3, #0
 800c802:	d013      	beq.n	800c82c <USB_EPClearStall+0xd4>
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	009b      	lsls	r3, r3, #2
 800c80c:	4413      	add	r3, r2
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	4b18      	ldr	r3, [pc, #96]	@ (800c874 <USB_EPClearStall+0x11c>)
 800c812:	4013      	ands	r3, r2
 800c814:	61bb      	str	r3, [r7, #24]
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	441a      	add	r2, r3
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c826:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c82a:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c82c:	687a      	ldr	r2, [r7, #4]
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4413      	add	r3, r2
 800c836:	681a      	ldr	r2, [r3, #0]
 800c838:	4b10      	ldr	r3, [pc, #64]	@ (800c87c <USB_EPClearStall+0x124>)
 800c83a:	4013      	ands	r3, r2
 800c83c:	617b      	str	r3, [r7, #20]
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c844:	617b      	str	r3, [r7, #20]
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c84c:	617b      	str	r3, [r7, #20]
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	683b      	ldr	r3, [r7, #0]
 800c852:	781b      	ldrb	r3, [r3, #0]
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	441a      	add	r2, r3
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c85e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c862:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3724      	adds	r7, #36	@ 0x24
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr
 800c872:	bf00      	nop
 800c874:	07ff8f8f 	.word	0x07ff8f8f
 800c878:	07ff8fbf 	.word	0x07ff8fbf
 800c87c:	07ffbf8f 	.word	0x07ffbf8f

0800c880 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
 800c888:	460b      	mov	r3, r1
 800c88a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c88c:	78fb      	ldrb	r3, [r7, #3]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d102      	bne.n	800c898 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2280      	movs	r2, #128	@ 0x80
 800c896:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	370c      	adds	r7, #12
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr

0800c8a6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800c8a6:	b480      	push	{r7}
 800c8a8:	b083      	sub	sp, #12
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8b2:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	370c      	adds	r7, #12
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8d4:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c8dc:	2300      	movs	r3, #0
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	370c      	adds	r7, #12
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr

0800c8ea <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800c8ea:	b480      	push	{r7}
 800c8ec:	b085      	sub	sp, #20
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8f6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c8f8:	68fb      	ldr	r3, [r7, #12]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3714      	adds	r7, #20
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr

0800c906 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c906:	b480      	push	{r7}
 800c908:	b08b      	sub	sp, #44	@ 0x2c
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	60f8      	str	r0, [r7, #12]
 800c90e:	60b9      	str	r1, [r7, #8]
 800c910:	4611      	mov	r1, r2
 800c912:	461a      	mov	r2, r3
 800c914:	460b      	mov	r3, r1
 800c916:	80fb      	strh	r3, [r7, #6]
 800c918:	4613      	mov	r3, r2
 800c91a:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800c91c:	88bb      	ldrh	r3, [r7, #4]
 800c91e:	3303      	adds	r3, #3
 800c920:	089b      	lsrs	r3, r3, #2
 800c922:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800c924:	88bb      	ldrh	r3, [r7, #4]
 800c926:	f003 0303 	and.w	r3, r3, #3
 800c92a:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800c930:	8afb      	ldrh	r3, [r7, #22]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d002      	beq.n	800c93c <USB_WritePMA+0x36>
  {
    NbWords--;
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	3b01      	subs	r3, #1
 800c93a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800c93c:	88fb      	ldrh	r3, [r7, #6]
 800c93e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c942:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c946:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	623b      	str	r3, [r7, #32]
 800c94c:	e015      	b.n	800c97a <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	681a      	ldr	r2, [r3, #0]
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	3304      	adds	r3, #4
 800c95a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	3301      	adds	r3, #1
 800c960:	613b      	str	r3, [r7, #16]
    pBuf++;
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	3301      	adds	r3, #1
 800c966:	613b      	str	r3, [r7, #16]
    pBuf++;
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	3301      	adds	r3, #1
 800c96c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	3301      	adds	r3, #1
 800c972:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800c974:	6a3b      	ldr	r3, [r7, #32]
 800c976:	3b01      	subs	r3, #1
 800c978:	623b      	str	r3, [r7, #32]
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1e6      	bne.n	800c94e <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800c980:	8afb      	ldrh	r3, [r7, #22]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d01a      	beq.n	800c9bc <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800c986:	2300      	movs	r3, #0
 800c988:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	461a      	mov	r2, r3
 800c990:	6a3b      	ldr	r3, [r7, #32]
 800c992:	00db      	lsls	r3, r3, #3
 800c994:	fa02 f303 	lsl.w	r3, r2, r3
 800c998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c99a:	4313      	orrs	r3, r2
 800c99c:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800c99e:	6a3b      	ldr	r3, [r7, #32]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	623b      	str	r3, [r7, #32]
      pBuf++;
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800c9aa:	8afb      	ldrh	r3, [r7, #22]
 800c9ac:	3b01      	subs	r3, #1
 800c9ae:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800c9b0:	8afb      	ldrh	r3, [r7, #22]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d1e9      	bne.n	800c98a <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c9ba:	601a      	str	r2, [r3, #0]
  }
}
 800c9bc:	bf00      	nop
 800c9be:	372c      	adds	r7, #44	@ 0x2c
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr

0800c9c8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b08b      	sub	sp, #44	@ 0x2c
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	4611      	mov	r1, r2
 800c9d4:	461a      	mov	r2, r3
 800c9d6:	460b      	mov	r3, r1
 800c9d8:	80fb      	strh	r3, [r7, #6]
 800c9da:	4613      	mov	r3, r2
 800c9dc:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800c9de:	88bb      	ldrh	r3, [r7, #4]
 800c9e0:	3303      	adds	r3, #3
 800c9e2:	089b      	lsrs	r3, r3, #2
 800c9e4:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800c9e6:	88bb      	ldrh	r3, [r7, #4]
 800c9e8:	f003 0303 	and.w	r3, r3, #3
 800c9ec:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800c9f2:	88fb      	ldrh	r3, [r7, #6]
 800c9f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c9f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c9fc:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800c9fe:	8b7b      	ldrh	r3, [r7, #26]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d002      	beq.n	800ca0a <USB_ReadPMA+0x42>
  {
    NbWords--;
 800ca04:	69fb      	ldr	r3, [r7, #28]
 800ca06:	3b01      	subs	r3, #1
 800ca08:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800ca0a:	69fb      	ldr	r3, [r7, #28]
 800ca0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca0e:	e015      	b.n	800ca3c <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800ca10:	6a3b      	ldr	r3, [r7, #32]
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800ca18:	6a3b      	ldr	r3, [r7, #32]
 800ca1a:	3304      	adds	r3, #4
 800ca1c:	623b      	str	r3, [r7, #32]
    pBuf++;
 800ca1e:	697b      	ldr	r3, [r7, #20]
 800ca20:	3301      	adds	r3, #1
 800ca22:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	3301      	adds	r3, #1
 800ca28:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	617b      	str	r3, [r7, #20]
    pBuf++;
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	3301      	adds	r3, #1
 800ca34:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800ca36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca38:	3b01      	subs	r3, #1
 800ca3a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d1e6      	bne.n	800ca10 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800ca42:	8b7b      	ldrh	r3, [r7, #26]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d017      	beq.n	800ca78 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800ca48:	6a3b      	ldr	r3, [r7, #32]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca50:	b2db      	uxtb	r3, r3
 800ca52:	00db      	lsls	r3, r3, #3
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	fa22 f303 	lsr.w	r3, r2, r3
 800ca5a:	b2da      	uxtb	r2, r3
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	701a      	strb	r2, [r3, #0]
      count++;
 800ca60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca62:	3301      	adds	r3, #1
 800ca64:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	3301      	adds	r3, #1
 800ca6a:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800ca6c:	8b7b      	ldrh	r3, [r7, #26]
 800ca6e:	3b01      	subs	r3, #1
 800ca70:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800ca72:	8b7b      	ldrh	r3, [r7, #26]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1ea      	bne.n	800ca4e <USB_ReadPMA+0x86>
  }
}
 800ca78:	bf00      	nop
 800ca7a:	372c      	adds	r7, #44	@ 0x2c
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca82:	4770      	bx	lr

0800ca84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ca90:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ca94:	f000 ffa4 	bl	800d9e0 <USBD_static_malloc>
 800ca98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d109      	bne.n	800cab4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	32b0      	adds	r2, #176	@ 0xb0
 800caaa:	2100      	movs	r1, #0
 800caac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cab0:	2302      	movs	r3, #2
 800cab2:	e0d4      	b.n	800cc5e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cab4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cab8:	2100      	movs	r1, #0
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f002 fb46 	bl	800f14c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	32b0      	adds	r2, #176	@ 0xb0
 800caca:	68f9      	ldr	r1, [r7, #12]
 800cacc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	32b0      	adds	r2, #176	@ 0xb0
 800cada:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	7c1b      	ldrb	r3, [r3, #16]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d138      	bne.n	800cb5e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800caec:	4b5e      	ldr	r3, [pc, #376]	@ (800cc68 <USBD_CDC_Init+0x1e4>)
 800caee:	7819      	ldrb	r1, [r3, #0]
 800caf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800caf4:	2202      	movs	r2, #2
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 fe79 	bl	800d7ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cafc:	4b5a      	ldr	r3, [pc, #360]	@ (800cc68 <USBD_CDC_Init+0x1e4>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	f003 020f 	and.w	r2, r3, #15
 800cb04:	6879      	ldr	r1, [r7, #4]
 800cb06:	4613      	mov	r3, r2
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	4413      	add	r3, r2
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	440b      	add	r3, r1
 800cb10:	3324      	adds	r3, #36	@ 0x24
 800cb12:	2201      	movs	r2, #1
 800cb14:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cb16:	4b55      	ldr	r3, [pc, #340]	@ (800cc6c <USBD_CDC_Init+0x1e8>)
 800cb18:	7819      	ldrb	r1, [r3, #0]
 800cb1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb1e:	2202      	movs	r2, #2
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f000 fe64 	bl	800d7ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cb26:	4b51      	ldr	r3, [pc, #324]	@ (800cc6c <USBD_CDC_Init+0x1e8>)
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	f003 020f 	and.w	r2, r3, #15
 800cb2e:	6879      	ldr	r1, [r7, #4]
 800cb30:	4613      	mov	r3, r2
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	4413      	add	r3, r2
 800cb36:	009b      	lsls	r3, r3, #2
 800cb38:	440b      	add	r3, r1
 800cb3a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cb3e:	2201      	movs	r2, #1
 800cb40:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cb42:	4b4b      	ldr	r3, [pc, #300]	@ (800cc70 <USBD_CDC_Init+0x1ec>)
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	f003 020f 	and.w	r2, r3, #15
 800cb4a:	6879      	ldr	r1, [r7, #4]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	4413      	add	r3, r2
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	440b      	add	r3, r1
 800cb56:	3326      	adds	r3, #38	@ 0x26
 800cb58:	2210      	movs	r2, #16
 800cb5a:	801a      	strh	r2, [r3, #0]
 800cb5c:	e035      	b.n	800cbca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cb5e:	4b42      	ldr	r3, [pc, #264]	@ (800cc68 <USBD_CDC_Init+0x1e4>)
 800cb60:	7819      	ldrb	r1, [r3, #0]
 800cb62:	2340      	movs	r3, #64	@ 0x40
 800cb64:	2202      	movs	r2, #2
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 fe41 	bl	800d7ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cb6c:	4b3e      	ldr	r3, [pc, #248]	@ (800cc68 <USBD_CDC_Init+0x1e4>)
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	f003 020f 	and.w	r2, r3, #15
 800cb74:	6879      	ldr	r1, [r7, #4]
 800cb76:	4613      	mov	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4413      	add	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	440b      	add	r3, r1
 800cb80:	3324      	adds	r3, #36	@ 0x24
 800cb82:	2201      	movs	r2, #1
 800cb84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cb86:	4b39      	ldr	r3, [pc, #228]	@ (800cc6c <USBD_CDC_Init+0x1e8>)
 800cb88:	7819      	ldrb	r1, [r3, #0]
 800cb8a:	2340      	movs	r3, #64	@ 0x40
 800cb8c:	2202      	movs	r2, #2
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f000 fe2d 	bl	800d7ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cb94:	4b35      	ldr	r3, [pc, #212]	@ (800cc6c <USBD_CDC_Init+0x1e8>)
 800cb96:	781b      	ldrb	r3, [r3, #0]
 800cb98:	f003 020f 	and.w	r2, r3, #15
 800cb9c:	6879      	ldr	r1, [r7, #4]
 800cb9e:	4613      	mov	r3, r2
 800cba0:	009b      	lsls	r3, r3, #2
 800cba2:	4413      	add	r3, r2
 800cba4:	009b      	lsls	r3, r3, #2
 800cba6:	440b      	add	r3, r1
 800cba8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cbac:	2201      	movs	r2, #1
 800cbae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cbb0:	4b2f      	ldr	r3, [pc, #188]	@ (800cc70 <USBD_CDC_Init+0x1ec>)
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	f003 020f 	and.w	r2, r3, #15
 800cbb8:	6879      	ldr	r1, [r7, #4]
 800cbba:	4613      	mov	r3, r2
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	440b      	add	r3, r1
 800cbc4:	3326      	adds	r3, #38	@ 0x26
 800cbc6:	2210      	movs	r2, #16
 800cbc8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cbca:	4b29      	ldr	r3, [pc, #164]	@ (800cc70 <USBD_CDC_Init+0x1ec>)
 800cbcc:	7819      	ldrb	r1, [r3, #0]
 800cbce:	2308      	movs	r3, #8
 800cbd0:	2203      	movs	r2, #3
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f000 fe0b 	bl	800d7ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cbd8:	4b25      	ldr	r3, [pc, #148]	@ (800cc70 <USBD_CDC_Init+0x1ec>)
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	f003 020f 	and.w	r2, r3, #15
 800cbe0:	6879      	ldr	r1, [r7, #4]
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	440b      	add	r3, r1
 800cbec:	3324      	adds	r3, #36	@ 0x24
 800cbee:	2201      	movs	r2, #1
 800cbf0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	33b0      	adds	r3, #176	@ 0xb0
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	4413      	add	r3, r2
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d101      	bne.n	800cc2c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cc28:	2302      	movs	r3, #2
 800cc2a:	e018      	b.n	800cc5e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	7c1b      	ldrb	r3, [r3, #16]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d10a      	bne.n	800cc4a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cc34:	4b0d      	ldr	r3, [pc, #52]	@ (800cc6c <USBD_CDC_Init+0x1e8>)
 800cc36:	7819      	ldrb	r1, [r3, #0]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cc3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f000 fe9e 	bl	800d984 <USBD_LL_PrepareReceive>
 800cc48:	e008      	b.n	800cc5c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cc4a:	4b08      	ldr	r3, [pc, #32]	@ (800cc6c <USBD_CDC_Init+0x1e8>)
 800cc4c:	7819      	ldrb	r1, [r3, #0]
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cc54:	2340      	movs	r3, #64	@ 0x40
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 fe94 	bl	800d984 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cc5c:	2300      	movs	r3, #0
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	200000af 	.word	0x200000af
 800cc6c:	200000b0 	.word	0x200000b0
 800cc70:	200000b1 	.word	0x200000b1

0800cc74 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cc80:	4b3a      	ldr	r3, [pc, #232]	@ (800cd6c <USBD_CDC_DeInit+0xf8>)
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	4619      	mov	r1, r3
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fdd1 	bl	800d82e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cc8c:	4b37      	ldr	r3, [pc, #220]	@ (800cd6c <USBD_CDC_DeInit+0xf8>)
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	f003 020f 	and.w	r2, r3, #15
 800cc94:	6879      	ldr	r1, [r7, #4]
 800cc96:	4613      	mov	r3, r2
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	4413      	add	r3, r2
 800cc9c:	009b      	lsls	r3, r3, #2
 800cc9e:	440b      	add	r3, r1
 800cca0:	3324      	adds	r3, #36	@ 0x24
 800cca2:	2200      	movs	r2, #0
 800cca4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cca6:	4b32      	ldr	r3, [pc, #200]	@ (800cd70 <USBD_CDC_DeInit+0xfc>)
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f000 fdbe 	bl	800d82e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ccb2:	4b2f      	ldr	r3, [pc, #188]	@ (800cd70 <USBD_CDC_DeInit+0xfc>)
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	f003 020f 	and.w	r2, r3, #15
 800ccba:	6879      	ldr	r1, [r7, #4]
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	4413      	add	r3, r2
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	440b      	add	r3, r1
 800ccc6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ccca:	2200      	movs	r2, #0
 800cccc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ccce:	4b29      	ldr	r3, [pc, #164]	@ (800cd74 <USBD_CDC_DeInit+0x100>)
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 fdaa 	bl	800d82e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ccda:	4b26      	ldr	r3, [pc, #152]	@ (800cd74 <USBD_CDC_DeInit+0x100>)
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	f003 020f 	and.w	r2, r3, #15
 800cce2:	6879      	ldr	r1, [r7, #4]
 800cce4:	4613      	mov	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	4413      	add	r3, r2
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	440b      	add	r3, r1
 800ccee:	3324      	adds	r3, #36	@ 0x24
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ccf4:	4b1f      	ldr	r3, [pc, #124]	@ (800cd74 <USBD_CDC_DeInit+0x100>)
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	f003 020f 	and.w	r2, r3, #15
 800ccfc:	6879      	ldr	r1, [r7, #4]
 800ccfe:	4613      	mov	r3, r2
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	4413      	add	r3, r2
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	440b      	add	r3, r1
 800cd08:	3326      	adds	r3, #38	@ 0x26
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	32b0      	adds	r2, #176	@ 0xb0
 800cd18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d01f      	beq.n	800cd60 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	33b0      	adds	r3, #176	@ 0xb0
 800cd2a:	009b      	lsls	r3, r3, #2
 800cd2c:	4413      	add	r3, r2
 800cd2e:	685b      	ldr	r3, [r3, #4]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	32b0      	adds	r2, #176	@ 0xb0
 800cd3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd42:	4618      	mov	r0, r3
 800cd44:	f000 fe5a 	bl	800d9fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	32b0      	adds	r2, #176	@ 0xb0
 800cd52:	2100      	movs	r1, #0
 800cd54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3708      	adds	r7, #8
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	200000af 	.word	0x200000af
 800cd70:	200000b0 	.word	0x200000b0
 800cd74:	200000b1 	.word	0x200000b1

0800cd78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b086      	sub	sp, #24
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	32b0      	adds	r2, #176	@ 0xb0
 800cd8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cd92:	2300      	movs	r3, #0
 800cd94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cd96:	2300      	movs	r3, #0
 800cd98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e0bf      	b.n	800cf28 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d050      	beq.n	800ce56 <USBD_CDC_Setup+0xde>
 800cdb4:	2b20      	cmp	r3, #32
 800cdb6:	f040 80af 	bne.w	800cf18 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	88db      	ldrh	r3, [r3, #6]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d03a      	beq.n	800ce38 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	781b      	ldrb	r3, [r3, #0]
 800cdc6:	b25b      	sxtb	r3, r3
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	da1b      	bge.n	800ce04 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	33b0      	adds	r3, #176	@ 0xb0
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	4413      	add	r3, r2
 800cdda:	685b      	ldr	r3, [r3, #4]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	683a      	ldr	r2, [r7, #0]
 800cde0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cde2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cde4:	683a      	ldr	r2, [r7, #0]
 800cde6:	88d2      	ldrh	r2, [r2, #6]
 800cde8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	88db      	ldrh	r3, [r3, #6]
 800cdee:	2b07      	cmp	r3, #7
 800cdf0:	bf28      	it	cs
 800cdf2:	2307      	movcs	r3, #7
 800cdf4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cdf6:	693b      	ldr	r3, [r7, #16]
 800cdf8:	89fa      	ldrh	r2, [r7, #14]
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f002 f8f0 	bl	800efe2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ce02:	e090      	b.n	800cf26 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	785a      	ldrb	r2, [r3, #1]
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	88db      	ldrh	r3, [r3, #6]
 800ce12:	2b3f      	cmp	r3, #63	@ 0x3f
 800ce14:	d803      	bhi.n	800ce1e <USBD_CDC_Setup+0xa6>
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	88db      	ldrh	r3, [r3, #6]
 800ce1a:	b2da      	uxtb	r2, r3
 800ce1c:	e000      	b.n	800ce20 <USBD_CDC_Setup+0xa8>
 800ce1e:	2240      	movs	r2, #64	@ 0x40
 800ce20:	693b      	ldr	r3, [r7, #16]
 800ce22:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ce26:	6939      	ldr	r1, [r7, #16]
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ce2e:	461a      	mov	r2, r3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f002 f902 	bl	800f03a <USBD_CtlPrepareRx>
      break;
 800ce36:	e076      	b.n	800cf26 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	33b0      	adds	r3, #176	@ 0xb0
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4413      	add	r3, r2
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	689b      	ldr	r3, [r3, #8]
 800ce4a:	683a      	ldr	r2, [r7, #0]
 800ce4c:	7850      	ldrb	r0, [r2, #1]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	6839      	ldr	r1, [r7, #0]
 800ce52:	4798      	blx	r3
      break;
 800ce54:	e067      	b.n	800cf26 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	785b      	ldrb	r3, [r3, #1]
 800ce5a:	2b0b      	cmp	r3, #11
 800ce5c:	d851      	bhi.n	800cf02 <USBD_CDC_Setup+0x18a>
 800ce5e:	a201      	add	r2, pc, #4	@ (adr r2, 800ce64 <USBD_CDC_Setup+0xec>)
 800ce60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce64:	0800ce95 	.word	0x0800ce95
 800ce68:	0800cf11 	.word	0x0800cf11
 800ce6c:	0800cf03 	.word	0x0800cf03
 800ce70:	0800cf03 	.word	0x0800cf03
 800ce74:	0800cf03 	.word	0x0800cf03
 800ce78:	0800cf03 	.word	0x0800cf03
 800ce7c:	0800cf03 	.word	0x0800cf03
 800ce80:	0800cf03 	.word	0x0800cf03
 800ce84:	0800cf03 	.word	0x0800cf03
 800ce88:	0800cf03 	.word	0x0800cf03
 800ce8c:	0800cebf 	.word	0x0800cebf
 800ce90:	0800cee9 	.word	0x0800cee9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	2b03      	cmp	r3, #3
 800ce9e:	d107      	bne.n	800ceb0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cea0:	f107 030a 	add.w	r3, r7, #10
 800cea4:	2202      	movs	r2, #2
 800cea6:	4619      	mov	r1, r3
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f002 f89a 	bl	800efe2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ceae:	e032      	b.n	800cf16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f001 ff17 	bl	800ece6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	75fb      	strb	r3, [r7, #23]
          break;
 800cebc:	e02b      	b.n	800cf16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cec4:	b2db      	uxtb	r3, r3
 800cec6:	2b03      	cmp	r3, #3
 800cec8:	d107      	bne.n	800ceda <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ceca:	f107 030d 	add.w	r3, r7, #13
 800cece:	2201      	movs	r2, #1
 800ced0:	4619      	mov	r1, r3
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f002 f885 	bl	800efe2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ced8:	e01d      	b.n	800cf16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ceda:	6839      	ldr	r1, [r7, #0]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f001 ff02 	bl	800ece6 <USBD_CtlError>
            ret = USBD_FAIL;
 800cee2:	2303      	movs	r3, #3
 800cee4:	75fb      	strb	r3, [r7, #23]
          break;
 800cee6:	e016      	b.n	800cf16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ceee:	b2db      	uxtb	r3, r3
 800cef0:	2b03      	cmp	r3, #3
 800cef2:	d00f      	beq.n	800cf14 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cef4:	6839      	ldr	r1, [r7, #0]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f001 fef5 	bl	800ece6 <USBD_CtlError>
            ret = USBD_FAIL;
 800cefc:	2303      	movs	r3, #3
 800cefe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cf00:	e008      	b.n	800cf14 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cf02:	6839      	ldr	r1, [r7, #0]
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f001 feee 	bl	800ece6 <USBD_CtlError>
          ret = USBD_FAIL;
 800cf0a:	2303      	movs	r3, #3
 800cf0c:	75fb      	strb	r3, [r7, #23]
          break;
 800cf0e:	e002      	b.n	800cf16 <USBD_CDC_Setup+0x19e>
          break;
 800cf10:	bf00      	nop
 800cf12:	e008      	b.n	800cf26 <USBD_CDC_Setup+0x1ae>
          break;
 800cf14:	bf00      	nop
      }
      break;
 800cf16:	e006      	b.n	800cf26 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cf18:	6839      	ldr	r1, [r7, #0]
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f001 fee3 	bl	800ece6 <USBD_CtlError>
      ret = USBD_FAIL;
 800cf20:	2303      	movs	r3, #3
 800cf22:	75fb      	strb	r3, [r7, #23]
      break;
 800cf24:	bf00      	nop
  }

  return (uint8_t)ret;
 800cf26:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3718      	adds	r7, #24
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}

0800cf30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b084      	sub	sp, #16
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
 800cf38:	460b      	mov	r3, r1
 800cf3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cf42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	32b0      	adds	r2, #176	@ 0xb0
 800cf4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d101      	bne.n	800cf5a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cf56:	2303      	movs	r3, #3
 800cf58:	e065      	b.n	800d026 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	32b0      	adds	r2, #176	@ 0xb0
 800cf64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cf6a:	78fb      	ldrb	r3, [r7, #3]
 800cf6c:	f003 020f 	and.w	r2, r3, #15
 800cf70:	6879      	ldr	r1, [r7, #4]
 800cf72:	4613      	mov	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	4413      	add	r3, r2
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	440b      	add	r3, r1
 800cf7c:	3318      	adds	r3, #24
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d02f      	beq.n	800cfe4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cf84:	78fb      	ldrb	r3, [r7, #3]
 800cf86:	f003 020f 	and.w	r2, r3, #15
 800cf8a:	6879      	ldr	r1, [r7, #4]
 800cf8c:	4613      	mov	r3, r2
 800cf8e:	009b      	lsls	r3, r3, #2
 800cf90:	4413      	add	r3, r2
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	440b      	add	r3, r1
 800cf96:	3318      	adds	r3, #24
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	78fb      	ldrb	r3, [r7, #3]
 800cf9c:	f003 010f 	and.w	r1, r3, #15
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	440b      	add	r3, r1
 800cfa8:	00db      	lsls	r3, r3, #3
 800cfaa:	4403      	add	r3, r0
 800cfac:	3324      	adds	r3, #36	@ 0x24
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	fbb2 f1f3 	udiv	r1, r2, r3
 800cfb4:	fb01 f303 	mul.w	r3, r1, r3
 800cfb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d112      	bne.n	800cfe4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cfbe:	78fb      	ldrb	r3, [r7, #3]
 800cfc0:	f003 020f 	and.w	r2, r3, #15
 800cfc4:	6879      	ldr	r1, [r7, #4]
 800cfc6:	4613      	mov	r3, r2
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	4413      	add	r3, r2
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	440b      	add	r3, r1
 800cfd0:	3318      	adds	r3, #24
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cfd6:	78f9      	ldrb	r1, [r7, #3]
 800cfd8:	2300      	movs	r3, #0
 800cfda:	2200      	movs	r2, #0
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 fcb6 	bl	800d94e <USBD_LL_Transmit>
 800cfe2:	e01f      	b.n	800d024 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	33b0      	adds	r3, #176	@ 0xb0
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4413      	add	r3, r2
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	691b      	ldr	r3, [r3, #16]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d010      	beq.n	800d024 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	33b0      	adds	r3, #176	@ 0xb0
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4413      	add	r3, r2
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	68ba      	ldr	r2, [r7, #8]
 800d016:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d020:	78fa      	ldrb	r2, [r7, #3]
 800d022:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	3710      	adds	r7, #16
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b084      	sub	sp, #16
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
 800d036:	460b      	mov	r3, r1
 800d038:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	32b0      	adds	r2, #176	@ 0xb0
 800d044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d048:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	32b0      	adds	r2, #176	@ 0xb0
 800d054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d101      	bne.n	800d060 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d05c:	2303      	movs	r3, #3
 800d05e:	e01a      	b.n	800d096 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d060:	78fb      	ldrb	r3, [r7, #3]
 800d062:	4619      	mov	r1, r3
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 fca8 	bl	800d9ba <USBD_LL_GetRxDataSize>
 800d06a:	4602      	mov	r2, r0
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	33b0      	adds	r3, #176	@ 0xb0
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4413      	add	r3, r2
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d08a:	68fa      	ldr	r2, [r7, #12]
 800d08c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d090:	4611      	mov	r1, r2
 800d092:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b084      	sub	sp, #16
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	32b0      	adds	r2, #176	@ 0xb0
 800d0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d101      	bne.n	800d0c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d0bc:	2303      	movs	r3, #3
 800d0be:	e024      	b.n	800d10a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0c6:	687a      	ldr	r2, [r7, #4]
 800d0c8:	33b0      	adds	r3, #176	@ 0xb0
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	4413      	add	r3, r2
 800d0ce:	685b      	ldr	r3, [r3, #4]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d019      	beq.n	800d108 <USBD_CDC_EP0_RxReady+0x6a>
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d0da:	2bff      	cmp	r3, #255	@ 0xff
 800d0dc:	d014      	beq.n	800d108 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	33b0      	adds	r3, #176	@ 0xb0
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	4413      	add	r3, r2
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	68fa      	ldr	r2, [r7, #12]
 800d0f2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d0f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d0fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	22ff      	movs	r2, #255	@ 0xff
 800d104:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
	...

0800d114 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b086      	sub	sp, #24
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d11c:	2182      	movs	r1, #130	@ 0x82
 800d11e:	4818      	ldr	r0, [pc, #96]	@ (800d180 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d120:	f000 ffab 	bl	800e07a <USBD_GetEpDesc>
 800d124:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d126:	2101      	movs	r1, #1
 800d128:	4815      	ldr	r0, [pc, #84]	@ (800d180 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d12a:	f000 ffa6 	bl	800e07a <USBD_GetEpDesc>
 800d12e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d130:	2181      	movs	r1, #129	@ 0x81
 800d132:	4813      	ldr	r0, [pc, #76]	@ (800d180 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d134:	f000 ffa1 	bl	800e07a <USBD_GetEpDesc>
 800d138:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d002      	beq.n	800d146 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	2210      	movs	r2, #16
 800d144:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d006      	beq.n	800d15a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	2200      	movs	r2, #0
 800d150:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d154:	711a      	strb	r2, [r3, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d006      	beq.n	800d16e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d168:	711a      	strb	r2, [r3, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2243      	movs	r2, #67	@ 0x43
 800d172:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d174:	4b02      	ldr	r3, [pc, #8]	@ (800d180 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d176:	4618      	mov	r0, r3
 800d178:	3718      	adds	r7, #24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	2000006c 	.word	0x2000006c

0800d184 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b086      	sub	sp, #24
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d18c:	2182      	movs	r1, #130	@ 0x82
 800d18e:	4818      	ldr	r0, [pc, #96]	@ (800d1f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d190:	f000 ff73 	bl	800e07a <USBD_GetEpDesc>
 800d194:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d196:	2101      	movs	r1, #1
 800d198:	4815      	ldr	r0, [pc, #84]	@ (800d1f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d19a:	f000 ff6e 	bl	800e07a <USBD_GetEpDesc>
 800d19e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d1a0:	2181      	movs	r1, #129	@ 0x81
 800d1a2:	4813      	ldr	r0, [pc, #76]	@ (800d1f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d1a4:	f000 ff69 	bl	800e07a <USBD_GetEpDesc>
 800d1a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d002      	beq.n	800d1b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	2210      	movs	r2, #16
 800d1b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d006      	beq.n	800d1ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	711a      	strb	r2, [r3, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	f042 0202 	orr.w	r2, r2, #2
 800d1c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d006      	beq.n	800d1de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	711a      	strb	r2, [r3, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	f042 0202 	orr.w	r2, r2, #2
 800d1dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2243      	movs	r2, #67	@ 0x43
 800d1e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d1e4:	4b02      	ldr	r3, [pc, #8]	@ (800d1f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3718      	adds	r7, #24
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	2000006c 	.word	0x2000006c

0800d1f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b086      	sub	sp, #24
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d1fc:	2182      	movs	r1, #130	@ 0x82
 800d1fe:	4818      	ldr	r0, [pc, #96]	@ (800d260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d200:	f000 ff3b 	bl	800e07a <USBD_GetEpDesc>
 800d204:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d206:	2101      	movs	r1, #1
 800d208:	4815      	ldr	r0, [pc, #84]	@ (800d260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d20a:	f000 ff36 	bl	800e07a <USBD_GetEpDesc>
 800d20e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d210:	2181      	movs	r1, #129	@ 0x81
 800d212:	4813      	ldr	r0, [pc, #76]	@ (800d260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d214:	f000 ff31 	bl	800e07a <USBD_GetEpDesc>
 800d218:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d002      	beq.n	800d226 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	2210      	movs	r2, #16
 800d224:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d006      	beq.n	800d23a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	2200      	movs	r2, #0
 800d230:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d234:	711a      	strb	r2, [r3, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d006      	beq.n	800d24e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2200      	movs	r2, #0
 800d244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d248:	711a      	strb	r2, [r3, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2243      	movs	r2, #67	@ 0x43
 800d252:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d254:	4b02      	ldr	r3, [pc, #8]	@ (800d260 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d256:	4618      	mov	r0, r3
 800d258:	3718      	adds	r7, #24
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	2000006c 	.word	0x2000006c

0800d264 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d264:	b480      	push	{r7}
 800d266:	b083      	sub	sp, #12
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	220a      	movs	r2, #10
 800d270:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d272:	4b03      	ldr	r3, [pc, #12]	@ (800d280 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d274:	4618      	mov	r0, r3
 800d276:	370c      	adds	r7, #12
 800d278:	46bd      	mov	sp, r7
 800d27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27e:	4770      	bx	lr
 800d280:	20000028 	.word	0x20000028

0800d284 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d284:	b480      	push	{r7}
 800d286:	b083      	sub	sp, #12
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d101      	bne.n	800d298 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d294:	2303      	movs	r3, #3
 800d296:	e009      	b.n	800d2ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	33b0      	adds	r3, #176	@ 0xb0
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	4413      	add	r3, r2
 800d2a6:	683a      	ldr	r2, [r7, #0]
 800d2a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d2aa:	2300      	movs	r3, #0
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	370c      	adds	r7, #12
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b6:	4770      	bx	lr

0800d2b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d2b8:	b480      	push	{r7}
 800d2ba:	b087      	sub	sp, #28
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	32b0      	adds	r2, #176	@ 0xb0
 800d2ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d2d4:	697b      	ldr	r3, [r7, #20]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d2da:	2303      	movs	r3, #3
 800d2dc:	e008      	b.n	800d2f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	68ba      	ldr	r2, [r7, #8]
 800d2e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	371c      	adds	r7, #28
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fa:	4770      	bx	lr

0800d2fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d2fc:	b480      	push	{r7}
 800d2fe:	b085      	sub	sp, #20
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	32b0      	adds	r2, #176	@ 0xb0
 800d310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d314:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d101      	bne.n	800d320 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d31c:	2303      	movs	r3, #3
 800d31e:	e004      	b.n	800d32a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	683a      	ldr	r2, [r7, #0]
 800d324:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3714      	adds	r7, #20
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr
	...

0800d338 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	32b0      	adds	r2, #176	@ 0xb0
 800d34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d34e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d350:	2301      	movs	r3, #1
 800d352:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d35a:	2303      	movs	r3, #3
 800d35c:	e025      	b.n	800d3aa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d364:	2b00      	cmp	r3, #0
 800d366:	d11f      	bne.n	800d3a8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d368:	68bb      	ldr	r3, [r7, #8]
 800d36a:	2201      	movs	r2, #1
 800d36c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d370:	4b10      	ldr	r3, [pc, #64]	@ (800d3b4 <USBD_CDC_TransmitPacket+0x7c>)
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	f003 020f 	and.w	r2, r3, #15
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	4613      	mov	r3, r2
 800d382:	009b      	lsls	r3, r3, #2
 800d384:	4413      	add	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4403      	add	r3, r0
 800d38a:	3318      	adds	r3, #24
 800d38c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d38e:	4b09      	ldr	r3, [pc, #36]	@ (800d3b4 <USBD_CDC_TransmitPacket+0x7c>)
 800d390:	7819      	ldrb	r1, [r3, #0]
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d398:	68bb      	ldr	r3, [r7, #8]
 800d39a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f000 fad5 	bl	800d94e <USBD_LL_Transmit>

    ret = USBD_OK;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	3710      	adds	r7, #16
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	200000af 	.word	0x200000af

0800d3b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	32b0      	adds	r2, #176	@ 0xb0
 800d3ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	32b0      	adds	r2, #176	@ 0xb0
 800d3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d101      	bne.n	800d3e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	e018      	b.n	800d418 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	7c1b      	ldrb	r3, [r3, #16]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d10a      	bne.n	800d404 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d3ee:	4b0c      	ldr	r3, [pc, #48]	@ (800d420 <USBD_CDC_ReceivePacket+0x68>)
 800d3f0:	7819      	ldrb	r1, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d3f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 fac1 	bl	800d984 <USBD_LL_PrepareReceive>
 800d402:	e008      	b.n	800d416 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d404:	4b06      	ldr	r3, [pc, #24]	@ (800d420 <USBD_CDC_ReceivePacket+0x68>)
 800d406:	7819      	ldrb	r1, [r3, #0]
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d40e:	2340      	movs	r3, #64	@ 0x40
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f000 fab7 	bl	800d984 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d416:	2300      	movs	r3, #0
}
 800d418:	4618      	mov	r0, r3
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	200000b0 	.word	0x200000b0

0800d424 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d428:	2200      	movs	r2, #0
 800d42a:	4905      	ldr	r1, [pc, #20]	@ (800d440 <TEMPLATE_Init+0x1c>)
 800d42c:	4805      	ldr	r0, [pc, #20]	@ (800d444 <TEMPLATE_Init+0x20>)
 800d42e:	f7ff ff43 	bl	800d2b8 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d432:	4905      	ldr	r1, [pc, #20]	@ (800d448 <TEMPLATE_Init+0x24>)
 800d434:	4803      	ldr	r0, [pc, #12]	@ (800d444 <TEMPLATE_Init+0x20>)
 800d436:	f7ff ff61 	bl	800d2fc <USBD_CDC_SetRxBuffer>
      return (0);
 800d43a:	2300      	movs	r3, #0
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	20000c10 	.word	0x20000c10
 800d444:	2000068c 	.word	0x2000068c
 800d448:	20000a10 	.word	0x20000a10

0800d44c <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800d44c:	b480      	push	{r7}
 800d44e:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <TEMPLATE_Transmit>:

uint8_t TEMPLATE_Transmit(uint8_t* Buf, uint16_t Len)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	460b      	mov	r3, r1
 800d466:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d468:	2300      	movs	r3, #0
 800d46a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d46c:	4b0d      	ldr	r3, [pc, #52]	@ (800d4a4 <TEMPLATE_Transmit+0x48>)
 800d46e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d472:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d001      	beq.n	800d482 <TEMPLATE_Transmit+0x26>
    return
             USBD_BUSY;
 800d47e:	2301      	movs	r3, #1
 800d480:	e00b      	b.n	800d49a <TEMPLATE_Transmit+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d482:	887b      	ldrh	r3, [r7, #2]
 800d484:	461a      	mov	r2, r3
 800d486:	6879      	ldr	r1, [r7, #4]
 800d488:	4806      	ldr	r0, [pc, #24]	@ (800d4a4 <TEMPLATE_Transmit+0x48>)
 800d48a:	f7ff ff15 	bl	800d2b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d48e:	4805      	ldr	r0, [pc, #20]	@ (800d4a4 <TEMPLATE_Transmit+0x48>)
 800d490:	f7ff ff52 	bl	800d338 <USBD_CDC_TransmitPacket>
 800d494:	4603      	mov	r3, r0
 800d496:	73fb      	strb	r3, [r7, #15]
  return result;
 800d498:	7bfb      	ldrb	r3, [r7, #15]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	2000068c 	.word	0x2000068c

0800d4a8 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	6039      	str	r1, [r7, #0]
 800d4b2:	71fb      	strb	r3, [r7, #7]
 800d4b4:	4613      	mov	r3, r2
 800d4b6:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800d4b8:	79fb      	ldrb	r3, [r7, #7]
 800d4ba:	2b23      	cmp	r3, #35	@ 0x23
 800d4bc:	f200 8098 	bhi.w	800d5f0 <TEMPLATE_Control+0x148>
 800d4c0:	a201      	add	r2, pc, #4	@ (adr r2, 800d4c8 <TEMPLATE_Control+0x20>)
 800d4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c6:	bf00      	nop
 800d4c8:	0800d5f1 	.word	0x0800d5f1
 800d4cc:	0800d5f1 	.word	0x0800d5f1
 800d4d0:	0800d5f1 	.word	0x0800d5f1
 800d4d4:	0800d5f1 	.word	0x0800d5f1
 800d4d8:	0800d5f1 	.word	0x0800d5f1
 800d4dc:	0800d5f1 	.word	0x0800d5f1
 800d4e0:	0800d5f1 	.word	0x0800d5f1
 800d4e4:	0800d5f1 	.word	0x0800d5f1
 800d4e8:	0800d5f1 	.word	0x0800d5f1
 800d4ec:	0800d5f1 	.word	0x0800d5f1
 800d4f0:	0800d5f1 	.word	0x0800d5f1
 800d4f4:	0800d5f1 	.word	0x0800d5f1
 800d4f8:	0800d5f1 	.word	0x0800d5f1
 800d4fc:	0800d5f1 	.word	0x0800d5f1
 800d500:	0800d5f1 	.word	0x0800d5f1
 800d504:	0800d5f1 	.word	0x0800d5f1
 800d508:	0800d5f1 	.word	0x0800d5f1
 800d50c:	0800d5f1 	.word	0x0800d5f1
 800d510:	0800d5f1 	.word	0x0800d5f1
 800d514:	0800d5f1 	.word	0x0800d5f1
 800d518:	0800d5f1 	.word	0x0800d5f1
 800d51c:	0800d5f1 	.word	0x0800d5f1
 800d520:	0800d5f1 	.word	0x0800d5f1
 800d524:	0800d5f1 	.word	0x0800d5f1
 800d528:	0800d5f1 	.word	0x0800d5f1
 800d52c:	0800d5f1 	.word	0x0800d5f1
 800d530:	0800d5f1 	.word	0x0800d5f1
 800d534:	0800d5f1 	.word	0x0800d5f1
 800d538:	0800d5f1 	.word	0x0800d5f1
 800d53c:	0800d5f1 	.word	0x0800d5f1
 800d540:	0800d5f1 	.word	0x0800d5f1
 800d544:	0800d5f1 	.word	0x0800d5f1
 800d548:	0800d559 	.word	0x0800d559
 800d54c:	0800d59d 	.word	0x0800d59d
 800d550:	0800d5f1 	.word	0x0800d5f1
 800d554:	0800d5f1 	.word	0x0800d5f1
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	461a      	mov	r2, r3
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	3301      	adds	r3, #1
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	021b      	lsls	r3, r3, #8
 800d566:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	3302      	adds	r3, #2
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800d570:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	3303      	adds	r3, #3
 800d576:	781b      	ldrb	r3, [r3, #0]
 800d578:	061b      	lsls	r3, r3, #24
 800d57a:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800d57c:	461a      	mov	r2, r3
 800d57e:	4b20      	ldr	r3, [pc, #128]	@ (800d600 <TEMPLATE_Control+0x158>)
 800d580:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	791a      	ldrb	r2, [r3, #4]
 800d586:	4b1e      	ldr	r3, [pc, #120]	@ (800d600 <TEMPLATE_Control+0x158>)
 800d588:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	795a      	ldrb	r2, [r3, #5]
 800d58e:	4b1c      	ldr	r3, [pc, #112]	@ (800d600 <TEMPLATE_Control+0x158>)
 800d590:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	799a      	ldrb	r2, [r3, #6]
 800d596:	4b1a      	ldr	r3, [pc, #104]	@ (800d600 <TEMPLATE_Control+0x158>)
 800d598:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800d59a:	e02a      	b.n	800d5f2 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800d59c:	4b18      	ldr	r3, [pc, #96]	@ (800d600 <TEMPLATE_Control+0x158>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	b2da      	uxtb	r2, r3
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800d5a6:	4b16      	ldr	r3, [pc, #88]	@ (800d600 <TEMPLATE_Control+0x158>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	0a1a      	lsrs	r2, r3, #8
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	b2d2      	uxtb	r2, r2
 800d5b2:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800d5b4:	4b12      	ldr	r3, [pc, #72]	@ (800d600 <TEMPLATE_Control+0x158>)
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	0c1a      	lsrs	r2, r3, #16
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	3302      	adds	r3, #2
 800d5be:	b2d2      	uxtb	r2, r2
 800d5c0:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800d5c2:	4b0f      	ldr	r3, [pc, #60]	@ (800d600 <TEMPLATE_Control+0x158>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	0e1a      	lsrs	r2, r3, #24
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	3303      	adds	r3, #3
 800d5cc:	b2d2      	uxtb	r2, r2
 800d5ce:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	3304      	adds	r3, #4
 800d5d4:	4a0a      	ldr	r2, [pc, #40]	@ (800d600 <TEMPLATE_Control+0x158>)
 800d5d6:	7912      	ldrb	r2, [r2, #4]
 800d5d8:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	3305      	adds	r3, #5
 800d5de:	4a08      	ldr	r2, [pc, #32]	@ (800d600 <TEMPLATE_Control+0x158>)
 800d5e0:	7952      	ldrb	r2, [r2, #5]
 800d5e2:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800d5e4:	683b      	ldr	r3, [r7, #0]
 800d5e6:	3306      	adds	r3, #6
 800d5e8:	4a05      	ldr	r2, [pc, #20]	@ (800d600 <TEMPLATE_Control+0x158>)
 800d5ea:	7992      	ldrb	r2, [r2, #6]
 800d5ec:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800d5ee:	e000      	b.n	800d5f2 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800d5f0:	bf00      	nop
  }

  return (0);
 800d5f2:	2300      	movs	r3, #0
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	200000c8 	.word	0x200000c8

0800d604 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
      if(Buf[0] == '1')
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	2b31      	cmp	r3, #49	@ 0x31
 800d614:	d105      	bne.n	800d622 <TEMPLATE_Receive+0x1e>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800d616:	2201      	movs	r2, #1
 800d618:	2120      	movs	r1, #32
 800d61a:	480a      	ldr	r0, [pc, #40]	@ (800d644 <TEMPLATE_Receive+0x40>)
 800d61c:	f7f4 fd52 	bl	80020c4 <HAL_GPIO_WritePin>
 800d620:	e008      	b.n	800d634 <TEMPLATE_Receive+0x30>
      else if(Buf[0] == '0')
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2b30      	cmp	r3, #48	@ 0x30
 800d628:	d104      	bne.n	800d634 <TEMPLATE_Receive+0x30>
             HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800d62a:	2200      	movs	r2, #0
 800d62c:	2120      	movs	r1, #32
 800d62e:	4805      	ldr	r0, [pc, #20]	@ (800d644 <TEMPLATE_Receive+0x40>)
 800d630:	f7f4 fd48 	bl	80020c4 <HAL_GPIO_WritePin>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d634:	4804      	ldr	r0, [pc, #16]	@ (800d648 <TEMPLATE_Receive+0x44>)
 800d636:	f7ff febf 	bl	800d3b8 <USBD_CDC_ReceivePacket>
      return (USBD_OK);
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3708      	adds	r7, #8
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}
 800d644:	42020000 	.word	0x42020000
 800d648:	2000068c 	.word	0x2000068c

0800d64c <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b085      	sub	sp, #20
 800d650:	af00      	add	r7, sp, #0
 800d652:	60f8      	str	r0, [r7, #12]
 800d654:	60b9      	str	r1, [r7, #8]
 800d656:	4613      	mov	r3, r2
 800d658:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return (0);
 800d65a:	2300      	movs	r3, #0
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3714      	adds	r7, #20
 800d660:	46bd      	mov	sp, r7
 800d662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d666:	4770      	bx	lr

0800d668 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800d67c:	4619      	mov	r1, r3
 800d67e:	4610      	mov	r0, r2
 800d680:	f000 faa5 	bl	800dbce <USBD_LL_SetupStage>
}
 800d684:	bf00      	nop
 800d686:	3708      	adds	r7, #8
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
 800d694:	460b      	mov	r3, r1
 800d696:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800d69e:	78fa      	ldrb	r2, [r7, #3]
 800d6a0:	6879      	ldr	r1, [r7, #4]
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	009b      	lsls	r3, r3, #2
 800d6a6:	4413      	add	r3, r2
 800d6a8:	00db      	lsls	r3, r3, #3
 800d6aa:	440b      	add	r3, r1
 800d6ac:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800d6b0:	681a      	ldr	r2, [r3, #0]
 800d6b2:	78fb      	ldrb	r3, [r7, #3]
 800d6b4:	4619      	mov	r1, r3
 800d6b6:	f000 fadf 	bl	800dc78 <USBD_LL_DataOutStage>
}
 800d6ba:	bf00      	nop
 800d6bc:	3708      	adds	r7, #8
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}

0800d6c2 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800d6c2:	b580      	push	{r7, lr}
 800d6c4:	b082      	sub	sp, #8
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800d6d4:	78fa      	ldrb	r2, [r7, #3]
 800d6d6:	6879      	ldr	r1, [r7, #4]
 800d6d8:	4613      	mov	r3, r2
 800d6da:	009b      	lsls	r3, r3, #2
 800d6dc:	4413      	add	r3, r2
 800d6de:	00db      	lsls	r3, r3, #3
 800d6e0:	440b      	add	r3, r1
 800d6e2:	3328      	adds	r3, #40	@ 0x28
 800d6e4:	681a      	ldr	r2, [r3, #0]
 800d6e6:	78fb      	ldrb	r3, [r7, #3]
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	f000 fb78 	bl	800ddde <USBD_LL_DataInStage>
}
 800d6ee:	bf00      	nop
 800d6f0:	3708      	adds	r7, #8
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b082      	sub	sp, #8
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800d704:	4618      	mov	r0, r3
 800d706:	f000 fc7e 	bl	800e006 <USBD_LL_SOF>
}
 800d70a:	bf00      	nop
 800d70c:	3708      	adds	r7, #8
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}

0800d712 <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800d712:	b580      	push	{r7, lr}
 800d714:	b084      	sub	sp, #16
 800d716:	af00      	add	r7, sp, #0
 800d718:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d71a:	2301      	movs	r3, #1
 800d71c:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	79db      	ldrb	r3, [r3, #7]
 800d722:	2b02      	cmp	r3, #2
 800d724:	d001      	beq.n	800d72a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d726:	f7f3 fab1 	bl	8000c8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800d730:	7bfa      	ldrb	r2, [r7, #15]
 800d732:	4611      	mov	r1, r2
 800d734:	4618      	mov	r0, r3
 800d736:	f000 fc56 	bl	800dfe6 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800d740:	4618      	mov	r0, r3
 800d742:	f000 fbfe 	bl	800df42 <USBD_LL_Reset>
}
 800d746:	bf00      	nop
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
	...

0800d750 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	4a19      	ldr	r2, [pc, #100]	@ (800d7c0 <USBD_LL_Init+0x70>)
 800d75c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d766:	2340      	movs	r3, #64	@ 0x40
 800d768:	2200      	movs	r2, #0
 800d76a:	2100      	movs	r1, #0
 800d76c:	f7f6 fa74 	bl	8003c58 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d776:	2380      	movs	r3, #128	@ 0x80
 800d778:	2200      	movs	r2, #0
 800d77a:	2180      	movs	r1, #128	@ 0x80
 800d77c:	f7f6 fa6c 	bl	8003c58 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d786:	23c0      	movs	r3, #192	@ 0xc0
 800d788:	2200      	movs	r2, #0
 800d78a:	2181      	movs	r1, #129	@ 0x81
 800d78c:	f7f6 fa64 	bl	8003c58 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d796:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d79a:	2200      	movs	r2, #0
 800d79c:	2101      	movs	r1, #1
 800d79e:	f7f6 fa5b 	bl	8003c58 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d7a8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	2182      	movs	r1, #130	@ 0x82
 800d7b0:	f7f6 fa52 	bl	8003c58 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800d7b4:	2300      	movs	r3, #0
}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3708      	adds	r7, #8
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	200003a8 	.word	0x200003a8

0800d7c4 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b084      	sub	sp, #16
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7f4 ff24 	bl	8002620 <HAL_PCD_Start>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800d7dc:	7bfb      	ldrb	r3, [r7, #15]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f000 f916 	bl	800da10 <USBD_Get_USB_Status>
 800d7e4:	4603      	mov	r3, r0
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3710      	adds	r7, #16
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b084      	sub	sp, #16
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
 800d7f6:	4608      	mov	r0, r1
 800d7f8:	4611      	mov	r1, r2
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	70fb      	strb	r3, [r7, #3]
 800d800:	460b      	mov	r3, r1
 800d802:	70bb      	strb	r3, [r7, #2]
 800d804:	4613      	mov	r3, r2
 800d806:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d80e:	78bb      	ldrb	r3, [r7, #2]
 800d810:	883a      	ldrh	r2, [r7, #0]
 800d812:	78f9      	ldrb	r1, [r7, #3]
 800d814:	f7f5 f853 	bl	80028be <HAL_PCD_EP_Open>
 800d818:	4603      	mov	r3, r0
 800d81a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800d81c:	7bfb      	ldrb	r3, [r7, #15]
 800d81e:	4618      	mov	r0, r3
 800d820:	f000 f8f6 	bl	800da10 <USBD_Get_USB_Status>
 800d824:	4603      	mov	r3, r0
}
 800d826:	4618      	mov	r0, r3
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}

0800d82e <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b084      	sub	sp, #16
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
 800d836:	460b      	mov	r3, r1
 800d838:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d840:	78fa      	ldrb	r2, [r7, #3]
 800d842:	4611      	mov	r1, r2
 800d844:	4618      	mov	r0, r3
 800d846:	f7f5 f89b 	bl	8002980 <HAL_PCD_EP_Close>
 800d84a:	4603      	mov	r3, r0
 800d84c:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
 800d850:	4618      	mov	r0, r3
 800d852:	f000 f8dd 	bl	800da10 <USBD_Get_USB_Status>
 800d856:	4603      	mov	r3, r0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3710      	adds	r7, #16
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	460b      	mov	r3, r1
 800d86a:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d872:	78fa      	ldrb	r2, [r7, #3]
 800d874:	4611      	mov	r1, r2
 800d876:	4618      	mov	r0, r3
 800d878:	f7f5 f94e 	bl	8002b18 <HAL_PCD_EP_SetStall>
 800d87c:	4603      	mov	r3, r0
 800d87e:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800d880:	7bfb      	ldrb	r3, [r7, #15]
 800d882:	4618      	mov	r0, r3
 800d884:	f000 f8c4 	bl	800da10 <USBD_Get_USB_Status>
 800d888:	4603      	mov	r3, r0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b084      	sub	sp, #16
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
 800d89a:	460b      	mov	r3, r1
 800d89c:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8a4:	78fa      	ldrb	r2, [r7, #3]
 800d8a6:	4611      	mov	r1, r2
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f7f5 f989 	bl	8002bc0 <HAL_PCD_EP_ClrStall>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800d8b2:	7bfb      	ldrb	r3, [r7, #15]
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f000 f8ab 	bl	800da10 <USBD_Get_USB_Status>
 800d8ba:	4603      	mov	r3, r0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	3710      	adds	r7, #16
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8c4:	b480      	push	{r7}
 800d8c6:	b085      	sub	sp, #20
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
 800d8cc:	460b      	mov	r3, r1
 800d8ce:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8d6:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800d8d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	da0b      	bge.n	800d8f8 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d8e0:	78fb      	ldrb	r3, [r7, #3]
 800d8e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d8e6:	68f9      	ldr	r1, [r7, #12]
 800d8e8:	4613      	mov	r3, r2
 800d8ea:	009b      	lsls	r3, r3, #2
 800d8ec:	4413      	add	r3, r2
 800d8ee:	00db      	lsls	r3, r3, #3
 800d8f0:	440b      	add	r3, r1
 800d8f2:	3316      	adds	r3, #22
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	e00b      	b.n	800d910 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d8f8:	78fb      	ldrb	r3, [r7, #3]
 800d8fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d8fe:	68f9      	ldr	r1, [r7, #12]
 800d900:	4613      	mov	r3, r2
 800d902:	009b      	lsls	r3, r3, #2
 800d904:	4413      	add	r3, r2
 800d906:	00db      	lsls	r3, r3, #3
 800d908:	440b      	add	r3, r1
 800d90a:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800d90e:	781b      	ldrb	r3, [r3, #0]
      }
}
 800d910:	4618      	mov	r0, r3
 800d912:	3714      	adds	r7, #20
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	460b      	mov	r3, r1
 800d926:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d92e:	78fa      	ldrb	r2, [r7, #3]
 800d930:	4611      	mov	r1, r2
 800d932:	4618      	mov	r0, r3
 800d934:	f7f4 ff9f 	bl	8002876 <HAL_PCD_SetAddress>
 800d938:	4603      	mov	r3, r0
 800d93a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800d93c:	7bfb      	ldrb	r3, [r7, #15]
 800d93e:	4618      	mov	r0, r3
 800d940:	f000 f866 	bl	800da10 <USBD_Get_USB_Status>
 800d944:	4603      	mov	r3, r0
}
 800d946:	4618      	mov	r0, r3
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b086      	sub	sp, #24
 800d952:	af00      	add	r7, sp, #0
 800d954:	60f8      	str	r0, [r7, #12]
 800d956:	607a      	str	r2, [r7, #4]
 800d958:	603b      	str	r3, [r7, #0]
 800d95a:	460b      	mov	r3, r1
 800d95c:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d964:	7af9      	ldrb	r1, [r7, #11]
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	687a      	ldr	r2, [r7, #4]
 800d96a:	f7f5 f89d 	bl	8002aa8 <HAL_PCD_EP_Transmit>
 800d96e:	4603      	mov	r3, r0
 800d970:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800d972:	7dfb      	ldrb	r3, [r7, #23]
 800d974:	4618      	mov	r0, r3
 800d976:	f000 f84b 	bl	800da10 <USBD_Get_USB_Status>
 800d97a:	4603      	mov	r3, r0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3718      	adds	r7, #24
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b086      	sub	sp, #24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	607a      	str	r2, [r7, #4]
 800d98e:	603b      	str	r3, [r7, #0]
 800d990:	460b      	mov	r3, r1
 800d992:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d99a:	7af9      	ldrb	r1, [r7, #11]
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	687a      	ldr	r2, [r7, #4]
 800d9a0:	f7f5 f838 	bl	8002a14 <HAL_PCD_EP_Receive>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800d9a8:	7dfb      	ldrb	r3, [r7, #23]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f000 f830 	bl	800da10 <USBD_Get_USB_Status>
 800d9b0:	4603      	mov	r3, r0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3718      	adds	r7, #24
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}

0800d9ba <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d9ba:	b580      	push	{r7, lr}
 800d9bc:	b082      	sub	sp, #8
 800d9be:	af00      	add	r7, sp, #0
 800d9c0:	6078      	str	r0, [r7, #4]
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9cc:	78fa      	ldrb	r2, [r7, #3]
 800d9ce:	4611      	mov	r1, r2
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7f5 f851 	bl	8002a78 <HAL_PCD_EP_GetRxCount>
 800d9d6:	4603      	mov	r3, r0
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800d9e8:	4b03      	ldr	r3, [pc, #12]	@ (800d9f8 <USBD_static_malloc+0x18>)
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	370c      	adds	r7, #12
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop
 800d9f8:	20000e10 	.word	0x20000e10

0800d9fc <USBD_static_free>:

void USBD_static_free(void *p)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800da04:	bf00      	nop
 800da06:	370c      	adds	r7, #12
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da10:	b480      	push	{r7}
 800da12:	b085      	sub	sp, #20
 800da14:	af00      	add	r7, sp, #0
 800da16:	4603      	mov	r3, r0
 800da18:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800da1a:	2300      	movs	r3, #0
 800da1c:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800da1e:	79fb      	ldrb	r3, [r7, #7]
 800da20:	2b03      	cmp	r3, #3
 800da22:	d817      	bhi.n	800da54 <USBD_Get_USB_Status+0x44>
 800da24:	a201      	add	r2, pc, #4	@ (adr r2, 800da2c <USBD_Get_USB_Status+0x1c>)
 800da26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2a:	bf00      	nop
 800da2c:	0800da3d 	.word	0x0800da3d
 800da30:	0800da43 	.word	0x0800da43
 800da34:	0800da49 	.word	0x0800da49
 800da38:	0800da4f 	.word	0x0800da4f
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800da3c:	2300      	movs	r3, #0
 800da3e:	73fb      	strb	r3, [r7, #15]
             break;
 800da40:	e00b      	b.n	800da5a <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800da42:	2303      	movs	r3, #3
 800da44:	73fb      	strb	r3, [r7, #15]
             break;
 800da46:	e008      	b.n	800da5a <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800da48:	2301      	movs	r3, #1
 800da4a:	73fb      	strb	r3, [r7, #15]
             break;
 800da4c:	e005      	b.n	800da5a <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800da4e:	2303      	movs	r3, #3
 800da50:	73fb      	strb	r3, [r7, #15]
             break;
 800da52:	e002      	b.n	800da5a <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800da54:	2303      	movs	r3, #3
 800da56:	73fb      	strb	r3, [r7, #15]
             break;
 800da58:	bf00      	nop
      }
      return usb_status;
 800da5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	3714      	adds	r7, #20
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b086      	sub	sp, #24
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	4613      	mov	r3, r2
 800da74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d101      	bne.n	800da80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800da7c:	2303      	movs	r3, #3
 800da7e:	e01f      	b.n	800dac0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2200      	movs	r2, #0
 800da84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2200      	movs	r2, #0
 800da8c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2200      	movs	r2, #0
 800da94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d003      	beq.n	800daa6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	68ba      	ldr	r2, [r7, #8]
 800daa2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	2201      	movs	r2, #1
 800daaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	79fa      	ldrb	r2, [r7, #7]
 800dab2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	f7ff fe4b 	bl	800d750 <USBD_LL_Init>
 800daba:	4603      	mov	r3, r0
 800dabc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dabe:	7dfb      	ldrb	r3, [r7, #23]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3718      	adds	r7, #24
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dad2:	2300      	movs	r3, #0
 800dad4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d101      	bne.n	800dae0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dadc:	2303      	movs	r3, #3
 800dade:	e025      	b.n	800db2c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	683a      	ldr	r2, [r7, #0]
 800dae4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	32ae      	adds	r2, #174	@ 0xae
 800daf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d00f      	beq.n	800db1c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	32ae      	adds	r2, #174	@ 0xae
 800db06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db0c:	f107 020e 	add.w	r2, r7, #14
 800db10:	4610      	mov	r0, r2
 800db12:	4798      	blx	r3
 800db14:	4602      	mov	r2, r0
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800db22:	1c5a      	adds	r2, r3, #1
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800db2a:	2300      	movs	r3, #0
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3710      	adds	r7, #16
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f7ff fe41 	bl	800d7c4 <USBD_LL_Start>
 800db42:	4603      	mov	r3, r0
}
 800db44:	4618      	mov	r0, r3
 800db46:	3708      	adds	r7, #8
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800db4c:	b480      	push	{r7}
 800db4e:	b083      	sub	sp, #12
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800db54:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800db56:	4618      	mov	r0, r3
 800db58:	370c      	adds	r7, #12
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr

0800db62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db62:	b580      	push	{r7, lr}
 800db64:	b084      	sub	sp, #16
 800db66:	af00      	add	r7, sp, #0
 800db68:	6078      	str	r0, [r7, #4]
 800db6a:	460b      	mov	r3, r1
 800db6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800db6e:	2300      	movs	r3, #0
 800db70:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d009      	beq.n	800db90 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	78fa      	ldrb	r2, [r7, #3]
 800db86:	4611      	mov	r1, r2
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	4798      	blx	r3
 800db8c:	4603      	mov	r3, r0
 800db8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800db90:	7bfb      	ldrb	r3, [r7, #15]
}
 800db92:	4618      	mov	r0, r3
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}

0800db9a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b084      	sub	sp, #16
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
 800dba2:	460b      	mov	r3, r1
 800dba4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dba6:	2300      	movs	r3, #0
 800dba8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	78fa      	ldrb	r2, [r7, #3]
 800dbb4:	4611      	mov	r1, r2
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	4798      	blx	r3
 800dbba:	4603      	mov	r3, r0
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d001      	beq.n	800dbc4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dbc0:	2303      	movs	r3, #3
 800dbc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dbc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3710      	adds	r7, #16
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b084      	sub	sp, #16
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
 800dbd6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dbde:	6839      	ldr	r1, [r7, #0]
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f001 f846 	bl	800ec72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dc02:	f003 031f 	and.w	r3, r3, #31
 800dc06:	2b02      	cmp	r3, #2
 800dc08:	d01a      	beq.n	800dc40 <USBD_LL_SetupStage+0x72>
 800dc0a:	2b02      	cmp	r3, #2
 800dc0c:	d822      	bhi.n	800dc54 <USBD_LL_SetupStage+0x86>
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d002      	beq.n	800dc18 <USBD_LL_SetupStage+0x4a>
 800dc12:	2b01      	cmp	r3, #1
 800dc14:	d00a      	beq.n	800dc2c <USBD_LL_SetupStage+0x5e>
 800dc16:	e01d      	b.n	800dc54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc1e:	4619      	mov	r1, r3
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	f000 fa9d 	bl	800e160 <USBD_StdDevReq>
 800dc26:	4603      	mov	r3, r0
 800dc28:	73fb      	strb	r3, [r7, #15]
      break;
 800dc2a:	e020      	b.n	800dc6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc32:	4619      	mov	r1, r3
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f000 fb05 	bl	800e244 <USBD_StdItfReq>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	73fb      	strb	r3, [r7, #15]
      break;
 800dc3e:	e016      	b.n	800dc6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800dc46:	4619      	mov	r1, r3
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 fb67 	bl	800e31c <USBD_StdEPReq>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	73fb      	strb	r3, [r7, #15]
      break;
 800dc52:	e00c      	b.n	800dc6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dc5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	4619      	mov	r1, r3
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f7ff fdfc 	bl	800d860 <USBD_LL_StallEP>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc6c:	bf00      	nop
  }

  return ret;
 800dc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3710      	adds	r7, #16
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b086      	sub	sp, #24
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	60f8      	str	r0, [r7, #12]
 800dc80:	460b      	mov	r3, r1
 800dc82:	607a      	str	r2, [r7, #4]
 800dc84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc86:	2300      	movs	r3, #0
 800dc88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dc8a:	7afb      	ldrb	r3, [r7, #11]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d16e      	bne.n	800dd6e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800dc96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800dc9e:	2b03      	cmp	r3, #3
 800dca0:	f040 8098 	bne.w	800ddd4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dca4:	693b      	ldr	r3, [r7, #16]
 800dca6:	689a      	ldr	r2, [r3, #8]
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d913      	bls.n	800dcd8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dcb0:	693b      	ldr	r3, [r7, #16]
 800dcb2:	689a      	ldr	r2, [r3, #8]
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	1ad2      	subs	r2, r2, r3
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	68da      	ldr	r2, [r3, #12]
 800dcc2:	693b      	ldr	r3, [r7, #16]
 800dcc4:	689b      	ldr	r3, [r3, #8]
 800dcc6:	4293      	cmp	r3, r2
 800dcc8:	bf28      	it	cs
 800dcca:	4613      	movcs	r3, r2
 800dccc:	461a      	mov	r2, r3
 800dcce:	6879      	ldr	r1, [r7, #4]
 800dcd0:	68f8      	ldr	r0, [r7, #12]
 800dcd2:	f001 f9cf 	bl	800f074 <USBD_CtlContinueRx>
 800dcd6:	e07d      	b.n	800ddd4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800dcde:	f003 031f 	and.w	r3, r3, #31
 800dce2:	2b02      	cmp	r3, #2
 800dce4:	d014      	beq.n	800dd10 <USBD_LL_DataOutStage+0x98>
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	d81d      	bhi.n	800dd26 <USBD_LL_DataOutStage+0xae>
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d002      	beq.n	800dcf4 <USBD_LL_DataOutStage+0x7c>
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d003      	beq.n	800dcfa <USBD_LL_DataOutStage+0x82>
 800dcf2:	e018      	b.n	800dd26 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	75bb      	strb	r3, [r7, #22]
            break;
 800dcf8:	e018      	b.n	800dd2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800dd00:	b2db      	uxtb	r3, r3
 800dd02:	4619      	mov	r1, r3
 800dd04:	68f8      	ldr	r0, [r7, #12]
 800dd06:	f000 f99e 	bl	800e046 <USBD_CoreFindIF>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	75bb      	strb	r3, [r7, #22]
            break;
 800dd0e:	e00d      	b.n	800dd2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	4619      	mov	r1, r3
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f000 f9a0 	bl	800e060 <USBD_CoreFindEP>
 800dd20:	4603      	mov	r3, r0
 800dd22:	75bb      	strb	r3, [r7, #22]
            break;
 800dd24:	e002      	b.n	800dd2c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dd26:	2300      	movs	r3, #0
 800dd28:	75bb      	strb	r3, [r7, #22]
            break;
 800dd2a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dd2c:	7dbb      	ldrb	r3, [r7, #22]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d119      	bne.n	800dd66 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd38:	b2db      	uxtb	r3, r3
 800dd3a:	2b03      	cmp	r3, #3
 800dd3c:	d113      	bne.n	800dd66 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800dd3e:	7dba      	ldrb	r2, [r7, #22]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	32ae      	adds	r2, #174	@ 0xae
 800dd44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd48:	691b      	ldr	r3, [r3, #16]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00b      	beq.n	800dd66 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800dd4e:	7dba      	ldrb	r2, [r7, #22]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800dd56:	7dba      	ldrb	r2, [r7, #22]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	32ae      	adds	r2, #174	@ 0xae
 800dd5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	68f8      	ldr	r0, [r7, #12]
 800dd64:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f001 f995 	bl	800f096 <USBD_CtlSendStatus>
 800dd6c:	e032      	b.n	800ddd4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800dd6e:	7afb      	ldrb	r3, [r7, #11]
 800dd70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	4619      	mov	r1, r3
 800dd78:	68f8      	ldr	r0, [r7, #12]
 800dd7a:	f000 f971 	bl	800e060 <USBD_CoreFindEP>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd82:	7dbb      	ldrb	r3, [r7, #22]
 800dd84:	2bff      	cmp	r3, #255	@ 0xff
 800dd86:	d025      	beq.n	800ddd4 <USBD_LL_DataOutStage+0x15c>
 800dd88:	7dbb      	ldrb	r3, [r7, #22]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d122      	bne.n	800ddd4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	2b03      	cmp	r3, #3
 800dd98:	d117      	bne.n	800ddca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800dd9a:	7dba      	ldrb	r2, [r7, #22]
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	32ae      	adds	r2, #174	@ 0xae
 800dda0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dda4:	699b      	ldr	r3, [r3, #24]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00f      	beq.n	800ddca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ddaa:	7dba      	ldrb	r2, [r7, #22]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ddb2:	7dba      	ldrb	r2, [r7, #22]
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	32ae      	adds	r2, #174	@ 0xae
 800ddb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddbc:	699b      	ldr	r3, [r3, #24]
 800ddbe:	7afa      	ldrb	r2, [r7, #11]
 800ddc0:	4611      	mov	r1, r2
 800ddc2:	68f8      	ldr	r0, [r7, #12]
 800ddc4:	4798      	blx	r3
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ddca:	7dfb      	ldrb	r3, [r7, #23]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d001      	beq.n	800ddd4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ddd0:	7dfb      	ldrb	r3, [r7, #23]
 800ddd2:	e000      	b.n	800ddd6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ddd4:	2300      	movs	r3, #0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3718      	adds	r7, #24
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b086      	sub	sp, #24
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	60f8      	str	r0, [r7, #12]
 800dde6:	460b      	mov	r3, r1
 800dde8:	607a      	str	r2, [r7, #4]
 800ddea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ddec:	7afb      	ldrb	r3, [r7, #11]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d16f      	bne.n	800ded2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	3314      	adds	r3, #20
 800ddf6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ddfe:	2b02      	cmp	r3, #2
 800de00:	d15a      	bne.n	800deb8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	689a      	ldr	r2, [r3, #8]
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d914      	bls.n	800de38 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	689a      	ldr	r2, [r3, #8]
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	68db      	ldr	r3, [r3, #12]
 800de16:	1ad2      	subs	r2, r2, r3
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	461a      	mov	r2, r3
 800de22:	6879      	ldr	r1, [r7, #4]
 800de24:	68f8      	ldr	r0, [r7, #12]
 800de26:	f001 f8f7 	bl	800f018 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de2a:	2300      	movs	r3, #0
 800de2c:	2200      	movs	r2, #0
 800de2e:	2100      	movs	r1, #0
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f7ff fda7 	bl	800d984 <USBD_LL_PrepareReceive>
 800de36:	e03f      	b.n	800deb8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800de38:	693b      	ldr	r3, [r7, #16]
 800de3a:	68da      	ldr	r2, [r3, #12]
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	689b      	ldr	r3, [r3, #8]
 800de40:	429a      	cmp	r2, r3
 800de42:	d11c      	bne.n	800de7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	685a      	ldr	r2, [r3, #4]
 800de48:	693b      	ldr	r3, [r7, #16]
 800de4a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800de4c:	429a      	cmp	r2, r3
 800de4e:	d316      	bcc.n	800de7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	685a      	ldr	r2, [r3, #4]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800de5a:	429a      	cmp	r2, r3
 800de5c:	d20f      	bcs.n	800de7e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800de5e:	2200      	movs	r2, #0
 800de60:	2100      	movs	r1, #0
 800de62:	68f8      	ldr	r0, [r7, #12]
 800de64:	f001 f8d8 	bl	800f018 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	2200      	movs	r2, #0
 800de6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de70:	2300      	movs	r3, #0
 800de72:	2200      	movs	r2, #0
 800de74:	2100      	movs	r1, #0
 800de76:	68f8      	ldr	r0, [r7, #12]
 800de78:	f7ff fd84 	bl	800d984 <USBD_LL_PrepareReceive>
 800de7c:	e01c      	b.n	800deb8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de84:	b2db      	uxtb	r3, r3
 800de86:	2b03      	cmp	r3, #3
 800de88:	d10f      	bne.n	800deaa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d009      	beq.n	800deaa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2200      	movs	r2, #0
 800de9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dea4:	68db      	ldr	r3, [r3, #12]
 800dea6:	68f8      	ldr	r0, [r7, #12]
 800dea8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800deaa:	2180      	movs	r1, #128	@ 0x80
 800deac:	68f8      	ldr	r0, [r7, #12]
 800deae:	f7ff fcd7 	bl	800d860 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800deb2:	68f8      	ldr	r0, [r7, #12]
 800deb4:	f001 f902 	bl	800f0bc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d03a      	beq.n	800df38 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800dec2:	68f8      	ldr	r0, [r7, #12]
 800dec4:	f7ff fe42 	bl	800db4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2200      	movs	r2, #0
 800decc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ded0:	e032      	b.n	800df38 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ded2:	7afb      	ldrb	r3, [r7, #11]
 800ded4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	4619      	mov	r1, r3
 800dedc:	68f8      	ldr	r0, [r7, #12]
 800dede:	f000 f8bf 	bl	800e060 <USBD_CoreFindEP>
 800dee2:	4603      	mov	r3, r0
 800dee4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dee6:	7dfb      	ldrb	r3, [r7, #23]
 800dee8:	2bff      	cmp	r3, #255	@ 0xff
 800deea:	d025      	beq.n	800df38 <USBD_LL_DataInStage+0x15a>
 800deec:	7dfb      	ldrb	r3, [r7, #23]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d122      	bne.n	800df38 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800def8:	b2db      	uxtb	r3, r3
 800defa:	2b03      	cmp	r3, #3
 800defc:	d11c      	bne.n	800df38 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800defe:	7dfa      	ldrb	r2, [r7, #23]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	32ae      	adds	r2, #174	@ 0xae
 800df04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df08:	695b      	ldr	r3, [r3, #20]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d014      	beq.n	800df38 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800df0e:	7dfa      	ldrb	r2, [r7, #23]
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800df16:	7dfa      	ldrb	r2, [r7, #23]
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	32ae      	adds	r2, #174	@ 0xae
 800df1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df20:	695b      	ldr	r3, [r3, #20]
 800df22:	7afa      	ldrb	r2, [r7, #11]
 800df24:	4611      	mov	r1, r2
 800df26:	68f8      	ldr	r0, [r7, #12]
 800df28:	4798      	blx	r3
 800df2a:	4603      	mov	r3, r0
 800df2c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800df2e:	7dbb      	ldrb	r3, [r7, #22]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d001      	beq.n	800df38 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800df34:	7dbb      	ldrb	r3, [r7, #22]
 800df36:	e000      	b.n	800df3a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800df38:	2300      	movs	r3, #0
}
 800df3a:	4618      	mov	r0, r3
 800df3c:	3718      	adds	r7, #24
 800df3e:	46bd      	mov	sp, r7
 800df40:	bd80      	pop	{r7, pc}

0800df42 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800df42:	b580      	push	{r7, lr}
 800df44:	b084      	sub	sp, #16
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800df4a:	2300      	movs	r3, #0
 800df4c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2201      	movs	r2, #1
 800df52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2200      	movs	r2, #0
 800df5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2200      	movs	r2, #0
 800df62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2200      	movs	r2, #0
 800df68:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2200      	movs	r2, #0
 800df70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d014      	beq.n	800dfa8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d00e      	beq.n	800dfa8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df90:	685b      	ldr	r3, [r3, #4]
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	6852      	ldr	r2, [r2, #4]
 800df96:	b2d2      	uxtb	r2, r2
 800df98:	4611      	mov	r1, r2
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	4798      	blx	r3
 800df9e:	4603      	mov	r3, r0
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d001      	beq.n	800dfa8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dfa4:	2303      	movs	r3, #3
 800dfa6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dfa8:	2340      	movs	r3, #64	@ 0x40
 800dfaa:	2200      	movs	r2, #0
 800dfac:	2100      	movs	r1, #0
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7ff fc1d 	bl	800d7ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2201      	movs	r2, #1
 800dfb8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2240      	movs	r2, #64	@ 0x40
 800dfc0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dfc4:	2340      	movs	r3, #64	@ 0x40
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	2180      	movs	r1, #128	@ 0x80
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f7ff fc0f 	bl	800d7ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2201      	movs	r2, #1
 800dfd4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2240      	movs	r2, #64	@ 0x40
 800dfda:	621a      	str	r2, [r3, #32]

  return ret;
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}

0800dfe6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dfe6:	b480      	push	{r7}
 800dfe8:	b083      	sub	sp, #12
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	6078      	str	r0, [r7, #4]
 800dfee:	460b      	mov	r3, r1
 800dff0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	78fa      	ldrb	r2, [r7, #3]
 800dff6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dff8:	2300      	movs	r3, #0
}
 800dffa:	4618      	mov	r0, r3
 800dffc:	370c      	adds	r7, #12
 800dffe:	46bd      	mov	sp, r7
 800e000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e004:	4770      	bx	lr

0800e006 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e006:	b580      	push	{r7, lr}
 800e008:	b082      	sub	sp, #8
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e014:	b2db      	uxtb	r3, r3
 800e016:	2b03      	cmp	r3, #3
 800e018:	d110      	bne.n	800e03c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e020:	2b00      	cmp	r3, #0
 800e022:	d00b      	beq.n	800e03c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e02a:	69db      	ldr	r3, [r3, #28]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d005      	beq.n	800e03c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e036:	69db      	ldr	r3, [r3, #28]
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e03c:	2300      	movs	r3, #0
}
 800e03e:	4618      	mov	r0, r3
 800e040:	3708      	adds	r7, #8
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}

0800e046 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e046:	b480      	push	{r7}
 800e048:	b083      	sub	sp, #12
 800e04a:	af00      	add	r7, sp, #0
 800e04c:	6078      	str	r0, [r7, #4]
 800e04e:	460b      	mov	r3, r1
 800e050:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e052:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
 800e068:	460b      	mov	r3, r1
 800e06a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e06c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e06e:	4618      	mov	r0, r3
 800e070:	370c      	adds	r7, #12
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr

0800e07a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e07a:	b580      	push	{r7, lr}
 800e07c:	b086      	sub	sp, #24
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
 800e082:	460b      	mov	r3, r1
 800e084:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e08e:	2300      	movs	r3, #0
 800e090:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	885b      	ldrh	r3, [r3, #2]
 800e096:	b29b      	uxth	r3, r3
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	7812      	ldrb	r2, [r2, #0]
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d91f      	bls.n	800e0e0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e0a6:	e013      	b.n	800e0d0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e0a8:	f107 030a 	add.w	r3, r7, #10
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	6978      	ldr	r0, [r7, #20]
 800e0b0:	f000 f81b 	bl	800e0ea <USBD_GetNextDesc>
 800e0b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	785b      	ldrb	r3, [r3, #1]
 800e0ba:	2b05      	cmp	r3, #5
 800e0bc:	d108      	bne.n	800e0d0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	789b      	ldrb	r3, [r3, #2]
 800e0c6:	78fa      	ldrb	r2, [r7, #3]
 800e0c8:	429a      	cmp	r2, r3
 800e0ca:	d008      	beq.n	800e0de <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	885b      	ldrh	r3, [r3, #2]
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	897b      	ldrh	r3, [r7, #10]
 800e0d8:	429a      	cmp	r2, r3
 800e0da:	d8e5      	bhi.n	800e0a8 <USBD_GetEpDesc+0x2e>
 800e0dc:	e000      	b.n	800e0e0 <USBD_GetEpDesc+0x66>
          break;
 800e0de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e0e0:	693b      	ldr	r3, [r7, #16]
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3718      	adds	r7, #24
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e0ea:	b480      	push	{r7}
 800e0ec:	b085      	sub	sp, #20
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
 800e0f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	881b      	ldrh	r3, [r3, #0]
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	7812      	ldrb	r2, [r2, #0]
 800e100:	4413      	add	r3, r2
 800e102:	b29a      	uxth	r2, r3
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	461a      	mov	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	4413      	add	r3, r2
 800e112:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e114:	68fb      	ldr	r3, [r7, #12]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3714      	adds	r7, #20
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr

0800e122 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e122:	b480      	push	{r7}
 800e124:	b087      	sub	sp, #28
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	781b      	ldrb	r3, [r3, #0]
 800e132:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e134:	697b      	ldr	r3, [r7, #20]
 800e136:	3301      	adds	r3, #1
 800e138:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e140:	8a3b      	ldrh	r3, [r7, #16]
 800e142:	021b      	lsls	r3, r3, #8
 800e144:	b21a      	sxth	r2, r3
 800e146:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e14a:	4313      	orrs	r3, r2
 800e14c:	b21b      	sxth	r3, r3
 800e14e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e150:	89fb      	ldrh	r3, [r7, #14]
}
 800e152:	4618      	mov	r0, r3
 800e154:	371c      	adds	r7, #28
 800e156:	46bd      	mov	sp, r7
 800e158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15c:	4770      	bx	lr
	...

0800e160 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e16a:	2300      	movs	r3, #0
 800e16c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e176:	2b40      	cmp	r3, #64	@ 0x40
 800e178:	d005      	beq.n	800e186 <USBD_StdDevReq+0x26>
 800e17a:	2b40      	cmp	r3, #64	@ 0x40
 800e17c:	d857      	bhi.n	800e22e <USBD_StdDevReq+0xce>
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d00f      	beq.n	800e1a2 <USBD_StdDevReq+0x42>
 800e182:	2b20      	cmp	r3, #32
 800e184:	d153      	bne.n	800e22e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	32ae      	adds	r2, #174	@ 0xae
 800e190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	6839      	ldr	r1, [r7, #0]
 800e198:	6878      	ldr	r0, [r7, #4]
 800e19a:	4798      	blx	r3
 800e19c:	4603      	mov	r3, r0
 800e19e:	73fb      	strb	r3, [r7, #15]
      break;
 800e1a0:	e04a      	b.n	800e238 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	785b      	ldrb	r3, [r3, #1]
 800e1a6:	2b09      	cmp	r3, #9
 800e1a8:	d83b      	bhi.n	800e222 <USBD_StdDevReq+0xc2>
 800e1aa:	a201      	add	r2, pc, #4	@ (adr r2, 800e1b0 <USBD_StdDevReq+0x50>)
 800e1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b0:	0800e205 	.word	0x0800e205
 800e1b4:	0800e219 	.word	0x0800e219
 800e1b8:	0800e223 	.word	0x0800e223
 800e1bc:	0800e20f 	.word	0x0800e20f
 800e1c0:	0800e223 	.word	0x0800e223
 800e1c4:	0800e1e3 	.word	0x0800e1e3
 800e1c8:	0800e1d9 	.word	0x0800e1d9
 800e1cc:	0800e223 	.word	0x0800e223
 800e1d0:	0800e1fb 	.word	0x0800e1fb
 800e1d4:	0800e1ed 	.word	0x0800e1ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e1d8:	6839      	ldr	r1, [r7, #0]
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 fa3c 	bl	800e658 <USBD_GetDescriptor>
          break;
 800e1e0:	e024      	b.n	800e22c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e1e2:	6839      	ldr	r1, [r7, #0]
 800e1e4:	6878      	ldr	r0, [r7, #4]
 800e1e6:	f000 fba1 	bl	800e92c <USBD_SetAddress>
          break;
 800e1ea:	e01f      	b.n	800e22c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e1ec:	6839      	ldr	r1, [r7, #0]
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f000 fbe0 	bl	800e9b4 <USBD_SetConfig>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	73fb      	strb	r3, [r7, #15]
          break;
 800e1f8:	e018      	b.n	800e22c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e1fa:	6839      	ldr	r1, [r7, #0]
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f000 fc83 	bl	800eb08 <USBD_GetConfig>
          break;
 800e202:	e013      	b.n	800e22c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e204:	6839      	ldr	r1, [r7, #0]
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f000 fcb4 	bl	800eb74 <USBD_GetStatus>
          break;
 800e20c:	e00e      	b.n	800e22c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e20e:	6839      	ldr	r1, [r7, #0]
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 fce3 	bl	800ebdc <USBD_SetFeature>
          break;
 800e216:	e009      	b.n	800e22c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e218:	6839      	ldr	r1, [r7, #0]
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 fd07 	bl	800ec2e <USBD_ClrFeature>
          break;
 800e220:	e004      	b.n	800e22c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e222:	6839      	ldr	r1, [r7, #0]
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 fd5e 	bl	800ece6 <USBD_CtlError>
          break;
 800e22a:	bf00      	nop
      }
      break;
 800e22c:	e004      	b.n	800e238 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e22e:	6839      	ldr	r1, [r7, #0]
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f000 fd58 	bl	800ece6 <USBD_CtlError>
      break;
 800e236:	bf00      	nop
  }

  return ret;
 800e238:	7bfb      	ldrb	r3, [r7, #15]
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3710      	adds	r7, #16
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop

0800e244 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b084      	sub	sp, #16
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e24e:	2300      	movs	r3, #0
 800e250:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e25a:	2b40      	cmp	r3, #64	@ 0x40
 800e25c:	d005      	beq.n	800e26a <USBD_StdItfReq+0x26>
 800e25e:	2b40      	cmp	r3, #64	@ 0x40
 800e260:	d852      	bhi.n	800e308 <USBD_StdItfReq+0xc4>
 800e262:	2b00      	cmp	r3, #0
 800e264:	d001      	beq.n	800e26a <USBD_StdItfReq+0x26>
 800e266:	2b20      	cmp	r3, #32
 800e268:	d14e      	bne.n	800e308 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e270:	b2db      	uxtb	r3, r3
 800e272:	3b01      	subs	r3, #1
 800e274:	2b02      	cmp	r3, #2
 800e276:	d840      	bhi.n	800e2fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	889b      	ldrh	r3, [r3, #4]
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	2b01      	cmp	r3, #1
 800e280:	d836      	bhi.n	800e2f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	889b      	ldrh	r3, [r3, #4]
 800e286:	b2db      	uxtb	r3, r3
 800e288:	4619      	mov	r1, r3
 800e28a:	6878      	ldr	r0, [r7, #4]
 800e28c:	f7ff fedb 	bl	800e046 <USBD_CoreFindIF>
 800e290:	4603      	mov	r3, r0
 800e292:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e294:	7bbb      	ldrb	r3, [r7, #14]
 800e296:	2bff      	cmp	r3, #255	@ 0xff
 800e298:	d01d      	beq.n	800e2d6 <USBD_StdItfReq+0x92>
 800e29a:	7bbb      	ldrb	r3, [r7, #14]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d11a      	bne.n	800e2d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e2a0:	7bba      	ldrb	r2, [r7, #14]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	32ae      	adds	r2, #174	@ 0xae
 800e2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d00f      	beq.n	800e2d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e2b0:	7bba      	ldrb	r2, [r7, #14]
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e2b8:	7bba      	ldrb	r2, [r7, #14]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	32ae      	adds	r2, #174	@ 0xae
 800e2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2c2:	689b      	ldr	r3, [r3, #8]
 800e2c4:	6839      	ldr	r1, [r7, #0]
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	4798      	blx	r3
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e2ce:	e004      	b.n	800e2da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e2d0:	2303      	movs	r3, #3
 800e2d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e2d4:	e001      	b.n	800e2da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e2d6:	2303      	movs	r3, #3
 800e2d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	88db      	ldrh	r3, [r3, #6]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d110      	bne.n	800e304 <USBD_StdItfReq+0xc0>
 800e2e2:	7bfb      	ldrb	r3, [r7, #15]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d10d      	bne.n	800e304 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f000 fed4 	bl	800f096 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e2ee:	e009      	b.n	800e304 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e2f0:	6839      	ldr	r1, [r7, #0]
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 fcf7 	bl	800ece6 <USBD_CtlError>
          break;
 800e2f8:	e004      	b.n	800e304 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e2fa:	6839      	ldr	r1, [r7, #0]
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f000 fcf2 	bl	800ece6 <USBD_CtlError>
          break;
 800e302:	e000      	b.n	800e306 <USBD_StdItfReq+0xc2>
          break;
 800e304:	bf00      	nop
      }
      break;
 800e306:	e004      	b.n	800e312 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e308:	6839      	ldr	r1, [r7, #0]
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 fceb 	bl	800ece6 <USBD_CtlError>
      break;
 800e310:	bf00      	nop
  }

  return ret;
 800e312:	7bfb      	ldrb	r3, [r7, #15]
}
 800e314:	4618      	mov	r0, r3
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e326:	2300      	movs	r3, #0
 800e328:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	889b      	ldrh	r3, [r3, #4]
 800e32e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e338:	2b40      	cmp	r3, #64	@ 0x40
 800e33a:	d007      	beq.n	800e34c <USBD_StdEPReq+0x30>
 800e33c:	2b40      	cmp	r3, #64	@ 0x40
 800e33e:	f200 817f 	bhi.w	800e640 <USBD_StdEPReq+0x324>
 800e342:	2b00      	cmp	r3, #0
 800e344:	d02a      	beq.n	800e39c <USBD_StdEPReq+0x80>
 800e346:	2b20      	cmp	r3, #32
 800e348:	f040 817a 	bne.w	800e640 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e34c:	7bbb      	ldrb	r3, [r7, #14]
 800e34e:	4619      	mov	r1, r3
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f7ff fe85 	bl	800e060 <USBD_CoreFindEP>
 800e356:	4603      	mov	r3, r0
 800e358:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e35a:	7b7b      	ldrb	r3, [r7, #13]
 800e35c:	2bff      	cmp	r3, #255	@ 0xff
 800e35e:	f000 8174 	beq.w	800e64a <USBD_StdEPReq+0x32e>
 800e362:	7b7b      	ldrb	r3, [r7, #13]
 800e364:	2b00      	cmp	r3, #0
 800e366:	f040 8170 	bne.w	800e64a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e36a:	7b7a      	ldrb	r2, [r7, #13]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e372:	7b7a      	ldrb	r2, [r7, #13]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	32ae      	adds	r2, #174	@ 0xae
 800e378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e37c:	689b      	ldr	r3, [r3, #8]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	f000 8163 	beq.w	800e64a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e384:	7b7a      	ldrb	r2, [r7, #13]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	32ae      	adds	r2, #174	@ 0xae
 800e38a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e38e:	689b      	ldr	r3, [r3, #8]
 800e390:	6839      	ldr	r1, [r7, #0]
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	4798      	blx	r3
 800e396:	4603      	mov	r3, r0
 800e398:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e39a:	e156      	b.n	800e64a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	785b      	ldrb	r3, [r3, #1]
 800e3a0:	2b03      	cmp	r3, #3
 800e3a2:	d008      	beq.n	800e3b6 <USBD_StdEPReq+0x9a>
 800e3a4:	2b03      	cmp	r3, #3
 800e3a6:	f300 8145 	bgt.w	800e634 <USBD_StdEPReq+0x318>
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	f000 809b 	beq.w	800e4e6 <USBD_StdEPReq+0x1ca>
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d03c      	beq.n	800e42e <USBD_StdEPReq+0x112>
 800e3b4:	e13e      	b.n	800e634 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e3bc:	b2db      	uxtb	r3, r3
 800e3be:	2b02      	cmp	r3, #2
 800e3c0:	d002      	beq.n	800e3c8 <USBD_StdEPReq+0xac>
 800e3c2:	2b03      	cmp	r3, #3
 800e3c4:	d016      	beq.n	800e3f4 <USBD_StdEPReq+0xd8>
 800e3c6:	e02c      	b.n	800e422 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e3c8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d00d      	beq.n	800e3ea <USBD_StdEPReq+0xce>
 800e3ce:	7bbb      	ldrb	r3, [r7, #14]
 800e3d0:	2b80      	cmp	r3, #128	@ 0x80
 800e3d2:	d00a      	beq.n	800e3ea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e3d4:	7bbb      	ldrb	r3, [r7, #14]
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f7ff fa41 	bl	800d860 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e3de:	2180      	movs	r1, #128	@ 0x80
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f7ff fa3d 	bl	800d860 <USBD_LL_StallEP>
 800e3e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e3e8:	e020      	b.n	800e42c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e3ea:	6839      	ldr	r1, [r7, #0]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 fc7a 	bl	800ece6 <USBD_CtlError>
              break;
 800e3f2:	e01b      	b.n	800e42c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	885b      	ldrh	r3, [r3, #2]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d10e      	bne.n	800e41a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e3fc:	7bbb      	ldrb	r3, [r7, #14]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d00b      	beq.n	800e41a <USBD_StdEPReq+0xfe>
 800e402:	7bbb      	ldrb	r3, [r7, #14]
 800e404:	2b80      	cmp	r3, #128	@ 0x80
 800e406:	d008      	beq.n	800e41a <USBD_StdEPReq+0xfe>
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	88db      	ldrh	r3, [r3, #6]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d104      	bne.n	800e41a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e410:	7bbb      	ldrb	r3, [r7, #14]
 800e412:	4619      	mov	r1, r3
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7ff fa23 	bl	800d860 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 fe3b 	bl	800f096 <USBD_CtlSendStatus>

              break;
 800e420:	e004      	b.n	800e42c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e422:	6839      	ldr	r1, [r7, #0]
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f000 fc5e 	bl	800ece6 <USBD_CtlError>
              break;
 800e42a:	bf00      	nop
          }
          break;
 800e42c:	e107      	b.n	800e63e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e434:	b2db      	uxtb	r3, r3
 800e436:	2b02      	cmp	r3, #2
 800e438:	d002      	beq.n	800e440 <USBD_StdEPReq+0x124>
 800e43a:	2b03      	cmp	r3, #3
 800e43c:	d016      	beq.n	800e46c <USBD_StdEPReq+0x150>
 800e43e:	e04b      	b.n	800e4d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e440:	7bbb      	ldrb	r3, [r7, #14]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d00d      	beq.n	800e462 <USBD_StdEPReq+0x146>
 800e446:	7bbb      	ldrb	r3, [r7, #14]
 800e448:	2b80      	cmp	r3, #128	@ 0x80
 800e44a:	d00a      	beq.n	800e462 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e44c:	7bbb      	ldrb	r3, [r7, #14]
 800e44e:	4619      	mov	r1, r3
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f7ff fa05 	bl	800d860 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e456:	2180      	movs	r1, #128	@ 0x80
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f7ff fa01 	bl	800d860 <USBD_LL_StallEP>
 800e45e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e460:	e040      	b.n	800e4e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e462:	6839      	ldr	r1, [r7, #0]
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 fc3e 	bl	800ece6 <USBD_CtlError>
              break;
 800e46a:	e03b      	b.n	800e4e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	885b      	ldrh	r3, [r3, #2]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d136      	bne.n	800e4e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e474:	7bbb      	ldrb	r3, [r7, #14]
 800e476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d004      	beq.n	800e488 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e47e:	7bbb      	ldrb	r3, [r7, #14]
 800e480:	4619      	mov	r1, r3
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f7ff fa05 	bl	800d892 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f000 fe04 	bl	800f096 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e48e:	7bbb      	ldrb	r3, [r7, #14]
 800e490:	4619      	mov	r1, r3
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f7ff fde4 	bl	800e060 <USBD_CoreFindEP>
 800e498:	4603      	mov	r3, r0
 800e49a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e49c:	7b7b      	ldrb	r3, [r7, #13]
 800e49e:	2bff      	cmp	r3, #255	@ 0xff
 800e4a0:	d01f      	beq.n	800e4e2 <USBD_StdEPReq+0x1c6>
 800e4a2:	7b7b      	ldrb	r3, [r7, #13]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d11c      	bne.n	800e4e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e4a8:	7b7a      	ldrb	r2, [r7, #13]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e4b0:	7b7a      	ldrb	r2, [r7, #13]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	32ae      	adds	r2, #174	@ 0xae
 800e4b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ba:	689b      	ldr	r3, [r3, #8]
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d010      	beq.n	800e4e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e4c0:	7b7a      	ldrb	r2, [r7, #13]
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	32ae      	adds	r2, #174	@ 0xae
 800e4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	6839      	ldr	r1, [r7, #0]
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	4798      	blx	r3
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e4d6:	e004      	b.n	800e4e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e4d8:	6839      	ldr	r1, [r7, #0]
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 fc03 	bl	800ece6 <USBD_CtlError>
              break;
 800e4e0:	e000      	b.n	800e4e4 <USBD_StdEPReq+0x1c8>
              break;
 800e4e2:	bf00      	nop
          }
          break;
 800e4e4:	e0ab      	b.n	800e63e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4ec:	b2db      	uxtb	r3, r3
 800e4ee:	2b02      	cmp	r3, #2
 800e4f0:	d002      	beq.n	800e4f8 <USBD_StdEPReq+0x1dc>
 800e4f2:	2b03      	cmp	r3, #3
 800e4f4:	d032      	beq.n	800e55c <USBD_StdEPReq+0x240>
 800e4f6:	e097      	b.n	800e628 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e4f8:	7bbb      	ldrb	r3, [r7, #14]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d007      	beq.n	800e50e <USBD_StdEPReq+0x1f2>
 800e4fe:	7bbb      	ldrb	r3, [r7, #14]
 800e500:	2b80      	cmp	r3, #128	@ 0x80
 800e502:	d004      	beq.n	800e50e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e504:	6839      	ldr	r1, [r7, #0]
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f000 fbed 	bl	800ece6 <USBD_CtlError>
                break;
 800e50c:	e091      	b.n	800e632 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e50e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e512:	2b00      	cmp	r3, #0
 800e514:	da0b      	bge.n	800e52e <USBD_StdEPReq+0x212>
 800e516:	7bbb      	ldrb	r3, [r7, #14]
 800e518:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e51c:	4613      	mov	r3, r2
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	4413      	add	r3, r2
 800e522:	009b      	lsls	r3, r3, #2
 800e524:	3310      	adds	r3, #16
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	4413      	add	r3, r2
 800e52a:	3304      	adds	r3, #4
 800e52c:	e00b      	b.n	800e546 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e52e:	7bbb      	ldrb	r3, [r7, #14]
 800e530:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e534:	4613      	mov	r3, r2
 800e536:	009b      	lsls	r3, r3, #2
 800e538:	4413      	add	r3, r2
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e540:	687a      	ldr	r2, [r7, #4]
 800e542:	4413      	add	r3, r2
 800e544:	3304      	adds	r3, #4
 800e546:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	2200      	movs	r2, #0
 800e54c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	2202      	movs	r2, #2
 800e552:	4619      	mov	r1, r3
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f000 fd44 	bl	800efe2 <USBD_CtlSendData>
              break;
 800e55a:	e06a      	b.n	800e632 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e55c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e560:	2b00      	cmp	r3, #0
 800e562:	da11      	bge.n	800e588 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e564:	7bbb      	ldrb	r3, [r7, #14]
 800e566:	f003 020f 	and.w	r2, r3, #15
 800e56a:	6879      	ldr	r1, [r7, #4]
 800e56c:	4613      	mov	r3, r2
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	4413      	add	r3, r2
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	440b      	add	r3, r1
 800e576:	3324      	adds	r3, #36	@ 0x24
 800e578:	881b      	ldrh	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d117      	bne.n	800e5ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e57e:	6839      	ldr	r1, [r7, #0]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 fbb0 	bl	800ece6 <USBD_CtlError>
                  break;
 800e586:	e054      	b.n	800e632 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e588:	7bbb      	ldrb	r3, [r7, #14]
 800e58a:	f003 020f 	and.w	r2, r3, #15
 800e58e:	6879      	ldr	r1, [r7, #4]
 800e590:	4613      	mov	r3, r2
 800e592:	009b      	lsls	r3, r3, #2
 800e594:	4413      	add	r3, r2
 800e596:	009b      	lsls	r3, r3, #2
 800e598:	440b      	add	r3, r1
 800e59a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e59e:	881b      	ldrh	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d104      	bne.n	800e5ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e5a4:	6839      	ldr	r1, [r7, #0]
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 fb9d 	bl	800ece6 <USBD_CtlError>
                  break;
 800e5ac:	e041      	b.n	800e632 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e5ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	da0b      	bge.n	800e5ce <USBD_StdEPReq+0x2b2>
 800e5b6:	7bbb      	ldrb	r3, [r7, #14]
 800e5b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e5bc:	4613      	mov	r3, r2
 800e5be:	009b      	lsls	r3, r3, #2
 800e5c0:	4413      	add	r3, r2
 800e5c2:	009b      	lsls	r3, r3, #2
 800e5c4:	3310      	adds	r3, #16
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	3304      	adds	r3, #4
 800e5cc:	e00b      	b.n	800e5e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e5ce:	7bbb      	ldrb	r3, [r7, #14]
 800e5d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	009b      	lsls	r3, r3, #2
 800e5d8:	4413      	add	r3, r2
 800e5da:	009b      	lsls	r3, r3, #2
 800e5dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	4413      	add	r3, r2
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e5e8:	7bbb      	ldrb	r3, [r7, #14]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d002      	beq.n	800e5f4 <USBD_StdEPReq+0x2d8>
 800e5ee:	7bbb      	ldrb	r3, [r7, #14]
 800e5f0:	2b80      	cmp	r3, #128	@ 0x80
 800e5f2:	d103      	bne.n	800e5fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	601a      	str	r2, [r3, #0]
 800e5fa:	e00e      	b.n	800e61a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e5fc:	7bbb      	ldrb	r3, [r7, #14]
 800e5fe:	4619      	mov	r1, r3
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7ff f95f 	bl	800d8c4 <USBD_LL_IsStallEP>
 800e606:	4603      	mov	r3, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d003      	beq.n	800e614 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	2201      	movs	r2, #1
 800e610:	601a      	str	r2, [r3, #0]
 800e612:	e002      	b.n	800e61a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	2200      	movs	r2, #0
 800e618:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e61a:	68bb      	ldr	r3, [r7, #8]
 800e61c:	2202      	movs	r2, #2
 800e61e:	4619      	mov	r1, r3
 800e620:	6878      	ldr	r0, [r7, #4]
 800e622:	f000 fcde 	bl	800efe2 <USBD_CtlSendData>
              break;
 800e626:	e004      	b.n	800e632 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e628:	6839      	ldr	r1, [r7, #0]
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 fb5b 	bl	800ece6 <USBD_CtlError>
              break;
 800e630:	bf00      	nop
          }
          break;
 800e632:	e004      	b.n	800e63e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e634:	6839      	ldr	r1, [r7, #0]
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 fb55 	bl	800ece6 <USBD_CtlError>
          break;
 800e63c:	bf00      	nop
      }
      break;
 800e63e:	e005      	b.n	800e64c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e640:	6839      	ldr	r1, [r7, #0]
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 fb4f 	bl	800ece6 <USBD_CtlError>
      break;
 800e648:	e000      	b.n	800e64c <USBD_StdEPReq+0x330>
      break;
 800e64a:	bf00      	nop
  }

  return ret;
 800e64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3710      	adds	r7, #16
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
	...

0800e658 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e662:	2300      	movs	r3, #0
 800e664:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e666:	2300      	movs	r3, #0
 800e668:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e66a:	2300      	movs	r3, #0
 800e66c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	885b      	ldrh	r3, [r3, #2]
 800e672:	0a1b      	lsrs	r3, r3, #8
 800e674:	b29b      	uxth	r3, r3
 800e676:	3b01      	subs	r3, #1
 800e678:	2b06      	cmp	r3, #6
 800e67a:	f200 8128 	bhi.w	800e8ce <USBD_GetDescriptor+0x276>
 800e67e:	a201      	add	r2, pc, #4	@ (adr r2, 800e684 <USBD_GetDescriptor+0x2c>)
 800e680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e684:	0800e6a1 	.word	0x0800e6a1
 800e688:	0800e6b9 	.word	0x0800e6b9
 800e68c:	0800e6f9 	.word	0x0800e6f9
 800e690:	0800e8cf 	.word	0x0800e8cf
 800e694:	0800e8cf 	.word	0x0800e8cf
 800e698:	0800e86f 	.word	0x0800e86f
 800e69c:	0800e89b 	.word	0x0800e89b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	7c12      	ldrb	r2, [r2, #16]
 800e6ac:	f107 0108 	add.w	r1, r7, #8
 800e6b0:	4610      	mov	r0, r2
 800e6b2:	4798      	blx	r3
 800e6b4:	60f8      	str	r0, [r7, #12]
      break;
 800e6b6:	e112      	b.n	800e8de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	7c1b      	ldrb	r3, [r3, #16]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d10d      	bne.n	800e6dc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6c8:	f107 0208 	add.w	r2, r7, #8
 800e6cc:	4610      	mov	r0, r2
 800e6ce:	4798      	blx	r3
 800e6d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	2202      	movs	r2, #2
 800e6d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e6da:	e100      	b.n	800e8de <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e6e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6e4:	f107 0208 	add.w	r2, r7, #8
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	4798      	blx	r3
 800e6ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	2202      	movs	r2, #2
 800e6f4:	701a      	strb	r2, [r3, #0]
      break;
 800e6f6:	e0f2      	b.n	800e8de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	885b      	ldrh	r3, [r3, #2]
 800e6fc:	b2db      	uxtb	r3, r3
 800e6fe:	2b05      	cmp	r3, #5
 800e700:	f200 80ac 	bhi.w	800e85c <USBD_GetDescriptor+0x204>
 800e704:	a201      	add	r2, pc, #4	@ (adr r2, 800e70c <USBD_GetDescriptor+0xb4>)
 800e706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e70a:	bf00      	nop
 800e70c:	0800e725 	.word	0x0800e725
 800e710:	0800e759 	.word	0x0800e759
 800e714:	0800e78d 	.word	0x0800e78d
 800e718:	0800e7c1 	.word	0x0800e7c1
 800e71c:	0800e7f5 	.word	0x0800e7f5
 800e720:	0800e829 	.word	0x0800e829
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d00b      	beq.n	800e748 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	687a      	ldr	r2, [r7, #4]
 800e73a:	7c12      	ldrb	r2, [r2, #16]
 800e73c:	f107 0108 	add.w	r1, r7, #8
 800e740:	4610      	mov	r0, r2
 800e742:	4798      	blx	r3
 800e744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e746:	e091      	b.n	800e86c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e748:	6839      	ldr	r1, [r7, #0]
 800e74a:	6878      	ldr	r0, [r7, #4]
 800e74c:	f000 facb 	bl	800ece6 <USBD_CtlError>
            err++;
 800e750:	7afb      	ldrb	r3, [r7, #11]
 800e752:	3301      	adds	r3, #1
 800e754:	72fb      	strb	r3, [r7, #11]
          break;
 800e756:	e089      	b.n	800e86c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e75e:	689b      	ldr	r3, [r3, #8]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d00b      	beq.n	800e77c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e76a:	689b      	ldr	r3, [r3, #8]
 800e76c:	687a      	ldr	r2, [r7, #4]
 800e76e:	7c12      	ldrb	r2, [r2, #16]
 800e770:	f107 0108 	add.w	r1, r7, #8
 800e774:	4610      	mov	r0, r2
 800e776:	4798      	blx	r3
 800e778:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e77a:	e077      	b.n	800e86c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e77c:	6839      	ldr	r1, [r7, #0]
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f000 fab1 	bl	800ece6 <USBD_CtlError>
            err++;
 800e784:	7afb      	ldrb	r3, [r7, #11]
 800e786:	3301      	adds	r3, #1
 800e788:	72fb      	strb	r3, [r7, #11]
          break;
 800e78a:	e06f      	b.n	800e86c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e792:	68db      	ldr	r3, [r3, #12]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d00b      	beq.n	800e7b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e79e:	68db      	ldr	r3, [r3, #12]
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	7c12      	ldrb	r2, [r2, #16]
 800e7a4:	f107 0108 	add.w	r1, r7, #8
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	4798      	blx	r3
 800e7ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7ae:	e05d      	b.n	800e86c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e7b0:	6839      	ldr	r1, [r7, #0]
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fa97 	bl	800ece6 <USBD_CtlError>
            err++;
 800e7b8:	7afb      	ldrb	r3, [r7, #11]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	72fb      	strb	r3, [r7, #11]
          break;
 800e7be:	e055      	b.n	800e86c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e7c6:	691b      	ldr	r3, [r3, #16]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d00b      	beq.n	800e7e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e7d2:	691b      	ldr	r3, [r3, #16]
 800e7d4:	687a      	ldr	r2, [r7, #4]
 800e7d6:	7c12      	ldrb	r2, [r2, #16]
 800e7d8:	f107 0108 	add.w	r1, r7, #8
 800e7dc:	4610      	mov	r0, r2
 800e7de:	4798      	blx	r3
 800e7e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e7e2:	e043      	b.n	800e86c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e7e4:	6839      	ldr	r1, [r7, #0]
 800e7e6:	6878      	ldr	r0, [r7, #4]
 800e7e8:	f000 fa7d 	bl	800ece6 <USBD_CtlError>
            err++;
 800e7ec:	7afb      	ldrb	r3, [r7, #11]
 800e7ee:	3301      	adds	r3, #1
 800e7f0:	72fb      	strb	r3, [r7, #11]
          break;
 800e7f2:	e03b      	b.n	800e86c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e7fa:	695b      	ldr	r3, [r3, #20]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d00b      	beq.n	800e818 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e806:	695b      	ldr	r3, [r3, #20]
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	7c12      	ldrb	r2, [r2, #16]
 800e80c:	f107 0108 	add.w	r1, r7, #8
 800e810:	4610      	mov	r0, r2
 800e812:	4798      	blx	r3
 800e814:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e816:	e029      	b.n	800e86c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e818:	6839      	ldr	r1, [r7, #0]
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 fa63 	bl	800ece6 <USBD_CtlError>
            err++;
 800e820:	7afb      	ldrb	r3, [r7, #11]
 800e822:	3301      	adds	r3, #1
 800e824:	72fb      	strb	r3, [r7, #11]
          break;
 800e826:	e021      	b.n	800e86c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e82e:	699b      	ldr	r3, [r3, #24]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d00b      	beq.n	800e84c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e83a:	699b      	ldr	r3, [r3, #24]
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	7c12      	ldrb	r2, [r2, #16]
 800e840:	f107 0108 	add.w	r1, r7, #8
 800e844:	4610      	mov	r0, r2
 800e846:	4798      	blx	r3
 800e848:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e84a:	e00f      	b.n	800e86c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e84c:	6839      	ldr	r1, [r7, #0]
 800e84e:	6878      	ldr	r0, [r7, #4]
 800e850:	f000 fa49 	bl	800ece6 <USBD_CtlError>
            err++;
 800e854:	7afb      	ldrb	r3, [r7, #11]
 800e856:	3301      	adds	r3, #1
 800e858:	72fb      	strb	r3, [r7, #11]
          break;
 800e85a:	e007      	b.n	800e86c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e85c:	6839      	ldr	r1, [r7, #0]
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f000 fa41 	bl	800ece6 <USBD_CtlError>
          err++;
 800e864:	7afb      	ldrb	r3, [r7, #11]
 800e866:	3301      	adds	r3, #1
 800e868:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e86a:	bf00      	nop
      }
      break;
 800e86c:	e037      	b.n	800e8de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	7c1b      	ldrb	r3, [r3, #16]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d109      	bne.n	800e88a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e87c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e87e:	f107 0208 	add.w	r2, r7, #8
 800e882:	4610      	mov	r0, r2
 800e884:	4798      	blx	r3
 800e886:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e888:	e029      	b.n	800e8de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e88a:	6839      	ldr	r1, [r7, #0]
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 fa2a 	bl	800ece6 <USBD_CtlError>
        err++;
 800e892:	7afb      	ldrb	r3, [r7, #11]
 800e894:	3301      	adds	r3, #1
 800e896:	72fb      	strb	r3, [r7, #11]
      break;
 800e898:	e021      	b.n	800e8de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	7c1b      	ldrb	r3, [r3, #16]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d10d      	bne.n	800e8be <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e8a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8aa:	f107 0208 	add.w	r2, r7, #8
 800e8ae:	4610      	mov	r0, r2
 800e8b0:	4798      	blx	r3
 800e8b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	2207      	movs	r2, #7
 800e8ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e8bc:	e00f      	b.n	800e8de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e8be:	6839      	ldr	r1, [r7, #0]
 800e8c0:	6878      	ldr	r0, [r7, #4]
 800e8c2:	f000 fa10 	bl	800ece6 <USBD_CtlError>
        err++;
 800e8c6:	7afb      	ldrb	r3, [r7, #11]
 800e8c8:	3301      	adds	r3, #1
 800e8ca:	72fb      	strb	r3, [r7, #11]
      break;
 800e8cc:	e007      	b.n	800e8de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e8ce:	6839      	ldr	r1, [r7, #0]
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 fa08 	bl	800ece6 <USBD_CtlError>
      err++;
 800e8d6:	7afb      	ldrb	r3, [r7, #11]
 800e8d8:	3301      	adds	r3, #1
 800e8da:	72fb      	strb	r3, [r7, #11]
      break;
 800e8dc:	bf00      	nop
  }

  if (err != 0U)
 800e8de:	7afb      	ldrb	r3, [r7, #11]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d11e      	bne.n	800e922 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	88db      	ldrh	r3, [r3, #6]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d016      	beq.n	800e91a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e8ec:	893b      	ldrh	r3, [r7, #8]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d00e      	beq.n	800e910 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	88da      	ldrh	r2, [r3, #6]
 800e8f6:	893b      	ldrh	r3, [r7, #8]
 800e8f8:	4293      	cmp	r3, r2
 800e8fa:	bf28      	it	cs
 800e8fc:	4613      	movcs	r3, r2
 800e8fe:	b29b      	uxth	r3, r3
 800e900:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e902:	893b      	ldrh	r3, [r7, #8]
 800e904:	461a      	mov	r2, r3
 800e906:	68f9      	ldr	r1, [r7, #12]
 800e908:	6878      	ldr	r0, [r7, #4]
 800e90a:	f000 fb6a 	bl	800efe2 <USBD_CtlSendData>
 800e90e:	e009      	b.n	800e924 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e910:	6839      	ldr	r1, [r7, #0]
 800e912:	6878      	ldr	r0, [r7, #4]
 800e914:	f000 f9e7 	bl	800ece6 <USBD_CtlError>
 800e918:	e004      	b.n	800e924 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e91a:	6878      	ldr	r0, [r7, #4]
 800e91c:	f000 fbbb 	bl	800f096 <USBD_CtlSendStatus>
 800e920:	e000      	b.n	800e924 <USBD_GetDescriptor+0x2cc>
    return;
 800e922:	bf00      	nop
  }
}
 800e924:	3710      	adds	r7, #16
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}
 800e92a:	bf00      	nop

0800e92c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	889b      	ldrh	r3, [r3, #4]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d131      	bne.n	800e9a2 <USBD_SetAddress+0x76>
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	88db      	ldrh	r3, [r3, #6]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d12d      	bne.n	800e9a2 <USBD_SetAddress+0x76>
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	885b      	ldrh	r3, [r3, #2]
 800e94a:	2b7f      	cmp	r3, #127	@ 0x7f
 800e94c:	d829      	bhi.n	800e9a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	885b      	ldrh	r3, [r3, #2]
 800e952:	b2db      	uxtb	r3, r3
 800e954:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e958:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e960:	b2db      	uxtb	r3, r3
 800e962:	2b03      	cmp	r3, #3
 800e964:	d104      	bne.n	800e970 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e966:	6839      	ldr	r1, [r7, #0]
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 f9bc 	bl	800ece6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e96e:	e01d      	b.n	800e9ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	7bfa      	ldrb	r2, [r7, #15]
 800e974:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e978:	7bfb      	ldrb	r3, [r7, #15]
 800e97a:	4619      	mov	r1, r3
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f7fe ffcd 	bl	800d91c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 fb87 	bl	800f096 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e988:	7bfb      	ldrb	r3, [r7, #15]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d004      	beq.n	800e998 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2202      	movs	r2, #2
 800e992:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e996:	e009      	b.n	800e9ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2201      	movs	r2, #1
 800e99c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9a0:	e004      	b.n	800e9ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e9a2:	6839      	ldr	r1, [r7, #0]
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f000 f99e 	bl	800ece6 <USBD_CtlError>
  }
}
 800e9aa:	bf00      	nop
 800e9ac:	bf00      	nop
 800e9ae:	3710      	adds	r7, #16
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	885b      	ldrh	r3, [r3, #2]
 800e9c6:	b2da      	uxtb	r2, r3
 800e9c8:	4b4e      	ldr	r3, [pc, #312]	@ (800eb04 <USBD_SetConfig+0x150>)
 800e9ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e9cc:	4b4d      	ldr	r3, [pc, #308]	@ (800eb04 <USBD_SetConfig+0x150>)
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	d905      	bls.n	800e9e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e9d4:	6839      	ldr	r1, [r7, #0]
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 f985 	bl	800ece6 <USBD_CtlError>
    return USBD_FAIL;
 800e9dc:	2303      	movs	r3, #3
 800e9de:	e08c      	b.n	800eafa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9e6:	b2db      	uxtb	r3, r3
 800e9e8:	2b02      	cmp	r3, #2
 800e9ea:	d002      	beq.n	800e9f2 <USBD_SetConfig+0x3e>
 800e9ec:	2b03      	cmp	r3, #3
 800e9ee:	d029      	beq.n	800ea44 <USBD_SetConfig+0x90>
 800e9f0:	e075      	b.n	800eade <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e9f2:	4b44      	ldr	r3, [pc, #272]	@ (800eb04 <USBD_SetConfig+0x150>)
 800e9f4:	781b      	ldrb	r3, [r3, #0]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d020      	beq.n	800ea3c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e9fa:	4b42      	ldr	r3, [pc, #264]	@ (800eb04 <USBD_SetConfig+0x150>)
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	461a      	mov	r2, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ea04:	4b3f      	ldr	r3, [pc, #252]	@ (800eb04 <USBD_SetConfig+0x150>)
 800ea06:	781b      	ldrb	r3, [r3, #0]
 800ea08:	4619      	mov	r1, r3
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7ff f8a9 	bl	800db62 <USBD_SetClassConfig>
 800ea10:	4603      	mov	r3, r0
 800ea12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ea14:	7bfb      	ldrb	r3, [r7, #15]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d008      	beq.n	800ea2c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ea1a:	6839      	ldr	r1, [r7, #0]
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f000 f962 	bl	800ece6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2202      	movs	r2, #2
 800ea26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ea2a:	e065      	b.n	800eaf8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 fb32 	bl	800f096 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	2203      	movs	r2, #3
 800ea36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ea3a:	e05d      	b.n	800eaf8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f000 fb2a 	bl	800f096 <USBD_CtlSendStatus>
      break;
 800ea42:	e059      	b.n	800eaf8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ea44:	4b2f      	ldr	r3, [pc, #188]	@ (800eb04 <USBD_SetConfig+0x150>)
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d112      	bne.n	800ea72 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	2202      	movs	r2, #2
 800ea50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ea54:	4b2b      	ldr	r3, [pc, #172]	@ (800eb04 <USBD_SetConfig+0x150>)
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	461a      	mov	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ea5e:	4b29      	ldr	r3, [pc, #164]	@ (800eb04 <USBD_SetConfig+0x150>)
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	4619      	mov	r1, r3
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f7ff f898 	bl	800db9a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f000 fb13 	bl	800f096 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ea70:	e042      	b.n	800eaf8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ea72:	4b24      	ldr	r3, [pc, #144]	@ (800eb04 <USBD_SetConfig+0x150>)
 800ea74:	781b      	ldrb	r3, [r3, #0]
 800ea76:	461a      	mov	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d02a      	beq.n	800ead6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	b2db      	uxtb	r3, r3
 800ea86:	4619      	mov	r1, r3
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f7ff f886 	bl	800db9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ea8e:	4b1d      	ldr	r3, [pc, #116]	@ (800eb04 <USBD_SetConfig+0x150>)
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	461a      	mov	r2, r3
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ea98:	4b1a      	ldr	r3, [pc, #104]	@ (800eb04 <USBD_SetConfig+0x150>)
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7ff f85f 	bl	800db62 <USBD_SetClassConfig>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eaa8:	7bfb      	ldrb	r3, [r7, #15]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00f      	beq.n	800eace <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800eaae:	6839      	ldr	r1, [r7, #0]
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f918 	bl	800ece6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	685b      	ldr	r3, [r3, #4]
 800eaba:	b2db      	uxtb	r3, r3
 800eabc:	4619      	mov	r1, r3
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f7ff f86b 	bl	800db9a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2202      	movs	r2, #2
 800eac8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800eacc:	e014      	b.n	800eaf8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800eace:	6878      	ldr	r0, [r7, #4]
 800ead0:	f000 fae1 	bl	800f096 <USBD_CtlSendStatus>
      break;
 800ead4:	e010      	b.n	800eaf8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 fadd 	bl	800f096 <USBD_CtlSendStatus>
      break;
 800eadc:	e00c      	b.n	800eaf8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800eade:	6839      	ldr	r1, [r7, #0]
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f000 f900 	bl	800ece6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eae6:	4b07      	ldr	r3, [pc, #28]	@ (800eb04 <USBD_SetConfig+0x150>)
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	4619      	mov	r1, r3
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f7ff f854 	bl	800db9a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800eaf2:	2303      	movs	r3, #3
 800eaf4:	73fb      	strb	r3, [r7, #15]
      break;
 800eaf6:	bf00      	nop
  }

  return ret;
 800eaf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	20001030 	.word	0x20001030

0800eb08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	88db      	ldrh	r3, [r3, #6]
 800eb16:	2b01      	cmp	r3, #1
 800eb18:	d004      	beq.n	800eb24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800eb1a:	6839      	ldr	r1, [r7, #0]
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 f8e2 	bl	800ece6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800eb22:	e023      	b.n	800eb6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb2a:	b2db      	uxtb	r3, r3
 800eb2c:	2b02      	cmp	r3, #2
 800eb2e:	dc02      	bgt.n	800eb36 <USBD_GetConfig+0x2e>
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	dc03      	bgt.n	800eb3c <USBD_GetConfig+0x34>
 800eb34:	e015      	b.n	800eb62 <USBD_GetConfig+0x5a>
 800eb36:	2b03      	cmp	r3, #3
 800eb38:	d00b      	beq.n	800eb52 <USBD_GetConfig+0x4a>
 800eb3a:	e012      	b.n	800eb62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	3308      	adds	r3, #8
 800eb46:	2201      	movs	r2, #1
 800eb48:	4619      	mov	r1, r3
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f000 fa49 	bl	800efe2 <USBD_CtlSendData>
        break;
 800eb50:	e00c      	b.n	800eb6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	3304      	adds	r3, #4
 800eb56:	2201      	movs	r2, #1
 800eb58:	4619      	mov	r1, r3
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 fa41 	bl	800efe2 <USBD_CtlSendData>
        break;
 800eb60:	e004      	b.n	800eb6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800eb62:	6839      	ldr	r1, [r7, #0]
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f000 f8be 	bl	800ece6 <USBD_CtlError>
        break;
 800eb6a:	bf00      	nop
}
 800eb6c:	bf00      	nop
 800eb6e:	3708      	adds	r7, #8
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}

0800eb74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	3b01      	subs	r3, #1
 800eb88:	2b02      	cmp	r3, #2
 800eb8a:	d81e      	bhi.n	800ebca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	88db      	ldrh	r3, [r3, #6]
 800eb90:	2b02      	cmp	r3, #2
 800eb92:	d004      	beq.n	800eb9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800eb94:	6839      	ldr	r1, [r7, #0]
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f000 f8a5 	bl	800ece6 <USBD_CtlError>
        break;
 800eb9c:	e01a      	b.n	800ebd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2201      	movs	r2, #1
 800eba2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d005      	beq.n	800ebba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	f043 0202 	orr.w	r2, r3, #2
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	330c      	adds	r3, #12
 800ebbe:	2202      	movs	r2, #2
 800ebc0:	4619      	mov	r1, r3
 800ebc2:	6878      	ldr	r0, [r7, #4]
 800ebc4:	f000 fa0d 	bl	800efe2 <USBD_CtlSendData>
      break;
 800ebc8:	e004      	b.n	800ebd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ebca:	6839      	ldr	r1, [r7, #0]
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 f88a 	bl	800ece6 <USBD_CtlError>
      break;
 800ebd2:	bf00      	nop
  }
}
 800ebd4:	bf00      	nop
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	885b      	ldrh	r3, [r3, #2]
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d107      	bne.n	800ebfe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2201      	movs	r2, #1
 800ebf2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f000 fa4d 	bl	800f096 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ebfc:	e013      	b.n	800ec26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	885b      	ldrh	r3, [r3, #2]
 800ec02:	2b02      	cmp	r3, #2
 800ec04:	d10b      	bne.n	800ec1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	889b      	ldrh	r3, [r3, #4]
 800ec0a:	0a1b      	lsrs	r3, r3, #8
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	b2da      	uxtb	r2, r3
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ec16:	6878      	ldr	r0, [r7, #4]
 800ec18:	f000 fa3d 	bl	800f096 <USBD_CtlSendStatus>
}
 800ec1c:	e003      	b.n	800ec26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ec1e:	6839      	ldr	r1, [r7, #0]
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f000 f860 	bl	800ece6 <USBD_CtlError>
}
 800ec26:	bf00      	nop
 800ec28:	3708      	adds	r7, #8
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}

0800ec2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec2e:	b580      	push	{r7, lr}
 800ec30:	b082      	sub	sp, #8
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
 800ec36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	3b01      	subs	r3, #1
 800ec42:	2b02      	cmp	r3, #2
 800ec44:	d80b      	bhi.n	800ec5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	885b      	ldrh	r3, [r3, #2]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d10c      	bne.n	800ec68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2200      	movs	r2, #0
 800ec52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f000 fa1d 	bl	800f096 <USBD_CtlSendStatus>
      }
      break;
 800ec5c:	e004      	b.n	800ec68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ec5e:	6839      	ldr	r1, [r7, #0]
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 f840 	bl	800ece6 <USBD_CtlError>
      break;
 800ec66:	e000      	b.n	800ec6a <USBD_ClrFeature+0x3c>
      break;
 800ec68:	bf00      	nop
  }
}
 800ec6a:	bf00      	nop
 800ec6c:	3708      	adds	r7, #8
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}

0800ec72 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ec72:	b580      	push	{r7, lr}
 800ec74:	b084      	sub	sp, #16
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
 800ec7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	781a      	ldrb	r2, [r3, #0]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	781a      	ldrb	r2, [r3, #0]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	3301      	adds	r3, #1
 800ec9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f7ff fa40 	bl	800e122 <SWAPBYTE>
 800eca2:	4603      	mov	r3, r0
 800eca4:	461a      	mov	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	3301      	adds	r3, #1
 800ecae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	3301      	adds	r3, #1
 800ecb4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ecb6:	68f8      	ldr	r0, [r7, #12]
 800ecb8:	f7ff fa33 	bl	800e122 <SWAPBYTE>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	461a      	mov	r2, r3
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	3301      	adds	r3, #1
 800ecce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ecd0:	68f8      	ldr	r0, [r7, #12]
 800ecd2:	f7ff fa26 	bl	800e122 <SWAPBYTE>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	461a      	mov	r2, r3
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	80da      	strh	r2, [r3, #6]
}
 800ecde:	bf00      	nop
 800ece0:	3710      	adds	r7, #16
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b082      	sub	sp, #8
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
 800ecee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ecf0:	2180      	movs	r1, #128	@ 0x80
 800ecf2:	6878      	ldr	r0, [r7, #4]
 800ecf4:	f7fe fdb4 	bl	800d860 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ecf8:	2100      	movs	r1, #0
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f7fe fdb0 	bl	800d860 <USBD_LL_StallEP>
}
 800ed00:	bf00      	nop
 800ed02:	3708      	adds	r7, #8
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}

0800ed08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b086      	sub	sp, #24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	60f8      	str	r0, [r7, #12]
 800ed10:	60b9      	str	r1, [r7, #8]
 800ed12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ed14:	2300      	movs	r3, #0
 800ed16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d036      	beq.n	800ed8c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ed22:	6938      	ldr	r0, [r7, #16]
 800ed24:	f000 f836 	bl	800ed94 <USBD_GetLen>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	005b      	lsls	r3, r3, #1
 800ed30:	b29a      	uxth	r2, r3
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ed36:	7dfb      	ldrb	r3, [r7, #23]
 800ed38:	68ba      	ldr	r2, [r7, #8]
 800ed3a:	4413      	add	r3, r2
 800ed3c:	687a      	ldr	r2, [r7, #4]
 800ed3e:	7812      	ldrb	r2, [r2, #0]
 800ed40:	701a      	strb	r2, [r3, #0]
  idx++;
 800ed42:	7dfb      	ldrb	r3, [r7, #23]
 800ed44:	3301      	adds	r3, #1
 800ed46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ed48:	7dfb      	ldrb	r3, [r7, #23]
 800ed4a:	68ba      	ldr	r2, [r7, #8]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	2203      	movs	r2, #3
 800ed50:	701a      	strb	r2, [r3, #0]
  idx++;
 800ed52:	7dfb      	ldrb	r3, [r7, #23]
 800ed54:	3301      	adds	r3, #1
 800ed56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ed58:	e013      	b.n	800ed82 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ed5a:	7dfb      	ldrb	r3, [r7, #23]
 800ed5c:	68ba      	ldr	r2, [r7, #8]
 800ed5e:	4413      	add	r3, r2
 800ed60:	693a      	ldr	r2, [r7, #16]
 800ed62:	7812      	ldrb	r2, [r2, #0]
 800ed64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	3301      	adds	r3, #1
 800ed6a:	613b      	str	r3, [r7, #16]
    idx++;
 800ed6c:	7dfb      	ldrb	r3, [r7, #23]
 800ed6e:	3301      	adds	r3, #1
 800ed70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ed72:	7dfb      	ldrb	r3, [r7, #23]
 800ed74:	68ba      	ldr	r2, [r7, #8]
 800ed76:	4413      	add	r3, r2
 800ed78:	2200      	movs	r2, #0
 800ed7a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ed7c:	7dfb      	ldrb	r3, [r7, #23]
 800ed7e:	3301      	adds	r3, #1
 800ed80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ed82:	693b      	ldr	r3, [r7, #16]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d1e7      	bne.n	800ed5a <USBD_GetString+0x52>
 800ed8a:	e000      	b.n	800ed8e <USBD_GetString+0x86>
    return;
 800ed8c:	bf00      	nop
  }
}
 800ed8e:	3718      	adds	r7, #24
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b085      	sub	sp, #20
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eda4:	e005      	b.n	800edb2 <USBD_GetLen+0x1e>
  {
    len++;
 800eda6:	7bfb      	ldrb	r3, [r7, #15]
 800eda8:	3301      	adds	r3, #1
 800edaa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	3301      	adds	r3, #1
 800edb0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800edb2:	68bb      	ldr	r3, [r7, #8]
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d1f5      	bne.n	800eda6 <USBD_GetLen+0x12>
  }

  return len;
 800edba:	7bfb      	ldrb	r3, [r7, #15]
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3714      	adds	r7, #20
 800edc0:	46bd      	mov	sp, r7
 800edc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc6:	4770      	bx	lr

0800edc8 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	4603      	mov	r3, r0
 800edd0:	6039      	str	r1, [r7, #0]
 800edd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	2212      	movs	r2, #18
 800edd8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 800edda:	4b03      	ldr	r3, [pc, #12]	@ (800ede8 <USBD_Class_DeviceDescriptor+0x20>)
}
 800eddc:	4618      	mov	r0, r3
 800edde:	370c      	adds	r7, #12
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr
 800ede8:	200000ec 	.word	0x200000ec

0800edec <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	4603      	mov	r3, r0
 800edf4:	6039      	str	r1, [r7, #0]
 800edf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	2204      	movs	r2, #4
 800edfc:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 800edfe:	4b03      	ldr	r3, [pc, #12]	@ (800ee0c <USBD_Class_LangIDStrDescriptor+0x20>)
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	370c      	adds	r7, #12
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr
 800ee0c:	20000100 	.word	0x20000100

0800ee10 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b082      	sub	sp, #8
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	4603      	mov	r3, r0
 800ee18:	6039      	str	r1, [r7, #0]
 800ee1a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800ee1c:	79fb      	ldrb	r3, [r7, #7]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d105      	bne.n	800ee2e <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 800ee22:	683a      	ldr	r2, [r7, #0]
 800ee24:	4907      	ldr	r1, [pc, #28]	@ (800ee44 <USBD_Class_ProductStrDescriptor+0x34>)
 800ee26:	4808      	ldr	r0, [pc, #32]	@ (800ee48 <USBD_Class_ProductStrDescriptor+0x38>)
 800ee28:	f7ff ff6e 	bl	800ed08 <USBD_GetString>
 800ee2c:	e004      	b.n	800ee38 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800ee2e:	683a      	ldr	r2, [r7, #0]
 800ee30:	4904      	ldr	r1, [pc, #16]	@ (800ee44 <USBD_Class_ProductStrDescriptor+0x34>)
 800ee32:	4805      	ldr	r0, [pc, #20]	@ (800ee48 <USBD_Class_ProductStrDescriptor+0x38>)
 800ee34:	f7ff ff68 	bl	800ed08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ee38:	4b02      	ldr	r3, [pc, #8]	@ (800ee44 <USBD_Class_ProductStrDescriptor+0x34>)
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3708      	adds	r7, #8
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}
 800ee42:	bf00      	nop
 800ee44:	20001034 	.word	0x20001034
 800ee48:	0800fa98 	.word	0x0800fa98

0800ee4c <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	4603      	mov	r3, r0
 800ee54:	6039      	str	r1, [r7, #0]
 800ee56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ee58:	683a      	ldr	r2, [r7, #0]
 800ee5a:	4904      	ldr	r1, [pc, #16]	@ (800ee6c <USBD_Class_ManufacturerStrDescriptor+0x20>)
 800ee5c:	4804      	ldr	r0, [pc, #16]	@ (800ee70 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 800ee5e:	f7ff ff53 	bl	800ed08 <USBD_GetString>
  return USBD_StrDesc;
 800ee62:	4b02      	ldr	r3, [pc, #8]	@ (800ee6c <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3708      	adds	r7, #8
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}
 800ee6c:	20001034 	.word	0x20001034
 800ee70:	0800fab0 	.word	0x0800fab0

0800ee74 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	6039      	str	r1, [r7, #0]
 800ee7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	221a      	movs	r2, #26
 800ee84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 800ee86:	f000 f843 	bl	800ef10 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 800ee8a:	4b02      	ldr	r3, [pc, #8]	@ (800ee94 <USBD_Class_SerialStrDescriptor+0x20>)
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	3708      	adds	r7, #8
 800ee90:	46bd      	mov	sp, r7
 800ee92:	bd80      	pop	{r7, pc}
 800ee94:	20000104 	.word	0x20000104

0800ee98 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	4603      	mov	r3, r0
 800eea0:	6039      	str	r1, [r7, #0]
 800eea2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800eea4:	79fb      	ldrb	r3, [r7, #7]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d105      	bne.n	800eeb6 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 800eeaa:	683a      	ldr	r2, [r7, #0]
 800eeac:	4907      	ldr	r1, [pc, #28]	@ (800eecc <USBD_Class_ConfigStrDescriptor+0x34>)
 800eeae:	4808      	ldr	r0, [pc, #32]	@ (800eed0 <USBD_Class_ConfigStrDescriptor+0x38>)
 800eeb0:	f7ff ff2a 	bl	800ed08 <USBD_GetString>
 800eeb4:	e004      	b.n	800eec0 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 800eeb6:	683a      	ldr	r2, [r7, #0]
 800eeb8:	4904      	ldr	r1, [pc, #16]	@ (800eecc <USBD_Class_ConfigStrDescriptor+0x34>)
 800eeba:	4805      	ldr	r0, [pc, #20]	@ (800eed0 <USBD_Class_ConfigStrDescriptor+0x38>)
 800eebc:	f7ff ff24 	bl	800ed08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eec0:	4b02      	ldr	r3, [pc, #8]	@ (800eecc <USBD_Class_ConfigStrDescriptor+0x34>)
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3708      	adds	r7, #8
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}
 800eeca:	bf00      	nop
 800eecc:	20001034 	.word	0x20001034
 800eed0:	0800fac4 	.word	0x0800fac4

0800eed4 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	4603      	mov	r3, r0
 800eedc:	6039      	str	r1, [r7, #0]
 800eede:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 800eee0:	79fb      	ldrb	r3, [r7, #7]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d105      	bne.n	800eef2 <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 800eee6:	683a      	ldr	r2, [r7, #0]
 800eee8:	4907      	ldr	r1, [pc, #28]	@ (800ef08 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800eeea:	4808      	ldr	r0, [pc, #32]	@ (800ef0c <USBD_Class_InterfaceStrDescriptor+0x38>)
 800eeec:	f7ff ff0c 	bl	800ed08 <USBD_GetString>
 800eef0:	e004      	b.n	800eefc <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800eef2:	683a      	ldr	r2, [r7, #0]
 800eef4:	4904      	ldr	r1, [pc, #16]	@ (800ef08 <USBD_Class_InterfaceStrDescriptor+0x34>)
 800eef6:	4805      	ldr	r0, [pc, #20]	@ (800ef0c <USBD_Class_InterfaceStrDescriptor+0x38>)
 800eef8:	f7ff ff06 	bl	800ed08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eefc:	4b02      	ldr	r3, [pc, #8]	@ (800ef08 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3708      	adds	r7, #8
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	20001034 	.word	0x20001034
 800ef0c:	0800fad0 	.word	0x0800fad0

0800ef10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 800ef16:	4b0f      	ldr	r3, [pc, #60]	@ (800ef54 <Get_SerialNum+0x44>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 800ef1c:	4b0e      	ldr	r3, [pc, #56]	@ (800ef58 <Get_SerialNum+0x48>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 800ef22:	4b0e      	ldr	r3, [pc, #56]	@ (800ef5c <Get_SerialNum+0x4c>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	4413      	add	r3, r2
 800ef2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d009      	beq.n	800ef4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 800ef36:	2208      	movs	r2, #8
 800ef38:	4909      	ldr	r1, [pc, #36]	@ (800ef60 <Get_SerialNum+0x50>)
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f000 f814 	bl	800ef68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 800ef40:	2204      	movs	r2, #4
 800ef42:	4908      	ldr	r1, [pc, #32]	@ (800ef64 <Get_SerialNum+0x54>)
 800ef44:	68b8      	ldr	r0, [r7, #8]
 800ef46:	f000 f80f 	bl	800ef68 <IntToUnicode>
  }
}
 800ef4a:	bf00      	nop
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	08fff800 	.word	0x08fff800
 800ef58:	08fff804 	.word	0x08fff804
 800ef5c:	08fff808 	.word	0x08fff808
 800ef60:	20000106 	.word	0x20000106
 800ef64:	20000116 	.word	0x20000116

0800ef68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b087      	sub	sp, #28
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	60f8      	str	r0, [r7, #12]
 800ef70:	60b9      	str	r1, [r7, #8]
 800ef72:	4613      	mov	r3, r2
 800ef74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 800ef76:	2300      	movs	r3, #0
 800ef78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	75fb      	strb	r3, [r7, #23]
 800ef7e:	e025      	b.n	800efcc <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	0f1b      	lsrs	r3, r3, #28
 800ef84:	2b09      	cmp	r3, #9
 800ef86:	d80a      	bhi.n	800ef9e <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	0f1b      	lsrs	r3, r3, #28
 800ef8c:	b2da      	uxtb	r2, r3
 800ef8e:	7dfb      	ldrb	r3, [r7, #23]
 800ef90:	005b      	lsls	r3, r3, #1
 800ef92:	68b9      	ldr	r1, [r7, #8]
 800ef94:	440b      	add	r3, r1
 800ef96:	3230      	adds	r2, #48	@ 0x30
 800ef98:	b2d2      	uxtb	r2, r2
 800ef9a:	701a      	strb	r2, [r3, #0]
 800ef9c:	e009      	b.n	800efb2 <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	0f1b      	lsrs	r3, r3, #28
 800efa2:	b2da      	uxtb	r2, r3
 800efa4:	7dfb      	ldrb	r3, [r7, #23]
 800efa6:	005b      	lsls	r3, r3, #1
 800efa8:	68b9      	ldr	r1, [r7, #8]
 800efaa:	440b      	add	r3, r1
 800efac:	3237      	adds	r2, #55	@ 0x37
 800efae:	b2d2      	uxtb	r2, r2
 800efb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	011b      	lsls	r3, r3, #4
 800efb6:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 800efb8:	7dfb      	ldrb	r3, [r7, #23]
 800efba:	005b      	lsls	r3, r3, #1
 800efbc:	3301      	adds	r3, #1
 800efbe:	68ba      	ldr	r2, [r7, #8]
 800efc0:	4413      	add	r3, r2
 800efc2:	2200      	movs	r2, #0
 800efc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 800efc6:	7dfb      	ldrb	r3, [r7, #23]
 800efc8:	3301      	adds	r3, #1
 800efca:	75fb      	strb	r3, [r7, #23]
 800efcc:	7dfa      	ldrb	r2, [r7, #23]
 800efce:	79fb      	ldrb	r3, [r7, #7]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d3d5      	bcc.n	800ef80 <IntToUnicode+0x18>
  }
}
 800efd4:	bf00      	nop
 800efd6:	bf00      	nop
 800efd8:	371c      	adds	r7, #28
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr

0800efe2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800efe2:	b580      	push	{r7, lr}
 800efe4:	b084      	sub	sp, #16
 800efe6:	af00      	add	r7, sp, #0
 800efe8:	60f8      	str	r0, [r7, #12]
 800efea:	60b9      	str	r1, [r7, #8]
 800efec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	2202      	movs	r2, #2
 800eff2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	68ba      	ldr	r2, [r7, #8]
 800f006:	2100      	movs	r1, #0
 800f008:	68f8      	ldr	r0, [r7, #12]
 800f00a:	f7fe fca0 	bl	800d94e <USBD_LL_Transmit>

  return USBD_OK;
 800f00e:	2300      	movs	r3, #0
}
 800f010:	4618      	mov	r0, r3
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	60f8      	str	r0, [r7, #12]
 800f020:	60b9      	str	r1, [r7, #8]
 800f022:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	68ba      	ldr	r2, [r7, #8]
 800f028:	2100      	movs	r1, #0
 800f02a:	68f8      	ldr	r0, [r7, #12]
 800f02c:	f7fe fc8f 	bl	800d94e <USBD_LL_Transmit>

  return USBD_OK;
 800f030:	2300      	movs	r3, #0
}
 800f032:	4618      	mov	r0, r3
 800f034:	3710      	adds	r7, #16
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b084      	sub	sp, #16
 800f03e:	af00      	add	r7, sp, #0
 800f040:	60f8      	str	r0, [r7, #12]
 800f042:	60b9      	str	r1, [r7, #8]
 800f044:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	2203      	movs	r2, #3
 800f04a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	687a      	ldr	r2, [r7, #4]
 800f05a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	68ba      	ldr	r2, [r7, #8]
 800f062:	2100      	movs	r1, #0
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f7fe fc8d 	bl	800d984 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f06a:	2300      	movs	r3, #0
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3710      	adds	r7, #16
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}

0800f074 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b084      	sub	sp, #16
 800f078:	af00      	add	r7, sp, #0
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	68ba      	ldr	r2, [r7, #8]
 800f084:	2100      	movs	r1, #0
 800f086:	68f8      	ldr	r0, [r7, #12]
 800f088:	f7fe fc7c 	bl	800d984 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f08c:	2300      	movs	r3, #0
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3710      	adds	r7, #16
 800f092:	46bd      	mov	sp, r7
 800f094:	bd80      	pop	{r7, pc}

0800f096 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f096:	b580      	push	{r7, lr}
 800f098:	b082      	sub	sp, #8
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2204      	movs	r2, #4
 800f0a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	2100      	movs	r1, #0
 800f0ac:	6878      	ldr	r0, [r7, #4]
 800f0ae:	f7fe fc4e 	bl	800d94e <USBD_LL_Transmit>

  return USBD_OK;
 800f0b2:	2300      	movs	r3, #0
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3708      	adds	r7, #8
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}

0800f0bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b082      	sub	sp, #8
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2205      	movs	r2, #5
 800f0c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	6878      	ldr	r0, [r7, #4]
 800f0d4:	f7fe fc56 	bl	800d984 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f0d8:	2300      	movs	r3, #0
}
 800f0da:	4618      	mov	r0, r3
 800f0dc:	3708      	adds	r7, #8
 800f0de:	46bd      	mov	sp, r7
 800f0e0:	bd80      	pop	{r7, pc}
	...

0800f0e4 <sniprintf>:
 800f0e4:	b40c      	push	{r2, r3}
 800f0e6:	4b18      	ldr	r3, [pc, #96]	@ (800f148 <sniprintf+0x64>)
 800f0e8:	b530      	push	{r4, r5, lr}
 800f0ea:	1e0c      	subs	r4, r1, #0
 800f0ec:	b09d      	sub	sp, #116	@ 0x74
 800f0ee:	681d      	ldr	r5, [r3, #0]
 800f0f0:	da08      	bge.n	800f104 <sniprintf+0x20>
 800f0f2:	238b      	movs	r3, #139	@ 0x8b
 800f0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0f8:	602b      	str	r3, [r5, #0]
 800f0fa:	b01d      	add	sp, #116	@ 0x74
 800f0fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f100:	b002      	add	sp, #8
 800f102:	4770      	bx	lr
 800f104:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f108:	9002      	str	r0, [sp, #8]
 800f10a:	9006      	str	r0, [sp, #24]
 800f10c:	a902      	add	r1, sp, #8
 800f10e:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f112:	bf14      	ite	ne
 800f114:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f118:	4623      	moveq	r3, r4
 800f11a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f11c:	4628      	mov	r0, r5
 800f11e:	9304      	str	r3, [sp, #16]
 800f120:	9307      	str	r3, [sp, #28]
 800f122:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f126:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f12a:	ab21      	add	r3, sp, #132	@ 0x84
 800f12c:	9301      	str	r3, [sp, #4]
 800f12e:	f000 f995 	bl	800f45c <_svfiprintf_r>
 800f132:	1c43      	adds	r3, r0, #1
 800f134:	bfbc      	itt	lt
 800f136:	238b      	movlt	r3, #139	@ 0x8b
 800f138:	602b      	strlt	r3, [r5, #0]
 800f13a:	2c00      	cmp	r4, #0
 800f13c:	d0dd      	beq.n	800f0fa <sniprintf+0x16>
 800f13e:	9b02      	ldr	r3, [sp, #8]
 800f140:	2200      	movs	r2, #0
 800f142:	701a      	strb	r2, [r3, #0]
 800f144:	e7d9      	b.n	800f0fa <sniprintf+0x16>
 800f146:	bf00      	nop
 800f148:	20000120 	.word	0x20000120

0800f14c <memset>:
 800f14c:	4402      	add	r2, r0
 800f14e:	4603      	mov	r3, r0
 800f150:	4293      	cmp	r3, r2
 800f152:	d100      	bne.n	800f156 <memset+0xa>
 800f154:	4770      	bx	lr
 800f156:	f803 1b01 	strb.w	r1, [r3], #1
 800f15a:	e7f9      	b.n	800f150 <memset+0x4>

0800f15c <__errno>:
 800f15c:	4b01      	ldr	r3, [pc, #4]	@ (800f164 <__errno+0x8>)
 800f15e:	6818      	ldr	r0, [r3, #0]
 800f160:	4770      	bx	lr
 800f162:	bf00      	nop
 800f164:	20000120 	.word	0x20000120

0800f168 <__libc_init_array>:
 800f168:	b570      	push	{r4, r5, r6, lr}
 800f16a:	4d0d      	ldr	r5, [pc, #52]	@ (800f1a0 <__libc_init_array+0x38>)
 800f16c:	2600      	movs	r6, #0
 800f16e:	4c0d      	ldr	r4, [pc, #52]	@ (800f1a4 <__libc_init_array+0x3c>)
 800f170:	1b64      	subs	r4, r4, r5
 800f172:	10a4      	asrs	r4, r4, #2
 800f174:	42a6      	cmp	r6, r4
 800f176:	d109      	bne.n	800f18c <__libc_init_array+0x24>
 800f178:	4d0b      	ldr	r5, [pc, #44]	@ (800f1a8 <__libc_init_array+0x40>)
 800f17a:	2600      	movs	r6, #0
 800f17c:	4c0b      	ldr	r4, [pc, #44]	@ (800f1ac <__libc_init_array+0x44>)
 800f17e:	f000 fc77 	bl	800fa70 <_init>
 800f182:	1b64      	subs	r4, r4, r5
 800f184:	10a4      	asrs	r4, r4, #2
 800f186:	42a6      	cmp	r6, r4
 800f188:	d105      	bne.n	800f196 <__libc_init_array+0x2e>
 800f18a:	bd70      	pop	{r4, r5, r6, pc}
 800f18c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f190:	3601      	adds	r6, #1
 800f192:	4798      	blx	r3
 800f194:	e7ee      	b.n	800f174 <__libc_init_array+0xc>
 800f196:	f855 3b04 	ldr.w	r3, [r5], #4
 800f19a:	3601      	adds	r6, #1
 800f19c:	4798      	blx	r3
 800f19e:	e7f2      	b.n	800f186 <__libc_init_array+0x1e>
 800f1a0:	0800fb68 	.word	0x0800fb68
 800f1a4:	0800fb68 	.word	0x0800fb68
 800f1a8:	0800fb68 	.word	0x0800fb68
 800f1ac:	0800fb6c 	.word	0x0800fb6c

0800f1b0 <__retarget_lock_acquire_recursive>:
 800f1b0:	4770      	bx	lr

0800f1b2 <__retarget_lock_release_recursive>:
 800f1b2:	4770      	bx	lr

0800f1b4 <_free_r>:
 800f1b4:	b538      	push	{r3, r4, r5, lr}
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	2900      	cmp	r1, #0
 800f1ba:	d041      	beq.n	800f240 <_free_r+0x8c>
 800f1bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1c0:	1f0c      	subs	r4, r1, #4
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	bfb8      	it	lt
 800f1c6:	18e4      	addlt	r4, r4, r3
 800f1c8:	f000 f8e0 	bl	800f38c <__malloc_lock>
 800f1cc:	4a1d      	ldr	r2, [pc, #116]	@ (800f244 <_free_r+0x90>)
 800f1ce:	6813      	ldr	r3, [r2, #0]
 800f1d0:	b933      	cbnz	r3, 800f1e0 <_free_r+0x2c>
 800f1d2:	6063      	str	r3, [r4, #4]
 800f1d4:	6014      	str	r4, [r2, #0]
 800f1d6:	4628      	mov	r0, r5
 800f1d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1dc:	f000 b8dc 	b.w	800f398 <__malloc_unlock>
 800f1e0:	42a3      	cmp	r3, r4
 800f1e2:	d908      	bls.n	800f1f6 <_free_r+0x42>
 800f1e4:	6820      	ldr	r0, [r4, #0]
 800f1e6:	1821      	adds	r1, r4, r0
 800f1e8:	428b      	cmp	r3, r1
 800f1ea:	bf01      	itttt	eq
 800f1ec:	6819      	ldreq	r1, [r3, #0]
 800f1ee:	685b      	ldreq	r3, [r3, #4]
 800f1f0:	1809      	addeq	r1, r1, r0
 800f1f2:	6021      	streq	r1, [r4, #0]
 800f1f4:	e7ed      	b.n	800f1d2 <_free_r+0x1e>
 800f1f6:	461a      	mov	r2, r3
 800f1f8:	685b      	ldr	r3, [r3, #4]
 800f1fa:	b10b      	cbz	r3, 800f200 <_free_r+0x4c>
 800f1fc:	42a3      	cmp	r3, r4
 800f1fe:	d9fa      	bls.n	800f1f6 <_free_r+0x42>
 800f200:	6811      	ldr	r1, [r2, #0]
 800f202:	1850      	adds	r0, r2, r1
 800f204:	42a0      	cmp	r0, r4
 800f206:	d10b      	bne.n	800f220 <_free_r+0x6c>
 800f208:	6820      	ldr	r0, [r4, #0]
 800f20a:	4401      	add	r1, r0
 800f20c:	1850      	adds	r0, r2, r1
 800f20e:	6011      	str	r1, [r2, #0]
 800f210:	4283      	cmp	r3, r0
 800f212:	d1e0      	bne.n	800f1d6 <_free_r+0x22>
 800f214:	6818      	ldr	r0, [r3, #0]
 800f216:	685b      	ldr	r3, [r3, #4]
 800f218:	4408      	add	r0, r1
 800f21a:	6053      	str	r3, [r2, #4]
 800f21c:	6010      	str	r0, [r2, #0]
 800f21e:	e7da      	b.n	800f1d6 <_free_r+0x22>
 800f220:	d902      	bls.n	800f228 <_free_r+0x74>
 800f222:	230c      	movs	r3, #12
 800f224:	602b      	str	r3, [r5, #0]
 800f226:	e7d6      	b.n	800f1d6 <_free_r+0x22>
 800f228:	6820      	ldr	r0, [r4, #0]
 800f22a:	1821      	adds	r1, r4, r0
 800f22c:	428b      	cmp	r3, r1
 800f22e:	bf02      	ittt	eq
 800f230:	6819      	ldreq	r1, [r3, #0]
 800f232:	685b      	ldreq	r3, [r3, #4]
 800f234:	1809      	addeq	r1, r1, r0
 800f236:	6063      	str	r3, [r4, #4]
 800f238:	bf08      	it	eq
 800f23a:	6021      	streq	r1, [r4, #0]
 800f23c:	6054      	str	r4, [r2, #4]
 800f23e:	e7ca      	b.n	800f1d6 <_free_r+0x22>
 800f240:	bd38      	pop	{r3, r4, r5, pc}
 800f242:	bf00      	nop
 800f244:	20001278 	.word	0x20001278

0800f248 <sbrk_aligned>:
 800f248:	b570      	push	{r4, r5, r6, lr}
 800f24a:	4e0f      	ldr	r6, [pc, #60]	@ (800f288 <sbrk_aligned+0x40>)
 800f24c:	460c      	mov	r4, r1
 800f24e:	4605      	mov	r5, r0
 800f250:	6831      	ldr	r1, [r6, #0]
 800f252:	b911      	cbnz	r1, 800f25a <sbrk_aligned+0x12>
 800f254:	f000 fbaa 	bl	800f9ac <_sbrk_r>
 800f258:	6030      	str	r0, [r6, #0]
 800f25a:	4621      	mov	r1, r4
 800f25c:	4628      	mov	r0, r5
 800f25e:	f000 fba5 	bl	800f9ac <_sbrk_r>
 800f262:	1c43      	adds	r3, r0, #1
 800f264:	d103      	bne.n	800f26e <sbrk_aligned+0x26>
 800f266:	f04f 34ff 	mov.w	r4, #4294967295
 800f26a:	4620      	mov	r0, r4
 800f26c:	bd70      	pop	{r4, r5, r6, pc}
 800f26e:	1cc4      	adds	r4, r0, #3
 800f270:	f024 0403 	bic.w	r4, r4, #3
 800f274:	42a0      	cmp	r0, r4
 800f276:	d0f8      	beq.n	800f26a <sbrk_aligned+0x22>
 800f278:	1a21      	subs	r1, r4, r0
 800f27a:	4628      	mov	r0, r5
 800f27c:	f000 fb96 	bl	800f9ac <_sbrk_r>
 800f280:	3001      	adds	r0, #1
 800f282:	d1f2      	bne.n	800f26a <sbrk_aligned+0x22>
 800f284:	e7ef      	b.n	800f266 <sbrk_aligned+0x1e>
 800f286:	bf00      	nop
 800f288:	20001274 	.word	0x20001274

0800f28c <_malloc_r>:
 800f28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f290:	1ccd      	adds	r5, r1, #3
 800f292:	4606      	mov	r6, r0
 800f294:	f025 0503 	bic.w	r5, r5, #3
 800f298:	3508      	adds	r5, #8
 800f29a:	2d0c      	cmp	r5, #12
 800f29c:	bf38      	it	cc
 800f29e:	250c      	movcc	r5, #12
 800f2a0:	2d00      	cmp	r5, #0
 800f2a2:	db01      	blt.n	800f2a8 <_malloc_r+0x1c>
 800f2a4:	42a9      	cmp	r1, r5
 800f2a6:	d904      	bls.n	800f2b2 <_malloc_r+0x26>
 800f2a8:	230c      	movs	r3, #12
 800f2aa:	6033      	str	r3, [r6, #0]
 800f2ac:	2000      	movs	r0, #0
 800f2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f388 <_malloc_r+0xfc>
 800f2b6:	f000 f869 	bl	800f38c <__malloc_lock>
 800f2ba:	f8d8 3000 	ldr.w	r3, [r8]
 800f2be:	461c      	mov	r4, r3
 800f2c0:	bb44      	cbnz	r4, 800f314 <_malloc_r+0x88>
 800f2c2:	4629      	mov	r1, r5
 800f2c4:	4630      	mov	r0, r6
 800f2c6:	f7ff ffbf 	bl	800f248 <sbrk_aligned>
 800f2ca:	1c43      	adds	r3, r0, #1
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	d158      	bne.n	800f382 <_malloc_r+0xf6>
 800f2d0:	f8d8 4000 	ldr.w	r4, [r8]
 800f2d4:	4627      	mov	r7, r4
 800f2d6:	2f00      	cmp	r7, #0
 800f2d8:	d143      	bne.n	800f362 <_malloc_r+0xd6>
 800f2da:	2c00      	cmp	r4, #0
 800f2dc:	d04b      	beq.n	800f376 <_malloc_r+0xea>
 800f2de:	6823      	ldr	r3, [r4, #0]
 800f2e0:	4639      	mov	r1, r7
 800f2e2:	4630      	mov	r0, r6
 800f2e4:	eb04 0903 	add.w	r9, r4, r3
 800f2e8:	f000 fb60 	bl	800f9ac <_sbrk_r>
 800f2ec:	4581      	cmp	r9, r0
 800f2ee:	d142      	bne.n	800f376 <_malloc_r+0xea>
 800f2f0:	6821      	ldr	r1, [r4, #0]
 800f2f2:	4630      	mov	r0, r6
 800f2f4:	1a6d      	subs	r5, r5, r1
 800f2f6:	4629      	mov	r1, r5
 800f2f8:	f7ff ffa6 	bl	800f248 <sbrk_aligned>
 800f2fc:	3001      	adds	r0, #1
 800f2fe:	d03a      	beq.n	800f376 <_malloc_r+0xea>
 800f300:	6823      	ldr	r3, [r4, #0]
 800f302:	442b      	add	r3, r5
 800f304:	6023      	str	r3, [r4, #0]
 800f306:	f8d8 3000 	ldr.w	r3, [r8]
 800f30a:	685a      	ldr	r2, [r3, #4]
 800f30c:	bb62      	cbnz	r2, 800f368 <_malloc_r+0xdc>
 800f30e:	f8c8 7000 	str.w	r7, [r8]
 800f312:	e00f      	b.n	800f334 <_malloc_r+0xa8>
 800f314:	6822      	ldr	r2, [r4, #0]
 800f316:	1b52      	subs	r2, r2, r5
 800f318:	d420      	bmi.n	800f35c <_malloc_r+0xd0>
 800f31a:	2a0b      	cmp	r2, #11
 800f31c:	d917      	bls.n	800f34e <_malloc_r+0xc2>
 800f31e:	1961      	adds	r1, r4, r5
 800f320:	42a3      	cmp	r3, r4
 800f322:	6025      	str	r5, [r4, #0]
 800f324:	bf18      	it	ne
 800f326:	6059      	strne	r1, [r3, #4]
 800f328:	6863      	ldr	r3, [r4, #4]
 800f32a:	bf08      	it	eq
 800f32c:	f8c8 1000 	streq.w	r1, [r8]
 800f330:	5162      	str	r2, [r4, r5]
 800f332:	604b      	str	r3, [r1, #4]
 800f334:	4630      	mov	r0, r6
 800f336:	f000 f82f 	bl	800f398 <__malloc_unlock>
 800f33a:	f104 000b 	add.w	r0, r4, #11
 800f33e:	1d23      	adds	r3, r4, #4
 800f340:	f020 0007 	bic.w	r0, r0, #7
 800f344:	1ac2      	subs	r2, r0, r3
 800f346:	bf1c      	itt	ne
 800f348:	1a1b      	subne	r3, r3, r0
 800f34a:	50a3      	strne	r3, [r4, r2]
 800f34c:	e7af      	b.n	800f2ae <_malloc_r+0x22>
 800f34e:	6862      	ldr	r2, [r4, #4]
 800f350:	42a3      	cmp	r3, r4
 800f352:	bf0c      	ite	eq
 800f354:	f8c8 2000 	streq.w	r2, [r8]
 800f358:	605a      	strne	r2, [r3, #4]
 800f35a:	e7eb      	b.n	800f334 <_malloc_r+0xa8>
 800f35c:	4623      	mov	r3, r4
 800f35e:	6864      	ldr	r4, [r4, #4]
 800f360:	e7ae      	b.n	800f2c0 <_malloc_r+0x34>
 800f362:	463c      	mov	r4, r7
 800f364:	687f      	ldr	r7, [r7, #4]
 800f366:	e7b6      	b.n	800f2d6 <_malloc_r+0x4a>
 800f368:	461a      	mov	r2, r3
 800f36a:	685b      	ldr	r3, [r3, #4]
 800f36c:	42a3      	cmp	r3, r4
 800f36e:	d1fb      	bne.n	800f368 <_malloc_r+0xdc>
 800f370:	2300      	movs	r3, #0
 800f372:	6053      	str	r3, [r2, #4]
 800f374:	e7de      	b.n	800f334 <_malloc_r+0xa8>
 800f376:	230c      	movs	r3, #12
 800f378:	4630      	mov	r0, r6
 800f37a:	6033      	str	r3, [r6, #0]
 800f37c:	f000 f80c 	bl	800f398 <__malloc_unlock>
 800f380:	e794      	b.n	800f2ac <_malloc_r+0x20>
 800f382:	6005      	str	r5, [r0, #0]
 800f384:	e7d6      	b.n	800f334 <_malloc_r+0xa8>
 800f386:	bf00      	nop
 800f388:	20001278 	.word	0x20001278

0800f38c <__malloc_lock>:
 800f38c:	4801      	ldr	r0, [pc, #4]	@ (800f394 <__malloc_lock+0x8>)
 800f38e:	f7ff bf0f 	b.w	800f1b0 <__retarget_lock_acquire_recursive>
 800f392:	bf00      	nop
 800f394:	20001270 	.word	0x20001270

0800f398 <__malloc_unlock>:
 800f398:	4801      	ldr	r0, [pc, #4]	@ (800f3a0 <__malloc_unlock+0x8>)
 800f39a:	f7ff bf0a 	b.w	800f1b2 <__retarget_lock_release_recursive>
 800f39e:	bf00      	nop
 800f3a0:	20001270 	.word	0x20001270

0800f3a4 <__ssputs_r>:
 800f3a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3a8:	461f      	mov	r7, r3
 800f3aa:	688e      	ldr	r6, [r1, #8]
 800f3ac:	4682      	mov	sl, r0
 800f3ae:	460c      	mov	r4, r1
 800f3b0:	42be      	cmp	r6, r7
 800f3b2:	4690      	mov	r8, r2
 800f3b4:	680b      	ldr	r3, [r1, #0]
 800f3b6:	d82d      	bhi.n	800f414 <__ssputs_r+0x70>
 800f3b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f3bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f3c0:	d026      	beq.n	800f410 <__ssputs_r+0x6c>
 800f3c2:	6965      	ldr	r5, [r4, #20]
 800f3c4:	6909      	ldr	r1, [r1, #16]
 800f3c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f3ca:	eba3 0901 	sub.w	r9, r3, r1
 800f3ce:	1c7b      	adds	r3, r7, #1
 800f3d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f3d4:	444b      	add	r3, r9
 800f3d6:	106d      	asrs	r5, r5, #1
 800f3d8:	429d      	cmp	r5, r3
 800f3da:	bf38      	it	cc
 800f3dc:	461d      	movcc	r5, r3
 800f3de:	0553      	lsls	r3, r2, #21
 800f3e0:	d527      	bpl.n	800f432 <__ssputs_r+0x8e>
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	f7ff ff52 	bl	800f28c <_malloc_r>
 800f3e8:	4606      	mov	r6, r0
 800f3ea:	b360      	cbz	r0, 800f446 <__ssputs_r+0xa2>
 800f3ec:	464a      	mov	r2, r9
 800f3ee:	6921      	ldr	r1, [r4, #16]
 800f3f0:	f000 fafa 	bl	800f9e8 <memcpy>
 800f3f4:	89a3      	ldrh	r3, [r4, #12]
 800f3f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f3fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3fe:	81a3      	strh	r3, [r4, #12]
 800f400:	6126      	str	r6, [r4, #16]
 800f402:	444e      	add	r6, r9
 800f404:	6165      	str	r5, [r4, #20]
 800f406:	eba5 0509 	sub.w	r5, r5, r9
 800f40a:	6026      	str	r6, [r4, #0]
 800f40c:	463e      	mov	r6, r7
 800f40e:	60a5      	str	r5, [r4, #8]
 800f410:	42be      	cmp	r6, r7
 800f412:	d900      	bls.n	800f416 <__ssputs_r+0x72>
 800f414:	463e      	mov	r6, r7
 800f416:	4632      	mov	r2, r6
 800f418:	4641      	mov	r1, r8
 800f41a:	6820      	ldr	r0, [r4, #0]
 800f41c:	f000 faac 	bl	800f978 <memmove>
 800f420:	68a3      	ldr	r3, [r4, #8]
 800f422:	2000      	movs	r0, #0
 800f424:	1b9b      	subs	r3, r3, r6
 800f426:	60a3      	str	r3, [r4, #8]
 800f428:	6823      	ldr	r3, [r4, #0]
 800f42a:	4433      	add	r3, r6
 800f42c:	6023      	str	r3, [r4, #0]
 800f42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f432:	462a      	mov	r2, r5
 800f434:	f000 fae5 	bl	800fa02 <_realloc_r>
 800f438:	4606      	mov	r6, r0
 800f43a:	2800      	cmp	r0, #0
 800f43c:	d1e0      	bne.n	800f400 <__ssputs_r+0x5c>
 800f43e:	6921      	ldr	r1, [r4, #16]
 800f440:	4650      	mov	r0, sl
 800f442:	f7ff feb7 	bl	800f1b4 <_free_r>
 800f446:	230c      	movs	r3, #12
 800f448:	f04f 30ff 	mov.w	r0, #4294967295
 800f44c:	f8ca 3000 	str.w	r3, [sl]
 800f450:	89a3      	ldrh	r3, [r4, #12]
 800f452:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f456:	81a3      	strh	r3, [r4, #12]
 800f458:	e7e9      	b.n	800f42e <__ssputs_r+0x8a>
	...

0800f45c <_svfiprintf_r>:
 800f45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f460:	4698      	mov	r8, r3
 800f462:	898b      	ldrh	r3, [r1, #12]
 800f464:	b09d      	sub	sp, #116	@ 0x74
 800f466:	4607      	mov	r7, r0
 800f468:	061b      	lsls	r3, r3, #24
 800f46a:	460d      	mov	r5, r1
 800f46c:	4614      	mov	r4, r2
 800f46e:	d510      	bpl.n	800f492 <_svfiprintf_r+0x36>
 800f470:	690b      	ldr	r3, [r1, #16]
 800f472:	b973      	cbnz	r3, 800f492 <_svfiprintf_r+0x36>
 800f474:	2140      	movs	r1, #64	@ 0x40
 800f476:	f7ff ff09 	bl	800f28c <_malloc_r>
 800f47a:	6028      	str	r0, [r5, #0]
 800f47c:	6128      	str	r0, [r5, #16]
 800f47e:	b930      	cbnz	r0, 800f48e <_svfiprintf_r+0x32>
 800f480:	230c      	movs	r3, #12
 800f482:	603b      	str	r3, [r7, #0]
 800f484:	f04f 30ff 	mov.w	r0, #4294967295
 800f488:	b01d      	add	sp, #116	@ 0x74
 800f48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f48e:	2340      	movs	r3, #64	@ 0x40
 800f490:	616b      	str	r3, [r5, #20]
 800f492:	2300      	movs	r3, #0
 800f494:	f8cd 800c 	str.w	r8, [sp, #12]
 800f498:	f04f 0901 	mov.w	r9, #1
 800f49c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 800f640 <_svfiprintf_r+0x1e4>
 800f4a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800f4a2:	2320      	movs	r3, #32
 800f4a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f4a8:	2330      	movs	r3, #48	@ 0x30
 800f4aa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f4ae:	4623      	mov	r3, r4
 800f4b0:	469a      	mov	sl, r3
 800f4b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4b6:	b10a      	cbz	r2, 800f4bc <_svfiprintf_r+0x60>
 800f4b8:	2a25      	cmp	r2, #37	@ 0x25
 800f4ba:	d1f9      	bne.n	800f4b0 <_svfiprintf_r+0x54>
 800f4bc:	ebba 0b04 	subs.w	fp, sl, r4
 800f4c0:	d00b      	beq.n	800f4da <_svfiprintf_r+0x7e>
 800f4c2:	465b      	mov	r3, fp
 800f4c4:	4622      	mov	r2, r4
 800f4c6:	4629      	mov	r1, r5
 800f4c8:	4638      	mov	r0, r7
 800f4ca:	f7ff ff6b 	bl	800f3a4 <__ssputs_r>
 800f4ce:	3001      	adds	r0, #1
 800f4d0:	f000 80a7 	beq.w	800f622 <_svfiprintf_r+0x1c6>
 800f4d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f4d6:	445a      	add	r2, fp
 800f4d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800f4da:	f89a 3000 	ldrb.w	r3, [sl]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	f000 809f 	beq.w	800f622 <_svfiprintf_r+0x1c6>
 800f4e4:	2300      	movs	r3, #0
 800f4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f4ea:	f10a 0a01 	add.w	sl, sl, #1
 800f4ee:	9304      	str	r3, [sp, #16]
 800f4f0:	9307      	str	r3, [sp, #28]
 800f4f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f4f6:	931a      	str	r3, [sp, #104]	@ 0x68
 800f4f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f4fc:	4654      	mov	r4, sl
 800f4fe:	2205      	movs	r2, #5
 800f500:	484f      	ldr	r0, [pc, #316]	@ (800f640 <_svfiprintf_r+0x1e4>)
 800f502:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f506:	f000 fa61 	bl	800f9cc <memchr>
 800f50a:	9a04      	ldr	r2, [sp, #16]
 800f50c:	b9d8      	cbnz	r0, 800f546 <_svfiprintf_r+0xea>
 800f50e:	06d0      	lsls	r0, r2, #27
 800f510:	bf44      	itt	mi
 800f512:	2320      	movmi	r3, #32
 800f514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f518:	0711      	lsls	r1, r2, #28
 800f51a:	bf44      	itt	mi
 800f51c:	232b      	movmi	r3, #43	@ 0x2b
 800f51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f522:	f89a 3000 	ldrb.w	r3, [sl]
 800f526:	2b2a      	cmp	r3, #42	@ 0x2a
 800f528:	d015      	beq.n	800f556 <_svfiprintf_r+0xfa>
 800f52a:	9a07      	ldr	r2, [sp, #28]
 800f52c:	4654      	mov	r4, sl
 800f52e:	2000      	movs	r0, #0
 800f530:	f04f 0c0a 	mov.w	ip, #10
 800f534:	4621      	mov	r1, r4
 800f536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f53a:	3b30      	subs	r3, #48	@ 0x30
 800f53c:	2b09      	cmp	r3, #9
 800f53e:	d94b      	bls.n	800f5d8 <_svfiprintf_r+0x17c>
 800f540:	b1b0      	cbz	r0, 800f570 <_svfiprintf_r+0x114>
 800f542:	9207      	str	r2, [sp, #28]
 800f544:	e014      	b.n	800f570 <_svfiprintf_r+0x114>
 800f546:	eba0 0308 	sub.w	r3, r0, r8
 800f54a:	46a2      	mov	sl, r4
 800f54c:	fa09 f303 	lsl.w	r3, r9, r3
 800f550:	4313      	orrs	r3, r2
 800f552:	9304      	str	r3, [sp, #16]
 800f554:	e7d2      	b.n	800f4fc <_svfiprintf_r+0xa0>
 800f556:	9b03      	ldr	r3, [sp, #12]
 800f558:	1d19      	adds	r1, r3, #4
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	9103      	str	r1, [sp, #12]
 800f560:	bfbb      	ittet	lt
 800f562:	425b      	neglt	r3, r3
 800f564:	f042 0202 	orrlt.w	r2, r2, #2
 800f568:	9307      	strge	r3, [sp, #28]
 800f56a:	9307      	strlt	r3, [sp, #28]
 800f56c:	bfb8      	it	lt
 800f56e:	9204      	strlt	r2, [sp, #16]
 800f570:	7823      	ldrb	r3, [r4, #0]
 800f572:	2b2e      	cmp	r3, #46	@ 0x2e
 800f574:	d10a      	bne.n	800f58c <_svfiprintf_r+0x130>
 800f576:	7863      	ldrb	r3, [r4, #1]
 800f578:	2b2a      	cmp	r3, #42	@ 0x2a
 800f57a:	d132      	bne.n	800f5e2 <_svfiprintf_r+0x186>
 800f57c:	9b03      	ldr	r3, [sp, #12]
 800f57e:	3402      	adds	r4, #2
 800f580:	1d1a      	adds	r2, r3, #4
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f588:	9203      	str	r2, [sp, #12]
 800f58a:	9305      	str	r3, [sp, #20]
 800f58c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f650 <_svfiprintf_r+0x1f4>
 800f590:	2203      	movs	r2, #3
 800f592:	7821      	ldrb	r1, [r4, #0]
 800f594:	4650      	mov	r0, sl
 800f596:	f000 fa19 	bl	800f9cc <memchr>
 800f59a:	b138      	cbz	r0, 800f5ac <_svfiprintf_r+0x150>
 800f59c:	eba0 000a 	sub.w	r0, r0, sl
 800f5a0:	2240      	movs	r2, #64	@ 0x40
 800f5a2:	9b04      	ldr	r3, [sp, #16]
 800f5a4:	3401      	adds	r4, #1
 800f5a6:	4082      	lsls	r2, r0
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	9304      	str	r3, [sp, #16]
 800f5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5b0:	2206      	movs	r2, #6
 800f5b2:	4824      	ldr	r0, [pc, #144]	@ (800f644 <_svfiprintf_r+0x1e8>)
 800f5b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f5b8:	f000 fa08 	bl	800f9cc <memchr>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d036      	beq.n	800f62e <_svfiprintf_r+0x1d2>
 800f5c0:	4b21      	ldr	r3, [pc, #132]	@ (800f648 <_svfiprintf_r+0x1ec>)
 800f5c2:	bb1b      	cbnz	r3, 800f60c <_svfiprintf_r+0x1b0>
 800f5c4:	9b03      	ldr	r3, [sp, #12]
 800f5c6:	3307      	adds	r3, #7
 800f5c8:	f023 0307 	bic.w	r3, r3, #7
 800f5cc:	3308      	adds	r3, #8
 800f5ce:	9303      	str	r3, [sp, #12]
 800f5d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5d2:	4433      	add	r3, r6
 800f5d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f5d6:	e76a      	b.n	800f4ae <_svfiprintf_r+0x52>
 800f5d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5dc:	460c      	mov	r4, r1
 800f5de:	2001      	movs	r0, #1
 800f5e0:	e7a8      	b.n	800f534 <_svfiprintf_r+0xd8>
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	3401      	adds	r4, #1
 800f5e6:	f04f 0c0a 	mov.w	ip, #10
 800f5ea:	4619      	mov	r1, r3
 800f5ec:	9305      	str	r3, [sp, #20]
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f5f4:	3a30      	subs	r2, #48	@ 0x30
 800f5f6:	2a09      	cmp	r2, #9
 800f5f8:	d903      	bls.n	800f602 <_svfiprintf_r+0x1a6>
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d0c6      	beq.n	800f58c <_svfiprintf_r+0x130>
 800f5fe:	9105      	str	r1, [sp, #20]
 800f600:	e7c4      	b.n	800f58c <_svfiprintf_r+0x130>
 800f602:	fb0c 2101 	mla	r1, ip, r1, r2
 800f606:	4604      	mov	r4, r0
 800f608:	2301      	movs	r3, #1
 800f60a:	e7f0      	b.n	800f5ee <_svfiprintf_r+0x192>
 800f60c:	ab03      	add	r3, sp, #12
 800f60e:	462a      	mov	r2, r5
 800f610:	a904      	add	r1, sp, #16
 800f612:	4638      	mov	r0, r7
 800f614:	9300      	str	r3, [sp, #0]
 800f616:	4b0d      	ldr	r3, [pc, #52]	@ (800f64c <_svfiprintf_r+0x1f0>)
 800f618:	f3af 8000 	nop.w
 800f61c:	1c42      	adds	r2, r0, #1
 800f61e:	4606      	mov	r6, r0
 800f620:	d1d6      	bne.n	800f5d0 <_svfiprintf_r+0x174>
 800f622:	89ab      	ldrh	r3, [r5, #12]
 800f624:	065b      	lsls	r3, r3, #25
 800f626:	f53f af2d 	bmi.w	800f484 <_svfiprintf_r+0x28>
 800f62a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f62c:	e72c      	b.n	800f488 <_svfiprintf_r+0x2c>
 800f62e:	ab03      	add	r3, sp, #12
 800f630:	462a      	mov	r2, r5
 800f632:	a904      	add	r1, sp, #16
 800f634:	4638      	mov	r0, r7
 800f636:	9300      	str	r3, [sp, #0]
 800f638:	4b04      	ldr	r3, [pc, #16]	@ (800f64c <_svfiprintf_r+0x1f0>)
 800f63a:	f000 f87d 	bl	800f738 <_printf_i>
 800f63e:	e7ed      	b.n	800f61c <_svfiprintf_r+0x1c0>
 800f640:	0800fb2c 	.word	0x0800fb2c
 800f644:	0800fb36 	.word	0x0800fb36
 800f648:	00000000 	.word	0x00000000
 800f64c:	0800f3a5 	.word	0x0800f3a5
 800f650:	0800fb32 	.word	0x0800fb32

0800f654 <_printf_common>:
 800f654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f658:	4616      	mov	r6, r2
 800f65a:	4698      	mov	r8, r3
 800f65c:	688a      	ldr	r2, [r1, #8]
 800f65e:	4607      	mov	r7, r0
 800f660:	690b      	ldr	r3, [r1, #16]
 800f662:	460c      	mov	r4, r1
 800f664:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f668:	4293      	cmp	r3, r2
 800f66a:	bfb8      	it	lt
 800f66c:	4613      	movlt	r3, r2
 800f66e:	6033      	str	r3, [r6, #0]
 800f670:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f674:	b10a      	cbz	r2, 800f67a <_printf_common+0x26>
 800f676:	3301      	adds	r3, #1
 800f678:	6033      	str	r3, [r6, #0]
 800f67a:	6823      	ldr	r3, [r4, #0]
 800f67c:	0699      	lsls	r1, r3, #26
 800f67e:	bf42      	ittt	mi
 800f680:	6833      	ldrmi	r3, [r6, #0]
 800f682:	3302      	addmi	r3, #2
 800f684:	6033      	strmi	r3, [r6, #0]
 800f686:	6825      	ldr	r5, [r4, #0]
 800f688:	f015 0506 	ands.w	r5, r5, #6
 800f68c:	d106      	bne.n	800f69c <_printf_common+0x48>
 800f68e:	f104 0a19 	add.w	sl, r4, #25
 800f692:	68e3      	ldr	r3, [r4, #12]
 800f694:	6832      	ldr	r2, [r6, #0]
 800f696:	1a9b      	subs	r3, r3, r2
 800f698:	42ab      	cmp	r3, r5
 800f69a:	dc2b      	bgt.n	800f6f4 <_printf_common+0xa0>
 800f69c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f6a0:	6822      	ldr	r2, [r4, #0]
 800f6a2:	3b00      	subs	r3, #0
 800f6a4:	bf18      	it	ne
 800f6a6:	2301      	movne	r3, #1
 800f6a8:	0692      	lsls	r2, r2, #26
 800f6aa:	d430      	bmi.n	800f70e <_printf_common+0xba>
 800f6ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f6b0:	4641      	mov	r1, r8
 800f6b2:	4638      	mov	r0, r7
 800f6b4:	47c8      	blx	r9
 800f6b6:	3001      	adds	r0, #1
 800f6b8:	d023      	beq.n	800f702 <_printf_common+0xae>
 800f6ba:	6823      	ldr	r3, [r4, #0]
 800f6bc:	341a      	adds	r4, #26
 800f6be:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f6c2:	f003 0306 	and.w	r3, r3, #6
 800f6c6:	2b04      	cmp	r3, #4
 800f6c8:	bf0a      	itet	eq
 800f6ca:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 800f6ce:	2500      	movne	r5, #0
 800f6d0:	6833      	ldreq	r3, [r6, #0]
 800f6d2:	f04f 0600 	mov.w	r6, #0
 800f6d6:	bf08      	it	eq
 800f6d8:	1aed      	subeq	r5, r5, r3
 800f6da:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f6de:	bf08      	it	eq
 800f6e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f6e4:	4293      	cmp	r3, r2
 800f6e6:	bfc4      	itt	gt
 800f6e8:	1a9b      	subgt	r3, r3, r2
 800f6ea:	18ed      	addgt	r5, r5, r3
 800f6ec:	42b5      	cmp	r5, r6
 800f6ee:	d11a      	bne.n	800f726 <_printf_common+0xd2>
 800f6f0:	2000      	movs	r0, #0
 800f6f2:	e008      	b.n	800f706 <_printf_common+0xb2>
 800f6f4:	2301      	movs	r3, #1
 800f6f6:	4652      	mov	r2, sl
 800f6f8:	4641      	mov	r1, r8
 800f6fa:	4638      	mov	r0, r7
 800f6fc:	47c8      	blx	r9
 800f6fe:	3001      	adds	r0, #1
 800f700:	d103      	bne.n	800f70a <_printf_common+0xb6>
 800f702:	f04f 30ff 	mov.w	r0, #4294967295
 800f706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f70a:	3501      	adds	r5, #1
 800f70c:	e7c1      	b.n	800f692 <_printf_common+0x3e>
 800f70e:	18e1      	adds	r1, r4, r3
 800f710:	1c5a      	adds	r2, r3, #1
 800f712:	2030      	movs	r0, #48	@ 0x30
 800f714:	3302      	adds	r3, #2
 800f716:	4422      	add	r2, r4
 800f718:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f71c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f720:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f724:	e7c2      	b.n	800f6ac <_printf_common+0x58>
 800f726:	2301      	movs	r3, #1
 800f728:	4622      	mov	r2, r4
 800f72a:	4641      	mov	r1, r8
 800f72c:	4638      	mov	r0, r7
 800f72e:	47c8      	blx	r9
 800f730:	3001      	adds	r0, #1
 800f732:	d0e6      	beq.n	800f702 <_printf_common+0xae>
 800f734:	3601      	adds	r6, #1
 800f736:	e7d9      	b.n	800f6ec <_printf_common+0x98>

0800f738 <_printf_i>:
 800f738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f73c:	7e0f      	ldrb	r7, [r1, #24]
 800f73e:	4691      	mov	r9, r2
 800f740:	4680      	mov	r8, r0
 800f742:	460c      	mov	r4, r1
 800f744:	2f78      	cmp	r7, #120	@ 0x78
 800f746:	469a      	mov	sl, r3
 800f748:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f74a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f74e:	d807      	bhi.n	800f760 <_printf_i+0x28>
 800f750:	2f62      	cmp	r7, #98	@ 0x62
 800f752:	d80a      	bhi.n	800f76a <_printf_i+0x32>
 800f754:	2f00      	cmp	r7, #0
 800f756:	f000 80d2 	beq.w	800f8fe <_printf_i+0x1c6>
 800f75a:	2f58      	cmp	r7, #88	@ 0x58
 800f75c:	f000 80b9 	beq.w	800f8d2 <_printf_i+0x19a>
 800f760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f764:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f768:	e03a      	b.n	800f7e0 <_printf_i+0xa8>
 800f76a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f76e:	2b15      	cmp	r3, #21
 800f770:	d8f6      	bhi.n	800f760 <_printf_i+0x28>
 800f772:	a101      	add	r1, pc, #4	@ (adr r1, 800f778 <_printf_i+0x40>)
 800f774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f778:	0800f7d1 	.word	0x0800f7d1
 800f77c:	0800f7e5 	.word	0x0800f7e5
 800f780:	0800f761 	.word	0x0800f761
 800f784:	0800f761 	.word	0x0800f761
 800f788:	0800f761 	.word	0x0800f761
 800f78c:	0800f761 	.word	0x0800f761
 800f790:	0800f7e5 	.word	0x0800f7e5
 800f794:	0800f761 	.word	0x0800f761
 800f798:	0800f761 	.word	0x0800f761
 800f79c:	0800f761 	.word	0x0800f761
 800f7a0:	0800f761 	.word	0x0800f761
 800f7a4:	0800f8e5 	.word	0x0800f8e5
 800f7a8:	0800f80f 	.word	0x0800f80f
 800f7ac:	0800f89f 	.word	0x0800f89f
 800f7b0:	0800f761 	.word	0x0800f761
 800f7b4:	0800f761 	.word	0x0800f761
 800f7b8:	0800f907 	.word	0x0800f907
 800f7bc:	0800f761 	.word	0x0800f761
 800f7c0:	0800f80f 	.word	0x0800f80f
 800f7c4:	0800f761 	.word	0x0800f761
 800f7c8:	0800f761 	.word	0x0800f761
 800f7cc:	0800f8a7 	.word	0x0800f8a7
 800f7d0:	6833      	ldr	r3, [r6, #0]
 800f7d2:	1d1a      	adds	r2, r3, #4
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	6032      	str	r2, [r6, #0]
 800f7d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f7dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f7e0:	2301      	movs	r3, #1
 800f7e2:	e09d      	b.n	800f920 <_printf_i+0x1e8>
 800f7e4:	6833      	ldr	r3, [r6, #0]
 800f7e6:	6820      	ldr	r0, [r4, #0]
 800f7e8:	1d19      	adds	r1, r3, #4
 800f7ea:	6031      	str	r1, [r6, #0]
 800f7ec:	0606      	lsls	r6, r0, #24
 800f7ee:	d501      	bpl.n	800f7f4 <_printf_i+0xbc>
 800f7f0:	681d      	ldr	r5, [r3, #0]
 800f7f2:	e003      	b.n	800f7fc <_printf_i+0xc4>
 800f7f4:	0645      	lsls	r5, r0, #25
 800f7f6:	d5fb      	bpl.n	800f7f0 <_printf_i+0xb8>
 800f7f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f7fc:	2d00      	cmp	r5, #0
 800f7fe:	da03      	bge.n	800f808 <_printf_i+0xd0>
 800f800:	232d      	movs	r3, #45	@ 0x2d
 800f802:	426d      	negs	r5, r5
 800f804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f808:	4859      	ldr	r0, [pc, #356]	@ (800f970 <_printf_i+0x238>)
 800f80a:	230a      	movs	r3, #10
 800f80c:	e011      	b.n	800f832 <_printf_i+0xfa>
 800f80e:	6821      	ldr	r1, [r4, #0]
 800f810:	6833      	ldr	r3, [r6, #0]
 800f812:	0608      	lsls	r0, r1, #24
 800f814:	f853 5b04 	ldr.w	r5, [r3], #4
 800f818:	d402      	bmi.n	800f820 <_printf_i+0xe8>
 800f81a:	0649      	lsls	r1, r1, #25
 800f81c:	bf48      	it	mi
 800f81e:	b2ad      	uxthmi	r5, r5
 800f820:	2f6f      	cmp	r7, #111	@ 0x6f
 800f822:	6033      	str	r3, [r6, #0]
 800f824:	4852      	ldr	r0, [pc, #328]	@ (800f970 <_printf_i+0x238>)
 800f826:	bf14      	ite	ne
 800f828:	230a      	movne	r3, #10
 800f82a:	2308      	moveq	r3, #8
 800f82c:	2100      	movs	r1, #0
 800f82e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f832:	6866      	ldr	r6, [r4, #4]
 800f834:	2e00      	cmp	r6, #0
 800f836:	60a6      	str	r6, [r4, #8]
 800f838:	bfa2      	ittt	ge
 800f83a:	6821      	ldrge	r1, [r4, #0]
 800f83c:	f021 0104 	bicge.w	r1, r1, #4
 800f840:	6021      	strge	r1, [r4, #0]
 800f842:	b90d      	cbnz	r5, 800f848 <_printf_i+0x110>
 800f844:	2e00      	cmp	r6, #0
 800f846:	d04b      	beq.n	800f8e0 <_printf_i+0x1a8>
 800f848:	4616      	mov	r6, r2
 800f84a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f84e:	fb03 5711 	mls	r7, r3, r1, r5
 800f852:	5dc7      	ldrb	r7, [r0, r7]
 800f854:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f858:	462f      	mov	r7, r5
 800f85a:	460d      	mov	r5, r1
 800f85c:	42bb      	cmp	r3, r7
 800f85e:	d9f4      	bls.n	800f84a <_printf_i+0x112>
 800f860:	2b08      	cmp	r3, #8
 800f862:	d10b      	bne.n	800f87c <_printf_i+0x144>
 800f864:	6823      	ldr	r3, [r4, #0]
 800f866:	07df      	lsls	r7, r3, #31
 800f868:	d508      	bpl.n	800f87c <_printf_i+0x144>
 800f86a:	6923      	ldr	r3, [r4, #16]
 800f86c:	6861      	ldr	r1, [r4, #4]
 800f86e:	4299      	cmp	r1, r3
 800f870:	bfde      	ittt	le
 800f872:	2330      	movle	r3, #48	@ 0x30
 800f874:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f878:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f87c:	1b92      	subs	r2, r2, r6
 800f87e:	6122      	str	r2, [r4, #16]
 800f880:	464b      	mov	r3, r9
 800f882:	aa03      	add	r2, sp, #12
 800f884:	4621      	mov	r1, r4
 800f886:	4640      	mov	r0, r8
 800f888:	f8cd a000 	str.w	sl, [sp]
 800f88c:	f7ff fee2 	bl	800f654 <_printf_common>
 800f890:	3001      	adds	r0, #1
 800f892:	d14a      	bne.n	800f92a <_printf_i+0x1f2>
 800f894:	f04f 30ff 	mov.w	r0, #4294967295
 800f898:	b004      	add	sp, #16
 800f89a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f89e:	6823      	ldr	r3, [r4, #0]
 800f8a0:	f043 0320 	orr.w	r3, r3, #32
 800f8a4:	6023      	str	r3, [r4, #0]
 800f8a6:	2778      	movs	r7, #120	@ 0x78
 800f8a8:	4832      	ldr	r0, [pc, #200]	@ (800f974 <_printf_i+0x23c>)
 800f8aa:	6823      	ldr	r3, [r4, #0]
 800f8ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f8b0:	061f      	lsls	r7, r3, #24
 800f8b2:	6831      	ldr	r1, [r6, #0]
 800f8b4:	f851 5b04 	ldr.w	r5, [r1], #4
 800f8b8:	d402      	bmi.n	800f8c0 <_printf_i+0x188>
 800f8ba:	065f      	lsls	r7, r3, #25
 800f8bc:	bf48      	it	mi
 800f8be:	b2ad      	uxthmi	r5, r5
 800f8c0:	6031      	str	r1, [r6, #0]
 800f8c2:	07d9      	lsls	r1, r3, #31
 800f8c4:	bf44      	itt	mi
 800f8c6:	f043 0320 	orrmi.w	r3, r3, #32
 800f8ca:	6023      	strmi	r3, [r4, #0]
 800f8cc:	b11d      	cbz	r5, 800f8d6 <_printf_i+0x19e>
 800f8ce:	2310      	movs	r3, #16
 800f8d0:	e7ac      	b.n	800f82c <_printf_i+0xf4>
 800f8d2:	4827      	ldr	r0, [pc, #156]	@ (800f970 <_printf_i+0x238>)
 800f8d4:	e7e9      	b.n	800f8aa <_printf_i+0x172>
 800f8d6:	6823      	ldr	r3, [r4, #0]
 800f8d8:	f023 0320 	bic.w	r3, r3, #32
 800f8dc:	6023      	str	r3, [r4, #0]
 800f8de:	e7f6      	b.n	800f8ce <_printf_i+0x196>
 800f8e0:	4616      	mov	r6, r2
 800f8e2:	e7bd      	b.n	800f860 <_printf_i+0x128>
 800f8e4:	6833      	ldr	r3, [r6, #0]
 800f8e6:	6825      	ldr	r5, [r4, #0]
 800f8e8:	1d18      	adds	r0, r3, #4
 800f8ea:	6961      	ldr	r1, [r4, #20]
 800f8ec:	6030      	str	r0, [r6, #0]
 800f8ee:	062e      	lsls	r6, r5, #24
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	d501      	bpl.n	800f8f8 <_printf_i+0x1c0>
 800f8f4:	6019      	str	r1, [r3, #0]
 800f8f6:	e002      	b.n	800f8fe <_printf_i+0x1c6>
 800f8f8:	0668      	lsls	r0, r5, #25
 800f8fa:	d5fb      	bpl.n	800f8f4 <_printf_i+0x1bc>
 800f8fc:	8019      	strh	r1, [r3, #0]
 800f8fe:	2300      	movs	r3, #0
 800f900:	4616      	mov	r6, r2
 800f902:	6123      	str	r3, [r4, #16]
 800f904:	e7bc      	b.n	800f880 <_printf_i+0x148>
 800f906:	6833      	ldr	r3, [r6, #0]
 800f908:	2100      	movs	r1, #0
 800f90a:	1d1a      	adds	r2, r3, #4
 800f90c:	6032      	str	r2, [r6, #0]
 800f90e:	681e      	ldr	r6, [r3, #0]
 800f910:	6862      	ldr	r2, [r4, #4]
 800f912:	4630      	mov	r0, r6
 800f914:	f000 f85a 	bl	800f9cc <memchr>
 800f918:	b108      	cbz	r0, 800f91e <_printf_i+0x1e6>
 800f91a:	1b80      	subs	r0, r0, r6
 800f91c:	6060      	str	r0, [r4, #4]
 800f91e:	6863      	ldr	r3, [r4, #4]
 800f920:	6123      	str	r3, [r4, #16]
 800f922:	2300      	movs	r3, #0
 800f924:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f928:	e7aa      	b.n	800f880 <_printf_i+0x148>
 800f92a:	6923      	ldr	r3, [r4, #16]
 800f92c:	4632      	mov	r2, r6
 800f92e:	4649      	mov	r1, r9
 800f930:	4640      	mov	r0, r8
 800f932:	47d0      	blx	sl
 800f934:	3001      	adds	r0, #1
 800f936:	d0ad      	beq.n	800f894 <_printf_i+0x15c>
 800f938:	6823      	ldr	r3, [r4, #0]
 800f93a:	079b      	lsls	r3, r3, #30
 800f93c:	d413      	bmi.n	800f966 <_printf_i+0x22e>
 800f93e:	68e0      	ldr	r0, [r4, #12]
 800f940:	9b03      	ldr	r3, [sp, #12]
 800f942:	4298      	cmp	r0, r3
 800f944:	bfb8      	it	lt
 800f946:	4618      	movlt	r0, r3
 800f948:	e7a6      	b.n	800f898 <_printf_i+0x160>
 800f94a:	2301      	movs	r3, #1
 800f94c:	4632      	mov	r2, r6
 800f94e:	4649      	mov	r1, r9
 800f950:	4640      	mov	r0, r8
 800f952:	47d0      	blx	sl
 800f954:	3001      	adds	r0, #1
 800f956:	d09d      	beq.n	800f894 <_printf_i+0x15c>
 800f958:	3501      	adds	r5, #1
 800f95a:	68e3      	ldr	r3, [r4, #12]
 800f95c:	9903      	ldr	r1, [sp, #12]
 800f95e:	1a5b      	subs	r3, r3, r1
 800f960:	42ab      	cmp	r3, r5
 800f962:	dcf2      	bgt.n	800f94a <_printf_i+0x212>
 800f964:	e7eb      	b.n	800f93e <_printf_i+0x206>
 800f966:	2500      	movs	r5, #0
 800f968:	f104 0619 	add.w	r6, r4, #25
 800f96c:	e7f5      	b.n	800f95a <_printf_i+0x222>
 800f96e:	bf00      	nop
 800f970:	0800fb3d 	.word	0x0800fb3d
 800f974:	0800fb4e 	.word	0x0800fb4e

0800f978 <memmove>:
 800f978:	4288      	cmp	r0, r1
 800f97a:	b510      	push	{r4, lr}
 800f97c:	eb01 0402 	add.w	r4, r1, r2
 800f980:	d902      	bls.n	800f988 <memmove+0x10>
 800f982:	4284      	cmp	r4, r0
 800f984:	4623      	mov	r3, r4
 800f986:	d807      	bhi.n	800f998 <memmove+0x20>
 800f988:	1e43      	subs	r3, r0, #1
 800f98a:	42a1      	cmp	r1, r4
 800f98c:	d008      	beq.n	800f9a0 <memmove+0x28>
 800f98e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f992:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f996:	e7f8      	b.n	800f98a <memmove+0x12>
 800f998:	4402      	add	r2, r0
 800f99a:	4601      	mov	r1, r0
 800f99c:	428a      	cmp	r2, r1
 800f99e:	d100      	bne.n	800f9a2 <memmove+0x2a>
 800f9a0:	bd10      	pop	{r4, pc}
 800f9a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f9a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f9aa:	e7f7      	b.n	800f99c <memmove+0x24>

0800f9ac <_sbrk_r>:
 800f9ac:	b538      	push	{r3, r4, r5, lr}
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	4d05      	ldr	r5, [pc, #20]	@ (800f9c8 <_sbrk_r+0x1c>)
 800f9b2:	4604      	mov	r4, r0
 800f9b4:	4608      	mov	r0, r1
 800f9b6:	602b      	str	r3, [r5, #0]
 800f9b8:	f7f1 fc88 	bl	80012cc <_sbrk>
 800f9bc:	1c43      	adds	r3, r0, #1
 800f9be:	d102      	bne.n	800f9c6 <_sbrk_r+0x1a>
 800f9c0:	682b      	ldr	r3, [r5, #0]
 800f9c2:	b103      	cbz	r3, 800f9c6 <_sbrk_r+0x1a>
 800f9c4:	6023      	str	r3, [r4, #0]
 800f9c6:	bd38      	pop	{r3, r4, r5, pc}
 800f9c8:	2000126c 	.word	0x2000126c

0800f9cc <memchr>:
 800f9cc:	b2c9      	uxtb	r1, r1
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	4402      	add	r2, r0
 800f9d2:	b510      	push	{r4, lr}
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	d101      	bne.n	800f9de <memchr+0x12>
 800f9da:	2000      	movs	r0, #0
 800f9dc:	e003      	b.n	800f9e6 <memchr+0x1a>
 800f9de:	7804      	ldrb	r4, [r0, #0]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	428c      	cmp	r4, r1
 800f9e4:	d1f6      	bne.n	800f9d4 <memchr+0x8>
 800f9e6:	bd10      	pop	{r4, pc}

0800f9e8 <memcpy>:
 800f9e8:	440a      	add	r2, r1
 800f9ea:	1e43      	subs	r3, r0, #1
 800f9ec:	4291      	cmp	r1, r2
 800f9ee:	d100      	bne.n	800f9f2 <memcpy+0xa>
 800f9f0:	4770      	bx	lr
 800f9f2:	b510      	push	{r4, lr}
 800f9f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9f8:	4291      	cmp	r1, r2
 800f9fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9fe:	d1f9      	bne.n	800f9f4 <memcpy+0xc>
 800fa00:	bd10      	pop	{r4, pc}

0800fa02 <_realloc_r>:
 800fa02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa06:	4680      	mov	r8, r0
 800fa08:	4615      	mov	r5, r2
 800fa0a:	460c      	mov	r4, r1
 800fa0c:	b921      	cbnz	r1, 800fa18 <_realloc_r+0x16>
 800fa0e:	4611      	mov	r1, r2
 800fa10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa14:	f7ff bc3a 	b.w	800f28c <_malloc_r>
 800fa18:	b92a      	cbnz	r2, 800fa26 <_realloc_r+0x24>
 800fa1a:	f7ff fbcb 	bl	800f1b4 <_free_r>
 800fa1e:	2400      	movs	r4, #0
 800fa20:	4620      	mov	r0, r4
 800fa22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa26:	f000 f81a 	bl	800fa5e <_malloc_usable_size_r>
 800fa2a:	4285      	cmp	r5, r0
 800fa2c:	4606      	mov	r6, r0
 800fa2e:	d802      	bhi.n	800fa36 <_realloc_r+0x34>
 800fa30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fa34:	d8f4      	bhi.n	800fa20 <_realloc_r+0x1e>
 800fa36:	4629      	mov	r1, r5
 800fa38:	4640      	mov	r0, r8
 800fa3a:	f7ff fc27 	bl	800f28c <_malloc_r>
 800fa3e:	4607      	mov	r7, r0
 800fa40:	2800      	cmp	r0, #0
 800fa42:	d0ec      	beq.n	800fa1e <_realloc_r+0x1c>
 800fa44:	42b5      	cmp	r5, r6
 800fa46:	462a      	mov	r2, r5
 800fa48:	4621      	mov	r1, r4
 800fa4a:	bf28      	it	cs
 800fa4c:	4632      	movcs	r2, r6
 800fa4e:	f7ff ffcb 	bl	800f9e8 <memcpy>
 800fa52:	4621      	mov	r1, r4
 800fa54:	4640      	mov	r0, r8
 800fa56:	463c      	mov	r4, r7
 800fa58:	f7ff fbac 	bl	800f1b4 <_free_r>
 800fa5c:	e7e0      	b.n	800fa20 <_realloc_r+0x1e>

0800fa5e <_malloc_usable_size_r>:
 800fa5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa62:	1f18      	subs	r0, r3, #4
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	bfbc      	itt	lt
 800fa68:	580b      	ldrlt	r3, [r1, r0]
 800fa6a:	18c0      	addlt	r0, r0, r3
 800fa6c:	4770      	bx	lr
	...

0800fa70 <_init>:
 800fa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa72:	bf00      	nop
 800fa74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa76:	bc08      	pop	{r3}
 800fa78:	469e      	mov	lr, r3
 800fa7a:	4770      	bx	lr

0800fa7c <_fini>:
 800fa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa7e:	bf00      	nop
 800fa80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fa82:	bc08      	pop	{r3}
 800fa84:	469e      	mov	lr, r3
 800fa86:	4770      	bx	lr
