
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012c6c  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d18  08012eb8  08012eb8  00013eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013bd0  08013bd0  00015180  2**0
                  CONTENTS
  4 .ARM          00000008  08013bd0  08013bd0  00014bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013bd8  08013bd8  00015180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013bd8  08013bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013bdc  08013bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  08013be0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011274  20000180  08013d60  00015180  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200113f4  08013d60  000153f4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00015180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028093  00000000  00000000  000151b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057f9  00000000  00000000  0003d249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ee0  00000000  00000000  00042a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001793  00000000  00000000  00044928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003986b  00000000  00000000  000460bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f424  00000000  00000000  0007f926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014c24c  00000000  00000000  000aed4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001faf96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b90  00000000  00000000  001fafdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00203b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	08012ea0 	.word	0x08012ea0

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	08012ea0 	.word	0x08012ea0

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <GetCommandName>:

#include <stdio.h>
#include <stdint.h>

static const char* GetCommandName(uint8_t cmd)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
    switch (cmd)
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	3b01      	subs	r3, #1
 80005b2:	2b0e      	cmp	r3, #14
 80005b4:	d830      	bhi.n	8000618 <GetCommandName+0x74>
 80005b6:	a201      	add	r2, pc, #4	@ (adr r2, 80005bc <GetCommandName+0x18>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	080005f9 	.word	0x080005f9
 80005c0:	080005fd 	.word	0x080005fd
 80005c4:	08000601 	.word	0x08000601
 80005c8:	08000605 	.word	0x08000605
 80005cc:	08000609 	.word	0x08000609
 80005d0:	0800060d 	.word	0x0800060d
 80005d4:	08000611 	.word	0x08000611
 80005d8:	08000619 	.word	0x08000619
 80005dc:	08000619 	.word	0x08000619
 80005e0:	08000619 	.word	0x08000619
 80005e4:	08000619 	.word	0x08000619
 80005e8:	08000619 	.word	0x08000619
 80005ec:	08000619 	.word	0x08000619
 80005f0:	08000619 	.word	0x08000619
 80005f4:	08000615 	.word	0x08000615
    {
        case CMD_ENCRYPT:   	return "Encrypt Operation";
 80005f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <GetCommandName+0x84>)
 80005fa:	e00e      	b.n	800061a <GetCommandName+0x76>
        case CMD_DECRYPT:   	return "Decrypt Operation";
 80005fc:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <GetCommandName+0x88>)
 80005fe:	e00c      	b.n	800061a <GetCommandName+0x76>
        case CMD_HASH:      	return "Hash Operation";
 8000600:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <GetCommandName+0x8c>)
 8000602:	e00a      	b.n	800061a <GetCommandName+0x76>
        case CMD_RANDOM:   		return "RNG Operation";
 8000604:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <GetCommandName+0x90>)
 8000606:	e008      	b.n	800061a <GetCommandName+0x76>
        case CMD_KEY_STORE:   	return "Key Storage Operation";
 8000608:	4b0b      	ldr	r3, [pc, #44]	@ (8000638 <GetCommandName+0x94>)
 800060a:	e006      	b.n	800061a <GetCommandName+0x76>
        case CMD_KEY_RETRIEVE:  return "Key Retrieve Operation";
 800060c:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <GetCommandName+0x98>)
 800060e:	e004      	b.n	800061a <GetCommandName+0x76>
        case CMD_KEY_ERASE:   	return "Key Erase Operation";
 8000610:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <GetCommandName+0x9c>)
 8000612:	e002      	b.n	800061a <GetCommandName+0x76>
        case CMD_PING:   		return "Device Ping Operation";
 8000614:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <GetCommandName+0xa0>)
 8000616:	e000      	b.n	800061a <GetCommandName+0x76>
        default:            	return "Unknown Command";
 8000618:	4b0b      	ldr	r3, [pc, #44]	@ (8000648 <GetCommandName+0xa4>)
    }
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	08012eb8 	.word	0x08012eb8
 800062c:	08012ecc 	.word	0x08012ecc
 8000630:	08012ee0 	.word	0x08012ee0
 8000634:	08012ef0 	.word	0x08012ef0
 8000638:	08012f00 	.word	0x08012f00
 800063c:	08012f18 	.word	0x08012f18
 8000640:	08012f30 	.word	0x08012f30
 8000644:	08012f44 	.word	0x08012f44
 8000648:	08012f5c 	.word	0x08012f5c

0800064c <GetOptionName>:

static const char* GetOptionName(uint8_t option)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
    switch (option)
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	3b01      	subs	r3, #1
 800065a:	2b3a      	cmp	r3, #58	@ 0x3a
 800065c:	f200 80a4 	bhi.w	80007a8 <GetOptionName+0x15c>
 8000660:	a201      	add	r2, pc, #4	@ (adr r2, 8000668 <GetOptionName+0x1c>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	08000755 	.word	0x08000755
 800066c:	08000759 	.word	0x08000759
 8000670:	080007a9 	.word	0x080007a9
 8000674:	080007a9 	.word	0x080007a9
 8000678:	080007a9 	.word	0x080007a9
 800067c:	080007a9 	.word	0x080007a9
 8000680:	080007a9 	.word	0x080007a9
 8000684:	080007a9 	.word	0x080007a9
 8000688:	080007a9 	.word	0x080007a9
 800068c:	080007a9 	.word	0x080007a9
 8000690:	080007a9 	.word	0x080007a9
 8000694:	080007a9 	.word	0x080007a9
 8000698:	080007a9 	.word	0x080007a9
 800069c:	080007a9 	.word	0x080007a9
 80006a0:	080007a9 	.word	0x080007a9
 80006a4:	080007a9 	.word	0x080007a9
 80006a8:	0800075d 	.word	0x0800075d
 80006ac:	08000761 	.word	0x08000761
 80006b0:	080007a9 	.word	0x080007a9
 80006b4:	080007a9 	.word	0x080007a9
 80006b8:	080007a9 	.word	0x080007a9
 80006bc:	080007a9 	.word	0x080007a9
 80006c0:	080007a9 	.word	0x080007a9
 80006c4:	080007a9 	.word	0x080007a9
 80006c8:	080007a9 	.word	0x080007a9
 80006cc:	080007a9 	.word	0x080007a9
 80006d0:	080007a9 	.word	0x080007a9
 80006d4:	080007a9 	.word	0x080007a9
 80006d8:	080007a9 	.word	0x080007a9
 80006dc:	080007a9 	.word	0x080007a9
 80006e0:	080007a9 	.word	0x080007a9
 80006e4:	080007a9 	.word	0x080007a9
 80006e8:	08000765 	.word	0x08000765
 80006ec:	08000769 	.word	0x08000769
 80006f0:	0800076d 	.word	0x0800076d
 80006f4:	08000771 	.word	0x08000771
 80006f8:	08000775 	.word	0x08000775
 80006fc:	08000779 	.word	0x08000779
 8000700:	080007a9 	.word	0x080007a9
 8000704:	080007a9 	.word	0x080007a9
 8000708:	080007a9 	.word	0x080007a9
 800070c:	080007a9 	.word	0x080007a9
 8000710:	080007a9 	.word	0x080007a9
 8000714:	080007a9 	.word	0x080007a9
 8000718:	080007a9 	.word	0x080007a9
 800071c:	080007a9 	.word	0x080007a9
 8000720:	080007a9 	.word	0x080007a9
 8000724:	080007a9 	.word	0x080007a9
 8000728:	0800077d 	.word	0x0800077d
 800072c:	08000781 	.word	0x08000781
 8000730:	08000785 	.word	0x08000785
 8000734:	08000789 	.word	0x08000789
 8000738:	0800078d 	.word	0x0800078d
 800073c:	08000791 	.word	0x08000791
 8000740:	08000795 	.word	0x08000795
 8000744:	08000799 	.word	0x08000799
 8000748:	0800079d 	.word	0x0800079d
 800074c:	080007a1 	.word	0x080007a1
 8000750:	080007a5 	.word	0x080007a5
    {
    	case OPTION_ENCRYP_KEY128:	return "128-bit Encryption";
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <GetOptionName+0x16c>)
 8000756:	e028      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_ENCRYP_KEY256:	return "256-bit Encryption";
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <GetOptionName+0x170>)
 800075a:	e026      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_DECRYP_KEY128:	return "128-bit Decryption";
 800075c:	4b18      	ldr	r3, [pc, #96]	@ (80007c0 <GetOptionName+0x174>)
 800075e:	e024      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_DECRYP_KEY256:	return "256-bit Decryption";
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <GetOptionName+0x178>)
 8000762:	e022      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HASH_SHA224:	return "SHA224 Hashing Algorithm";
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <GetOptionName+0x17c>)
 8000766:	e020      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HASH_SHA256:	return "SHA256 Hashing Algorithm";
 8000768:	4b18      	ldr	r3, [pc, #96]	@ (80007cc <GetOptionName+0x180>)
 800076a:	e01e      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HASH_SHA384:	return "SHA384 Hashing Algorithm";
 800076c:	4b18      	ldr	r3, [pc, #96]	@ (80007d0 <GetOptionName+0x184>)
 800076e:	e01c      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HASH_SHA512:	return "SHA512 Hashing Algorithm";
 8000770:	4b18      	ldr	r3, [pc, #96]	@ (80007d4 <GetOptionName+0x188>)
 8000772:	e01a      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HMAC_SHA224:	return "SHA224 HMAC Algorithm";
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <GetOptionName+0x18c>)
 8000776:	e018      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_HMAC_SHA256:	return "SHA256 HMAC Algorithm";
 8000778:	4b18      	ldr	r3, [pc, #96]	@ (80007dc <GetOptionName+0x190>)
 800077a:	e016      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0004:		return "4-byte Random Number Generation";
 800077c:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <GetOptionName+0x194>)
 800077e:	e014      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0008:		return "8-byte Random Number Generation";
 8000780:	4b18      	ldr	r3, [pc, #96]	@ (80007e4 <GetOptionName+0x198>)
 8000782:	e012      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0016:		return "16-byte Random Number Generation";
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <GetOptionName+0x19c>)
 8000786:	e010      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0032:		return "32-byte Random Number Generation";
 8000788:	4b18      	ldr	r3, [pc, #96]	@ (80007ec <GetOptionName+0x1a0>)
 800078a:	e00e      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0064:		return "64-byte Random Number Generation";
 800078c:	4b18      	ldr	r3, [pc, #96]	@ (80007f0 <GetOptionName+0x1a4>)
 800078e:	e00c      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0128:		return "128-byte Random Number Generation";
 8000790:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <GetOptionName+0x1a8>)
 8000792:	e00a      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0256:		return "256-byte Random Number Generation";
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <GetOptionName+0x1ac>)
 8000796:	e008      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_0512:		return "512-byte Random Number Generation";
 8000798:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <GetOptionName+0x1b0>)
 800079a:	e006      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_1024:		return "1024-byte Random Number Generation";
 800079c:	4b18      	ldr	r3, [pc, #96]	@ (8000800 <GetOptionName+0x1b4>)
 800079e:	e004      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_2048:		return "2048-byte Random Number Generation";
 80007a0:	4b18      	ldr	r3, [pc, #96]	@ (8000804 <GetOptionName+0x1b8>)
 80007a2:	e002      	b.n	80007aa <GetOptionName+0x15e>
		case OPTION_RNG_4096:		return "4096-byte Random Number Generation";
 80007a4:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <GetOptionName+0x1bc>)
 80007a6:	e000      	b.n	80007aa <GetOptionName+0x15e>
		default:					return "Unknown Command"; 	break;
 80007a8:	4b18      	ldr	r3, [pc, #96]	@ (800080c <GetOptionName+0x1c0>)
    }
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	370c      	adds	r7, #12
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	08012f6c 	.word	0x08012f6c
 80007bc:	08012f80 	.word	0x08012f80
 80007c0:	08012f94 	.word	0x08012f94
 80007c4:	08012fa8 	.word	0x08012fa8
 80007c8:	08012fbc 	.word	0x08012fbc
 80007cc:	08012fd8 	.word	0x08012fd8
 80007d0:	08012ff4 	.word	0x08012ff4
 80007d4:	08013010 	.word	0x08013010
 80007d8:	0801302c 	.word	0x0801302c
 80007dc:	08013044 	.word	0x08013044
 80007e0:	0801305c 	.word	0x0801305c
 80007e4:	0801307c 	.word	0x0801307c
 80007e8:	0801309c 	.word	0x0801309c
 80007ec:	080130c0 	.word	0x080130c0
 80007f0:	080130e4 	.word	0x080130e4
 80007f4:	08013108 	.word	0x08013108
 80007f8:	0801312c 	.word	0x0801312c
 80007fc:	08013150 	.word	0x08013150
 8000800:	08013174 	.word	0x08013174
 8000804:	08013198 	.word	0x08013198
 8000808:	080131bc 	.word	0x080131bc
 800080c:	08012f5c 	.word	0x08012f5c

08000810 <LogParsedPacket>:

static void LogParsedPacket(const ParsedPacket_t* packet)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b094      	sub	sp, #80	@ 0x50
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
    if (!packet)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d103      	bne.n	8000826 <LogParsedPacket+0x16>
    {
        log_error("ParsedPacket is NULL");
 800081e:	4841      	ldr	r0, [pc, #260]	@ (8000924 <LogParsedPacket+0x114>)
 8000820:	f000 fea8 	bl	8001574 <log_error>
        return;
 8000824:	e07b      	b.n	800091e <LogParsedPacket+0x10e>
    }

    log_debug("PARSED PACKET:");
 8000826:	4840      	ldr	r0, [pc, #256]	@ (8000928 <LogParsedPacket+0x118>)
 8000828:	f000 fe56 	bl	80014d8 <log_debug>
    log_debug("TXID       : %08X", packet->transactionID);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4619      	mov	r1, r3
 8000832:	483e      	ldr	r0, [pc, #248]	@ (800092c <LogParsedPacket+0x11c>)
 8000834:	f000 fe50 	bl	80014d8 <log_debug>
    log_debug("CMD        : %02X", GetCommandName(packet->cmd));
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	791b      	ldrb	r3, [r3, #4]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff feb1 	bl	80005a4 <GetCommandName>
 8000842:	4603      	mov	r3, r0
 8000844:	4619      	mov	r1, r3
 8000846:	483a      	ldr	r0, [pc, #232]	@ (8000930 <LogParsedPacket+0x120>)
 8000848:	f000 fe46 	bl	80014d8 <log_debug>
    log_debug("OPTION     : %02X", GetOptionName(packet->option));
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	795b      	ldrb	r3, [r3, #5]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fefb 	bl	800064c <GetOptionName>
 8000856:	4603      	mov	r3, r0
 8000858:	4619      	mov	r1, r3
 800085a:	4836      	ldr	r0, [pc, #216]	@ (8000934 <LogParsedPacket+0x124>)
 800085c:	f000 fe3c 	bl	80014d8 <log_debug>
    log_debug("INPUT SIZE : %04X", packet->inputSize);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	88db      	ldrh	r3, [r3, #6]
 8000864:	4619      	mov	r1, r3
 8000866:	4834      	ldr	r0, [pc, #208]	@ (8000938 <LogParsedPacket+0x128>)
 8000868:	f000 fe36 	bl	80014d8 <log_debug>

    const uint8_t* data = packet->inputData;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3308      	adds	r3, #8
 8000870:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->inputSize;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	88db      	ldrh	r3, [r3, #6]
 8000876:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000878:	2300      	movs	r3, #0
 800087a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800087e:	e049      	b.n	8000914 <LogParsedPacket+0x104>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000880:	2300      	movs	r3, #0
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	222d      	movs	r2, #45	@ 0x2d
 800088a:	2100      	movs	r1, #0
 800088c:	4618      	mov	r0, r3
 800088e:	f011 fb29 	bl	8011ee4 <memset>
        char* ptr = line;
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 8000898:	2300      	movs	r3, #0
 800089a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800089e:	e017      	b.n	80008d0 <LogParsedPacket+0xc0>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 80008a0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80008a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008a8:	4413      	add	r3, r2
 80008aa:	461a      	mov	r2, r3
 80008ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80008ae:	4413      	add	r3, r2
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4921      	ldr	r1, [pc, #132]	@ (800093c <LogParsedPacket+0x12c>)
 80008b6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80008b8:	f011 fa78 	bl	8011dac <siprintf>
 80008bc:	4603      	mov	r3, r0
 80008be:	461a      	mov	r2, r3
 80008c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008c2:	4413      	add	r3, r2
 80008c4:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80008c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008ca:	3301      	adds	r3, #1
 80008cc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80008d0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d807      	bhi.n	80008e8 <LogParsedPacket+0xd8>
 80008d8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80008dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80008e0:	441a      	add	r2, r3
 80008e2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dbdb      	blt.n	80008a0 <LogParsedPacket+0x90>
        }

        if (i == 0)
 80008e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d106      	bne.n	80008fe <LogParsedPacket+0xee>
        {
        	log_debug("INPUT DATA : %s", line);
 80008f0:	f107 030c 	add.w	r3, r7, #12
 80008f4:	4619      	mov	r1, r3
 80008f6:	4812      	ldr	r0, [pc, #72]	@ (8000940 <LogParsedPacket+0x130>)
 80008f8:	f000 fdee 	bl	80014d8 <log_debug>
 80008fc:	e005      	b.n	800090a <LogParsedPacket+0xfa>
        }
        else
        {
        	log_debug("             %s", line);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4619      	mov	r1, r3
 8000904:	480f      	ldr	r0, [pc, #60]	@ (8000944 <LogParsedPacket+0x134>)
 8000906:	f000 fde7 	bl	80014d8 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 800090a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800090e:	3310      	adds	r3, #16
 8000910:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000914:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000918:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800091a:	429a      	cmp	r2, r3
 800091c:	d3b0      	bcc.n	8000880 <LogParsedPacket+0x70>
        }
    }
}
 800091e:	3750      	adds	r7, #80	@ 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	080131e0 	.word	0x080131e0
 8000928:	080131f8 	.word	0x080131f8
 800092c:	08013208 	.word	0x08013208
 8000930:	0801321c 	.word	0x0801321c
 8000934:	08013230 	.word	0x08013230
 8000938:	08013244 	.word	0x08013244
 800093c:	08013258 	.word	0x08013258
 8000940:	08013260 	.word	0x08013260
 8000944:	08013270 	.word	0x08013270

08000948 <LogResponsePacket>:

static void LogResponsePacket(const ResponsePacket_t* packet)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b094      	sub	sp, #80	@ 0x50
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    if (!packet)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <LogResponsePacket+0x16>
    {
        log_error("ResponsePacket is NULL");
 8000956:	483b      	ldr	r0, [pc, #236]	@ (8000a44 <LogResponsePacket+0xfc>)
 8000958:	f000 fe0c 	bl	8001574 <log_error>
        return;
 800095c:	e06f      	b.n	8000a3e <LogResponsePacket+0xf6>
    }

    log_debug("RESPONSE PACKET");
 800095e:	483a      	ldr	r0, [pc, #232]	@ (8000a48 <LogResponsePacket+0x100>)
 8000960:	f000 fdba 	bl	80014d8 <log_debug>
    log_debug("TXID        : %08X", packet->transactionID);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4619      	mov	r1, r3
 800096a:	4838      	ldr	r0, [pc, #224]	@ (8000a4c <LogResponsePacket+0x104>)
 800096c:	f000 fdb4 	bl	80014d8 <log_debug>
    log_debug("OUTPUT SIZE : %04X", packet->outputSize);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	889b      	ldrh	r3, [r3, #4]
 8000974:	4619      	mov	r1, r3
 8000976:	4836      	ldr	r0, [pc, #216]	@ (8000a50 <LogResponsePacket+0x108>)
 8000978:	f000 fdae 	bl	80014d8 <log_debug>
    log_debug("EOD FLAG    : %08X", packet->out_eod_flag);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	4619      	mov	r1, r3
 8000986:	4833      	ldr	r0, [pc, #204]	@ (8000a54 <LogResponsePacket+0x10c>)
 8000988:	f000 fda6 	bl	80014d8 <log_debug>

    const uint8_t* data = packet->outputData;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3306      	adds	r3, #6
 8000990:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->outputSize;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	889b      	ldrh	r3, [r3, #4]
 8000996:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000998:	2300      	movs	r3, #0
 800099a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800099e:	e049      	b.n	8000a34 <LogResponsePacket+0xec>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	f107 0310 	add.w	r3, r7, #16
 80009a8:	222d      	movs	r2, #45	@ 0x2d
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f011 fa99 	bl	8011ee4 <memset>
        char* ptr = line;
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80009be:	e017      	b.n	80009f0 <LogResponsePacket+0xa8>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 80009c0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80009c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009c8:	4413      	add	r3, r2
 80009ca:	461a      	mov	r2, r3
 80009cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80009ce:	4413      	add	r3, r2
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	4920      	ldr	r1, [pc, #128]	@ (8000a58 <LogResponsePacket+0x110>)
 80009d6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80009d8:	f011 f9e8 	bl	8011dac <siprintf>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80009e2:	4413      	add	r3, r2
 80009e4:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 80009e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009ea:	3301      	adds	r3, #1
 80009ec:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80009f0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d807      	bhi.n	8000a08 <LogResponsePacket+0xc0>
 80009f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80009fc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000a00:	441a      	add	r2, r3
 8000a02:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbdb      	blt.n	80009c0 <LogResponsePacket+0x78>
        }

        if (i == 0)
 8000a08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d106      	bne.n	8000a1e <LogResponsePacket+0xd6>
            log_debug("OUTPUT DATA : %s", line);
 8000a10:	f107 030c 	add.w	r3, r7, #12
 8000a14:	4619      	mov	r1, r3
 8000a16:	4811      	ldr	r0, [pc, #68]	@ (8000a5c <LogResponsePacket+0x114>)
 8000a18:	f000 fd5e 	bl	80014d8 <log_debug>
 8000a1c:	e005      	b.n	8000a2a <LogResponsePacket+0xe2>
        else
            log_debug("              %s", line);
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4619      	mov	r1, r3
 8000a24:	480e      	ldr	r0, [pc, #56]	@ (8000a60 <LogResponsePacket+0x118>)
 8000a26:	f000 fd57 	bl	80014d8 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 8000a2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000a2e:	3310      	adds	r3, #16
 8000a30:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000a34:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000a38:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d3b0      	bcc.n	80009a0 <LogResponsePacket+0x58>
    }
}
 8000a3e:	3750      	adds	r7, #80	@ 0x50
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	08013280 	.word	0x08013280
 8000a48:	08013298 	.word	0x08013298
 8000a4c:	080132a8 	.word	0x080132a8
 8000a50:	080132bc 	.word	0x080132bc
 8000a54:	080132d0 	.word	0x080132d0
 8000a58:	08013258 	.word	0x08013258
 8000a5c:	080132e4 	.word	0x080132e4
 8000a60:	080132f8 	.word	0x080132f8

08000a64 <LogTransmitBuffer>:

static void LogTransmitBuffer(const uint8_t* usb_tx_buffer, uint32_t usb_tx_index)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b092      	sub	sp, #72	@ 0x48
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
    if (!usb_tx_buffer || usb_tx_index == 0)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <LogTransmitBuffer+0x16>
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d103      	bne.n	8000a82 <LogTransmitBuffer+0x1e>
    {
        log_debug("USB TX buffer is empty or NULL.");
 8000a7a:	4826      	ldr	r0, [pc, #152]	@ (8000b14 <LogTransmitBuffer+0xb0>)
 8000a7c:	f000 fd2c 	bl	80014d8 <log_debug>
        return;
 8000a80:	e045      	b.n	8000b0e <LogTransmitBuffer+0xaa>
    }


    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000a82:	2300      	movs	r3, #0
 8000a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8000a86:	e03e      	b.n	8000b06 <LogTransmitBuffer+0xa2>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	222d      	movs	r2, #45	@ 0x2d
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f011 fa25 	bl	8011ee4 <memset>
        char* ptr = line;
 8000a9a:	f107 0308 	add.w	r3, r7, #8
 8000a9e:	643b      	str	r3, [r7, #64]	@ 0x40

        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000aa4:	e012      	b.n	8000acc <LogTransmitBuffer+0x68>
        {
            ptr += sprintf(ptr, "%02X ", usb_tx_buffer[i + j]);
 8000aa6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000aa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000aaa:	4413      	add	r3, r2
 8000aac:	687a      	ldr	r2, [r7, #4]
 8000aae:	4413      	add	r3, r2
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	4918      	ldr	r1, [pc, #96]	@ (8000b18 <LogTransmitBuffer+0xb4>)
 8000ab6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000ab8:	f011 f978 	bl	8011dac <siprintf>
 8000abc:	4603      	mov	r3, r0
 8000abe:	461a      	mov	r2, r3
 8000ac0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000ac2:	4413      	add	r3, r2
 8000ac4:	643b      	str	r3, [r7, #64]	@ 0x40
        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ac8:	3301      	adds	r3, #1
 8000aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ace:	2b0f      	cmp	r3, #15
 8000ad0:	d805      	bhi.n	8000ade <LogTransmitBuffer+0x7a>
 8000ad2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ad6:	4413      	add	r3, r2
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d8e3      	bhi.n	8000aa6 <LogTransmitBuffer+0x42>
        }

        if (i == 0)
 8000ade:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d107      	bne.n	8000af4 <LogTransmitBuffer+0x90>
            log_debug("USB Tx [%lu bytes]: %s", usb_tx_index, line);
 8000ae4:	f107 0308 	add.w	r3, r7, #8
 8000ae8:	461a      	mov	r2, r3
 8000aea:	6839      	ldr	r1, [r7, #0]
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <LogTransmitBuffer+0xb8>)
 8000aee:	f000 fcf3 	bl	80014d8 <log_debug>
 8000af2:	e005      	b.n	8000b00 <LogTransmitBuffer+0x9c>
        else
            log_debug("                 %s", line);  // 17-character indent to align with line 1
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	4619      	mov	r1, r3
 8000afa:	4809      	ldr	r0, [pc, #36]	@ (8000b20 <LogTransmitBuffer+0xbc>)
 8000afc:	f000 fcec 	bl	80014d8 <log_debug>
    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b02:	3310      	adds	r3, #16
 8000b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	429a      	cmp	r2, r3
 8000b0c:	d3bc      	bcc.n	8000a88 <LogTransmitBuffer+0x24>
    }
}
 8000b0e:	3748      	adds	r7, #72	@ 0x48
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	0801330c 	.word	0x0801330c
 8000b18:	08013258 	.word	0x08013258
 8000b1c:	0801332c 	.word	0x0801332c
 8000b20:	08013344 	.word	0x08013344

08000b24 <HSMManager_Init>:

void HSMManager_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

  log_init(LOG_LEVEL_DEBUG);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f000 fc79 	bl	8001420 <log_init>
  log_info("HSM Initialized.");
 8000b2e:	4834      	ldr	r0, [pc, #208]	@ (8000c00 <HSMManager_Init+0xdc>)
 8000b30:	f000 fcec 	bl	800150c <log_info>
  HAL_Delay(1000);
 8000b34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b38:	f002 fa4a 	bl	8002fd0 <HAL_Delay>
  log_info("Turning LED ON.");
 8000b3c:	4831      	ldr	r0, [pc, #196]	@ (8000c04 <HSMManager_Init+0xe0>)
 8000b3e:	f000 fce5 	bl	800150c <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f001 ffe2 	bl	8002b0c <BSP_LED_Toggle>
 8000b48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b4c:	f002 fa40 	bl	8002fd0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b50:	2002      	movs	r0, #2
 8000b52:	f001 ffdb 	bl	8002b0c <BSP_LED_Toggle>
 8000b56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b5a:	f002 fa39 	bl	8002fd0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f001 ffd4 	bl	8002b0c <BSP_LED_Toggle>
 8000b64:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b68:	f002 fa32 	bl	8002fd0 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000b6c:	4826      	ldr	r0, [pc, #152]	@ (8000c08 <HSMManager_Init+0xe4>)
 8000b6e:	f000 fccd 	bl	800150c <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f001 ffca 	bl	8002b0c <BSP_LED_Toggle>
 8000b78:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b7c:	f002 fa28 	bl	8002fd0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000b80:	2002      	movs	r0, #2
 8000b82:	f001 ffc3 	bl	8002b0c <BSP_LED_Toggle>
 8000b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b8a:	f002 fa21 	bl	8002fd0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f001 ffbc 	bl	8002b0c <BSP_LED_Toggle>
 8000b94:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b98:	f002 fa1a 	bl	8002fd0 <HAL_Delay>
  log_info("Turning LED ON.");
 8000b9c:	4819      	ldr	r0, [pc, #100]	@ (8000c04 <HSMManager_Init+0xe0>)
 8000b9e:	f000 fcb5 	bl	800150c <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f001 ffb2 	bl	8002b0c <BSP_LED_Toggle>
 8000ba8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bac:	f002 fa10 	bl	8002fd0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000bb0:	2002      	movs	r0, #2
 8000bb2:	f001 ffab 	bl	8002b0c <BSP_LED_Toggle>
 8000bb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bba:	f002 fa09 	bl	8002fd0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f001 ffa4 	bl	8002b0c <BSP_LED_Toggle>
 8000bc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc8:	f002 fa02 	bl	8002fd0 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000bcc:	480e      	ldr	r0, [pc, #56]	@ (8000c08 <HSMManager_Init+0xe4>)
 8000bce:	f000 fc9d 	bl	800150c <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000bd2:	2000      	movs	r0, #0
 8000bd4:	f001 ff9a 	bl	8002b0c <BSP_LED_Toggle>
 8000bd8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bdc:	f002 f9f8 	bl	8002fd0 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000be0:	2002      	movs	r0, #2
 8000be2:	f001 ff93 	bl	8002b0c <BSP_LED_Toggle>
 8000be6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bea:	f002 f9f1 	bl	8002fd0 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f001 ff8c 	bl	8002b0c <BSP_LED_Toggle>
 8000bf4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bf8:	f002 f9ea 	bl	8002fd0 <HAL_Delay>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	08013358 	.word	0x08013358
 8000c04:	0801336c 	.word	0x0801336c
 8000c08:	0801337c 	.word	0x0801337c

08000c0c <HSMManager_ProcessCommand>:


OperationStatus_t HSMManager_ProcessCommand(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	f5ad 3d90 	sub.w	sp, sp, #73728	@ 0x12000
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
	 if (usb_rx_complete)
 8000c16:	4b43      	ldr	r3, [pc, #268]	@ (8000d24 <HSMManager_ProcessCommand+0x118>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d079      	beq.n	8000d14 <HSMManager_ProcessCommand+0x108>
	 {
		 ParsedPacket_t request;
		 ResponsePacket_t response;
		 uint8_t usb_tx_buffer[MAX_USB_DATA_SIZE];
		 uint16_t usb_tx_index;
		 ParseStatus_t status = PacketParser_Parse(usb_rx_buffer, usb_rx_index, &request);
 8000c20:	4b41      	ldr	r3, [pc, #260]	@ (8000d28 <HSMManager_ProcessCommand+0x11c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	b299      	uxth	r1, r3
 8000c26:	f107 0318 	add.w	r3, r7, #24
 8000c2a:	3b18      	subs	r3, #24
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	483f      	ldr	r0, [pc, #252]	@ (8000d2c <HSMManager_ProcessCommand+0x120>)
 8000c30:	f000 fb1c 	bl	800126c <PacketParser_Parse>
 8000c34:	4603      	mov	r3, r0
 8000c36:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000c3a:	f102 0217 	add.w	r2, r2, #23
 8000c3e:	7013      	strb	r3, [r2, #0]

		 if (status == PARSE_SUCCESS)
 8000c40:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000c44:	f103 0317 	add.w	r3, r3, #23
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d159      	bne.n	8000d02 <HSMManager_ProcessCommand+0xf6>
		 {
			 log_debug("Packet Parsed Successfully:");
 8000c4e:	4838      	ldr	r0, [pc, #224]	@ (8000d30 <HSMManager_ProcessCommand+0x124>)
 8000c50:	f000 fc42 	bl	80014d8 <log_debug>
			 LogParsedPacket(&request);
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	3b18      	subs	r3, #24
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fdd8 	bl	8000810 <LogParsedPacket>
			 OperationDispatcher_Dispatch(&request, &response);
 8000c60:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8000c64:	f102 0218 	add.w	r2, r2, #24
 8000c68:	3a10      	subs	r2, #16
 8000c6a:	f107 0318 	add.w	r3, r7, #24
 8000c6e:	3b18      	subs	r3, #24
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f860 	bl	8000d38 <OperationDispatcher_Dispatch>
			 LogResponsePacket(&response);
 8000c78:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c7c:	f103 0318 	add.w	r3, r3, #24
 8000c80:	3b10      	subs	r3, #16
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fe60 	bl	8000948 <LogResponsePacket>
			 usb_tx_index = response.outputSize + 10;
 8000c88:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000c8c:	f103 0318 	add.w	r3, r3, #24
 8000c90:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000c94:	330a      	adds	r3, #10
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000c9c:	f102 0214 	add.w	r2, r2, #20
 8000ca0:	8013      	strh	r3, [r2, #0]
			 PacketBuilder_Build(&response, usb_tx_buffer, &usb_tx_index);
 8000ca2:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000ca6:	f102 0214 	add.w	r2, r2, #20
 8000caa:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8000cae:	f101 0118 	add.w	r1, r1, #24
 8000cb2:	3904      	subs	r1, #4
 8000cb4:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000cb8:	f103 0318 	add.w	r3, r3, #24
 8000cbc:	3b10      	subs	r3, #16
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fa24 	bl	800110c <PacketBuilder_Build>
			 LogTransmitBuffer(usb_tx_buffer, usb_tx_index);
 8000cc4:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000cc8:	f103 0314 	add.w	r3, r3, #20
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000cd4:	f103 0318 	add.w	r3, r3, #24
 8000cd8:	3b04      	subs	r3, #4
 8000cda:	4611      	mov	r1, r2
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fec1 	bl	8000a64 <LogTransmitBuffer>
			 USB_Transmit(usb_tx_buffer, usb_tx_index);
 8000ce2:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000ce6:	f103 0314 	add.w	r3, r3, #20
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000cf2:	f103 0318 	add.w	r3, r3, #24
 8000cf6:	3b04      	subs	r3, #4
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f00e ffb4 	bl	800fc68 <USB_Transmit>
 8000d00:	e008      	b.n	8000d14 <HSMManager_ProcessCommand+0x108>
		 }
		 else
		 {
			 log_error("Parsing failed with status code: %d", status);
 8000d02:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000d06:	f103 0317 	add.w	r3, r3, #23
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <HSMManager_ProcessCommand+0x128>)
 8000d10:	f000 fc30 	bl	8001574 <log_error>
		 }
	 }
	 return 0;
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	f507 3790 	add.w	r7, r7, #73728	@ 0x12000
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20010f80 	.word	0x20010f80
 8000d28:	20010f7c 	.word	0x20010f7c
 8000d2c:	20000f7c 	.word	0x20000f7c
 8000d30:	08013390 	.word	0x08013390
 8000d34:	080133ac 	.word	0x080133ac

08000d38 <OperationDispatcher_Dispatch>:
#include "constants.h"
#include "types.h"
#include "Logger.h"

OperationStatus_t OperationDispatcher_Dispatch(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
    log_info("Dispatching Command.");
 8000d42:	4834      	ldr	r0, [pc, #208]	@ (8000e14 <OperationDispatcher_Dispatch+0xdc>)
 8000d44:	f000 fbe2 	bl	800150c <log_info>

    switch (request->cmd)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	791b      	ldrb	r3, [r3, #4]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	2b0e      	cmp	r3, #14
 8000d50:	d855      	bhi.n	8000dfe <OperationDispatcher_Dispatch+0xc6>
 8000d52:	a201      	add	r2, pc, #4	@ (adr r2, 8000d58 <OperationDispatcher_Dispatch+0x20>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d95 	.word	0x08000d95
 8000d5c:	08000da5 	.word	0x08000da5
 8000d60:	08000db5 	.word	0x08000db5
 8000d64:	08000dcd 	.word	0x08000dcd
 8000d68:	08000ddf 	.word	0x08000ddf
 8000d6c:	08000ddf 	.word	0x08000ddf
 8000d70:	08000ddf 	.word	0x08000ddf
 8000d74:	08000dff 	.word	0x08000dff
 8000d78:	08000dff 	.word	0x08000dff
 8000d7c:	08000dff 	.word	0x08000dff
 8000d80:	08000dff 	.word	0x08000dff
 8000d84:	08000dff 	.word	0x08000dff
 8000d88:	08000dff 	.word	0x08000dff
 8000d8c:	08000dff 	.word	0x08000dff
 8000d90:	08000def 	.word	0x08000def
    {
        case CMD_ENCRYPT:
        	log_info("Calling Encryption Operation.");
 8000d94:	4820      	ldr	r0, [pc, #128]	@ (8000e18 <OperationDispatcher_Dispatch+0xe0>)
 8000d96:	f000 fbb9 	bl	800150c <log_info>
        	log_warn("Encryption Operation not supported");
 8000d9a:	4820      	ldr	r0, [pc, #128]	@ (8000e1c <OperationDispatcher_Dispatch+0xe4>)
 8000d9c:	f000 fbd0 	bl	8001540 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000da0:	230b      	movs	r3, #11
 8000da2:	e033      	b.n	8000e0c <OperationDispatcher_Dispatch+0xd4>

        case CMD_DECRYPT:
        	log_info("Calling Decryption Operation.");
 8000da4:	481e      	ldr	r0, [pc, #120]	@ (8000e20 <OperationDispatcher_Dispatch+0xe8>)
 8000da6:	f000 fbb1 	bl	800150c <log_info>
        	log_warn("Decryption Operation not supported");
 8000daa:	481e      	ldr	r0, [pc, #120]	@ (8000e24 <OperationDispatcher_Dispatch+0xec>)
 8000dac:	f000 fbc8 	bl	8001540 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000db0:	230b      	movs	r3, #11
 8000db2:	e02b      	b.n	8000e0c <OperationDispatcher_Dispatch+0xd4>

        case CMD_HASH:
        	log_info("Calling Hashing Operation.");
 8000db4:	481c      	ldr	r0, [pc, #112]	@ (8000e28 <OperationDispatcher_Dispatch+0xf0>)
 8000db6:	f000 fba9 	bl	800150c <log_info>
        	log_warn("Hashing Operation not supported");
 8000dba:	481c      	ldr	r0, [pc, #112]	@ (8000e2c <OperationDispatcher_Dispatch+0xf4>)
 8000dbc:	f000 fbc0 	bl	8001540 <log_warn>
            return HashingHandler_Handle(request, response);
 8000dc0:	6839      	ldr	r1, [r7, #0]
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f000 f842 	bl	8000e4c <HashingHandler_Handle>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	e01f      	b.n	8000e0c <OperationDispatcher_Dispatch+0xd4>

        case CMD_RANDOM:
        	log_info("Calling RNG Operation.");
 8000dcc:	4818      	ldr	r0, [pc, #96]	@ (8000e30 <OperationDispatcher_Dispatch+0xf8>)
 8000dce:	f000 fb9d 	bl	800150c <log_info>
            return RandomHandler_Handle(request, response);
 8000dd2:	6839      	ldr	r1, [r7, #0]
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f000 f93b 	bl	8001050 <RandomHandler_Handle>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	e016      	b.n	8000e0c <OperationDispatcher_Dispatch+0xd4>

        case CMD_KEY_STORE:
        case CMD_KEY_RETRIEVE:
        case CMD_KEY_ERASE:
        	log_info("Calling Key Management.");
 8000dde:	4815      	ldr	r0, [pc, #84]	@ (8000e34 <OperationDispatcher_Dispatch+0xfc>)
 8000de0:	f000 fb94 	bl	800150c <log_info>
        	log_warn("Key Management Operation not supported");
 8000de4:	4814      	ldr	r0, [pc, #80]	@ (8000e38 <OperationDispatcher_Dispatch+0x100>)
 8000de6:	f000 fbab 	bl	8001540 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000dea:	230b      	movs	r3, #11
 8000dec:	e00e      	b.n	8000e0c <OperationDispatcher_Dispatch+0xd4>

        case CMD_PING:
        	log_info("Calling Ping Operation.");
 8000dee:	4813      	ldr	r0, [pc, #76]	@ (8000e3c <OperationDispatcher_Dispatch+0x104>)
 8000df0:	f000 fb8c 	bl	800150c <log_info>
        	log_warn("Ping Operation not supported");
 8000df4:	4812      	ldr	r0, [pc, #72]	@ (8000e40 <OperationDispatcher_Dispatch+0x108>)
 8000df6:	f000 fba3 	bl	8001540 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000dfa:	230b      	movs	r3, #11
 8000dfc:	e006      	b.n	8000e0c <OperationDispatcher_Dispatch+0xd4>

        default:
            log_error("Invalid Command code received");
 8000dfe:	4811      	ldr	r0, [pc, #68]	@ (8000e44 <OperationDispatcher_Dispatch+0x10c>)
 8000e00:	f000 fbb8 	bl	8001574 <log_error>
            log_error("Returning Failure Status code");
 8000e04:	4810      	ldr	r0, [pc, #64]	@ (8000e48 <OperationDispatcher_Dispatch+0x110>)
 8000e06:	f000 fbb5 	bl	8001574 <log_error>
            return OPERATION_INVALID_CMD;
 8000e0a:	2301      	movs	r3, #1
    }
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	080133d0 	.word	0x080133d0
 8000e18:	080133e8 	.word	0x080133e8
 8000e1c:	08013408 	.word	0x08013408
 8000e20:	0801342c 	.word	0x0801342c
 8000e24:	0801344c 	.word	0x0801344c
 8000e28:	08013470 	.word	0x08013470
 8000e2c:	0801348c 	.word	0x0801348c
 8000e30:	080134ac 	.word	0x080134ac
 8000e34:	080134c4 	.word	0x080134c4
 8000e38:	080134dc 	.word	0x080134dc
 8000e3c:	08013504 	.word	0x08013504
 8000e40:	0801351c 	.word	0x0801351c
 8000e44:	0801353c 	.word	0x0801353c
 8000e48:	0801355c 	.word	0x0801355c

08000e4c <HashingHandler_Handle>:
#include "stm32h5xx_hal.h"

extern HASH_HandleTypeDef hhash;

OperationStatus_t HashingHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
	log_info("Handling Hashing operation.");
 8000e56:	4849      	ldr	r0, [pc, #292]	@ (8000f7c <HashingHandler_Handle+0x130>)
 8000e58:	f000 fb58 	bl	800150c <log_info>
	// Check if either Request or Response Packet is NULL
    if (!request )
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d101      	bne.n	8000e66 <HashingHandler_Handle+0x1a>
    {
        return OPERATION_INVALID_DATA;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e085      	b.n	8000f72 <HashingHandler_Handle+0x126>
    }
    uint32_t AlgorithmSelected;
    // Declare status as Negative for Early Exit Pattern
    OperationStatus_t status = OPERATION_INVALID_OPTION;
 8000e66:	2302      	movs	r3, #2
 8000e68:	72fb      	strb	r3, [r7, #11]
    // Declare a static byte array of 64 elements
    static uint8_t digest[64] = {0};
    // Check the Request Packet's option member
    switch (request->option)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	795b      	ldrb	r3, [r3, #5]
 8000e6e:	3b21      	subs	r3, #33	@ 0x21
 8000e70:	2b03      	cmp	r3, #3
 8000e72:	d833      	bhi.n	8000edc <HashingHandler_Handle+0x90>
 8000e74:	a201      	add	r2, pc, #4	@ (adr r2, 8000e7c <HashingHandler_Handle+0x30>)
 8000e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7a:	bf00      	nop
 8000e7c:	08000e8d 	.word	0x08000e8d
 8000e80:	08000ea1 	.word	0x08000ea1
 8000e84:	08000eb5 	.word	0x08000eb5
 8000e88:	08000ec9 	.word	0x08000ec9
    {
    	// SHA224 Hashing Algorithm Selected.
        case OPTION_HASH_SHA224:
        	log_info("SHA224 Hashing Algorithm Selected.");
 8000e8c:	483c      	ldr	r0, [pc, #240]	@ (8000f80 <HashingHandler_Handle+0x134>)
 8000e8e:	f000 fb3d 	bl	800150c <log_info>
        	response->outputSize = 28;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	221c      	movs	r2, #28
 8000e96:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA224;
 8000e98:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000e9c:	60fb      	str	r3, [r7, #12]
            break;
 8000e9e:	e01f      	b.n	8000ee0 <HashingHandler_Handle+0x94>

        // SHA256 Hashing Algorithm Selected.
        case OPTION_HASH_SHA256:
        	log_info("SHA256 Hashing Algorithm Selected.");
 8000ea0:	4838      	ldr	r0, [pc, #224]	@ (8000f84 <HashingHandler_Handle+0x138>)
 8000ea2:	f000 fb33 	bl	800150c <log_info>
        	response->outputSize = 32;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	2220      	movs	r2, #32
 8000eaa:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA256;
 8000eac:	f44f 23c0 	mov.w	r3, #393216	@ 0x60000
 8000eb0:	60fb      	str	r3, [r7, #12]
            break;
 8000eb2:	e015      	b.n	8000ee0 <HashingHandler_Handle+0x94>

        // SHA384 Hashing Algorithm Selected.
        case OPTION_HASH_SHA384:
        	log_info("SHA384 Hashing Algorithm Selected.");
 8000eb4:	4834      	ldr	r0, [pc, #208]	@ (8000f88 <HashingHandler_Handle+0x13c>)
 8000eb6:	f000 fb29 	bl	800150c <log_info>
        	response->outputSize = 48;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2230      	movs	r2, #48	@ 0x30
 8000ebe:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA384;
 8000ec0:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000ec4:	60fb      	str	r3, [r7, #12]
            break;
 8000ec6:	e00b      	b.n	8000ee0 <HashingHandler_Handle+0x94>

        // SHA512 Hashing Algorithm Selected.
        case OPTION_HASH_SHA512:
        	log_info("SHA512 Hashing Algorithm Selected.");
 8000ec8:	4830      	ldr	r0, [pc, #192]	@ (8000f8c <HashingHandler_Handle+0x140>)
 8000eca:	f000 fb1f 	bl	800150c <log_info>
        	response->outputSize = 64;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	2240      	movs	r2, #64	@ 0x40
 8000ed2:	809a      	strh	r2, [r3, #4]
        	AlgorithmSelected = HASH_ALGOSELECTION_SHA512;
 8000ed4:	f44f 13f0 	mov.w	r3, #1966080	@ 0x1e0000
 8000ed8:	60fb      	str	r3, [r7, #12]
            break;
 8000eda:	e001      	b.n	8000ee0 <HashingHandler_Handle+0x94>

        // Default switch case
        default:
            return OPERATION_INVALID_OPTION;
 8000edc:	2302      	movs	r3, #2
 8000ede:	e048      	b.n	8000f72 <HashingHandler_Handle+0x126>
    }

    status = OPERATION_SUCCESS;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	72fb      	strb	r3, [r7, #11]
    HAL_HASH_DeInit(&hhash);
 8000ee4:	482a      	ldr	r0, [pc, #168]	@ (8000f90 <HashingHandler_Handle+0x144>)
 8000ee6:	f002 fc6b 	bl	80037c0 <HAL_HASH_DeInit>

    log_info("De-Initialized HASH Peripheral.");
 8000eea:	482a      	ldr	r0, [pc, #168]	@ (8000f94 <HashingHandler_Handle+0x148>)
 8000eec:	f000 fb0e 	bl	800150c <log_info>

    hhash.Instance = HASH;
 8000ef0:	4b27      	ldr	r3, [pc, #156]	@ (8000f90 <HashingHandler_Handle+0x144>)
 8000ef2:	4a29      	ldr	r2, [pc, #164]	@ (8000f98 <HashingHandler_Handle+0x14c>)
 8000ef4:	601a      	str	r2, [r3, #0]
    hhash.Init.DataType = HASH_BYTE_SWAP;
 8000ef6:	4b26      	ldr	r3, [pc, #152]	@ (8000f90 <HashingHandler_Handle+0x144>)
 8000ef8:	2220      	movs	r2, #32
 8000efa:	605a      	str	r2, [r3, #4]
    hhash.Init.Algorithm = AlgorithmSelected;
 8000efc:	4a24      	ldr	r2, [pc, #144]	@ (8000f90 <HashingHandler_Handle+0x144>)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6113      	str	r3, [r2, #16]
    if (HAL_HASH_Init(&hhash) != HAL_OK)
 8000f02:	4823      	ldr	r0, [pc, #140]	@ (8000f90 <HashingHandler_Handle+0x144>)
 8000f04:	f002 fc24 	bl	8003750 <HAL_HASH_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HashingHandler_Handle+0xc6>
    {
    	status = OPERATION_FAILURE;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	72fb      	strb	r3, [r7, #11]
    }

    log_info("Re-initialized HASH Peripheral.");
 8000f12:	4822      	ldr	r0, [pc, #136]	@ (8000f9c <HashingHandler_Handle+0x150>)
 8000f14:	f000 fafa 	bl	800150c <log_info>

    if (HAL_HASH_Start_IT(&hhash, (uint8_t*)request->inputData, request->inputSize, digest) != HAL_OK)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f103 0108 	add.w	r1, r3, #8
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	88db      	ldrh	r3, [r3, #6]
 8000f22:	461a      	mov	r2, r3
 8000f24:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <HashingHandler_Handle+0x154>)
 8000f26:	481a      	ldr	r0, [pc, #104]	@ (8000f90 <HashingHandler_Handle+0x144>)
 8000f28:	f002 fc6d 	bl	8003806 <HAL_HASH_Start_IT>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HashingHandler_Handle+0xea>
    {
      status = OPERATION_HASH_FAIL;
 8000f32:	2309      	movs	r3, #9
 8000f34:	72fb      	strb	r3, [r7, #11]
    }
    while (HAL_HASH_GetState(&hhash) != HAL_HASH_STATE_READY);
 8000f36:	bf00      	nop
 8000f38:	4815      	ldr	r0, [pc, #84]	@ (8000f90 <HashingHandler_Handle+0x144>)
 8000f3a:	f002 fce5 	bl	8003908 <HAL_HASH_GetState>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d1f9      	bne.n	8000f38 <HashingHandler_Handle+0xec>

    log_info("Generated Hash Digest successfully.");
 8000f44:	4817      	ldr	r0, [pc, #92]	@ (8000fa4 <HashingHandler_Handle+0x158>)
 8000f46:	f000 fae1 	bl	800150c <log_info>
    // Check if operation status is Success
    if (status != OPERATION_SUCCESS)
 8000f4a:	7afb      	ldrb	r3, [r7, #11]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HashingHandler_Handle+0x108>
    {
        return status;
 8000f50:	7afb      	ldrb	r3, [r7, #11]
 8000f52:	e00e      	b.n	8000f72 <HashingHandler_Handle+0x126>
    }
    log_info("Copying Hash Digest into Response Packet.");
 8000f54:	4814      	ldr	r0, [pc, #80]	@ (8000fa8 <HashingHandler_Handle+0x15c>)
 8000f56:	f000 fad9 	bl	800150c <log_info>
    // Copy digest value to Response Packet structure
    memcpy(response->outputData, digest, response->outputSize);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	1d98      	adds	r0, r3, #6
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	889b      	ldrh	r3, [r3, #4]
 8000f62:	461a      	mov	r2, r3
 8000f64:	490e      	ldr	r1, [pc, #56]	@ (8000fa0 <HashingHandler_Handle+0x154>)
 8000f66:	f011 f838 	bl	8011fda <memcpy>
    log_info("Hash operation complete.");
 8000f6a:	4810      	ldr	r0, [pc, #64]	@ (8000fac <HashingHandler_Handle+0x160>)
 8000f6c:	f000 face 	bl	800150c <log_info>
    // Return Success
    return OPERATION_SUCCESS;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	0801357c 	.word	0x0801357c
 8000f80:	08013598 	.word	0x08013598
 8000f84:	080135bc 	.word	0x080135bc
 8000f88:	080135e0 	.word	0x080135e0
 8000f8c:	08013604 	.word	0x08013604
 8000f90:	200001ec 	.word	0x200001ec
 8000f94:	08013628 	.word	0x08013628
 8000f98:	420c0400 	.word	0x420c0400
 8000f9c:	08013648 	.word	0x08013648
 8000fa0:	2000019c 	.word	0x2000019c
 8000fa4:	08013668 	.word	0x08013668
 8000fa8:	0801368c 	.word	0x0801368c
 8000fac:	080136b8 	.word	0x080136b8

08000fb0 <CalculateByteSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculateByteSize(uint8_t option_member)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	3b31      	subs	r3, #49	@ 0x31
 8000fbe:	2b0a      	cmp	r3, #10
 8000fc0:	d83e      	bhi.n	8001040 <CalculateByteSize+0x90>
 8000fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8000fc8 <CalculateByteSize+0x18>)
 8000fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc8:	08000ff5 	.word	0x08000ff5
 8000fcc:	08000ffb 	.word	0x08000ffb
 8000fd0:	08001001 	.word	0x08001001
 8000fd4:	08001007 	.word	0x08001007
 8000fd8:	0800100d 	.word	0x0800100d
 8000fdc:	08001013 	.word	0x08001013
 8000fe0:	08001019 	.word	0x08001019
 8000fe4:	08001021 	.word	0x08001021
 8000fe8:	08001029 	.word	0x08001029
 8000fec:	08001031 	.word	0x08001031
 8000ff0:	08001039 	.word	0x08001039
	{
		case OPTION_RNG_0004: byteSize = 4; break;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	81fb      	strh	r3, [r7, #14]
 8000ff8:	e023      	b.n	8001042 <CalculateByteSize+0x92>
		case OPTION_RNG_0008: byteSize = 8; break;
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	81fb      	strh	r3, [r7, #14]
 8000ffe:	e020      	b.n	8001042 <CalculateByteSize+0x92>
		case OPTION_RNG_0016: byteSize = 16; break;
 8001000:	2310      	movs	r3, #16
 8001002:	81fb      	strh	r3, [r7, #14]
 8001004:	e01d      	b.n	8001042 <CalculateByteSize+0x92>
		case OPTION_RNG_0032: byteSize = 32; break;
 8001006:	2320      	movs	r3, #32
 8001008:	81fb      	strh	r3, [r7, #14]
 800100a:	e01a      	b.n	8001042 <CalculateByteSize+0x92>
		case OPTION_RNG_0064: byteSize = 64; break;
 800100c:	2340      	movs	r3, #64	@ 0x40
 800100e:	81fb      	strh	r3, [r7, #14]
 8001010:	e017      	b.n	8001042 <CalculateByteSize+0x92>
		case OPTION_RNG_0128: byteSize = 128; break;
 8001012:	2380      	movs	r3, #128	@ 0x80
 8001014:	81fb      	strh	r3, [r7, #14]
 8001016:	e014      	b.n	8001042 <CalculateByteSize+0x92>
		case OPTION_RNG_0256: byteSize = 256; break;
 8001018:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800101c:	81fb      	strh	r3, [r7, #14]
 800101e:	e010      	b.n	8001042 <CalculateByteSize+0x92>
		case OPTION_RNG_0512: byteSize = 512; break;
 8001020:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001024:	81fb      	strh	r3, [r7, #14]
 8001026:	e00c      	b.n	8001042 <CalculateByteSize+0x92>
		case OPTION_RNG_1024: byteSize = 1024; break;
 8001028:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800102c:	81fb      	strh	r3, [r7, #14]
 800102e:	e008      	b.n	8001042 <CalculateByteSize+0x92>
		case OPTION_RNG_2048: byteSize = 2048; break;
 8001030:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001034:	81fb      	strh	r3, [r7, #14]
 8001036:	e004      	b.n	8001042 <CalculateByteSize+0x92>
		case OPTION_RNG_4096: byteSize = 4096; break;
 8001038:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800103c:	81fb      	strh	r3, [r7, #14]
 800103e:	e000      	b.n	8001042 <CalculateByteSize+0x92>
		default: break;
 8001040:	bf00      	nop
	}
	return byteSize;
 8001042:	89fb      	ldrh	r3, [r7, #14]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <RandomHandler_Handle>:

OperationStatus_t RandomHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
    log_info("Handling Random Number Generation operation.");
 800105a:	4826      	ldr	r0, [pc, #152]	@ (80010f4 <RandomHandler_Handle+0xa4>)
 800105c:	f000 fa56 	bl	800150c <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	795b      	ldrb	r3, [r3, #5]
 8001064:	75bb      	strb	r3, [r7, #22]
    // Set the requested Random Number size
    uint16_t numBytes = CalculateByteSize(option_val);
 8001066:	7dbb      	ldrb	r3, [r7, #22]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ffa1 	bl	8000fb0 <CalculateByteSize>
 800106e:	4603      	mov	r3, r0
 8001070:	82bb      	strh	r3, [r7, #20]
    log_info("Generating %d bytes of Random Number", numBytes);
 8001072:	8abb      	ldrh	r3, [r7, #20]
 8001074:	4619      	mov	r1, r3
 8001076:	4820      	ldr	r0, [pc, #128]	@ (80010f8 <RandomHandler_Handle+0xa8>)
 8001078:	f000 fa48 	bl	800150c <log_info>
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 800107c:	8abb      	ldrh	r3, [r7, #20]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <RandomHandler_Handle+0x3a>
 8001082:	8abb      	ldrh	r3, [r7, #20]
 8001084:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001088:	d904      	bls.n	8001094 <RandomHandler_Handle+0x44>
    {
        log_error("Requested random byte count is invalid.");
 800108a:	481c      	ldr	r0, [pc, #112]	@ (80010fc <RandomHandler_Handle+0xac>)
 800108c:	f000 fa72 	bl	8001574 <log_error>
        return OPERATION_INVALID_OPTION;
 8001090:	2302      	movs	r3, #2
 8001092:	e02a      	b.n	80010ea <RandomHandler_Handle+0x9a>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8001094:	2300      	movs	r3, #0
 8001096:	75fb      	strb	r3, [r7, #23]
 8001098:	e019      	b.n	80010ce <RandomHandler_Handle+0x7e>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 800109a:	f107 030c 	add.w	r3, r7, #12
 800109e:	4619      	mov	r1, r3
 80010a0:	4817      	ldr	r0, [pc, #92]	@ (8001100 <RandomHandler_Handle+0xb0>)
 80010a2:	f00a fdfd 	bl	800bca0 <HAL_RNG_GenerateRandomNumber>
 80010a6:	4603      	mov	r3, r0
 80010a8:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 80010aa:	7cfb      	ldrb	r3, [r7, #19]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d004      	beq.n	80010ba <RandomHandler_Handle+0x6a>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 80010b0:	4814      	ldr	r0, [pc, #80]	@ (8001104 <RandomHandler_Handle+0xb4>)
 80010b2:	f000 fa5f 	bl	8001574 <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 80010b6:	2306      	movs	r3, #6
 80010b8:	e017      	b.n	80010ea <RandomHandler_Handle+0x9a>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	b2d1      	uxtb	r1, r2
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	460a      	mov	r2, r1
 80010c6:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	3301      	adds	r3, #1
 80010cc:	75fb      	strb	r3, [r7, #23]
 80010ce:	7dfb      	ldrb	r3, [r7, #23]
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	8abb      	ldrh	r3, [r7, #20]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	429a      	cmp	r2, r3
 80010da:	d3de      	bcc.n	800109a <RandomHandler_Handle+0x4a>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	8aba      	ldrh	r2, [r7, #20]
 80010e0:	809a      	strh	r2, [r3, #4]
    log_info("RNG Operation complete.");
 80010e2:	4809      	ldr	r0, [pc, #36]	@ (8001108 <RandomHandler_Handle+0xb8>)
 80010e4:	f000 fa12 	bl	800150c <log_info>
    return OPERATION_SUCCESS;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	080136d4 	.word	0x080136d4
 80010f8:	08013704 	.word	0x08013704
 80010fc:	0801372c 	.word	0x0801372c
 8001100:	20000280 	.word	0x20000280
 8001104:	08013754 	.word	0x08013754
 8001108:	0801378c 	.word	0x0801378c

0800110c <PacketBuilder_Build>:
#include "Logger.h"
#include <string.h>


BuildStatus_t PacketBuilder_Build(const ResponsePacket_t* responsePacket, uint8_t* outBuffer, uint16_t* outLength)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
	log_debug("Checking if Response Packet is NULL");
 8001118:	484e      	ldr	r0, [pc, #312]	@ (8001254 <PacketBuilder_Build+0x148>)
 800111a:	f000 f9dd 	bl	80014d8 <log_debug>
	// Check if Response, Output and Output Size are NULL
    if (!responsePacket || !outBuffer || !outLength)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <PacketBuilder_Build+0x24>
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <PacketBuilder_Build+0x24>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <PacketBuilder_Build+0x28>
    {
    	return BUILD_NULL_POINTER;
 8001130:	2301      	movs	r3, #1
 8001132:	e08b      	b.n	800124c <PacketBuilder_Build+0x140>
    }
    log_debug("Checking if Output Size is under limits");
 8001134:	4848      	ldr	r0, [pc, #288]	@ (8001258 <PacketBuilder_Build+0x14c>)
 8001136:	f000 f9cf 	bl	80014d8 <log_debug>
    // Check if Output Size is under the specified limits
    if (responsePacket->outputSize > MAX_OUTPUT_DATA_SIZE)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	889b      	ldrh	r3, [r3, #4]
 800113e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001142:	d901      	bls.n	8001148 <PacketBuilder_Build+0x3c>
    {
    	return BUILD_OUTPUT_TOO_LARGE;
 8001144:	2302      	movs	r3, #2
 8001146:	e081      	b.n	800124c <PacketBuilder_Build+0x140>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Transaction ID to Out Buffer");
 800114c:	4843      	ldr	r0, [pc, #268]	@ (800125c <PacketBuilder_Build+0x150>)
 800114e:	f000 f9c3 	bl	80014d8 <log_debug>
    // Fill Data Stream with the corresponding Transaction ID
    outBuffer[index++] = (responsePacket->transactionID >> 24) & 0xFF;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	0e1a      	lsrs	r2, r3, #24
 8001158:	8afb      	ldrh	r3, [r7, #22]
 800115a:	1c59      	adds	r1, r3, #1
 800115c:	82f9      	strh	r1, [r7, #22]
 800115e:	4619      	mov	r1, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	440b      	add	r3, r1
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 16) & 0xFF;
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	0c1a      	lsrs	r2, r3, #16
 800116e:	8afb      	ldrh	r3, [r7, #22]
 8001170:	1c59      	adds	r1, r3, #1
 8001172:	82f9      	strh	r1, [r7, #22]
 8001174:	4619      	mov	r1, r3
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	440b      	add	r3, r1
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 8)  & 0xFF;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	0a1a      	lsrs	r2, r3, #8
 8001184:	8afb      	ldrh	r3, [r7, #22]
 8001186:	1c59      	adds	r1, r3, #1
 8001188:	82f9      	strh	r1, [r7, #22]
 800118a:	4619      	mov	r1, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	440b      	add	r3, r1
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID)       & 0xFF;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	8afb      	ldrh	r3, [r7, #22]
 800119a:	1c59      	adds	r1, r3, #1
 800119c:	82f9      	strh	r1, [r7, #22]
 800119e:	4619      	mov	r1, r3
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	440b      	add	r3, r1
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	701a      	strb	r2, [r3, #0]
    log_debug("Adding Output Data Size to Out Buffer");
 80011a8:	482d      	ldr	r0, [pc, #180]	@ (8001260 <PacketBuilder_Build+0x154>)
 80011aa:	f000 f995 	bl	80014d8 <log_debug>
    // Fill Data Stream with the Output Data Size
    outBuffer[index++] = (responsePacket->outputSize >> 8) & 0xFF;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	889b      	ldrh	r3, [r3, #4]
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	8afb      	ldrh	r3, [r7, #22]
 80011b8:	1c59      	adds	r1, r3, #1
 80011ba:	82f9      	strh	r1, [r7, #22]
 80011bc:	4619      	mov	r1, r3
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	440b      	add	r3, r1
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->outputSize)      & 0xFF;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	889a      	ldrh	r2, [r3, #4]
 80011ca:	8afb      	ldrh	r3, [r7, #22]
 80011cc:	1c59      	adds	r1, r3, #1
 80011ce:	82f9      	strh	r1, [r7, #22]
 80011d0:	4619      	mov	r1, r3
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	440b      	add	r3, r1
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	701a      	strb	r2, [r3, #0]
    // Copy Output Data contents to Data Stream
    log_debug("Copying Output Data to Out Buffer");
 80011da:	4822      	ldr	r0, [pc, #136]	@ (8001264 <PacketBuilder_Build+0x158>)
 80011dc:	f000 f97c 	bl	80014d8 <log_debug>
    memcpy(&outBuffer[index], responsePacket->outputData, responsePacket->outputSize);
 80011e0:	8afb      	ldrh	r3, [r7, #22]
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	18d0      	adds	r0, r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1d99      	adds	r1, r3, #6
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	889b      	ldrh	r3, [r3, #4]
 80011ee:	461a      	mov	r2, r3
 80011f0:	f010 fef3 	bl	8011fda <memcpy>
    // Set Index to point to EOD Flag
    index += responsePacket->outputSize;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	889a      	ldrh	r2, [r3, #4]
 80011f8:	8afb      	ldrh	r3, [r7, #22]
 80011fa:	4413      	add	r3, r2
 80011fc:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Outward EOD Flag to Out Buffer");
 80011fe:	481a      	ldr	r0, [pc, #104]	@ (8001268 <PacketBuilder_Build+0x15c>)
 8001200:	f000 f96a 	bl	80014d8 <log_debug>
    // Add EOD Flag to Data Stream
    outBuffer[index++] = (OUT_EOD_FLAG >> 24) & 0xFF;
 8001204:	8afb      	ldrh	r3, [r7, #22]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	82fa      	strh	r2, [r7, #22]
 800120a:	461a      	mov	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4413      	add	r3, r2
 8001210:	22ca      	movs	r2, #202	@ 0xca
 8001212:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 16) & 0xFF;
 8001214:	8afb      	ldrh	r3, [r7, #22]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	82fa      	strh	r2, [r7, #22]
 800121a:	461a      	mov	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4413      	add	r3, r2
 8001220:	22fe      	movs	r2, #254	@ 0xfe
 8001222:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 8)  & 0xFF;
 8001224:	8afb      	ldrh	r3, [r7, #22]
 8001226:	1c5a      	adds	r2, r3, #1
 8001228:	82fa      	strh	r2, [r7, #22]
 800122a:	461a      	mov	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4413      	add	r3, r2
 8001230:	22ba      	movs	r2, #186	@ 0xba
 8001232:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG)       & 0xFF;
 8001234:	8afb      	ldrh	r3, [r7, #22]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	82fa      	strh	r2, [r7, #22]
 800123a:	461a      	mov	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4413      	add	r3, r2
 8001240:	22be      	movs	r2, #190	@ 0xbe
 8001242:	701a      	strb	r2, [r3, #0]
    // Set Index to point to End of Data Stream
    *outLength = index;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	8afa      	ldrh	r2, [r7, #22]
 8001248:	801a      	strh	r2, [r3, #0]
    // Return to indicate successful Packet Build
    return BUILD_SUCCESS;
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	080137a4 	.word	0x080137a4
 8001258:	080137c8 	.word	0x080137c8
 800125c:	080137f0 	.word	0x080137f0
 8001260:	08013814 	.word	0x08013814
 8001264:	0801383c 	.word	0x0801383c
 8001268:	08013860 	.word	0x08013860

0800126c <PacketParser_Parse>:
#include "constants.h"
#include "Logger.h"
#include <string.h>

ParseStatus_t PacketParser_Parse(const uint8_t* rawData, uint16_t rawLength, ParsedPacket_t* parsedPacket)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	460b      	mov	r3, r1
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	817b      	strh	r3, [r7, #10]
	log_debug("Checking if Data Stream or Packet Structure is NULL.");
 800127a:	485d      	ldr	r0, [pc, #372]	@ (80013f0 <PacketParser_Parse+0x184>)
 800127c:	f000 f92c 	bl	80014d8 <log_debug>
	// Check if Data Stream or Packet structure is NULL
	if (!rawData || !parsedPacket)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <PacketParser_Parse+0x20>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d104      	bne.n	8001296 <PacketParser_Parse+0x2a>
    {
		log_error("Data Stream or Packet Structure is NULL");
 800128c:	4859      	ldr	r0, [pc, #356]	@ (80013f4 <PacketParser_Parse+0x188>)
 800128e:	f000 f971 	bl	8001574 <log_error>
    	return PARSE_NULL_POINTER;
 8001292:	2303      	movs	r3, #3
 8001294:	e0a7      	b.n	80013e6 <PacketParser_Parse+0x17a>
    }
	log_debug("Checking if Data Stream contains less than 12 bytes.");
 8001296:	4858      	ldr	r0, [pc, #352]	@ (80013f8 <PacketParser_Parse+0x18c>)
 8001298:	f000 f91e 	bl	80014d8 <log_debug>
    // Check if Data Stream contains Data of valid length
    if (rawLength < 12)
 800129c:	897b      	ldrh	r3, [r7, #10]
 800129e:	2b0b      	cmp	r3, #11
 80012a0:	d804      	bhi.n	80012ac <PacketParser_Parse+0x40>
    {
    	log_error("Data stream contain less than 12 bytes");
 80012a2:	4856      	ldr	r0, [pc, #344]	@ (80013fc <PacketParser_Parse+0x190>)
 80012a4:	f000 f966 	bl	8001574 <log_error>
    	return PARSE_INVALID_LENGTH;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e09c      	b.n	80013e6 <PacketParser_Parse+0x17a>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up Transaction ID.");
 80012b0:	4853      	ldr	r0, [pc, #332]	@ (8001400 <PacketParser_Parse+0x194>)
 80012b2:	f000 f911 	bl	80014d8 <log_debug>
    // Retrieve Transaction ID from Data Stream
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80012b6:	8afb      	ldrh	r3, [r7, #22]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	061a      	lsls	r2, r3, #24
                                  (rawData[index + 1] << 16) |
 80012c0:	8afb      	ldrh	r3, [r7, #22]
 80012c2:	3301      	adds	r3, #1
 80012c4:	68f9      	ldr	r1, [r7, #12]
 80012c6:	440b      	add	r3, r1
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	041b      	lsls	r3, r3, #16
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80012cc:	431a      	orrs	r2, r3
                                  (rawData[index + 2] << 8)  |
 80012ce:	8afb      	ldrh	r3, [r7, #22]
 80012d0:	3302      	adds	r3, #2
 80012d2:	68f9      	ldr	r1, [r7, #12]
 80012d4:	440b      	add	r3, r1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	021b      	lsls	r3, r3, #8
                                  (rawData[index + 1] << 16) |
 80012da:	4313      	orrs	r3, r2
                                  (rawData[index + 3]);
 80012dc:	8afa      	ldrh	r2, [r7, #22]
 80012de:	3203      	adds	r2, #3
 80012e0:	68f9      	ldr	r1, [r7, #12]
 80012e2:	440a      	add	r2, r1
 80012e4:	7812      	ldrb	r2, [r2, #0]
                                  (rawData[index + 2] << 8)  |
 80012e6:	4313      	orrs	r3, r2
 80012e8:	461a      	mov	r2, r3
    parsedPacket->transactionID = (rawData[index]     << 24) |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
    // Set Index to point CMD byte
    index += 4;
 80012ee:	8afb      	ldrh	r3, [r7, #22]
 80012f0:	3304      	adds	r3, #4
 80012f2:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up CMD, OPTION and INPUT_SIZE fields.");
 80012f4:	4843      	ldr	r0, [pc, #268]	@ (8001404 <PacketParser_Parse+0x198>)
 80012f6:	f000 f8ef 	bl	80014d8 <log_debug>
    // Retrieve CMD byte from Data Stream
    parsedPacket->cmd = rawData[index++];
 80012fa:	8afb      	ldrh	r3, [r7, #22]
 80012fc:	1c5a      	adds	r2, r3, #1
 80012fe:	82fa      	strh	r2, [r7, #22]
 8001300:	461a      	mov	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4413      	add	r3, r2
 8001306:	781a      	ldrb	r2, [r3, #0]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	711a      	strb	r2, [r3, #4]
    // Retrieve OPTION byte from Data Stream
    parsedPacket->option = rawData[index++];
 800130c:	8afb      	ldrh	r3, [r7, #22]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	82fa      	strh	r2, [r7, #22]
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	715a      	strb	r2, [r3, #5]
    // Retrieve INPUT_SIZE half-word from Data Stream
    parsedPacket->inputSize = (rawData[index] << 8) | rawData[index + 1];
 800131e:	8afb      	ldrh	r3, [r7, #22]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b21a      	sxth	r2, r3
 800132a:	8afb      	ldrh	r3, [r7, #22]
 800132c:	3301      	adds	r3, #1
 800132e:	68f9      	ldr	r1, [r7, #12]
 8001330:	440b      	add	r3, r1
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b21b      	sxth	r3, r3
 8001336:	4313      	orrs	r3, r2
 8001338:	b21b      	sxth	r3, r3
 800133a:	b29a      	uxth	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	80da      	strh	r2, [r3, #6]
    // Set Index to point INPUT_DATA
    index += 2;
 8001340:	8afb      	ldrh	r3, [r7, #22]
 8001342:	3302      	adds	r3, #2
 8001344:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking if INPUT_SIZE is within the limits.");
 8001346:	4830      	ldr	r0, [pc, #192]	@ (8001408 <PacketParser_Parse+0x19c>)
 8001348:	f000 f8c6 	bl	80014d8 <log_debug>
    // Check if INPUT_SIZE is under the prescribed limit
    if (parsedPacket->inputSize > MAX_INPUT_DATA_SIZE || ((index - 1) + parsedPacket->inputSize + 4) > rawLength)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	88db      	ldrh	r3, [r3, #6]
 8001350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001354:	d808      	bhi.n	8001368 <PacketParser_Parse+0xfc>
 8001356:	8afb      	ldrh	r3, [r7, #22]
 8001358:	3b01      	subs	r3, #1
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	88d2      	ldrh	r2, [r2, #6]
 800135e:	4413      	add	r3, r2
 8001360:	1cda      	adds	r2, r3, #3
 8001362:	897b      	ldrh	r3, [r7, #10]
 8001364:	429a      	cmp	r2, r3
 8001366:	db04      	blt.n	8001372 <PacketParser_Parse+0x106>
    {
    	log_error("Input Data Size is too big.");
 8001368:	4828      	ldr	r0, [pc, #160]	@ (800140c <PacketParser_Parse+0x1a0>)
 800136a:	f000 f903 	bl	8001574 <log_error>
        return PARSE_INPUT_TOO_LARGE;
 800136e:	2304      	movs	r3, #4
 8001370:	e039      	b.n	80013e6 <PacketParser_Parse+0x17a>
    }
    log_debug("Copying INPUT DATA to Packet Structure.");
 8001372:	4827      	ldr	r0, [pc, #156]	@ (8001410 <PacketParser_Parse+0x1a4>)
 8001374:	f000 f8b0 	bl	80014d8 <log_debug>
    // Copy INPUT_DATA array from Data Stream to Packet structure
    memcpy(parsedPacket->inputData, &rawData[index], parsedPacket->inputSize);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f103 0008 	add.w	r0, r3, #8
 800137e:	8afb      	ldrh	r3, [r7, #22]
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	18d1      	adds	r1, r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	88db      	ldrh	r3, [r3, #6]
 8001388:	461a      	mov	r2, r3
 800138a:	f010 fe26 	bl	8011fda <memcpy>
    // Set Index to point EOD Flag
    index += parsedPacket->inputSize;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	88da      	ldrh	r2, [r3, #6]
 8001392:	8afb      	ldrh	r3, [r7, #22]
 8001394:	4413      	add	r3, r2
 8001396:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking the Received EOD word.");
 8001398:	481e      	ldr	r0, [pc, #120]	@ (8001414 <PacketParser_Parse+0x1a8>)
 800139a:	f000 f89d 	bl	80014d8 <log_debug>
    // Retrieve EOD Flag from Data Stream
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 800139e:	8afb      	ldrh	r3, [r7, #22]
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	061a      	lsls	r2, r3, #24
                           	   (rawData[index + 1] << 16) |
 80013a8:	8afb      	ldrh	r3, [r7, #22]
 80013aa:	3301      	adds	r3, #1
 80013ac:	68f9      	ldr	r1, [r7, #12]
 80013ae:	440b      	add	r3, r1
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	041b      	lsls	r3, r3, #16
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 80013b4:	431a      	orrs	r2, r3
							   (rawData[index + 2] << 8)  |
 80013b6:	8afb      	ldrh	r3, [r7, #22]
 80013b8:	3302      	adds	r3, #2
 80013ba:	68f9      	ldr	r1, [r7, #12]
 80013bc:	440b      	add	r3, r1
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	021b      	lsls	r3, r3, #8
                           	   (rawData[index + 1] << 16) |
 80013c2:	4313      	orrs	r3, r2
							   (rawData[index + 3]);
 80013c4:	8afa      	ldrh	r2, [r7, #22]
 80013c6:	3203      	adds	r2, #3
 80013c8:	68f9      	ldr	r1, [r7, #12]
 80013ca:	440a      	add	r2, r1
 80013cc:	7812      	ldrb	r2, [r2, #0]
							   (rawData[index + 2] << 8)  |
 80013ce:	4313      	orrs	r3, r2
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 80013d0:	613b      	str	r3, [r7, #16]
    // Check if EOD Flag is valid
    if (received_IN_EOD != IN_EOD_FLAG)
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4a10      	ldr	r2, [pc, #64]	@ (8001418 <PacketParser_Parse+0x1ac>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d004      	beq.n	80013e4 <PacketParser_Parse+0x178>
    {
    	log_error("Received EOD Flag is Invalid");
 80013da:	4810      	ldr	r0, [pc, #64]	@ (800141c <PacketParser_Parse+0x1b0>)
 80013dc:	f000 f8ca 	bl	8001574 <log_error>
        return PARSE_EOD_MISMATCH;
 80013e0:	2302      	movs	r3, #2
 80013e2:	e000      	b.n	80013e6 <PacketParser_Parse+0x17a>
    }
    // Return to Indicate successful parsing
    return PARSE_SUCCESS;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	08013888 	.word	0x08013888
 80013f4:	080138c0 	.word	0x080138c0
 80013f8:	080138e8 	.word	0x080138e8
 80013fc:	08013920 	.word	0x08013920
 8001400:	08013948 	.word	0x08013948
 8001404:	08013964 	.word	0x08013964
 8001408:	08013994 	.word	0x08013994
 800140c:	080139c4 	.word	0x080139c4
 8001410:	080139e0 	.word	0x080139e0
 8001414:	08013a08 	.word	0x08013a08
 8001418:	deadbeef 	.word	0xdeadbeef
 800141c:	08013a28 	.word	0x08013a28

08001420 <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 800142a:	4a04      	ldr	r2, [pc, #16]	@ (800143c <log_init+0x1c>)
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	7013      	strb	r3, [r2, #0]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000000 	.word	0x20000000

08001440 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b0c7      	sub	sp, #284	@ 0x11c
 8001444:	af02      	add	r7, sp, #8
 8001446:	4604      	mov	r4, r0
 8001448:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800144c:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8001450:	6001      	str	r1, [r0, #0]
 8001452:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001456:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800145a:	600a      	str	r2, [r1, #0]
 800145c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001460:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800146a:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800146e:	4622      	mov	r2, r4
 8001470:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <log_generic+0x8c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800147a:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 800147e:	7812      	ldrb	r2, [r2, #0]
 8001480:	429a      	cmp	r2, r3
 8001482:	d31e      	bcc.n	80014c2 <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001484:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001488:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800148c:	f107 0010 	add.w	r0, r7, #16
 8001490:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800149a:	f010 fd15 	bl	8011ec8 <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 800149e:	f107 0310 	add.w	r3, r7, #16
 80014a2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80014a6:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80014aa:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80014ae:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80014b2:	4807      	ldr	r0, [pc, #28]	@ (80014d0 <log_generic+0x90>)
 80014b4:	9000      	str	r0, [sp, #0]
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	6809      	ldr	r1, [r1, #0]
 80014ba:	4806      	ldr	r0, [pc, #24]	@ (80014d4 <log_generic+0x94>)
 80014bc:	f010 fc30 	bl	8011d20 <iprintf>
 80014c0:	e000      	b.n	80014c4 <log_generic+0x84>
        return;
 80014c2:	bf00      	nop
}
 80014c4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd90      	pop	{r4, r7, pc}
 80014cc:	20000000 	.word	0x20000000
 80014d0:	08013a58 	.word	0x08013a58
 80014d4:	08013a48 	.word	0x08013a48

080014d8 <log_debug>:

void log_debug(const char *fmt, ...)
{
 80014d8:	b40f      	push	{r0, r1, r2, r3}
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 80014e0:	f107 0314 	add.w	r3, r7, #20
 80014e4:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	4a05      	ldr	r2, [pc, #20]	@ (8001504 <log_debug+0x2c>)
 80014ee:	4906      	ldr	r1, [pc, #24]	@ (8001508 <log_debug+0x30>)
 80014f0:	2000      	movs	r0, #0
 80014f2:	f7ff ffa5 	bl	8001440 <log_generic>
    va_end(args);
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001500:	b004      	add	sp, #16
 8001502:	4770      	bx	lr
 8001504:	08013a60 	.word	0x08013a60
 8001508:	08013a68 	.word	0x08013a68

0800150c <log_info>:

void log_info(const char *fmt, ...)
{
 800150c:	b40f      	push	{r0, r1, r2, r3}
 800150e:	b580      	push	{r7, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4a05      	ldr	r2, [pc, #20]	@ (8001538 <log_info+0x2c>)
 8001522:	4906      	ldr	r1, [pc, #24]	@ (800153c <log_info+0x30>)
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff ff8b 	bl	8001440 <log_generic>
    va_end(args);
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001534:	b004      	add	sp, #16
 8001536:	4770      	bx	lr
 8001538:	08013a70 	.word	0x08013a70
 800153c:	08013a78 	.word	0x08013a78

08001540 <log_warn>:

void log_warn(const char *fmt, ...)
{
 8001540:	b40f      	push	{r0, r1, r2, r3}
 8001542:	b580      	push	{r7, lr}
 8001544:	b084      	sub	sp, #16
 8001546:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4a05      	ldr	r2, [pc, #20]	@ (800156c <log_warn+0x2c>)
 8001556:	4906      	ldr	r1, [pc, #24]	@ (8001570 <log_warn+0x30>)
 8001558:	2002      	movs	r0, #2
 800155a:	f7ff ff71 	bl	8001440 <log_generic>
    va_end(args);
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001568:	b004      	add	sp, #16
 800156a:	4770      	bx	lr
 800156c:	08013a80 	.word	0x08013a80
 8001570:	08013a88 	.word	0x08013a88

08001574 <log_error>:

void log_error(const char *fmt, ...)
{
 8001574:	b40f      	push	{r0, r1, r2, r3}
 8001576:	b580      	push	{r7, lr}
 8001578:	b084      	sub	sp, #16
 800157a:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 800157c:	f107 0314 	add.w	r3, r7, #20
 8001580:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <log_error+0x2c>)
 800158a:	4906      	ldr	r1, [pc, #24]	@ (80015a4 <log_error+0x30>)
 800158c:	2003      	movs	r0, #3
 800158e:	f7ff ff57 	bl	8001440 <log_generic>
    va_end(args);
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800159c:	b004      	add	sp, #16
 800159e:	4770      	bx	lr
 80015a0:	08013a90 	.word	0x08013a90
 80015a4:	08013a98 	.word	0x08013a98

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ac:	f001 fc52 	bl	8002e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b0:	f000 f84a 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b4:	f000 fb4c 	bl	8001c50 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80015b8:	f000 fae8 	bl	8001b8c <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80015bc:	f000 fa02 	bl	80019c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80015c0:	f000 f8d2 	bl	8001768 <MX_I2C1_Init>
  MX_SPI1_Init();
 80015c4:	f000 f9a8 	bl	8001918 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80015c8:	f000 fa94 	bl	8001af4 <MX_USART6_UART_Init>
  MX_RTC_Init();
 80015cc:	f000 f922 	bl	8001814 <MX_RTC_Init>
  MX_RNG_Init();
 80015d0:	f000 f90a 	bl	80017e8 <MX_RNG_Init>
  MX_HASH_Init();
 80015d4:	f000 f8ae 	bl	8001734 <MX_HASH_Init>
  MX_USART3_UART_Init();
 80015d8:	f000 fa40 	bl	8001a5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80015dc:	bf00      	nop
 80015de:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <main+0x98>)
 80015e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0fa      	beq.n	80015de <main+0x36>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80015e8:	2000      	movs	r0, #0
 80015ea:	f001 fa19 	bl	8002a20 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80015ee:	2001      	movs	r0, #1
 80015f0:	f001 fa16 	bl	8002a20 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80015f4:	2002      	movs	r0, #2
 80015f6:	f001 fa13 	bl	8002a20 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80015fa:	2101      	movs	r1, #1
 80015fc:	2000      	movs	r0, #0
 80015fe:	f001 faaf 	bl	8002b60 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001602:	4b10      	ldr	r3, [pc, #64]	@ (8001644 <main+0x9c>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001608:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800160a:	4b0e      	ldr	r3, [pc, #56]	@ (8001644 <main+0x9c>)
 800160c:	2200      	movs	r2, #0
 800160e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001610:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <main+0x9c>)
 8001612:	2200      	movs	r2, #0
 8001614:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001616:	4b0b      	ldr	r3, [pc, #44]	@ (8001644 <main+0x9c>)
 8001618:	2200      	movs	r2, #0
 800161a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800161c:	4b09      	ldr	r3, [pc, #36]	@ (8001644 <main+0x9c>)
 800161e:	2200      	movs	r2, #0
 8001620:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001622:	4908      	ldr	r1, [pc, #32]	@ (8001644 <main+0x9c>)
 8001624:	2000      	movs	r0, #0
 8001626:	f001 fb35 	bl	8002c94 <BSP_COM_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <main+0x8c>
  {
    Error_Handler();
 8001630:	f000 fc0a 	bl	8001e48 <Error_Handler>
  }

  /* Infinite loop */

  HSMManager_Init();
 8001634:	f7ff fa76 	bl	8000b24 <HSMManager_Init>

  HSMManager_ProcessCommand();
 8001638:	f7ff fae8 	bl	8000c0c <HSMManager_ProcessCommand>

  /* USER CODE BEGIN WHILE */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <main+0x94>
 8001640:	200007f4 	.word	0x200007f4
 8001644:	200001dc 	.word	0x200001dc

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b09c      	sub	sp, #112	@ 0x70
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0320 	add.w	r3, r7, #32
 8001652:	2250      	movs	r2, #80	@ 0x50
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f010 fc44 	bl	8011ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]
 800166c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800166e:	4b2f      	ldr	r3, [pc, #188]	@ (800172c <SystemClock_Config+0xe4>)
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	4a2e      	ldr	r2, [pc, #184]	@ (800172c <SystemClock_Config+0xe4>)
 8001674:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001678:	6113      	str	r3, [r2, #16]
 800167a:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <SystemClock_Config+0xe4>)
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001686:	bf00      	nop
 8001688:	4b28      	ldr	r3, [pc, #160]	@ (800172c <SystemClock_Config+0xe4>)
 800168a:	695b      	ldr	r3, [r3, #20]
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	2b08      	cmp	r3, #8
 8001692:	d1f9      	bne.n	8001688 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8001694:	2329      	movs	r3, #41	@ 0x29
 8001696:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001698:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800169c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800169e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80016a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80016a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016aa:	2302      	movs	r3, #2
 80016ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80016ae:	2303      	movs	r3, #3
 80016b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016b2:	2304      	movs	r3, #4
 80016b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80016b6:	23fa      	movs	r3, #250	@ 0xfa
 80016b8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80016ba:	2302      	movs	r3, #2
 80016bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016be:	2302      	movs	r3, #2
 80016c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016c2:	2302      	movs	r3, #2
 80016c4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80016c6:	2304      	movs	r3, #4
 80016c8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d2:	f107 0320 	add.w	r3, r7, #32
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fa72 	bl	8005bc0 <HAL_RCC_OscConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016e2:	f000 fbb1 	bl	8001e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e6:	231f      	movs	r3, #31
 80016e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ea:	2303      	movs	r3, #3
 80016ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	2105      	movs	r1, #5
 8001704:	4618      	mov	r0, r3
 8001706:	f004 fe93 	bl	8006430 <HAL_RCC_ClockConfig>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001710:	f000 fb9a 	bl	8001e48 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <SystemClock_Config+0xe8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800171c:	4a04      	ldr	r2, [pc, #16]	@ (8001730 <SystemClock_Config+0xe8>)
 800171e:	f043 0320 	orr.w	r3, r3, #32
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	3770      	adds	r7, #112	@ 0x70
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	44020800 	.word	0x44020800
 8001730:	40022000 	.word	0x40022000

08001734 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8001738:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <MX_HASH_Init+0x2c>)
 800173a:	4a0a      	ldr	r2, [pc, #40]	@ (8001764 <MX_HASH_Init+0x30>)
 800173c:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 800173e:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <MX_HASH_Init+0x2c>)
 8001740:	2200      	movs	r2, #0
 8001742:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 8001744:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <MX_HASH_Init+0x2c>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	@ (8001760 <MX_HASH_Init+0x2c>)
 800174c:	f002 f800 	bl	8003750 <HAL_HASH_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_HASH_Init+0x26>
  {
    Error_Handler();
 8001756:	f000 fb77 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200001ec 	.word	0x200001ec
 8001764:	420c0400 	.word	0x420c0400

08001768 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800176c:	4b1b      	ldr	r3, [pc, #108]	@ (80017dc <MX_I2C1_Init+0x74>)
 800176e:	4a1c      	ldr	r2, [pc, #112]	@ (80017e0 <MX_I2C1_Init+0x78>)
 8001770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8001772:	4b1a      	ldr	r3, [pc, #104]	@ (80017dc <MX_I2C1_Init+0x74>)
 8001774:	4a1b      	ldr	r2, [pc, #108]	@ (80017e4 <MX_I2C1_Init+0x7c>)
 8001776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001778:	4b18      	ldr	r3, [pc, #96]	@ (80017dc <MX_I2C1_Init+0x74>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177e:	4b17      	ldr	r3, [pc, #92]	@ (80017dc <MX_I2C1_Init+0x74>)
 8001780:	2201      	movs	r2, #1
 8001782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001784:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <MX_I2C1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800178a:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <MX_I2C1_Init+0x74>)
 800178c:	2200      	movs	r2, #0
 800178e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001790:	4b12      	ldr	r3, [pc, #72]	@ (80017dc <MX_I2C1_Init+0x74>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001796:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <MX_I2C1_Init+0x74>)
 8001798:	2200      	movs	r2, #0
 800179a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800179c:	4b0f      	ldr	r3, [pc, #60]	@ (80017dc <MX_I2C1_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a2:	480e      	ldr	r0, [pc, #56]	@ (80017dc <MX_I2C1_Init+0x74>)
 80017a4:	f002 fbd5 	bl	8003f52 <HAL_I2C_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017ae:	f000 fb4b 	bl	8001e48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017b2:	2100      	movs	r1, #0
 80017b4:	4809      	ldr	r0, [pc, #36]	@ (80017dc <MX_I2C1_Init+0x74>)
 80017b6:	f002 fc67 	bl	8004088 <HAL_I2CEx_ConfigAnalogFilter>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017c0:	f000 fb42 	bl	8001e48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017c4:	2100      	movs	r1, #0
 80017c6:	4805      	ldr	r0, [pc, #20]	@ (80017dc <MX_I2C1_Init+0x74>)
 80017c8:	f002 fca9 	bl	800411e <HAL_I2CEx_ConfigDigitalFilter>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017d2:	f000 fb39 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	2000022c 	.word	0x2000022c
 80017e0:	40005400 	.word	0x40005400
 80017e4:	10c043e5 	.word	0x10c043e5

080017e8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80017ec:	4b07      	ldr	r3, [pc, #28]	@ (800180c <MX_RNG_Init+0x24>)
 80017ee:	4a08      	ldr	r2, [pc, #32]	@ (8001810 <MX_RNG_Init+0x28>)
 80017f0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <MX_RNG_Init+0x24>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	@ (800180c <MX_RNG_Init+0x24>)
 80017fa:	f00a f9b3 	bl	800bb64 <HAL_RNG_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001804:	f000 fb20 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000280 	.word	0x20000280
 8001810:	420c0800 	.word	0x420c0800

08001814 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08e      	sub	sp, #56	@ 0x38
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
 8001828:	611a      	str	r2, [r3, #16]
 800182a:	615a      	str	r2, [r3, #20]
 800182c:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001842:	4b33      	ldr	r3, [pc, #204]	@ (8001910 <MX_RTC_Init+0xfc>)
 8001844:	4a33      	ldr	r2, [pc, #204]	@ (8001914 <MX_RTC_Init+0x100>)
 8001846:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001848:	4b31      	ldr	r3, [pc, #196]	@ (8001910 <MX_RTC_Init+0xfc>)
 800184a:	2200      	movs	r2, #0
 800184c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800184e:	4b30      	ldr	r3, [pc, #192]	@ (8001910 <MX_RTC_Init+0xfc>)
 8001850:	227f      	movs	r2, #127	@ 0x7f
 8001852:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001854:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <MX_RTC_Init+0xfc>)
 8001856:	22ff      	movs	r2, #255	@ 0xff
 8001858:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800185a:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <MX_RTC_Init+0xfc>)
 800185c:	2200      	movs	r2, #0
 800185e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001860:	4b2b      	ldr	r3, [pc, #172]	@ (8001910 <MX_RTC_Init+0xfc>)
 8001862:	2200      	movs	r2, #0
 8001864:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001866:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <MX_RTC_Init+0xfc>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800186c:	4b28      	ldr	r3, [pc, #160]	@ (8001910 <MX_RTC_Init+0xfc>)
 800186e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001872:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001874:	4b26      	ldr	r3, [pc, #152]	@ (8001910 <MX_RTC_Init+0xfc>)
 8001876:	2200      	movs	r2, #0
 8001878:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800187a:	4b25      	ldr	r3, [pc, #148]	@ (8001910 <MX_RTC_Init+0xfc>)
 800187c:	2200      	movs	r2, #0
 800187e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001880:	4823      	ldr	r0, [pc, #140]	@ (8001910 <MX_RTC_Init+0xfc>)
 8001882:	f00a fb13 	bl	800beac <HAL_RTC_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800188c:	f000 fadc 	bl	8001e48 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001894:	2300      	movs	r3, #0
 8001896:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001898:	2300      	movs	r3, #0
 800189a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800189c:	2300      	movs	r3, #0
 800189e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	481a      	ldr	r0, [pc, #104]	@ (8001910 <MX_RTC_Init+0xfc>)
 80018a8:	f00a fd66 	bl	800c378 <HAL_RTCEx_PrivilegeModeSet>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80018b2:	f000 fac9 	bl	8001e48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80018be:	2300      	movs	r3, #0
 80018c0:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80018ca:	f107 0308 	add.w	r3, r7, #8
 80018ce:	2201      	movs	r2, #1
 80018d0:	4619      	mov	r1, r3
 80018d2:	480f      	ldr	r0, [pc, #60]	@ (8001910 <MX_RTC_Init+0xfc>)
 80018d4:	f00a fb6c 	bl	800bfb0 <HAL_RTC_SetTime>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80018de:	f000 fab3 	bl	8001e48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80018e2:	2301      	movs	r3, #1
 80018e4:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80018e6:	2301      	movs	r3, #1
 80018e8:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80018ea:	2301      	movs	r3, #1
 80018ec:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2201      	movs	r2, #1
 80018f6:	4619      	mov	r1, r3
 80018f8:	4805      	ldr	r0, [pc, #20]	@ (8001910 <MX_RTC_Init+0xfc>)
 80018fa:	f00a fbeb 	bl	800c0d4 <HAL_RTC_SetDate>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001904:	f000 faa0 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001908:	bf00      	nop
 800190a:	3738      	adds	r7, #56	@ 0x38
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000294 	.word	0x20000294
 8001914:	44007800 	.word	0x44007800

08001918 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800191c:	4b27      	ldr	r3, [pc, #156]	@ (80019bc <MX_SPI1_Init+0xa4>)
 800191e:	4a28      	ldr	r2, [pc, #160]	@ (80019c0 <MX_SPI1_Init+0xa8>)
 8001920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001922:	4b26      	ldr	r3, [pc, #152]	@ (80019bc <MX_SPI1_Init+0xa4>)
 8001924:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800192a:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <MX_SPI1_Init+0xa4>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001930:	4b22      	ldr	r3, [pc, #136]	@ (80019bc <MX_SPI1_Init+0xa4>)
 8001932:	2207      	movs	r2, #7
 8001934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001936:	4b21      	ldr	r3, [pc, #132]	@ (80019bc <MX_SPI1_Init+0xa4>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800193c:	4b1f      	ldr	r3, [pc, #124]	@ (80019bc <MX_SPI1_Init+0xa4>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001942:	4b1e      	ldr	r3, [pc, #120]	@ (80019bc <MX_SPI1_Init+0xa4>)
 8001944:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800194a:	4b1c      	ldr	r3, [pc, #112]	@ (80019bc <MX_SPI1_Init+0xa4>)
 800194c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001950:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001952:	4b1a      	ldr	r3, [pc, #104]	@ (80019bc <MX_SPI1_Init+0xa4>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001958:	4b18      	ldr	r3, [pc, #96]	@ (80019bc <MX_SPI1_Init+0xa4>)
 800195a:	2200      	movs	r2, #0
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195e:	4b17      	ldr	r3, [pc, #92]	@ (80019bc <MX_SPI1_Init+0xa4>)
 8001960:	2200      	movs	r2, #0
 8001962:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001964:	4b15      	ldr	r3, [pc, #84]	@ (80019bc <MX_SPI1_Init+0xa4>)
 8001966:	2207      	movs	r2, #7
 8001968:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800196a:	4b14      	ldr	r3, [pc, #80]	@ (80019bc <MX_SPI1_Init+0xa4>)
 800196c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001970:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001972:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <MX_SPI1_Init+0xa4>)
 8001974:	2200      	movs	r2, #0
 8001976:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001978:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <MX_SPI1_Init+0xa4>)
 800197a:	2200      	movs	r2, #0
 800197c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800197e:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <MX_SPI1_Init+0xa4>)
 8001980:	2200      	movs	r2, #0
 8001982:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001984:	4b0d      	ldr	r3, [pc, #52]	@ (80019bc <MX_SPI1_Init+0xa4>)
 8001986:	2200      	movs	r2, #0
 8001988:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800198a:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <MX_SPI1_Init+0xa4>)
 800198c:	2200      	movs	r2, #0
 800198e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001990:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <MX_SPI1_Init+0xa4>)
 8001992:	2200      	movs	r2, #0
 8001994:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <MX_SPI1_Init+0xa4>)
 8001998:	2200      	movs	r2, #0
 800199a:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800199c:	4b07      	ldr	r3, [pc, #28]	@ (80019bc <MX_SPI1_Init+0xa4>)
 800199e:	2200      	movs	r2, #0
 80019a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <MX_SPI1_Init+0xa4>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019a8:	4804      	ldr	r0, [pc, #16]	@ (80019bc <MX_SPI1_Init+0xa4>)
 80019aa:	f00a fd13 	bl	800c3d4 <HAL_SPI_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80019b4:	f000 fa48 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200002c4 	.word	0x200002c4
 80019c0:	40013000 	.word	0x40013000

080019c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c8:	4b22      	ldr	r3, [pc, #136]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 80019ca:	4a23      	ldr	r2, [pc, #140]	@ (8001a58 <MX_USART2_UART_Init+0x94>)
 80019cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ce:	4b21      	ldr	r3, [pc, #132]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 80019d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 80019de:	2200      	movs	r2, #0
 80019e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 80019ea:	220c      	movs	r2, #12
 80019ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ee:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f4:	4b17      	ldr	r3, [pc, #92]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019fa:	4b16      	ldr	r3, [pc, #88]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a06:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a0c:	4811      	ldr	r0, [pc, #68]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 8001a0e:	f00a fe6c 	bl	800c6ea <HAL_UART_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001a18:	f000 fa16 	bl	8001e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	480d      	ldr	r0, [pc, #52]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 8001a20:	f00b fb98 	bl	800d154 <HAL_UARTEx_SetTxFifoThreshold>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001a2a:	f000 fa0d 	bl	8001e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4808      	ldr	r0, [pc, #32]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 8001a32:	f00b fbcd 	bl	800d1d0 <HAL_UARTEx_SetRxFifoThreshold>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001a3c:	f000 fa04 	bl	8001e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001a40:	4804      	ldr	r0, [pc, #16]	@ (8001a54 <MX_USART2_UART_Init+0x90>)
 8001a42:	f00b fb4e 	bl	800d0e2 <HAL_UARTEx_DisableFifoMode>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001a4c:	f000 f9fc 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000354 	.word	0x20000354
 8001a58:	40004400 	.word	0x40004400

08001a5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a60:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a62:	4a23      	ldr	r2, [pc, #140]	@ (8001af0 <MX_USART3_UART_Init+0x94>)
 8001a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a66:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a80:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a82:	220c      	movs	r2, #12
 8001a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a86:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a8c:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a92:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a98:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aa4:	4811      	ldr	r0, [pc, #68]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001aa6:	f00a fe20 	bl	800c6ea <HAL_UART_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ab0:	f000 f9ca 	bl	8001e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	480d      	ldr	r0, [pc, #52]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001ab8:	f00b fb4c 	bl	800d154 <HAL_UARTEx_SetTxFifoThreshold>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ac2:	f000 f9c1 	bl	8001e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4808      	ldr	r0, [pc, #32]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001aca:	f00b fb81 	bl	800d1d0 <HAL_UARTEx_SetRxFifoThreshold>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001ad4:	f000 f9b8 	bl	8001e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001ad8:	4804      	ldr	r0, [pc, #16]	@ (8001aec <MX_USART3_UART_Init+0x90>)
 8001ada:	f00b fb02 	bl	800d0e2 <HAL_UARTEx_DisableFifoMode>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ae4:	f000 f9b0 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	200003e8 	.word	0x200003e8
 8001af0:	40004800 	.word	0x40004800

08001af4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001af8:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001afa:	4a23      	ldr	r2, [pc, #140]	@ (8001b88 <MX_USART6_UART_Init+0x94>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001afe:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b04:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b1f      	ldr	r3, [pc, #124]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b1c      	ldr	r3, [pc, #112]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b19      	ldr	r3, [pc, #100]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b2a:	4b16      	ldr	r3, [pc, #88]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b36:	4b13      	ldr	r3, [pc, #76]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001b3c:	4811      	ldr	r0, [pc, #68]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b3e:	f00a fdd4 	bl	800c6ea <HAL_UART_Init>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001b48:	f000 f97e 	bl	8001e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b50:	f00b fb00 	bl	800d154 <HAL_UARTEx_SetTxFifoThreshold>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001b5a:	f000 f975 	bl	8001e48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b5e:	2100      	movs	r1, #0
 8001b60:	4808      	ldr	r0, [pc, #32]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b62:	f00b fb35 	bl	800d1d0 <HAL_UARTEx_SetRxFifoThreshold>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001b6c:	f000 f96c 	bl	8001e48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001b70:	4804      	ldr	r0, [pc, #16]	@ (8001b84 <MX_USART6_UART_Init+0x90>)
 8001b72:	f00b fab6 	bl	800d0e2 <HAL_UARTEx_DisableFifoMode>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001b7c:	f000 f964 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000047c 	.word	0x2000047c
 8001b88:	40006400 	.word	0x40006400

08001b8c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8001b90:	4b29      	ldr	r3, [pc, #164]	@ (8001c38 <MX_USB_PCD_Init+0xac>)
 8001b92:	4a2a      	ldr	r2, [pc, #168]	@ (8001c3c <MX_USB_PCD_Init+0xb0>)
 8001b94:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001b98:	4b27      	ldr	r3, [pc, #156]	@ (8001c38 <MX_USB_PCD_Init+0xac>)
 8001b9a:	4a29      	ldr	r2, [pc, #164]	@ (8001c40 <MX_USB_PCD_Init+0xb4>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8001b9e:	4b26      	ldr	r3, [pc, #152]	@ (8001c38 <MX_USB_PCD_Init+0xac>)
 8001ba0:	2208      	movs	r2, #8
 8001ba2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 8001ba4:	4b24      	ldr	r3, [pc, #144]	@ (8001c38 <MX_USB_PCD_Init+0xac>)
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001baa:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <MX_USB_PCD_Init+0xac>)
 8001bac:	2202      	movs	r2, #2
 8001bae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8001bb0:	4b21      	ldr	r3, [pc, #132]	@ (8001c38 <MX_USB_PCD_Init+0xac>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8001bb6:	4b20      	ldr	r3, [pc, #128]	@ (8001c38 <MX_USB_PCD_Init+0xac>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 8001bbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001c38 <MX_USB_PCD_Init+0xac>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8001bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c38 <MX_USB_PCD_Init+0xac>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8001bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c38 <MX_USB_PCD_Init+0xac>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8001bce:	4b1a      	ldr	r3, [pc, #104]	@ (8001c38 <MX_USB_PCD_Init+0xac>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8001bd4:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <MX_USB_PCD_Init+0xac>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 8001bda:	4817      	ldr	r0, [pc, #92]	@ (8001c38 <MX_USB_PCD_Init+0xac>)
 8001bdc:	f002 fb4e 	bl	800427c <HAL_PCD_Init>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 8001be6:	f000 f92f 	bl	8001e48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 8001bea:	2200      	movs	r2, #0
 8001bec:	4915      	ldr	r1, [pc, #84]	@ (8001c44 <MX_USB_PCD_Init+0xb8>)
 8001bee:	4813      	ldr	r0, [pc, #76]	@ (8001c3c <MX_USB_PCD_Init+0xb0>)
 8001bf0:	f00e fc96 	bl	8010520 <USBD_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_USB_PCD_Init+0x72>
        Error_Handler();
 8001bfa:	f000 f925 	bl	8001e48 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8001bfe:	4912      	ldr	r1, [pc, #72]	@ (8001c48 <MX_USB_PCD_Init+0xbc>)
 8001c00:	480e      	ldr	r0, [pc, #56]	@ (8001c3c <MX_USB_PCD_Init+0xb0>)
 8001c02:	f00e fcbd 	bl	8010580 <USBD_RegisterClass>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 8001c0c:	f000 f91c 	bl	8001e48 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8001c10:	490e      	ldr	r1, [pc, #56]	@ (8001c4c <MX_USB_PCD_Init+0xc0>)
 8001c12:	480a      	ldr	r0, [pc, #40]	@ (8001c3c <MX_USB_PCD_Init+0xb0>)
 8001c14:	f00d ff3c 	bl	800fa90 <USBD_CDC_RegisterInterface>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 8001c1e:	f000 f913 	bl	8001e48 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001c22:	4806      	ldr	r0, [pc, #24]	@ (8001c3c <MX_USB_PCD_Init+0xb0>)
 8001c24:	f00e fce2 	bl	80105ec <USBD_Start>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 8001c2e:	f000 f90b 	bl	8001e48 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000510 	.word	0x20000510
 8001c3c:	200007f4 	.word	0x200007f4
 8001c40:	40016000 	.word	0x40016000
 8001c44:	200000d4 	.word	0x200000d4
 8001c48:	20000038 	.word	0x20000038
 8001c4c:	200000b8 	.word	0x200000b8

08001c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	@ 0x30
 8001c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c66:	4b72      	ldr	r3, [pc, #456]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c6c:	4a70      	ldr	r2, [pc, #448]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001c6e:	f043 0310 	orr.w	r3, r3, #16
 8001c72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c76:	4b6e      	ldr	r3, [pc, #440]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c7c:	f003 0310 	and.w	r3, r3, #16
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c84:	4b6a      	ldr	r3, [pc, #424]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c8a:	4a69      	ldr	r2, [pc, #420]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001c8c:	f043 0304 	orr.w	r3, r3, #4
 8001c90:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c94:	4b66      	ldr	r3, [pc, #408]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ca2:	4b63      	ldr	r3, [pc, #396]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ca8:	4a61      	ldr	r2, [pc, #388]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cc0:	4b5b      	ldr	r3, [pc, #364]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001cc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cc6:	4a5a      	ldr	r2, [pc, #360]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cd0:	4b57      	ldr	r3, [pc, #348]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cde:	4b54      	ldr	r3, [pc, #336]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001ce0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ce4:	4a52      	ldr	r2, [pc, #328]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001ce6:	f043 0302 	orr.w	r3, r3, #2
 8001cea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001cee:	4b50      	ldr	r3, [pc, #320]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfc:	4b4c      	ldr	r3, [pc, #304]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d02:	4a4b      	ldr	r2, [pc, #300]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d0c:	4b48      	ldr	r3, [pc, #288]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	607b      	str	r3, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d1a:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d20:	4a43      	ldr	r2, [pc, #268]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001d2a:	4b41      	ldr	r3, [pc, #260]	@ (8001e30 <MX_GPIO_Init+0x1e0>)
 8001d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001d38:	2332      	movs	r3, #50	@ 0x32
 8001d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d44:	2302      	movs	r3, #2
 8001d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d48:	230b      	movs	r3, #11
 8001d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	4619      	mov	r1, r3
 8001d52:	4838      	ldr	r0, [pc, #224]	@ (8001e34 <MX_GPIO_Init+0x1e4>)
 8001d54:	f001 fb78 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001d58:	2384      	movs	r3, #132	@ 0x84
 8001d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d64:	2302      	movs	r3, #2
 8001d66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d68:	230b      	movs	r3, #11
 8001d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 031c 	add.w	r3, r7, #28
 8001d70:	4619      	mov	r1, r3
 8001d72:	4831      	ldr	r0, [pc, #196]	@ (8001e38 <MX_GPIO_Init+0x1e8>)
 8001d74:	f001 fb68 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001d78:	2310      	movs	r3, #16
 8001d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	4619      	mov	r1, r3
 8001d8a:	482b      	ldr	r0, [pc, #172]	@ (8001e38 <MX_GPIO_Init+0x1e8>)
 8001d8c:	f001 fb5c 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8001d90:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d96:	2303      	movs	r3, #3
 8001d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9e:	f107 031c 	add.w	r3, r7, #28
 8001da2:	4619      	mov	r1, r3
 8001da4:	4825      	ldr	r0, [pc, #148]	@ (8001e3c <MX_GPIO_Init+0x1ec>)
 8001da6:	f001 fb4f 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001db8:	2302      	movs	r3, #2
 8001dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001dbc:	230b      	movs	r3, #11
 8001dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	481d      	ldr	r0, [pc, #116]	@ (8001e3c <MX_GPIO_Init+0x1ec>)
 8001dc8:	f001 fb3e 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8001dcc:	2380      	movs	r3, #128	@ 0x80
 8001dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <MX_GPIO_Init+0x1f0>)
 8001dd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4819      	ldr	r0, [pc, #100]	@ (8001e44 <MX_GPIO_Init+0x1f4>)
 8001de0:	f001 fb32 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 8001de4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dee:	2300      	movs	r3, #0
 8001df0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001df2:	2302      	movs	r3, #2
 8001df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001df6:	230b      	movs	r3, #11
 8001df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dfa:	f107 031c 	add.w	r3, r7, #28
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4810      	ldr	r0, [pc, #64]	@ (8001e44 <MX_GPIO_Init+0x1f4>)
 8001e02:	f001 fb21 	bl	8003448 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8001e06:	23c0      	movs	r3, #192	@ 0xc0
 8001e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001e16:	2308      	movs	r3, #8
 8001e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1a:	f107 031c 	add.w	r3, r7, #28
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4806      	ldr	r0, [pc, #24]	@ (8001e3c <MX_GPIO_Init+0x1ec>)
 8001e22:	f001 fb11 	bl	8003448 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e26:	bf00      	nop
 8001e28:	3730      	adds	r7, #48	@ 0x30
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	44020c00 	.word	0x44020c00
 8001e34:	42020800 	.word	0x42020800
 8001e38:	42020000 	.word	0x42020000
 8001e3c:	42020400 	.word	0x42020400
 8001e40:	10110000 	.word	0x10110000
 8001e44:	42021800 	.word	0x42021800

08001e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e4c:	b672      	cpsid	i
}
 8001e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <Error_Handler+0x8>

08001e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e58:	bf00      	nop
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <HAL_HASH_MspInit+0x34>)
 8001e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e72:	4a09      	ldr	r2, [pc, #36]	@ (8001e98 <HAL_HASH_MspInit+0x34>)
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e7c:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_HASH_MspInit+0x34>)
 8001e7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8001e8a:	bf00      	nop
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	44020c00 	.word	0x44020c00

08001e9c <HAL_HASH_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspDeInit(HASH_HandleTypeDef* hhash)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspDeInit 0 */

  /* USER CODE END HASH_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_HASH_CLK_DISABLE();
 8001ea4:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <HAL_HASH_MspDeInit+0x24>)
 8001ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001eaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ec0 <HAL_HASH_MspDeInit+0x24>)
 8001eac:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8001eb0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  /* USER CODE BEGIN HASH_MspDeInit 1 */

  /* USER CODE END HASH_MspDeInit 1 */

}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	44020c00 	.word	0x44020c00

08001ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b0cc      	sub	sp, #304	@ 0x130
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ece:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ed2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ee8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001eec:	4618      	mov	r0, r3
 8001eee:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	f00f fff5 	bl	8011ee4 <memset>
  if(hi2c->Instance==I2C1)
 8001efa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001efe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a33      	ldr	r2, [pc, #204]	@ (8001fd4 <HAL_I2C_MspInit+0x110>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d15e      	bne.n	8001fca <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001f0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f10:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001f20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f24:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	4618      	mov	r0, r3
 8001f34:	f004 fdbe 	bl	8006ab4 <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8001f3e:	f7ff ff83 	bl	8001e48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f42:	4b25      	ldr	r3, [pc, #148]	@ (8001fd8 <HAL_I2C_MspInit+0x114>)
 8001f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f48:	4a23      	ldr	r2, [pc, #140]	@ (8001fd8 <HAL_I2C_MspInit+0x114>)
 8001f4a:	f043 0302 	orr.w	r3, r3, #2
 8001f4e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f52:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <HAL_I2C_MspInit+0x114>)
 8001f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f58:	f003 0202 	and.w	r2, r3, #2
 8001f5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f60:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001f6a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f6e:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f70:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f74:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f78:	2312      	movs	r3, #18
 8001f7a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f90:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001f94:	4619      	mov	r1, r3
 8001f96:	4811      	ldr	r0, [pc, #68]	@ (8001fdc <HAL_I2C_MspInit+0x118>)
 8001f98:	f001 fa56 	bl	8003448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd8 <HAL_I2C_MspInit+0x114>)
 8001f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8001fd8 <HAL_I2C_MspInit+0x114>)
 8001fa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fa8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001fac:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd8 <HAL_I2C_MspInit+0x114>)
 8001fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001fb2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001fb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001fba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001fc4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001fc8:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001fca:	bf00      	nop
 8001fcc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40005400 	.word	0x40005400
 8001fd8:	44020c00 	.word	0x44020c00
 8001fdc:	42020400 	.word	0x42020400

08001fe0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b0c6      	sub	sp, #280	@ 0x118
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001fea:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001fee:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ff0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001ffe:	461a      	mov	r2, r3
 8002000:	2100      	movs	r1, #0
 8002002:	f00f ff6f 	bl	8011ee4 <memset>
  if(hrng->Instance==RNG)
 8002006:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800200a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <HAL_RNG_MspInit+0xa8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d131      	bne.n	800207c <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002018:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800201c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8002020:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800202c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002034:	2200      	movs	r2, #0
 8002036:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800203a:	f107 0310 	add.w	r3, r7, #16
 800203e:	4618      	mov	r0, r3
 8002040:	f004 fd38 	bl	8006ab4 <HAL_RCCEx_PeriphCLKConfig>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 800204a:	f7ff fefd 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800204e:	4b0f      	ldr	r3, [pc, #60]	@ (800208c <HAL_RNG_MspInit+0xac>)
 8002050:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002054:	4a0d      	ldr	r2, [pc, #52]	@ (800208c <HAL_RNG_MspInit+0xac>)
 8002056:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800205a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800205e:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <HAL_RNG_MspInit+0xac>)
 8002060:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002064:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002068:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800206c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002076:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800207a:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800207c:	bf00      	nop
 800207e:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	420c0800 	.word	0x420c0800
 800208c:	44020c00 	.word	0x44020c00

08002090 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b0c6      	sub	sp, #280	@ 0x118
 8002094:	af00      	add	r7, sp, #0
 8002096:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800209a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800209e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020a8:	4618      	mov	r0, r3
 80020aa:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80020ae:	461a      	mov	r2, r3
 80020b0:	2100      	movs	r1, #0
 80020b2:	f00f ff17 	bl	8011ee4 <memset>
  if(hrtc->Instance==RTC)
 80020b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020ba:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a21      	ldr	r2, [pc, #132]	@ (8002148 <HAL_RTC_MspInit+0xb8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d13a      	bne.n	800213e <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80020c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020cc:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80020d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020d4:	f04f 0300 	mov.w	r3, #0
 80020d8:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80020dc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80020e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80020e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020e8:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	4618      	mov	r0, r3
 80020f2:	f004 fcdf 	bl	8006ab4 <HAL_RCCEx_PeriphCLKConfig>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 80020fc:	f7ff fea4 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <HAL_RTC_MspInit+0xbc>)
 8002102:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002106:	4a11      	ldr	r2, [pc, #68]	@ (800214c <HAL_RTC_MspInit+0xbc>)
 8002108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800210c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002110:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <HAL_RTC_MspInit+0xbc>)
 8002112:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002116:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <HAL_RTC_MspInit+0xbc>)
 8002118:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800211c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8002120:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <HAL_RTC_MspInit+0xbc>)
 8002122:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002126:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 800212a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800212e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002138:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800213c:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800213e:	bf00      	nop
 8002140:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	44007800 	.word	0x44007800
 800214c:	44020c00 	.word	0x44020c00

08002150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b0ce      	sub	sp, #312	@ 0x138
 8002154:	af00      	add	r7, sp, #0
 8002156:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800215a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800215e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002170:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002174:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002178:	4618      	mov	r0, r3
 800217a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800217e:	461a      	mov	r2, r3
 8002180:	2100      	movs	r1, #0
 8002182:	f00f feaf 	bl	8011ee4 <memset>
  if(hspi->Instance==SPI1)
 8002186:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800218a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a49      	ldr	r2, [pc, #292]	@ (80022b8 <HAL_SPI_MspInit+0x168>)
 8002194:	4293      	cmp	r3, r2
 8002196:	f040 808a 	bne.w	80022ae <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800219a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800219e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 80021a2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 80021ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80021b2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80021b6:	2200      	movs	r2, #0
 80021b8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021bc:	f107 0318 	add.w	r3, r7, #24
 80021c0:	4618      	mov	r0, r3
 80021c2:	f004 fc77 	bl	8006ab4 <HAL_RCCEx_PeriphCLKConfig>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 80021cc:	f7ff fe3c 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021d0:	4b3a      	ldr	r3, [pc, #232]	@ (80022bc <HAL_SPI_MspInit+0x16c>)
 80021d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80021d6:	4a39      	ldr	r2, [pc, #228]	@ (80022bc <HAL_SPI_MspInit+0x16c>)
 80021d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021dc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80021e0:	4b36      	ldr	r3, [pc, #216]	@ (80022bc <HAL_SPI_MspInit+0x16c>)
 80021e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80021e6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80021ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80021ee:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80021f8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80021fc:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fe:	4b2f      	ldr	r3, [pc, #188]	@ (80022bc <HAL_SPI_MspInit+0x16c>)
 8002200:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002204:	4a2d      	ldr	r2, [pc, #180]	@ (80022bc <HAL_SPI_MspInit+0x16c>)
 8002206:	f043 0301 	orr.w	r3, r3, #1
 800220a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800220e:	4b2b      	ldr	r3, [pc, #172]	@ (80022bc <HAL_SPI_MspInit+0x16c>)
 8002210:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002214:	f003 0201 	and.w	r2, r3, #1
 8002218:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800221c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002226:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800222a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800222c:	4b23      	ldr	r3, [pc, #140]	@ (80022bc <HAL_SPI_MspInit+0x16c>)
 800222e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002232:	4a22      	ldr	r2, [pc, #136]	@ (80022bc <HAL_SPI_MspInit+0x16c>)
 8002234:	f043 0308 	orr.w	r3, r3, #8
 8002238:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800223c:	4b1f      	ldr	r3, [pc, #124]	@ (80022bc <HAL_SPI_MspInit+0x16c>)
 800223e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002242:	f003 0208 	and.w	r2, r3, #8
 8002246:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800224a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002254:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002258:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800225a:	2360      	movs	r3, #96	@ 0x60
 800225c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002272:	2305      	movs	r3, #5
 8002274:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 800227c:	4619      	mov	r1, r3
 800227e:	4810      	ldr	r0, [pc, #64]	@ (80022c0 <HAL_SPI_MspInit+0x170>)
 8002280:	f001 f8e2 	bl	8003448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002284:	2380      	movs	r3, #128	@ 0x80
 8002286:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002296:	2300      	movs	r3, #0
 8002298:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800229c:	2305      	movs	r3, #5
 800229e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a2:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 80022a6:	4619      	mov	r1, r3
 80022a8:	4806      	ldr	r0, [pc, #24]	@ (80022c4 <HAL_SPI_MspInit+0x174>)
 80022aa:	f001 f8cd 	bl	8003448 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80022ae:	bf00      	nop
 80022b0:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40013000 	.word	0x40013000
 80022bc:	44020c00 	.word	0x44020c00
 80022c0:	42020000 	.word	0x42020000
 80022c4:	42020c00 	.word	0x42020c00

080022c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b0d2      	sub	sp, #328	@ 0x148
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80022d2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022d6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80022ec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80022f0:	4618      	mov	r0, r3
 80022f2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 80022f6:	461a      	mov	r2, r3
 80022f8:	2100      	movs	r1, #0
 80022fa:	f00f fdf3 	bl	8011ee4 <memset>
  if(huart->Instance==USART2)
 80022fe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002302:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4ac7      	ldr	r2, [pc, #796]	@ (8002628 <HAL_UART_MspInit+0x360>)
 800230c:	4293      	cmp	r3, r2
 800230e:	f040 808a 	bne.w	8002426 <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002312:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002316:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800231a:	f04f 0202 	mov.w	r2, #2
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002326:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800232a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800232e:	2200      	movs	r2, #0
 8002330:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002336:	4618      	mov	r0, r3
 8002338:	f004 fbbc 	bl	8006ab4 <HAL_RCCEx_PeriphCLKConfig>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8002342:	f7ff fd81 	bl	8001e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002346:	4bb9      	ldr	r3, [pc, #740]	@ (800262c <HAL_UART_MspInit+0x364>)
 8002348:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800234c:	4ab7      	ldr	r2, [pc, #732]	@ (800262c <HAL_UART_MspInit+0x364>)
 800234e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002352:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002356:	4bb5      	ldr	r3, [pc, #724]	@ (800262c <HAL_UART_MspInit+0x364>)
 8002358:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800235c:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8002360:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002364:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800236e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002372:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4bad      	ldr	r3, [pc, #692]	@ (800262c <HAL_UART_MspInit+0x364>)
 8002376:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800237a:	4aac      	ldr	r2, [pc, #688]	@ (800262c <HAL_UART_MspInit+0x364>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002384:	4ba9      	ldr	r3, [pc, #676]	@ (800262c <HAL_UART_MspInit+0x364>)
 8002386:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800238a:	f003 0201 	and.w	r2, r3, #1
 800238e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002392:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800239c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80023a0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023a2:	4ba2      	ldr	r3, [pc, #648]	@ (800262c <HAL_UART_MspInit+0x364>)
 80023a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023a8:	4aa0      	ldr	r2, [pc, #640]	@ (800262c <HAL_UART_MspInit+0x364>)
 80023aa:	f043 0308 	orr.w	r3, r3, #8
 80023ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023b2:	4b9e      	ldr	r3, [pc, #632]	@ (800262c <HAL_UART_MspInit+0x364>)
 80023b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023b8:	f003 0208 	and.w	r2, r3, #8
 80023bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80023ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80023ce:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023d0:	2308      	movs	r3, #8
 80023d2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d6:	2302      	movs	r3, #2
 80023d8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023e8:	2307      	movs	r3, #7
 80023ea:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ee:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80023f2:	4619      	mov	r1, r3
 80023f4:	488e      	ldr	r0, [pc, #568]	@ (8002630 <HAL_UART_MspInit+0x368>)
 80023f6:	f001 f827 	bl	8003448 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80023fa:	2320      	movs	r3, #32
 80023fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002400:	2302      	movs	r3, #2
 8002402:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002412:	2307      	movs	r3, #7
 8002414:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002418:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800241c:	4619      	mov	r1, r3
 800241e:	4885      	ldr	r0, [pc, #532]	@ (8002634 <HAL_UART_MspInit+0x36c>)
 8002420:	f001 f812 	bl	8003448 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002424:	e0fb      	b.n	800261e <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART3)
 8002426:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800242a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a81      	ldr	r2, [pc, #516]	@ (8002638 <HAL_UART_MspInit+0x370>)
 8002434:	4293      	cmp	r3, r2
 8002436:	f040 808c 	bne.w	8002552 <HAL_UART_MspInit+0x28a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800243a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800243e:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002442:	f04f 0204 	mov.w	r2, #4
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800244e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002452:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002456:	2200      	movs	r2, #0
 8002458:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800245e:	4618      	mov	r0, r3
 8002460:	f004 fb28 	bl	8006ab4 <HAL_RCCEx_PeriphCLKConfig>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 800246a:	f7ff fced 	bl	8001e48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800246e:	4b6f      	ldr	r3, [pc, #444]	@ (800262c <HAL_UART_MspInit+0x364>)
 8002470:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002474:	4a6d      	ldr	r2, [pc, #436]	@ (800262c <HAL_UART_MspInit+0x364>)
 8002476:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800247a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800247e:	4b6b      	ldr	r3, [pc, #428]	@ (800262c <HAL_UART_MspInit+0x364>)
 8002480:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002484:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002488:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800248c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002496:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800249a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249c:	4b63      	ldr	r3, [pc, #396]	@ (800262c <HAL_UART_MspInit+0x364>)
 800249e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024a2:	4a62      	ldr	r2, [pc, #392]	@ (800262c <HAL_UART_MspInit+0x364>)
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024ac:	4b5f      	ldr	r3, [pc, #380]	@ (800262c <HAL_UART_MspInit+0x364>)
 80024ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024b2:	f003 0202 	and.w	r2, r3, #2
 80024b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80024ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80024c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80024c8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024ca:	4b58      	ldr	r3, [pc, #352]	@ (800262c <HAL_UART_MspInit+0x364>)
 80024cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024d0:	4a56      	ldr	r2, [pc, #344]	@ (800262c <HAL_UART_MspInit+0x364>)
 80024d2:	f043 0308 	orr.w	r3, r3, #8
 80024d6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024da:	4b54      	ldr	r3, [pc, #336]	@ (800262c <HAL_UART_MspInit+0x364>)
 80024dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024e0:	f003 0208 	and.w	r2, r3, #8
 80024e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80024e8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80024f2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024f6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80024fc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250c:	2300      	movs	r3, #0
 800250e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002512:	2307      	movs	r3, #7
 8002514:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002518:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 800251c:	4619      	mov	r1, r3
 800251e:	4847      	ldr	r0, [pc, #284]	@ (800263c <HAL_UART_MspInit+0x374>)
 8002520:	f000 ff92 	bl	8003448 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002524:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002528:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002538:	2300      	movs	r3, #0
 800253a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800253e:	2307      	movs	r3, #7
 8002540:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002544:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8002548:	4619      	mov	r1, r3
 800254a:	483a      	ldr	r0, [pc, #232]	@ (8002634 <HAL_UART_MspInit+0x36c>)
 800254c:	f000 ff7c 	bl	8003448 <HAL_GPIO_Init>
}
 8002550:	e065      	b.n	800261e <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART6)
 8002552:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002556:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a38      	ldr	r2, [pc, #224]	@ (8002640 <HAL_UART_MspInit+0x378>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d15c      	bne.n	800261e <HAL_UART_MspInit+0x356>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002564:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002568:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800256c:	f04f 0220 	mov.w	r2, #32
 8002570:	f04f 0300 	mov.w	r3, #0
 8002574:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002578:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800257c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002580:	2200      	movs	r2, #0
 8002582:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002584:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002588:	4618      	mov	r0, r3
 800258a:	f004 fa93 	bl	8006ab4 <HAL_RCCEx_PeriphCLKConfig>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 8002594:	f7ff fc58 	bl	8001e48 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002598:	4b24      	ldr	r3, [pc, #144]	@ (800262c <HAL_UART_MspInit+0x364>)
 800259a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800259e:	4a23      	ldr	r2, [pc, #140]	@ (800262c <HAL_UART_MspInit+0x364>)
 80025a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025a4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80025a8:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_UART_MspInit+0x364>)
 80025aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80025ae:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 80025b2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80025b6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80025c0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025c4:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025c6:	4b19      	ldr	r3, [pc, #100]	@ (800262c <HAL_UART_MspInit+0x364>)
 80025c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025cc:	4a17      	ldr	r2, [pc, #92]	@ (800262c <HAL_UART_MspInit+0x364>)
 80025ce:	f043 0304 	orr.w	r3, r3, #4
 80025d2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80025d6:	4b15      	ldr	r3, [pc, #84]	@ (800262c <HAL_UART_MspInit+0x364>)
 80025d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025dc:	f003 0204 	and.w	r2, r3, #4
 80025e0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80025e4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80025ee:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80025f2:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025f4:	23c0      	movs	r3, #192	@ 0xc0
 80025f6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002606:	2300      	movs	r3, #0
 8002608:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800260c:	2307      	movs	r3, #7
 800260e:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002612:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8002616:	4619      	mov	r1, r3
 8002618:	480a      	ldr	r0, [pc, #40]	@ (8002644 <HAL_UART_MspInit+0x37c>)
 800261a:	f000 ff15 	bl	8003448 <HAL_GPIO_Init>
}
 800261e:	bf00      	nop
 8002620:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40004400 	.word	0x40004400
 800262c:	44020c00 	.word	0x44020c00
 8002630:	42020000 	.word	0x42020000
 8002634:	42020c00 	.word	0x42020c00
 8002638:	40004800 	.word	0x40004800
 800263c:	42020400 	.word	0x42020400
 8002640:	40006400 	.word	0x40006400
 8002644:	42020800 	.word	0x42020800

08002648 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b0c6      	sub	sp, #280	@ 0x118
 800264c:	af00      	add	r7, sp, #0
 800264e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002652:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002656:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002658:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800265c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002660:	4618      	mov	r0, r3
 8002662:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8002666:	461a      	mov	r2, r3
 8002668:	2100      	movs	r1, #0
 800266a:	f00f fc3b 	bl	8011ee4 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 800266e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002672:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a22      	ldr	r2, [pc, #136]	@ (8002704 <HAL_PCD_MspInit+0xbc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d13b      	bne.n	80026f8 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002680:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002684:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0310 	mov.w	r3, #16
 8002690:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8002694:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800269c:	2230      	movs	r2, #48	@ 0x30
 800269e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026a2:	f107 0310 	add.w	r3, r7, #16
 80026a6:	4618      	mov	r0, r3
 80026a8:	f004 fa04 	bl	8006ab4 <HAL_RCCEx_PeriphCLKConfig>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 80026b2:	f7ff fbc9 	bl	8001e48 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 80026b6:	f003 fa73 	bl	8005ba0 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80026ba:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <HAL_PCD_MspInit+0xc0>)
 80026bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026c0:	4a11      	ldr	r2, [pc, #68]	@ (8002708 <HAL_PCD_MspInit+0xc0>)
 80026c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026c6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80026ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002708 <HAL_PCD_MspInit+0xc0>)
 80026cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026d0:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 80026d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80026d8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80026e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026e6:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2100      	movs	r1, #0
 80026ec:	204a      	movs	r0, #74	@ 0x4a
 80026ee:	f000 fd4b 	bl	8003188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80026f2:	204a      	movs	r0, #74	@ 0x4a
 80026f4:	f000 fd62 	bl	80031bc <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80026f8:	bf00      	nop
 80026fa:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40016000 	.word	0x40016000
 8002708:	44020c00 	.word	0x44020c00

0800270c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <NMI_Handler+0x4>

08002714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <HardFault_Handler+0x4>

0800271c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <MemManage_Handler+0x4>

08002724 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <BusFault_Handler+0x4>

0800272c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <UsageFault_Handler+0x4>

08002734 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002746:	bf00      	nop
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002762:	f000 fc15 	bl	8002f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}

0800276a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800276e:	2000      	movs	r0, #0
 8002770:	f000 fa6e 	bl	8002c50 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8002774:	bf00      	nop
 8002776:	bd80      	pop	{r7, pc}

08002778 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 800277c:	4802      	ldr	r0, [pc, #8]	@ (8002788 <USB_DRD_FS_IRQHandler+0x10>)
 800277e:	f001 fea0 	bl	80044c2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 8002782:	bf00      	nop
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	20000510 	.word	0x20000510

0800278c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	e00a      	b.n	80027b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800279e:	f3af 8000 	nop.w
 80027a2:	4601      	mov	r1, r0
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	1c5a      	adds	r2, r3, #1
 80027a8:	60ba      	str	r2, [r7, #8]
 80027aa:	b2ca      	uxtb	r2, r1
 80027ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	3301      	adds	r3, #1
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	dbf0      	blt.n	800279e <_read+0x12>
  }

  return len;
 80027bc:	687b      	ldr	r3, [r7, #4]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	e009      	b.n	80027ec <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	1c5a      	adds	r2, r3, #1
 80027dc:	60ba      	str	r2, [r7, #8]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 fabb 	bl	8002d5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	3301      	adds	r3, #1
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	dbf1      	blt.n	80027d8 <_write+0x12>
  }
  return len;
 80027f4:	687b      	ldr	r3, [r7, #4]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <_close>:

int _close(int file)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002826:	605a      	str	r2, [r3, #4]
  return 0;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <_isatty>:

int _isatty(int file)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800283e:	2301      	movs	r3, #1
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002870:	4a14      	ldr	r2, [pc, #80]	@ (80028c4 <_sbrk+0x5c>)
 8002872:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <_sbrk+0x60>)
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800287c:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002884:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <_sbrk+0x64>)
 8002886:	4a12      	ldr	r2, [pc, #72]	@ (80028d0 <_sbrk+0x68>)
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	429a      	cmp	r2, r3
 8002896:	d207      	bcs.n	80028a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002898:	f00f fb72 	bl	8011f80 <__errno>
 800289c:	4603      	mov	r3, r0
 800289e:	220c      	movs	r2, #12
 80028a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	e009      	b.n	80028bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a8:	4b08      	ldr	r3, [pc, #32]	@ (80028cc <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	4a05      	ldr	r2, [pc, #20]	@ (80028cc <_sbrk+0x64>)
 80028b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200a0000 	.word	0x200a0000
 80028c8:	00000500 	.word	0x00000500
 80028cc:	20000ad0 	.word	0x20000ad0
 80028d0:	200113f8 	.word	0x200113f8

080028d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028da:	4b35      	ldr	r3, [pc, #212]	@ (80029b0 <SystemInit+0xdc>)
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e0:	4a33      	ldr	r2, [pc, #204]	@ (80029b0 <SystemInit+0xdc>)
 80028e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028e6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80028ea:	4b32      	ldr	r3, [pc, #200]	@ (80029b4 <SystemInit+0xe0>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80028f0:	4b30      	ldr	r3, [pc, #192]	@ (80029b4 <SystemInit+0xe0>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80028f6:	4b2f      	ldr	r3, [pc, #188]	@ (80029b4 <SystemInit+0xe0>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80028fc:	4b2d      	ldr	r3, [pc, #180]	@ (80029b4 <SystemInit+0xe0>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	492c      	ldr	r1, [pc, #176]	@ (80029b4 <SystemInit+0xe0>)
 8002902:	4b2d      	ldr	r3, [pc, #180]	@ (80029b8 <SystemInit+0xe4>)
 8002904:	4013      	ands	r3, r2
 8002906:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 8002908:	4b2a      	ldr	r3, [pc, #168]	@ (80029b4 <SystemInit+0xe0>)
 800290a:	2200      	movs	r2, #0
 800290c:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 800290e:	4b29      	ldr	r3, [pc, #164]	@ (80029b4 <SystemInit+0xe0>)
 8002910:	2200      	movs	r2, #0
 8002912:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 8002914:	4b27      	ldr	r3, [pc, #156]	@ (80029b4 <SystemInit+0xe0>)
 8002916:	2200      	movs	r2, #0
 8002918:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 800291a:	4b26      	ldr	r3, [pc, #152]	@ (80029b4 <SystemInit+0xe0>)
 800291c:	4a27      	ldr	r2, [pc, #156]	@ (80029bc <SystemInit+0xe8>)
 800291e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 8002920:	4b24      	ldr	r3, [pc, #144]	@ (80029b4 <SystemInit+0xe0>)
 8002922:	2200      	movs	r2, #0
 8002924:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 8002926:	4b23      	ldr	r3, [pc, #140]	@ (80029b4 <SystemInit+0xe0>)
 8002928:	4a24      	ldr	r2, [pc, #144]	@ (80029bc <SystemInit+0xe8>)
 800292a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 800292c:	4b21      	ldr	r3, [pc, #132]	@ (80029b4 <SystemInit+0xe0>)
 800292e:	2200      	movs	r2, #0
 8002930:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 8002932:	4b20      	ldr	r3, [pc, #128]	@ (80029b4 <SystemInit+0xe0>)
 8002934:	4a21      	ldr	r2, [pc, #132]	@ (80029bc <SystemInit+0xe8>)
 8002936:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002938:	4b1e      	ldr	r3, [pc, #120]	@ (80029b4 <SystemInit+0xe0>)
 800293a:	2200      	movs	r2, #0
 800293c:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800293e:	4b1d      	ldr	r3, [pc, #116]	@ (80029b4 <SystemInit+0xe0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a1c      	ldr	r2, [pc, #112]	@ (80029b4 <SystemInit+0xe0>)
 8002944:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002948:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800294a:	4b1a      	ldr	r3, [pc, #104]	@ (80029b4 <SystemInit+0xe0>)
 800294c:	2200      	movs	r2, #0
 800294e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002950:	4b17      	ldr	r3, [pc, #92]	@ (80029b0 <SystemInit+0xdc>)
 8002952:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002956:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002958:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <SystemInit+0xec>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002960:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002968:	d003      	beq.n	8002972 <SystemInit+0x9e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002970:	d117      	bne.n	80029a2 <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8002972:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <SystemInit+0xec>)
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 800297e:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <SystemInit+0xec>)
 8002980:	4a10      	ldr	r2, [pc, #64]	@ (80029c4 <SystemInit+0xf0>)
 8002982:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8002984:	4b0e      	ldr	r3, [pc, #56]	@ (80029c0 <SystemInit+0xec>)
 8002986:	4a10      	ldr	r2, [pc, #64]	@ (80029c8 <SystemInit+0xf4>)
 8002988:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800298a:	4b0d      	ldr	r3, [pc, #52]	@ (80029c0 <SystemInit+0xec>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	4a0c      	ldr	r2, [pc, #48]	@ (80029c0 <SystemInit+0xec>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8002996:	4b0a      	ldr	r3, [pc, #40]	@ (80029c0 <SystemInit+0xec>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	4a09      	ldr	r2, [pc, #36]	@ (80029c0 <SystemInit+0xec>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	61d3      	str	r3, [r2, #28]
  }
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000ed00 	.word	0xe000ed00
 80029b4:	44020c00 	.word	0x44020c00
 80029b8:	eae2eae3 	.word	0xeae2eae3
 80029bc:	01010280 	.word	0x01010280
 80029c0:	40022000 	.word	0x40022000
 80029c4:	08192a3b 	.word	0x08192a3b
 80029c8:	4c5d6e7f 	.word	0x4c5d6e7f

080029cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029cc:	480d      	ldr	r0, [pc, #52]	@ (8002a04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80029d0:	f7ff ff80 	bl	80028d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029d4:	480c      	ldr	r0, [pc, #48]	@ (8002a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80029d6:	490d      	ldr	r1, [pc, #52]	@ (8002a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80029d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002a10 <LoopForever+0xe>)
  movs r3, #0
 80029da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029dc:	e002      	b.n	80029e4 <LoopCopyDataInit>

080029de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029e2:	3304      	adds	r3, #4

080029e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029e8:	d3f9      	bcc.n	80029de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002a18 <LoopForever+0x16>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f0:	e001      	b.n	80029f6 <LoopFillZerobss>

080029f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029f4:	3204      	adds	r2, #4

080029f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029f8:	d3fb      	bcc.n	80029f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029fa:	f00f fac7 	bl	8011f8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029fe:	f7fe fdd3 	bl	80015a8 <main>

08002a02 <LoopForever>:

LoopForever:
    b LoopForever
 8002a02:	e7fe      	b.n	8002a02 <LoopForever>
  ldr   r0, =_estack
 8002a04:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a0c:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8002a10:	08013be0 	.word	0x08013be0
  ldr r2, =_sbss
 8002a14:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8002a18:	200113f4 	.word	0x200113f4

08002a1c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a1c:	e7fe      	b.n	8002a1c <ADC1_IRQHandler>
	...

08002a20 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08c      	sub	sp, #48	@ 0x30
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8002a2e:	79fb      	ldrb	r3, [r7, #7]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d009      	beq.n	8002a48 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d006      	beq.n	8002a48 <BSP_LED_Init+0x28>
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d003      	beq.n	8002a48 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002a40:	f06f 0301 	mvn.w	r3, #1
 8002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a46:	e055      	b.n	8002af4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d10f      	bne.n	8002a6e <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8002a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002b00 <BSP_LED_Init+0xe0>)
 8002a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a54:	4a2a      	ldr	r2, [pc, #168]	@ (8002b00 <BSP_LED_Init+0xe0>)
 8002a56:	f043 0320 	orr.w	r3, r3, #32
 8002a5a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a5e:	4b28      	ldr	r3, [pc, #160]	@ (8002b00 <BSP_LED_Init+0xe0>)
 8002a60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a64:	f003 0320 	and.w	r3, r3, #32
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	e021      	b.n	8002ab2 <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8002a6e:	79fb      	ldrb	r3, [r7, #7]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10f      	bne.n	8002a94 <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 8002a74:	4b22      	ldr	r3, [pc, #136]	@ (8002b00 <BSP_LED_Init+0xe0>)
 8002a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a7a:	4a21      	ldr	r2, [pc, #132]	@ (8002b00 <BSP_LED_Init+0xe0>)
 8002a7c:	f043 0302 	orr.w	r3, r3, #2
 8002a80:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002a84:	4b1e      	ldr	r3, [pc, #120]	@ (8002b00 <BSP_LED_Init+0xe0>)
 8002a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	e00e      	b.n	8002ab2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002a94:	4b1a      	ldr	r3, [pc, #104]	@ (8002b00 <BSP_LED_Init+0xe0>)
 8002a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a9a:	4a19      	ldr	r2, [pc, #100]	@ (8002b00 <BSP_LED_Init+0xe0>)
 8002a9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aa0:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002aa4:	4b16      	ldr	r3, [pc, #88]	@ (8002b00 <BSP_LED_Init+0xe0>)
 8002aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002aaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	4a13      	ldr	r2, [pc, #76]	@ (8002b04 <BSP_LED_Init+0xe4>)
 8002ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aba:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002abc:	2301      	movs	r3, #1
 8002abe:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	4a0f      	ldr	r2, [pc, #60]	@ (8002b08 <BSP_LED_Init+0xe8>)
 8002acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ad0:	f107 0218 	add.w	r2, r7, #24
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fcb6 	bl	8003448 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002adc:	79fb      	ldrb	r3, [r7, #7]
 8002ade:	4a0a      	ldr	r2, [pc, #40]	@ (8002b08 <BSP_LED_Init+0xe8>)
 8002ae0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	4a07      	ldr	r2, [pc, #28]	@ (8002b04 <BSP_LED_Init+0xe4>)
 8002ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002aec:	2200      	movs	r2, #0
 8002aee:	4619      	mov	r1, r3
 8002af0:	f000 fdfc 	bl	80036ec <HAL_GPIO_WritePin>
  }

  return ret;
 8002af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3730      	adds	r7, #48	@ 0x30
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	44020c00 	.word	0x44020c00
 8002b04:	08013b68 	.word	0x08013b68
 8002b08:	2000000c 	.word	0x2000000c

08002b0c <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	4603      	mov	r3, r0
 8002b14:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d009      	beq.n	8002b34 <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 8002b20:	79fb      	ldrb	r3, [r7, #7]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d006      	beq.n	8002b34 <BSP_LED_Toggle+0x28>
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d003      	beq.n	8002b34 <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002b2c:	f06f 0301 	mvn.w	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e00b      	b.n	8002b4c <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	4a08      	ldr	r2, [pc, #32]	@ (8002b58 <BSP_LED_Toggle+0x4c>)
 8002b38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	4907      	ldr	r1, [pc, #28]	@ (8002b5c <BSP_LED_Toggle+0x50>)
 8002b40:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002b44:	4619      	mov	r1, r3
 8002b46:	4610      	mov	r0, r2
 8002b48:	f000 fde8 	bl	800371c <HAL_GPIO_TogglePin>
  }

  return ret;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	2000000c 	.word	0x2000000c
 8002b5c:	08013b68 	.word	0x08013b68

08002b60 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	460a      	mov	r2, r1
 8002b6a:	71fb      	strb	r3, [r7, #7]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002b70:	4b30      	ldr	r3, [pc, #192]	@ (8002c34 <BSP_PB_Init+0xd4>)
 8002b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b76:	4a2f      	ldr	r2, [pc, #188]	@ (8002c34 <BSP_PB_Init+0xd4>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b80:	4b2c      	ldr	r3, [pc, #176]	@ (8002c34 <BSP_PB_Init+0xd4>)
 8002b82:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002b8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b92:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002b94:	2302      	movs	r3, #2
 8002b96:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002b9c:	79bb      	ldrb	r3, [r7, #6]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10c      	bne.n	8002bbc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002ba6:	79fb      	ldrb	r3, [r7, #7]
 8002ba8:	4a23      	ldr	r2, [pc, #140]	@ (8002c38 <BSP_PB_Init+0xd8>)
 8002baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bae:	f107 020c 	add.w	r2, r7, #12
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 fc47 	bl	8003448 <HAL_GPIO_Init>
 8002bba:	e036      	b.n	8002c2a <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c3c <BSP_PB_Init+0xdc>)
 8002bbe:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	4a1d      	ldr	r2, [pc, #116]	@ (8002c38 <BSP_PB_Init+0xd8>)
 8002bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc8:	f107 020c 	add.w	r2, r7, #12
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f000 fc3a 	bl	8003448 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002bd4:	79fa      	ldrb	r2, [r7, #7]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4a18      	ldr	r2, [pc, #96]	@ (8002c40 <BSP_PB_Init+0xe0>)
 8002be0:	441a      	add	r2, r3
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	4917      	ldr	r1, [pc, #92]	@ (8002c44 <BSP_PB_Init+0xe4>)
 8002be6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002bea:	4619      	mov	r1, r3
 8002bec:	4610      	mov	r0, r2
 8002bee:	f000 fbcf 	bl	8003390 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002bf2:	79fa      	ldrb	r2, [r7, #7]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4a10      	ldr	r2, [pc, #64]	@ (8002c40 <BSP_PB_Init+0xe0>)
 8002bfe:	1898      	adds	r0, r3, r2
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	4a11      	ldr	r2, [pc, #68]	@ (8002c48 <BSP_PB_Init+0xe8>)
 8002c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	f000 fb94 	bl	8003338 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002c10:	2018      	movs	r0, #24
 8002c12:	79fb      	ldrb	r3, [r7, #7]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	@ (8002c4c <BSP_PB_Init+0xec>)
 8002c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	f000 fab3 	bl	8003188 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002c22:	2318      	movs	r3, #24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fac9 	bl	80031bc <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3720      	adds	r7, #32
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	44020c00 	.word	0x44020c00
 8002c38:	20000018 	.word	0x20000018
 8002c3c:	10110000 	.word	0x10110000
 8002c40:	20000ad4 	.word	0x20000ad4
 8002c44:	08013b70 	.word	0x08013b70
 8002c48:	2000001c 	.word	0x2000001c
 8002c4c:	20000020 	.word	0x20000020

08002c50 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002c5a:	79fa      	ldrb	r2, [r7, #7]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <BSP_PB_IRQHandler+0x28>)
 8002c66:	4413      	add	r3, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fba5 	bl	80033b8 <HAL_EXTI_IRQHandler>
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000ad4 	.word	0x20000ad4

08002c7c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 8002ca4:	79fb      	ldrb	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002caa:	f06f 0301 	mvn.w	r3, #1
 8002cae:	60fb      	str	r3, [r7, #12]
 8002cb0:	e018      	b.n	8002ce4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	2294      	movs	r2, #148	@ 0x94
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf0 <BSP_COM_Init+0x5c>)
 8002cbc:	4413      	add	r3, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f870 	bl	8002da4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	2294      	movs	r2, #148	@ 0x94
 8002cc8:	fb02 f303 	mul.w	r3, r2, r3
 8002ccc:	4a08      	ldr	r2, [pc, #32]	@ (8002cf0 <BSP_COM_Init+0x5c>)
 8002cce:	4413      	add	r3, r2
 8002cd0:	6839      	ldr	r1, [r7, #0]
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f80e 	bl	8002cf4 <MX_USART_Init>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002cde:	f06f 0303 	mvn.w	r3, #3
 8002ce2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000ae0 	.word	0x20000ae0

08002cf4 <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8002cfe:	4b16      	ldr	r3, [pc, #88]	@ (8002d58 <MX_USART_Init+0x64>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	220c      	movs	r2, #12
 8002d12:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	895b      	ldrh	r3, [r3, #10]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	891b      	ldrh	r3, [r3, #8]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	899b      	ldrh	r3, [r3, #12]
 8002d34:	461a      	mov	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002d40:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f009 fcce 	bl	800c6ea <HAL_UART_Init>
 8002d4e:	4603      	mov	r3, r0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20000008 	.word	0x20000008

08002d5c <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002d64:	4b09      	ldr	r3, [pc, #36]	@ (8002d8c <__io_putchar+0x30>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2394      	movs	r3, #148	@ 0x94
 8002d6c:	fb02 f303 	mul.w	r3, r2, r3
 8002d70:	4a07      	ldr	r2, [pc, #28]	@ (8002d90 <__io_putchar+0x34>)
 8002d72:	1898      	adds	r0, r3, r2
 8002d74:	1d39      	adds	r1, r7, #4
 8002d76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f009 fd05 	bl	800c78a <HAL_UART_Transmit>
  return ch;
 8002d80:	687b      	ldr	r3, [r7, #4]
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000b74 	.word	0x20000b74
 8002d90:	20000ae0 	.word	0x20000ae0

08002d94 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f7ff ff6f 	bl	8002c7c <BSP_PB_Callback>
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	@ 0x28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002dac:	4b27      	ldr	r3, [pc, #156]	@ (8002e4c <COM1_MspInit+0xa8>)
 8002dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002db2:	4a26      	ldr	r2, [pc, #152]	@ (8002e4c <COM1_MspInit+0xa8>)
 8002db4:	f043 0308 	orr.w	r3, r3, #8
 8002db8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002dbc:	4b23      	ldr	r3, [pc, #140]	@ (8002e4c <COM1_MspInit+0xa8>)
 8002dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dc2:	f003 0308 	and.w	r3, r3, #8
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002dca:	4b20      	ldr	r3, [pc, #128]	@ (8002e4c <COM1_MspInit+0xa8>)
 8002dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dd0:	4a1e      	ldr	r2, [pc, #120]	@ (8002e4c <COM1_MspInit+0xa8>)
 8002dd2:	f043 0308 	orr.w	r3, r3, #8
 8002dd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002dda:	4b1c      	ldr	r3, [pc, #112]	@ (8002e4c <COM1_MspInit+0xa8>)
 8002ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002de8:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <COM1_MspInit+0xa8>)
 8002dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dee:	4a17      	ldr	r2, [pc, #92]	@ (8002e4c <COM1_MspInit+0xa8>)
 8002df0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002df4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002df8:	4b14      	ldr	r3, [pc, #80]	@ (8002e4c <COM1_MspInit+0xa8>)
 8002dfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dfe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e02:	60bb      	str	r3, [r7, #8]
 8002e04:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8002e06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e0a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002e10:	2302      	movs	r3, #2
 8002e12:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8002e14:	2301      	movs	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002e18:	2307      	movs	r3, #7
 8002e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002e1c:	f107 0314 	add.w	r3, r7, #20
 8002e20:	4619      	mov	r1, r3
 8002e22:	480b      	ldr	r0, [pc, #44]	@ (8002e50 <COM1_MspInit+0xac>)
 8002e24:	f000 fb10 	bl	8003448 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002e28:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e2c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002e32:	2307      	movs	r3, #7
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002e36:	f107 0314 	add.w	r3, r7, #20
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4804      	ldr	r0, [pc, #16]	@ (8002e50 <COM1_MspInit+0xac>)
 8002e3e:	f000 fb03 	bl	8003448 <HAL_GPIO_Init>
}
 8002e42:	bf00      	nop
 8002e44:	3728      	adds	r7, #40	@ 0x28
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	44020c00 	.word	0x44020c00
 8002e50:	42020c00 	.word	0x42020c00

08002e54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e58:	2003      	movs	r0, #3
 8002e5a:	f000 f98a 	bl	8003172 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002e5e:	f003 fc9f 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 8002e62:	4602      	mov	r2, r0
 8002e64:	4b0c      	ldr	r3, [pc, #48]	@ (8002e98 <HAL_Init+0x44>)
 8002e66:	6a1b      	ldr	r3, [r3, #32]
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	490b      	ldr	r1, [pc, #44]	@ (8002e9c <HAL_Init+0x48>)
 8002e6e:	5ccb      	ldrb	r3, [r1, r3]
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
 8002e74:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea0 <HAL_Init+0x4c>)
 8002e76:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002e78:	2004      	movs	r0, #4
 8002e7a:	f000 f9cf 	bl	800321c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e7e:	200f      	movs	r0, #15
 8002e80:	f000 f810 	bl	8002ea4 <HAL_InitTick>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e002      	b.n	8002e94 <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e8e:	f7fe ffe1 	bl	8001e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	44020c00 	.word	0x44020c00
 8002e9c:	08013b50 	.word	0x08013b50
 8002ea0:	20000004 	.word	0x20000004

08002ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002eac:	2300      	movs	r3, #0
 8002eae:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002eb0:	4b33      	ldr	r3, [pc, #204]	@ (8002f80 <HAL_InitTick+0xdc>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e05c      	b.n	8002f76 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002ebc:	4b31      	ldr	r3, [pc, #196]	@ (8002f84 <HAL_InitTick+0xe0>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d10c      	bne.n	8002ee2 <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002ec8:	4b2f      	ldr	r3, [pc, #188]	@ (8002f88 <HAL_InitTick+0xe4>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8002f80 <HAL_InitTick+0xdc>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e037      	b.n	8002f52 <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002ee2:	f000 f9f3 	bl	80032cc <HAL_SYSTICK_GetCLKSourceConfig>
 8002ee6:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d023      	beq.n	8002f36 <HAL_InitTick+0x92>
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d82d      	bhi.n	8002f50 <HAL_InitTick+0xac>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_InitTick+0x5e>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d00d      	beq.n	8002f1c <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002f00:	e026      	b.n	8002f50 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002f02:	4b21      	ldr	r3, [pc, #132]	@ (8002f88 <HAL_InitTick+0xe4>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4b1e      	ldr	r3, [pc, #120]	@ (8002f80 <HAL_InitTick+0xdc>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002f10:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f18:	60fb      	str	r3, [r7, #12]
        break;
 8002f1a:	e01a      	b.n	8002f52 <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002f1c:	4b18      	ldr	r3, [pc, #96]	@ (8002f80 <HAL_InitTick+0xdc>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	461a      	mov	r2, r3
 8002f22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f26:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f2a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f32:	60fb      	str	r3, [r7, #12]
        break;
 8002f34:	e00d      	b.n	8002f52 <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002f36:	4b12      	ldr	r3, [pc, #72]	@ (8002f80 <HAL_InitTick+0xdc>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f44:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4c:	60fb      	str	r3, [r7, #12]
        break;
 8002f4e:	e000      	b.n	8002f52 <HAL_InitTick+0xae>
        break;
 8002f50:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f940 	bl	80031d8 <HAL_SYSTICK_Config>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e009      	b.n	8002f76 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f62:	2200      	movs	r2, #0
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6a:	f000 f90d 	bl	8003188 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002f6e:	4a07      	ldr	r2, [pc, #28]	@ (8002f8c <HAL_InitTick+0xe8>)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20000028 	.word	0x20000028
 8002f84:	e000e010 	.word	0xe000e010
 8002f88:	20000004 	.word	0x20000004
 8002f8c:	20000024 	.word	0x20000024

08002f90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_IncTick+0x20>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_IncTick+0x24>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4a04      	ldr	r2, [pc, #16]	@ (8002fb4 <HAL_IncTick+0x24>)
 8002fa2:	6013      	str	r3, [r2, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000028 	.word	0x20000028
 8002fb4:	20000b78 	.word	0x20000b78

08002fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return uwTick;
 8002fbc:	4b03      	ldr	r3, [pc, #12]	@ (8002fcc <HAL_GetTick+0x14>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000b78 	.word	0x20000b78

08002fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff ffee 	bl	8002fb8 <HAL_GetTick>
 8002fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d005      	beq.n	8002ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fea:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <HAL_Delay+0x44>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ff6:	bf00      	nop
 8002ff8:	f7ff ffde 	bl	8002fb8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	429a      	cmp	r2, r3
 8003006:	d8f7      	bhi.n	8002ff8 <HAL_Delay+0x28>
  {
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000028 	.word	0x20000028

08003018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003028:	4b0c      	ldr	r3, [pc, #48]	@ (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003034:	4013      	ands	r3, r2
 8003036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003040:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003048:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800304a:	4a04      	ldr	r2, [pc, #16]	@ (800305c <__NVIC_SetPriorityGrouping+0x44>)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	60d3      	str	r3, [r2, #12]
}
 8003050:	bf00      	nop
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003064:	4b04      	ldr	r3, [pc, #16]	@ (8003078 <__NVIC_GetPriorityGrouping+0x18>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f003 0307 	and.w	r3, r3, #7
}
 800306e:	4618      	mov	r0, r3
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800308a:	2b00      	cmp	r3, #0
 800308c:	db0b      	blt.n	80030a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800308e:	88fb      	ldrh	r3, [r7, #6]
 8003090:	f003 021f 	and.w	r2, r3, #31
 8003094:	4907      	ldr	r1, [pc, #28]	@ (80030b4 <__NVIC_EnableIRQ+0x38>)
 8003096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2001      	movs	r0, #1
 800309e:	fa00 f202 	lsl.w	r2, r0, r2
 80030a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	e000e100 	.word	0xe000e100

080030b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	6039      	str	r1, [r7, #0]
 80030c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	db0a      	blt.n	80030e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	490c      	ldr	r1, [pc, #48]	@ (8003104 <__NVIC_SetPriority+0x4c>)
 80030d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030d6:	0112      	lsls	r2, r2, #4
 80030d8:	b2d2      	uxtb	r2, r2
 80030da:	440b      	add	r3, r1
 80030dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030e0:	e00a      	b.n	80030f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	4908      	ldr	r1, [pc, #32]	@ (8003108 <__NVIC_SetPriority+0x50>)
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	3b04      	subs	r3, #4
 80030f0:	0112      	lsls	r2, r2, #4
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	440b      	add	r3, r1
 80030f6:	761a      	strb	r2, [r3, #24]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr
 8003104:	e000e100 	.word	0xe000e100
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	@ 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f1c3 0307 	rsb	r3, r3, #7
 8003126:	2b04      	cmp	r3, #4
 8003128:	bf28      	it	cs
 800312a:	2304      	movcs	r3, #4
 800312c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3304      	adds	r3, #4
 8003132:	2b06      	cmp	r3, #6
 8003134:	d902      	bls.n	800313c <NVIC_EncodePriority+0x30>
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	3b03      	subs	r3, #3
 800313a:	e000      	b.n	800313e <NVIC_EncodePriority+0x32>
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	f04f 32ff 	mov.w	r2, #4294967295
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43da      	mvns	r2, r3
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	401a      	ands	r2, r3
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003154:	f04f 31ff 	mov.w	r1, #4294967295
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	fa01 f303 	lsl.w	r3, r1, r3
 800315e:	43d9      	mvns	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003164:	4313      	orrs	r3, r2
         );
}
 8003166:	4618      	mov	r0, r3
 8003168:	3724      	adds	r7, #36	@ 0x24
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b082      	sub	sp, #8
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ff4c 	bl	8003018 <__NVIC_SetPriorityGrouping>
}
 8003180:	bf00      	nop
 8003182:	3708      	adds	r7, #8
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003196:	f7ff ff63 	bl	8003060 <__NVIC_GetPriorityGrouping>
 800319a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	6978      	ldr	r0, [r7, #20]
 80031a2:	f7ff ffb3 	bl	800310c <NVIC_EncodePriority>
 80031a6:	4602      	mov	r2, r0
 80031a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80031ac:	4611      	mov	r1, r2
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7ff ff82 	bl	80030b8 <__NVIC_SetPriority>
}
 80031b4:	bf00      	nop
 80031b6:	3718      	adds	r7, #24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	4603      	mov	r3, r0
 80031c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ff56 	bl	800307c <__NVIC_EnableIRQ>
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031e8:	d301      	bcc.n	80031ee <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 80031ea:	2301      	movs	r3, #1
 80031ec:	e00d      	b.n	800320a <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80031ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003218 <HAL_SYSTICK_Config+0x40>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80031f6:	4b08      	ldr	r3, [pc, #32]	@ (8003218 <HAL_SYSTICK_Config+0x40>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80031fc:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <HAL_SYSTICK_Config+0x40>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a05      	ldr	r2, [pc, #20]	@ (8003218 <HAL_SYSTICK_Config+0x40>)
 8003202:	f043 0303 	orr.w	r3, r3, #3
 8003206:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000e010 	.word	0xe000e010

0800321c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d844      	bhi.n	80032b4 <HAL_SYSTICK_CLKSourceConfig+0x98>
 800322a:	a201      	add	r2, pc, #4	@ (adr r2, 8003230 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 800322c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003230:	08003253 	.word	0x08003253
 8003234:	08003271 	.word	0x08003271
 8003238:	08003293 	.word	0x08003293
 800323c:	080032b5 	.word	0x080032b5
 8003240:	08003245 	.word	0x08003245
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003244:	4b1f      	ldr	r3, [pc, #124]	@ (80032c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1e      	ldr	r2, [pc, #120]	@ (80032c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 800324a:	f043 0304 	orr.w	r3, r3, #4
 800324e:	6013      	str	r3, [r2, #0]
      break;
 8003250:	e031      	b.n	80032b6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003252:	4b1c      	ldr	r3, [pc, #112]	@ (80032c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a1b      	ldr	r2, [pc, #108]	@ (80032c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800325e:	4b1a      	ldr	r3, [pc, #104]	@ (80032c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003260:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003264:	4a18      	ldr	r2, [pc, #96]	@ (80032c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003266:	f023 030c 	bic.w	r3, r3, #12
 800326a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 800326e:	e022      	b.n	80032b6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003270:	4b14      	ldr	r3, [pc, #80]	@ (80032c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a13      	ldr	r2, [pc, #76]	@ (80032c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003276:	f023 0304 	bic.w	r3, r3, #4
 800327a:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800327c:	4b12      	ldr	r3, [pc, #72]	@ (80032c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 800327e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8003282:	f023 030c 	bic.w	r3, r3, #12
 8003286:	4a10      	ldr	r2, [pc, #64]	@ (80032c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8003290:	e011      	b.n	80032b6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003292:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a0b      	ldr	r2, [pc, #44]	@ (80032c4 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8003298:	f023 0304 	bic.w	r3, r3, #4
 800329c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800329e:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80032a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032a4:	f023 030c 	bic.w	r3, r3, #12
 80032a8:	4a07      	ldr	r2, [pc, #28]	@ (80032c8 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 80032aa:	f043 0308 	orr.w	r3, r3, #8
 80032ae:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 80032b2:	e000      	b.n	80032b6 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 80032b4:	bf00      	nop
  }
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000e010 	.word	0xe000e010
 80032c8:	44020c00 	.word	0x44020c00

080032cc <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 80032d2:	4b17      	ldr	r3, [pc, #92]	@ (8003330 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 80032de:	2304      	movs	r3, #4
 80032e0:	607b      	str	r3, [r7, #4]
 80032e2:	e01e      	b.n	8003322 <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 80032e4:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 80032e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b08      	cmp	r3, #8
 80032f4:	d00f      	beq.n	8003316 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d80f      	bhi.n	800331c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b04      	cmp	r3, #4
 8003306:	d003      	beq.n	8003310 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8003308:	e008      	b.n	800331c <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
        break;
 800330e:	e008      	b.n	8003322 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8003310:	2301      	movs	r3, #1
 8003312:	607b      	str	r3, [r7, #4]
        break;
 8003314:	e005      	b.n	8003322 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003316:	2302      	movs	r3, #2
 8003318:	607b      	str	r3, [r7, #4]
        break;
 800331a:	e002      	b.n	8003322 <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 800331c:	2300      	movs	r3, #0
 800331e:	607b      	str	r3, [r7, #4]
        break;
 8003320:	bf00      	nop
    }
  }
  return systick_source;
 8003322:	687b      	ldr	r3, [r7, #4]
}
 8003324:	4618      	mov	r0, r3
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000e010 	.word	0xe000e010
 8003334:	44020c00 	.word	0x44020c00

08003338 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	460b      	mov	r3, r1
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003346:	2300      	movs	r3, #0
 8003348:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800334a:	7afb      	ldrb	r3, [r7, #11]
 800334c:	2b02      	cmp	r3, #2
 800334e:	d011      	beq.n	8003374 <HAL_EXTI_RegisterCallback+0x3c>
 8003350:	2b02      	cmp	r3, #2
 8003352:	dc13      	bgt.n	800337c <HAL_EXTI_RegisterCallback+0x44>
 8003354:	2b00      	cmp	r3, #0
 8003356:	d002      	beq.n	800335e <HAL_EXTI_RegisterCallback+0x26>
 8003358:	2b01      	cmp	r3, #1
 800335a:	d007      	beq.n	800336c <HAL_EXTI_RegisterCallback+0x34>
 800335c:	e00e      	b.n	800337c <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	609a      	str	r2, [r3, #8]
      break;
 800336a:	e00a      	b.n	8003382 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	605a      	str	r2, [r3, #4]
      break;
 8003372:	e006      	b.n	8003382 <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	609a      	str	r2, [r3, #8]
      break;
 800337a:	e002      	b.n	8003382 <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	75fb      	strb	r3, [r7, #23]
      break;
 8003380:	bf00      	nop
  }

  return status;
 8003382:	7dfb      	ldrb	r3, [r7, #23]
}
 8003384:	4618      	mov	r0, r3
 8003386:	371c      	adds	r7, #28
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d101      	bne.n	80033a4 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e003      	b.n	80033ac <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80033aa:	2300      	movs	r3, #0
  }
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0c1b      	lsrs	r3, r3, #16
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	2201      	movs	r2, #1
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	4b17      	ldr	r3, [pc, #92]	@ (8003440 <HAL_EXTI_IRQHandler+0x88>)
 80033e2:	4413      	add	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4013      	ands	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	4b0d      	ldr	r3, [pc, #52]	@ (8003444 <HAL_EXTI_IRQHandler+0x8c>)
 8003410:	4413      	add	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4013      	ands	r3, r2
 800341c:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d009      	beq.n	8003438 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d002      	beq.n	8003438 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	4798      	blx	r3
    }
  }
}
 8003438:	bf00      	nop
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	4402200c 	.word	0x4402200c
 8003444:	44022010 	.word	0x44022010

08003448 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003448:	b480      	push	{r7}
 800344a:	b087      	sub	sp, #28
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003456:	e136      	b.n	80036c6 <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	2101      	movs	r1, #1
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	fa01 f303 	lsl.w	r3, r1, r3
 8003464:	4013      	ands	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 8128 	beq.w	80036c0 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	2b02      	cmp	r3, #2
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x38>
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	2b12      	cmp	r3, #18
 800347e:	d125      	bne.n	80034cc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	08da      	lsrs	r2, r3, #3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3208      	adds	r2, #8
 8003488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800348c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	220f      	movs	r2, #15
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4013      	ands	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	f003 020f 	and.w	r2, r3, #15
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	08da      	lsrs	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3208      	adds	r2, #8
 80034c6:	6979      	ldr	r1, [r7, #20]
 80034c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	2203      	movs	r2, #3
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4013      	ands	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f003 0203 	and.w	r2, r3, #3
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d00b      	beq.n	8003520 <HAL_GPIO_Init+0xd8>
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d007      	beq.n	8003520 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003514:	2b11      	cmp	r3, #17
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b12      	cmp	r3, #18
 800351e:	d130      	bne.n	8003582 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	2203      	movs	r2, #3
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	43db      	mvns	r3, r3
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	4013      	ands	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	005b      	lsls	r3, r3, #1
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003556:	2201      	movs	r2, #1
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43db      	mvns	r3, r3
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4013      	ands	r3, r2
 8003564:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	f003 0201 	and.w	r2, r3, #1
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	fa02 f303 	lsl.w	r3, r2, r3
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d017      	beq.n	80035ba <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	2203      	movs	r2, #3
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4013      	ands	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	005b      	lsls	r3, r3, #1
 80035aa:	fa02 f303 	lsl.w	r3, r2, r3
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d07c      	beq.n	80036c0 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80035c6:	4a47      	ldr	r2, [pc, #284]	@ (80036e4 <HAL_GPIO_Init+0x29c>)
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	089b      	lsrs	r3, r3, #2
 80035cc:	3318      	adds	r3, #24
 80035ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	220f      	movs	r2, #15
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	4013      	ands	r3, r2
 80035e8:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	0a9a      	lsrs	r2, r3, #10
 80035ee:	4b3e      	ldr	r3, [pc, #248]	@ (80036e8 <HAL_GPIO_Init+0x2a0>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	f002 0203 	and.w	r2, r2, #3
 80035f8:	00d2      	lsls	r2, r2, #3
 80035fa:	4093      	lsls	r3, r2
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003602:	4938      	ldr	r1, [pc, #224]	@ (80036e4 <HAL_GPIO_Init+0x29c>)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	3318      	adds	r3, #24
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003610:	4b34      	ldr	r3, [pc, #208]	@ (80036e4 <HAL_GPIO_Init+0x29c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	43db      	mvns	r3, r3
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	4013      	ands	r3, r2
 800361e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003634:	4a2b      	ldr	r2, [pc, #172]	@ (80036e4 <HAL_GPIO_Init+0x29c>)
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800363a:	4b2a      	ldr	r3, [pc, #168]	@ (80036e4 <HAL_GPIO_Init+0x29c>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	43db      	mvns	r3, r3
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	4013      	ands	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800365e:	4a21      	ldr	r2, [pc, #132]	@ (80036e4 <HAL_GPIO_Init+0x29c>)
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003664:	4b1f      	ldr	r3, [pc, #124]	@ (80036e4 <HAL_GPIO_Init+0x29c>)
 8003666:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800366a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	43db      	mvns	r3, r3
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	4013      	ands	r3, r2
 8003674:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800368a:	4a16      	ldr	r2, [pc, #88]	@ (80036e4 <HAL_GPIO_Init+0x29c>)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003692:	4b14      	ldr	r3, [pc, #80]	@ (80036e4 <HAL_GPIO_Init+0x29c>)
 8003694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003698:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	43db      	mvns	r3, r3
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4013      	ands	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80036b8:	4a0a      	ldr	r2, [pc, #40]	@ (80036e4 <HAL_GPIO_Init+0x29c>)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	3301      	adds	r3, #1
 80036c4:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f47f aec1 	bne.w	8003458 <HAL_GPIO_Init+0x10>
  }
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	44022000 	.word	0x44022000
 80036e8:	002f7f7f 	.word	0x002f7f7f

080036ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	807b      	strh	r3, [r7, #2]
 80036f8:	4613      	mov	r3, r2
 80036fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036fc:	787b      	ldrb	r3, [r7, #1]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003702:	887a      	ldrh	r2, [r7, #2]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003708:	e002      	b.n	8003710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800372e:	887a      	ldrh	r2, [r7, #2]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	4013      	ands	r3, r2
 8003734:	041a      	lsls	r2, r3, #16
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	43d9      	mvns	r1, r3
 800373a:	887b      	ldrh	r3, [r7, #2]
 800373c:	400b      	ands	r3, r1
 800373e:	431a      	orrs	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	619a      	str	r2, [r3, #24]
}
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e02a      	b.n	80037b8 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d106      	bne.n	800377c <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fe fb74 	bl	8001e64 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685a      	ldr	r2, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 8003792:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	68f9      	ldr	r1, [r7, #12]
 800379c:	430b      	orrs	r3, r1
 800379e:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_HASH_DeInit>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_DeInit(HASH_HandleTypeDef *hhash)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  /* Check the HASH handle allocation */
  if (hhash == NULL)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <HAL_HASH_DeInit+0x12>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e015      	b.n	80037fe <HAL_HASH_DeInit+0x3e>
  }

  /* Change the default HASH phase */
  hhash->Phase = HAL_HASH_PHASE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Reset HashInCount */
  hhash->HashInCount = 0U;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	61da      	str	r2, [r3, #28]

  /* Reset multi buffers accumulation flag */
  hhash->Accumulation = 0U;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DeInit the low level hardware */
  hhash->MspDeInitCallback(hhash);
#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_HASH_MspDeInit(hhash);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7fe fb58 	bl	8001e9c <HAL_HASH_MspDeInit>
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_RESET;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  __HAL_UNLOCK(hhash);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_HASH_Start_IT>:
  * @param  pOutBuffer pointer to the computed digest.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Start_IT(HASH_HandleTypeDef *hhash, const uint8_t *const pInBuffer, uint32_t Size,
                                    uint8_t *const pOutBuffer)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b086      	sub	sp, #24
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_HASH_StateTypeDef temp_state;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_HASH_Start_IT+0x18>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e05c      	b.n	80038d8 <HAL_HASH_Start_IT+0xd2>
  }

  /* Check if peripheral is ready to start process or suspended */
  temp_state = hhash->State;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003824:	75bb      	strb	r3, [r7, #22]
  if ((temp_state == HAL_HASH_STATE_READY) || (temp_state == HAL_HASH_STATE_SUSPENDED))
 8003826:	7dbb      	ldrb	r3, [r7, #22]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d002      	beq.n	8003832 <HAL_HASH_Start_IT+0x2c>
 800382c:	7dbb      	ldrb	r3, [r7, #22]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d14f      	bne.n	80038d2 <HAL_HASH_Start_IT+0xcc>
  {
    /* Process Locked */
    __HAL_LOCK(hhash);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_HASH_Start_IT+0x3a>
 800383c:	2302      	movs	r3, #2
 800383e:	e04b      	b.n	80038d8 <HAL_HASH_Start_IT+0xd2>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    if (hhash->State == HAL_HASH_STATE_READY)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b01      	cmp	r3, #1
 8003852:	d128      	bne.n	80038a6 <HAL_HASH_Start_IT+0xa0>
    {
      /* Reset HashInCount and Initialize Size, pHashInBuffPtr and pHashOutBuffPtr parameters */
      hhash->HashInCount =  0U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	61da      	str	r2, [r3, #28]
      hhash->pHashInBuffPtr = pInBuffer;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	615a      	str	r2, [r3, #20]
      hhash->pHashOutBuffPtr = pOutBuffer;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	619a      	str	r2, [r3, #24]
      hhash->Size = Size;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	621a      	str	r2, [r3, #32]

      /* Set HASH mode */
      CLEAR_BIT(hhash->Instance->CR, HASH_CR_MODE);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800387a:	601a      	str	r2, [r3, #0]
      /* Reset the HASH processor core */
      MODIFY_REG(hhash->Instance->CR, HASH_CR_INIT, HASH_CR_INIT);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0204 	orr.w	r2, r2, #4
 800388a:	601a      	str	r2, [r3, #0]

      /* Configure the number of valid bits in last word of the message */
      MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (Size % 4U));
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f023 011f 	bic.w	r1, r3, #31
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f003 0303 	and.w	r3, r3, #3
 800389c:	00da      	lsls	r2, r3, #3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	609a      	str	r2, [r3, #8]
    }
    /* Change the HASH state */
    hhash->State = HAL_HASH_STATE_BUSY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2202      	movs	r2, #2
 80038aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Set the phase */
    hhash->Phase = HAL_HASH_PHASE_PROCESS;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    /* Enable the specified HASH interrupt*/
    __HAL_HASH_ENABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a1a      	ldr	r2, [r3, #32]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f042 0203 	orr.w	r2, r2, #3
 80038c4:	621a      	str	r2, [r3, #32]

    status = HASH_WriteData_IT(hhash);
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 f82c 	bl	8003924 <HASH_WriteData_IT>
 80038cc:	4603      	mov	r3, r0
 80038ce:	75fb      	strb	r3, [r7, #23]
 80038d0:	e001      	b.n	80038d6 <HAL_HASH_Start_IT+0xd0>
  }
  else
  {
    status =  HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
 80038d4:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_HASH_InCpltCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_InCpltCallback(HASH_HandleTypeDef *hhash)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_InCpltCallback() can be implemented in the user file.
   */
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <HAL_HASH_ErrorCallback>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval None
  */
__weak void HAL_HASH_ErrorCallback(HASH_HandleTypeDef *hhash)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  UNUSED(hhash);

  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_HASH_ErrorCallback() can be implemented in the user file.
   */
}
 80038fc:	bf00      	nop
 80038fe:	370c      	adds	r7, #12
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_HASH_GetState>:
  * @note   The API yields the current state of the handle (BUSY, READY,...).
  * @param  hhash HASH handle.
  * @retval HAL HASH state
  */
HAL_HASH_StateTypeDef HAL_HASH_GetState(const HASH_HandleTypeDef *hhash)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  return hhash->State;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003916:	b2db      	uxtb	r3, r3
}
 8003918:	4618      	mov	r0, r3
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HASH_WriteData_IT>:
  * @brief  Feed the input buffer to the HASH peripheral in interruption mode.
  * @param  hhash HASH handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData_IT(HASH_HandleTypeDef *hhash)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t buffercounter;
  uint32_t count;
  __IO uint32_t keyaddr = (uint32_t)(hhash->pHashKeyBuffPtr);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	613b      	str	r3, [r7, #16]
  __IO uint32_t inputaddr = (uint32_t)(hhash->pHashInBuffPtr);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	60fb      	str	r3, [r7, #12]
  uint32_t nbbytePartialHash  = (((hhash->Instance->SR) >> 16U) * 4U); /* Nb byte  to enter in HASH fifo to trig
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	0c1b      	lsrs	r3, r3, #16
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	617b      	str	r3, [r7, #20]
                                                                      a partial HASH computation*/

  if (hhash->State == HAL_HASH_STATE_BUSY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	f040 82ea 	bne.w	8003f26 <HASH_WriteData_IT+0x602>
  {
    if ((hhash->Instance->CR & HASH_CR_MODE) == 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395c:	2b00      	cmp	r3, #0
 800395e:	f040 80b3 	bne.w	8003ac8 <HASH_WriteData_IT+0x1a4>
      }
      else
      {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a1b      	ldr	r3, [r3, #32]
 800396e:	429a      	cmp	r2, r3
 8003970:	d258      	bcs.n	8003a24 <HASH_WriteData_IT+0x100>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	e015      	b.n	80039a4 <HASH_WriteData_IT+0x80>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	461a      	mov	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	3304      	adds	r3, #4
 8003988:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	69db      	ldr	r3, [r3, #28]
 800398e:	1d1a      	adds	r2, r3, #4
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	1d1a      	adds	r2, r3, #4
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	615a      	str	r2, [r3, #20]
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3304      	adds	r3, #4
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	69fa      	ldr	r2, [r7, #28]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d3e5      	bcc.n	8003978 <HASH_WriteData_IT+0x54>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 80039ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80039b0:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d117      	bne.n	80039ee <HASH_WriteData_IT+0xca>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6a1a      	ldr	r2, [r3, #32]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0203 	bic.w	r2, r2, #3
 80039cc:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039d2:	f043 0204 	orr.w	r2, r3, #4
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e2ad      	b.n	8003f4a <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	f003 0301 	and.w	r3, r3, #1
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0da      	beq.n	80039b2 <HASH_WriteData_IT+0x8e>
 80039fc:	e2a4      	b.n	8003f48 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < hhash->Size)
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)inputaddr;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	461a      	mov	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	605a      	str	r2, [r3, #4]
            inputaddr += 4U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	60fb      	str	r3, [r7, #12]
            hhash->HashInCount += 4U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	69db      	ldr	r3, [r3, #28]
 8003a14:	1d1a      	adds	r2, r3, #4
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	61da      	str	r2, [r3, #28]
            hhash->pHashInBuffPtr += 4U;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	1d1a      	adds	r2, r3, #4
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	615a      	str	r2, [r3, #20]
          while ((hhash->HashInCount) < hhash->Size)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69da      	ldr	r2, [r3, #28]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d3e6      	bcc.n	80039fe <HASH_WriteData_IT+0xda>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
          /*Call registered Input complete callback*/
          hhash->InCpltCallback(hhash);
#else
          /*Call legacy weak Input complete callback*/
          HAL_HASH_InCpltCallback(hhash);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff55 	bl	80038e0 <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
          if (hhash->Accumulation == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d138      	bne.n	8003ab0 <HASH_WriteData_IT+0x18c>
          {
            if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	f040 827d 	bne.w	8003f48 <HASH_WriteData_IT+0x624>
            {
              /* Start the message padding then the Digest calculation */
              SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a5c:	609a      	str	r2, [r3, #8]

              /* Wait for HASH_FLAG_DCIS flag to be set */
              count = HASH_TIMEOUTVALUE;
 8003a5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a62:	61bb      	str	r3, [r7, #24]
              do
              {
                count--;
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	61bb      	str	r3, [r7, #24]
                if (count == 0U)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d117      	bne.n	8003aa0 <HASH_WriteData_IT+0x17c>
                {
                  /* Disable Interrupts */
                  __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6a1a      	ldr	r2, [r3, #32]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f022 0203 	bic.w	r2, r2, #3
 8003a7e:	621a      	str	r2, [r3, #32]

                  /* Change state */
                  hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a84:	f043 0204 	orr.w	r2, r3, #4
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	635a      	str	r2, [r3, #52]	@ 0x34
                  hhash->State = HAL_HASH_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                  __HAL_UNLOCK(hhash);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                  return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e254      	b.n	8003f4a <HASH_WriteData_IT+0x626>
                }
              } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0da      	beq.n	8003a64 <HASH_WriteData_IT+0x140>
 8003aae:	e24b      	b.n	8003f48 <HASH_WriteData_IT+0x624>
            }
          }
          else
          {
            /* Reset multi buffers accumulation flag */
            hhash->Accumulation = 0U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	63da      	str	r2, [r3, #60]	@ 0x3c
            /* Disable Interrupts */
            __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a1a      	ldr	r2, [r3, #32]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f022 0201 	bic.w	r2, r2, #1
 8003ac4:	621a      	str	r2, [r3, #32]
 8003ac6:	e23f      	b.n	8003f48 <HASH_WriteData_IT+0x624>
      }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
    }
    else /*HMAC */
    {
      if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2) /* loading input*/
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	f040 80df 	bne.w	8003c92 <HASH_WriteData_IT+0x36e>
          __HAL_UNLOCK(hhash);
        }
        else
        {
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
          if (hhash->Accumulation == 1U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d108      	bne.n	8003aee <HASH_WriteData_IT+0x1ca>
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 0U);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 021f 	bic.w	r2, r2, #31
 8003aea:	609a      	str	r2, [r3, #8]
 8003aec:	e00d      	b.n	8003b0a <HASH_WriteData_IT+0x1e6>
          }
          else
          {
            /* Configure the number of valid bits in last word of the message */
            MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * (hhash->Size % 4U));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f023 011f 	bic.w	r1, r3, #31
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	00da      	lsls	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	609a      	str	r2, [r3, #8]
          }
          if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Size))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	441a      	add	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a1b      	ldr	r3, [r3, #32]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d258      	bcs.n	8003bcc <HASH_WriteData_IT+0x2a8>
          {
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	e015      	b.n	8003b4c <HASH_WriteData_IT+0x228>
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	461a      	mov	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	69db      	ldr	r3, [r3, #28]
 8003b36:	1d1a      	adds	r2, r3, #4
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	1d1a      	adds	r2, r3, #4
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	615a      	str	r2, [r3, #20]
            for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d3e5      	bcc.n	8003b20 <HASH_WriteData_IT+0x1fc>
            }
            /* Wait for HASH_IT_DINI flag to be set */
            count = HASH_TIMEOUTVALUE;
 8003b54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b58:	61bb      	str	r3, [r7, #24]
            do
            {
              count--;
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	61bb      	str	r3, [r7, #24]
              if (count == 0U)
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d117      	bne.n	8003b96 <HASH_WriteData_IT+0x272>
              {
                /* Disable Interrupts */
                __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6a1a      	ldr	r2, [r3, #32]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0203 	bic.w	r2, r2, #3
 8003b74:	621a      	str	r2, [r3, #32]

                /* Change state */
                hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b7a:	f043 0204 	orr.w	r2, r3, #4
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	635a      	str	r2, [r3, #52]	@ 0x34
                hhash->State = HAL_HASH_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                __HAL_UNLOCK(hhash);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e1d9      	b.n	8003f4a <HASH_WriteData_IT+0x626>
              }
            } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0da      	beq.n	8003b5a <HASH_WriteData_IT+0x236>
 8003ba4:	e1d0      	b.n	8003f48 <HASH_WriteData_IT+0x624>
          else
          {
            while ((hhash->HashInCount) < hhash->Size)
            {
              /* Write input data 4 bytes at a time */
              hhash->Instance->DIN = *(uint32_t *)inputaddr;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	461a      	mov	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	605a      	str	r2, [r3, #4]
              inputaddr += 4U;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3304      	adds	r3, #4
 8003bb6:	60fb      	str	r3, [r7, #12]
              hhash->HashInCount += 4U;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	1d1a      	adds	r2, r3, #4
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	61da      	str	r2, [r3, #28]
              hhash->pHashInBuffPtr += 4U;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	1d1a      	adds	r2, r3, #4
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	615a      	str	r2, [r3, #20]
            while ((hhash->HashInCount) < hhash->Size)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69da      	ldr	r2, [r3, #28]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d3e6      	bcc.n	8003ba6 <HASH_WriteData_IT+0x282>
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
            /*Call registered Input complete callback*/
            hhash->InCpltCallback(hhash);
#else
            /*Call legacy weak Input complete callback*/
            HAL_HASH_InCpltCallback(hhash);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff fe81 	bl	80038e0 <HAL_HASH_InCpltCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */

            if (hhash->Accumulation == 0U)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d143      	bne.n	8003c6e <HASH_WriteData_IT+0x34a>
            {
              if (__HAL_HASH_GET_IT_SOURCE(hhash, HASH_IT_DINI))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	f040 81a9 	bne.w	8003f48 <HASH_WriteData_IT+0x624>
              {
                /* Start the message padding then the Digest calculation */
                SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c04:	609a      	str	r2, [r3, #8]

                /* Wait for HASH_FLAG_BUSY flag to be set */
                count = HASH_TIMEOUTVALUE;
 8003c06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c0a:	61bb      	str	r3, [r7, #24]
                do
                {
                  count--;
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	61bb      	str	r3, [r7, #24]
                  if (count == 0U)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d117      	bne.n	8003c48 <HASH_WriteData_IT+0x324>
                  {
                    /* Disable Interrupts */
                    __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0203 	bic.w	r2, r2, #3
 8003c26:	621a      	str	r2, [r3, #32]

                    /* Change state */
                    hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2c:	f043 0204 	orr.w	r2, r3, #4
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	635a      	str	r2, [r3, #52]	@ 0x34
                    hhash->State = HAL_HASH_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                    __HAL_UNLOCK(hhash);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
                    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e180      	b.n	8003f4a <HASH_WriteData_IT+0x626>
                  }
                } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d0da      	beq.n	8003c0c <HASH_WriteData_IT+0x2e8>

                hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_3;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2205      	movs	r2, #5
 8003c5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                hhash->HashInCount = 0U;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	61da      	str	r2, [r3, #28]
                hhash->pHashKeyBuffPtr = hhash->Init.pKey;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c6c:	e16c      	b.n	8003f48 <HASH_WriteData_IT+0x624>
            }

            else
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a1a      	ldr	r2, [r3, #32]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 0203 	bic.w	r2, r2, #3
 8003c7c:	621a      	str	r2, [r3, #32]
              hhash->State = HAL_HASH_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	e15b      	b.n	8003f4a <HASH_WriteData_IT+0x626>
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
        }
#endif /* USE_HAL_HASH_SUSPEND_RESUME */
      }

      else if (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3)/* loading Key*/
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c98:	2b05      	cmp	r3, #5
 8003c9a:	f040 80a1 	bne.w	8003de0 <HASH_WriteData_IT+0x4bc>
      {

        /* Configure the number of valid bits in last word of the Key */
        MODIFY_REG(hhash->Instance->STR, HASH_STR_NBLW, 8U * ((hhash->Init.KeySize) % 4U));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f023 011f 	bic.w	r1, r3, #31
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	00da      	lsls	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	609a      	str	r2, [r3, #8]

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69da      	ldr	r2, [r3, #28]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	441a      	add	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d253      	bcs.n	8003d72 <HASH_WriteData_IT+0x44e>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	e015      	b.n	8003cfc <HASH_WriteData_IT+0x3d8>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	69db      	ldr	r3, [r3, #28]
 8003ce6:	1d1a      	adds	r2, r3, #4
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	1d1a      	adds	r2, r3, #4
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d3e5      	bcc.n	8003cd0 <HASH_WriteData_IT+0x3ac>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003d04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d08:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d117      	bne.n	8003d46 <HASH_WriteData_IT+0x422>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0203 	bic.w	r2, r2, #3
 8003d24:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d2a:	f043 0204 	orr.w	r2, r3, #4
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e101      	b.n	8003f4a <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d0da      	beq.n	8003d0a <HASH_WriteData_IT+0x3e6>
 8003d54:	e0f8      	b.n	8003f48 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	3304      	adds	r3, #4
 8003d66:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	1d1a      	adds	r2, r3, #4
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	61da      	str	r2, [r3, #28]
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69da      	ldr	r2, [r3, #28]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d3eb      	bcc.n	8003d56 <HASH_WriteData_IT+0x432>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d8c:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_DCIS flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003d8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d92:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d117      	bne.n	8003dd0 <HASH_WriteData_IT+0x4ac>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6a1a      	ldr	r2, [r3, #32]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0203 	bic.w	r2, r2, #3
 8003dae:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003db4:	f043 0204 	orr.w	r2, r3, #4
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0bc      	b.n	8003f4a <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DCIS));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0da      	beq.n	8003d94 <HASH_WriteData_IT+0x470>
 8003dde:	e0b3      	b.n	8003f48 <HASH_WriteData_IT+0x624>
        }
      }
      else  /*first step , loading key*/
      {

        hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_1;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2203      	movs	r2, #3
 8003de4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

        if (((hhash->HashInCount) + nbbytePartialHash) < (hhash->Init.KeySize))
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	441a      	add	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d258      	bcs.n	8003eaa <HASH_WriteData_IT+0x586>
        {
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	61fb      	str	r3, [r7, #28]
 8003dfc:	e015      	b.n	8003e2a <HASH_WriteData_IT+0x506>
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	461a      	mov	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6812      	ldr	r2, [r2, #0]
 8003e08:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	1d1a      	adds	r2, r3, #4
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	1d1a      	adds	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	625a      	str	r2, [r3, #36]	@ 0x24
          for (buffercounter = 0U; buffercounter < nbbytePartialHash ; buffercounter += 4U)
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	3304      	adds	r3, #4
 8003e28:	61fb      	str	r3, [r7, #28]
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d3e5      	bcc.n	8003dfe <HASH_WriteData_IT+0x4da>
          }
          /* Wait for HASH_IT_DINI flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003e36:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d117      	bne.n	8003e74 <HASH_WriteData_IT+0x550>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a1a      	ldr	r2, [r3, #32]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f022 0203 	bic.w	r2, r2, #3
 8003e52:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e58:	f043 0204 	orr.w	r2, r3, #4
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e06a      	b.n	8003f4a <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_CLR(hhash->Instance->SR, HASH_FLAG_DINIS));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0da      	beq.n	8003e38 <HASH_WriteData_IT+0x514>
 8003e82:	e061      	b.n	8003f48 <HASH_WriteData_IT+0x624>
        else
        {
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
          {
            /* Write input data 4 bytes at a time */
            hhash->Instance->DIN = *(uint32_t *)keyaddr;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	461a      	mov	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	605a      	str	r2, [r3, #4]
            keyaddr += 4U;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	3304      	adds	r3, #4
 8003e94:	613b      	str	r3, [r7, #16]
            hhash->HashInCount += 4U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	1d1a      	adds	r2, r3, #4
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	61da      	str	r2, [r3, #28]
            hhash->pHashKeyBuffPtr += 4U;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	1d1a      	adds	r2, r3, #4
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	625a      	str	r2, [r3, #36]	@ 0x24
          while ((hhash->HashInCount) < (hhash->Init.KeySize))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69da      	ldr	r2, [r3, #28]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d3e6      	bcc.n	8003e84 <HASH_WriteData_IT+0x560>
          }
          /* Start the message padding then the Digest calculation */
          SET_BIT(hhash->Instance->STR, HASH_STR_DCAL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ec4:	609a      	str	r2, [r3, #8]

          /* Wait for HASH_FLAG_BUSY flag to be set */
          count = HASH_TIMEOUTVALUE;
 8003ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003eca:	61bb      	str	r3, [r7, #24]
          do
          {
            count--;
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	61bb      	str	r3, [r7, #24]
            if (count == 0U)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d117      	bne.n	8003f08 <HASH_WriteData_IT+0x5e4>
            {
              /* Disable Interrupts */
              __HAL_HASH_DISABLE_IT(hhash, HASH_IT_DINI | HASH_IT_DCI);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0203 	bic.w	r2, r2, #3
 8003ee6:	621a      	str	r2, [r3, #32]

              /* Change state */
              hhash->ErrorCode |= HAL_HASH_ERROR_TIMEOUT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003eec:	f043 0204 	orr.w	r2, r3, #4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	635a      	str	r2, [r3, #52]	@ 0x34
              hhash->State = HAL_HASH_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
              __HAL_UNLOCK(hhash);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
              return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e020      	b.n	8003f4a <HASH_WriteData_IT+0x626>
            }
          } while (HAL_IS_BIT_SET(hhash->Instance->SR, HASH_FLAG_BUSY));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d0da      	beq.n	8003ecc <HASH_WriteData_IT+0x5a8>
          /*change Phase to step 2*/
          hhash->Phase = HAL_HASH_PHASE_HMAC_STEP_2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2204      	movs	r2, #4
 8003f1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
          hhash->HashInCount = 0U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	61da      	str	r2, [r3, #28]
 8003f24:	e010      	b.n	8003f48 <HASH_WriteData_IT+0x624>
        }
      }
    }
  }
  else if ((hhash->State == HAL_HASH_STATE_SUSPENDED))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d101      	bne.n	8003f36 <HASH_WriteData_IT+0x612>
  {
    return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e009      	b.n	8003f4a <HASH_WriteData_IT+0x626>
  }
  else
  {
    /* Busy error code field */
    hhash->ErrorCode |= HAL_HASH_ERROR_BUSY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f3a:	f043 0201 	orr.w	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_REGISTER_CALLBACKS == 1U)
    /*Call registered error callback*/
    hhash->ErrorCallback(hhash);
#else
    /*Call legacy weak error callback*/
    HAL_HASH_ErrorCallback(hhash);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff fcd6 	bl	80038f4 <HAL_HASH_ErrorCallback>
#endif /* USE_HAL_HASH_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e08d      	b.n	8004080 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d106      	bne.n	8003f7e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7fd ffa3 	bl	8001ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2224      	movs	r2, #36	@ 0x24
 8003f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0201 	bic.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fa2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689a      	ldr	r2, [r3, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fb2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d107      	bne.n	8003fcc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fc8:	609a      	str	r2, [r3, #8]
 8003fca:	e006      	b.n	8003fda <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fd8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d108      	bne.n	8003ff4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	e007      	b.n	8004004 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004002:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004012:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004016:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004026:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69d9      	ldr	r1, [r3, #28]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a1a      	ldr	r2, [r3, #32]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0201 	orr.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b20      	cmp	r3, #32
 800409c:	d138      	bne.n	8004110 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040a8:	2302      	movs	r3, #2
 80040aa:	e032      	b.n	8004112 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2224      	movs	r2, #36	@ 0x24
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80040da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6819      	ldr	r1, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	683a      	ldr	r2, [r7, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e000      	b.n	8004112 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004110:	2302      	movs	r3, #2
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	370c      	adds	r7, #12
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr

0800411e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800411e:	b480      	push	{r7}
 8004120:	b085      	sub	sp, #20
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
 8004126:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800412e:	b2db      	uxtb	r3, r3
 8004130:	2b20      	cmp	r3, #32
 8004132:	d139      	bne.n	80041a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800413e:	2302      	movs	r3, #2
 8004140:	e033      	b.n	80041aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2224      	movs	r2, #36	@ 0x24
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004170:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	4313      	orrs	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2220      	movs	r2, #32
 8004198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041a4:	2300      	movs	r3, #0
 80041a6:	e000      	b.n	80041aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041a8:	2302      	movs	r3, #2
  }
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b085      	sub	sp, #20
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80041c2:	230a      	movs	r3, #10
 80041c4:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80041c6:	e002      	b.n	80041ce <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1f9      	bne.n	80041c8 <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80041d4:	887b      	ldrh	r3, [r7, #2]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	0c1b      	lsrs	r3, r3, #16
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ea:	b29b      	uxth	r3, r3
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004204:	230a      	movs	r3, #10
 8004206:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8004208:	e002      	b.n	8004210 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3b01      	subs	r3, #1
 800420e:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1f9      	bne.n	800420a <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800421e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	0c1b      	lsrs	r3, r3, #16
 8004226:	b29b      	uxth	r3, r3
 8004228:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800422c:	b29b      	uxth	r3, r3
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800423a:	b480      	push	{r7}
 800423c:	b085      	sub	sp, #20
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	460b      	mov	r3, r1
 8004244:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8004246:	230a      	movs	r3, #10
 8004248:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800424a:	e002      	b.n	8004252 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3b01      	subs	r3, #1
 8004250:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1f9      	bne.n	800424c <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8004258:	887b      	ldrh	r3, [r7, #2]
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004260:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	0c1b      	lsrs	r3, r3, #16
 8004268:	b29b      	uxth	r3, r3
 800426a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800426e:	b29b      	uxth	r3, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af02      	add	r7, sp, #8
 8004282:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0f3      	b.n	8004476 <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d106      	bne.n	80042a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fe f9d0 	bl	8002648 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2203      	movs	r2, #3
 80042ac:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f009 f860 	bl	800d37a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	7c1a      	ldrb	r2, [r3, #16]
 80042c2:	f88d 2000 	strb.w	r2, [sp]
 80042c6:	3304      	adds	r3, #4
 80042c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042ca:	f009 f824 	bl	800d316 <USB_CoreInit>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e0ca      	b.n	8004476 <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f009 f85c 	bl	800d3a4 <USB_SetCurrentMode>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e0bb      	b.n	8004476 <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042fe:	2300      	movs	r3, #0
 8004300:	73fb      	strb	r3, [r7, #15]
 8004302:	e03f      	b.n	8004384 <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004304:	7bfa      	ldrb	r2, [r7, #15]
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	440b      	add	r3, r1
 8004312:	3315      	adds	r3, #21
 8004314:	2201      	movs	r2, #1
 8004316:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004318:	7bfa      	ldrb	r2, [r7, #15]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	4613      	mov	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	440b      	add	r3, r1
 8004326:	3314      	adds	r3, #20
 8004328:	7bfa      	ldrb	r2, [r7, #15]
 800432a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800432c:	7bfa      	ldrb	r2, [r7, #15]
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	440b      	add	r3, r1
 800433a:	3317      	adds	r3, #23
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004340:	7bfa      	ldrb	r2, [r7, #15]
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	440b      	add	r3, r1
 800434e:	3324      	adds	r3, #36	@ 0x24
 8004350:	2200      	movs	r2, #0
 8004352:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	440b      	add	r3, r1
 8004362:	3328      	adds	r3, #40	@ 0x28
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004368:	7bfb      	ldrb	r3, [r7, #15]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	440b      	add	r3, r1
 8004378:	3304      	adds	r3, #4
 800437a:	2200      	movs	r2, #0
 800437c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	3301      	adds	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	791b      	ldrb	r3, [r3, #4]
 8004388:	7bfa      	ldrb	r2, [r7, #15]
 800438a:	429a      	cmp	r2, r3
 800438c:	d3ba      	bcc.n	8004304 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800438e:	2300      	movs	r3, #0
 8004390:	73fb      	strb	r3, [r7, #15]
 8004392:	e044      	b.n	800441e <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004394:	7bfa      	ldrb	r2, [r7, #15]
 8004396:	6879      	ldr	r1, [r7, #4]
 8004398:	4613      	mov	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4413      	add	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	440b      	add	r3, r1
 80043a2:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80043a6:	2200      	movs	r2, #0
 80043a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043aa:	7bfa      	ldrb	r2, [r7, #15]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	4413      	add	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	440b      	add	r3, r1
 80043b8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80043bc:	7bfa      	ldrb	r2, [r7, #15]
 80043be:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043c0:	7bfa      	ldrb	r2, [r7, #15]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	4613      	mov	r3, r2
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	4413      	add	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	440b      	add	r3, r1
 80043ce:	f203 1357 	addw	r3, r3, #343	@ 0x157
 80043d2:	2200      	movs	r2, #0
 80043d4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	440b      	add	r3, r1
 80043e4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043ec:	7bfa      	ldrb	r2, [r7, #15]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	440b      	add	r3, r1
 80043fa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004402:	7bfa      	ldrb	r2, [r7, #15]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	440b      	add	r3, r1
 8004410:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	3301      	adds	r3, #1
 800441c:	73fb      	strb	r3, [r7, #15]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	791b      	ldrb	r3, [r3, #4]
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	429a      	cmp	r2, r3
 8004426:	d3b5      	bcc.n	8004394 <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	7c1a      	ldrb	r2, [r3, #16]
 8004430:	f88d 2000 	strb.w	r2, [sp]
 8004434:	3304      	adds	r3, #4
 8004436:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004438:	f008 ffd7 	bl	800d3ea <USB_DevInit>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e013      	b.n	8004476 <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	7b1b      	ldrb	r3, [r3, #12]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d102      	bne.n	800446a <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f001 fb6c 	bl	8005b42 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f00a fe30 	bl	800f0d4 <USB_DevDisconnect>

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3710      	adds	r7, #16
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_PCD_Start+0x16>
 8004490:	2302      	movs	r3, #2
 8004492:	e012      	b.n	80044ba <HAL_PCD_Start+0x3c>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f008 ff56 	bl	800d352 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f00a fe01 	bl	800f0b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f00a fe11 	bl	800f0f6 <USB_ReadInterrupts>
 80044d4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 faf3 	bl	8004acc <PCD_EP_ISR_Handler>

    return;
 80044e6:	e0de      	b.n	80046a6 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d010      	beq.n	8004514 <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8004500:	400b      	ands	r3, r1
 8004502:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f00b fe60 	bl	80101ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800450a:	2100      	movs	r1, #0
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f000 f8e1 	bl	80046d4 <HAL_PCD_SetAddress>

    return;
 8004512:	e0c8      	b.n	80046a6 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d009      	beq.n	8004532 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 800452c:	400b      	ands	r3, r1
 800452e:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8004530:	e0b9      	b.n	80046a6 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d009      	beq.n	8004550 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 800454a:	400b      	ands	r3, r1
 800454c:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 800454e:	e0aa      	b.n	80046a6 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d029      	beq.n	80045ae <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0204 	bic.w	r2, r2, #4
 8004568:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0208 	bic.w	r2, r2, #8
 8004578:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8004580:	2b01      	cmp	r3, #1
 8004582:	d107      	bne.n	8004594 <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800458c:	2100      	movs	r1, #0
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f001 faf9 	bl	8005b86 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f893 	bl	80046c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80045a8:	400b      	ands	r3, r1
 80045aa:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80045ac:	e07b      	b.n	80046a6 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01c      	beq.n	80045f2 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0208 	orr.w	r2, r2, #8
 80045c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 80045d6:	400b      	ands	r3, r1
 80045d8:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0204 	orr.w	r2, r2, #4
 80045e8:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f85e 	bl	80046ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80045f0:	e059      	b.n	80046a6 <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d033      	beq.n	8004664 <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 800460a:	400b      	ands	r3, r1
 800460c:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8004614:	2b00      	cmp	r3, #0
 8004616:	d121      	bne.n	800465c <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0204 	orr.w	r2, r2, #4
 8004626:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0208 	orr.w	r2, r2, #8
 8004636:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004646:	089b      	lsrs	r3, r3, #2
 8004648:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004652:	2101      	movs	r1, #1
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f001 fa96 	bl	8005b86 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800465a:	e024      	b.n	80046a6 <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f825 	bl	80046ac <HAL_PCD_SuspendCallback>
    return;
 8004662:	e020      	b.n	80046a6 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00c      	beq.n	8004688 <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 800467c:	400b      	ands	r3, r1
 800467e:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f00b fd94 	bl	80101ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004686:	e00e      	b.n	80046a6 <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d009      	beq.n	80046a6 <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80046a0:	400b      	ands	r3, r1
 80046a2:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80046a4:	bf00      	nop
  }
}
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_PCD_SetAddress+0x1a>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e012      	b.n	8004714 <HAL_PCD_SetAddress+0x40>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	4611      	mov	r1, r2
 8004704:	4618      	mov	r0, r3
 8004706:	f00a fcc1 	bl	800f08c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	4608      	mov	r0, r1
 8004726:	4611      	mov	r1, r2
 8004728:	461a      	mov	r2, r3
 800472a:	4603      	mov	r3, r0
 800472c:	70fb      	strb	r3, [r7, #3]
 800472e:	460b      	mov	r3, r1
 8004730:	803b      	strh	r3, [r7, #0]
 8004732:	4613      	mov	r3, r2
 8004734:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004736:	2300      	movs	r3, #0
 8004738:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800473a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800473e:	2b00      	cmp	r3, #0
 8004740:	da0f      	bge.n	8004762 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004742:	78fb      	ldrb	r3, [r7, #3]
 8004744:	f003 0207 	and.w	r2, r3, #7
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	3310      	adds	r3, #16
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	4413      	add	r3, r2
 8004756:	3304      	adds	r3, #4
 8004758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	705a      	strb	r2, [r3, #1]
 8004760:	e00f      	b.n	8004782 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	f003 0207 	and.w	r2, r3, #7
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	4413      	add	r3, r2
 8004778:	3304      	adds	r3, #4
 800477a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	b2da      	uxtb	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800478e:	883b      	ldrh	r3, [r7, #0]
 8004790:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	78ba      	ldrb	r2, [r7, #2]
 800479c:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800479e:	78bb      	ldrb	r3, [r7, #2]
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d102      	bne.n	80047aa <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d101      	bne.n	80047b8 <HAL_PCD_EP_Open+0x9c>
 80047b4:	2302      	movs	r3, #2
 80047b6:	e00e      	b.n	80047d6 <HAL_PCD_EP_Open+0xba>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68f9      	ldr	r1, [r7, #12]
 80047c6:	4618      	mov	r0, r3
 80047c8:	f008 fe32 	bl	800d430 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 80047d4:	7afb      	ldrb	r3, [r7, #11]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b084      	sub	sp, #16
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	460b      	mov	r3, r1
 80047e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	da0f      	bge.n	8004812 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f2:	78fb      	ldrb	r3, [r7, #3]
 80047f4:	f003 0207 	and.w	r2, r3, #7
 80047f8:	4613      	mov	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	00db      	lsls	r3, r3, #3
 8004800:	3310      	adds	r3, #16
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	4413      	add	r3, r2
 8004806:	3304      	adds	r3, #4
 8004808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2201      	movs	r2, #1
 800480e:	705a      	strb	r2, [r3, #1]
 8004810:	e00f      	b.n	8004832 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004812:	78fb      	ldrb	r3, [r7, #3]
 8004814:	f003 0207 	and.w	r2, r3, #7
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	4413      	add	r3, r2
 8004828:	3304      	adds	r3, #4
 800482a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004832:	78fb      	ldrb	r3, [r7, #3]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	b2da      	uxtb	r2, r3
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004844:	2b01      	cmp	r3, #1
 8004846:	d101      	bne.n	800484c <HAL_PCD_EP_Close+0x6e>
 8004848:	2302      	movs	r3, #2
 800484a:	e00e      	b.n	800486a <HAL_PCD_EP_Close+0x8c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2201      	movs	r2, #1
 8004850:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68f9      	ldr	r1, [r7, #12]
 800485a:	4618      	mov	r0, r3
 800485c:	f009 f948 	bl	800daf0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b086      	sub	sp, #24
 8004876:	af00      	add	r7, sp, #0
 8004878:	60f8      	str	r0, [r7, #12]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	460b      	mov	r3, r1
 8004880:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004882:	7afb      	ldrb	r3, [r7, #11]
 8004884:	f003 0207 	and.w	r2, r3, #7
 8004888:	4613      	mov	r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	4413      	add	r3, r2
 8004898:	3304      	adds	r3, #4
 800489a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2200      	movs	r2, #0
 80048ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2200      	movs	r2, #0
 80048b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048b4:	7afb      	ldrb	r3, [r7, #11]
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6979      	ldr	r1, [r7, #20]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f009 fa9c 	bl	800de04 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	460b      	mov	r3, r1
 80048e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	f003 0207 	and.w	r2, r3, #7
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4413      	add	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	440b      	add	r3, r1
 80048f4:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80048f8:	681b      	ldr	r3, [r3, #0]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b086      	sub	sp, #24
 800490a:	af00      	add	r7, sp, #0
 800490c:	60f8      	str	r0, [r7, #12]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
 8004912:	460b      	mov	r3, r1
 8004914:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004916:	7afb      	ldrb	r3, [r7, #11]
 8004918:	f003 0207 	and.w	r2, r3, #7
 800491c:	4613      	mov	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	3310      	adds	r3, #16
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	3304      	adds	r3, #4
 800492c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	2200      	movs	r2, #0
 800494c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2201      	movs	r2, #1
 8004952:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004954:	7afb      	ldrb	r3, [r7, #11]
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	b2da      	uxtb	r2, r3
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6979      	ldr	r1, [r7, #20]
 8004966:	4618      	mov	r0, r3
 8004968:	f009 fa4c 	bl	800de04 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3718      	adds	r7, #24
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	7912      	ldrb	r2, [r2, #4]
 800498c:	4293      	cmp	r3, r2
 800498e:	d901      	bls.n	8004994 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e040      	b.n	8004a16 <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004998:	2b00      	cmp	r3, #0
 800499a:	da0f      	bge.n	80049bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	f003 0207 	and.w	r2, r3, #7
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	3310      	adds	r3, #16
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4413      	add	r3, r2
 80049b0:	3304      	adds	r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	705a      	strb	r2, [r3, #1]
 80049ba:	e00d      	b.n	80049d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049bc:	78fa      	ldrb	r2, [r7, #3]
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4413      	add	r3, r2
 80049ce:	3304      	adds	r3, #4
 80049d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	b2da      	uxtb	r2, r3
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_PCD_EP_SetStall+0x82>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e00e      	b.n	8004a16 <HAL_PCD_EP_SetStall+0xa0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68f9      	ldr	r1, [r7, #12]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f00a fa66 	bl	800eed8 <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b084      	sub	sp, #16
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	460b      	mov	r3, r1
 8004a28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	f003 030f 	and.w	r3, r3, #15
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	7912      	ldrb	r2, [r2, #4]
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d901      	bls.n	8004a3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e042      	b.n	8004ac2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	da0f      	bge.n	8004a64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a44:	78fb      	ldrb	r3, [r7, #3]
 8004a46:	f003 0207 	and.w	r2, r3, #7
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	3310      	adds	r3, #16
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	4413      	add	r3, r2
 8004a58:	3304      	adds	r3, #4
 8004a5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	705a      	strb	r2, [r3, #1]
 8004a62:	e00f      	b.n	8004a84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	f003 0207 	and.w	r2, r3, #7
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4413      	add	r3, r2
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a8a:	78fb      	ldrb	r3, [r7, #3]
 8004a8c:	f003 0307 	and.w	r3, r3, #7
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_PCD_EP_ClrStall+0x86>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e00e      	b.n	8004ac2 <HAL_PCD_EP_ClrStall+0xa4>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68f9      	ldr	r1, [r7, #12]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f00a fa56 	bl	800ef64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08e      	sub	sp, #56	@ 0x38
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ad4:	e326      	b.n	8005124 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004adc:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8004ade:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8004aea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f040 8124 	bne.w	8004d3c <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004af4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d13e      	bne.n	8004b7c <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	4b89      	ldr	r3, [pc, #548]	@ (8004d2c <PCD_EP_ISR_Handler+0x260>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b14:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3314      	adds	r3, #20
 8004b1a:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b26:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	0c1b      	lsrs	r3, r3, #16
 8004b2e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b34:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	441a      	add	r2, r3
 8004b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b42:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004b44:	2100      	movs	r1, #0
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f00b fb17 	bl	801017a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	7c5b      	ldrb	r3, [r3, #17]
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 82e6 	beq.w	8005124 <PCD_EP_ISR_Handler+0x658>
 8004b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f040 82e1 	bne.w	8005124 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	7c5b      	ldrb	r3, [r3, #17]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	745a      	strb	r2, [r3, #17]
 8004b7a:	e2d3      	b.n	8005124 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8004b82:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004b8c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004b8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d027      	beq.n	8004be6 <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f7ff fb08 	bl	80041b6 <PCD_GET_EP_RX_CNT>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8004bb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bbe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	f00a fb07 	bl	800f1d4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	4b58      	ldr	r3, [pc, #352]	@ (8004d30 <PCD_EP_ISR_Handler+0x264>)
 8004bce:	4013      	ands	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004bdc:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f00b fa9e 	bl	8010120 <HAL_PCD_SetupStageCallback>
 8004be4:	e29e      	b.n	8005124 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8004be6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f280 829a 	bge.w	8005124 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b4e      	ldr	r3, [pc, #312]	@ (8004d30 <PCD_EP_ISR_Handler+0x264>)
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004c06:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	4619      	mov	r1, r3
 8004c12:	4610      	mov	r0, r2
 8004c14:	f7ff facf 	bl	80041b6 <PCD_GET_EP_RX_CNT>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c1e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c22:	69db      	ldr	r3, [r3, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d019      	beq.n	8004c5c <PCD_EP_ISR_Handler+0x190>
 8004c28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d015      	beq.n	8004c5c <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c36:	6959      	ldr	r1, [r3, #20]
 8004c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c3a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c3e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	f00a fac7 	bl	800f1d4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c48:	695a      	ldr	r2, [r3, #20]
 8004c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	441a      	add	r2, r3
 8004c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c52:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004c54:	2100      	movs	r1, #0
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f00b fa74 	bl	8010144 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004c64:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004c66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	f040 825a 	bne.w	8005124 <PCD_EP_ISR_Handler+0x658>
 8004c70:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004c72:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004c76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004c7a:	f000 8253 	beq.w	8005124 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d34 <PCD_EP_ISR_Handler+0x268>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	4a2c      	ldr	r2, [pc, #176]	@ (8004d34 <PCD_EP_ISR_Handler+0x268>)
 8004c84:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8004c88:	6053      	str	r3, [r2, #4]
 8004c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <PCD_EP_ISR_Handler+0x1d4>
 8004c92:	4b28      	ldr	r3, [pc, #160]	@ (8004d34 <PCD_EP_ISR_Handler+0x268>)
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	4a27      	ldr	r2, [pc, #156]	@ (8004d34 <PCD_EP_ISR_Handler+0x268>)
 8004c98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c9c:	6053      	str	r3, [r2, #4]
 8004c9e:	e02e      	b.n	8004cfe <PCD_EP_ISR_Handler+0x232>
 8004ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ca6:	d814      	bhi.n	8004cd2 <PCD_EP_ISR_Handler+0x206>
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	085b      	lsrs	r3, r3, #1
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <PCD_EP_ISR_Handler+0x1f6>
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	617b      	str	r3, [r7, #20]
 8004cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8004d34 <PCD_EP_ISR_Handler+0x268>)
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	069b      	lsls	r3, r3, #26
 8004cca:	491a      	ldr	r1, [pc, #104]	@ (8004d34 <PCD_EP_ISR_Handler+0x268>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	604b      	str	r3, [r1, #4]
 8004cd0:	e015      	b.n	8004cfe <PCD_EP_ISR_Handler+0x232>
 8004cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 031f 	and.w	r3, r3, #31
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <PCD_EP_ISR_Handler+0x220>
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	4b11      	ldr	r3, [pc, #68]	@ (8004d34 <PCD_EP_ISR_Handler+0x268>)
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	069b      	lsls	r3, r3, #26
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	4a0f      	ldr	r2, [pc, #60]	@ (8004d34 <PCD_EP_ISR_Handler+0x268>)
 8004cf8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004cfc:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	4b0c      	ldr	r3, [pc, #48]	@ (8004d38 <PCD_EP_ISR_Handler+0x26c>)
 8004d06:	4013      	ands	r3, r2
 8004d08:	613b      	str	r3, [r7, #16]
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004d10:	613b      	str	r3, [r7, #16]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004d18:	613b      	str	r3, [r7, #16]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e1fb      	b.n	8005124 <PCD_EP_ISR_Handler+0x658>
 8004d2c:	07ff8f0f 	.word	0x07ff8f0f
 8004d30:	07ff0f8f 	.word	0x07ff0f8f
 8004d34:	40016400 	.word	0x40016400
 8004d38:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8004d4e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f280 80bd 	bge.w	8004ed2 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	4b9e      	ldr	r3, [pc, #632]	@ (8004fe4 <PCD_EP_ISR_Handler+0x518>)
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	61fb      	str	r3, [r7, #28]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d82:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004d84:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	00db      	lsls	r3, r3, #3
 8004d90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	4413      	add	r3, r2
 8004d98:	3304      	adds	r3, #4
 8004d9a:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d9e:	7b1b      	ldrb	r3, [r3, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d116      	bne.n	8004dd2 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f7ff fa01 	bl	80041b6 <PCD_GET_EP_RX_CNT>
 8004db4:	4603      	mov	r3, r0
 8004db6:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 8004db8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d067      	beq.n	8004e8e <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc4:	6959      	ldr	r1, [r3, #20]
 8004dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dc8:	88da      	ldrh	r2, [r3, #6]
 8004dca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004dcc:	f00a fa02 	bl	800f1d4 <USB_ReadPMA>
 8004dd0:	e05d      	b.n	8004e8e <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd4:	78db      	ldrb	r3, [r3, #3]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d108      	bne.n	8004dec <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004dda:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 f9ad 	bl	8005140 <HAL_PCD_EP_DB_Receive>
 8004de6:	4603      	mov	r3, r0
 8004de8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004dea:	e050      	b.n	8004e8e <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b7a      	ldr	r3, [pc, #488]	@ (8004fe8 <PCD_EP_ISR_Handler+0x51c>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	461a      	mov	r2, r3
 8004e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	441a      	add	r2, r3
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004e1a:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	461a      	mov	r2, r3
 8004e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d016      	beq.n	8004e62 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	4610      	mov	r0, r2
 8004e40:	f7ff f9da 	bl	80041f8 <PCD_GET_EP_DBUF0_CNT>
 8004e44:	4603      	mov	r3, r0
 8004e46:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8004e48:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d01f      	beq.n	8004e8e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6818      	ldr	r0, [r3, #0]
 8004e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e54:	6959      	ldr	r1, [r3, #20]
 8004e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e58:	891a      	ldrh	r2, [r3, #8]
 8004e5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e5c:	f00a f9ba 	bl	800f1d4 <USB_ReadPMA>
 8004e60:	e015      	b.n	8004e8e <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	f7ff f9e4 	bl	800423a <PCD_GET_EP_DBUF1_CNT>
 8004e72:	4603      	mov	r3, r0
 8004e74:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 8004e76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e82:	6959      	ldr	r1, [r3, #20]
 8004e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e86:	895a      	ldrh	r2, [r3, #10]
 8004e88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e8a:	f00a f9a3 	bl	800f1d4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e90:	69da      	ldr	r2, [r3, #28]
 8004e92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004e94:	441a      	add	r2, r3
 8004e96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e98:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9c:	695a      	ldr	r2, [r3, #20]
 8004e9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ea0:	441a      	add	r2, r3
 8004ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d004      	beq.n	8004eb8 <PCD_EP_ISR_Handler+0x3ec>
 8004eae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d206      	bcs.n	8004ec6 <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f00b f940 	bl	8010144 <HAL_PCD_DataOutStageCallback>
 8004ec4:	e005      	b.n	8004ed2 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f008 ff99 	bl	800de04 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8004ed2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8123 	beq.w	8005124 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8004ede:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4413      	add	r3, r2
 8004ee8:	00db      	lsls	r3, r3, #3
 8004eea:	3310      	adds	r3, #16
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	4413      	add	r3, r2
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4b39      	ldr	r3, [pc, #228]	@ (8004fec <PCD_EP_ISR_Handler+0x520>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f1e:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f22:	78db      	ldrb	r3, [r3, #3]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	f040 80b8 	bne.w	800509a <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 8004f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f32:	7b1b      	ldrb	r3, [r3, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80a9 	beq.w	800508c <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f3a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d055      	beq.n	8004ff0 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f46:	785b      	ldrb	r3, [r3, #1]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d124      	bne.n	8004f96 <PCD_EP_ISR_Handler+0x4ca>
 8004f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f6a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004f8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004f8e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	e07a      	b.n	800508c <PCD_EP_ISR_Handler+0x5c0>
 8004f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f98:	785b      	ldrb	r3, [r3, #1]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d176      	bne.n	800508c <PCD_EP_ISR_Handler+0x5c0>
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fa8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004fbc:	b292      	uxth	r2, r2
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004fca:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004fd8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004fdc:	6812      	ldr	r2, [r2, #0]
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	e054      	b.n	800508c <PCD_EP_ISR_Handler+0x5c0>
 8004fe2:	bf00      	nop
 8004fe4:	07ff0f8f 	.word	0x07ff0f8f
 8004fe8:	07ff8f8f 	.word	0x07ff8f8f
 8004fec:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff2:	785b      	ldrb	r3, [r3, #1]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d124      	bne.n	8005042 <PCD_EP_ISR_Handler+0x576>
 8004ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005002:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005006:	685a      	ldr	r2, [r3, #4]
 8005008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005012:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005016:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800501a:	605a      	str	r2, [r3, #4]
 800501c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005026:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	00db      	lsls	r3, r3, #3
 8005032:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005036:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800503a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800503e:	605a      	str	r2, [r3, #4]
 8005040:	e024      	b.n	800508c <PCD_EP_ISR_Handler+0x5c0>
 8005042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005044:	785b      	ldrb	r3, [r3, #1]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d120      	bne.n	800508c <PCD_EP_ISR_Handler+0x5c0>
 800504a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005054:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005064:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005068:	b292      	uxth	r2, r2
 800506a:	605a      	str	r2, [r3, #4]
 800506c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8005076:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800507a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005084:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005088:	6852      	ldr	r2, [r2, #4]
 800508a:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800508c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	4619      	mov	r1, r3
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f00b f871 	bl	801017a <HAL_PCD_DataInStageCallback>
 8005098:	e044      	b.n	8005124 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800509a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800509c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d139      	bne.n	8005118 <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80050a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	00db      	lsls	r3, r3, #3
 80050aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80050ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	0c1b      	lsrs	r3, r3, #16
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 80050be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c0:	699a      	ldr	r2, [r3, #24]
 80050c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d906      	bls.n	80050d6 <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 80050c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ca:	699a      	ldr	r2, [r3, #24]
 80050cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80050ce:	1ad2      	subs	r2, r2, r3
 80050d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d2:	619a      	str	r2, [r3, #24]
 80050d4:	e002      	b.n	80050dc <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 80050d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d8:	2200      	movs	r2, #0
 80050da:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80050dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80050e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f00b f845 	bl	801017a <HAL_PCD_DataInStageCallback>
 80050f0:	e018      	b.n	8005124 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80050f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80050f8:	441a      	add	r2, r3
 80050fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80050fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005100:	69da      	ldr	r2, [r3, #28]
 8005102:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005104:	441a      	add	r2, r3
 8005106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005108:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005110:	4618      	mov	r0, r3
 8005112:	f008 fe77 	bl	800de04 <USB_EPStartXfer>
 8005116:	e005      	b.n	8005124 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005118:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800511a:	461a      	mov	r2, r3
 800511c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f8e8 	bl	80052f4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800512a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800512e:	2b00      	cmp	r3, #0
 8005130:	f47f acd1 	bne.w	8004ad6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3738      	adds	r7, #56	@ 0x38
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop

08005140 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08a      	sub	sp, #40	@ 0x28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800514e:	88fb      	ldrh	r3, [r7, #6]
 8005150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d062      	beq.n	800521e <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	4619      	mov	r1, r3
 8005162:	4610      	mov	r0, r2
 8005164:	f7ff f848 	bl	80041f8 <PCD_GET_EP_DBUF0_CNT>
 8005168:	4603      	mov	r3, r0
 800516a:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	699a      	ldr	r2, [r3, #24]
 8005170:	8bfb      	ldrh	r3, [r7, #30]
 8005172:	429a      	cmp	r2, r3
 8005174:	d306      	bcc.n	8005184 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	8bfb      	ldrh	r3, [r7, #30]
 800517c:	1ad2      	subs	r2, r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	619a      	str	r2, [r3, #24]
 8005182:	e002      	b.n	800518a <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2200      	movs	r2, #0
 8005188:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d11b      	bne.n	80051ca <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	461a      	mov	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b52      	ldr	r3, [pc, #328]	@ (80052ec <HAL_PCD_EP_DB_Receive+0x1ac>)
 80051a4:	4013      	ands	r3, r2
 80051a6:	61bb      	str	r3, [r7, #24]
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80051ae:	61bb      	str	r3, [r7, #24]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	461a      	mov	r2, r3
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	441a      	add	r2, r3
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c8:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d017      	beq.n	8005204 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	4b42      	ldr	r3, [pc, #264]	@ (80052f0 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80051e6:	4013      	ands	r3, r2
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	441a      	add	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005202:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8005204:	8bfb      	ldrh	r3, [r7, #30]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d06b      	beq.n	80052e2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	6959      	ldr	r1, [r3, #20]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	891a      	ldrh	r2, [r3, #8]
 8005216:	8bfb      	ldrh	r3, [r7, #30]
 8005218:	f009 ffdc 	bl	800f1d4 <USB_ReadPMA>
 800521c:	e061      	b.n	80052e2 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	4619      	mov	r1, r3
 8005228:	4610      	mov	r0, r2
 800522a:	f7ff f806 	bl	800423a <PCD_GET_EP_DBUF1_CNT>
 800522e:	4603      	mov	r3, r0
 8005230:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	699a      	ldr	r2, [r3, #24]
 8005236:	8bfb      	ldrh	r3, [r7, #30]
 8005238:	429a      	cmp	r2, r3
 800523a:	d306      	bcc.n	800524a <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	699a      	ldr	r2, [r3, #24]
 8005240:	8bfb      	ldrh	r3, [r7, #30]
 8005242:	1ad2      	subs	r2, r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	619a      	str	r2, [r3, #24]
 8005248:	e002      	b.n	8005250 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2200      	movs	r2, #0
 800524e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d11b      	bne.n	8005290 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	461a      	mov	r2, r3
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	4413      	add	r3, r2
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	4b20      	ldr	r3, [pc, #128]	@ (80052ec <HAL_PCD_EP_DB_Receive+0x1ac>)
 800526a:	4013      	ands	r3, r2
 800526c:	627b      	str	r3, [r7, #36]	@ 0x24
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	441a      	add	r2, r3
 8005284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800528a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800528e:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005290:	88fb      	ldrh	r3, [r7, #6]
 8005292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005296:	2b00      	cmp	r3, #0
 8005298:	d117      	bne.n	80052ca <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	461a      	mov	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	4b11      	ldr	r3, [pc, #68]	@ (80052f0 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	623b      	str	r3, [r7, #32]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	441a      	add	r2, r3
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80052c8:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 80052ca:	8bfb      	ldrh	r3, [r7, #30]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6818      	ldr	r0, [r3, #0]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	6959      	ldr	r1, [r3, #20]
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	895a      	ldrh	r2, [r3, #10]
 80052dc:	8bfb      	ldrh	r3, [r7, #30]
 80052de:	f009 ff79 	bl	800f1d4 <USB_ReadPMA>
    }
  }

  return count;
 80052e2:	8bfb      	ldrh	r3, [r7, #30]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3728      	adds	r7, #40	@ 0x28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	07ffbf8f 	.word	0x07ffbf8f
 80052f0:	07ff8f8f 	.word	0x07ff8f8f

080052f4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08e      	sub	sp, #56	@ 0x38
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	4613      	mov	r3, r2
 8005300:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 81d5 	beq.w	80056b8 <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	4619      	mov	r1, r3
 8005318:	4610      	mov	r0, r2
 800531a:	f7fe ff6d 	bl	80041f8 <PCD_GET_EP_DBUF0_CNT>
 800531e:	4603      	mov	r3, r0
 8005320:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	8bfb      	ldrh	r3, [r7, #30]
 8005328:	429a      	cmp	r2, r3
 800532a:	d906      	bls.n	800533a <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	8bfb      	ldrh	r3, [r7, #30]
 8005332:	1ad2      	subs	r2, r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	619a      	str	r2, [r3, #24]
 8005338:	e002      	b.n	8005340 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2200      	movs	r2, #0
 800533e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f040 80c1 	bne.w	80054cc <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	785b      	ldrb	r3, [r3, #1]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d124      	bne.n	800539c <HAL_PCD_EP_DB_Transmit+0xa8>
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800535c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800536c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005370:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005380:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005390:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005394:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e024      	b.n	80053e6 <HAL_PCD_EP_DB_Transmit+0xf2>
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	785b      	ldrb	r3, [r3, #1]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d120      	bne.n	80053e6 <HAL_PCD_EP_DB_Transmit+0xf2>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80053c2:	b292      	uxth	r2, r2
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	00db      	lsls	r3, r3, #3
 80053cc:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80053d0:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80053e2:	6812      	ldr	r2, [r2, #0]
 80053e4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	785b      	ldrb	r3, [r3, #1]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d124      	bne.n	8005438 <HAL_PCD_EP_DB_Transmit+0x144>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80053f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005408:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800540c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005410:	605a      	str	r2, [r3, #4]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800541c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800542c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005430:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	e024      	b.n	8005482 <HAL_PCD_EP_DB_Transmit+0x18e>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	785b      	ldrb	r3, [r3, #1]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d120      	bne.n	8005482 <HAL_PCD_EP_DB_Transmit+0x18e>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	00db      	lsls	r3, r3, #3
 8005446:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800544a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800545a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800545e:	b292      	uxth	r2, r2
 8005460:	605a      	str	r2, [r3, #4]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800546c:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	00db      	lsls	r3, r3, #3
 8005476:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800547a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800547e:	6852      	ldr	r2, [r2, #4]
 8005480:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	4619      	mov	r1, r3
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f00a fe76 	bl	801017a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800548e:	88fb      	ldrh	r3, [r7, #6]
 8005490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005494:	2b00      	cmp	r3, #0
 8005496:	f000 82e5 	beq.w	8005a64 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4413      	add	r3, r2
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	4b8e      	ldr	r3, [pc, #568]	@ (80056e4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	461a      	mov	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	441a      	add	r2, r3
 80054be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80054c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	e2cb      	b.n	8005a64 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d017      	beq.n	8005506 <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	461a      	mov	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	4b7f      	ldr	r3, [pc, #508]	@ (80056e4 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	461a      	mov	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	441a      	add	r2, r3
 80054fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005500:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005504:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800550c:	2b01      	cmp	r3, #1
 800550e:	f040 82a9 	bne.w	8005a64 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	695a      	ldr	r2, [r3, #20]
 8005516:	8bfb      	ldrh	r3, [r7, #30]
 8005518:	441a      	add	r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	69da      	ldr	r2, [r3, #28]
 8005522:	8bfb      	ldrh	r3, [r7, #30]
 8005524:	441a      	add	r2, r3
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	6a1a      	ldr	r2, [r3, #32]
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	429a      	cmp	r2, r3
 8005534:	d309      	bcc.n	800554a <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	6a1a      	ldr	r2, [r3, #32]
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	1ad2      	subs	r2, r2, r3
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	621a      	str	r2, [r3, #32]
 8005548:	e014      	b.n	8005574 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d106      	bne.n	8005560 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8005552:	8bfb      	ldrh	r3, [r7, #30]
 8005554:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2200      	movs	r2, #0
 800555a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800555e:	e009      	b.n	8005574 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	2200      	movs	r2, #0
 8005572:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	785b      	ldrb	r3, [r3, #1]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d16a      	bne.n	8005652 <HAL_PCD_EP_DB_Transmit+0x35e>
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005586:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005596:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800559a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d112      	bne.n	80055cc <HAL_PCD_EP_DB_Transmit+0x2d8>
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	00db      	lsls	r3, r3, #3
 80055ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	00db      	lsls	r3, r3, #3
 80055bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055c4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e06a      	b.n	80056a2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 80055cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80055d0:	d81e      	bhi.n	8005610 <HAL_PCD_EP_DB_Transmit+0x31c>
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <HAL_PCD_EP_DB_Transmit+0x2f4>
 80055e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e4:	3301      	adds	r3, #1
 80055e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80055f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80055f6:	6819      	ldr	r1, [r3, #0]
 80055f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fa:	069a      	lsls	r2, r3, #26
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005606:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800560a:	430a      	orrs	r2, r1
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e048      	b.n	80056a2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005618:	f003 031f 	and.w	r3, r3, #31
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <HAL_PCD_EP_DB_Transmit+0x332>
 8005620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005622:	3b01      	subs	r3, #1
 8005624:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005630:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005638:	069b      	lsls	r3, r3, #26
 800563a:	431a      	orrs	r2, r3
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005646:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800564a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	e027      	b.n	80056a2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	785b      	ldrb	r3, [r3, #1]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d123      	bne.n	80056a2 <HAL_PCD_EP_DB_Transmit+0x3ae>
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	00db      	lsls	r3, r3, #3
 8005660:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005664:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005674:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005678:	b292      	uxth	r2, r2
 800567a:	601a      	str	r2, [r3, #0]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005686:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800568a:	6819      	ldr	r1, [r3, #0]
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	041a      	lsls	r2, r3, #16
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800569a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800569e:	430a      	orrs	r2, r1
 80056a0:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	6959      	ldr	r1, [r3, #20]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	891a      	ldrh	r2, [r3, #8]
 80056ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	f009 fd2e 	bl	800f112 <USB_WritePMA>
 80056b6:	e1d5      	b.n	8005a64 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f7fe fdb9 	bl	800423a <PCD_GET_EP_DBUF1_CNT>
 80056c8:	4603      	mov	r3, r0
 80056ca:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	8bfb      	ldrh	r3, [r7, #30]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d308      	bcc.n	80056e8 <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	699a      	ldr	r2, [r3, #24]
 80056da:	8bfb      	ldrh	r3, [r7, #30]
 80056dc:	1ad2      	subs	r2, r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	619a      	str	r2, [r3, #24]
 80056e2:	e004      	b.n	80056ee <HAL_PCD_EP_DB_Transmit+0x3fa>
 80056e4:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	2200      	movs	r2, #0
 80056ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f040 80c1 	bne.w	800587a <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	785b      	ldrb	r3, [r3, #1]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d124      	bne.n	800574a <HAL_PCD_EP_DB_Transmit+0x456>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800570a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800571a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800571e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800572e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800573e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005742:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	e024      	b.n	8005794 <HAL_PCD_EP_DB_Transmit+0x4a0>
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d120      	bne.n	8005794 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	00db      	lsls	r3, r3, #3
 8005758:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800575c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800576c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005770:	b292      	uxth	r2, r2
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800577e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800578c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d124      	bne.n	80057e6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	00db      	lsls	r3, r3, #3
 80057a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057b6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80057ba:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80057be:	605a      	str	r2, [r3, #4]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	781b      	ldrb	r3, [r3, #0]
 80057c4:	00db      	lsls	r3, r3, #3
 80057c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80057de:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80057e2:	605a      	str	r2, [r3, #4]
 80057e4:	e024      	b.n	8005830 <HAL_PCD_EP_DB_Transmit+0x53c>
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	785b      	ldrb	r3, [r3, #1]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d120      	bne.n	8005830 <HAL_PCD_EP_DB_Transmit+0x53c>
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80057f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005808:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800580c:	b292      	uxth	r2, r2
 800580e:	605a      	str	r2, [r3, #4]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	00db      	lsls	r3, r3, #3
 8005816:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800581a:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	00db      	lsls	r3, r3, #3
 8005824:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005828:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800582c:	6852      	ldr	r2, [r2, #4]
 800582e:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	4619      	mov	r1, r3
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f00a fc9f 	bl	801017a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005842:	2b00      	cmp	r3, #0
 8005844:	f040 810e 	bne.w	8005a64 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	461a      	mov	r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	681a      	ldr	r2, [r3, #0]
 8005858:	4b95      	ldr	r3, [pc, #596]	@ (8005ab0 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 800585a:	4013      	ands	r3, r2
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	441a      	add	r2, r3
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005872:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005876:	6013      	str	r3, [r2, #0]
 8005878:	e0f4      	b.n	8005a64 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d117      	bne.n	80058b4 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	4b86      	ldr	r3, [pc, #536]	@ (8005ab0 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8005896:	4013      	ands	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	441a      	add	r2, r3
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80058ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058b2:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	f040 80d2 	bne.w	8005a64 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	695a      	ldr	r2, [r3, #20]
 80058c4:	8bfb      	ldrh	r3, [r7, #30]
 80058c6:	441a      	add	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	69da      	ldr	r2, [r3, #28]
 80058d0:	8bfb      	ldrh	r3, [r7, #30]
 80058d2:	441a      	add	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	6a1a      	ldr	r2, [r3, #32]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d309      	bcc.n	80058f8 <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	6a1a      	ldr	r2, [r3, #32]
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	1ad2      	subs	r2, r2, r3
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	621a      	str	r2, [r3, #32]
 80058f6:	e014      	b.n	8005922 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	6a1b      	ldr	r3, [r3, #32]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8005900:	8bfb      	ldrh	r3, [r7, #30]
 8005902:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	2200      	movs	r2, #0
 8005908:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800590c:	e009      	b.n	8005922 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2200      	movs	r2, #0
 8005918:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	785b      	ldrb	r3, [r3, #1]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d16a      	bne.n	8005a00 <HAL_PCD_EP_DB_Transmit+0x70c>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005934:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	00db      	lsls	r3, r3, #3
 8005940:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005944:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005948:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800594c:	605a      	str	r2, [r3, #4]
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	2b00      	cmp	r3, #0
 8005952:	d112      	bne.n	800597a <HAL_PCD_EP_DB_Transmit+0x686>
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800595e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	00db      	lsls	r3, r3, #3
 800596a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800596e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005972:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005976:	605a      	str	r2, [r3, #4]
 8005978:	e06a      	b.n	8005a50 <HAL_PCD_EP_DB_Transmit+0x75c>
 800597a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597c:	2b3e      	cmp	r3, #62	@ 0x3e
 800597e:	d81e      	bhi.n	80059be <HAL_PCD_EP_DB_Transmit+0x6ca>
 8005980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005982:	085b      	lsrs	r3, r3, #1
 8005984:	61bb      	str	r3, [r7, #24]
 8005986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d002      	beq.n	8005996 <HAL_PCD_EP_DB_Transmit+0x6a2>
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	3301      	adds	r3, #1
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	00db      	lsls	r3, r3, #3
 800599c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059a4:	6859      	ldr	r1, [r3, #4]
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	069a      	lsls	r2, r3, #26
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	00db      	lsls	r3, r3, #3
 80059b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
 80059bc:	e048      	b.n	8005a50 <HAL_PCD_EP_DB_Transmit+0x75c>
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	095b      	lsrs	r3, r3, #5
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c6:	f003 031f 	and.w	r3, r3, #31
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d102      	bne.n	80059d4 <HAL_PCD_EP_DB_Transmit+0x6e0>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	3b01      	subs	r3, #1
 80059d2:	61bb      	str	r3, [r7, #24]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	069b      	lsls	r3, r3, #26
 80059e8:	431a      	orrs	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80059f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80059f8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80059fc:	605a      	str	r2, [r3, #4]
 80059fe:	e027      	b.n	8005a50 <HAL_PCD_EP_DB_Transmit+0x75c>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	785b      	ldrb	r3, [r3, #1]
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d123      	bne.n	8005a50 <HAL_PCD_EP_DB_Transmit+0x75c>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	00db      	lsls	r3, r3, #3
 8005a1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a26:	b292      	uxth	r2, r2
 8005a28:	605a      	str	r2, [r3, #4]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	00db      	lsls	r3, r3, #3
 8005a30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a34:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a38:	6859      	ldr	r1, [r3, #4]
 8005a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3c:	041a      	lsls	r2, r3, #16
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a48:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6818      	ldr	r0, [r3, #0]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	6959      	ldr	r1, [r3, #20]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	895a      	ldrh	r2, [r3, #10]
 8005a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f009 fb57 	bl	800f112 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	461a      	mov	r2, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	4b0f      	ldr	r3, [pc, #60]	@ (8005ab4 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8005a76:	4013      	ands	r3, r2
 8005a78:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7c:	f083 0310 	eor.w	r3, r3, #16
 8005a80:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	f083 0320 	eor.w	r3, r3, #32
 8005a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	441a      	add	r2, r3
 8005a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005aa2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3738      	adds	r7, #56	@ 0x38
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	07ff8f8f 	.word	0x07ff8f8f
 8005ab4:	07ff8fbf 	.word	0x07ff8fbf

08005ab8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	607b      	str	r3, [r7, #4]
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	817b      	strh	r3, [r7, #10]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005aca:	897b      	ldrh	r3, [r7, #10]
 8005acc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00c      	beq.n	8005af0 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ad6:	897b      	ldrh	r3, [r7, #10]
 8005ad8:	f003 0207 	and.w	r2, r3, #7
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	3310      	adds	r3, #16
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	3304      	adds	r3, #4
 8005aec:	617b      	str	r3, [r7, #20]
 8005aee:	e00a      	b.n	8005b06 <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005af0:	897a      	ldrh	r2, [r7, #10]
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	3304      	adds	r3, #4
 8005b04:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005b06:	893b      	ldrh	r3, [r7, #8]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d107      	bne.n	8005b1c <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	80da      	strh	r2, [r3, #6]
 8005b1a:	e00b      	b.n	8005b34 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	b29a      	uxth	r2, r3
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	0c1b      	lsrs	r3, r3, #16
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b64:	f043 0201 	orr.w	r2, r3, #1
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b70:	f043 0202 	orr.w	r2, r3, #2
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3714      	adds	r7, #20
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
	...

08005ba0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8005ba4:	4b05      	ldr	r3, [pc, #20]	@ (8005bbc <HAL_PWREx_EnableVddUSB+0x1c>)
 8005ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba8:	4a04      	ldr	r2, [pc, #16]	@ (8005bbc <HAL_PWREx_EnableVddUSB+0x1c>)
 8005baa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005bae:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005bb0:	bf00      	nop
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	44020800 	.word	0x44020800

08005bc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d102      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f000 bc28 	b.w	8006424 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bd4:	4b94      	ldr	r3, [pc, #592]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005bd6:	69db      	ldr	r3, [r3, #28]
 8005bd8:	f003 0318 	and.w	r3, r3, #24
 8005bdc:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005bde:	4b92      	ldr	r3, [pc, #584]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0310 	and.w	r3, r3, #16
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d05b      	beq.n	8005cac <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d005      	beq.n	8005c06 <HAL_RCC_OscConfig+0x46>
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	2b18      	cmp	r3, #24
 8005bfe:	d114      	bne.n	8005c2a <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d111      	bne.n	8005c2a <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d102      	bne.n	8005c14 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f000 bc08 	b.w	8006424 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005c14:	4b84      	ldr	r3, [pc, #528]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	041b      	lsls	r3, r3, #16
 8005c22:	4981      	ldr	r1, [pc, #516]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005c28:	e040      	b.n	8005cac <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d023      	beq.n	8005c7a <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005c32:	4b7d      	ldr	r3, [pc, #500]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a7c      	ldr	r2, [pc, #496]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c3e:	f7fd f9bb 	bl	8002fb8 <HAL_GetTick>
 8005c42:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005c46:	f7fd f9b7 	bl	8002fb8 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e3e5      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005c58:	4b73      	ldr	r3, [pc, #460]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0f0      	beq.n	8005c46 <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005c64:	4b70      	ldr	r3, [pc, #448]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	041b      	lsls	r3, r3, #16
 8005c72:	496d      	ldr	r1, [pc, #436]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005c74:	4313      	orrs	r3, r2
 8005c76:	618b      	str	r3, [r1, #24]
 8005c78:	e018      	b.n	8005cac <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005c7a:	4b6b      	ldr	r3, [pc, #428]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a6a      	ldr	r2, [pc, #424]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c86:	f7fd f997 	bl	8002fb8 <HAL_GetTick>
 8005c8a:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005c8c:	e008      	b.n	8005ca0 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005c8e:	f7fd f993 	bl	8002fb8 <HAL_GetTick>
 8005c92:	4602      	mov	r2, r0
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	1ad3      	subs	r3, r2, r3
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d901      	bls.n	8005ca0 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e3c1      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005ca0:	4b61      	ldr	r3, [pc, #388]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d1f0      	bne.n	8005c8e <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 80a0 	beq.w	8005dfa <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	2b10      	cmp	r3, #16
 8005cbe:	d005      	beq.n	8005ccc <HAL_RCC_OscConfig+0x10c>
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	2b18      	cmp	r3, #24
 8005cc4:	d109      	bne.n	8005cda <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	2b03      	cmp	r3, #3
 8005cca:	d106      	bne.n	8005cda <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f040 8092 	bne.w	8005dfa <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e3a4      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ce2:	d106      	bne.n	8005cf2 <HAL_RCC_OscConfig+0x132>
 8005ce4:	4b50      	ldr	r3, [pc, #320]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a4f      	ldr	r2, [pc, #316]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005cea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	e058      	b.n	8005da4 <HAL_RCC_OscConfig+0x1e4>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d112      	bne.n	8005d20 <HAL_RCC_OscConfig+0x160>
 8005cfa:	4b4b      	ldr	r3, [pc, #300]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	4b48      	ldr	r3, [pc, #288]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a47      	ldr	r2, [pc, #284]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005d10:	6013      	str	r3, [r2, #0]
 8005d12:	4b45      	ldr	r3, [pc, #276]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a44      	ldr	r2, [pc, #272]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	e041      	b.n	8005da4 <HAL_RCC_OscConfig+0x1e4>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d28:	d112      	bne.n	8005d50 <HAL_RCC_OscConfig+0x190>
 8005d2a:	4b3f      	ldr	r3, [pc, #252]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a3e      	ldr	r2, [pc, #248]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d34:	6013      	str	r3, [r2, #0]
 8005d36:	4b3c      	ldr	r3, [pc, #240]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a3b      	ldr	r2, [pc, #236]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d3c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	4b39      	ldr	r3, [pc, #228]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a38      	ldr	r2, [pc, #224]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	e029      	b.n	8005da4 <HAL_RCC_OscConfig+0x1e4>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8005d58:	d112      	bne.n	8005d80 <HAL_RCC_OscConfig+0x1c0>
 8005d5a:	4b33      	ldr	r3, [pc, #204]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a32      	ldr	r2, [pc, #200]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	4b30      	ldr	r3, [pc, #192]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	4b2d      	ldr	r3, [pc, #180]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2c      	ldr	r2, [pc, #176]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e011      	b.n	8005da4 <HAL_RCC_OscConfig+0x1e4>
 8005d80:	4b29      	ldr	r3, [pc, #164]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a28      	ldr	r2, [pc, #160]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	4b26      	ldr	r3, [pc, #152]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a25      	ldr	r2, [pc, #148]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	4b23      	ldr	r3, [pc, #140]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a22      	ldr	r2, [pc, #136]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005d9e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d013      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dac:	f7fd f904 	bl	8002fb8 <HAL_GetTick>
 8005db0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005db4:	f7fd f900 	bl	8002fb8 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b64      	cmp	r3, #100	@ 0x64
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e32e      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dc6:	4b18      	ldr	r3, [pc, #96]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0f0      	beq.n	8005db4 <HAL_RCC_OscConfig+0x1f4>
 8005dd2:	e012      	b.n	8005dfa <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7fd f8f0 	bl	8002fb8 <HAL_GetTick>
 8005dd8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005ddc:	f7fd f8ec 	bl	8002fb8 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b64      	cmp	r3, #100	@ 0x64
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e31a      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dee:	4b0e      	ldr	r3, [pc, #56]	@ (8005e28 <HAL_RCC_OscConfig+0x268>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1f0      	bne.n	8005ddc <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 809a 	beq.w	8005f3c <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d005      	beq.n	8005e1a <HAL_RCC_OscConfig+0x25a>
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	2b18      	cmp	r3, #24
 8005e12:	d149      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d146      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d104      	bne.n	8005e2c <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	e2fe      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
 8005e26:	bf00      	nop
 8005e28:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d11c      	bne.n	8005e6c <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005e32:	4b9a      	ldr	r3, [pc, #616]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f003 0218 	and.w	r2, r3, #24
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d014      	beq.n	8005e6c <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005e42:	4b96      	ldr	r3, [pc, #600]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f023 0218 	bic.w	r2, r3, #24
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	4993      	ldr	r1, [pc, #588]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005e54:	f000 fdd0 	bl	80069f8 <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e58:	4b91      	ldr	r3, [pc, #580]	@ (80060a0 <HAL_RCC_OscConfig+0x4e0>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fd f821 	bl	8002ea4 <HAL_InitTick>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d001      	beq.n	8005e6c <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e2db      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e6c:	f7fd f8a4 	bl	8002fb8 <HAL_GetTick>
 8005e70:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e72:	e008      	b.n	8005e86 <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005e74:	f7fd f8a0 	bl	8002fb8 <HAL_GetTick>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	1ad3      	subs	r3, r2, r3
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d901      	bls.n	8005e86 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e2ce      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e86:	4b85      	ldr	r3, [pc, #532]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0f0      	beq.n	8005e74 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005e92:	4b82      	ldr	r3, [pc, #520]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	041b      	lsls	r3, r3, #16
 8005ea0:	497e      	ldr	r1, [pc, #504]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005ea6:	e049      	b.n	8005f3c <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d02c      	beq.n	8005f0a <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005eb0:	4b7a      	ldr	r3, [pc, #488]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f023 0218 	bic.w	r2, r3, #24
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	4977      	ldr	r1, [pc, #476]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8005ec2:	4b76      	ldr	r3, [pc, #472]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a75      	ldr	r2, [pc, #468]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005ec8:	f043 0301 	orr.w	r3, r3, #1
 8005ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ece:	f7fd f873 	bl	8002fb8 <HAL_GetTick>
 8005ed2:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ed4:	e008      	b.n	8005ee8 <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005ed6:	f7fd f86f 	bl	8002fb8 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d901      	bls.n	8005ee8 <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e29d      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0302 	and.w	r3, r3, #2
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0f0      	beq.n	8005ed6 <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005ef4:	4b69      	ldr	r3, [pc, #420]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	041b      	lsls	r3, r3, #16
 8005f02:	4966      	ldr	r1, [pc, #408]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	610b      	str	r3, [r1, #16]
 8005f08:	e018      	b.n	8005f3c <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f0a:	4b64      	ldr	r3, [pc, #400]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a63      	ldr	r2, [pc, #396]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005f10:	f023 0301 	bic.w	r3, r3, #1
 8005f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f16:	f7fd f84f 	bl	8002fb8 <HAL_GetTick>
 8005f1a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f1c:	e008      	b.n	8005f30 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005f1e:	f7fd f84b 	bl	8002fb8 <HAL_GetTick>
 8005f22:	4602      	mov	r2, r0
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d901      	bls.n	8005f30 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005f2c:	2303      	movs	r3, #3
 8005f2e:	e279      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f30:	4b5a      	ldr	r3, [pc, #360]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0302 	and.w	r3, r3, #2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1f0      	bne.n	8005f1e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d03c      	beq.n	8005fc2 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01c      	beq.n	8005f8a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f50:	4b52      	ldr	r3, [pc, #328]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005f52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f56:	4a51      	ldr	r2, [pc, #324]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005f58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005f5c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f60:	f7fd f82a 	bl	8002fb8 <HAL_GetTick>
 8005f64:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005f68:	f7fd f826 	bl	8002fb8 <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e254      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005f7a:	4b48      	ldr	r3, [pc, #288]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0ef      	beq.n	8005f68 <HAL_RCC_OscConfig+0x3a8>
 8005f88:	e01b      	b.n	8005fc2 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f8a:	4b44      	ldr	r3, [pc, #272]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005f90:	4a42      	ldr	r2, [pc, #264]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005f92:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005f96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9a:	f7fd f80d 	bl	8002fb8 <HAL_GetTick>
 8005f9e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005fa0:	e008      	b.n	8005fb4 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005fa2:	f7fd f809 	bl	8002fb8 <HAL_GetTick>
 8005fa6:	4602      	mov	r2, r0
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e237      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005fb4:	4b39      	ldr	r3, [pc, #228]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8005fb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1ef      	bne.n	8005fa2 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	f000 80d2 	beq.w	8006174 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005fd0:	4b34      	ldr	r3, [pc, #208]	@ (80060a4 <HAL_RCC_OscConfig+0x4e4>)
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d118      	bne.n	800600e <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005fdc:	4b31      	ldr	r3, [pc, #196]	@ (80060a4 <HAL_RCC_OscConfig+0x4e4>)
 8005fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe0:	4a30      	ldr	r2, [pc, #192]	@ (80060a4 <HAL_RCC_OscConfig+0x4e4>)
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fe8:	f7fc ffe6 	bl	8002fb8 <HAL_GetTick>
 8005fec:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005fee:	e008      	b.n	8006002 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff0:	f7fc ffe2 	bl	8002fb8 <HAL_GetTick>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	1ad3      	subs	r3, r2, r3
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d901      	bls.n	8006002 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e210      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006002:	4b28      	ldr	r3, [pc, #160]	@ (80060a4 <HAL_RCC_OscConfig+0x4e4>)
 8006004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0f0      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d108      	bne.n	8006028 <HAL_RCC_OscConfig+0x468>
 8006016:	4b21      	ldr	r3, [pc, #132]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8006018:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800601c:	4a1f      	ldr	r2, [pc, #124]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 800601e:	f043 0301 	orr.w	r3, r3, #1
 8006022:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006026:	e074      	b.n	8006112 <HAL_RCC_OscConfig+0x552>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d118      	bne.n	8006062 <HAL_RCC_OscConfig+0x4a2>
 8006030:	4b1a      	ldr	r3, [pc, #104]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8006032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006036:	4a19      	ldr	r2, [pc, #100]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8006038:	f023 0301 	bic.w	r3, r3, #1
 800603c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006040:	4b16      	ldr	r3, [pc, #88]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8006042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006046:	4a15      	ldr	r2, [pc, #84]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8006048:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800604c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006050:	4b12      	ldr	r3, [pc, #72]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8006052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006056:	4a11      	ldr	r2, [pc, #68]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8006058:	f023 0304 	bic.w	r3, r3, #4
 800605c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006060:	e057      	b.n	8006112 <HAL_RCC_OscConfig+0x552>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b05      	cmp	r3, #5
 8006068:	d11e      	bne.n	80060a8 <HAL_RCC_OscConfig+0x4e8>
 800606a:	4b0c      	ldr	r3, [pc, #48]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 800606c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006070:	4a0a      	ldr	r2, [pc, #40]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8006072:	f043 0304 	orr.w	r3, r3, #4
 8006076:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800607a:	4b08      	ldr	r3, [pc, #32]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 800607c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006080:	4a06      	ldr	r2, [pc, #24]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8006082:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006086:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800608a:	4b04      	ldr	r3, [pc, #16]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 800608c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006090:	4a02      	ldr	r2, [pc, #8]	@ (800609c <HAL_RCC_OscConfig+0x4dc>)
 8006092:	f043 0301 	orr.w	r3, r3, #1
 8006096:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800609a:	e03a      	b.n	8006112 <HAL_RCC_OscConfig+0x552>
 800609c:	44020c00 	.word	0x44020c00
 80060a0:	20000024 	.word	0x20000024
 80060a4:	44020800 	.word	0x44020800
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	2b85      	cmp	r3, #133	@ 0x85
 80060ae:	d118      	bne.n	80060e2 <HAL_RCC_OscConfig+0x522>
 80060b0:	4ba2      	ldr	r3, [pc, #648]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80060b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060b6:	4aa1      	ldr	r2, [pc, #644]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80060b8:	f043 0304 	orr.w	r3, r3, #4
 80060bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80060c0:	4b9e      	ldr	r3, [pc, #632]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80060c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060c6:	4a9d      	ldr	r2, [pc, #628]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80060c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060cc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80060d0:	4b9a      	ldr	r3, [pc, #616]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80060d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060d6:	4a99      	ldr	r2, [pc, #612]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80060d8:	f043 0301 	orr.w	r3, r3, #1
 80060dc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80060e0:	e017      	b.n	8006112 <HAL_RCC_OscConfig+0x552>
 80060e2:	4b96      	ldr	r3, [pc, #600]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80060e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060e8:	4a94      	ldr	r2, [pc, #592]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80060ea:	f023 0301 	bic.w	r3, r3, #1
 80060ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80060f2:	4b92      	ldr	r3, [pc, #584]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80060f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060f8:	4a90      	ldr	r2, [pc, #576]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80060fa:	f023 0304 	bic.w	r3, r3, #4
 80060fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006102:	4b8e      	ldr	r3, [pc, #568]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 8006104:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006108:	4a8c      	ldr	r2, [pc, #560]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 800610a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800610e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d016      	beq.n	8006148 <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800611a:	f7fc ff4d 	bl	8002fb8 <HAL_GetTick>
 800611e:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006120:	e00a      	b.n	8006138 <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006122:	f7fc ff49 	bl	8002fb8 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006130:	4293      	cmp	r3, r2
 8006132:	d901      	bls.n	8006138 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e175      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006138:	4b80      	ldr	r3, [pc, #512]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 800613a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d0ed      	beq.n	8006122 <HAL_RCC_OscConfig+0x562>
 8006146:	e015      	b.n	8006174 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006148:	f7fc ff36 	bl	8002fb8 <HAL_GetTick>
 800614c:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800614e:	e00a      	b.n	8006166 <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006150:	f7fc ff32 	bl	8002fb8 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800615e:	4293      	cmp	r3, r2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e15e      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006166:	4b75      	ldr	r3, [pc, #468]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 8006168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800616c:	f003 0302 	and.w	r3, r3, #2
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1ed      	bne.n	8006150 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	d036      	beq.n	80061ee <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006184:	2b00      	cmp	r3, #0
 8006186:	d019      	beq.n	80061bc <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006188:	4b6c      	ldr	r3, [pc, #432]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a6b      	ldr	r2, [pc, #428]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 800618e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006192:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006194:	f7fc ff10 	bl	8002fb8 <HAL_GetTick>
 8006198:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800619c:	f7fc ff0c 	bl	8002fb8 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e13a      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80061ae:	4b63      	ldr	r3, [pc, #396]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0f0      	beq.n	800619c <HAL_RCC_OscConfig+0x5dc>
 80061ba:	e018      	b.n	80061ee <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061bc:	4b5f      	ldr	r3, [pc, #380]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a5e      	ldr	r2, [pc, #376]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80061c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c8:	f7fc fef6 	bl	8002fb8 <HAL_GetTick>
 80061cc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80061ce:	e008      	b.n	80061e2 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80061d0:	f7fc fef2 	bl	8002fb8 <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d901      	bls.n	80061e2 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e120      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80061e2:	4b56      	ldr	r3, [pc, #344]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d1f0      	bne.n	80061d0 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 8115 	beq.w	8006422 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	2b18      	cmp	r3, #24
 80061fc:	f000 80af 	beq.w	800635e <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006204:	2b02      	cmp	r3, #2
 8006206:	f040 8086 	bne.w	8006316 <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800620a:	4b4c      	ldr	r3, [pc, #304]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a4b      	ldr	r2, [pc, #300]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 8006210:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006214:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006216:	f7fc fecf 	bl	8002fb8 <HAL_GetTick>
 800621a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800621c:	e008      	b.n	8006230 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800621e:	f7fc fecb 	bl	8002fb8 <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e0f9      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006230:	4b42      	ldr	r3, [pc, #264]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1f0      	bne.n	800621e <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800623c:	4b3f      	ldr	r3, [pc, #252]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006244:	f023 0303 	bic.w	r3, r3, #3
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006250:	0212      	lsls	r2, r2, #8
 8006252:	430a      	orrs	r2, r1
 8006254:	4939      	ldr	r1, [pc, #228]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 8006256:	4313      	orrs	r3, r2
 8006258:	628b      	str	r3, [r1, #40]	@ 0x28
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800625e:	3b01      	subs	r3, #1
 8006260:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006268:	3b01      	subs	r3, #1
 800626a:	025b      	lsls	r3, r3, #9
 800626c:	b29b      	uxth	r3, r3
 800626e:	431a      	orrs	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006274:	3b01      	subs	r3, #1
 8006276:	041b      	lsls	r3, r3, #16
 8006278:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800627c:	431a      	orrs	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	3b01      	subs	r3, #1
 8006284:	061b      	lsls	r3, r3, #24
 8006286:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800628a:	492c      	ldr	r1, [pc, #176]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 800628c:	4313      	orrs	r3, r2
 800628e:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006290:	4b2a      	ldr	r3, [pc, #168]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 8006292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006294:	4a29      	ldr	r2, [pc, #164]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 8006296:	f023 0310 	bic.w	r3, r3, #16
 800629a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062a0:	4a26      	ldr	r2, [pc, #152]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80062a6:	4b25      	ldr	r3, [pc, #148]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80062a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062aa:	4a24      	ldr	r2, [pc, #144]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80062ac:	f043 0310 	orr.w	r3, r3, #16
 80062b0:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80062b2:	4b22      	ldr	r3, [pc, #136]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80062b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b6:	f023 020c 	bic.w	r2, r3, #12
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062be:	491f      	ldr	r1, [pc, #124]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 80062c4:	4b1d      	ldr	r3, [pc, #116]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80062c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c8:	f023 0220 	bic.w	r2, r3, #32
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062d0:	491a      	ldr	r1, [pc, #104]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062d6:	4b19      	ldr	r3, [pc, #100]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80062d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062da:	4a18      	ldr	r2, [pc, #96]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80062dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062e0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 80062e2:	4b16      	ldr	r3, [pc, #88]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a15      	ldr	r2, [pc, #84]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 80062e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80062ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ee:	f7fc fe63 	bl	8002fb8 <HAL_GetTick>
 80062f2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80062f4:	e008      	b.n	8006308 <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80062f6:	f7fc fe5f 	bl	8002fb8 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d901      	bls.n	8006308 <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8006304:	2303      	movs	r3, #3
 8006306:	e08d      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006308:	4b0c      	ldr	r3, [pc, #48]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d0f0      	beq.n	80062f6 <HAL_RCC_OscConfig+0x736>
 8006314:	e085      	b.n	8006422 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 8006316:	4b09      	ldr	r3, [pc, #36]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a08      	ldr	r2, [pc, #32]	@ (800633c <HAL_RCC_OscConfig+0x77c>)
 800631c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006322:	f7fc fe49 	bl	8002fb8 <HAL_GetTick>
 8006326:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006328:	e00a      	b.n	8006340 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800632a:	f7fc fe45 	bl	8002fb8 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b02      	cmp	r3, #2
 8006336:	d903      	bls.n	8006340 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8006338:	2303      	movs	r3, #3
 800633a:	e073      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
 800633c:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006340:	4b3a      	ldr	r3, [pc, #232]	@ (800642c <HAL_RCC_OscConfig+0x86c>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1ee      	bne.n	800632a <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800634c:	4b37      	ldr	r3, [pc, #220]	@ (800642c <HAL_RCC_OscConfig+0x86c>)
 800634e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006350:	4a36      	ldr	r2, [pc, #216]	@ (800642c <HAL_RCC_OscConfig+0x86c>)
 8006352:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8006356:	f023 0303 	bic.w	r3, r3, #3
 800635a:	6293      	str	r3, [r2, #40]	@ 0x28
 800635c:	e061      	b.n	8006422 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800635e:	4b33      	ldr	r3, [pc, #204]	@ (800642c <HAL_RCC_OscConfig+0x86c>)
 8006360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006362:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006364:	4b31      	ldr	r3, [pc, #196]	@ (800642c <HAL_RCC_OscConfig+0x86c>)
 8006366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006368:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636e:	2b01      	cmp	r3, #1
 8006370:	d031      	beq.n	80063d6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f003 0203 	and.w	r2, r3, #3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800637c:	429a      	cmp	r2, r3
 800637e:	d12a      	bne.n	80063d6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	0a1b      	lsrs	r3, r3, #8
 8006384:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 800638c:	429a      	cmp	r2, r3
 800638e:	d122      	bne.n	80063d6 <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800639a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 800639c:	429a      	cmp	r2, r3
 800639e:	d11a      	bne.n	80063d6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	0a5b      	lsrs	r3, r3, #9
 80063a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063ac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d111      	bne.n	80063d6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	0c1b      	lsrs	r3, r3, #16
 80063b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063be:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d108      	bne.n	80063d6 <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	0e1b      	lsrs	r3, r3, #24
 80063c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d001      	beq.n	80063da <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e024      	b.n	8006424 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80063da:	4b14      	ldr	r3, [pc, #80]	@ (800642c <HAL_RCC_OscConfig+0x86c>)
 80063dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063de:	08db      	lsrs	r3, r3, #3
 80063e0:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d01a      	beq.n	8006422 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80063ec:	4b0f      	ldr	r3, [pc, #60]	@ (800642c <HAL_RCC_OscConfig+0x86c>)
 80063ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f0:	4a0e      	ldr	r2, [pc, #56]	@ (800642c <HAL_RCC_OscConfig+0x86c>)
 80063f2:	f023 0310 	bic.w	r3, r3, #16
 80063f6:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f8:	f7fc fdde 	bl	8002fb8 <HAL_GetTick>
 80063fc:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 80063fe:	bf00      	nop
 8006400:	f7fc fdda 	bl	8002fb8 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	4293      	cmp	r3, r2
 800640a:	d0f9      	beq.n	8006400 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006410:	4a06      	ldr	r2, [pc, #24]	@ (800642c <HAL_RCC_OscConfig+0x86c>)
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006416:	4b05      	ldr	r3, [pc, #20]	@ (800642c <HAL_RCC_OscConfig+0x86c>)
 8006418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641a:	4a04      	ldr	r2, [pc, #16]	@ (800642c <HAL_RCC_OscConfig+0x86c>)
 800641c:	f043 0310 	orr.w	r3, r3, #16
 8006420:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8006422:	2300      	movs	r3, #0
}
 8006424:	4618      	mov	r0, r3
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	44020c00 	.word	0x44020c00

08006430 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e19e      	b.n	8006782 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006444:	4b83      	ldr	r3, [pc, #524]	@ (8006654 <HAL_RCC_ClockConfig+0x224>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f003 030f 	and.w	r3, r3, #15
 800644c:	683a      	ldr	r2, [r7, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	d910      	bls.n	8006474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006452:	4b80      	ldr	r3, [pc, #512]	@ (8006654 <HAL_RCC_ClockConfig+0x224>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f023 020f 	bic.w	r2, r3, #15
 800645a:	497e      	ldr	r1, [pc, #504]	@ (8006654 <HAL_RCC_ClockConfig+0x224>)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	4313      	orrs	r3, r2
 8006460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006462:	4b7c      	ldr	r3, [pc, #496]	@ (8006654 <HAL_RCC_ClockConfig+0x224>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	429a      	cmp	r2, r3
 800646e:	d001      	beq.n	8006474 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e186      	b.n	8006782 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f003 0310 	and.w	r3, r3, #16
 800647c:	2b00      	cmp	r3, #0
 800647e:	d012      	beq.n	80064a6 <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	695a      	ldr	r2, [r3, #20]
 8006484:	4b74      	ldr	r3, [pc, #464]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	0a1b      	lsrs	r3, r3, #8
 800648a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800648e:	429a      	cmp	r2, r3
 8006490:	d909      	bls.n	80064a6 <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006492:	4b71      	ldr	r3, [pc, #452]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	021b      	lsls	r3, r3, #8
 80064a0:	496d      	ldr	r1, [pc, #436]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d012      	beq.n	80064d8 <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691a      	ldr	r2, [r3, #16]
 80064b6:	4b68      	ldr	r3, [pc, #416]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	091b      	lsrs	r3, r3, #4
 80064bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d909      	bls.n	80064d8 <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80064c4:	4b64      	ldr	r3, [pc, #400]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	011b      	lsls	r3, r3, #4
 80064d2:	4961      	ldr	r1, [pc, #388]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 80064d4:	4313      	orrs	r3, r2
 80064d6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d010      	beq.n	8006506 <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	4b5b      	ldr	r3, [pc, #364]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d908      	bls.n	8006506 <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80064f4:	4b58      	ldr	r3, [pc, #352]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	4955      	ldr	r1, [pc, #340]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 8006502:	4313      	orrs	r3, r2
 8006504:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d010      	beq.n	8006534 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	4b50      	ldr	r3, [pc, #320]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	429a      	cmp	r2, r3
 8006520:	d908      	bls.n	8006534 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006522:	4b4d      	ldr	r3, [pc, #308]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f023 020f 	bic.w	r2, r3, #15
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	494a      	ldr	r1, [pc, #296]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 8006530:	4313      	orrs	r3, r2
 8006532:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8093 	beq.w	8006668 <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2b03      	cmp	r3, #3
 8006548:	d107      	bne.n	800655a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800654a:	4b43      	ldr	r3, [pc, #268]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d121      	bne.n	800659a <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e113      	b.n	8006782 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	2b02      	cmp	r3, #2
 8006560:	d107      	bne.n	8006572 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006562:	4b3d      	ldr	r3, [pc, #244]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d115      	bne.n	800659a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e107      	b.n	8006782 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d107      	bne.n	800658a <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800657a:	4b37      	ldr	r3, [pc, #220]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006582:	2b00      	cmp	r3, #0
 8006584:	d109      	bne.n	800659a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e0fb      	b.n	8006782 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800658a:	4b33      	ldr	r3, [pc, #204]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0302 	and.w	r3, r3, #2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e0f3      	b.n	8006782 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800659a:	4b2f      	ldr	r3, [pc, #188]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f023 0203 	bic.w	r2, r3, #3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	492c      	ldr	r1, [pc, #176]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ac:	f7fc fd04 	bl	8002fb8 <HAL_GetTick>
 80065b0:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d112      	bne.n	80065e0 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065ba:	e00a      	b.n	80065d2 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80065bc:	f7fc fcfc 	bl	8002fb8 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e0d7      	b.n	8006782 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065d2:	4b21      	ldr	r3, [pc, #132]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	f003 0318 	and.w	r3, r3, #24
 80065da:	2b18      	cmp	r3, #24
 80065dc:	d1ee      	bne.n	80065bc <HAL_RCC_ClockConfig+0x18c>
 80065de:	e043      	b.n	8006668 <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d112      	bne.n	800660e <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80065e8:	e00a      	b.n	8006600 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80065ea:	f7fc fce5 	bl	8002fb8 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d901      	bls.n	8006600 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e0c0      	b.n	8006782 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006600:	4b15      	ldr	r3, [pc, #84]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	f003 0318 	and.w	r3, r3, #24
 8006608:	2b10      	cmp	r3, #16
 800660a:	d1ee      	bne.n	80065ea <HAL_RCC_ClockConfig+0x1ba>
 800660c:	e02c      	b.n	8006668 <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d122      	bne.n	800665c <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8006616:	e00a      	b.n	800662e <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006618:	f7fc fcce 	bl	8002fb8 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006626:	4293      	cmp	r3, r2
 8006628:	d901      	bls.n	800662e <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e0a9      	b.n	8006782 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800662e:	4b0a      	ldr	r3, [pc, #40]	@ (8006658 <HAL_RCC_ClockConfig+0x228>)
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	f003 0318 	and.w	r3, r3, #24
 8006636:	2b08      	cmp	r3, #8
 8006638:	d1ee      	bne.n	8006618 <HAL_RCC_ClockConfig+0x1e8>
 800663a:	e015      	b.n	8006668 <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800663c:	f7fc fcbc 	bl	8002fb8 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800664a:	4293      	cmp	r3, r2
 800664c:	d906      	bls.n	800665c <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e097      	b.n	8006782 <HAL_RCC_ClockConfig+0x352>
 8006652:	bf00      	nop
 8006654:	40022000 	.word	0x40022000
 8006658:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800665c:	4b4b      	ldr	r3, [pc, #300]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	f003 0318 	and.w	r3, r3, #24
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1e9      	bne.n	800663c <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0302 	and.w	r3, r3, #2
 8006670:	2b00      	cmp	r3, #0
 8006672:	d010      	beq.n	8006696 <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	4b44      	ldr	r3, [pc, #272]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 800667a:	6a1b      	ldr	r3, [r3, #32]
 800667c:	f003 030f 	and.w	r3, r3, #15
 8006680:	429a      	cmp	r2, r3
 8006682:	d208      	bcs.n	8006696 <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8006684:	4b41      	ldr	r3, [pc, #260]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 8006686:	6a1b      	ldr	r3, [r3, #32]
 8006688:	f023 020f 	bic.w	r2, r3, #15
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	493e      	ldr	r1, [pc, #248]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 8006692:	4313      	orrs	r3, r2
 8006694:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006696:	4b3e      	ldr	r3, [pc, #248]	@ (8006790 <HAL_RCC_ClockConfig+0x360>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 030f 	and.w	r3, r3, #15
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d210      	bcs.n	80066c6 <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066a4:	4b3a      	ldr	r3, [pc, #232]	@ (8006790 <HAL_RCC_ClockConfig+0x360>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f023 020f 	bic.w	r2, r3, #15
 80066ac:	4938      	ldr	r1, [pc, #224]	@ (8006790 <HAL_RCC_ClockConfig+0x360>)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066b4:	4b36      	ldr	r3, [pc, #216]	@ (8006790 <HAL_RCC_ClockConfig+0x360>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 030f 	and.w	r3, r3, #15
 80066bc:	683a      	ldr	r2, [r7, #0]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d001      	beq.n	80066c6 <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e05d      	b.n	8006782 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0304 	and.w	r3, r3, #4
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d010      	beq.n	80066f4 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	4b2d      	ldr	r3, [pc, #180]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066de:	429a      	cmp	r2, r3
 80066e0:	d208      	bcs.n	80066f4 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80066e2:	4b2a      	ldr	r3, [pc, #168]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	4927      	ldr	r1, [pc, #156]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0308 	and.w	r3, r3, #8
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d012      	beq.n	8006726 <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	691a      	ldr	r2, [r3, #16]
 8006704:	4b21      	ldr	r3, [pc, #132]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	091b      	lsrs	r3, r3, #4
 800670a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800670e:	429a      	cmp	r2, r3
 8006710:	d209      	bcs.n	8006726 <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006712:	4b1e      	ldr	r3, [pc, #120]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	491a      	ldr	r1, [pc, #104]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 8006722:	4313      	orrs	r3, r2
 8006724:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0310 	and.w	r3, r3, #16
 800672e:	2b00      	cmp	r3, #0
 8006730:	d012      	beq.n	8006758 <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695a      	ldr	r2, [r3, #20]
 8006736:	4b15      	ldr	r3, [pc, #84]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	0a1b      	lsrs	r3, r3, #8
 800673c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006740:	429a      	cmp	r2, r3
 8006742:	d209      	bcs.n	8006758 <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006744:	4b11      	ldr	r3, [pc, #68]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	021b      	lsls	r3, r3, #8
 8006752:	490e      	ldr	r1, [pc, #56]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 8006754:	4313      	orrs	r3, r2
 8006756:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006758:	f000 f822 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 800675c:	4602      	mov	r2, r0
 800675e:	4b0b      	ldr	r3, [pc, #44]	@ (800678c <HAL_RCC_ClockConfig+0x35c>)
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	f003 030f 	and.w	r3, r3, #15
 8006766:	490b      	ldr	r1, [pc, #44]	@ (8006794 <HAL_RCC_ClockConfig+0x364>)
 8006768:	5ccb      	ldrb	r3, [r1, r3]
 800676a:	fa22 f303 	lsr.w	r3, r2, r3
 800676e:	4a0a      	ldr	r2, [pc, #40]	@ (8006798 <HAL_RCC_ClockConfig+0x368>)
 8006770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006772:	4b0a      	ldr	r3, [pc, #40]	@ (800679c <HAL_RCC_ClockConfig+0x36c>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4618      	mov	r0, r3
 8006778:	f7fc fb94 	bl	8002ea4 <HAL_InitTick>
 800677c:	4603      	mov	r3, r0
 800677e:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8006780:	7afb      	ldrb	r3, [r7, #11]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	44020c00 	.word	0x44020c00
 8006790:	40022000 	.word	0x40022000
 8006794:	08013b50 	.word	0x08013b50
 8006798:	20000004 	.word	0x20000004
 800679c:	20000024 	.word	0x20000024

080067a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b089      	sub	sp, #36	@ 0x24
 80067a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80067a6:	4b8c      	ldr	r3, [pc, #560]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 80067a8:	69db      	ldr	r3, [r3, #28]
 80067aa:	f003 0318 	and.w	r3, r3, #24
 80067ae:	2b08      	cmp	r3, #8
 80067b0:	d102      	bne.n	80067b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80067b2:	4b8a      	ldr	r3, [pc, #552]	@ (80069dc <HAL_RCC_GetSysClockFreq+0x23c>)
 80067b4:	61fb      	str	r3, [r7, #28]
 80067b6:	e107      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067b8:	4b87      	ldr	r3, [pc, #540]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	f003 0318 	and.w	r3, r3, #24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d112      	bne.n	80067ea <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80067c4:	4b84      	ldr	r3, [pc, #528]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d009      	beq.n	80067e4 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80067d0:	4b81      	ldr	r3, [pc, #516]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	08db      	lsrs	r3, r3, #3
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	4a81      	ldr	r2, [pc, #516]	@ (80069e0 <HAL_RCC_GetSysClockFreq+0x240>)
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	e0f1      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 80067e4:	4b7e      	ldr	r3, [pc, #504]	@ (80069e0 <HAL_RCC_GetSysClockFreq+0x240>)
 80067e6:	61fb      	str	r3, [r7, #28]
 80067e8:	e0ee      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067ea:	4b7b      	ldr	r3, [pc, #492]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	f003 0318 	and.w	r3, r3, #24
 80067f2:	2b10      	cmp	r3, #16
 80067f4:	d102      	bne.n	80067fc <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80067f6:	4b7b      	ldr	r3, [pc, #492]	@ (80069e4 <HAL_RCC_GetSysClockFreq+0x244>)
 80067f8:	61fb      	str	r3, [r7, #28]
 80067fa:	e0e5      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067fc:	4b76      	ldr	r3, [pc, #472]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f003 0318 	and.w	r3, r3, #24
 8006804:	2b18      	cmp	r3, #24
 8006806:	f040 80dd 	bne.w	80069c4 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800680a:	4b73      	ldr	r3, [pc, #460]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 800680c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680e:	f003 0303 	and.w	r3, r3, #3
 8006812:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006814:	4b70      	ldr	r3, [pc, #448]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006818:	0a1b      	lsrs	r3, r3, #8
 800681a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800681e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006820:	4b6d      	ldr	r3, [pc, #436]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006824:	091b      	lsrs	r3, r3, #4
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800682c:	4b6a      	ldr	r3, [pc, #424]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 800682e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006830:	08db      	lsrs	r3, r3, #3
 8006832:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	fb02 f303 	mul.w	r3, r2, r3
 800683c:	ee07 3a90 	vmov	s15, r3
 8006840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006844:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 80b7 	beq.w	80069be <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2b01      	cmp	r3, #1
 8006854:	d003      	beq.n	800685e <HAL_RCC_GetSysClockFreq+0xbe>
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b03      	cmp	r3, #3
 800685a:	d056      	beq.n	800690a <HAL_RCC_GetSysClockFreq+0x16a>
 800685c:	e077      	b.n	800694e <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800685e:	4b5e      	ldr	r3, [pc, #376]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0320 	and.w	r3, r3, #32
 8006866:	2b00      	cmp	r3, #0
 8006868:	d02d      	beq.n	80068c6 <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800686a:	4b5b      	ldr	r3, [pc, #364]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	08db      	lsrs	r3, r3, #3
 8006870:	f003 0303 	and.w	r3, r3, #3
 8006874:	4a5a      	ldr	r2, [pc, #360]	@ (80069e0 <HAL_RCC_GetSysClockFreq+0x240>)
 8006876:	fa22 f303 	lsr.w	r3, r2, r3
 800687a:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	ee07 3a90 	vmov	s15, r3
 8006882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	ee07 3a90 	vmov	s15, r3
 800688c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006894:	4b50      	ldr	r3, [pc, #320]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800689c:	ee07 3a90 	vmov	s15, r3
 80068a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80068a4:	ed97 6a02 	vldr	s12, [r7, #8]
 80068a8:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 80069e8 <HAL_RCC_GetSysClockFreq+0x248>
 80068ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 80068b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068c0:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 80068c4:	e065      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	ee07 3a90 	vmov	s15, r3
 80068cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d0:	eddf 6a46 	vldr	s13, [pc, #280]	@ 80069ec <HAL_RCC_GetSysClockFreq+0x24c>
 80068d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068d8:	4b3f      	ldr	r3, [pc, #252]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 80068da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068e0:	ee07 3a90 	vmov	s15, r3
 80068e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80068e8:	ed97 6a02 	vldr	s12, [r7, #8]
 80068ec:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80069e8 <HAL_RCC_GetSysClockFreq+0x248>
 80068f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 80068f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006904:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006908:	e043      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	ee07 3a90 	vmov	s15, r3
 8006910:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006914:	eddf 6a36 	vldr	s13, [pc, #216]	@ 80069f0 <HAL_RCC_GetSysClockFreq+0x250>
 8006918:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800691c:	4b2e      	ldr	r3, [pc, #184]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 800691e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006924:	ee07 3a90 	vmov	s15, r3
 8006928:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800692c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006930:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 80069e8 <HAL_RCC_GetSysClockFreq+0x248>
 8006934:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006938:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800693c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006940:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006948:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 800694c:	e021      	b.n	8006992 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	ee07 3a90 	vmov	s15, r3
 8006954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006958:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80069f4 <HAL_RCC_GetSysClockFreq+0x254>
 800695c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006960:	4b1d      	ldr	r3, [pc, #116]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006968:	ee07 3a90 	vmov	s15, r3
 800696c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006970:	ed97 6a02 	vldr	s12, [r7, #8]
 8006974:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80069e8 <HAL_RCC_GetSysClockFreq+0x248>
 8006978:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800697c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006980:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006984:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800698c:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8006990:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8006992:	4b11      	ldr	r3, [pc, #68]	@ (80069d8 <HAL_RCC_GetSysClockFreq+0x238>)
 8006994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006996:	0a5b      	lsrs	r3, r3, #9
 8006998:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800699c:	3301      	adds	r3, #1
 800699e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069aa:	edd7 6a06 	vldr	s13, [r7, #24]
 80069ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069b6:	ee17 3a90 	vmov	r3, s15
 80069ba:	61fb      	str	r3, [r7, #28]
 80069bc:	e004      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	61fb      	str	r3, [r7, #28]
 80069c2:	e001      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 80069c4:	4b06      	ldr	r3, [pc, #24]	@ (80069e0 <HAL_RCC_GetSysClockFreq+0x240>)
 80069c6:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 80069c8:	69fb      	ldr	r3, [r7, #28]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3724      	adds	r7, #36	@ 0x24
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	44020c00 	.word	0x44020c00
 80069dc:	003d0900 	.word	0x003d0900
 80069e0:	03d09000 	.word	0x03d09000
 80069e4:	007a1200 	.word	0x007a1200
 80069e8:	46000000 	.word	0x46000000
 80069ec:	4c742400 	.word	0x4c742400
 80069f0:	4af42400 	.word	0x4af42400
 80069f4:	4a742400 	.word	0x4a742400

080069f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80069fc:	f7ff fed0 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 8006a00:	4602      	mov	r2, r0
 8006a02:	4b08      	ldr	r3, [pc, #32]	@ (8006a24 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006a04:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006a06:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006a0a:	4907      	ldr	r1, [pc, #28]	@ (8006a28 <HAL_RCC_GetHCLKFreq+0x30>)
 8006a0c:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006a0e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006a12:	fa22 f303 	lsr.w	r3, r2, r3
 8006a16:	4a05      	ldr	r2, [pc, #20]	@ (8006a2c <HAL_RCC_GetHCLKFreq+0x34>)
 8006a18:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8006a1a:	4b04      	ldr	r3, [pc, #16]	@ (8006a2c <HAL_RCC_GetHCLKFreq+0x34>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	44020c00 	.word	0x44020c00
 8006a28:	08013b50 	.word	0x08013b50
 8006a2c:	20000004 	.word	0x20000004

08006a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006a34:	f7ff ffe0 	bl	80069f8 <HAL_RCC_GetHCLKFreq>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	4b06      	ldr	r3, [pc, #24]	@ (8006a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	091b      	lsrs	r3, r3, #4
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	4904      	ldr	r1, [pc, #16]	@ (8006a58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006a46:	5ccb      	ldrb	r3, [r1, r3]
 8006a48:	f003 031f 	and.w	r3, r3, #31
 8006a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	44020c00 	.word	0x44020c00
 8006a58:	08013b60 	.word	0x08013b60

08006a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006a60:	f7ff ffca 	bl	80069f8 <HAL_RCC_GetHCLKFreq>
 8006a64:	4602      	mov	r2, r0
 8006a66:	4b06      	ldr	r3, [pc, #24]	@ (8006a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	0a1b      	lsrs	r3, r3, #8
 8006a6c:	f003 0307 	and.w	r3, r3, #7
 8006a70:	4904      	ldr	r1, [pc, #16]	@ (8006a84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006a72:	5ccb      	ldrb	r3, [r1, r3]
 8006a74:	f003 031f 	and.w	r3, r3, #31
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	44020c00 	.word	0x44020c00
 8006a84:	08013b60 	.word	0x08013b60

08006a88 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006a8c:	f7ff ffb4 	bl	80069f8 <HAL_RCC_GetHCLKFreq>
 8006a90:	4602      	mov	r2, r0
 8006a92:	4b06      	ldr	r3, [pc, #24]	@ (8006aac <HAL_RCC_GetPCLK3Freq+0x24>)
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	0b1b      	lsrs	r3, r3, #12
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	4904      	ldr	r1, [pc, #16]	@ (8006ab0 <HAL_RCC_GetPCLK3Freq+0x28>)
 8006a9e:	5ccb      	ldrb	r3, [r1, r3]
 8006aa0:	f003 031f 	and.w	r3, r3, #31
 8006aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	44020c00 	.word	0x44020c00
 8006ab0:	08013b60 	.word	0x08013b60

08006ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ab8:	b0d8      	sub	sp, #352	@ 0x160
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006acc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8006ad8:	2500      	movs	r5, #0
 8006ada:	ea54 0305 	orrs.w	r3, r4, r5
 8006ade:	d00b      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8006ae0:	4bcd      	ldr	r3, [pc, #820]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006ae6:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8006aea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006af0:	4ac9      	ldr	r2, [pc, #804]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006af2:	430b      	orrs	r3, r1
 8006af4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006af8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b00:	f002 0801 	and.w	r8, r2, #1
 8006b04:	f04f 0900 	mov.w	r9, #0
 8006b08:	ea58 0309 	orrs.w	r3, r8, r9
 8006b0c:	d042      	beq.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8006b0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b14:	2b05      	cmp	r3, #5
 8006b16:	d823      	bhi.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8006b18:	a201      	add	r2, pc, #4	@ (adr r2, 8006b20 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8006b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1e:	bf00      	nop
 8006b20:	08006b69 	.word	0x08006b69
 8006b24:	08006b39 	.word	0x08006b39
 8006b28:	08006b4d 	.word	0x08006b4d
 8006b2c:	08006b69 	.word	0x08006b69
 8006b30:	08006b69 	.word	0x08006b69
 8006b34:	08006b69 	.word	0x08006b69
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f004 fee0 	bl	800b904 <RCCEx_PLL2_Config>
 8006b44:	4603      	mov	r3, r0
 8006b46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006b4a:	e00e      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b4c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b50:	3330      	adds	r3, #48	@ 0x30
 8006b52:	4618      	mov	r0, r3
 8006b54:	f004 ff6e 	bl	800ba34 <RCCEx_PLL3_Config>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8006b5e:	e004      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b66:	e000      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8006b68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10c      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006b72:	4ba9      	ldr	r3, [pc, #676]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006b74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006b78:	f023 0107 	bic.w	r1, r3, #7
 8006b7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b82:	4aa5      	ldr	r2, [pc, #660]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006b84:	430b      	orrs	r3, r1
 8006b86:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006b8a:	e003      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b90:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b94:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b9c:	f002 0a02 	and.w	sl, r2, #2
 8006ba0:	f04f 0b00 	mov.w	fp, #0
 8006ba4:	ea5a 030b 	orrs.w	r3, sl, fp
 8006ba8:	f000 8088 	beq.w	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8006bac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bb2:	2b28      	cmp	r3, #40	@ 0x28
 8006bb4:	d868      	bhi.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8006bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bbc <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006c91 	.word	0x08006c91
 8006bc0:	08006c89 	.word	0x08006c89
 8006bc4:	08006c89 	.word	0x08006c89
 8006bc8:	08006c89 	.word	0x08006c89
 8006bcc:	08006c89 	.word	0x08006c89
 8006bd0:	08006c89 	.word	0x08006c89
 8006bd4:	08006c89 	.word	0x08006c89
 8006bd8:	08006c89 	.word	0x08006c89
 8006bdc:	08006c61 	.word	0x08006c61
 8006be0:	08006c89 	.word	0x08006c89
 8006be4:	08006c89 	.word	0x08006c89
 8006be8:	08006c89 	.word	0x08006c89
 8006bec:	08006c89 	.word	0x08006c89
 8006bf0:	08006c89 	.word	0x08006c89
 8006bf4:	08006c89 	.word	0x08006c89
 8006bf8:	08006c89 	.word	0x08006c89
 8006bfc:	08006c75 	.word	0x08006c75
 8006c00:	08006c89 	.word	0x08006c89
 8006c04:	08006c89 	.word	0x08006c89
 8006c08:	08006c89 	.word	0x08006c89
 8006c0c:	08006c89 	.word	0x08006c89
 8006c10:	08006c89 	.word	0x08006c89
 8006c14:	08006c89 	.word	0x08006c89
 8006c18:	08006c89 	.word	0x08006c89
 8006c1c:	08006c91 	.word	0x08006c91
 8006c20:	08006c89 	.word	0x08006c89
 8006c24:	08006c89 	.word	0x08006c89
 8006c28:	08006c89 	.word	0x08006c89
 8006c2c:	08006c89 	.word	0x08006c89
 8006c30:	08006c89 	.word	0x08006c89
 8006c34:	08006c89 	.word	0x08006c89
 8006c38:	08006c89 	.word	0x08006c89
 8006c3c:	08006c91 	.word	0x08006c91
 8006c40:	08006c89 	.word	0x08006c89
 8006c44:	08006c89 	.word	0x08006c89
 8006c48:	08006c89 	.word	0x08006c89
 8006c4c:	08006c89 	.word	0x08006c89
 8006c50:	08006c89 	.word	0x08006c89
 8006c54:	08006c89 	.word	0x08006c89
 8006c58:	08006c89 	.word	0x08006c89
 8006c5c:	08006c91 	.word	0x08006c91
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c64:	3308      	adds	r3, #8
 8006c66:	4618      	mov	r0, r3
 8006c68:	f004 fe4c 	bl	800b904 <RCCEx_PLL2_Config>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8006c72:	e00e      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c78:	3330      	adds	r3, #48	@ 0x30
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f004 feda 	bl	800ba34 <RCCEx_PLL3_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 8006c86:	e004      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c88:	2301      	movs	r3, #1
 8006c8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c8e:	e000      	b.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 8006c90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c92:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10c      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006c9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ca0:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006ca4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006caa:	4a5b      	ldr	r2, [pc, #364]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006cac:	430b      	orrs	r3, r1
 8006cae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006cb2:	e003      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cb4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006cb8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006cbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	f002 0304 	and.w	r3, r2, #4
 8006cc8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8006cd2:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	d04e      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006cdc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ce0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006ce2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006ce6:	d02c      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 8006ce8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006cec:	d825      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf2:	d028      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006cf4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf8:	d81f      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006cfa:	2bc0      	cmp	r3, #192	@ 0xc0
 8006cfc:	d025      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006cfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d00:	d81b      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006d02:	2b80      	cmp	r3, #128	@ 0x80
 8006d04:	d00f      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0x272>
 8006d06:	2b80      	cmp	r3, #128	@ 0x80
 8006d08:	d817      	bhi.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01f      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006d0e:	2b40      	cmp	r3, #64	@ 0x40
 8006d10:	d113      	bne.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d12:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d16:	3308      	adds	r3, #8
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f004 fdf3 	bl	800b904 <RCCEx_PLL2_Config>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006d24:	e014      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d26:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d2a:	3330      	adds	r3, #48	@ 0x30
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f004 fe81 	bl	800ba34 <RCCEx_PLL3_Config>
 8006d32:	4603      	mov	r3, r0
 8006d34:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006d38:	e00a      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d40:	e006      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006d42:	bf00      	nop
 8006d44:	e004      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006d46:	bf00      	nop
 8006d48:	e002      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006d4a:	bf00      	nop
 8006d4c:	e000      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10c      	bne.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006d58:	4b2f      	ldr	r3, [pc, #188]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006d5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006d5e:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006d62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d68:	4a2b      	ldr	r2, [pc, #172]	@ (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006d6a:	430b      	orrs	r3, r1
 8006d6c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006d70:	e003      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d72:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d76:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d7a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d82:	f002 0308 	and.w	r3, r2, #8
 8006d86:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8006d90:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8006d94:	460b      	mov	r3, r1
 8006d96:	4313      	orrs	r3, r2
 8006d98:	d056      	beq.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 8006d9a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006da0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006da4:	d031      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006da6:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006daa:	d82a      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006db0:	d02d      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x35a>
 8006db2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006db6:	d824      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006db8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006dbc:	d029      	beq.n	8006e12 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006dbe:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006dc2:	d81e      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006dc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dc8:	d011      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dce:	d818      	bhi.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d023      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006dd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006dd8:	d113      	bne.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006dda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dde:	3308      	adds	r3, #8
 8006de0:	4618      	mov	r0, r3
 8006de2:	f004 fd8f 	bl	800b904 <RCCEx_PLL2_Config>
 8006de6:	4603      	mov	r3, r0
 8006de8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8006dec:	e017      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006dee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006df2:	3330      	adds	r3, #48	@ 0x30
 8006df4:	4618      	mov	r0, r3
 8006df6:	f004 fe1d 	bl	800ba34 <RCCEx_PLL3_Config>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8006e00:	e00d      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e08:	e009      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006e0a:	bf00      	nop
 8006e0c:	e007      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006e0e:	bf00      	nop
 8006e10:	e005      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006e12:	bf00      	nop
 8006e14:	e003      	b.n	8006e1e <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8006e16:	bf00      	nop
 8006e18:	44020c00 	.word	0x44020c00
        break;
 8006e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e1e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d10c      	bne.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006e26:	4bbb      	ldr	r3, [pc, #748]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006e28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006e2c:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006e30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e36:	4ab7      	ldr	r2, [pc, #732]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006e38:	430b      	orrs	r3, r1
 8006e3a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006e3e:	e003      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e40:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e44:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f002 0310 	and.w	r3, r2, #16
 8006e54:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8006e5e:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 8006e62:	460b      	mov	r3, r1
 8006e64:	4313      	orrs	r3, r2
 8006e66:	d053      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 8006e68:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e6e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006e72:	d031      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006e74:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006e78:	d82a      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006e7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e7e:	d02d      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x428>
 8006e80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e84:	d824      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006e86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e8a:	d029      	beq.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8006e8c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006e90:	d81e      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006e92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e96:	d011      	beq.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x408>
 8006e98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e9c:	d818      	bhi.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d020      	beq.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x430>
 8006ea2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ea6:	d113      	bne.n	8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ea8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eac:	3308      	adds	r3, #8
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f004 fd28 	bl	800b904 <RCCEx_PLL2_Config>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8006eba:	e014      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ebc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ec0:	3330      	adds	r3, #48	@ 0x30
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f004 fdb6 	bl	800ba34 <RCCEx_PLL3_Config>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8006ece:	e00a      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ed6:	e006      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006ed8:	bf00      	nop
 8006eda:	e004      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006edc:	bf00      	nop
 8006ede:	e002      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006ee0:	bf00      	nop
 8006ee2:	e000      	b.n	8006ee6 <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ee6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10c      	bne.n	8006f08 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006eee:	4b89      	ldr	r3, [pc, #548]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006ef0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006ef4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006ef8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006efc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006efe:	4a85      	ldr	r2, [pc, #532]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006f00:	430b      	orrs	r3, r1
 8006f02:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006f06:	e003      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f08:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	f002 0320 	and.w	r3, r2, #32
 8006f1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006f20:	2300      	movs	r3, #0
 8006f22:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8006f26:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	d053      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8006f30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f36:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006f3a:	d031      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8006f3c:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006f40:	d82a      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006f42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f46:	d02d      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8006f48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f4c:	d824      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006f4e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006f52:	d029      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006f54:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006f58:	d81e      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f5e:	d011      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8006f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f64:	d818      	bhi.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d020      	beq.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 8006f6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f6e:	d113      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f74:	3308      	adds	r3, #8
 8006f76:	4618      	mov	r0, r3
 8006f78:	f004 fcc4 	bl	800b904 <RCCEx_PLL2_Config>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8006f82:	e014      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f88:	3330      	adds	r3, #48	@ 0x30
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f004 fd52 	bl	800ba34 <RCCEx_PLL3_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 8006f96:	e00a      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006f9e:	e006      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006fa0:	bf00      	nop
 8006fa2:	e004      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006fa4:	bf00      	nop
 8006fa6:	e002      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006fa8:	bf00      	nop
 8006faa:	e000      	b.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 8006fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d10c      	bne.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8006fb6:	4b57      	ldr	r3, [pc, #348]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006fbc:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8006fc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc6:	4a53      	ldr	r2, [pc, #332]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006fce:	e003      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fd4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006fe4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8006fe8:	2300      	movs	r3, #0
 8006fea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006fee:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	d053      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 8006ff8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ffe:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007002:	d031      	beq.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8007004:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8007008:	d82a      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800700a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800700e:	d02d      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8007010:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007014:	d824      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007016:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800701a:	d029      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800701c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007020:	d81e      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8007022:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007026:	d011      	beq.n	800704c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8007028:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800702c:	d818      	bhi.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800702e:	2b00      	cmp	r3, #0
 8007030:	d020      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8007032:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007036:	d113      	bne.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007038:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800703c:	3308      	adds	r3, #8
 800703e:	4618      	mov	r0, r3
 8007040:	f004 fc60 	bl	800b904 <RCCEx_PLL2_Config>
 8007044:	4603      	mov	r3, r0
 8007046:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800704a:	e014      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800704c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007050:	3330      	adds	r3, #48	@ 0x30
 8007052:	4618      	mov	r0, r3
 8007054:	f004 fcee 	bl	800ba34 <RCCEx_PLL3_Config>
 8007058:	4603      	mov	r3, r0
 800705a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800705e:	e00a      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007066:	e006      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007068:	bf00      	nop
 800706a:	e004      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 800706c:	bf00      	nop
 800706e:	e002      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007070:	bf00      	nop
 8007072:	e000      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 8007074:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007076:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800707a:	2b00      	cmp	r3, #0
 800707c:	d10c      	bne.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800707e:	4b25      	ldr	r3, [pc, #148]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007080:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007084:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 8007088:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800708c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800708e:	4a21      	ldr	r2, [pc, #132]	@ (8007114 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8007090:	430b      	orrs	r3, r1
 8007092:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007096:	e003      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007098:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800709c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80070a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80070ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80070b0:	2300      	movs	r3, #0
 80070b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80070b6:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80070ba:	460b      	mov	r3, r1
 80070bc:	4313      	orrs	r3, r2
 80070be:	d055      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 80070c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80070c6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80070ca:	d033      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x680>
 80070cc:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80070d0:	d82c      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80070d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070d6:	d02f      	beq.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x684>
 80070d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070dc:	d826      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80070de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070e2:	d02b      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0x688>
 80070e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070e8:	d820      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80070ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070ee:	d013      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80070f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070f4:	d81a      	bhi.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x678>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d022      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 80070fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070fe:	d115      	bne.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007100:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007104:	3308      	adds	r3, #8
 8007106:	4618      	mov	r0, r3
 8007108:	f004 fbfc 	bl	800b904 <RCCEx_PLL2_Config>
 800710c:	4603      	mov	r3, r0
 800710e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8007112:	e016      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8007114:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007118:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800711c:	3330      	adds	r3, #48	@ 0x30
 800711e:	4618      	mov	r0, r3
 8007120:	f004 fc88 	bl	800ba34 <RCCEx_PLL3_Config>
 8007124:	4603      	mov	r3, r0
 8007126:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800712a:	e00a      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007132:	e006      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007134:	bf00      	nop
 8007136:	e004      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007138:	bf00      	nop
 800713a:	e002      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800713c:	bf00      	nop
 800713e:	e000      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8007140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007142:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10c      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800714a:	4bbb      	ldr	r3, [pc, #748]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800714c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007150:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8007154:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007158:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800715a:	4ab7      	ldr	r2, [pc, #732]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800715c:	430b      	orrs	r3, r1
 800715e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8007162:	e003      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007168:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800716c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8007178:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800717c:	2300      	movs	r3, #0
 800717e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8007182:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8007186:	460b      	mov	r3, r1
 8007188:	4313      	orrs	r3, r2
 800718a:	d053      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 800718c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007190:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007192:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007196:	d031      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x748>
 8007198:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800719c:	d82a      	bhi.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 800719e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071a2:	d02d      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80071a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80071a8:	d824      	bhi.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80071aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071ae:	d029      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80071b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80071b4:	d81e      	bhi.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80071b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071ba:	d011      	beq.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80071bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80071c0:	d818      	bhi.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d020      	beq.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x754>
 80071c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071ca:	d113      	bne.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071d0:	3308      	adds	r3, #8
 80071d2:	4618      	mov	r0, r3
 80071d4:	f004 fb96 	bl	800b904 <RCCEx_PLL2_Config>
 80071d8:	4603      	mov	r3, r0
 80071da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80071de:	e014      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071e4:	3330      	adds	r3, #48	@ 0x30
 80071e6:	4618      	mov	r0, r3
 80071e8:	f004 fc24 	bl	800ba34 <RCCEx_PLL3_Config>
 80071ec:	4603      	mov	r3, r0
 80071ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 80071f2:	e00a      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071f4:	2301      	movs	r3, #1
 80071f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80071fa:	e006      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 80071fc:	bf00      	nop
 80071fe:	e004      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007200:	bf00      	nop
 8007202:	e002      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007204:	bf00      	nop
 8007206:	e000      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8007208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800720a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800720e:	2b00      	cmp	r3, #0
 8007210:	d10c      	bne.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8007212:	4b89      	ldr	r3, [pc, #548]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007214:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007218:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800721c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007220:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007222:	4a85      	ldr	r2, [pc, #532]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007224:	430b      	orrs	r3, r1
 8007226:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800722a:	e003      	b.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800722c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007230:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8007234:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723c:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8007240:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007244:	2300      	movs	r3, #0
 8007246:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800724a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800724e:	460b      	mov	r3, r1
 8007250:	4313      	orrs	r3, r2
 8007252:	d055      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8007254:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800725c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007260:	d031      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x812>
 8007262:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8007266:	d82a      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007268:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800726c:	d02d      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x816>
 800726e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007272:	d824      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007274:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8007278:	d029      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x81a>
 800727a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800727e:	d81e      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x80a>
 8007280:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007284:	d011      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 8007286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800728a:	d818      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x80a>
 800728c:	2b00      	cmp	r3, #0
 800728e:	d020      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 8007290:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007294:	d113      	bne.n	80072be <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007296:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800729a:	3308      	adds	r3, #8
 800729c:	4618      	mov	r0, r3
 800729e:	f004 fb31 	bl	800b904 <RCCEx_PLL2_Config>
 80072a2:	4603      	mov	r3, r0
 80072a4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80072a8:	e014      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072ae:	3330      	adds	r3, #48	@ 0x30
 80072b0:	4618      	mov	r0, r3
 80072b2:	f004 fbbf 	bl	800ba34 <RCCEx_PLL3_Config>
 80072b6:	4603      	mov	r3, r0
 80072b8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80072bc:	e00a      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80072c4:	e006      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80072c6:	bf00      	nop
 80072c8:	e004      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80072ca:	bf00      	nop
 80072cc:	e002      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80072ce:	bf00      	nop
 80072d0:	e000      	b.n	80072d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 80072d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072d4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10d      	bne.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80072dc:	4b56      	ldr	r3, [pc, #344]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80072de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80072e2:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 80072e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072ee:	4a52      	ldr	r2, [pc, #328]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80072f0:	430b      	orrs	r3, r1
 80072f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80072f6:	e003      	b.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8007300:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007308:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800730c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007310:	2300      	movs	r3, #0
 8007312:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007316:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800731a:	460b      	mov	r3, r1
 800731c:	4313      	orrs	r3, r2
 800731e:	d044      	beq.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8007320:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007324:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007328:	2b05      	cmp	r3, #5
 800732a:	d823      	bhi.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800732c:	a201      	add	r2, pc, #4	@ (adr r2, 8007334 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800732e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007332:	bf00      	nop
 8007334:	0800737d 	.word	0x0800737d
 8007338:	0800734d 	.word	0x0800734d
 800733c:	08007361 	.word	0x08007361
 8007340:	0800737d 	.word	0x0800737d
 8007344:	0800737d 	.word	0x0800737d
 8007348:	0800737d 	.word	0x0800737d
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800734c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007350:	3308      	adds	r3, #8
 8007352:	4618      	mov	r0, r3
 8007354:	f004 fad6 	bl	800b904 <RCCEx_PLL2_Config>
 8007358:	4603      	mov	r3, r0
 800735a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 800735e:	e00e      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007360:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007364:	3330      	adds	r3, #48	@ 0x30
 8007366:	4618      	mov	r0, r3
 8007368:	f004 fb64 	bl	800ba34 <RCCEx_PLL3_Config>
 800736c:	4603      	mov	r3, r0
 800736e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 8007372:	e004      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800737a:	e000      	b.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 800737c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800737e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10d      	bne.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8007386:	4b2c      	ldr	r3, [pc, #176]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8007388:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800738c:	f023 0107 	bic.w	r1, r3, #7
 8007390:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007394:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007398:	4a27      	ldr	r2, [pc, #156]	@ (8007438 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 800739a:	430b      	orrs	r3, r1
 800739c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80073a0:	e003      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80073aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80073b6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80073ba:	2300      	movs	r3, #0
 80073bc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80073c0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80073c4:	460b      	mov	r3, r1
 80073c6:	4313      	orrs	r3, r2
 80073c8:	d04f      	beq.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 80073ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073d2:	2b50      	cmp	r3, #80	@ 0x50
 80073d4:	d029      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0x976>
 80073d6:	2b50      	cmp	r3, #80	@ 0x50
 80073d8:	d823      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80073da:	2b40      	cmp	r3, #64	@ 0x40
 80073dc:	d027      	beq.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x97a>
 80073de:	2b40      	cmp	r3, #64	@ 0x40
 80073e0:	d81f      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80073e2:	2b30      	cmp	r3, #48	@ 0x30
 80073e4:	d025      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 80073e6:	2b30      	cmp	r3, #48	@ 0x30
 80073e8:	d81b      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	d00f      	beq.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d817      	bhi.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d022      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x988>
 80073f6:	2b10      	cmp	r3, #16
 80073f8:	d113      	bne.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073fe:	3308      	adds	r3, #8
 8007400:	4618      	mov	r0, r3
 8007402:	f004 fa7f 	bl	800b904 <RCCEx_PLL2_Config>
 8007406:	4603      	mov	r3, r0
 8007408:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 800740c:	e017      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800740e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007412:	3330      	adds	r3, #48	@ 0x30
 8007414:	4618      	mov	r0, r3
 8007416:	f004 fb0d 	bl	800ba34 <RCCEx_PLL3_Config>
 800741a:	4603      	mov	r3, r0
 800741c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8007420:	e00d      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007428:	e009      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800742a:	bf00      	nop
 800742c:	e007      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800742e:	bf00      	nop
 8007430:	e005      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8007432:	bf00      	nop
 8007434:	e003      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x98a>
 8007436:	bf00      	nop
 8007438:	44020c00 	.word	0x44020c00
        break;
 800743c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800743e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10d      	bne.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 8007446:	4baf      	ldr	r3, [pc, #700]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007448:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800744c:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8007450:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007454:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007458:	4aaa      	ldr	r2, [pc, #680]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800745a:	430b      	orrs	r3, r1
 800745c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007460:	e003      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007462:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007466:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800746a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800746e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007472:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007476:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800747a:	2300      	movs	r3, #0
 800747c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007480:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007484:	460b      	mov	r3, r1
 8007486:	4313      	orrs	r3, r2
 8007488:	d055      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800748a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800748e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007492:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007496:	d031      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xa48>
 8007498:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800749c:	d82a      	bhi.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 800749e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074a2:	d02d      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80074a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80074a8:	d824      	bhi.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80074aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80074ae:	d029      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80074b0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80074b4:	d81e      	bhi.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80074b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074ba:	d011      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80074bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80074c0:	d818      	bhi.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d020      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 80074c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80074ca:	d113      	bne.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80074cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074d0:	3308      	adds	r3, #8
 80074d2:	4618      	mov	r0, r3
 80074d4:	f004 fa16 	bl	800b904 <RCCEx_PLL2_Config>
 80074d8:	4603      	mov	r3, r0
 80074da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80074de:	e014      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80074e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80074e4:	3330      	adds	r3, #48	@ 0x30
 80074e6:	4618      	mov	r0, r3
 80074e8:	f004 faa4 	bl	800ba34 <RCCEx_PLL3_Config>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 80074f2:	e00a      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80074fa:	e006      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 80074fc:	bf00      	nop
 80074fe:	e004      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007500:	bf00      	nop
 8007502:	e002      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007504:	bf00      	nop
 8007506:	e000      	b.n	800750a <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8007508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800750a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10d      	bne.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007512:	4b7c      	ldr	r3, [pc, #496]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007518:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800751c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007524:	4a77      	ldr	r2, [pc, #476]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8007526:	430b      	orrs	r3, r1
 8007528:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800752c:	e003      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800752e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007532:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007536:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007542:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007546:	2300      	movs	r3, #0
 8007548:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800754c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007550:	460b      	mov	r3, r1
 8007552:	4313      	orrs	r3, r2
 8007554:	d03d      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 8007556:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800755a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800755e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007562:	d01b      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xae8>
 8007564:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007568:	d814      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 800756a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800756e:	d017      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 8007570:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007574:	d80e      	bhi.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d014      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800757a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800757e:	d109      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007580:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007584:	3330      	adds	r3, #48	@ 0x30
 8007586:	4618      	mov	r0, r3
 8007588:	f004 fa54 	bl	800ba34 <RCCEx_PLL3_Config>
 800758c:	4603      	mov	r3, r0
 800758e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 8007592:	e008      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800759a:	e004      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 800759c:	bf00      	nop
 800759e:	e002      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80075a0:	bf00      	nop
 80075a2:	e000      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80075a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10d      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80075ae:	4b55      	ldr	r3, [pc, #340]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80075b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80075b4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80075b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c0:	4a50      	ldr	r2, [pc, #320]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80075c2:	430b      	orrs	r3, r1
 80075c4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80075c8:	e003      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075da:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80075de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80075e2:	2300      	movs	r3, #0
 80075e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075e8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80075ec:	460b      	mov	r3, r1
 80075ee:	4313      	orrs	r3, r2
 80075f0:	d03d      	beq.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 80075f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80075fe:	d01b      	beq.n	8007638 <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8007600:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007604:	d814      	bhi.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007606:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800760a:	d017      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0xb88>
 800760c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007610:	d80e      	bhi.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8007612:	2b00      	cmp	r3, #0
 8007614:	d014      	beq.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8007616:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800761a:	d109      	bne.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800761c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007620:	3330      	adds	r3, #48	@ 0x30
 8007622:	4618      	mov	r0, r3
 8007624:	f004 fa06 	bl	800ba34 <RCCEx_PLL3_Config>
 8007628:	4603      	mov	r3, r0
 800762a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 800762e:	e008      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007636:	e004      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007638:	bf00      	nop
 800763a:	e002      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 800763c:	bf00      	nop
 800763e:	e000      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8007640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007642:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10d      	bne.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 800764a:	4b2e      	ldr	r3, [pc, #184]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800764c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007650:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8007654:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007658:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800765c:	4a29      	ldr	r2, [pc, #164]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800765e:	430b      	orrs	r3, r1
 8007660:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007664:	e003      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007666:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800766a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800766e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007676:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800767a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800767e:	2300      	movs	r3, #0
 8007680:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007684:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007688:	460b      	mov	r3, r1
 800768a:	4313      	orrs	r3, r2
 800768c:	d040      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 800768e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007692:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007696:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800769a:	d01b      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 800769c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80076a0:	d814      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80076a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076a6:	d017      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80076a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80076ac:	d80e      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc18>
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d014      	beq.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80076b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80076b6:	d109      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80076b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076bc:	3330      	adds	r3, #48	@ 0x30
 80076be:	4618      	mov	r0, r3
 80076c0:	f004 f9b8 	bl	800ba34 <RCCEx_PLL3_Config>
 80076c4:	4603      	mov	r3, r0
 80076c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 80076ca:	e008      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80076d2:	e004      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80076d4:	bf00      	nop
 80076d6:	e002      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80076d8:	bf00      	nop
 80076da:	e000      	b.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 80076dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076de:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d110      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80076e6:	4b07      	ldr	r3, [pc, #28]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80076e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80076ec:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80076f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80076f8:	4a02      	ldr	r2, [pc, #8]	@ (8007704 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80076fa:	430b      	orrs	r3, r1
 80076fc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007700:	e006      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8007702:	bf00      	nop
 8007704:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007708:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800770c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007710:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007718:	2100      	movs	r1, #0
 800771a:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800771e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007722:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007726:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800772a:	460b      	mov	r3, r1
 800772c:	4313      	orrs	r3, r2
 800772e:	d03d      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8007730:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007734:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007738:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800773c:	d01b      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800773e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007742:	d814      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007744:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007748:	d017      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800774a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800774e:	d80e      	bhi.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8007750:	2b00      	cmp	r3, #0
 8007752:	d014      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8007754:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007758:	d109      	bne.n	800776e <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800775a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800775e:	3330      	adds	r3, #48	@ 0x30
 8007760:	4618      	mov	r0, r3
 8007762:	f004 f967 	bl	800ba34 <RCCEx_PLL3_Config>
 8007766:	4603      	mov	r3, r0
 8007768:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 800776c:	e008      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007774:	e004      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8007776:	bf00      	nop
 8007778:	e002      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800777a:	bf00      	nop
 800777c:	e000      	b.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 800777e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007780:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007784:	2b00      	cmp	r3, #0
 8007786:	d10d      	bne.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007788:	4bbe      	ldr	r3, [pc, #760]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800778a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800778e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007792:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007796:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800779a:	4aba      	ldr	r2, [pc, #744]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800779c:	430b      	orrs	r3, r1
 800779e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80077a2:	e003      	b.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80077ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80077b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80077bc:	2300      	movs	r3, #0
 80077be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80077c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80077c6:	460b      	mov	r3, r1
 80077c8:	4313      	orrs	r3, r2
 80077ca:	d035      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 80077cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80077d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077d8:	d015      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0xd52>
 80077da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80077de:	d80e      	bhi.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d012      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0xd56>
 80077e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80077e8:	d109      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80077ea:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077ee:	3330      	adds	r3, #48	@ 0x30
 80077f0:	4618      	mov	r0, r3
 80077f2:	f004 f91f 	bl	800ba34 <RCCEx_PLL3_Config>
 80077f6:	4603      	mov	r3, r0
 80077f8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 80077fc:	e006      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007804:	e002      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8007806:	bf00      	nop
 8007808:	e000      	b.n	800780c <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 800780a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800780c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10d      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8007814:	4b9b      	ldr	r3, [pc, #620]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007816:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800781a:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 800781e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007822:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007826:	4a97      	ldr	r2, [pc, #604]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007828:	430b      	orrs	r3, r1
 800782a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800782e:	e003      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007830:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007834:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007838:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	2100      	movs	r1, #0
 8007842:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8007846:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800784a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800784e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007852:	460b      	mov	r3, r1
 8007854:	4313      	orrs	r3, r2
 8007856:	d00e      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8007858:	4b8a      	ldr	r3, [pc, #552]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	4a89      	ldr	r2, [pc, #548]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 800785e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007862:	61d3      	str	r3, [r2, #28]
 8007864:	4b87      	ldr	r3, [pc, #540]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007866:	69d9      	ldr	r1, [r3, #28]
 8007868:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800786c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8007870:	4a84      	ldr	r2, [pc, #528]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007872:	430b      	orrs	r3, r1
 8007874:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007876:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800787a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007882:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007886:	2300      	movs	r3, #0
 8007888:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800788c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007890:	460b      	mov	r3, r1
 8007892:	4313      	orrs	r3, r2
 8007894:	d055      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8007896:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800789a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800789e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80078a2:	d031      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xe54>
 80078a4:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80078a8:	d82a      	bhi.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80078aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078ae:	d02d      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80078b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80078b4:	d824      	bhi.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80078b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078ba:	d029      	beq.n	8007910 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80078bc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078c0:	d81e      	bhi.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80078c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078c6:	d011      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0xe38>
 80078c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078cc:	d818      	bhi.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d020      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80078d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078d6:	d113      	bne.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80078d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078dc:	3308      	adds	r3, #8
 80078de:	4618      	mov	r0, r3
 80078e0:	f004 f810 	bl	800b904 <RCCEx_PLL2_Config>
 80078e4:	4603      	mov	r3, r0
 80078e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80078ea:	e014      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078f0:	3330      	adds	r3, #48	@ 0x30
 80078f2:	4618      	mov	r0, r3
 80078f4:	f004 f89e 	bl	800ba34 <RCCEx_PLL3_Config>
 80078f8:	4603      	mov	r3, r0
 80078fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 80078fe:	e00a      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007906:	e006      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007908:	bf00      	nop
 800790a:	e004      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 800790c:	bf00      	nop
 800790e:	e002      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007910:	bf00      	nop
 8007912:	e000      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8007914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007916:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10d      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800791e:	4b59      	ldr	r3, [pc, #356]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007920:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007924:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8007928:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800792c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007930:	4a54      	ldr	r2, [pc, #336]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8007932:	430b      	orrs	r3, r1
 8007934:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007938:	e003      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800793e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007942:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800794e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007952:	2300      	movs	r3, #0
 8007954:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007958:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800795c:	460b      	mov	r3, r1
 800795e:	4313      	orrs	r3, r2
 8007960:	d055      	beq.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8007962:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007966:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800796a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800796e:	d031      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8007970:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007974:	d82a      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007976:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800797a:	d02d      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xf24>
 800797c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007980:	d824      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8007982:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007986:	d029      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8007988:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800798c:	d81e      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800798e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007992:	d011      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8007994:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007998:	d818      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xf18>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d020      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800799e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079a2:	d113      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80079a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079a8:	3308      	adds	r3, #8
 80079aa:	4618      	mov	r0, r3
 80079ac:	f003 ffaa 	bl	800b904 <RCCEx_PLL2_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80079b6:	e014      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80079b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079bc:	3330      	adds	r3, #48	@ 0x30
 80079be:	4618      	mov	r0, r3
 80079c0:	f004 f838 	bl	800ba34 <RCCEx_PLL3_Config>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 80079ca:	e00a      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80079d2:	e006      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80079d4:	bf00      	nop
 80079d6:	e004      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80079d8:	bf00      	nop
 80079da:	e002      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80079dc:	bf00      	nop
 80079de:	e000      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 80079e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10d      	bne.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80079ea:	4b26      	ldr	r3, [pc, #152]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80079ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80079f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80079f4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079f8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80079fc:	4a21      	ldr	r2, [pc, #132]	@ (8007a84 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 80079fe:	430b      	orrs	r3, r1
 8007a00:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007a04:	e003      	b.n	8007a0e <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8007a0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	2100      	movs	r1, #0
 8007a18:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8007a1c:	f003 0320 	and.w	r3, r3, #32
 8007a20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	d057      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8007a2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007a36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a3a:	d033      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8007a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a40:	d82c      	bhi.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007a42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a46:	d02f      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8007a48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a4c:	d826      	bhi.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007a4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a52:	d02b      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8007a54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007a58:	d820      	bhi.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007a5a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a5e:	d013      	beq.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007a60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a64:	d81a      	bhi.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d022      	beq.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8007a6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a6e:	d115      	bne.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a74:	3308      	adds	r3, #8
 8007a76:	4618      	mov	r0, r3
 8007a78:	f003 ff44 	bl	800b904 <RCCEx_PLL2_Config>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007a82:	e016      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8007a84:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a8c:	3330      	adds	r3, #48	@ 0x30
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f003 ffd0 	bl	800ba34 <RCCEx_PLL3_Config>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8007a9a:	e00a      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007aa2:	e006      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007aa4:	bf00      	nop
 8007aa6:	e004      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007aa8:	bf00      	nop
 8007aaa:	e002      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007aac:	bf00      	nop
 8007aae:	e000      	b.n	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8007ab0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10d      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8007aba:	4bbb      	ldr	r3, [pc, #748]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007abc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007ac0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007ac4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ac8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007acc:	4ab6      	ldr	r2, [pc, #728]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007ace:	430b      	orrs	r3, r1
 8007ad0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007ad4:	e003      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ada:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8007ade:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	2100      	movs	r1, #0
 8007ae8:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8007aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007af4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4313      	orrs	r3, r2
 8007afc:	d055      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8007afe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b06:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007b0a:	d031      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8007b0c:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8007b10:	d82a      	bhi.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007b12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b16:	d02d      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8007b18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b1c:	d824      	bhi.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007b1e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b22:	d029      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8007b24:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b28:	d81e      	bhi.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007b2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b2e:	d011      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8007b30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b34:	d818      	bhi.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d020      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8007b3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b3e:	d113      	bne.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b44:	3308      	adds	r3, #8
 8007b46:	4618      	mov	r0, r3
 8007b48:	f003 fedc 	bl	800b904 <RCCEx_PLL2_Config>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007b52:	e014      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007b54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b58:	3330      	adds	r3, #48	@ 0x30
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f003 ff6a 	bl	800ba34 <RCCEx_PLL3_Config>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8007b66:	e00a      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007b6e:	e006      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007b70:	bf00      	nop
 8007b72:	e004      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007b74:	bf00      	nop
 8007b76:	e002      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007b78:	bf00      	nop
 8007b7a:	e000      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8007b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10d      	bne.n	8007ba2 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8007b86:	4b88      	ldr	r3, [pc, #544]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007b88:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007b8c:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8007b90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007b98:	4a83      	ldr	r2, [pc, #524]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007b9a:	430b      	orrs	r3, r1
 8007b9c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007ba0:	e003      	b.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ba6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8007baa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8007bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bc0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	d055      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 8007bca:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bd2:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007bd6:	d031      	beq.n	8007c3c <HAL_RCCEx_PeriphCLKConfig+0x1188>
 8007bd8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007bdc:	d82a      	bhi.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007bde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007be2:	d02d      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8007be4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007be8:	d824      	bhi.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007bea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007bee:	d029      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8007bf0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007bf4:	d81e      	bhi.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007bf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007bfa:	d011      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8007bfc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007c00:	d818      	bhi.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d020      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x1194>
 8007c06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c0a:	d113      	bne.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c10:	3308      	adds	r3, #8
 8007c12:	4618      	mov	r0, r3
 8007c14:	f003 fe76 	bl	800b904 <RCCEx_PLL2_Config>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007c1e:	e014      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007c20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c24:	3330      	adds	r3, #48	@ 0x30
 8007c26:	4618      	mov	r0, r3
 8007c28:	f003 ff04 	bl	800ba34 <RCCEx_PLL3_Config>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007c32:	e00a      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c34:	2301      	movs	r3, #1
 8007c36:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c3a:	e006      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007c3c:	bf00      	nop
 8007c3e:	e004      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007c40:	bf00      	nop
 8007c42:	e002      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007c44:	bf00      	nop
 8007c46:	e000      	b.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10d      	bne.n	8007c6e <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8007c52:	4b55      	ldr	r3, [pc, #340]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007c54:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007c58:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007c5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c60:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007c64:	4a50      	ldr	r2, [pc, #320]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007c66:	430b      	orrs	r3, r1
 8007c68:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007c6c:	e003      	b.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c72:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8007c76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	2100      	movs	r1, #0
 8007c80:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8007c84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c88:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c8c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007c90:	460b      	mov	r3, r1
 8007c92:	4313      	orrs	r3, r2
 8007c94:	d055      	beq.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 8007c96:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c9a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007c9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ca2:	d031      	beq.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1254>
 8007ca4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ca8:	d82a      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cae:	d02d      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1258>
 8007cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cb4:	d824      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007cb6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007cba:	d029      	beq.n	8007d10 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007cbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007cc0:	d81e      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007cc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007cc6:	d011      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x1238>
 8007cc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ccc:	d818      	bhi.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d020      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8007cd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cd6:	d113      	bne.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007cd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cdc:	3308      	adds	r3, #8
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f003 fe10 	bl	800b904 <RCCEx_PLL2_Config>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8007cea:	e014      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007cec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cf0:	3330      	adds	r3, #48	@ 0x30
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f003 fe9e 	bl	800ba34 <RCCEx_PLL3_Config>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8007cfe:	e00a      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d06:	e006      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007d08:	bf00      	nop
 8007d0a:	e004      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007d0c:	bf00      	nop
 8007d0e:	e002      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007d10:	bf00      	nop
 8007d12:	e000      	b.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d16:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10d      	bne.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8007d1e:	4b22      	ldr	r3, [pc, #136]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007d20:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007d24:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007d28:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007d30:	4a1d      	ldr	r2, [pc, #116]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007d32:	430b      	orrs	r3, r1
 8007d34:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8007d38:	e003      	b.n	8007d42 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d3a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d3e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007d4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d52:	2300      	movs	r3, #0
 8007d54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d58:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	d055      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007d62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d66:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007d6a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d6e:	d035      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x1328>
 8007d70:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007d74:	d82e      	bhi.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007d76:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d7a:	d031      	beq.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 8007d7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007d80:	d828      	bhi.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007d82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d86:	d01b      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8007d88:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d8c:	d822      	bhi.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d003      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 8007d92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d96:	d009      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 8007d98:	e01c      	b.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d9a:	4b03      	ldr	r3, [pc, #12]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d9e:	4a02      	ldr	r2, [pc, #8]	@ (8007da8 <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007da4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007da6:	e01c      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 8007da8:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007dac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007db0:	3308      	adds	r3, #8
 8007db2:	4618      	mov	r0, r3
 8007db4:	f003 fda6 	bl	800b904 <RCCEx_PLL2_Config>
 8007db8:	4603      	mov	r3, r0
 8007dba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007dbe:	e010      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dc4:	3330      	adds	r3, #48	@ 0x30
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f003 fe34 	bl	800ba34 <RCCEx_PLL3_Config>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007dd2:	e006      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dd4:	2301      	movs	r3, #1
 8007dd6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007dda:	e002      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007ddc:	bf00      	nop
 8007dde:	e000      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007de2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10d      	bne.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007dea:	4bc3      	ldr	r3, [pc, #780]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007df0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007df4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007df8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007dfc:	4abe      	ldr	r2, [pc, #760]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007dfe:	430b      	orrs	r3, r1
 8007e00:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007e04:	e003      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007e0a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8007e0e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e16:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e24:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007e28:	460b      	mov	r3, r1
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	d051      	beq.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007e2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e32:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007e36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e3a:	d033      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007e3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e40:	d82c      	bhi.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007e42:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007e46:	d02d      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007e48:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007e4c:	d826      	bhi.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007e4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e52:	d019      	beq.n	8007e88 <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8007e54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e58:	d820      	bhi.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8007e5e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007e62:	d007      	beq.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 8007e64:	e01a      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e66:	4ba4      	ldr	r3, [pc, #656]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e6a:	4aa3      	ldr	r2, [pc, #652]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e70:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007e72:	e018      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007e74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e78:	3308      	adds	r3, #8
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f003 fd42 	bl	800b904 <RCCEx_PLL2_Config>
 8007e80:	4603      	mov	r3, r0
 8007e82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007e86:	e00e      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007e88:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007e8c:	3330      	adds	r3, #48	@ 0x30
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f003 fdd0 	bl	800ba34 <RCCEx_PLL3_Config>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007e9a:	e004      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007ea2:	e000      	b.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 8007ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ea6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10d      	bne.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007eae:	4b92      	ldr	r3, [pc, #584]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007eb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007eb4:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 8007eb8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ebc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007ec0:	4a8d      	ldr	r2, [pc, #564]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007ec2:	430b      	orrs	r3, r1
 8007ec4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007ec8:	e003      	b.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007ece:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007ed2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007ede:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ee4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4313      	orrs	r3, r2
 8007eec:	d032      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007eee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ef2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007ef6:	2b05      	cmp	r3, #5
 8007ef8:	d80f      	bhi.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x1466>
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d211      	bcs.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d911      	bls.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d109      	bne.n	8007f1a <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f06:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f003 fcf9 	bl	800b904 <RCCEx_PLL2_Config>
 8007f12:	4603      	mov	r3, r0
 8007f14:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f18:	e006      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f20:	e002      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8007f22:	bf00      	nop
 8007f24:	e000      	b.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8007f26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f28:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d10d      	bne.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007f30:	4b71      	ldr	r3, [pc, #452]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f36:	f023 0107 	bic.w	r1, r3, #7
 8007f3a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007f42:	4a6d      	ldr	r2, [pc, #436]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f44:	430b      	orrs	r3, r1
 8007f46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007f4a:	e003      	b.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f50:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8007f54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	6739      	str	r1, [r7, #112]	@ 0x70
 8007f60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007f64:	677b      	str	r3, [r7, #116]	@ 0x74
 8007f66:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	d024      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8007f70:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007f74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d005      	beq.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d005      	beq.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007f86:	e002      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8007f88:	bf00      	nop
 8007f8a:	e000      	b.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 8007f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f8e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10d      	bne.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8007f96:	4b58      	ldr	r3, [pc, #352]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007f98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007f9c:	f023 0108 	bic.w	r1, r3, #8
 8007fa0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007fa8:	4a53      	ldr	r2, [pc, #332]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007faa:	430b      	orrs	r3, r1
 8007fac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007fb0:	e003      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007fb6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007fba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8007fc6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007fc8:	2300      	movs	r3, #0
 8007fca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007fcc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	f000 80b9 	beq.w	800814a <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8007fd8:	4b48      	ldr	r3, [pc, #288]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8007fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fdc:	4a47      	ldr	r2, [pc, #284]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8007fde:	f043 0301 	orr.w	r3, r3, #1
 8007fe2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fe4:	f7fa ffe8 	bl	8002fb8 <HAL_GetTick>
 8007fe8:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007fec:	e00b      	b.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fee:	f7fa ffe3 	bl	8002fb8 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d903      	bls.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008004:	e005      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8008006:	4b3d      	ldr	r3, [pc, #244]	@ (80080fc <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8008008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0ed      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8008012:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008016:	2b00      	cmp	r3, #0
 8008018:	f040 8093 	bne.w	8008142 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800801c:	4b36      	ldr	r3, [pc, #216]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800801e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008022:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008026:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800802a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800802e:	2b00      	cmp	r3, #0
 8008030:	d023      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8008032:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008036:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800803a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800803e:	4293      	cmp	r3, r2
 8008040:	d01b      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008042:	4b2d      	ldr	r3, [pc, #180]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008044:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800804c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008050:	4b29      	ldr	r3, [pc, #164]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008056:	4a28      	ldr	r2, [pc, #160]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800805c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008060:	4b25      	ldr	r3, [pc, #148]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008062:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008066:	4a24      	ldr	r2, [pc, #144]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008068:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800806c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008070:	4a21      	ldr	r2, [pc, #132]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8008072:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8008076:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800807a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d019      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008086:	f7fa ff97 	bl	8002fb8 <HAL_GetTick>
 800808a:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800808e:	e00d      	b.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008090:	f7fa ff92 	bl	8002fb8 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800809a:	1ad2      	subs	r2, r2, r3
 800809c:	f241 3388 	movw	r3, #5000	@ 0x1388
 80080a0:	429a      	cmp	r2, r3
 80080a2:	d903      	bls.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 80080aa:	e006      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80080ac:	4b12      	ldr	r3, [pc, #72]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80080ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80080b2:	f003 0302 	and.w	r3, r3, #2
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0ea      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80080ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d13a      	bne.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80080c2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080c6:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80080ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080d2:	d115      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 80080d4:	4b08      	ldr	r3, [pc, #32]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80080dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80080e0:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 80080e4:	091b      	lsrs	r3, r3, #4
 80080e6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80080ea:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80080ee:	4a02      	ldr	r2, [pc, #8]	@ (80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80080f0:	430b      	orrs	r3, r1
 80080f2:	61d3      	str	r3, [r2, #28]
 80080f4:	e00a      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x1658>
 80080f6:	bf00      	nop
 80080f8:	44020c00 	.word	0x44020c00
 80080fc:	44020800 	.word	0x44020800
 8008100:	4b9f      	ldr	r3, [pc, #636]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	4a9e      	ldr	r2, [pc, #632]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008106:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800810a:	61d3      	str	r3, [r2, #28]
 800810c:	4b9c      	ldr	r3, [pc, #624]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800810e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008112:	4a9b      	ldr	r2, [pc, #620]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008114:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008118:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800811c:	4b98      	ldr	r3, [pc, #608]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800811e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8008122:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008126:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800812a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800812e:	4a94      	ldr	r2, [pc, #592]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008130:	430b      	orrs	r3, r1
 8008132:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8008136:	e008      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008138:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800813c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8008140:	e003      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008142:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008146:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800814a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800814e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008152:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8008156:	663b      	str	r3, [r7, #96]	@ 0x60
 8008158:	2300      	movs	r3, #0
 800815a:	667b      	str	r3, [r7, #100]	@ 0x64
 800815c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008160:	460b      	mov	r3, r1
 8008162:	4313      	orrs	r3, r2
 8008164:	d035      	beq.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8008166:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800816a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800816e:	2b30      	cmp	r3, #48	@ 0x30
 8008170:	d014      	beq.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 8008172:	2b30      	cmp	r3, #48	@ 0x30
 8008174:	d80e      	bhi.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 8008176:	2b20      	cmp	r3, #32
 8008178:	d012      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 800817a:	2b20      	cmp	r3, #32
 800817c:	d80a      	bhi.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d010      	beq.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8008182:	2b10      	cmp	r3, #16
 8008184:	d106      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008186:	4b7e      	ldr	r3, [pc, #504]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800818a:	4a7d      	ldr	r2, [pc, #500]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800818c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008190:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 8008192:	e008      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800819a:	e004      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 800819c:	bf00      	nop
 800819e:	e002      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80081a0:	bf00      	nop
 80081a2:	e000      	b.n	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80081a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10d      	bne.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80081ae:	4b74      	ldr	r3, [pc, #464]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80081b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80081b4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80081b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081bc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80081c0:	4a6f      	ldr	r2, [pc, #444]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80081c2:	430b      	orrs	r3, r1
 80081c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80081c8:	e003      	b.n	80081d2 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80081ce:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80081d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081da:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80081de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081e0:	2300      	movs	r3, #0
 80081e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081e4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80081e8:	460b      	mov	r3, r1
 80081ea:	4313      	orrs	r3, r2
 80081ec:	d033      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80081ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80081f2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 80081fa:	2b40      	cmp	r3, #64	@ 0x40
 80081fc:	d007      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x175a>
 80081fe:	e010      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008200:	4b5f      	ldr	r3, [pc, #380]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008204:	4a5e      	ldr	r2, [pc, #376]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008206:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800820a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 800820c:	e00d      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800820e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008212:	3308      	adds	r3, #8
 8008214:	4618      	mov	r0, r3
 8008216:	f003 fb75 	bl	800b904 <RCCEx_PLL2_Config>
 800821a:	4603      	mov	r3, r0
 800821c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8008220:	e003      	b.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800822a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10d      	bne.n	800824e <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8008232:	4b53      	ldr	r3, [pc, #332]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008234:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008238:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 800823c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008240:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8008244:	4a4e      	ldr	r2, [pc, #312]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008246:	430b      	orrs	r3, r1
 8008248:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800824c:	e003      	b.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800824e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008252:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008256:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800825a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800825e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008262:	653b      	str	r3, [r7, #80]	@ 0x50
 8008264:	2300      	movs	r3, #0
 8008266:	657b      	str	r3, [r7, #84]	@ 0x54
 8008268:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800826c:	460b      	mov	r3, r1
 800826e:	4313      	orrs	r3, r2
 8008270:	d033      	beq.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8008272:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008276:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 800827e:	2b80      	cmp	r3, #128	@ 0x80
 8008280:	d007      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 8008282:	e010      	b.n	80082a6 <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008284:	4b3e      	ldr	r3, [pc, #248]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008288:	4a3d      	ldr	r2, [pc, #244]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800828a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800828e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 8008290:	e00d      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008292:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008296:	3308      	adds	r3, #8
 8008298:	4618      	mov	r0, r3
 800829a:	f003 fb33 	bl	800b904 <RCCEx_PLL2_Config>
 800829e:	4603      	mov	r3, r0
 80082a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80082a4:	e003      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80082ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082ae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d10d      	bne.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80082b6:	4b32      	ldr	r3, [pc, #200]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80082b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80082bc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 80082c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082c4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80082c8:	4a2d      	ldr	r2, [pc, #180]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80082ca:	430b      	orrs	r3, r1
 80082cc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80082d0:	e003      	b.n	80082da <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80082d6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80082da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e2:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80082e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80082e8:	2300      	movs	r3, #0
 80082ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80082f0:	460b      	mov	r3, r1
 80082f2:	4313      	orrs	r3, r2
 80082f4:	d04a      	beq.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 80082f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80082fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80082fe:	2b04      	cmp	r3, #4
 8008300:	d827      	bhi.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8008302:	a201      	add	r2, pc, #4	@ (adr r2, 8008308 <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	0800831d 	.word	0x0800831d
 800830c:	0800832b 	.word	0x0800832b
 8008310:	0800833f 	.word	0x0800833f
 8008314:	0800835b 	.word	0x0800835b
 8008318:	0800835b 	.word	0x0800835b
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800831c:	4b18      	ldr	r3, [pc, #96]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800831e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008320:	4a17      	ldr	r2, [pc, #92]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008322:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008326:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008328:	e018      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800832a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800832e:	3308      	adds	r3, #8
 8008330:	4618      	mov	r0, r3
 8008332:	f003 fae7 	bl	800b904 <RCCEx_PLL2_Config>
 8008336:	4603      	mov	r3, r0
 8008338:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800833c:	e00e      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800833e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008342:	3330      	adds	r3, #48	@ 0x30
 8008344:	4618      	mov	r0, r3
 8008346:	f003 fb75 	bl	800ba34 <RCCEx_PLL3_Config>
 800834a:	4603      	mov	r3, r0
 800834c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8008350:	e004      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008358:	e000      	b.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800835a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800835c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008360:	2b00      	cmp	r3, #0
 8008362:	d10f      	bne.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8008364:	4b06      	ldr	r3, [pc, #24]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800836a:	f023 0107 	bic.w	r1, r3, #7
 800836e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008376:	4a02      	ldr	r2, [pc, #8]	@ (8008380 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8008378:	430b      	orrs	r3, r1
 800837a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800837e:	e005      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 8008380:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008384:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008388:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800838c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008394:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008398:	643b      	str	r3, [r7, #64]	@ 0x40
 800839a:	2300      	movs	r3, #0
 800839c:	647b      	str	r3, [r7, #68]	@ 0x44
 800839e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80083a2:	460b      	mov	r3, r1
 80083a4:	4313      	orrs	r3, r2
 80083a6:	f000 8081 	beq.w	80084ac <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80083aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80083b2:	2b20      	cmp	r3, #32
 80083b4:	d85f      	bhi.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80083b6:	a201      	add	r2, pc, #4	@ (adr r2, 80083bc <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80083b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083bc:	08008441 	.word	0x08008441
 80083c0:	08008477 	.word	0x08008477
 80083c4:	08008477 	.word	0x08008477
 80083c8:	08008477 	.word	0x08008477
 80083cc:	08008477 	.word	0x08008477
 80083d0:	08008477 	.word	0x08008477
 80083d4:	08008477 	.word	0x08008477
 80083d8:	08008477 	.word	0x08008477
 80083dc:	0800844f 	.word	0x0800844f
 80083e0:	08008477 	.word	0x08008477
 80083e4:	08008477 	.word	0x08008477
 80083e8:	08008477 	.word	0x08008477
 80083ec:	08008477 	.word	0x08008477
 80083f0:	08008477 	.word	0x08008477
 80083f4:	08008477 	.word	0x08008477
 80083f8:	08008477 	.word	0x08008477
 80083fc:	08008463 	.word	0x08008463
 8008400:	08008477 	.word	0x08008477
 8008404:	08008477 	.word	0x08008477
 8008408:	08008477 	.word	0x08008477
 800840c:	08008477 	.word	0x08008477
 8008410:	08008477 	.word	0x08008477
 8008414:	08008477 	.word	0x08008477
 8008418:	08008477 	.word	0x08008477
 800841c:	0800847f 	.word	0x0800847f
 8008420:	08008477 	.word	0x08008477
 8008424:	08008477 	.word	0x08008477
 8008428:	08008477 	.word	0x08008477
 800842c:	08008477 	.word	0x08008477
 8008430:	08008477 	.word	0x08008477
 8008434:	08008477 	.word	0x08008477
 8008438:	08008477 	.word	0x08008477
 800843c:	0800847f 	.word	0x0800847f
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008440:	4bab      	ldr	r3, [pc, #684]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008444:	4aaa      	ldr	r2, [pc, #680]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800844a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 800844c:	e018      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800844e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008452:	3308      	adds	r3, #8
 8008454:	4618      	mov	r0, r3
 8008456:	f003 fa55 	bl	800b904 <RCCEx_PLL2_Config>
 800845a:	4603      	mov	r3, r0
 800845c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008460:	e00e      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008462:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008466:	3330      	adds	r3, #48	@ 0x30
 8008468:	4618      	mov	r0, r3
 800846a:	f003 fae3 	bl	800ba34 <RCCEx_PLL3_Config>
 800846e:	4603      	mov	r3, r0
 8008470:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8008474:	e004      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800847c:	e000      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 800847e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008480:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008484:	2b00      	cmp	r3, #0
 8008486:	d10d      	bne.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8008488:	4b99      	ldr	r3, [pc, #612]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800848a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800848e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008492:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008496:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800849a:	4a95      	ldr	r2, [pc, #596]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800849c:	430b      	orrs	r3, r1
 800849e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80084a2:	e003      	b.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084a4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80084a8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80084ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80084b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084ba:	2300      	movs	r3, #0
 80084bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80084c2:	460b      	mov	r3, r1
 80084c4:	4313      	orrs	r3, r2
 80084c6:	d04e      	beq.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 80084c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80084cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80084d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084d4:	d02e      	beq.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 80084d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084da:	d827      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80084dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80084de:	d02b      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 80084e0:	2bc0      	cmp	r3, #192	@ 0xc0
 80084e2:	d823      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80084e4:	2b80      	cmp	r3, #128	@ 0x80
 80084e6:	d017      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 80084e8:	2b80      	cmp	r3, #128	@ 0x80
 80084ea:	d81f      	bhi.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 80084f0:	2b40      	cmp	r3, #64	@ 0x40
 80084f2:	d007      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 80084f4:	e01a      	b.n	800852c <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084f6:	4b7e      	ldr	r3, [pc, #504]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80084f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084fa:	4a7d      	ldr	r2, [pc, #500]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80084fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008500:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008502:	e01a      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008508:	3308      	adds	r3, #8
 800850a:	4618      	mov	r0, r3
 800850c:	f003 f9fa 	bl	800b904 <RCCEx_PLL2_Config>
 8008510:	4603      	mov	r3, r0
 8008512:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8008516:	e010      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008518:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800851c:	3330      	adds	r3, #48	@ 0x30
 800851e:	4618      	mov	r0, r3
 8008520:	f003 fa88 	bl	800ba34 <RCCEx_PLL3_Config>
 8008524:	4603      	mov	r3, r0
 8008526:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800852a:	e006      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008532:	e002      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008534:	bf00      	nop
 8008536:	e000      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8008538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800853a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10d      	bne.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008542:	4b6b      	ldr	r3, [pc, #428]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008548:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800854c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008554:	4a66      	ldr	r2, [pc, #408]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8008556:	430b      	orrs	r3, r1
 8008558:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800855c:	e003      	b.n	8008566 <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008562:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8008566:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008572:	633b      	str	r3, [r7, #48]	@ 0x30
 8008574:	2300      	movs	r3, #0
 8008576:	637b      	str	r3, [r7, #52]	@ 0x34
 8008578:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800857c:	460b      	mov	r3, r1
 800857e:	4313      	orrs	r3, r2
 8008580:	d055      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 8008582:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008586:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800858a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800858e:	d031      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 8008590:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8008594:	d82a      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 8008596:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800859a:	d02d      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 800859c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085a0:	d824      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80085a2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80085a6:	d029      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80085a8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80085ac:	d81e      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80085ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085b2:	d011      	beq.n	80085d8 <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80085b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085b8:	d818      	bhi.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d020      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 80085be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085c2:	d113      	bne.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80085c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085c8:	3308      	adds	r3, #8
 80085ca:	4618      	mov	r0, r3
 80085cc:	f003 f99a 	bl	800b904 <RCCEx_PLL2_Config>
 80085d0:	4603      	mov	r3, r0
 80085d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80085d6:	e014      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80085d8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80085dc:	3330      	adds	r3, #48	@ 0x30
 80085de:	4618      	mov	r0, r3
 80085e0:	f003 fa28 	bl	800ba34 <RCCEx_PLL3_Config>
 80085e4:	4603      	mov	r3, r0
 80085e6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 80085ea:	e00a      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80085f2:	e006      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80085f4:	bf00      	nop
 80085f6:	e004      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80085f8:	bf00      	nop
 80085fa:	e002      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 80085fc:	bf00      	nop
 80085fe:	e000      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8008600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008602:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008606:	2b00      	cmp	r3, #0
 8008608:	d10d      	bne.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800860a:	4b39      	ldr	r3, [pc, #228]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800860c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008610:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8008614:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008618:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800861c:	4a34      	ldr	r2, [pc, #208]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800861e:	430b      	orrs	r3, r1
 8008620:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008624:	e003      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008626:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800862a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800862e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008636:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800863a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800863c:	2300      	movs	r3, #0
 800863e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008640:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008644:	460b      	mov	r3, r1
 8008646:	4313      	orrs	r3, r2
 8008648:	d058      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 800864a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800864e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008652:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8008656:	d031      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8008658:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800865c:	d82a      	bhi.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800865e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008662:	d02d      	beq.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8008664:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008668:	d824      	bhi.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 800866a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800866e:	d029      	beq.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8008670:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008674:	d81e      	bhi.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008676:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800867a:	d011      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 800867c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008680:	d818      	bhi.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d020      	beq.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8008686:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800868a:	d113      	bne.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800868c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008690:	3308      	adds	r3, #8
 8008692:	4618      	mov	r0, r3
 8008694:	f003 f936 	bl	800b904 <RCCEx_PLL2_Config>
 8008698:	4603      	mov	r3, r0
 800869a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 800869e:	e014      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80086a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086a4:	3330      	adds	r3, #48	@ 0x30
 80086a6:	4618      	mov	r0, r3
 80086a8:	f003 f9c4 	bl	800ba34 <RCCEx_PLL3_Config>
 80086ac:	4603      	mov	r3, r0
 80086ae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 80086b2:	e00a      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80086ba:	e006      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80086bc:	bf00      	nop
 80086be:	e004      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80086c0:	bf00      	nop
 80086c2:	e002      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80086c4:	bf00      	nop
 80086c6:	e000      	b.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 80086c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80086ca:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d110      	bne.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80086d2:	4b07      	ldr	r3, [pc, #28]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80086d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80086d8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80086dc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086e4:	4902      	ldr	r1, [pc, #8]	@ (80086f0 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80086ec:	e006      	b.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 80086ee:	bf00      	nop
 80086f0:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80086f8:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80086fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008704:	2100      	movs	r1, #0
 8008706:	6239      	str	r1, [r7, #32]
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	627b      	str	r3, [r7, #36]	@ 0x24
 800870e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008712:	460b      	mov	r3, r1
 8008714:	4313      	orrs	r3, r2
 8008716:	d055      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8008718:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800871c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8008720:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8008724:	d031      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8008726:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800872a:	d82a      	bhi.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 800872c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008730:	d02d      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8008732:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008736:	d824      	bhi.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008738:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800873c:	d029      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 800873e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8008742:	d81e      	bhi.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008748:	d011      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 800874a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800874e:	d818      	bhi.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8008750:	2b00      	cmp	r3, #0
 8008752:	d020      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8008754:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008758:	d113      	bne.n	8008782 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800875a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800875e:	3308      	adds	r3, #8
 8008760:	4618      	mov	r0, r3
 8008762:	f003 f8cf 	bl	800b904 <RCCEx_PLL2_Config>
 8008766:	4603      	mov	r3, r0
 8008768:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800876c:	e014      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800876e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008772:	3330      	adds	r3, #48	@ 0x30
 8008774:	4618      	mov	r0, r3
 8008776:	f003 f95d 	bl	800ba34 <RCCEx_PLL3_Config>
 800877a:	4603      	mov	r3, r0
 800877c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008780:	e00a      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8008788:	e006      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800878a:	bf00      	nop
 800878c:	e004      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 800878e:	bf00      	nop
 8008790:	e002      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008792:	bf00      	nop
 8008794:	e000      	b.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8008796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008798:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10d      	bne.n	80087bc <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80087a0:	4b88      	ldr	r3, [pc, #544]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80087a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80087a6:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 80087aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80087b2:	4984      	ldr	r1, [pc, #528]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80087b4:	4313      	orrs	r3, r2
 80087b6:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 80087ba:	e003      	b.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087bc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80087c0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80087c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087cc:	2100      	movs	r1, #0
 80087ce:	61b9      	str	r1, [r7, #24]
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	61fb      	str	r3, [r7, #28]
 80087d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80087da:	460b      	mov	r3, r1
 80087dc:	4313      	orrs	r3, r2
 80087de:	d03d      	beq.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 80087e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80087e4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80087e8:	2b03      	cmp	r3, #3
 80087ea:	d81c      	bhi.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 80087ec:	a201      	add	r2, pc, #4	@ (adr r2, 80087f4 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 80087ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f2:	bf00      	nop
 80087f4:	0800882f 	.word	0x0800882f
 80087f8:	08008805 	.word	0x08008805
 80087fc:	08008813 	.word	0x08008813
 8008800:	0800882f 	.word	0x0800882f
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008804:	4b6f      	ldr	r3, [pc, #444]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008808:	4a6e      	ldr	r2, [pc, #440]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800880a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800880e:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8008810:	e00e      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008812:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008816:	3308      	adds	r3, #8
 8008818:	4618      	mov	r0, r3
 800881a:	f003 f873 	bl	800b904 <RCCEx_PLL2_Config>
 800881e:	4603      	mov	r3, r0
 8008820:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8008824:	e004      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800882c:	e000      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 800882e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008830:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10d      	bne.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008838:	4b62      	ldr	r3, [pc, #392]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800883a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800883e:	f023 0203 	bic.w	r2, r3, #3
 8008842:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008846:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800884a:	495e      	ldr	r1, [pc, #376]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800884c:	4313      	orrs	r3, r2
 800884e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008852:	e003      	b.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008854:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008858:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800885c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008864:	2100      	movs	r1, #0
 8008866:	6139      	str	r1, [r7, #16]
 8008868:	f003 0304 	and.w	r3, r3, #4
 800886c:	617b      	str	r3, [r7, #20]
 800886e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008872:	460b      	mov	r3, r1
 8008874:	4313      	orrs	r3, r2
 8008876:	d03a      	beq.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8008878:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800887c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008884:	d00e      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8008886:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800888a:	d815      	bhi.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 800888c:	2b00      	cmp	r3, #0
 800888e:	d017      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8008890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008894:	d110      	bne.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008896:	4b4b      	ldr	r3, [pc, #300]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889a:	4a4a      	ldr	r2, [pc, #296]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800889c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80088a0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80088a2:	e00e      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80088a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088a8:	3308      	adds	r3, #8
 80088aa:	4618      	mov	r0, r3
 80088ac:	f003 f82a 	bl	800b904 <RCCEx_PLL2_Config>
 80088b0:	4603      	mov	r3, r0
 80088b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80088b6:	e004      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80088be:	e000      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 80088c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10d      	bne.n	80088e6 <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80088ca:	4b3e      	ldr	r3, [pc, #248]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80088cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80088d0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80088d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088d8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80088dc:	4939      	ldr	r1, [pc, #228]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 80088e4:	e003      	b.n	80088ee <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80088ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	2100      	movs	r1, #0
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	f003 0310 	and.w	r3, r3, #16
 80088fe:	60fb      	str	r3, [r7, #12]
 8008900:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008904:	460b      	mov	r3, r1
 8008906:	4313      	orrs	r3, r2
 8008908:	d038      	beq.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 800890a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800890e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008912:	2b30      	cmp	r3, #48	@ 0x30
 8008914:	d01b      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8008916:	2b30      	cmp	r3, #48	@ 0x30
 8008918:	d815      	bhi.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 800891a:	2b10      	cmp	r3, #16
 800891c:	d002      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 800891e:	2b20      	cmp	r3, #32
 8008920:	d007      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8008922:	e010      	b.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008924:	4b27      	ldr	r3, [pc, #156]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8008926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008928:	4a26      	ldr	r2, [pc, #152]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800892a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800892e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8008930:	e00e      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008932:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008936:	3330      	adds	r3, #48	@ 0x30
 8008938:	4618      	mov	r0, r3
 800893a:	f003 f87b 	bl	800ba34 <RCCEx_PLL3_Config>
 800893e:	4603      	mov	r3, r0
 8008940:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8008944:	e004      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800894c:	e000      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 800894e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008950:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10d      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8008958:	4b1a      	ldr	r3, [pc, #104]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800895a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800895e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008962:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008966:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800896a:	4916      	ldr	r1, [pc, #88]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800896c:	4313      	orrs	r3, r2
 800896e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8008972:	e003      	b.n	800897c <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008974:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8008978:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800897c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	2100      	movs	r1, #0
 8008986:	6039      	str	r1, [r7, #0]
 8008988:	f003 0308 	and.w	r3, r3, #8
 800898c:	607b      	str	r3, [r7, #4]
 800898e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008992:	460b      	mov	r3, r1
 8008994:	4313      	orrs	r3, r2
 8008996:	d00c      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8008998:	4b0a      	ldr	r3, [pc, #40]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 800899a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800899e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80089a2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089a6:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 80089aa:	4906      	ldr	r1, [pc, #24]	@ (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 80089b2:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 80089bc:	46bd      	mov	sp, r7
 80089be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089c2:	bf00      	nop
 80089c4:	44020c00 	.word	0x44020c00

080089c8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b08b      	sub	sp, #44	@ 0x2c
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80089d0:	4bae      	ldr	r3, [pc, #696]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80089d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089d8:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80089da:	4bac      	ldr	r3, [pc, #688]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80089dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089de:	f003 0303 	and.w	r3, r3, #3
 80089e2:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80089e4:	4ba9      	ldr	r3, [pc, #676]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80089e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e8:	0a1b      	lsrs	r3, r3, #8
 80089ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089ee:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80089f0:	4ba6      	ldr	r3, [pc, #664]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80089f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f4:	091b      	lsrs	r3, r3, #4
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80089fc:	4ba3      	ldr	r3, [pc, #652]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 80089fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a00:	08db      	lsrs	r3, r3, #3
 8008a02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	fb02 f303 	mul.w	r3, r2, r3
 8008a0c:	ee07 3a90 	vmov	s15, r3
 8008a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a14:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	f000 8126 	beq.w	8008c6c <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	2b03      	cmp	r3, #3
 8008a24:	d053      	beq.n	8008ace <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d86f      	bhi.n	8008b0c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d003      	beq.n	8008a3a <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d02b      	beq.n	8008a90 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8008a38:	e068      	b.n	8008b0c <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a3a:	4b94      	ldr	r3, [pc, #592]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	08db      	lsrs	r3, r3, #3
 8008a40:	f003 0303 	and.w	r3, r3, #3
 8008a44:	4a92      	ldr	r2, [pc, #584]	@ (8008c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8008a46:	fa22 f303 	lsr.w	r3, r2, r3
 8008a4a:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	ee07 3a90 	vmov	s15, r3
 8008a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	ee07 3a90 	vmov	s15, r3
 8008a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6e:	ed97 6a04 	vldr	s12, [r7, #16]
 8008a72:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008a8e:	e068      	b.n	8008b62 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008a90:	69bb      	ldr	r3, [r7, #24]
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008c98 <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8008a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	ee07 3a90 	vmov	s15, r3
 8008aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aac:	ed97 6a04 	vldr	s12, [r7, #16]
 8008ab0:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008ab4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ab8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008abc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ac0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ac8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008acc:	e049      	b.n	8008b62 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	ee07 3a90 	vmov	s15, r3
 8008ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad8:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008c9c <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8008adc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ae0:	6a3b      	ldr	r3, [r7, #32]
 8008ae2:	ee07 3a90 	vmov	s15, r3
 8008ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008aea:	ed97 6a04 	vldr	s12, [r7, #16]
 8008aee:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b06:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008b0a:	e02a      	b.n	8008b62 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008b0c:	4b5f      	ldr	r3, [pc, #380]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	08db      	lsrs	r3, r3, #3
 8008b12:	f003 0303 	and.w	r3, r3, #3
 8008b16:	4a5e      	ldr	r2, [pc, #376]	@ (8008c90 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8008b18:	fa22 f303 	lsr.w	r3, r2, r3
 8008b1c:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	ee07 3a90 	vmov	s15, r3
 8008b24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	ee07 3a90 	vmov	s15, r3
 8008b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	ee07 3a90 	vmov	s15, r3
 8008b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b40:	ed97 6a04 	vldr	s12, [r7, #16]
 8008b44:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008c94 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8008b48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b5c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008b60:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b62:	4b4a      	ldr	r3, [pc, #296]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b6e:	d121      	bne.n	8008bb4 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008b70:	4b46      	ldr	r3, [pc, #280]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d017      	beq.n	8008bac <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008b7c:	4b43      	ldr	r3, [pc, #268]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b80:	0a5b      	lsrs	r3, r3, #9
 8008b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8008b8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b92:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008b96:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ba2:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	601a      	str	r2, [r3, #0]
 8008baa:	e006      	b.n	8008bba <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]
 8008bb2:	e002      	b.n	8008bba <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008bba:	4b34      	ldr	r3, [pc, #208]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008bc6:	d121      	bne.n	8008c0c <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008bc8:	4b30      	ldr	r3, [pc, #192]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d017      	beq.n	8008c04 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008bd4:	4b2d      	ldr	r3, [pc, #180]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008bd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bd8:	0c1b      	lsrs	r3, r3, #16
 8008bda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008be6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bea:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008bee:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008bf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bfa:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	605a      	str	r2, [r3, #4]
 8008c02:	e006      	b.n	8008c12 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2200      	movs	r2, #0
 8008c08:	605a      	str	r2, [r3, #4]
 8008c0a:	e002      	b.n	8008c12 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008c12:	4b1e      	ldr	r3, [pc, #120]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c1e:	d121      	bne.n	8008c64 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008c20:	4b1a      	ldr	r3, [pc, #104]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d017      	beq.n	8008c5c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008c2c:	4b17      	ldr	r3, [pc, #92]	@ (8008c8c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008c2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c30:	0e1b      	lsrs	r3, r3, #24
 8008c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8008c3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c42:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008c46:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c52:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008c5a:	e010      	b.n	8008c7e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	609a      	str	r2, [r3, #8]
}
 8008c62:	e00c      	b.n	8008c7e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	609a      	str	r2, [r3, #8]
}
 8008c6a:	e008      	b.n	8008c7e <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	609a      	str	r2, [r3, #8]
}
 8008c7e:	bf00      	nop
 8008c80:	372c      	adds	r7, #44	@ 0x2c
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr
 8008c8a:	bf00      	nop
 8008c8c:	44020c00 	.word	0x44020c00
 8008c90:	03d09000 	.word	0x03d09000
 8008c94:	46000000 	.word	0x46000000
 8008c98:	4a742400 	.word	0x4a742400
 8008c9c:	4af42400 	.word	0x4af42400

08008ca0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b08b      	sub	sp, #44	@ 0x2c
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008ca8:	4bae      	ldr	r3, [pc, #696]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cb0:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008cb2:	4bac      	ldr	r3, [pc, #688]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb6:	f003 0303 	and.w	r3, r3, #3
 8008cba:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8008cbc:	4ba9      	ldr	r3, [pc, #676]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc0:	0a1b      	lsrs	r3, r3, #8
 8008cc2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008cc6:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008cc8:	4ba6      	ldr	r3, [pc, #664]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ccc:	091b      	lsrs	r3, r3, #4
 8008cce:	f003 0301 	and.w	r3, r3, #1
 8008cd2:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008cd4:	4ba3      	ldr	r3, [pc, #652]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cd8:	08db      	lsrs	r3, r3, #3
 8008cda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cde:	697a      	ldr	r2, [r7, #20]
 8008ce0:	fb02 f303 	mul.w	r3, r2, r3
 8008ce4:	ee07 3a90 	vmov	s15, r3
 8008ce8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cec:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008cf0:	69bb      	ldr	r3, [r7, #24]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 8126 	beq.w	8008f44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	2b03      	cmp	r3, #3
 8008cfc:	d053      	beq.n	8008da6 <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	2b03      	cmp	r3, #3
 8008d02:	d86f      	bhi.n	8008de4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d003      	beq.n	8008d12 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d02b      	beq.n	8008d68 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008d10:	e068      	b.n	8008de4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008d12:	4b94      	ldr	r3, [pc, #592]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	08db      	lsrs	r3, r3, #3
 8008d18:	f003 0303 	and.w	r3, r3, #3
 8008d1c:	4a92      	ldr	r2, [pc, #584]	@ (8008f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d22:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	ee07 3a90 	vmov	s15, r3
 8008d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	ee07 3a90 	vmov	s15, r3
 8008d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d3c:	6a3b      	ldr	r3, [r7, #32]
 8008d3e:	ee07 3a90 	vmov	s15, r3
 8008d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d46:	ed97 6a04 	vldr	s12, [r7, #16]
 8008d4a:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d62:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008d66:	e068      	b.n	8008e3a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	ee07 3a90 	vmov	s15, r3
 8008d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d72:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8008f70 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 8008d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d7a:	6a3b      	ldr	r3, [r7, #32]
 8008d7c:	ee07 3a90 	vmov	s15, r3
 8008d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d84:	ed97 6a04 	vldr	s12, [r7, #16]
 8008d88:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008da0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008da4:	e049      	b.n	8008e3a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	ee07 3a90 	vmov	s15, r3
 8008dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008db0:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008f74 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 8008db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db8:	6a3b      	ldr	r3, [r7, #32]
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc2:	ed97 6a04 	vldr	s12, [r7, #16]
 8008dc6:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dde:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008de2:	e02a      	b.n	8008e3a <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008de4:	4b5f      	ldr	r3, [pc, #380]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	08db      	lsrs	r3, r3, #3
 8008dea:	f003 0303 	and.w	r3, r3, #3
 8008dee:	4a5e      	ldr	r2, [pc, #376]	@ (8008f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008df0:	fa22 f303 	lsr.w	r3, r2, r3
 8008df4:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	ee07 3a90 	vmov	s15, r3
 8008dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	ee07 3a90 	vmov	s15, r3
 8008e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e0e:	6a3b      	ldr	r3, [r7, #32]
 8008e10:	ee07 3a90 	vmov	s15, r3
 8008e14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e18:	ed97 6a04 	vldr	s12, [r7, #16]
 8008e1c:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008f6c <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008e20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008e2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e34:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008e38:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e3a:	4b4a      	ldr	r3, [pc, #296]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e46:	d121      	bne.n	8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008e48:	4b46      	ldr	r3, [pc, #280]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d017      	beq.n	8008e84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008e54:	4b43      	ldr	r3, [pc, #268]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e58:	0a5b      	lsrs	r3, r3, #9
 8008e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e5e:	ee07 3a90 	vmov	s15, r3
 8008e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8008e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008e6e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e7a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	601a      	str	r2, [r3, #0]
 8008e82:	e006      	b.n	8008e92 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	e002      	b.n	8008e92 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e92:	4b34      	ldr	r3, [pc, #208]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008e9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008e9e:	d121      	bne.n	8008ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008ea0:	4b30      	ldr	r3, [pc, #192]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d017      	beq.n	8008edc <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008eac:	4b2d      	ldr	r3, [pc, #180]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb0:	0c1b      	lsrs	r3, r3, #16
 8008eb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008eb6:	ee07 3a90 	vmov	s15, r3
 8008eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008ebe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008ec2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008ec6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008eca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ece:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ed2:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	605a      	str	r2, [r3, #4]
 8008eda:	e006      	b.n	8008eea <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	605a      	str	r2, [r3, #4]
 8008ee2:	e002      	b.n	8008eea <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008eea:	4b1e      	ldr	r3, [pc, #120]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ef2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ef6:	d121      	bne.n	8008f3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008efc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d017      	beq.n	8008f34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008f04:	4b17      	ldr	r3, [pc, #92]	@ (8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f08:	0e1b      	lsrs	r3, r3, #24
 8008f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8008f16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008f1e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f2a:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f32:	e010      	b.n	8008f56 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	609a      	str	r2, [r3, #8]
}
 8008f3a:	e00c      	b.n	8008f56 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	609a      	str	r2, [r3, #8]
}
 8008f42:	e008      	b.n	8008f56 <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	609a      	str	r2, [r3, #8]
}
 8008f56:	bf00      	nop
 8008f58:	372c      	adds	r7, #44	@ 0x2c
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	44020c00 	.word	0x44020c00
 8008f68:	03d09000 	.word	0x03d09000
 8008f6c:	46000000 	.word	0x46000000
 8008f70:	4a742400 	.word	0x4a742400
 8008f74:	4af42400 	.word	0x4af42400

08008f78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b08b      	sub	sp, #44	@ 0x2c
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008f80:	4bae      	ldr	r3, [pc, #696]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f88:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008f8a:	4bac      	ldr	r3, [pc, #688]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f8e:	f003 0303 	and.w	r3, r3, #3
 8008f92:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8008f94:	4ba9      	ldr	r3, [pc, #676]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008f98:	0a1b      	lsrs	r3, r3, #8
 8008f9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008f9e:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008fa0:	4ba6      	ldr	r3, [pc, #664]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008fa4:	091b      	lsrs	r3, r3, #4
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008fac:	4ba3      	ldr	r3, [pc, #652]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008fae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fb0:	08db      	lsrs	r3, r3, #3
 8008fb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	fb02 f303 	mul.w	r3, r2, r3
 8008fbc:	ee07 3a90 	vmov	s15, r3
 8008fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc4:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	f000 8126 	beq.w	800921c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	d053      	beq.n	800907e <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d86f      	bhi.n	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d003      	beq.n	8008fea <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8008fe2:	69fb      	ldr	r3, [r7, #28]
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d02b      	beq.n	8009040 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8008fe8:	e068      	b.n	80090bc <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008fea:	4b94      	ldr	r3, [pc, #592]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	08db      	lsrs	r3, r3, #3
 8008ff0:	f003 0303 	and.w	r3, r3, #3
 8008ff4:	4a92      	ldr	r2, [pc, #584]	@ (8009240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8008ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8008ffa:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	ee07 3a90 	vmov	s15, r3
 8009002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	ee07 3a90 	vmov	s15, r3
 800900c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009014:	6a3b      	ldr	r3, [r7, #32]
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901e:	ed97 6a04 	vldr	s12, [r7, #16]
 8009022:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800902a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800903e:	e068      	b.n	8009112 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009040:	69bb      	ldr	r3, [r7, #24]
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904a:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 8009248 <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 800904e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	ee07 3a90 	vmov	s15, r3
 8009058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800905c:	ed97 6a04 	vldr	s12, [r7, #16]
 8009060:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 8009064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800906c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009078:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 800907c:	e049      	b.n	8009112 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	ee07 3a90 	vmov	s15, r3
 8009084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009088:	eddf 6a70 	vldr	s13, [pc, #448]	@ 800924c <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 800908c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009090:	6a3b      	ldr	r3, [r7, #32]
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800909a:	ed97 6a04 	vldr	s12, [r7, #16]
 800909e:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80090a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090b6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80090ba:	e02a      	b.n	8009112 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090bc:	4b5f      	ldr	r3, [pc, #380]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	08db      	lsrs	r3, r3, #3
 80090c2:	f003 0303 	and.w	r3, r3, #3
 80090c6:	4a5e      	ldr	r2, [pc, #376]	@ (8009240 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80090c8:	fa22 f303 	lsr.w	r3, r2, r3
 80090cc:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	ee07 3a90 	vmov	s15, r3
 80090d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090d8:	69bb      	ldr	r3, [r7, #24]
 80090da:	ee07 3a90 	vmov	s15, r3
 80090de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	ee07 3a90 	vmov	s15, r3
 80090ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090f0:	ed97 6a04 	vldr	s12, [r7, #16]
 80090f4:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8009244 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80090f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009100:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009104:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800910c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8009110:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009112:	4b4a      	ldr	r3, [pc, #296]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800911a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800911e:	d121      	bne.n	8009164 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009120:	4b46      	ldr	r3, [pc, #280]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009124:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d017      	beq.n	800915c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800912c:	4b43      	ldr	r3, [pc, #268]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800912e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009130:	0a5b      	lsrs	r3, r3, #9
 8009132:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009136:	ee07 3a90 	vmov	s15, r3
 800913a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800913e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009142:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 8009146:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800914a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800914e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009152:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	e006      	b.n	800916a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	e002      	b.n	800916a <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2200      	movs	r2, #0
 8009168:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800916a:	4b34      	ldr	r3, [pc, #208]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009172:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009176:	d121      	bne.n	80091bc <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8009178:	4b30      	ldr	r3, [pc, #192]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 800917a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800917c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009180:	2b00      	cmp	r3, #0
 8009182:	d017      	beq.n	80091b4 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009184:	4b2d      	ldr	r3, [pc, #180]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8009186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009188:	0c1b      	lsrs	r3, r3, #16
 800918a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800918e:	ee07 3a90 	vmov	s15, r3
 8009192:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8009196:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800919a:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800919e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80091a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091aa:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	605a      	str	r2, [r3, #4]
 80091b2:	e006      	b.n	80091c2 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	605a      	str	r2, [r3, #4]
 80091ba:	e002      	b.n	80091c2 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091c2:	4b1e      	ldr	r3, [pc, #120]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80091ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80091ce:	d121      	bne.n	8009214 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80091d0:	4b1a      	ldr	r3, [pc, #104]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80091d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d017      	beq.n	800920c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80091dc:	4b17      	ldr	r3, [pc, #92]	@ (800923c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80091de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091e0:	0e1b      	lsrs	r3, r3, #24
 80091e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091e6:	ee07 3a90 	vmov	s15, r3
 80091ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80091ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80091f2:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80091f6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80091fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009202:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800920a:	e010      	b.n	800922e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	609a      	str	r2, [r3, #8]
}
 8009212:	e00c      	b.n	800922e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2200      	movs	r2, #0
 8009218:	609a      	str	r2, [r3, #8]
}
 800921a:	e008      	b.n	800922e <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2200      	movs	r2, #0
 800922c:	609a      	str	r2, [r3, #8]
}
 800922e:	bf00      	nop
 8009230:	372c      	adds	r7, #44	@ 0x2c
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	44020c00 	.word	0x44020c00
 8009240:	03d09000 	.word	0x03d09000
 8009244:	46000000 	.word	0x46000000
 8009248:	4a742400 	.word	0x4a742400
 800924c:	4af42400 	.word	0x4af42400

08009250 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009250:	b590      	push	{r4, r7, lr}
 8009252:	b08f      	sub	sp, #60	@ 0x3c
 8009254:	af00      	add	r7, sp, #0
 8009256:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800925a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800925e:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 8009262:	4321      	orrs	r1, r4
 8009264:	d150      	bne.n	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8009266:	4b26      	ldr	r3, [pc, #152]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009268:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800926c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009270:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8009272:	4b23      	ldr	r3, [pc, #140]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009274:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009278:	f003 0302 	and.w	r3, r3, #2
 800927c:	2b02      	cmp	r3, #2
 800927e:	d108      	bne.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009286:	d104      	bne.n	8009292 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009288:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800928c:	637b      	str	r3, [r7, #52]	@ 0x34
 800928e:	f002 bb2a 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8009292:	4b1b      	ldr	r3, [pc, #108]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800929c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80092a0:	d108      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80092a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092a8:	d104      	bne.n	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80092aa:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80092ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80092b0:	f002 bb19 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80092b4:	4b12      	ldr	r3, [pc, #72]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80092bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80092c0:	d119      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80092c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092c8:	d115      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80092ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 80092d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092d6:	d30a      	bcc.n	80092ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 80092d8:	4b09      	ldr	r3, [pc, #36]	@ (8009300 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	0a1b      	lsrs	r3, r3, #8
 80092de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092e2:	4a08      	ldr	r2, [pc, #32]	@ (8009304 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80092e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80092ea:	f002 bafc 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 80092ee:	2300      	movs	r3, #0
 80092f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 80092f2:	f002 baf8 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 80092f6:	2300      	movs	r3, #0
 80092f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80092fa:	f002 baf4 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80092fe:	bf00      	nop
 8009300:	44020c00 	.word	0x44020c00
 8009304:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 8009308:	e9d7 0100 	ldrd	r0, r1, [r7]
 800930c:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8009310:	ea50 0104 	orrs.w	r1, r0, r4
 8009314:	f001 8275 	beq.w	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 8009318:	e9d7 0100 	ldrd	r0, r1, [r7]
 800931c:	2801      	cmp	r0, #1
 800931e:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8009322:	f082 82dd 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009326:	e9d7 0100 	ldrd	r0, r1, [r7]
 800932a:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 800932e:	ea50 0104 	orrs.w	r1, r0, r4
 8009332:	f001 816c 	beq.w	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 8009336:	e9d7 0100 	ldrd	r0, r1, [r7]
 800933a:	2801      	cmp	r0, #1
 800933c:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8009340:	f082 82ce 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009344:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009348:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 800934c:	ea50 0104 	orrs.w	r1, r0, r4
 8009350:	f001 8602 	beq.w	800af58 <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8009354:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009358:	2801      	cmp	r0, #1
 800935a:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 800935e:	f082 82bf 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009362:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009366:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 800936a:	ea50 0104 	orrs.w	r1, r0, r4
 800936e:	f001 854c 	beq.w	800ae0a <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 8009372:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009376:	2801      	cmp	r0, #1
 8009378:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 800937c:	f082 82b0 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009380:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009384:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 8009388:	ea50 0104 	orrs.w	r1, r0, r4
 800938c:	f001 849e 	beq.w	800accc <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 8009390:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009394:	2801      	cmp	r0, #1
 8009396:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 800939a:	f082 82a1 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800939e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093a2:	f1a1 0420 	sub.w	r4, r1, #32
 80093a6:	ea50 0104 	orrs.w	r1, r0, r4
 80093aa:	f001 83e8 	beq.w	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80093ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093b2:	2801      	cmp	r0, #1
 80093b4:	f171 0120 	sbcs.w	r1, r1, #32
 80093b8:	f082 8292 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80093bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093c0:	f1a1 0410 	sub.w	r4, r1, #16
 80093c4:	ea50 0104 	orrs.w	r1, r0, r4
 80093c8:	f002 8256 	beq.w	800b878 <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 80093cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093d0:	2801      	cmp	r0, #1
 80093d2:	f171 0110 	sbcs.w	r1, r1, #16
 80093d6:	f082 8283 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80093da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093de:	f1a1 0408 	sub.w	r4, r1, #8
 80093e2:	ea50 0104 	orrs.w	r1, r0, r4
 80093e6:	f002 81cc 	beq.w	800b782 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 80093ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093ee:	2801      	cmp	r0, #1
 80093f0:	f171 0108 	sbcs.w	r1, r1, #8
 80093f4:	f082 8274 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80093f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80093fc:	1f0c      	subs	r4, r1, #4
 80093fe:	ea50 0104 	orrs.w	r1, r0, r4
 8009402:	f001 8648 	beq.w	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 8009406:	e9d7 0100 	ldrd	r0, r1, [r7]
 800940a:	2801      	cmp	r0, #1
 800940c:	f171 0104 	sbcs.w	r1, r1, #4
 8009410:	f082 8266 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009414:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009418:	1e8c      	subs	r4, r1, #2
 800941a:	ea50 0104 	orrs.w	r1, r0, r4
 800941e:	f002 8143 	beq.w	800b6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8009422:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009426:	2801      	cmp	r0, #1
 8009428:	f171 0102 	sbcs.w	r1, r1, #2
 800942c:	f082 8258 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009430:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009434:	1e4c      	subs	r4, r1, #1
 8009436:	ea50 0104 	orrs.w	r1, r0, r4
 800943a:	f002 80ce 	beq.w	800b5da <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 800943e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009442:	2801      	cmp	r0, #1
 8009444:	f171 0101 	sbcs.w	r1, r1, #1
 8009448:	f082 824a 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800944c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009450:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8009454:	4321      	orrs	r1, r4
 8009456:	f002 8059 	beq.w	800b50c <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800945a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800945e:	4cd9      	ldr	r4, [pc, #868]	@ (80097c4 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 8009460:	42a0      	cmp	r0, r4
 8009462:	f171 0100 	sbcs.w	r1, r1, #0
 8009466:	f082 823b 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800946a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800946e:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 8009472:	4321      	orrs	r1, r4
 8009474:	f001 87d9 	beq.w	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 8009478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800947c:	4cd2      	ldr	r4, [pc, #840]	@ (80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 800947e:	42a0      	cmp	r0, r4
 8009480:	f171 0100 	sbcs.w	r1, r1, #0
 8009484:	f082 822c 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009488:	e9d7 0100 	ldrd	r0, r1, [r7]
 800948c:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 8009490:	4321      	orrs	r1, r4
 8009492:	f001 8751 	beq.w	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 8009496:	e9d7 0100 	ldrd	r0, r1, [r7]
 800949a:	4ccc      	ldr	r4, [pc, #816]	@ (80097cc <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 800949c:	42a0      	cmp	r0, r4
 800949e:	f171 0100 	sbcs.w	r1, r1, #0
 80094a2:	f082 821d 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80094a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094aa:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80094ae:	4321      	orrs	r1, r4
 80094b0:	f001 869a 	beq.w	800b1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80094b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094b8:	4cc5      	ldr	r4, [pc, #788]	@ (80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80094ba:	42a0      	cmp	r0, r4
 80094bc:	f171 0100 	sbcs.w	r1, r1, #0
 80094c0:	f082 820e 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80094c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094c8:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 80094cc:	4321      	orrs	r1, r4
 80094ce:	f001 8612 	beq.w	800b0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 80094d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094d6:	4cbf      	ldr	r4, [pc, #764]	@ (80097d4 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 80094d8:	42a0      	cmp	r0, r4
 80094da:	f171 0100 	sbcs.w	r1, r1, #0
 80094de:	f082 81ff 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80094e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094e6:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 80094ea:	4321      	orrs	r1, r4
 80094ec:	f002 817e 	beq.w	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 80094f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80094f4:	4cb8      	ldr	r4, [pc, #736]	@ (80097d8 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80094f6:	42a0      	cmp	r0, r4
 80094f8:	f171 0100 	sbcs.w	r1, r1, #0
 80094fc:	f082 81f0 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009500:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009504:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 8009508:	4321      	orrs	r1, r4
 800950a:	f000 829e 	beq.w	8009a4a <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 800950e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009512:	4cb2      	ldr	r4, [pc, #712]	@ (80097dc <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8009514:	42a0      	cmp	r0, r4
 8009516:	f171 0100 	sbcs.w	r1, r1, #0
 800951a:	f082 81e1 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800951e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009522:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 8009526:	4321      	orrs	r1, r4
 8009528:	f000 826d 	beq.w	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 800952c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009530:	4cab      	ldr	r4, [pc, #684]	@ (80097e0 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009532:	42a0      	cmp	r0, r4
 8009534:	f171 0100 	sbcs.w	r1, r1, #0
 8009538:	f082 81d2 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800953c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009540:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8009544:	4321      	orrs	r1, r4
 8009546:	f001 800d 	beq.w	800a564 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800954a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800954e:	4ca5      	ldr	r4, [pc, #660]	@ (80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8009550:	42a0      	cmp	r0, r4
 8009552:	f171 0100 	sbcs.w	r1, r1, #0
 8009556:	f082 81c3 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800955a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800955e:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 8009562:	4321      	orrs	r1, r4
 8009564:	f000 81d0 	beq.w	8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 8009568:	e9d7 0100 	ldrd	r0, r1, [r7]
 800956c:	4c9e      	ldr	r4, [pc, #632]	@ (80097e8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800956e:	42a0      	cmp	r0, r4
 8009570:	f171 0100 	sbcs.w	r1, r1, #0
 8009574:	f082 81b4 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800957c:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 8009580:	4321      	orrs	r1, r4
 8009582:	f000 8142 	beq.w	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 8009586:	e9d7 0100 	ldrd	r0, r1, [r7]
 800958a:	4c98      	ldr	r4, [pc, #608]	@ (80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800958c:	42a0      	cmp	r0, r4
 800958e:	f171 0100 	sbcs.w	r1, r1, #0
 8009592:	f082 81a5 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009596:	e9d7 0100 	ldrd	r0, r1, [r7]
 800959a:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 800959e:	4321      	orrs	r1, r4
 80095a0:	f001 824e 	beq.w	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80095a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095a8:	4c91      	ldr	r4, [pc, #580]	@ (80097f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80095aa:	42a0      	cmp	r0, r4
 80095ac:	f171 0100 	sbcs.w	r1, r1, #0
 80095b0:	f082 8196 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095b8:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 80095bc:	4321      	orrs	r1, r4
 80095be:	f001 8197 	beq.w	800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 80095c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095c6:	4c8b      	ldr	r4, [pc, #556]	@ (80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80095c8:	42a0      	cmp	r0, r4
 80095ca:	f171 0100 	sbcs.w	r1, r1, #0
 80095ce:	f082 8187 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095d6:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 80095da:	4321      	orrs	r1, r4
 80095dc:	f001 8154 	beq.w	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 80095e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095e4:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 80095e8:	f171 0100 	sbcs.w	r1, r1, #0
 80095ec:	f082 8178 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80095f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095f4:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 80095f8:	4321      	orrs	r1, r4
 80095fa:	f001 80b7 	beq.w	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 80095fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009602:	f248 0401 	movw	r4, #32769	@ 0x8001
 8009606:	42a0      	cmp	r0, r4
 8009608:	f171 0100 	sbcs.w	r1, r1, #0
 800960c:	f082 8168 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009610:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009614:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8009618:	4321      	orrs	r1, r4
 800961a:	f001 8064 	beq.w	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 800961e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009622:	f244 0401 	movw	r4, #16385	@ 0x4001
 8009626:	42a0      	cmp	r0, r4
 8009628:	f171 0100 	sbcs.w	r1, r1, #0
 800962c:	f082 8158 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009630:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009634:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8009638:	4321      	orrs	r1, r4
 800963a:	f001 8011 	beq.w	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 800963e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009642:	f242 0401 	movw	r4, #8193	@ 0x2001
 8009646:	42a0      	cmp	r0, r4
 8009648:	f171 0100 	sbcs.w	r1, r1, #0
 800964c:	f082 8148 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009650:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009654:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8009658:	4321      	orrs	r1, r4
 800965a:	f000 871e 	beq.w	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 800965e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009662:	f241 0401 	movw	r4, #4097	@ 0x1001
 8009666:	42a0      	cmp	r0, r4
 8009668:	f171 0100 	sbcs.w	r1, r1, #0
 800966c:	f082 8138 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009670:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009674:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8009678:	4321      	orrs	r1, r4
 800967a:	f000 86a8 	beq.w	800a3ce <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 800967e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009682:	f640 0401 	movw	r4, #2049	@ 0x801
 8009686:	42a0      	cmp	r0, r4
 8009688:	f171 0100 	sbcs.w	r1, r1, #0
 800968c:	f082 8128 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009690:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009694:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8009698:	4321      	orrs	r1, r4
 800969a:	f000 8632 	beq.w	800a302 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 800969e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096a2:	f240 4401 	movw	r4, #1025	@ 0x401
 80096a6:	42a0      	cmp	r0, r4
 80096a8:	f171 0100 	sbcs.w	r1, r1, #0
 80096ac:	f082 8118 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80096b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096b4:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 80096b8:	4321      	orrs	r1, r4
 80096ba:	f000 85b0 	beq.w	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 80096be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096c2:	f240 2401 	movw	r4, #513	@ 0x201
 80096c6:	42a0      	cmp	r0, r4
 80096c8:	f171 0100 	sbcs.w	r1, r1, #0
 80096cc:	f082 8108 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80096d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096d4:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 80096d8:	4321      	orrs	r1, r4
 80096da:	f000 8535 	beq.w	800a148 <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 80096de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096e2:	f240 1401 	movw	r4, #257	@ 0x101
 80096e6:	42a0      	cmp	r0, r4
 80096e8:	f171 0100 	sbcs.w	r1, r1, #0
 80096ec:	f082 80f8 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80096f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80096f4:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 80096f8:	4321      	orrs	r1, r4
 80096fa:	f000 84ba 	beq.w	800a072 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 80096fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009702:	2881      	cmp	r0, #129	@ 0x81
 8009704:	f171 0100 	sbcs.w	r1, r1, #0
 8009708:	f082 80ea 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800970c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009710:	2821      	cmp	r0, #33	@ 0x21
 8009712:	f171 0100 	sbcs.w	r1, r1, #0
 8009716:	d26f      	bcs.n	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009718:	e9d7 0100 	ldrd	r0, r1, [r7]
 800971c:	4301      	orrs	r1, r0
 800971e:	f002 80df 	beq.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009722:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009726:	1e42      	subs	r2, r0, #1
 8009728:	f141 33ff 	adc.w	r3, r1, #4294967295
 800972c:	2a20      	cmp	r2, #32
 800972e:	f173 0100 	sbcs.w	r1, r3, #0
 8009732:	f082 80d5 	bcs.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8009736:	2a1f      	cmp	r2, #31
 8009738:	f202 80d2 	bhi.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800973c:	a101      	add	r1, pc, #4	@ (adr r1, 8009744 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 800973e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009742:	bf00      	nop
 8009744:	08009aa5 	.word	0x08009aa5
 8009748:	08009b71 	.word	0x08009b71
 800974c:	0800b8e1 	.word	0x0800b8e1
 8009750:	08009c31 	.word	0x08009c31
 8009754:	0800b8e1 	.word	0x0800b8e1
 8009758:	0800b8e1 	.word	0x0800b8e1
 800975c:	0800b8e1 	.word	0x0800b8e1
 8009760:	08009d01 	.word	0x08009d01
 8009764:	0800b8e1 	.word	0x0800b8e1
 8009768:	0800b8e1 	.word	0x0800b8e1
 800976c:	0800b8e1 	.word	0x0800b8e1
 8009770:	0800b8e1 	.word	0x0800b8e1
 8009774:	0800b8e1 	.word	0x0800b8e1
 8009778:	0800b8e1 	.word	0x0800b8e1
 800977c:	0800b8e1 	.word	0x0800b8e1
 8009780:	08009de3 	.word	0x08009de3
 8009784:	0800b8e1 	.word	0x0800b8e1
 8009788:	0800b8e1 	.word	0x0800b8e1
 800978c:	0800b8e1 	.word	0x0800b8e1
 8009790:	0800b8e1 	.word	0x0800b8e1
 8009794:	0800b8e1 	.word	0x0800b8e1
 8009798:	0800b8e1 	.word	0x0800b8e1
 800979c:	0800b8e1 	.word	0x0800b8e1
 80097a0:	0800b8e1 	.word	0x0800b8e1
 80097a4:	0800b8e1 	.word	0x0800b8e1
 80097a8:	0800b8e1 	.word	0x0800b8e1
 80097ac:	0800b8e1 	.word	0x0800b8e1
 80097b0:	0800b8e1 	.word	0x0800b8e1
 80097b4:	0800b8e1 	.word	0x0800b8e1
 80097b8:	0800b8e1 	.word	0x0800b8e1
 80097bc:	0800b8e1 	.word	0x0800b8e1
 80097c0:	08009eb9 	.word	0x08009eb9
 80097c4:	80000001 	.word	0x80000001
 80097c8:	40000001 	.word	0x40000001
 80097cc:	20000001 	.word	0x20000001
 80097d0:	10000001 	.word	0x10000001
 80097d4:	08000001 	.word	0x08000001
 80097d8:	04000001 	.word	0x04000001
 80097dc:	00800001 	.word	0x00800001
 80097e0:	00400001 	.word	0x00400001
 80097e4:	00200001 	.word	0x00200001
 80097e8:	00100001 	.word	0x00100001
 80097ec:	00080001 	.word	0x00080001
 80097f0:	00040001 	.word	0x00040001
 80097f4:	00020001 	.word	0x00020001
 80097f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097fc:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8009800:	430b      	orrs	r3, r1
 8009802:	f000 83c4 	beq.w	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8009806:	f002 b86b 	b.w	800b8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800980a:	4ba1      	ldr	r3, [pc, #644]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800980c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009810:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009814:	633b      	str	r3, [r7, #48]	@ 0x30
 8009816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009818:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800981c:	d036      	beq.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 800981e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009820:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009824:	d86b      	bhi.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009828:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800982c:	d02b      	beq.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800982e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009830:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009834:	d863      	bhi.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009838:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800983c:	d01b      	beq.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800983e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009844:	d85b      	bhi.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8009846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009848:	2b00      	cmp	r3, #0
 800984a:	d004      	beq.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 800984c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800984e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009852:	d008      	beq.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8009854:	e053      	b.n	80098fe <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009856:	f107 0320 	add.w	r3, r7, #32
 800985a:	4618      	mov	r0, r3
 800985c:	f7ff f8b4 	bl	80089c8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009862:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009864:	e04e      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009866:	f107 0314 	add.w	r3, r7, #20
 800986a:	4618      	mov	r0, r3
 800986c:	f7ff fa18 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009874:	e046      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009876:	f107 0308 	add.w	r3, r7, #8
 800987a:	4618      	mov	r0, r3
 800987c:	f7ff fb7c 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009884:	e03e      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009886:	4b83      	ldr	r3, [pc, #524]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009888:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800988a:	e03b      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800988c:	4b80      	ldr	r3, [pc, #512]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800988e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009892:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009896:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009898:	4b7d      	ldr	r3, [pc, #500]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 0302 	and.w	r3, r3, #2
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d10c      	bne.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 80098a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d109      	bne.n	80098be <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80098aa:	4b79      	ldr	r3, [pc, #484]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	08db      	lsrs	r3, r3, #3
 80098b0:	f003 0303 	and.w	r3, r3, #3
 80098b4:	4a78      	ldr	r2, [pc, #480]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80098b6:	fa22 f303 	lsr.w	r3, r2, r3
 80098ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80098bc:	e01e      	b.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80098be:	4b74      	ldr	r3, [pc, #464]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098ca:	d106      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80098cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098d2:	d102      	bne.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80098d4:	4b71      	ldr	r3, [pc, #452]	@ (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80098d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d8:	e010      	b.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80098da:	4b6d      	ldr	r3, [pc, #436]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098e6:	d106      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 80098e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098ee:	d102      	bne.n	80098f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80098f0:	4b6b      	ldr	r3, [pc, #428]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80098f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098f4:	e002      	b.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80098f6:	2300      	movs	r3, #0
 80098f8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80098fa:	e003      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 80098fc:	e002      	b.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 80098fe:	2300      	movs	r3, #0
 8009900:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009902:	bf00      	nop
          }
        }
        break;
 8009904:	f001 bfef 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009908:	4b61      	ldr	r3, [pc, #388]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800990a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800990e:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8009912:	633b      	str	r3, [r7, #48]	@ 0x30
 8009914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009916:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800991a:	d036      	beq.n	800998a <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 800991c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800991e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009922:	d86b      	bhi.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009926:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800992a:	d02b      	beq.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800992c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8009932:	d863      	bhi.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009936:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800993a:	d01b      	beq.n	8009974 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800993c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009942:	d85b      	bhi.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8009944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009946:	2b00      	cmp	r3, #0
 8009948:	d004      	beq.n	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800994a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800994c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009950:	d008      	beq.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8009952:	e053      	b.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009954:	f107 0320 	add.w	r3, r7, #32
 8009958:	4618      	mov	r0, r3
 800995a:	f7ff f835 	bl	80089c8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800995e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009960:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009962:	e04e      	b.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009964:	f107 0314 	add.w	r3, r7, #20
 8009968:	4618      	mov	r0, r3
 800996a:	f7ff f999 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009972:	e046      	b.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009974:	f107 0308 	add.w	r3, r7, #8
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff fafd 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009982:	e03e      	b.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8009984:	4b43      	ldr	r3, [pc, #268]	@ (8009a94 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009986:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009988:	e03b      	b.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800998a:	4b41      	ldr	r3, [pc, #260]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800998c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009990:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009994:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009996:	4b3e      	ldr	r3, [pc, #248]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0302 	and.w	r3, r3, #2
 800999e:	2b02      	cmp	r3, #2
 80099a0:	d10c      	bne.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 80099a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d109      	bne.n	80099bc <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80099a8:	4b39      	ldr	r3, [pc, #228]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	08db      	lsrs	r3, r3, #3
 80099ae:	f003 0303 	and.w	r3, r3, #3
 80099b2:	4a39      	ldr	r2, [pc, #228]	@ (8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 80099b4:	fa22 f303 	lsr.w	r3, r2, r3
 80099b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80099ba:	e01e      	b.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099bc:	4b34      	ldr	r3, [pc, #208]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80099c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80099c8:	d106      	bne.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80099ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099d0:	d102      	bne.n	80099d8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 80099d2:	4b32      	ldr	r3, [pc, #200]	@ (8009a9c <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 80099d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80099d6:	e010      	b.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099d8:	4b2d      	ldr	r3, [pc, #180]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099e4:	d106      	bne.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 80099e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099ec:	d102      	bne.n	80099f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 80099ee:	4b2c      	ldr	r3, [pc, #176]	@ (8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 80099f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80099f2:	e002      	b.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 80099f4:	2300      	movs	r3, #0
 80099f6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 80099f8:	e003      	b.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 80099fa:	e002      	b.n	8009a02 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 80099fc:	2300      	movs	r3, #0
 80099fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009a00:	bf00      	nop
          }
        }
        break;
 8009a02:	f001 bf70 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8009a06:	4b22      	ldr	r3, [pc, #136]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009a08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a10:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8009a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d108      	bne.n	8009a2a <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a18:	f107 0320 	add.w	r3, r7, #32
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7fe ffd3 	bl	80089c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a24:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a26:	f001 bf5e 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8009a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a2c:	2b40      	cmp	r3, #64	@ 0x40
 8009a2e:	d108      	bne.n	8009a42 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a30:	f107 0314 	add.w	r3, r7, #20
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7ff f933 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a3a:	69fb      	ldr	r3, [r7, #28]
 8009a3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a3e:	f001 bf52 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009a42:	2300      	movs	r3, #0
 8009a44:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a46:	f001 bf4e 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8009a4a:	4b11      	ldr	r3, [pc, #68]	@ (8009a90 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8009a4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a54:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8009a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d108      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a5c:	f107 0320 	add.w	r3, r7, #32
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7fe ffb1 	bl	80089c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a68:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a6a:	f001 bf3c 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a70:	2b80      	cmp	r3, #128	@ 0x80
 8009a72:	d108      	bne.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a74:	f107 0314 	add.w	r3, r7, #20
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f7ff f911 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a7e:	69fb      	ldr	r3, [r7, #28]
 8009a80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a82:	f001 bf30 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009a86:	2300      	movs	r3, #0
 8009a88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a8a:	f001 bf2c 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a8e:	bf00      	nop
 8009a90:	44020c00 	.word	0x44020c00
 8009a94:	00bb8000 	.word	0x00bb8000
 8009a98:	03d09000 	.word	0x03d09000
 8009a9c:	003d0900 	.word	0x003d0900
 8009aa0:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009aa4:	4b9d      	ldr	r3, [pc, #628]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009aa6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009aaa:	f003 0307 	and.w	r3, r3, #7
 8009aae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d104      	bne.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8009ab6:	f7fc ffd1 	bl	8006a5c <HAL_RCC_GetPCLK2Freq>
 8009aba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009abc:	f001 bf13 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8009ac0:	4b96      	ldr	r3, [pc, #600]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ac8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009acc:	d10a      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8009ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ad0:	2b01      	cmp	r3, #1
 8009ad2:	d107      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ad4:	f107 0314 	add.w	r3, r7, #20
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7ff f8e1 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ae2:	e043      	b.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8009ae4:	4b8d      	ldr	r3, [pc, #564]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009af0:	d10a      	bne.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8009af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d107      	bne.n	8009b08 <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009af8:	f107 0308 	add.w	r3, r7, #8
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7ff fa3b 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b06:	e031      	b.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009b08:	4b84      	ldr	r3, [pc, #528]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d10c      	bne.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8009b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b16:	2b03      	cmp	r3, #3
 8009b18:	d109      	bne.n	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b1a:	4b80      	ldr	r3, [pc, #512]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	08db      	lsrs	r3, r3, #3
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	4a7e      	ldr	r2, [pc, #504]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009b26:	fa22 f303 	lsr.w	r3, r2, r3
 8009b2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b2c:	e01e      	b.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8009b2e:	4b7b      	ldr	r3, [pc, #492]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b3a:	d105      	bne.n	8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8009b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3e:	2b04      	cmp	r3, #4
 8009b40:	d102      	bne.n	8009b48 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8009b42:	4b78      	ldr	r3, [pc, #480]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b46:	e011      	b.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009b48:	4b74      	ldr	r3, [pc, #464]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b4a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009b4e:	f003 0302 	and.w	r3, r3, #2
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d106      	bne.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8009b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b58:	2b05      	cmp	r3, #5
 8009b5a:	d103      	bne.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8009b5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b60:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b62:	e003      	b.n	8009b6c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8009b64:	2300      	movs	r3, #0
 8009b66:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b68:	f001 bebd 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b6c:	f001 bebb 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009b70:	4b6a      	ldr	r3, [pc, #424]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009b76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b7a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d104      	bne.n	8009b8c <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009b82:	f7fc ff55 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 8009b86:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009b88:	f001 bead 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8009b8c:	4b63      	ldr	r3, [pc, #396]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b94:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b98:	d10a      	bne.n	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b9c:	2b08      	cmp	r3, #8
 8009b9e:	d107      	bne.n	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ba0:	f107 0314 	add.w	r3, r7, #20
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f7ff f87b 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bae:	e03d      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8009bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bb2:	2b10      	cmp	r3, #16
 8009bb4:	d108      	bne.n	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bb6:	f107 0308 	add.w	r3, r7, #8
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7ff f9dc 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bc4:	f001 be8f 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009bc8:	4b54      	ldr	r3, [pc, #336]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0302 	and.w	r3, r3, #2
 8009bd0:	2b02      	cmp	r3, #2
 8009bd2:	d10c      	bne.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8009bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bd6:	2b18      	cmp	r3, #24
 8009bd8:	d109      	bne.n	8009bee <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bda:	4b50      	ldr	r3, [pc, #320]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	08db      	lsrs	r3, r3, #3
 8009be0:	f003 0303 	and.w	r3, r3, #3
 8009be4:	4a4e      	ldr	r2, [pc, #312]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009be6:	fa22 f303 	lsr.w	r3, r2, r3
 8009bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bec:	e01e      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8009bee:	4b4b      	ldr	r3, [pc, #300]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bfa:	d105      	bne.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bfe:	2b20      	cmp	r3, #32
 8009c00:	d102      	bne.n	8009c08 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8009c02:	4b48      	ldr	r3, [pc, #288]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009c04:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c06:	e011      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009c08:	4b44      	ldr	r3, [pc, #272]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c0e:	f003 0302 	and.w	r3, r3, #2
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	d106      	bne.n	8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 8009c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c18:	2b28      	cmp	r3, #40	@ 0x28
 8009c1a:	d103      	bne.n	8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8009c1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c22:	e003      	b.n	8009c2c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8009c24:	2300      	movs	r3, #0
 8009c26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c28:	f001 be5d 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c2c:	f001 be5b 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009c30:	4b3a      	ldr	r3, [pc, #232]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009c36:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009c3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d104      	bne.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009c42:	f7fc fef5 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 8009c46:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009c48:	f001 be4d 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8009c4c:	4b33      	ldr	r3, [pc, #204]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c58:	d10a      	bne.n	8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 8009c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c5c:	2b40      	cmp	r3, #64	@ 0x40
 8009c5e:	d107      	bne.n	8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c60:	f107 0314 	add.w	r3, r7, #20
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7ff f81b 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c6a:	69bb      	ldr	r3, [r7, #24]
 8009c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c6e:	e045      	b.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8009c70:	4b2a      	ldr	r3, [pc, #168]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009c78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009c7c:	d10a      	bne.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c80:	2b80      	cmp	r3, #128	@ 0x80
 8009c82:	d107      	bne.n	8009c94 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c84:	f107 0308 	add.w	r3, r7, #8
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7ff f975 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c92:	e033      	b.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009c94:	4b21      	ldr	r3, [pc, #132]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0302 	and.w	r3, r3, #2
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d10c      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ca2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ca4:	d109      	bne.n	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	08db      	lsrs	r3, r3, #3
 8009cac:	f003 0303 	and.w	r3, r3, #3
 8009cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8009cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cb8:	e020      	b.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8009cba:	4b18      	ldr	r3, [pc, #96]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cc6:	d106      	bne.n	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 8009cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009cce:	d102      	bne.n	8009cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8009cd0:	4b14      	ldr	r3, [pc, #80]	@ (8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009cd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cd4:	e012      	b.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009cd6:	4b11      	ldr	r3, [pc, #68]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009cd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d107      	bne.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8009ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ce6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009cea:	d103      	bne.n	8009cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8009cec:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009cf0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cf2:	e003      	b.n	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cf8:	f001 bdf5 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009cfc:	f001 bdf3 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009d00:	4b06      	ldr	r3, [pc, #24]	@ (8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009d06:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 8009d0a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009d12:	f7fc fe8d 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 8009d16:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009d18:	f001 bde5 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009d1c:	44020c00 	.word	0x44020c00
 8009d20:	03d09000 	.word	0x03d09000
 8009d24:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8009d28:	4ba0      	ldr	r3, [pc, #640]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009d30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d34:	d10b      	bne.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 8009d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d3c:	d107      	bne.n	8009d4e <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d3e:	f107 0314 	add.w	r3, r7, #20
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7fe ffac 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d4c:	e047      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8009d4e:	4b97      	ldr	r3, [pc, #604]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009d56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d5a:	d10b      	bne.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8009d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d62:	d107      	bne.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d64:	f107 0308 	add.w	r3, r7, #8
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7ff f905 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d72:	e034      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009d74:	4b8d      	ldr	r3, [pc, #564]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 0302 	and.w	r3, r3, #2
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d10d      	bne.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 8009d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d82:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009d86:	d109      	bne.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d88:	4b88      	ldr	r3, [pc, #544]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	08db      	lsrs	r3, r3, #3
 8009d8e:	f003 0303 	and.w	r3, r3, #3
 8009d92:	4a87      	ldr	r2, [pc, #540]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009d94:	fa22 f303 	lsr.w	r3, r2, r3
 8009d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d9a:	e020      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8009d9c:	4b83      	ldr	r3, [pc, #524]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009da8:	d106      	bne.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8009daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009db0:	d102      	bne.n	8009db8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 8009db2:	4b80      	ldr	r3, [pc, #512]	@ (8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009db6:	e012      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009db8:	4b7c      	ldr	r3, [pc, #496]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009dba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	2b02      	cmp	r3, #2
 8009dc4:	d107      	bne.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009dcc:	d103      	bne.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8009dce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009dd4:	e003      	b.n	8009dde <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009dda:	f001 bd84 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009dde:	f001 bd82 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009de2:	4b72      	ldr	r3, [pc, #456]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009de8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009dec:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d104      	bne.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009df4:	f7fc fe1c 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 8009df8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 8009dfa:	f001 bd74 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8009dfe:	4b6b      	ldr	r3, [pc, #428]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e0a:	d10b      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e12:	d107      	bne.n	8009e24 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e14:	f107 0314 	add.w	r3, r7, #20
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7fe ff41 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009e1e:	69bb      	ldr	r3, [r7, #24]
 8009e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e22:	e047      	b.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8009e24:	4b61      	ldr	r3, [pc, #388]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e30:	d10b      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8009e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e38:	d107      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e3a:	f107 0308 	add.w	r3, r7, #8
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7ff f89a 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e48:	e034      	b.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009e4a:	4b58      	ldr	r3, [pc, #352]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 0302 	and.w	r3, r3, #2
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d10d      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e58:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009e5c:	d109      	bne.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e5e:	4b53      	ldr	r3, [pc, #332]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	08db      	lsrs	r3, r3, #3
 8009e64:	f003 0303 	and.w	r3, r3, #3
 8009e68:	4a51      	ldr	r2, [pc, #324]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e70:	e020      	b.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8009e72:	4b4e      	ldr	r3, [pc, #312]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e7e:	d106      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8009e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009e86:	d102      	bne.n	8009e8e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 8009e88:	4b4a      	ldr	r3, [pc, #296]	@ (8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e8c:	e012      	b.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009e8e:	4b47      	ldr	r3, [pc, #284]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009e94:	f003 0302 	and.w	r3, r3, #2
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d107      	bne.n	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8009e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009ea2:	d103      	bne.n	8009eac <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 8009ea4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eaa:	e003      	b.n	8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 8009eac:	2300      	movs	r3, #0
 8009eae:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009eb0:	f001 bd19 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009eb4:	f001 bd17 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8009eb8:	4b3c      	ldr	r3, [pc, #240]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009eba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009ebe:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009ec2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d104      	bne.n	8009ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009eca:	f7fc fdb1 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 8009ece:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8009ed0:	f001 bd09 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8009ed4:	4b35      	ldr	r3, [pc, #212]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009edc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ee0:	d10b      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ee8:	d107      	bne.n	8009efa <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eea:	f107 0314 	add.w	r3, r7, #20
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe fed6 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ef8:	e047      	b.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8009efa:	4b2c      	ldr	r3, [pc, #176]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f06:	d10b      	bne.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 8009f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f0e:	d107      	bne.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f10:	f107 0308 	add.w	r3, r7, #8
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff f82f 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f1e:	e034      	b.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8009f20:	4b22      	ldr	r3, [pc, #136]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 0302 	and.w	r3, r3, #2
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d10d      	bne.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8009f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f2e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009f32:	d109      	bne.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f34:	4b1d      	ldr	r3, [pc, #116]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	08db      	lsrs	r3, r3, #3
 8009f3a:	f003 0303 	and.w	r3, r3, #3
 8009f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009f40:	fa22 f303 	lsr.w	r3, r2, r3
 8009f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f46:	e020      	b.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8009f48:	4b18      	ldr	r3, [pc, #96]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f54:	d106      	bne.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8009f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f5c:	d102      	bne.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 8009f5e:	4b15      	ldr	r3, [pc, #84]	@ (8009fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 8009f60:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f62:	e012      	b.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8009f64:	4b11      	ldr	r3, [pc, #68]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f6a:	f003 0302 	and.w	r3, r3, #2
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d107      	bne.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 8009f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f74:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8009f78:	d103      	bne.n	8009f82 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 8009f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f80:	e003      	b.n	8009f8a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 8009f82:	2300      	movs	r3, #0
 8009f84:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009f86:	f001 bcae 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009f8a:	f001 bcac 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8009f8e:	4b07      	ldr	r3, [pc, #28]	@ (8009fac <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009f90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009f94:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 8009f98:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d10b      	bne.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009fa0:	f7fc fd46 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 8009fa4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 8009fa6:	f001 bc9e 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009faa:	bf00      	nop
 8009fac:	44020c00 	.word	0x44020c00
 8009fb0:	03d09000 	.word	0x03d09000
 8009fb4:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8009fb8:	4ba0      	ldr	r3, [pc, #640]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009fc4:	d10b      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009fcc:	d107      	bne.n	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fce:	f107 0314 	add.w	r3, r7, #20
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f7fe fe64 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fdc:	e047      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8009fde:	4b97      	ldr	r3, [pc, #604]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009fe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fea:	d10b      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8009fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009ff2:	d107      	bne.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ff4:	f107 0308 	add.w	r3, r7, #8
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7fe ffbd 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	637b      	str	r3, [r7, #52]	@ 0x34
 800a002:	e034      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 800a004:	4b8d      	ldr	r3, [pc, #564]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 0302 	and.w	r3, r3, #2
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d10d      	bne.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 800a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a012:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a016:	d109      	bne.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a018:	4b88      	ldr	r3, [pc, #544]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	08db      	lsrs	r3, r3, #3
 800a01e:	f003 0303 	and.w	r3, r3, #3
 800a022:	4a87      	ldr	r2, [pc, #540]	@ (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a024:	fa22 f303 	lsr.w	r3, r2, r3
 800a028:	637b      	str	r3, [r7, #52]	@ 0x34
 800a02a:	e020      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 800a02c:	4b83      	ldr	r3, [pc, #524]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a034:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a038:	d106      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800a03a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a040:	d102      	bne.n	800a048 <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 800a042:	4b80      	ldr	r3, [pc, #512]	@ (800a244 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a044:	637b      	str	r3, [r7, #52]	@ 0x34
 800a046:	e012      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800a048:	4b7c      	ldr	r3, [pc, #496]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a04a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	2b02      	cmp	r3, #2
 800a054:	d107      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800a056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a058:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800a05c:	d103      	bne.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 800a05e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a062:	637b      	str	r3, [r7, #52]	@ 0x34
 800a064:	e003      	b.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a06a:	f001 bc3c 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a06e:	f001 bc3a 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 800a072:	4b72      	ldr	r3, [pc, #456]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a074:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a078:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a07c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800a07e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a080:	2b00      	cmp	r3, #0
 800a082:	d104      	bne.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a084:	f7fc fcd4 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 800a088:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 800a08a:	f001 bc2c 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 800a08e:	4b6b      	ldr	r3, [pc, #428]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a096:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a09a:	d10b      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 800a09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a09e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0a2:	d107      	bne.n	800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0a4:	f107 0314 	add.w	r3, r7, #20
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe fdf9 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b2:	e047      	b.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800a0b4:	4b61      	ldr	r3, [pc, #388]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0c0:	d10b      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 800a0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0c8:	d107      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ca:	f107 0308 	add.w	r3, r7, #8
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7fe ff52 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0d8:	e034      	b.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800a0da:	4b58      	ldr	r3, [pc, #352]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d10d      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800a0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a0ec:	d109      	bne.n	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0ee:	4b53      	ldr	r3, [pc, #332]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	08db      	lsrs	r3, r3, #3
 800a0f4:	f003 0303 	and.w	r3, r3, #3
 800a0f8:	4a51      	ldr	r2, [pc, #324]	@ (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a0fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a0fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a100:	e020      	b.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 800a102:	4b4e      	ldr	r3, [pc, #312]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a10a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a10e:	d106      	bne.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 800a110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a112:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a116:	d102      	bne.n	800a11e <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800a118:	4b4a      	ldr	r3, [pc, #296]	@ (800a244 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a11a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a11c:	e012      	b.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 800a11e:	4b47      	ldr	r3, [pc, #284]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a124:	f003 0302 	and.w	r3, r3, #2
 800a128:	2b02      	cmp	r3, #2
 800a12a:	d107      	bne.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 800a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800a132:	d103      	bne.n	800a13c <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 800a134:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a138:	637b      	str	r3, [r7, #52]	@ 0x34
 800a13a:	e003      	b.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 800a13c:	2300      	movs	r3, #0
 800a13e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a140:	f001 bbd1 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a144:	f001 bbcf 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800a148:	4b3c      	ldr	r3, [pc, #240]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a14a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a14e:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a152:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800a154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a156:	2b00      	cmp	r3, #0
 800a158:	d104      	bne.n	800a164 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a15a:	f7fc fc69 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 800a15e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 800a160:	f001 bbc1 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800a164:	4b35      	ldr	r3, [pc, #212]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a16c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a170:	d10b      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 800a172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a178:	d107      	bne.n	800a18a <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a17a:	f107 0314 	add.w	r3, r7, #20
 800a17e:	4618      	mov	r0, r3
 800a180:	f7fe fd8e 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	637b      	str	r3, [r7, #52]	@ 0x34
 800a188:	e047      	b.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800a18a:	4b2c      	ldr	r3, [pc, #176]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a196:	d10b      	bne.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 800a198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a19a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a19e:	d107      	bne.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1a0:	f107 0308 	add.w	r3, r7, #8
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fe fee7 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ae:	e034      	b.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800a1b0:	4b22      	ldr	r3, [pc, #136]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0302 	and.w	r3, r3, #2
 800a1b8:	2b02      	cmp	r3, #2
 800a1ba:	d10d      	bne.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1be:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a1c2:	d109      	bne.n	800a1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a1c4:	4b1d      	ldr	r3, [pc, #116]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	08db      	lsrs	r3, r3, #3
 800a1ca:	f003 0303 	and.w	r3, r3, #3
 800a1ce:	4a1c      	ldr	r2, [pc, #112]	@ (800a240 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800a1d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1d6:	e020      	b.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800a1d8:	4b18      	ldr	r3, [pc, #96]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a1e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1e4:	d106      	bne.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a1ec:	d102      	bne.n	800a1f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 800a1ee:	4b15      	ldr	r3, [pc, #84]	@ (800a244 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800a1f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1f2:	e012      	b.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800a1f4:	4b11      	ldr	r3, [pc, #68]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a1f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1fa:	f003 0302 	and.w	r3, r3, #2
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d107      	bne.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 800a202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a204:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a208:	d103      	bne.n	800a212 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800a20a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a20e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a210:	e003      	b.n	800a21a <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 800a212:	2300      	movs	r3, #0
 800a214:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a216:	f001 bb66 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a21a:	f001 bb64 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 800a21e:	4b07      	ldr	r3, [pc, #28]	@ (800a23c <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800a220:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a224:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800a228:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800a22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10b      	bne.n	800a248 <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a230:	f7fc fbfe 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 800a234:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800a236:	f001 bb56 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a23a:	bf00      	nop
 800a23c:	44020c00 	.word	0x44020c00
 800a240:	03d09000 	.word	0x03d09000
 800a244:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800a248:	4ba1      	ldr	r3, [pc, #644]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a254:	d10b      	bne.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800a256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a258:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a25c:	d107      	bne.n	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a25e:	f107 0314 	add.w	r3, r7, #20
 800a262:	4618      	mov	r0, r3
 800a264:	f7fe fd1c 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a26c:	e047      	b.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 800a26e:	4b98      	ldr	r3, [pc, #608]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a27a:	d10b      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 800a27c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a282:	d107      	bne.n	800a294 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a284:	f107 0308 	add.w	r3, r7, #8
 800a288:	4618      	mov	r0, r3
 800a28a:	f7fe fe75 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	637b      	str	r3, [r7, #52]	@ 0x34
 800a292:	e034      	b.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 800a294:	4b8e      	ldr	r3, [pc, #568]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d10d      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 800a2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a2:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800a2a6:	d109      	bne.n	800a2bc <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a2a8:	4b89      	ldr	r3, [pc, #548]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	08db      	lsrs	r3, r3, #3
 800a2ae:	f003 0303 	and.w	r3, r3, #3
 800a2b2:	4a88      	ldr	r2, [pc, #544]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a2b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2b8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2ba:	e020      	b.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 800a2bc:	4b84      	ldr	r3, [pc, #528]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2c8:	d106      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800a2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2d0:	d102      	bne.n	800a2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 800a2d2:	4b81      	ldr	r3, [pc, #516]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a2d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2d6:	e012      	b.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800a2d8:	4b7d      	ldr	r3, [pc, #500]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a2da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2de:	f003 0302 	and.w	r3, r3, #2
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d107      	bne.n	800a2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800a2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e8:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800a2ec:	d103      	bne.n	800a2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 800a2ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2f4:	e003      	b.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a2fa:	f001 baf4 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a2fe:	f001 baf2 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800a302:	4b73      	ldr	r3, [pc, #460]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a304:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a308:	f003 0307 	and.w	r3, r3, #7
 800a30c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800a30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a310:	2b00      	cmp	r3, #0
 800a312:	d104      	bne.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a314:	f7fc fb8c 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 800a318:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800a31a:	f001 bae4 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800a31e:	4b6c      	ldr	r3, [pc, #432]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a326:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a32a:	d10a      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 800a32c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d107      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a332:	f107 0314 	add.w	r3, r7, #20
 800a336:	4618      	mov	r0, r3
 800a338:	f7fe fcb2 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a340:	e043      	b.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800a342:	4b63      	ldr	r3, [pc, #396]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a34a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a34e:	d10a      	bne.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 800a350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a352:	2b02      	cmp	r3, #2
 800a354:	d107      	bne.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a356:	f107 0308 	add.w	r3, r7, #8
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe fe0c 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	637b      	str	r3, [r7, #52]	@ 0x34
 800a364:	e031      	b.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800a366:	4b5a      	ldr	r3, [pc, #360]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0302 	and.w	r3, r3, #2
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d10c      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 800a372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a374:	2b03      	cmp	r3, #3
 800a376:	d109      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a378:	4b55      	ldr	r3, [pc, #340]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	08db      	lsrs	r3, r3, #3
 800a37e:	f003 0303 	and.w	r3, r3, #3
 800a382:	4a54      	ldr	r2, [pc, #336]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a384:	fa22 f303 	lsr.w	r3, r2, r3
 800a388:	637b      	str	r3, [r7, #52]	@ 0x34
 800a38a:	e01e      	b.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800a38c:	4b50      	ldr	r3, [pc, #320]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a398:	d105      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 800a39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	d102      	bne.n	800a3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 800a3a0:	4b4d      	ldr	r3, [pc, #308]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a3a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3a4:	e011      	b.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800a3a6:	4b4a      	ldr	r3, [pc, #296]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a3a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a3ac:	f003 0302 	and.w	r3, r3, #2
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d106      	bne.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 800a3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b6:	2b05      	cmp	r3, #5
 800a3b8:	d103      	bne.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 800a3ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3c0:	e003      	b.n	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a3c6:	f001 ba8e 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a3ca:	f001 ba8c 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800a3ce:	4b40      	ldr	r3, [pc, #256]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a3d0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a3d4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a3d8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800a3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d104      	bne.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a3e0:	f7fc fb26 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 800a3e4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800a3e6:	f001 ba7e 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800a3ea:	4b39      	ldr	r3, [pc, #228]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3f6:	d10a      	bne.n	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800a3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fa:	2b10      	cmp	r3, #16
 800a3fc:	d107      	bne.n	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3fe:	f107 0314 	add.w	r3, r7, #20
 800a402:	4618      	mov	r0, r3
 800a404:	f7fe fc4c 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a40c:	e043      	b.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 800a40e:	4b30      	ldr	r3, [pc, #192]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a416:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a41a:	d10a      	bne.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 800a41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41e:	2b20      	cmp	r3, #32
 800a420:	d107      	bne.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a422:	f107 0308 	add.w	r3, r7, #8
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe fda6 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a430:	e031      	b.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 800a432:	4b27      	ldr	r3, [pc, #156]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0302 	and.w	r3, r3, #2
 800a43a:	2b02      	cmp	r3, #2
 800a43c:	d10c      	bne.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 800a43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a440:	2b30      	cmp	r3, #48	@ 0x30
 800a442:	d109      	bne.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a444:	4b22      	ldr	r3, [pc, #136]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	08db      	lsrs	r3, r3, #3
 800a44a:	f003 0303 	and.w	r3, r3, #3
 800a44e:	4a21      	ldr	r2, [pc, #132]	@ (800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 800a450:	fa22 f303 	lsr.w	r3, r2, r3
 800a454:	637b      	str	r3, [r7, #52]	@ 0x34
 800a456:	e01e      	b.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800a458:	4b1d      	ldr	r3, [pc, #116]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a464:	d105      	bne.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800a466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a468:	2b40      	cmp	r3, #64	@ 0x40
 800a46a:	d102      	bne.n	800a472 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 800a46c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 800a46e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a470:	e011      	b.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 800a472:	4b17      	ldr	r3, [pc, #92]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a478:	f003 0302 	and.w	r3, r3, #2
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	d106      	bne.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 800a480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a482:	2b50      	cmp	r3, #80	@ 0x50
 800a484:	d103      	bne.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 800a486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a48a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a48c:	e003      	b.n	800a496 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 800a48e:	2300      	movs	r3, #0
 800a490:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a492:	f001 ba28 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a496:	f001 ba26 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800a49a:	4b0d      	ldr	r3, [pc, #52]	@ (800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800a49c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a4a0:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a4a4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d104      	bne.n	800a4b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a4ac:	f7fc faec 	bl	8006a88 <HAL_RCC_GetPCLK3Freq>
 800a4b0:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a4b2:	f001 ba18 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4bc:	d10e      	bne.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4be:	f107 0314 	add.w	r3, r7, #20
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f7fe fbec 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4cc:	f001 ba0b 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a4d0:	44020c00 	.word	0x44020c00
 800a4d4:	03d09000 	.word	0x03d09000
 800a4d8:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 800a4dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4e2:	d108      	bne.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4e4:	f107 0308 	add.w	r3, r7, #8
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7fe fd45 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a4f2:	f001 b9f8 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800a4f6:	4ba4      	ldr	r3, [pc, #656]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	2b02      	cmp	r3, #2
 800a500:	d10d      	bne.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800a502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a504:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a508:	d109      	bne.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a50a:	4b9f      	ldr	r3, [pc, #636]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	08db      	lsrs	r3, r3, #3
 800a510:	f003 0303 	and.w	r3, r3, #3
 800a514:	4a9d      	ldr	r2, [pc, #628]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a516:	fa22 f303 	lsr.w	r3, r2, r3
 800a51a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a51c:	e020      	b.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800a51e:	4b9a      	ldr	r3, [pc, #616]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a52a:	d106      	bne.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 800a52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a532:	d102      	bne.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 800a534:	4b96      	ldr	r3, [pc, #600]	@ (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a536:	637b      	str	r3, [r7, #52]	@ 0x34
 800a538:	e012      	b.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800a53a:	4b93      	ldr	r3, [pc, #588]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a53c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a540:	f003 0302 	and.w	r3, r3, #2
 800a544:	2b02      	cmp	r3, #2
 800a546:	d107      	bne.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800a548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a54e:	d103      	bne.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 800a550:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a554:	637b      	str	r3, [r7, #52]	@ 0x34
 800a556:	e003      	b.n	800a560 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800a558:	2300      	movs	r3, #0
 800a55a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a55c:	f001 b9c3 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a560:	f001 b9c1 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800a564:	4b88      	ldr	r3, [pc, #544]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a566:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a56a:	f003 0307 	and.w	r3, r3, #7
 800a56e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800a570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a572:	2b00      	cmp	r3, #0
 800a574:	d104      	bne.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 800a576:	f7fc fa3f 	bl	80069f8 <HAL_RCC_GetHCLKFreq>
 800a57a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 800a57c:	f001 b9b3 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800a580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a582:	2b01      	cmp	r3, #1
 800a584:	d104      	bne.n	800a590 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 800a586:	f7fc f90b 	bl	80067a0 <HAL_RCC_GetSysClockFreq>
 800a58a:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800a58c:	f001 b9ab 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 800a590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a592:	2b02      	cmp	r3, #2
 800a594:	d108      	bne.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a596:	f107 0314 	add.w	r3, r7, #20
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fe fb80 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a5a4:	f001 b99f 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800a5a8:	4b77      	ldr	r3, [pc, #476]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5b4:	d105      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b8:	2b03      	cmp	r3, #3
 800a5ba:	d102      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 800a5bc:	4b75      	ldr	r3, [pc, #468]	@ (800a794 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 800a5be:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5c0:	e023      	b.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800a5c2:	4b71      	ldr	r3, [pc, #452]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f003 0302 	and.w	r3, r3, #2
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d10c      	bne.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	d109      	bne.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a5d4:	4b6c      	ldr	r3, [pc, #432]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	08db      	lsrs	r3, r3, #3
 800a5da:	f003 0303 	and.w	r3, r3, #3
 800a5de:	4a6b      	ldr	r2, [pc, #428]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a5e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5e6:	e010      	b.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 800a5e8:	4b67      	ldr	r3, [pc, #412]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5f4:	d105      	bne.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f8:	2b05      	cmp	r3, #5
 800a5fa:	d102      	bne.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 800a5fc:	4b64      	ldr	r3, [pc, #400]	@ (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a5fe:	637b      	str	r3, [r7, #52]	@ 0x34
 800a600:	e003      	b.n	800a60a <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 800a602:	2300      	movs	r3, #0
 800a604:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a606:	f001 b96e 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a60a:	f001 b96c 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800a60e:	4b5e      	ldr	r3, [pc, #376]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a610:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a614:	f003 0308 	and.w	r3, r3, #8
 800a618:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800a61a:	4b5b      	ldr	r3, [pc, #364]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a61c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a620:	f003 0302 	and.w	r3, r3, #2
 800a624:	2b02      	cmp	r3, #2
 800a626:	d106      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 800a628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d103      	bne.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 800a62e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a632:	637b      	str	r3, [r7, #52]	@ 0x34
 800a634:	e012      	b.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800a636:	4b54      	ldr	r3, [pc, #336]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a63c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a640:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a644:	d106      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 800a646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a648:	2b08      	cmp	r3, #8
 800a64a:	d103      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 800a64c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a650:	637b      	str	r3, [r7, #52]	@ 0x34
 800a652:	e003      	b.n	800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 800a654:	2300      	movs	r3, #0
 800a656:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800a658:	f001 b945 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a65c:	f001 b943 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a660:	4b49      	ldr	r3, [pc, #292]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a662:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a666:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a66a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d104      	bne.n	800a67c <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a672:	f7fc f9dd 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 800a676:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a678:	f001 b935 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800a67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a682:	d108      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a684:	f107 0308 	add.w	r3, r7, #8
 800a688:	4618      	mov	r0, r3
 800a68a:	f7fe fc75 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a692:	f001 b928 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a696:	4b3c      	ldr	r3, [pc, #240]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 0302 	and.w	r3, r3, #2
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d10d      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 800a6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6a8:	d109      	bne.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a6aa:	4b37      	ldr	r3, [pc, #220]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	08db      	lsrs	r3, r3, #3
 800a6b0:	f003 0303 	and.w	r3, r3, #3
 800a6b4:	4a35      	ldr	r2, [pc, #212]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a6b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6bc:	e011      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800a6be:	4b32      	ldr	r3, [pc, #200]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a6c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a6ca:	d106      	bne.n	800a6da <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a6d2:	d102      	bne.n	800a6da <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 800a6d4:	4b2e      	ldr	r3, [pc, #184]	@ (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a6d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6d8:	e003      	b.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a6de:	f001 b902 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a6e2:	f001 b900 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800a6e6:	4b28      	ldr	r3, [pc, #160]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a6e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a6ec:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800a6f0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d104      	bne.n	800a702 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a6f8:	f7fc f99a 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 800a6fc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 800a6fe:	f001 b8f2 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800a702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a704:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a708:	d108      	bne.n	800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a70a:	f107 0308 	add.w	r3, r7, #8
 800a70e:	4618      	mov	r0, r3
 800a710:	f7fe fc32 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a718:	f001 b8e5 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800a71c:	4b1a      	ldr	r3, [pc, #104]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0302 	and.w	r3, r3, #2
 800a724:	2b02      	cmp	r3, #2
 800a726:	d10d      	bne.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 800a728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800a72e:	d109      	bne.n	800a744 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a730:	4b15      	ldr	r3, [pc, #84]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	08db      	lsrs	r3, r3, #3
 800a736:	f003 0303 	and.w	r3, r3, #3
 800a73a:	4a14      	ldr	r2, [pc, #80]	@ (800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800a73c:	fa22 f303 	lsr.w	r3, r2, r3
 800a740:	637b      	str	r3, [r7, #52]	@ 0x34
 800a742:	e011      	b.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 800a744:	4b10      	ldr	r3, [pc, #64]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a74c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a750:	d106      	bne.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 800a752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a754:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800a758:	d102      	bne.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 800a75a:	4b0d      	ldr	r3, [pc, #52]	@ (800a790 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800a75c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a75e:	e003      	b.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 800a760:	2300      	movs	r3, #0
 800a762:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a764:	f001 b8bf 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a768:	f001 b8bd 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a76c:	4b06      	ldr	r3, [pc, #24]	@ (800a788 <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800a76e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a772:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800a776:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800a778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10c      	bne.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a77e:	f7fc f983 	bl	8006a88 <HAL_RCC_GetPCLK3Freq>
 800a782:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 800a784:	f001 b8af 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a788:	44020c00 	.word	0x44020c00
 800a78c:	03d09000 	.word	0x03d09000
 800a790:	003d0900 	.word	0x003d0900
 800a794:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800a798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a79e:	d108      	bne.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7a0:	f107 0308 	add.w	r3, r7, #8
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fe fbe7 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7ae:	f001 b89a 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800a7b2:	4b9f      	ldr	r3, [pc, #636]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 0302 	and.w	r3, r3, #2
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d10d      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 800a7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a7c4:	d109      	bne.n	800a7da <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a7c6:	4b9a      	ldr	r3, [pc, #616]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	08db      	lsrs	r3, r3, #3
 800a7cc:	f003 0303 	and.w	r3, r3, #3
 800a7d0:	4a98      	ldr	r2, [pc, #608]	@ (800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a7d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7d8:	e011      	b.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800a7da:	4b95      	ldr	r3, [pc, #596]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7e6:	d106      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a7ee:	d102      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 800a7f0:	4b91      	ldr	r3, [pc, #580]	@ (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a7f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a7f4:	e003      	b.n	800a7fe <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a7fa:	f001 b874 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a7fe:	f001 b872 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800a802:	4b8b      	ldr	r3, [pc, #556]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a804:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a808:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800a80c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800a80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a810:	2b00      	cmp	r3, #0
 800a812:	d104      	bne.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a814:	f7fc f938 	bl	8006a88 <HAL_RCC_GetPCLK3Freq>
 800a818:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 800a81a:	f001 b864 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 800a81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a820:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a824:	d108      	bne.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a826:	f107 0308 	add.w	r3, r7, #8
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fe fba4 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a834:	f001 b857 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800a838:	4b7d      	ldr	r3, [pc, #500]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 0302 	and.w	r3, r3, #2
 800a840:	2b02      	cmp	r3, #2
 800a842:	d10d      	bne.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 800a844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a846:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a84a:	d109      	bne.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a84c:	4b78      	ldr	r3, [pc, #480]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	08db      	lsrs	r3, r3, #3
 800a852:	f003 0303 	and.w	r3, r3, #3
 800a856:	4a77      	ldr	r2, [pc, #476]	@ (800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a858:	fa22 f303 	lsr.w	r3, r2, r3
 800a85c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a85e:	e011      	b.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800a860:	4b73      	ldr	r3, [pc, #460]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a868:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a86c:	d106      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 800a86e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a870:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800a874:	d102      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 800a876:	4b70      	ldr	r3, [pc, #448]	@ (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a878:	637b      	str	r3, [r7, #52]	@ 0x34
 800a87a:	e003      	b.n	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 800a87c:	2300      	movs	r3, #0
 800a87e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a880:	f001 b831 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a884:	f001 b82f 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 800a888:	4b69      	ldr	r3, [pc, #420]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a88a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a88e:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800a892:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 800a894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a896:	2b00      	cmp	r3, #0
 800a898:	d104      	bne.n	800a8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800a89a:	f7fc f8c9 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 800a89e:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 800a8a0:	f001 b821 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8aa:	d108      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ac:	f107 0308 	add.w	r3, r7, #8
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe fb61 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a8ba:	f001 b814 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 800a8be:	4b5c      	ldr	r3, [pc, #368]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f003 0302 	and.w	r3, r3, #2
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d10e      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 800a8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8d0:	d10a      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a8d2:	4b57      	ldr	r3, [pc, #348]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	08db      	lsrs	r3, r3, #3
 800a8d8:	f003 0303 	and.w	r3, r3, #3
 800a8dc:	4a55      	ldr	r2, [pc, #340]	@ (800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a8de:	fa22 f303 	lsr.w	r3, r2, r3
 800a8e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a8e4:	f000 bfff 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a8ec:	f000 bffb 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800a8f0:	4b4f      	ldr	r3, [pc, #316]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a8f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a8f6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a8fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fe:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a902:	d056      	beq.n	800a9b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 800a904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a906:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800a90a:	f200 808b 	bhi.w	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a90e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a914:	d03e      	beq.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 800a916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a91c:	f200 8082 	bhi.w	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a922:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a926:	d027      	beq.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 800a928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a92e:	d879      	bhi.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a932:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a936:	d017      	beq.n	800a968 <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 800a938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a93e:	d871      	bhi.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 800a940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a942:	2b00      	cmp	r3, #0
 800a944:	d004      	beq.n	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 800a946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a948:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a94c:	d004      	beq.n	800a958 <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 800a94e:	e069      	b.n	800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a950:	f7fc f89a 	bl	8006a88 <HAL_RCC_GetPCLK3Freq>
 800a954:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a956:	e068      	b.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a958:	f107 0314 	add.w	r3, r7, #20
 800a95c:	4618      	mov	r0, r3
 800a95e:	f7fe f99f 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a966:	e060      	b.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a968:	f107 0308 	add.w	r3, r7, #8
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fe fb03 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a976:	e058      	b.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a978:	4b2d      	ldr	r3, [pc, #180]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a97a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a97e:	f003 0302 	and.w	r3, r3, #2
 800a982:	2b02      	cmp	r3, #2
 800a984:	d103      	bne.n	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 800a986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a98a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a98c:	e04d      	b.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a992:	e04a      	b.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a994:	4b26      	ldr	r3, [pc, #152]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a996:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a99a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a99e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a9a2:	d103      	bne.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 800a9a4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a9a8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a9aa:	e03e      	b.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a9b0:	e03b      	b.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9b2:	4b1f      	ldr	r3, [pc, #124]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a9b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a9b8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a9bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9be:	4b1c      	ldr	r3, [pc, #112]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 0302 	and.w	r3, r3, #2
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d10c      	bne.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 800a9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d109      	bne.n	800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9d0:	4b17      	ldr	r3, [pc, #92]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	08db      	lsrs	r3, r3, #3
 800a9d6:	f003 0303 	and.w	r3, r3, #3
 800a9da:	4a16      	ldr	r2, [pc, #88]	@ (800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 800a9dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9e2:	e01e      	b.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9e4:	4b12      	ldr	r3, [pc, #72]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9f0:	d106      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 800a9f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9f8:	d102      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a9fa:	4b0f      	ldr	r3, [pc, #60]	@ (800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 800a9fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9fe:	e010      	b.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa00:	4b0b      	ldr	r3, [pc, #44]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa08:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa0c:	d106      	bne.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 800aa0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa14:	d102      	bne.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800aa16:	4b09      	ldr	r3, [pc, #36]	@ (800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 800aa18:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa1a:	e002      	b.n	800aa22 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800aa20:	e003      	b.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 800aa22:	e002      	b.n	800aa2a <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 800aa24:	2300      	movs	r3, #0
 800aa26:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aa28:	bf00      	nop
          }
        }
        break;
 800aa2a:	f000 bf5c 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aa2e:	bf00      	nop
 800aa30:	44020c00 	.word	0x44020c00
 800aa34:	03d09000 	.word	0x03d09000
 800aa38:	003d0900 	.word	0x003d0900
 800aa3c:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800aa40:	4b9e      	ldr	r3, [pc, #632]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aa42:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800aa46:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800aa4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800aa52:	d056      	beq.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 800aa54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa56:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800aa5a:	f200 808b 	bhi.w	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa64:	d03e      	beq.n	800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 800aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa6c:	f200 8082 	bhi.w	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800aa70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa76:	d027      	beq.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 800aa78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800aa7e:	d879      	bhi.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800aa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa86:	d017      	beq.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 800aa88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa8e:	d871      	bhi.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 800aa90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d004      	beq.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 800aa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa9c:	d004      	beq.n	800aaa8 <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 800aa9e:	e069      	b.n	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 800aaa0:	f7fb ffc6 	bl	8006a30 <HAL_RCC_GetPCLK1Freq>
 800aaa4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800aaa6:	e068      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaa8:	f107 0314 	add.w	r3, r7, #20
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7fe f8f7 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aab6:	e060      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aab8:	f107 0308 	add.w	r3, r7, #8
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fe fa5b 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aac6:	e058      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800aac8:	4b7c      	ldr	r3, [pc, #496]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aaca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aace:	f003 0302 	and.w	r3, r3, #2
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d103      	bne.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 800aad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aada:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aadc:	e04d      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800aade:	2300      	movs	r3, #0
 800aae0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aae2:	e04a      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800aae4:	4b75      	ldr	r3, [pc, #468]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800aae6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aaea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aaee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aaf2:	d103      	bne.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 800aaf4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aaf8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aafa:	e03e      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 800aafc:	2300      	movs	r3, #0
 800aafe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab00:	e03b      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab02:	4b6e      	ldr	r3, [pc, #440]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ab08:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ab0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab0e:	4b6b      	ldr	r3, [pc, #428]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f003 0302 	and.w	r3, r3, #2
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d10c      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 800ab1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d109      	bne.n	800ab34 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab20:	4b66      	ldr	r3, [pc, #408]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	08db      	lsrs	r3, r3, #3
 800ab26:	f003 0303 	and.w	r3, r3, #3
 800ab2a:	4a65      	ldr	r2, [pc, #404]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800ab2c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab30:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab32:	e01e      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab34:	4b61      	ldr	r3, [pc, #388]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab40:	d106      	bne.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 800ab42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab48:	d102      	bne.n	800ab50 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ab4a:	4b5e      	ldr	r3, [pc, #376]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800ab4c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab4e:	e010      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab50:	4b5a      	ldr	r3, [pc, #360]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab5c:	d106      	bne.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 800ab5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab64:	d102      	bne.n	800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800ab66:	4b58      	ldr	r3, [pc, #352]	@ (800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800ab68:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab6a:	e002      	b.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800ab70:	e003      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 800ab72:	e002      	b.n	800ab7a <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 800ab74:	2300      	movs	r3, #0
 800ab76:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab78:	bf00      	nop
          }
        }
        break;
 800ab7a:	f000 beb4 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 800ab7e:	4b4f      	ldr	r3, [pc, #316]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ab80:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ab84:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ab88:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab90:	d056      	beq.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 800ab92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ab98:	f200 808b 	bhi.w	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800ab9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aba2:	d03e      	beq.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 800aba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800abaa:	f200 8082 	bhi.w	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800abae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800abb4:	d027      	beq.n	800ac06 <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 800abb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800abbc:	d879      	bhi.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800abbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abc4:	d017      	beq.n	800abf6 <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800abc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abcc:	d871      	bhi.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d004      	beq.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800abd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abda:	d004      	beq.n	800abe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800abdc:	e069      	b.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800abde:	f7fb ff53 	bl	8006a88 <HAL_RCC_GetPCLK3Freq>
 800abe2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800abe4:	e068      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abe6:	f107 0314 	add.w	r3, r7, #20
 800abea:	4618      	mov	r0, r3
 800abec:	f7fe f858 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800abf4:	e060      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abf6:	f107 0308 	add.w	r3, r7, #8
 800abfa:	4618      	mov	r0, r3
 800abfc:	f7fe f9bc 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac04:	e058      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ac06:	4b2d      	ldr	r3, [pc, #180]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac0c:	f003 0302 	and.w	r3, r3, #2
 800ac10:	2b02      	cmp	r3, #2
 800ac12:	d103      	bne.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800ac14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac18:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ac1a:	e04d      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac20:	e04a      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ac22:	4b26      	ldr	r3, [pc, #152]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac30:	d103      	bne.n	800ac3a <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800ac32:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ac36:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ac38:	e03e      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ac3e:	e03b      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac40:	4b1e      	ldr	r3, [pc, #120]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac46:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ac4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac4c:	4b1b      	ldr	r3, [pc, #108]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f003 0302 	and.w	r3, r3, #2
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d10c      	bne.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800ac58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d109      	bne.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ac5e:	4b17      	ldr	r3, [pc, #92]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	08db      	lsrs	r3, r3, #3
 800ac64:	f003 0303 	and.w	r3, r3, #3
 800ac68:	4a15      	ldr	r2, [pc, #84]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800ac6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac70:	e01e      	b.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac72:	4b12      	ldr	r3, [pc, #72]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac7e:	d106      	bne.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800ac80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac86:	d102      	bne.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ac88:	4b0e      	ldr	r3, [pc, #56]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800ac8a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac8c:	e010      	b.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac8e:	4b0b      	ldr	r3, [pc, #44]	@ (800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ac9a:	d106      	bne.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800ac9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aca2:	d102      	bne.n	800acaa <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800aca4:	4b08      	ldr	r3, [pc, #32]	@ (800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800aca6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aca8:	e002      	b.n	800acb0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800acaa:	2300      	movs	r3, #0
 800acac:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800acae:	e003      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800acb0:	e002      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800acb2:	2300      	movs	r3, #0
 800acb4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800acb6:	bf00      	nop
          }
        }
        break;
 800acb8:	f000 be15 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800acbc:	44020c00 	.word	0x44020c00
 800acc0:	03d09000 	.word	0x03d09000
 800acc4:	003d0900 	.word	0x003d0900
 800acc8:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800accc:	4b9e      	ldr	r3, [pc, #632]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800acce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800acd2:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800acd6:	633b      	str	r3, [r7, #48]	@ 0x30
 800acd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acda:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800acde:	d056      	beq.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800ace0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ace2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800ace6:	f200 808b 	bhi.w	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800acea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800acf0:	d03e      	beq.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800acf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800acf8:	f200 8082 	bhi.w	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800acfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acfe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad02:	d027      	beq.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800ad04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad06:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ad0a:	d879      	bhi.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad12:	d017      	beq.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800ad14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad1a:	d871      	bhi.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d004      	beq.n	800ad2c <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800ad22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad28:	d004      	beq.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800ad2a:	e069      	b.n	800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800ad2c:	f7fb feac 	bl	8006a88 <HAL_RCC_GetPCLK3Freq>
 800ad30:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ad32:	e068      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad34:	f107 0314 	add.w	r3, r7, #20
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f7fd ffb1 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad42:	e060      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad44:	f107 0308 	add.w	r3, r7, #8
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f7fe f915 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad52:	e058      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ad54:	4b7c      	ldr	r3, [pc, #496]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ad56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad5a:	f003 0302 	and.w	r3, r3, #2
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d103      	bne.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800ad62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ad66:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ad68:	e04d      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad6e:	e04a      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800ad70:	4b75      	ldr	r3, [pc, #468]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ad72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ad76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad7e:	d103      	bne.n	800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800ad80:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ad84:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800ad86:	e03e      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800ad88:	2300      	movs	r3, #0
 800ad8a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ad8c:	e03b      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ad8e:	4b6e      	ldr	r3, [pc, #440]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ad90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ad94:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ad98:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad9a:	4b6b      	ldr	r3, [pc, #428]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 0302 	and.w	r3, r3, #2
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d10c      	bne.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800ada6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d109      	bne.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800adac:	4b66      	ldr	r3, [pc, #408]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	08db      	lsrs	r3, r3, #3
 800adb2:	f003 0303 	and.w	r3, r3, #3
 800adb6:	4a65      	ldr	r2, [pc, #404]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800adb8:	fa22 f303 	lsr.w	r3, r2, r3
 800adbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800adbe:	e01e      	b.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adc0:	4b61      	ldr	r3, [pc, #388]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800adc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800adcc:	d106      	bne.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800adce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800add4:	d102      	bne.n	800addc <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800add6:	4b5e      	ldr	r3, [pc, #376]	@ (800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800add8:	637b      	str	r3, [r7, #52]	@ 0x34
 800adda:	e010      	b.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800addc:	4b5a      	ldr	r3, [pc, #360]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ade4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ade8:	d106      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800adea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800adf0:	d102      	bne.n	800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800adf2:	4b58      	ldr	r3, [pc, #352]	@ (800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800adf4:	637b      	str	r3, [r7, #52]	@ 0x34
 800adf6:	e002      	b.n	800adfe <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800adf8:	2300      	movs	r3, #0
 800adfa:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800adfc:	e003      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800adfe:	e002      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800ae00:	2300      	movs	r3, #0
 800ae02:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae04:	bf00      	nop
          }
        }
        break;
 800ae06:	f000 bd6e 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800ae0a:	4b4f      	ldr	r3, [pc, #316]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ae0c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800ae10:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ae14:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae18:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ae1c:	d056      	beq.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae20:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800ae24:	f200 808b 	bhi.w	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800ae28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae2a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ae2e:	d03e      	beq.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800ae30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ae36:	f200 8082 	bhi.w	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ae40:	d027      	beq.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800ae42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae44:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800ae48:	d879      	bhi.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae50:	d017      	beq.n	800ae82 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800ae52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ae58:	d871      	bhi.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d004      	beq.n	800ae6a <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800ae60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae66:	d004      	beq.n	800ae72 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800ae68:	e069      	b.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800ae6a:	f7fb fe0d 	bl	8006a88 <HAL_RCC_GetPCLK3Freq>
 800ae6e:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ae70:	e068      	b.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae72:	f107 0314 	add.w	r3, r7, #20
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fd ff12 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae80:	e060      	b.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae82:	f107 0308 	add.w	r3, r7, #8
 800ae86:	4618      	mov	r0, r3
 800ae88:	f7fe f876 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ae90:	e058      	b.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800ae92:	4b2d      	ldr	r3, [pc, #180]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800ae94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ae98:	f003 0302 	and.w	r3, r3, #2
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d103      	bne.n	800aea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800aea0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aea4:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aea6:	e04d      	b.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aeac:	e04a      	b.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800aeae:	4b26      	ldr	r3, [pc, #152]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800aeb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800aeb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aeb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aebc:	d103      	bne.n	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800aebe:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800aec2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aec4:	e03e      	b.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800aec6:	2300      	movs	r3, #0
 800aec8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800aeca:	e03b      	b.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aecc:	4b1e      	ldr	r3, [pc, #120]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800aece:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800aed2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800aed6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aed8:	4b1b      	ldr	r3, [pc, #108]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 0302 	and.w	r3, r3, #2
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d10c      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800aee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d109      	bne.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aeea:	4b17      	ldr	r3, [pc, #92]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	08db      	lsrs	r3, r3, #3
 800aef0:	f003 0303 	and.w	r3, r3, #3
 800aef4:	4a15      	ldr	r2, [pc, #84]	@ (800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800aef6:	fa22 f303 	lsr.w	r3, r2, r3
 800aefa:	637b      	str	r3, [r7, #52]	@ 0x34
 800aefc:	e01e      	b.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aefe:	4b12      	ldr	r3, [pc, #72]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800af06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af0a:	d106      	bne.n	800af1a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800af0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af12:	d102      	bne.n	800af1a <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800af14:	4b0e      	ldr	r3, [pc, #56]	@ (800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800af16:	637b      	str	r3, [r7, #52]	@ 0x34
 800af18:	e010      	b.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af1a:	4b0b      	ldr	r3, [pc, #44]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af26:	d106      	bne.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800af28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800af2e:	d102      	bne.n	800af36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800af30:	4b08      	ldr	r3, [pc, #32]	@ (800af54 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800af32:	637b      	str	r3, [r7, #52]	@ 0x34
 800af34:	e002      	b.n	800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800af3a:	e003      	b.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800af3c:	e002      	b.n	800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800af3e:	2300      	movs	r3, #0
 800af40:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800af42:	bf00      	nop
          }
        }
        break;
 800af44:	f000 bccf 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800af48:	44020c00 	.word	0x44020c00
 800af4c:	03d09000 	.word	0x03d09000
 800af50:	003d0900 	.word	0x003d0900
 800af54:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800af58:	4b9e      	ldr	r3, [pc, #632]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800af5a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800af5e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800af62:	633b      	str	r3, [r7, #48]	@ 0x30
 800af64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af6a:	d056      	beq.n	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800af6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800af72:	f200 808b 	bhi.w	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800af76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af7c:	d03e      	beq.n	800affc <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af84:	f200 8082 	bhi.w	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800af88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af8e:	d027      	beq.n	800afe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800af90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af92:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af96:	d879      	bhi.n	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800af98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800af9e:	d017      	beq.n	800afd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800afa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afa6:	d871      	bhi.n	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800afa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d004      	beq.n	800afb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800afae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800afb4:	d004      	beq.n	800afc0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800afb6:	e069      	b.n	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800afb8:	f7fb fd66 	bl	8006a88 <HAL_RCC_GetPCLK3Freq>
 800afbc:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800afbe:	e068      	b.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800afc0:	f107 0314 	add.w	r3, r7, #20
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7fd fe6b 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800afce:	e060      	b.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afd0:	f107 0308 	add.w	r3, r7, #8
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7fd ffcf 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800afde:	e058      	b.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800afe0:	4b7c      	ldr	r3, [pc, #496]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800afe2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800afe6:	f003 0302 	and.w	r3, r3, #2
 800afea:	2b02      	cmp	r3, #2
 800afec:	d103      	bne.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800afee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aff2:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800aff4:	e04d      	b.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800aff6:	2300      	movs	r3, #0
 800aff8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800affa:	e04a      	b.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800affc:	4b75      	ldr	r3, [pc, #468]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800affe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b002:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b006:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b00a:	d103      	bne.n	800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800b00c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b010:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800b012:	e03e      	b.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800b014:	2300      	movs	r3, #0
 800b016:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b018:	e03b      	b.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b01a:	4b6e      	ldr	r3, [pc, #440]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b01c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b020:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b024:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b026:	4b6b      	ldr	r3, [pc, #428]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 0302 	and.w	r3, r3, #2
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d10c      	bne.n	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800b032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b034:	2b00      	cmp	r3, #0
 800b036:	d109      	bne.n	800b04c <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b038:	4b66      	ldr	r3, [pc, #408]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	08db      	lsrs	r3, r3, #3
 800b03e:	f003 0303 	and.w	r3, r3, #3
 800b042:	4a65      	ldr	r2, [pc, #404]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b044:	fa22 f303 	lsr.w	r3, r2, r3
 800b048:	637b      	str	r3, [r7, #52]	@ 0x34
 800b04a:	e01e      	b.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b04c:	4b61      	ldr	r3, [pc, #388]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b054:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b058:	d106      	bne.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800b05a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b05c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b060:	d102      	bne.n	800b068 <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b062:	4b5e      	ldr	r3, [pc, #376]	@ (800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b064:	637b      	str	r3, [r7, #52]	@ 0x34
 800b066:	e010      	b.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b068:	4b5a      	ldr	r3, [pc, #360]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b070:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b074:	d106      	bne.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800b076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b078:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b07c:	d102      	bne.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b07e:	4b58      	ldr	r3, [pc, #352]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b080:	637b      	str	r3, [r7, #52]	@ 0x34
 800b082:	e002      	b.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b088:	e003      	b.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800b08a:	e002      	b.n	800b092 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800b08c:	2300      	movs	r3, #0
 800b08e:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b090:	bf00      	nop
          }
        }
        break;
 800b092:	f000 bc28 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b096:	4b4f      	ldr	r3, [pc, #316]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b09c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b0a0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800b0a2:	4b4c      	ldr	r3, [pc, #304]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b0aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b0ae:	d106      	bne.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d103      	bne.n	800b0be <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800b0b6:	4b4a      	ldr	r3, [pc, #296]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b0b8:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800b0ba:	f000 bc14 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800b0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0c4:	d108      	bne.n	800b0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0c6:	f107 0320 	add.w	r3, r7, #32
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7fd fc7c 	bl	80089c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0d4:	f000 bc07 	b.w	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0de:	d107      	bne.n	800b0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0e0:	f107 0314 	add.w	r3, r7, #20
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f7fd fddb 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0ee:	e3fa      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b0f4:	e3f7      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800b0f6:	4b37      	ldr	r3, [pc, #220]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b0f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b0fc:	f003 0307 	and.w	r3, r3, #7
 800b100:	633b      	str	r3, [r7, #48]	@ 0x30
 800b102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b104:	2b04      	cmp	r3, #4
 800b106:	d861      	bhi.n	800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800b108:	a201      	add	r2, pc, #4	@ (adr r2, 800b110 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800b10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10e:	bf00      	nop
 800b110:	0800b125 	.word	0x0800b125
 800b114:	0800b135 	.word	0x0800b135
 800b118:	0800b145 	.word	0x0800b145
 800b11c:	0800b155 	.word	0x0800b155
 800b120:	0800b15b 	.word	0x0800b15b
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b124:	f107 0320 	add.w	r3, r7, #32
 800b128:	4618      	mov	r0, r3
 800b12a:	f7fd fc4d 	bl	80089c8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b130:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b132:	e04e      	b.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b134:	f107 0314 	add.w	r3, r7, #20
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fd fdb1 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b142:	e046      	b.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b144:	f107 0308 	add.w	r3, r7, #8
 800b148:	4618      	mov	r0, r3
 800b14a:	f7fd ff15 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b152:	e03e      	b.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b154:	4b23      	ldr	r3, [pc, #140]	@ (800b1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800b156:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b158:	e03b      	b.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b15a:	4b1e      	ldr	r3, [pc, #120]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b15c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b160:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b164:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b166:	4b1b      	ldr	r3, [pc, #108]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 0302 	and.w	r3, r3, #2
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d10c      	bne.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800b172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b174:	2b00      	cmp	r3, #0
 800b176:	d109      	bne.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b178:	4b16      	ldr	r3, [pc, #88]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	08db      	lsrs	r3, r3, #3
 800b17e:	f003 0303 	and.w	r3, r3, #3
 800b182:	4a15      	ldr	r2, [pc, #84]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800b184:	fa22 f303 	lsr.w	r3, r2, r3
 800b188:	637b      	str	r3, [r7, #52]	@ 0x34
 800b18a:	e01e      	b.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b18c:	4b11      	ldr	r3, [pc, #68]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b198:	d106      	bne.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800b19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b19c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1a0:	d102      	bne.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b1a2:	4b0e      	ldr	r3, [pc, #56]	@ (800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800b1a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1a6:	e010      	b.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1b4:	d106      	bne.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800b1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1bc:	d102      	bne.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b1be:	4b08      	ldr	r3, [pc, #32]	@ (800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800b1c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b1c2:	e002      	b.n	800b1ca <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b1c8:	e003      	b.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800b1ca:	e002      	b.n	800b1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800b1cc:	2300      	movs	r3, #0
 800b1ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b1d0:	bf00      	nop
          }
        }
        break;
 800b1d2:	e388      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b1d4:	44020c00 	.word	0x44020c00
 800b1d8:	03d09000 	.word	0x03d09000
 800b1dc:	003d0900 	.word	0x003d0900
 800b1e0:	007a1200 	.word	0x007a1200
 800b1e4:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800b1e8:	4ba9      	ldr	r3, [pc, #676]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b1ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b1ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b1f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f6:	2b20      	cmp	r3, #32
 800b1f8:	f200 809a 	bhi.w	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800b1fc:	a201      	add	r2, pc, #4	@ (adr r2, 800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800b1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b202:	bf00      	nop
 800b204:	0800b289 	.word	0x0800b289
 800b208:	0800b331 	.word	0x0800b331
 800b20c:	0800b331 	.word	0x0800b331
 800b210:	0800b331 	.word	0x0800b331
 800b214:	0800b331 	.word	0x0800b331
 800b218:	0800b331 	.word	0x0800b331
 800b21c:	0800b331 	.word	0x0800b331
 800b220:	0800b331 	.word	0x0800b331
 800b224:	0800b299 	.word	0x0800b299
 800b228:	0800b331 	.word	0x0800b331
 800b22c:	0800b331 	.word	0x0800b331
 800b230:	0800b331 	.word	0x0800b331
 800b234:	0800b331 	.word	0x0800b331
 800b238:	0800b331 	.word	0x0800b331
 800b23c:	0800b331 	.word	0x0800b331
 800b240:	0800b331 	.word	0x0800b331
 800b244:	0800b2a9 	.word	0x0800b2a9
 800b248:	0800b331 	.word	0x0800b331
 800b24c:	0800b331 	.word	0x0800b331
 800b250:	0800b331 	.word	0x0800b331
 800b254:	0800b331 	.word	0x0800b331
 800b258:	0800b331 	.word	0x0800b331
 800b25c:	0800b331 	.word	0x0800b331
 800b260:	0800b331 	.word	0x0800b331
 800b264:	0800b2b9 	.word	0x0800b2b9
 800b268:	0800b331 	.word	0x0800b331
 800b26c:	0800b331 	.word	0x0800b331
 800b270:	0800b331 	.word	0x0800b331
 800b274:	0800b331 	.word	0x0800b331
 800b278:	0800b331 	.word	0x0800b331
 800b27c:	0800b331 	.word	0x0800b331
 800b280:	0800b331 	.word	0x0800b331
 800b284:	0800b2bf 	.word	0x0800b2bf
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b288:	f107 0320 	add.w	r3, r7, #32
 800b28c:	4618      	mov	r0, r3
 800b28e:	f7fd fb9b 	bl	80089c8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b294:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b296:	e04e      	b.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b298:	f107 0314 	add.w	r3, r7, #20
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fd fcff 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2a6:	e046      	b.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2a8:	f107 0308 	add.w	r3, r7, #8
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7fd fe63 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2b6:	e03e      	b.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b2b8:	4b76      	ldr	r3, [pc, #472]	@ (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b2ba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b2bc:	e03b      	b.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2be:	4b74      	ldr	r3, [pc, #464]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b2c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b2c4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b2c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2ca:	4b71      	ldr	r3, [pc, #452]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 0302 	and.w	r3, r3, #2
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d10c      	bne.n	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800b2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d109      	bne.n	800b2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b2dc:	4b6c      	ldr	r3, [pc, #432]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	08db      	lsrs	r3, r3, #3
 800b2e2:	f003 0303 	and.w	r3, r3, #3
 800b2e6:	4a6c      	ldr	r2, [pc, #432]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b2e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b2ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2ee:	e01e      	b.n	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2f0:	4b67      	ldr	r3, [pc, #412]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b2f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2fc:	d106      	bne.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800b2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b304:	d102      	bne.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b306:	4b65      	ldr	r3, [pc, #404]	@ (800b49c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b308:	637b      	str	r3, [r7, #52]	@ 0x34
 800b30a:	e010      	b.n	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b30c:	4b60      	ldr	r3, [pc, #384]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b314:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b318:	d106      	bne.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800b31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b31c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b320:	d102      	bne.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b322:	4b5f      	ldr	r3, [pc, #380]	@ (800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b324:	637b      	str	r3, [r7, #52]	@ 0x34
 800b326:	e002      	b.n	800b32e <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b328:	2300      	movs	r3, #0
 800b32a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b32c:	e003      	b.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800b32e:	e002      	b.n	800b336 <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800b330:	2300      	movs	r3, #0
 800b332:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b334:	bf00      	nop
          }
        }
        break;
 800b336:	e2d6      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800b338:	4b55      	ldr	r3, [pc, #340]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b33a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b33e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b342:	633b      	str	r3, [r7, #48]	@ 0x30
 800b344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b34a:	d031      	beq.n	800b3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800b34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b352:	d866      	bhi.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b356:	2bc0      	cmp	r3, #192	@ 0xc0
 800b358:	d027      	beq.n	800b3aa <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800b35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35c:	2bc0      	cmp	r3, #192	@ 0xc0
 800b35e:	d860      	bhi.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b362:	2b80      	cmp	r3, #128	@ 0x80
 800b364:	d019      	beq.n	800b39a <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800b366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b368:	2b80      	cmp	r3, #128	@ 0x80
 800b36a:	d85a      	bhi.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800b36c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d003      	beq.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800b372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b374:	2b40      	cmp	r3, #64	@ 0x40
 800b376:	d008      	beq.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800b378:	e053      	b.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b37a:	f107 0320 	add.w	r3, r7, #32
 800b37e:	4618      	mov	r0, r3
 800b380:	f7fd fb22 	bl	80089c8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b386:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b388:	e04e      	b.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b38a:	f107 0314 	add.w	r3, r7, #20
 800b38e:	4618      	mov	r0, r3
 800b390:	f7fd fc86 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b398:	e046      	b.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b39a:	f107 0308 	add.w	r3, r7, #8
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fd fdea 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b3a8:	e03e      	b.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800b3aa:	4b3a      	ldr	r3, [pc, #232]	@ (800b494 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800b3ac:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b3ae:	e03b      	b.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3b0:	4b37      	ldr	r3, [pc, #220]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b3b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b3b6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3bc:	4b34      	ldr	r3, [pc, #208]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 0302 	and.w	r3, r3, #2
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	d10c      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800b3c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d109      	bne.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b3ce:	4b30      	ldr	r3, [pc, #192]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	08db      	lsrs	r3, r3, #3
 800b3d4:	f003 0303 	and.w	r3, r3, #3
 800b3d8:	4a2f      	ldr	r2, [pc, #188]	@ (800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800b3da:	fa22 f303 	lsr.w	r3, r2, r3
 800b3de:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3e0:	e01e      	b.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b3e2:	4b2b      	ldr	r3, [pc, #172]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b3ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b3ee:	d106      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800b3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b3f6:	d102      	bne.n	800b3fe <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b3f8:	4b28      	ldr	r3, [pc, #160]	@ (800b49c <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800b3fa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3fc:	e010      	b.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b3fe:	4b24      	ldr	r3, [pc, #144]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b406:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b40a:	d106      	bne.n	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800b40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b412:	d102      	bne.n	800b41a <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b414:	4b22      	ldr	r3, [pc, #136]	@ (800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800b416:	637b      	str	r3, [r7, #52]	@ 0x34
 800b418:	e002      	b.n	800b420 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800b41a:	2300      	movs	r3, #0
 800b41c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b41e:	e003      	b.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800b420:	e002      	b.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b426:	bf00      	nop
          }
        }
        break;
 800b428:	e25d      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800b42a:	4b19      	ldr	r3, [pc, #100]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b42c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b430:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800b434:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800b436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d103      	bne.n	800b444 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b43c:	f7fb fb0e 	bl	8006a5c <HAL_RCC_GetPCLK2Freq>
 800b440:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b442:	e250      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800b444:	4b12      	ldr	r3, [pc, #72]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b44c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b450:	d10b      	bne.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800b452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b454:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b458:	d107      	bne.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b45a:	f107 0314 	add.w	r3, r7, #20
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fd fc1e 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	637b      	str	r3, [r7, #52]	@ 0x34
 800b468:	e04f      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800b46a:	4b09      	ldr	r3, [pc, #36]	@ (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b472:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b476:	d115      	bne.n	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800b478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b47e:	d111      	bne.n	800b4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b480:	f107 0308 	add.w	r3, r7, #8
 800b484:	4618      	mov	r0, r3
 800b486:	f7fd fd77 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b48e:	e03c      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800b490:	44020c00 	.word	0x44020c00
 800b494:	00bb8000 	.word	0x00bb8000
 800b498:	03d09000 	.word	0x03d09000
 800b49c:	003d0900 	.word	0x003d0900
 800b4a0:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800b4a4:	4b94      	ldr	r3, [pc, #592]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0302 	and.w	r3, r3, #2
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d10d      	bne.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800b4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b4b6:	d109      	bne.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b4b8:	4b8f      	ldr	r3, [pc, #572]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	08db      	lsrs	r3, r3, #3
 800b4be:	f003 0303 	and.w	r3, r3, #3
 800b4c2:	4a8e      	ldr	r2, [pc, #568]	@ (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b4c4:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4ca:	e01e      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800b4cc:	4b8a      	ldr	r3, [pc, #552]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b4d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b4d8:	d106      	bne.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800b4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b4e0:	d102      	bne.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800b4e2:	4b87      	ldr	r3, [pc, #540]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b4e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b4e6:	e010      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800b4e8:	4b83      	ldr	r3, [pc, #524]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b4f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b4f4:	d106      	bne.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b4fc:	d102      	bne.n	800b504 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800b4fe:	4b81      	ldr	r3, [pc, #516]	@ (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b500:	637b      	str	r3, [r7, #52]	@ 0x34
 800b502:	e002      	b.n	800b50a <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800b504:	2300      	movs	r3, #0
 800b506:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b508:	e1ed      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b50a:	e1ec      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800b50c:	4b7a      	ldr	r3, [pc, #488]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b50e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b512:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b516:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800b518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d103      	bne.n	800b526 <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800b51e:	f7fb fab3 	bl	8006a88 <HAL_RCC_GetPCLK3Freq>
 800b522:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b524:	e1df      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800b526:	4b74      	ldr	r3, [pc, #464]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b52e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b532:	d10b      	bne.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800b534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b53a:	d107      	bne.n	800b54c <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b53c:	f107 0314 	add.w	r3, r7, #20
 800b540:	4618      	mov	r0, r3
 800b542:	f7fd fbad 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b546:	69bb      	ldr	r3, [r7, #24]
 800b548:	637b      	str	r3, [r7, #52]	@ 0x34
 800b54a:	e045      	b.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800b54c:	4b6a      	ldr	r3, [pc, #424]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b554:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b558:	d10b      	bne.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800b55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b560:	d107      	bne.n	800b572 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b562:	f107 0308 	add.w	r3, r7, #8
 800b566:	4618      	mov	r0, r3
 800b568:	f7fd fd06 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b570:	e032      	b.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800b572:	4b61      	ldr	r3, [pc, #388]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f003 0302 	and.w	r3, r3, #2
 800b57a:	2b02      	cmp	r3, #2
 800b57c:	d10d      	bne.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800b57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b580:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b584:	d109      	bne.n	800b59a <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b586:	4b5c      	ldr	r3, [pc, #368]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	08db      	lsrs	r3, r3, #3
 800b58c:	f003 0303 	and.w	r3, r3, #3
 800b590:	4a5a      	ldr	r2, [pc, #360]	@ (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b592:	fa22 f303 	lsr.w	r3, r2, r3
 800b596:	637b      	str	r3, [r7, #52]	@ 0x34
 800b598:	e01e      	b.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800b59a:	4b57      	ldr	r3, [pc, #348]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b5a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b5a6:	d106      	bne.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800b5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5ae:	d102      	bne.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800b5b0:	4b53      	ldr	r3, [pc, #332]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b5b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5b4:	e010      	b.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800b5b6:	4b50      	ldr	r3, [pc, #320]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5c2:	d106      	bne.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c6:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800b5ca:	d102      	bne.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800b5cc:	4b4d      	ldr	r3, [pc, #308]	@ (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b5ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5d0:	e002      	b.n	800b5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b5d6:	e186      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b5d8:	e185      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b5da:	4b47      	ldr	r3, [pc, #284]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b5dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b5e0:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800b5e4:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800b5e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d103      	bne.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800b5ec:	f7fb fa36 	bl	8006a5c <HAL_RCC_GetPCLK2Freq>
 800b5f0:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800b5f2:	e178      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800b5f4:	4b40      	ldr	r3, [pc, #256]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b5fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b600:	d10b      	bne.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800b602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b608:	d107      	bne.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b60a:	f107 0314 	add.w	r3, r7, #20
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fd fb46 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	637b      	str	r3, [r7, #52]	@ 0x34
 800b618:	e045      	b.n	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800b61a:	4b37      	ldr	r3, [pc, #220]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b626:	d10b      	bne.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800b628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b62e:	d107      	bne.n	800b640 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b630:	f107 0308 	add.w	r3, r7, #8
 800b634:	4618      	mov	r0, r3
 800b636:	f7fd fc9f 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b63e:	e032      	b.n	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800b640:	4b2d      	ldr	r3, [pc, #180]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 0302 	and.w	r3, r3, #2
 800b648:	2b02      	cmp	r3, #2
 800b64a:	d10d      	bne.n	800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800b64c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b64e:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800b652:	d109      	bne.n	800b668 <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b654:	4b28      	ldr	r3, [pc, #160]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	08db      	lsrs	r3, r3, #3
 800b65a:	f003 0303 	and.w	r3, r3, #3
 800b65e:	4a27      	ldr	r2, [pc, #156]	@ (800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800b660:	fa22 f303 	lsr.w	r3, r2, r3
 800b664:	637b      	str	r3, [r7, #52]	@ 0x34
 800b666:	e01e      	b.n	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800b668:	4b23      	ldr	r3, [pc, #140]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b670:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b674:	d106      	bne.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800b676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b678:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b67c:	d102      	bne.n	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800b67e:	4b20      	ldr	r3, [pc, #128]	@ (800b700 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800b680:	637b      	str	r3, [r7, #52]	@ 0x34
 800b682:	e010      	b.n	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800b684:	4b1c      	ldr	r3, [pc, #112]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b68c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b690:	d106      	bne.n	800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800b692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b694:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800b698:	d102      	bne.n	800b6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800b69a:	4b1a      	ldr	r3, [pc, #104]	@ (800b704 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800b69c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b69e:	e002      	b.n	800b6a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b6a4:	e11f      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b6a6:	e11e      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800b6a8:	4b13      	ldr	r3, [pc, #76]	@ (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800b6aa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b6ae:	f003 0303 	and.w	r3, r3, #3
 800b6b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b6:	2b03      	cmp	r3, #3
 800b6b8:	d85f      	bhi.n	800b77a <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800b6ba:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800b6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c0:	0800b6d1 	.word	0x0800b6d1
 800b6c4:	0800b6d9 	.word	0x0800b6d9
 800b6c8:	0800b6e9 	.word	0x0800b6e9
 800b6cc:	0800b709 	.word	0x0800b709

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800b6d0:	f7fb f992 	bl	80069f8 <HAL_RCC_GetHCLKFreq>
 800b6d4:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800b6d6:	e053      	b.n	800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6d8:	f107 0320 	add.w	r3, r7, #32
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f7fd f973 	bl	80089c8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6e6:	e04b      	b.n	800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6e8:	f107 0314 	add.w	r3, r7, #20
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fd fad7 	bl	8008ca0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b6f6:	e043      	b.n	800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800b6f8:	44020c00 	.word	0x44020c00
 800b6fc:	03d09000 	.word	0x03d09000
 800b700:	003d0900 	.word	0x003d0900
 800b704:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b708:	4b79      	ldr	r3, [pc, #484]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b70a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b70e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800b712:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b714:	4b76      	ldr	r3, [pc, #472]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f003 0302 	and.w	r3, r3, #2
 800b71c:	2b02      	cmp	r3, #2
 800b71e:	d10c      	bne.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800b720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b722:	2b00      	cmp	r3, #0
 800b724:	d109      	bne.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800b726:	4b72      	ldr	r3, [pc, #456]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	08db      	lsrs	r3, r3, #3
 800b72c:	f003 0303 	and.w	r3, r3, #3
 800b730:	4a70      	ldr	r2, [pc, #448]	@ (800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800b732:	fa22 f303 	lsr.w	r3, r2, r3
 800b736:	637b      	str	r3, [r7, #52]	@ 0x34
 800b738:	e01e      	b.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b73a:	4b6d      	ldr	r3, [pc, #436]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b742:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b746:	d106      	bne.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800b748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b74a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b74e:	d102      	bne.n	800b756 <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800b750:	4b69      	ldr	r3, [pc, #420]	@ (800b8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800b752:	637b      	str	r3, [r7, #52]	@ 0x34
 800b754:	e010      	b.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b756:	4b66      	ldr	r3, [pc, #408]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b75e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b762:	d106      	bne.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800b764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b766:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b76a:	d102      	bne.n	800b772 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800b76c:	4b63      	ldr	r3, [pc, #396]	@ (800b8fc <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800b76e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b770:	e002      	b.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800b772:	2300      	movs	r3, #0
 800b774:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800b776:	e003      	b.n	800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800b778:	e002      	b.n	800b780 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800b77a:	2300      	movs	r3, #0
 800b77c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800b77e:	bf00      	nop
          }
        }
        break;
 800b780:	e0b1      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800b782:	4b5b      	ldr	r3, [pc, #364]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b784:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b788:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b78c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800b78e:	4b58      	ldr	r3, [pc, #352]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b790:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b794:	f003 0302 	and.w	r3, r3, #2
 800b798:	2b02      	cmp	r3, #2
 800b79a:	d106      	bne.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800b79c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d103      	bne.n	800b7aa <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800b7a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b7a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7a8:	e01f      	b.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800b7aa:	4b51      	ldr	r3, [pc, #324]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b7ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b7b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b7b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b7b8:	d106      	bne.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800b7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7bc:	2b40      	cmp	r3, #64	@ 0x40
 800b7be:	d103      	bne.n	800b7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800b7c0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b7c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7c6:	e010      	b.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800b7c8:	4b49      	ldr	r3, [pc, #292]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b7d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7d4:	d106      	bne.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d8:	2b80      	cmp	r3, #128	@ 0x80
 800b7da:	d103      	bne.n	800b7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800b7dc:	f248 0312 	movw	r3, #32786	@ 0x8012
 800b7e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7e2:	e002      	b.n	800b7ea <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b7e8:	e07d      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b7ea:	e07c      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800b7ec:	4b40      	ldr	r3, [pc, #256]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b7ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800b7f2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b7f6:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800b7f8:	4b3d      	ldr	r3, [pc, #244]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b800:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b804:	d105      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800b806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d102      	bne.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800b80c:	4b3c      	ldr	r3, [pc, #240]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800b80e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b810:	e031      	b.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800b812:	4b37      	ldr	r3, [pc, #220]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b81a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b81e:	d10a      	bne.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800b820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b822:	2b10      	cmp	r3, #16
 800b824:	d107      	bne.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b826:	f107 0320 	add.w	r3, r7, #32
 800b82a:	4618      	mov	r0, r3
 800b82c:	f7fd f8cc 	bl	80089c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b832:	637b      	str	r3, [r7, #52]	@ 0x34
 800b834:	e01f      	b.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800b836:	4b2e      	ldr	r3, [pc, #184]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b83c:	f003 0302 	and.w	r3, r3, #2
 800b840:	2b02      	cmp	r3, #2
 800b842:	d106      	bne.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800b844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b846:	2b20      	cmp	r3, #32
 800b848:	d103      	bne.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800b84a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b84e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b850:	e011      	b.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800b852:	4b27      	ldr	r3, [pc, #156]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b854:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800b858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b85c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b860:	d106      	bne.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800b862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b864:	2b30      	cmp	r3, #48	@ 0x30
 800b866:	d103      	bne.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800b868:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800b86c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b86e:	e002      	b.n	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800b870:	2300      	movs	r3, #0
 800b872:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800b874:	e037      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b876:	e036      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800b878:	4b1d      	ldr	r3, [pc, #116]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b87a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b87e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b882:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800b884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b886:	2b10      	cmp	r3, #16
 800b888:	d107      	bne.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b88a:	f107 0320 	add.w	r3, r7, #32
 800b88e:	4618      	mov	r0, r3
 800b890:	f7fd f89a 	bl	80089c8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b896:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800b898:	e025      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800b89a:	4b15      	ldr	r3, [pc, #84]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8a6:	d10a      	bne.n	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800b8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8aa:	2b20      	cmp	r3, #32
 800b8ac:	d107      	bne.n	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8ae:	f107 0308 	add.w	r3, r7, #8
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f7fd fb60 	bl	8008f78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8bc:	e00f      	b.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800b8be:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b8c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b8ca:	d105      	bne.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8ce:	2b30      	cmp	r3, #48	@ 0x30
 800b8d0:	d102      	bne.n	800b8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800b8d2:	4b0b      	ldr	r3, [pc, #44]	@ (800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800b8d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8d6:	e002      	b.n	800b8de <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800b8d8:	2300      	movs	r3, #0
 800b8da:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800b8dc:	e003      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800b8de:	e002      	b.n	800b8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800b8e4:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800b8e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	373c      	adds	r7, #60	@ 0x3c
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd90      	pop	{r4, r7, pc}
 800b8f0:	44020c00 	.word	0x44020c00
 800b8f4:	03d09000 	.word	0x03d09000
 800b8f8:	003d0900 	.word	0x003d0900
 800b8fc:	007a1200 	.word	0x007a1200
 800b900:	02dc6c00 	.word	0x02dc6c00

0800b904 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b084      	sub	sp, #16
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800b90c:	4b48      	ldr	r3, [pc, #288]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a47      	ldr	r2, [pc, #284]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b912:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b916:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b918:	f7f7 fb4e 	bl	8002fb8 <HAL_GetTick>
 800b91c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b91e:	e008      	b.n	800b932 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b920:	f7f7 fb4a 	bl	8002fb8 <HAL_GetTick>
 800b924:	4602      	mov	r2, r0
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	2b02      	cmp	r3, #2
 800b92c:	d901      	bls.n	800b932 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800b92e:	2303      	movs	r3, #3
 800b930:	e07a      	b.n	800ba28 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b932:	4b3f      	ldr	r3, [pc, #252]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1f0      	bne.n	800b920 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800b93e:	4b3c      	ldr	r3, [pc, #240]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b942:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800b946:	f023 0303 	bic.w	r3, r3, #3
 800b94a:	687a      	ldr	r2, [r7, #4]
 800b94c:	6811      	ldr	r1, [r2, #0]
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	6852      	ldr	r2, [r2, #4]
 800b952:	0212      	lsls	r2, r2, #8
 800b954:	430a      	orrs	r2, r1
 800b956:	4936      	ldr	r1, [pc, #216]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b958:	4313      	orrs	r3, r2
 800b95a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	3b01      	subs	r3, #1
 800b962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	3b01      	subs	r3, #1
 800b96c:	025b      	lsls	r3, r3, #9
 800b96e:	b29b      	uxth	r3, r3
 800b970:	431a      	orrs	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	3b01      	subs	r3, #1
 800b978:	041b      	lsls	r3, r3, #16
 800b97a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b97e:	431a      	orrs	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	695b      	ldr	r3, [r3, #20]
 800b984:	3b01      	subs	r3, #1
 800b986:	061b      	lsls	r3, r3, #24
 800b988:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b98c:	4928      	ldr	r1, [pc, #160]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800b992:	4b27      	ldr	r3, [pc, #156]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b996:	f023 020c 	bic.w	r2, r3, #12
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	699b      	ldr	r3, [r3, #24]
 800b99e:	4924      	ldr	r1, [pc, #144]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800b9a4:	4b22      	ldr	r3, [pc, #136]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a8:	f023 0220 	bic.w	r2, r3, #32
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	69db      	ldr	r3, [r3, #28]
 800b9b0:	491f      	ldr	r1, [pc, #124]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800b9b6:	4b1e      	ldr	r3, [pc, #120]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b9b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9be:	491c      	ldr	r1, [pc, #112]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800b9c4:	4b1a      	ldr	r3, [pc, #104]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9c8:	4a19      	ldr	r2, [pc, #100]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b9ca:	f023 0310 	bic.w	r3, r3, #16
 800b9ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800b9d0:	4b17      	ldr	r3, [pc, #92]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b9d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b9d8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b9dc:	687a      	ldr	r2, [r7, #4]
 800b9de:	6a12      	ldr	r2, [r2, #32]
 800b9e0:	00d2      	lsls	r2, r2, #3
 800b9e2:	4913      	ldr	r1, [pc, #76]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800b9e8:	4b11      	ldr	r3, [pc, #68]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9ec:	4a10      	ldr	r2, [pc, #64]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b9ee:	f043 0310 	orr.w	r3, r3, #16
 800b9f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800b9f4:	4b0e      	ldr	r3, [pc, #56]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a0d      	ldr	r2, [pc, #52]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800b9fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b9fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba00:	f7f7 fada 	bl	8002fb8 <HAL_GetTick>
 800ba04:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba06:	e008      	b.n	800ba1a <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ba08:	f7f7 fad6 	bl	8002fb8 <HAL_GetTick>
 800ba0c:	4602      	mov	r2, r0
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	2b02      	cmp	r3, #2
 800ba14:	d901      	bls.n	800ba1a <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800ba16:	2303      	movs	r3, #3
 800ba18:	e006      	b.n	800ba28 <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ba1a:	4b05      	ldr	r3, [pc, #20]	@ (800ba30 <RCCEx_PLL2_Config+0x12c>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d0f0      	beq.n	800ba08 <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800ba26:	2300      	movs	r3, #0

}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3710      	adds	r7, #16
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	44020c00 	.word	0x44020c00

0800ba34 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800ba3c:	4b48      	ldr	r3, [pc, #288]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a47      	ldr	r2, [pc, #284]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800ba42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba46:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba48:	f7f7 fab6 	bl	8002fb8 <HAL_GetTick>
 800ba4c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba4e:	e008      	b.n	800ba62 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba50:	f7f7 fab2 	bl	8002fb8 <HAL_GetTick>
 800ba54:	4602      	mov	r2, r0
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	2b02      	cmp	r3, #2
 800ba5c:	d901      	bls.n	800ba62 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ba5e:	2303      	movs	r3, #3
 800ba60:	e07a      	b.n	800bb58 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ba62:	4b3f      	ldr	r3, [pc, #252]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d1f0      	bne.n	800ba50 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800ba6e:	4b3c      	ldr	r3, [pc, #240]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800ba70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba72:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ba76:	f023 0303 	bic.w	r3, r3, #3
 800ba7a:	687a      	ldr	r2, [r7, #4]
 800ba7c:	6811      	ldr	r1, [r2, #0]
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	6852      	ldr	r2, [r2, #4]
 800ba82:	0212      	lsls	r2, r2, #8
 800ba84:	430a      	orrs	r2, r1
 800ba86:	4936      	ldr	r1, [pc, #216]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	630b      	str	r3, [r1, #48]	@ 0x30
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	689b      	ldr	r3, [r3, #8]
 800ba90:	3b01      	subs	r3, #1
 800ba92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	3b01      	subs	r3, #1
 800ba9c:	025b      	lsls	r3, r3, #9
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	431a      	orrs	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	3b01      	subs	r3, #1
 800baa8:	041b      	lsls	r3, r3, #16
 800baaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800baae:	431a      	orrs	r2, r3
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	695b      	ldr	r3, [r3, #20]
 800bab4:	3b01      	subs	r3, #1
 800bab6:	061b      	lsls	r3, r3, #24
 800bab8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800babc:	4928      	ldr	r1, [pc, #160]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800babe:	4313      	orrs	r3, r2
 800bac0:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bac2:	4b27      	ldr	r3, [pc, #156]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800bac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bac6:	f023 020c 	bic.w	r2, r3, #12
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	699b      	ldr	r3, [r3, #24]
 800bace:	4924      	ldr	r1, [pc, #144]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800bad0:	4313      	orrs	r3, r2
 800bad2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800bad4:	4b22      	ldr	r3, [pc, #136]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800bad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bad8:	f023 0220 	bic.w	r2, r3, #32
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	69db      	ldr	r3, [r3, #28]
 800bae0:	491f      	ldr	r1, [pc, #124]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800bae2:	4313      	orrs	r3, r2
 800bae4:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800bae6:	4b1e      	ldr	r3, [pc, #120]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800bae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baee:	491c      	ldr	r1, [pc, #112]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800baf0:	4313      	orrs	r3, r2
 800baf2:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800baf4:	4b1a      	ldr	r3, [pc, #104]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800baf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800baf8:	4a19      	ldr	r2, [pc, #100]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800bafa:	f023 0310 	bic.w	r3, r3, #16
 800bafe:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800bb00:	4b17      	ldr	r3, [pc, #92]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800bb02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb04:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bb08:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800bb0c:	687a      	ldr	r2, [r7, #4]
 800bb0e:	6a12      	ldr	r2, [r2, #32]
 800bb10:	00d2      	lsls	r2, r2, #3
 800bb12:	4913      	ldr	r1, [pc, #76]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800bb14:	4313      	orrs	r3, r2
 800bb16:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800bb18:	4b11      	ldr	r3, [pc, #68]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800bb1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb1c:	4a10      	ldr	r2, [pc, #64]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800bb1e:	f043 0310 	orr.w	r3, r3, #16
 800bb22:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800bb24:	4b0e      	ldr	r3, [pc, #56]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a0d      	ldr	r2, [pc, #52]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800bb2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb2e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bb30:	f7f7 fa42 	bl	8002fb8 <HAL_GetTick>
 800bb34:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb36:	e008      	b.n	800bb4a <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bb38:	f7f7 fa3e 	bl	8002fb8 <HAL_GetTick>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	1ad3      	subs	r3, r2, r3
 800bb42:	2b02      	cmp	r3, #2
 800bb44:	d901      	bls.n	800bb4a <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	e006      	b.n	800bb58 <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bb4a:	4b05      	ldr	r3, [pc, #20]	@ (800bb60 <RCCEx_PLL3_Config+0x12c>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d0f0      	beq.n	800bb38 <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800bb56:	2300      	movs	r3, #0
}
 800bb58:	4618      	mov	r0, r3
 800bb5a:	3710      	adds	r7, #16
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	bd80      	pop	{r7, pc}
 800bb60:	44020c00 	.word	0x44020c00

0800bb64 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d101      	bne.n	800bb76 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800bb72:	2301      	movs	r3, #1
 800bb74:	e08c      	b.n	800bc90 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	7a5b      	ldrb	r3, [r3, #9]
 800bb7a:	b2db      	uxtb	r3, r3
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d105      	bne.n	800bb8c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2200      	movs	r2, #0
 800bb84:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7f6 fa2a 	bl	8001fe0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2202      	movs	r2, #2
 800bb90:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f022 0204 	bic.w	r2, r2, #4
 800bba0:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6859      	ldr	r1, [r3, #4]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	4b3b      	ldr	r3, [pc, #236]	@ (800bc98 <HAL_RNG_Init+0x134>)
 800bbac:	430b      	orrs	r3, r1
 800bbae:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800bbb8:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	4a37      	ldr	r2, [pc, #220]	@ (800bc9c <HAL_RNG_Init+0x138>)
 800bbc0:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800bbd0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bbd2:	f7f7 f9f1 	bl	8002fb8 <HAL_GetTick>
 800bbd6:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800bbd8:	e016      	b.n	800bc08 <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800bbda:	f7f7 f9ed 	bl	8002fb8 <HAL_GetTick>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	2b04      	cmp	r3, #4
 800bbe6:	d90f      	bls.n	800bc08 <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bbf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bbf6:	d107      	bne.n	800bc08 <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2202      	movs	r2, #2
 800bc02:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800bc04:	2301      	movs	r3, #1
 800bc06:	e043      	b.n	800bc90 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bc12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc16:	d0e0      	beq.n	800bbda <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	681a      	ldr	r2, [r3, #0]
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f042 0204 	orr.w	r2, r2, #4
 800bc26:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc32:	2b40      	cmp	r3, #64	@ 0x40
 800bc34:	d104      	bne.n	800bc40 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2204      	movs	r2, #4
 800bc3a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e027      	b.n	800bc90 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800bc40:	f7f7 f9ba 	bl	8002fb8 <HAL_GetTick>
 800bc44:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800bc46:	e015      	b.n	800bc74 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800bc48:	f7f7 f9b6 	bl	8002fb8 <HAL_GetTick>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	2b04      	cmp	r3, #4
 800bc54:	d90e      	bls.n	800bc74 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	f003 0301 	and.w	r3, r3, #1
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d007      	beq.n	800bc74 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2204      	movs	r2, #4
 800bc68:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2202      	movs	r2, #2
 800bc6e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	e00d      	b.n	800bc90 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	f003 0301 	and.w	r3, r3, #1
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d1e2      	bne.n	800bc48 <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2201      	movs	r2, #1
 800bc86:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3710      	adds	r7, #16
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}
 800bc98:	40f00e00 	.word	0x40f00e00
 800bc9c:	0003af66 	.word	0x0003af66

0800bca0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	7a1b      	ldrb	r3, [r3, #8]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d101      	bne.n	800bcba <HAL_RNG_GenerateRandomNumber+0x1a>
 800bcb6:	2302      	movs	r3, #2
 800bcb8:	e068      	b.n	800bd8c <HAL_RNG_GenerateRandomNumber+0xec>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	7a5b      	ldrb	r3, [r3, #9]
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d157      	bne.n	800bd7a <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2202      	movs	r2, #2
 800bcce:	725a      	strb	r2, [r3, #9]
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	685b      	ldr	r3, [r3, #4]
 800bcd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcda:	2b40      	cmp	r3, #64	@ 0x40
 800bcdc:	d10f      	bne.n	800bcfe <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	2208      	movs	r2, #8
 800bce2:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f000 f85f 	bl	800bda8 <RNG_RecoverSeedError>
 800bcea:	4603      	mov	r3, r0
 800bcec:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800bcee:	7bfb      	ldrb	r3, [r7, #15]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d104      	bne.n	800bcfe <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2220      	movs	r2, #32
 800bcf8:	60da      	str	r2, [r3, #12]
        return status;
 800bcfa:	7bfb      	ldrb	r3, [r7, #15]
 800bcfc:	e046      	b.n	800bd8c <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800bcfe:	f7f7 f95b 	bl	8002fb8 <HAL_GetTick>
 800bd02:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800bd04:	e018      	b.n	800bd38 <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800bd06:	f7f7 f957 	bl	8002fb8 <HAL_GetTick>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	2b04      	cmp	r3, #4
 800bd12:	d911      	bls.n	800bd38 <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	f003 0301 	and.w	r3, r3, #1
 800bd1e:	2b01      	cmp	r3, #1
 800bd20:	d00a      	beq.n	800bd38 <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2201      	movs	r2, #1
 800bd26:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2202      	movs	r2, #2
 800bd2c:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800bd34:	2301      	movs	r3, #1
 800bd36:	e029      	b.n	800bd8c <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	f003 0301 	and.w	r3, r3, #1
 800bd42:	2b01      	cmp	r3, #1
 800bd44:	d1df      	bne.n	800bd06 <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	689a      	ldr	r2, [r3, #8]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	611a      	str	r2, [r3, #16]
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd5a:	2b40      	cmp	r3, #64	@ 0x40
 800bd5c:	d105      	bne.n	800bd6a <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2208      	movs	r2, #8
 800bd62:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	73fb      	strb	r3, [r7, #15]
 800bd68:	e003      	b.n	800bd72 <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	691a      	ldr	r2, [r3, #16]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	601a      	str	r2, [r3, #0]
    }
    hrng->State = HAL_RNG_STATE_READY;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	725a      	strb	r2, [r3, #9]
 800bd78:	e004      	b.n	800bd84 <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2204      	movs	r2, #4
 800bd7e:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800bd80:	2301      	movs	r3, #1
 800bd82:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	721a      	strb	r2, [r3, #8]

  return status;
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800bd9c:	bf00      	nop
 800bd9e:	370c      	adds	r7, #12
 800bda0:	46bd      	mov	sp, r7
 800bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda6:	4770      	bx	lr

0800bda8 <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	f003 0304 	and.w	r3, r3, #4
 800bdbe:	2b04      	cmp	r3, #4
 800bdc0:	d008      	beq.n	800bdd4 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	685a      	ldr	r2, [r3, #4]
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bdd0:	605a      	str	r2, [r3, #4]
 800bdd2:	e05f      	b.n	800be94 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800bde2:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800bdf2:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800bdf4:	2304      	movs	r3, #4
 800bdf6:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d110      	bne.n	800be26 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	f043 0202 	orr.w	r2, r3, #2
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2200      	movs	r2, #0
 800be1a:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f7ff ffb9 	bl	800bd94 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	e03d      	b.n	800bea2 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800be30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be34:	d0e0      	beq.n	800bdf8 <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be40:	2b40      	cmp	r3, #64	@ 0x40
 800be42:	d107      	bne.n	800be54 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	685a      	ldr	r2, [r3, #4]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800be52:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800be54:	2304      	movs	r3, #4
 800be56:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d110      	bne.n	800be86 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2201      	movs	r2, #1
 800be68:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	f043 0202 	orr.w	r2, r3, #2
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f7ff ff89 	bl	800bd94 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	e00d      	b.n	800bea2 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	f003 0304 	and.w	r3, r3, #4
 800be90:	2b04      	cmp	r3, #4
 800be92:	d0e1      	beq.n	800be58 <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	68db      	ldr	r3, [r3, #12]
 800be98:	f023 0208 	bic.w	r2, r3, #8
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
	...

0800beac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800beb4:	2301      	movs	r3, #1
 800beb6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d071      	beq.n	800bfa2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d106      	bne.n	800bed8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f7f6 f8dc 	bl	8002090 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2202      	movs	r2, #2
 800bedc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bee0:	4b32      	ldr	r3, [pc, #200]	@ (800bfac <HAL_RTC_Init+0x100>)
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	f003 0310 	and.w	r3, r3, #16
 800bee8:	2b10      	cmp	r3, #16
 800beea:	d051      	beq.n	800bf90 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800beec:	4b2f      	ldr	r3, [pc, #188]	@ (800bfac <HAL_RTC_Init+0x100>)
 800beee:	22ca      	movs	r2, #202	@ 0xca
 800bef0:	625a      	str	r2, [r3, #36]	@ 0x24
 800bef2:	4b2e      	ldr	r3, [pc, #184]	@ (800bfac <HAL_RTC_Init+0x100>)
 800bef4:	2253      	movs	r2, #83	@ 0x53
 800bef6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 f9a3 	bl	800c244 <RTC_EnterInitMode>
 800befe:	4603      	mov	r3, r0
 800bf00:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800bf02:	7bfb      	ldrb	r3, [r7, #15]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d13f      	bne.n	800bf88 <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800bf08:	4b28      	ldr	r3, [pc, #160]	@ (800bfac <HAL_RTC_Init+0x100>)
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	4a27      	ldr	r2, [pc, #156]	@ (800bfac <HAL_RTC_Init+0x100>)
 800bf0e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800bf12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf16:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800bf18:	4b24      	ldr	r3, [pc, #144]	@ (800bfac <HAL_RTC_Init+0x100>)
 800bf1a:	699a      	ldr	r2, [r3, #24]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6859      	ldr	r1, [r3, #4]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	691b      	ldr	r3, [r3, #16]
 800bf24:	4319      	orrs	r1, r3
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	699b      	ldr	r3, [r3, #24]
 800bf2a:	430b      	orrs	r3, r1
 800bf2c:	491f      	ldr	r1, [pc, #124]	@ (800bfac <HAL_RTC_Init+0x100>)
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68da      	ldr	r2, [r3, #12]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	041b      	lsls	r3, r3, #16
 800bf3c:	491b      	ldr	r1, [pc, #108]	@ (800bfac <HAL_RTC_Init+0x100>)
 800bf3e:	4313      	orrs	r3, r2
 800bf40:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800bf42:	4b1a      	ldr	r3, [pc, #104]	@ (800bfac <HAL_RTC_Init+0x100>)
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf52:	430b      	orrs	r3, r1
 800bf54:	4915      	ldr	r1, [pc, #84]	@ (800bfac <HAL_RTC_Init+0x100>)
 800bf56:	4313      	orrs	r3, r2
 800bf58:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 f9ae 	bl	800c2bc <RTC_ExitInitMode>
 800bf60:	4603      	mov	r3, r0
 800bf62:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800bf64:	7bfb      	ldrb	r3, [r7, #15]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d10e      	bne.n	800bf88 <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800bf6a:	4b10      	ldr	r3, [pc, #64]	@ (800bfac <HAL_RTC_Init+0x100>)
 800bf6c:	699b      	ldr	r3, [r3, #24]
 800bf6e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6a19      	ldr	r1, [r3, #32]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	69db      	ldr	r3, [r3, #28]
 800bf7a:	4319      	orrs	r1, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	695b      	ldr	r3, [r3, #20]
 800bf80:	430b      	orrs	r3, r1
 800bf82:	490a      	ldr	r1, [pc, #40]	@ (800bfac <HAL_RTC_Init+0x100>)
 800bf84:	4313      	orrs	r3, r2
 800bf86:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf88:	4b08      	ldr	r3, [pc, #32]	@ (800bfac <HAL_RTC_Init+0x100>)
 800bf8a:	22ff      	movs	r2, #255	@ 0xff
 800bf8c:	625a      	str	r2, [r3, #36]	@ 0x24
 800bf8e:	e001      	b.n	800bf94 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800bf90:	2300      	movs	r3, #0
 800bf92:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d103      	bne.n	800bfa2 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800bfa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}
 800bfac:	44007800 	.word	0x44007800

0800bfb0 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bfb0:	b590      	push	{r4, r7, lr}
 800bfb2:	b087      	sub	sp, #28
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800bfc2:	2b01      	cmp	r3, #1
 800bfc4:	d101      	bne.n	800bfca <HAL_RTC_SetTime+0x1a>
 800bfc6:	2302      	movs	r3, #2
 800bfc8:	e07e      	b.n	800c0c8 <HAL_RTC_SetTime+0x118>
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2201      	movs	r2, #1
 800bfce:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2202      	movs	r2, #2
 800bfd6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bfda:	4b3d      	ldr	r3, [pc, #244]	@ (800c0d0 <HAL_RTC_SetTime+0x120>)
 800bfdc:	22ca      	movs	r2, #202	@ 0xca
 800bfde:	625a      	str	r2, [r3, #36]	@ 0x24
 800bfe0:	4b3b      	ldr	r3, [pc, #236]	@ (800c0d0 <HAL_RTC_SetTime+0x120>)
 800bfe2:	2253      	movs	r2, #83	@ 0x53
 800bfe4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800bfe6:	68f8      	ldr	r0, [r7, #12]
 800bfe8:	f000 f92c 	bl	800c244 <RTC_EnterInitMode>
 800bfec:	4603      	mov	r3, r0
 800bfee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800bff0:	7cfb      	ldrb	r3, [r7, #19]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d159      	bne.n	800c0aa <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800bff6:	4b36      	ldr	r3, [pc, #216]	@ (800c0d0 <HAL_RTC_SetTime+0x120>)
 800bff8:	68db      	ldr	r3, [r3, #12]
 800bffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c002:	d04d      	beq.n	800c0a0 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d125      	bne.n	800c056 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c00a:	4b31      	ldr	r3, [pc, #196]	@ (800c0d0 <HAL_RTC_SetTime+0x120>)
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c012:	2b00      	cmp	r3, #0
 800c014:	d102      	bne.n	800c01c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	2200      	movs	r2, #0
 800c01a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	4618      	mov	r0, r3
 800c022:	f000 f989 	bl	800c338 <RTC_ByteToBcd2>
 800c026:	4603      	mov	r3, r0
 800c028:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	785b      	ldrb	r3, [r3, #1]
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 f982 	bl	800c338 <RTC_ByteToBcd2>
 800c034:	4603      	mov	r3, r0
 800c036:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c038:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	789b      	ldrb	r3, [r3, #2]
 800c03e:	4618      	mov	r0, r3
 800c040:	f000 f97a 	bl	800c338 <RTC_ByteToBcd2>
 800c044:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c046:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	78db      	ldrb	r3, [r3, #3]
 800c04e:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c050:	4313      	orrs	r3, r2
 800c052:	617b      	str	r3, [r7, #20]
 800c054:	e017      	b.n	800c086 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800c056:	4b1e      	ldr	r3, [pc, #120]	@ (800c0d0 <HAL_RTC_SetTime+0x120>)
 800c058:	699b      	ldr	r3, [r3, #24]
 800c05a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d102      	bne.n	800c068 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	2200      	movs	r2, #0
 800c066:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	781b      	ldrb	r3, [r3, #0]
 800c06c:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	785b      	ldrb	r3, [r3, #1]
 800c072:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c074:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800c076:	68ba      	ldr	r2, [r7, #8]
 800c078:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c07a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	78db      	ldrb	r3, [r3, #3]
 800c080:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800c082:	4313      	orrs	r3, r2
 800c084:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800c086:	4a12      	ldr	r2, [pc, #72]	@ (800c0d0 <HAL_RTC_SetTime+0x120>)
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800c08e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800c092:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800c094:	4b0e      	ldr	r3, [pc, #56]	@ (800c0d0 <HAL_RTC_SetTime+0x120>)
 800c096:	699b      	ldr	r3, [r3, #24]
 800c098:	4a0d      	ldr	r2, [pc, #52]	@ (800c0d0 <HAL_RTC_SetTime+0x120>)
 800c09a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c09e:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f000 f90b 	bl	800c2bc <RTC_ExitInitMode>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c0aa:	4b09      	ldr	r3, [pc, #36]	@ (800c0d0 <HAL_RTC_SetTime+0x120>)
 800c0ac:	22ff      	movs	r2, #255	@ 0xff
 800c0ae:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800c0b0:	7cfb      	ldrb	r3, [r7, #19]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d103      	bne.n	800c0be <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2201      	movs	r2, #1
 800c0ba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800c0c6:	7cfb      	ldrb	r3, [r7, #19]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	371c      	adds	r7, #28
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd90      	pop	{r4, r7, pc}
 800c0d0:	44007800 	.word	0x44007800

0800c0d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c0d4:	b590      	push	{r4, r7, lr}
 800c0d6:	b087      	sub	sp, #28
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	60f8      	str	r0, [r7, #12]
 800c0dc:	60b9      	str	r1, [r7, #8]
 800c0de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d101      	bne.n	800c0ee <HAL_RTC_SetDate+0x1a>
 800c0ea:	2302      	movs	r3, #2
 800c0ec:	e071      	b.n	800c1d2 <HAL_RTC_SetDate+0xfe>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2201      	movs	r2, #1
 800c0f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2202      	movs	r2, #2
 800c0fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10e      	bne.n	800c122 <HAL_RTC_SetDate+0x4e>
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	785b      	ldrb	r3, [r3, #1]
 800c108:	f003 0310 	and.w	r3, r3, #16
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d008      	beq.n	800c122 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	785b      	ldrb	r3, [r3, #1]
 800c114:	f023 0310 	bic.w	r3, r3, #16
 800c118:	b2db      	uxtb	r3, r3
 800c11a:	330a      	adds	r3, #10
 800c11c:	b2da      	uxtb	r2, r3
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d11c      	bne.n	800c162 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	78db      	ldrb	r3, [r3, #3]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f000 f903 	bl	800c338 <RTC_ByteToBcd2>
 800c132:	4603      	mov	r3, r0
 800c134:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	785b      	ldrb	r3, [r3, #1]
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 f8fc 	bl	800c338 <RTC_ByteToBcd2>
 800c140:	4603      	mov	r3, r0
 800c142:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c144:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	789b      	ldrb	r3, [r3, #2]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 f8f4 	bl	800c338 <RTC_ByteToBcd2>
 800c150:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c152:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800c15c:	4313      	orrs	r3, r2
 800c15e:	617b      	str	r3, [r7, #20]
 800c160:	e00e      	b.n	800c180 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	78db      	ldrb	r3, [r3, #3]
 800c166:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	785b      	ldrb	r3, [r3, #1]
 800c16c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c16e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800c174:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800c17c:	4313      	orrs	r3, r2
 800c17e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c180:	4b16      	ldr	r3, [pc, #88]	@ (800c1dc <HAL_RTC_SetDate+0x108>)
 800c182:	22ca      	movs	r2, #202	@ 0xca
 800c184:	625a      	str	r2, [r3, #36]	@ 0x24
 800c186:	4b15      	ldr	r3, [pc, #84]	@ (800c1dc <HAL_RTC_SetDate+0x108>)
 800c188:	2253      	movs	r2, #83	@ 0x53
 800c18a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c18c:	68f8      	ldr	r0, [r7, #12]
 800c18e:	f000 f859 	bl	800c244 <RTC_EnterInitMode>
 800c192:	4603      	mov	r3, r0
 800c194:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c196:	7cfb      	ldrb	r3, [r7, #19]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10b      	bne.n	800c1b4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800c19c:	4a0f      	ldr	r2, [pc, #60]	@ (800c1dc <HAL_RTC_SetDate+0x108>)
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800c1a4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c1a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c1aa:	68f8      	ldr	r0, [r7, #12]
 800c1ac:	f000 f886 	bl	800c2bc <RTC_ExitInitMode>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c1b4:	4b09      	ldr	r3, [pc, #36]	@ (800c1dc <HAL_RTC_SetDate+0x108>)
 800c1b6:	22ff      	movs	r2, #255	@ 0xff
 800c1b8:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800c1ba:	7cfb      	ldrb	r3, [r7, #19]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d103      	bne.n	800c1c8 <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2201      	movs	r2, #1
 800c1c4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800c1d0:	7cfb      	ldrb	r3, [r7, #19]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	371c      	adds	r7, #28
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd90      	pop	{r4, r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	44007800 	.word	0x44007800

0800c1e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800c1e8:	4b15      	ldr	r3, [pc, #84]	@ (800c240 <HAL_RTC_WaitForSynchro+0x60>)
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	4a14      	ldr	r2, [pc, #80]	@ (800c240 <HAL_RTC_WaitForSynchro+0x60>)
 800c1ee:	f023 0320 	bic.w	r3, r3, #32
 800c1f2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800c1f4:	f7f6 fee0 	bl	8002fb8 <HAL_GetTick>
 800c1f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c1fa:	e013      	b.n	800c224 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c1fc:	f7f6 fedc 	bl	8002fb8 <HAL_GetTick>
 800c200:	4602      	mov	r2, r0
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	1ad3      	subs	r3, r2, r3
 800c206:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c20a:	d90b      	bls.n	800c224 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c20c:	4b0c      	ldr	r3, [pc, #48]	@ (800c240 <HAL_RTC_WaitForSynchro+0x60>)
 800c20e:	68db      	ldr	r3, [r3, #12]
 800c210:	f003 0320 	and.w	r3, r3, #32
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10c      	bne.n	800c232 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2203      	movs	r2, #3
 800c21c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800c220:	2303      	movs	r3, #3
 800c222:	e008      	b.n	800c236 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800c224:	4b06      	ldr	r3, [pc, #24]	@ (800c240 <HAL_RTC_WaitForSynchro+0x60>)
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	f003 0320 	and.w	r3, r3, #32
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d0e5      	beq.n	800c1fc <HAL_RTC_WaitForSynchro+0x1c>
 800c230:	e000      	b.n	800c234 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800c232:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}
 800c23e:	bf00      	nop
 800c240:	44007800 	.word	0x44007800

0800c244 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c250:	4b19      	ldr	r3, [pc, #100]	@ (800c2b8 <RTC_EnterInitMode+0x74>)
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d128      	bne.n	800c2ae <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c25c:	4b16      	ldr	r3, [pc, #88]	@ (800c2b8 <RTC_EnterInitMode+0x74>)
 800c25e:	68db      	ldr	r3, [r3, #12]
 800c260:	4a15      	ldr	r2, [pc, #84]	@ (800c2b8 <RTC_EnterInitMode+0x74>)
 800c262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c266:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800c268:	f7f6 fea6 	bl	8002fb8 <HAL_GetTick>
 800c26c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c26e:	e013      	b.n	800c298 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c270:	f7f6 fea2 	bl	8002fb8 <HAL_GetTick>
 800c274:	4602      	mov	r2, r0
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	1ad3      	subs	r3, r2, r3
 800c27a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c27e:	d90b      	bls.n	800c298 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800c280:	4b0d      	ldr	r3, [pc, #52]	@ (800c2b8 <RTC_EnterInitMode+0x74>)
 800c282:	68db      	ldr	r3, [r3, #12]
 800c284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d10f      	bne.n	800c2ac <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800c28c:	2303      	movs	r3, #3
 800c28e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2203      	movs	r2, #3
 800c294:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800c298:	4b07      	ldr	r3, [pc, #28]	@ (800c2b8 <RTC_EnterInitMode+0x74>)
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d104      	bne.n	800c2ae <RTC_EnterInitMode+0x6a>
 800c2a4:	7bfb      	ldrb	r3, [r7, #15]
 800c2a6:	2b03      	cmp	r3, #3
 800c2a8:	d1e2      	bne.n	800c270 <RTC_EnterInitMode+0x2c>
 800c2aa:	e000      	b.n	800c2ae <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800c2ac:	bf00      	nop
        }
      }
    }
  }

  return status;
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}
 800c2b8:	44007800 	.word	0x44007800

0800c2bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b084      	sub	sp, #16
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800c2c8:	4b1a      	ldr	r3, [pc, #104]	@ (800c334 <RTC_ExitInitMode+0x78>)
 800c2ca:	68db      	ldr	r3, [r3, #12]
 800c2cc:	4a19      	ldr	r2, [pc, #100]	@ (800c334 <RTC_ExitInitMode+0x78>)
 800c2ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c2d2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c2d4:	4b17      	ldr	r3, [pc, #92]	@ (800c334 <RTC_ExitInitMode+0x78>)
 800c2d6:	699b      	ldr	r3, [r3, #24]
 800c2d8:	f003 0320 	and.w	r3, r3, #32
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d10c      	bne.n	800c2fa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7ff ff7d 	bl	800c1e0 <HAL_RTC_WaitForSynchro>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d01e      	beq.n	800c32a <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2203      	movs	r2, #3
 800c2f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c2f4:	2303      	movs	r3, #3
 800c2f6:	73fb      	strb	r3, [r7, #15]
 800c2f8:	e017      	b.n	800c32a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800c334 <RTC_ExitInitMode+0x78>)
 800c2fc:	699b      	ldr	r3, [r3, #24]
 800c2fe:	4a0d      	ldr	r2, [pc, #52]	@ (800c334 <RTC_ExitInitMode+0x78>)
 800c300:	f023 0320 	bic.w	r3, r3, #32
 800c304:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7ff ff6a 	bl	800c1e0 <HAL_RTC_WaitForSynchro>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d005      	beq.n	800c31e <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2203      	movs	r2, #3
 800c316:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800c31a:	2303      	movs	r3, #3
 800c31c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c31e:	4b05      	ldr	r3, [pc, #20]	@ (800c334 <RTC_ExitInitMode+0x78>)
 800c320:	699b      	ldr	r3, [r3, #24]
 800c322:	4a04      	ldr	r2, [pc, #16]	@ (800c334 <RTC_ExitInitMode+0x78>)
 800c324:	f043 0320 	orr.w	r3, r3, #32
 800c328:	6193      	str	r3, [r2, #24]
  }
  return status;
 800c32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3710      	adds	r7, #16
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}
 800c334:	44007800 	.word	0x44007800

0800c338 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	4603      	mov	r3, r0
 800c340:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800c342:	2300      	movs	r3, #0
 800c344:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800c346:	79fb      	ldrb	r3, [r7, #7]
 800c348:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800c34a:	e005      	b.n	800c358 <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	3301      	adds	r3, #1
 800c350:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800c352:	7afb      	ldrb	r3, [r7, #11]
 800c354:	3b0a      	subs	r3, #10
 800c356:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800c358:	7afb      	ldrb	r3, [r7, #11]
 800c35a:	2b09      	cmp	r3, #9
 800c35c:	d8f6      	bhi.n	800c34c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	b2db      	uxtb	r3, r3
 800c362:	011b      	lsls	r3, r3, #4
 800c364:	b2da      	uxtb	r2, r3
 800c366:	7afb      	ldrb	r3, [r7, #11]
 800c368:	4313      	orrs	r3, r2
 800c36a:	b2db      	uxtb	r3, r3
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3714      	adds	r7, #20
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	681a      	ldr	r2, [r3, #0]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	4910      	ldr	r1, [pc, #64]	@ (800c3cc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800c38c:	4313      	orrs	r3, r2
 800c38e:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	689a      	ldr	r2, [r3, #8]
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	431a      	orrs	r2, r3
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	699b      	ldr	r3, [r3, #24]
 800c39e:	490c      	ldr	r1, [pc, #48]	@ (800c3d0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800c3a4:	4b0a      	ldr	r3, [pc, #40]	@ (800c3d0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c3a6:	6a1b      	ldr	r3, [r3, #32]
 800c3a8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	6919      	ldr	r1, [r3, #16]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	695b      	ldr	r3, [r3, #20]
 800c3b4:	041b      	lsls	r3, r3, #16
 800c3b6:	430b      	orrs	r3, r1
 800c3b8:	4905      	ldr	r1, [pc, #20]	@ (800c3d0 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	44007800 	.word	0x44007800
 800c3d0:	44007c00 	.word	0x44007c00

0800c3d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b084      	sub	sp, #16
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d101      	bne.n	800c3e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c3e2:	2301      	movs	r3, #1
 800c3e4:	e162      	b.n	800c6ac <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	4a70      	ldr	r2, [pc, #448]	@ (800c5ac <HAL_SPI_Init+0x1d8>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d018      	beq.n	800c422 <HAL_SPI_Init+0x4e>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a6e      	ldr	r2, [pc, #440]	@ (800c5b0 <HAL_SPI_Init+0x1dc>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d013      	beq.n	800c422 <HAL_SPI_Init+0x4e>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a6d      	ldr	r2, [pc, #436]	@ (800c5b4 <HAL_SPI_Init+0x1e0>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d00e      	beq.n	800c422 <HAL_SPI_Init+0x4e>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a6b      	ldr	r2, [pc, #428]	@ (800c5b8 <HAL_SPI_Init+0x1e4>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d009      	beq.n	800c422 <HAL_SPI_Init+0x4e>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a6a      	ldr	r2, [pc, #424]	@ (800c5bc <HAL_SPI_Init+0x1e8>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d004      	beq.n	800c422 <HAL_SPI_Init+0x4e>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a68      	ldr	r2, [pc, #416]	@ (800c5c0 <HAL_SPI_Init+0x1ec>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	e000      	b.n	800c424 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800c422:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4a5f      	ldr	r2, [pc, #380]	@ (800c5ac <HAL_SPI_Init+0x1d8>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d018      	beq.n	800c466 <HAL_SPI_Init+0x92>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a5d      	ldr	r2, [pc, #372]	@ (800c5b0 <HAL_SPI_Init+0x1dc>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d013      	beq.n	800c466 <HAL_SPI_Init+0x92>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	4a5c      	ldr	r2, [pc, #368]	@ (800c5b4 <HAL_SPI_Init+0x1e0>)
 800c444:	4293      	cmp	r3, r2
 800c446:	d00e      	beq.n	800c466 <HAL_SPI_Init+0x92>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4a5a      	ldr	r2, [pc, #360]	@ (800c5b8 <HAL_SPI_Init+0x1e4>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d009      	beq.n	800c466 <HAL_SPI_Init+0x92>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4a59      	ldr	r2, [pc, #356]	@ (800c5bc <HAL_SPI_Init+0x1e8>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d004      	beq.n	800c466 <HAL_SPI_Init+0x92>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4a57      	ldr	r2, [pc, #348]	@ (800c5c0 <HAL_SPI_Init+0x1ec>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d105      	bne.n	800c472 <HAL_SPI_Init+0x9e>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	2b0f      	cmp	r3, #15
 800c46c:	d901      	bls.n	800c472 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800c46e:	2301      	movs	r3, #1
 800c470:	e11c      	b.n	800c6ac <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f91e 	bl	800c6b4 <SPI_GetPacketSize>
 800c478:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a4b      	ldr	r2, [pc, #300]	@ (800c5ac <HAL_SPI_Init+0x1d8>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d018      	beq.n	800c4b6 <HAL_SPI_Init+0xe2>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a49      	ldr	r2, [pc, #292]	@ (800c5b0 <HAL_SPI_Init+0x1dc>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d013      	beq.n	800c4b6 <HAL_SPI_Init+0xe2>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	4a48      	ldr	r2, [pc, #288]	@ (800c5b4 <HAL_SPI_Init+0x1e0>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d00e      	beq.n	800c4b6 <HAL_SPI_Init+0xe2>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a46      	ldr	r2, [pc, #280]	@ (800c5b8 <HAL_SPI_Init+0x1e4>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d009      	beq.n	800c4b6 <HAL_SPI_Init+0xe2>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a45      	ldr	r2, [pc, #276]	@ (800c5bc <HAL_SPI_Init+0x1e8>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d004      	beq.n	800c4b6 <HAL_SPI_Init+0xe2>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	4a43      	ldr	r2, [pc, #268]	@ (800c5c0 <HAL_SPI_Init+0x1ec>)
 800c4b2:	4293      	cmp	r3, r2
 800c4b4:	d102      	bne.n	800c4bc <HAL_SPI_Init+0xe8>
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	2b08      	cmp	r3, #8
 800c4ba:	d820      	bhi.n	800c4fe <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c4c0:	4a40      	ldr	r2, [pc, #256]	@ (800c5c4 <HAL_SPI_Init+0x1f0>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d018      	beq.n	800c4f8 <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a3f      	ldr	r2, [pc, #252]	@ (800c5c8 <HAL_SPI_Init+0x1f4>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d013      	beq.n	800c4f8 <HAL_SPI_Init+0x124>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	4a3d      	ldr	r2, [pc, #244]	@ (800c5cc <HAL_SPI_Init+0x1f8>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d00e      	beq.n	800c4f8 <HAL_SPI_Init+0x124>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a3c      	ldr	r2, [pc, #240]	@ (800c5d0 <HAL_SPI_Init+0x1fc>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d009      	beq.n	800c4f8 <HAL_SPI_Init+0x124>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a3a      	ldr	r2, [pc, #232]	@ (800c5d4 <HAL_SPI_Init+0x200>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d004      	beq.n	800c4f8 <HAL_SPI_Init+0x124>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a39      	ldr	r2, [pc, #228]	@ (800c5d8 <HAL_SPI_Init+0x204>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d104      	bne.n	800c502 <HAL_SPI_Init+0x12e>
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2b10      	cmp	r3, #16
 800c4fc:	d901      	bls.n	800c502 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800c4fe:	2301      	movs	r3, #1
 800c500:	e0d4      	b.n	800c6ac <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800c508:	b2db      	uxtb	r3, r3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d106      	bne.n	800c51c <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7f5 fe1a 	bl	8002150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2202      	movs	r2, #2
 800c520:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f022 0201 	bic.w	r2, r2, #1
 800c532:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c53e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	699b      	ldr	r3, [r3, #24]
 800c544:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c548:	d119      	bne.n	800c57e <HAL_SPI_Init+0x1aa>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	685b      	ldr	r3, [r3, #4]
 800c54e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c552:	d103      	bne.n	800c55c <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d008      	beq.n	800c56e <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c560:	2b00      	cmp	r3, #0
 800c562:	d10c      	bne.n	800c57e <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c56c:	d107      	bne.n	800c57e <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c57c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c586:	2b00      	cmp	r3, #0
 800c588:	d028      	beq.n	800c5dc <HAL_SPI_Init+0x208>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	68db      	ldr	r3, [r3, #12]
 800c58e:	2b06      	cmp	r3, #6
 800c590:	d924      	bls.n	800c5dc <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	430a      	orrs	r2, r1
 800c5a6:	601a      	str	r2, [r3, #0]
 800c5a8:	e020      	b.n	800c5ec <HAL_SPI_Init+0x218>
 800c5aa:	bf00      	nop
 800c5ac:	40014c00 	.word	0x40014c00
 800c5b0:	50014c00 	.word	0x50014c00
 800c5b4:	44002000 	.word	0x44002000
 800c5b8:	54002000 	.word	0x54002000
 800c5bc:	40015000 	.word	0x40015000
 800c5c0:	50015000 	.word	0x50015000
 800c5c4:	40013000 	.word	0x40013000
 800c5c8:	50013000 	.word	0x50013000
 800c5cc:	40003800 	.word	0x40003800
 800c5d0:	50003800 	.word	0x50003800
 800c5d4:	40003c00 	.word	0x40003c00
 800c5d8:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5ea:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	69da      	ldr	r2, [r3, #28]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5f4:	431a      	orrs	r2, r3
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	431a      	orrs	r2, r3
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c5fe:	ea42 0103 	orr.w	r1, r2, r3
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	68da      	ldr	r2, [r3, #12]
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	430a      	orrs	r2, r1
 800c60c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c616:	431a      	orrs	r2, r3
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c61c:	431a      	orrs	r2, r3
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	699b      	ldr	r3, [r3, #24]
 800c622:	431a      	orrs	r2, r3
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	691b      	ldr	r3, [r3, #16]
 800c628:	431a      	orrs	r2, r3
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	695b      	ldr	r3, [r3, #20]
 800c62e:	431a      	orrs	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6a1b      	ldr	r3, [r3, #32]
 800c634:	431a      	orrs	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	431a      	orrs	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c640:	431a      	orrs	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	431a      	orrs	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c64c:	431a      	orrs	r2, r3
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c652:	431a      	orrs	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c658:	ea42 0103 	orr.w	r1, r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	430a      	orrs	r2, r1
 800c666:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f022 0201 	bic.w	r2, r2, #1
 800c676:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00a      	beq.n	800c69a <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	430a      	orrs	r2, r1
 800c698:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2200      	movs	r2, #0
 800c69e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3710      	adds	r7, #16
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b085      	sub	sp, #20
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6c0:	095b      	lsrs	r3, r3, #5
 800c6c2:	3301      	adds	r3, #1
 800c6c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	68db      	ldr	r3, [r3, #12]
 800c6ca:	3301      	adds	r3, #1
 800c6cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	3307      	adds	r3, #7
 800c6d2:	08db      	lsrs	r3, r3, #3
 800c6d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	fb02 f303 	mul.w	r3, r2, r3
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3714      	adds	r7, #20
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c6ea:	b580      	push	{r7, lr}
 800c6ec:	b082      	sub	sp, #8
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d101      	bne.n	800c6fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	e042      	b.n	800c782 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c702:	2b00      	cmp	r3, #0
 800c704:	d106      	bne.n	800c714 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7f5 fdda 	bl	80022c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2224      	movs	r2, #36	@ 0x24
 800c718:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f022 0201 	bic.w	r2, r2, #1
 800c72a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c730:	2b00      	cmp	r3, #0
 800c732:	d002      	beq.n	800c73a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 fab5 	bl	800cca4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 f8c4 	bl	800c8c8 <UART_SetConfig>
 800c740:	4603      	mov	r3, r0
 800c742:	2b01      	cmp	r3, #1
 800c744:	d101      	bne.n	800c74a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c746:	2301      	movs	r3, #1
 800c748:	e01b      	b.n	800c782 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	685a      	ldr	r2, [r3, #4]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c758:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	689a      	ldr	r2, [r3, #8]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c768:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f042 0201 	orr.w	r2, r2, #1
 800c778:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 fb34 	bl	800cde8 <UART_CheckIdleState>
 800c780:	4603      	mov	r3, r0
}
 800c782:	4618      	mov	r0, r3
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b08a      	sub	sp, #40	@ 0x28
 800c78e:	af02      	add	r7, sp, #8
 800c790:	60f8      	str	r0, [r7, #12]
 800c792:	60b9      	str	r1, [r7, #8]
 800c794:	603b      	str	r3, [r7, #0]
 800c796:	4613      	mov	r3, r2
 800c798:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7a0:	2b20      	cmp	r3, #32
 800c7a2:	f040 808b 	bne.w	800c8bc <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d002      	beq.n	800c7b2 <HAL_UART_Transmit+0x28>
 800c7ac:	88fb      	ldrh	r3, [r7, #6]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d101      	bne.n	800c7b6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e083      	b.n	800c8be <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7c0:	2b80      	cmp	r3, #128	@ 0x80
 800c7c2:	d107      	bne.n	800c7d4 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	689a      	ldr	r2, [r3, #8]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c7d2:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2221      	movs	r2, #33	@ 0x21
 800c7e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c7e4:	f7f6 fbe8 	bl	8002fb8 <HAL_GetTick>
 800c7e8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	88fa      	ldrh	r2, [r7, #6]
 800c7ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	88fa      	ldrh	r2, [r7, #6]
 800c7f6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c802:	d108      	bne.n	800c816 <HAL_UART_Transmit+0x8c>
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d104      	bne.n	800c816 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800c80c:	2300      	movs	r3, #0
 800c80e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	61bb      	str	r3, [r7, #24]
 800c814:	e003      	b.n	800c81e <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c81a:	2300      	movs	r3, #0
 800c81c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c81e:	e030      	b.n	800c882 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	9300      	str	r3, [sp, #0]
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	2200      	movs	r2, #0
 800c828:	2180      	movs	r1, #128	@ 0x80
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 fb86 	bl	800cf3c <UART_WaitOnFlagUntilTimeout>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d005      	beq.n	800c842 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2220      	movs	r2, #32
 800c83a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c83e:	2303      	movs	r3, #3
 800c840:	e03d      	b.n	800c8be <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10b      	bne.n	800c860 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c848:	69bb      	ldr	r3, [r7, #24]
 800c84a:	881b      	ldrh	r3, [r3, #0]
 800c84c:	461a      	mov	r2, r3
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c856:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c858:	69bb      	ldr	r3, [r7, #24]
 800c85a:	3302      	adds	r3, #2
 800c85c:	61bb      	str	r3, [r7, #24]
 800c85e:	e007      	b.n	800c870 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	781a      	ldrb	r2, [r3, #0]
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	3301      	adds	r3, #1
 800c86e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c876:	b29b      	uxth	r3, r3
 800c878:	3b01      	subs	r3, #1
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c888:	b29b      	uxth	r3, r3
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1c8      	bne.n	800c820 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	9300      	str	r3, [sp, #0]
 800c892:	697b      	ldr	r3, [r7, #20]
 800c894:	2200      	movs	r2, #0
 800c896:	2140      	movs	r1, #64	@ 0x40
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f000 fb4f 	bl	800cf3c <UART_WaitOnFlagUntilTimeout>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d005      	beq.n	800c8b0 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2220      	movs	r2, #32
 800c8a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c8ac:	2303      	movs	r3, #3
 800c8ae:	e006      	b.n	800c8be <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	2220      	movs	r2, #32
 800c8b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	e000      	b.n	800c8be <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800c8bc:	2302      	movs	r3, #2
  }
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3720      	adds	r7, #32
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
	...

0800c8c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c8c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8cc:	b094      	sub	sp, #80	@ 0x50
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800c8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	4b78      	ldr	r3, [pc, #480]	@ (800cac0 <UART_SetConfig+0x1f8>)
 800c8de:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e2:	689a      	ldr	r2, [r3, #8]
 800c8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e6:	691b      	ldr	r3, [r3, #16]
 800c8e8:	431a      	orrs	r2, r3
 800c8ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ec:	695b      	ldr	r3, [r3, #20]
 800c8ee:	431a      	orrs	r2, r3
 800c8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f2:	69db      	ldr	r3, [r3, #28]
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c8f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4971      	ldr	r1, [pc, #452]	@ (800cac4 <UART_SetConfig+0x1fc>)
 800c900:	4019      	ands	r1, r3
 800c902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c908:	430b      	orrs	r3, r1
 800c90a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c90c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	685b      	ldr	r3, [r3, #4]
 800c912:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800c916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c918:	68d9      	ldr	r1, [r3, #12]
 800c91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c91c:	681a      	ldr	r2, [r3, #0]
 800c91e:	ea40 0301 	orr.w	r3, r0, r1
 800c922:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c92a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	4b64      	ldr	r3, [pc, #400]	@ (800cac0 <UART_SetConfig+0x1f8>)
 800c930:	429a      	cmp	r2, r3
 800c932:	d009      	beq.n	800c948 <UART_SetConfig+0x80>
 800c934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	4b63      	ldr	r3, [pc, #396]	@ (800cac8 <UART_SetConfig+0x200>)
 800c93a:	429a      	cmp	r2, r3
 800c93c:	d004      	beq.n	800c948 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c93e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c940:	6a1a      	ldr	r2, [r3, #32]
 800c942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c944:	4313      	orrs	r3, r2
 800c946:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800c952:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800c956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c95c:	430b      	orrs	r3, r1
 800c95e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c966:	f023 000f 	bic.w	r0, r3, #15
 800c96a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c96c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800c96e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c970:	681a      	ldr	r2, [r3, #0]
 800c972:	ea40 0301 	orr.w	r3, r0, r1
 800c976:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	4b53      	ldr	r3, [pc, #332]	@ (800cacc <UART_SetConfig+0x204>)
 800c97e:	429a      	cmp	r2, r3
 800c980:	d102      	bne.n	800c988 <UART_SetConfig+0xc0>
 800c982:	2301      	movs	r3, #1
 800c984:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c986:	e066      	b.n	800ca56 <UART_SetConfig+0x18e>
 800c988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	4b50      	ldr	r3, [pc, #320]	@ (800cad0 <UART_SetConfig+0x208>)
 800c98e:	429a      	cmp	r2, r3
 800c990:	d102      	bne.n	800c998 <UART_SetConfig+0xd0>
 800c992:	2302      	movs	r3, #2
 800c994:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c996:	e05e      	b.n	800ca56 <UART_SetConfig+0x18e>
 800c998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	4b4d      	ldr	r3, [pc, #308]	@ (800cad4 <UART_SetConfig+0x20c>)
 800c99e:	429a      	cmp	r2, r3
 800c9a0:	d102      	bne.n	800c9a8 <UART_SetConfig+0xe0>
 800c9a2:	2304      	movs	r3, #4
 800c9a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9a6:	e056      	b.n	800ca56 <UART_SetConfig+0x18e>
 800c9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	4b4a      	ldr	r3, [pc, #296]	@ (800cad8 <UART_SetConfig+0x210>)
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d102      	bne.n	800c9b8 <UART_SetConfig+0xf0>
 800c9b2:	2308      	movs	r3, #8
 800c9b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9b6:	e04e      	b.n	800ca56 <UART_SetConfig+0x18e>
 800c9b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	4b47      	ldr	r3, [pc, #284]	@ (800cadc <UART_SetConfig+0x214>)
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d102      	bne.n	800c9c8 <UART_SetConfig+0x100>
 800c9c2:	2310      	movs	r3, #16
 800c9c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9c6:	e046      	b.n	800ca56 <UART_SetConfig+0x18e>
 800c9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ca:	681a      	ldr	r2, [r3, #0]
 800c9cc:	4b44      	ldr	r3, [pc, #272]	@ (800cae0 <UART_SetConfig+0x218>)
 800c9ce:	429a      	cmp	r2, r3
 800c9d0:	d102      	bne.n	800c9d8 <UART_SetConfig+0x110>
 800c9d2:	2320      	movs	r3, #32
 800c9d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9d6:	e03e      	b.n	800ca56 <UART_SetConfig+0x18e>
 800c9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9da:	681a      	ldr	r2, [r3, #0]
 800c9dc:	4b41      	ldr	r3, [pc, #260]	@ (800cae4 <UART_SetConfig+0x21c>)
 800c9de:	429a      	cmp	r2, r3
 800c9e0:	d102      	bne.n	800c9e8 <UART_SetConfig+0x120>
 800c9e2:	2340      	movs	r3, #64	@ 0x40
 800c9e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9e6:	e036      	b.n	800ca56 <UART_SetConfig+0x18e>
 800c9e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	4b3e      	ldr	r3, [pc, #248]	@ (800cae8 <UART_SetConfig+0x220>)
 800c9ee:	429a      	cmp	r2, r3
 800c9f0:	d102      	bne.n	800c9f8 <UART_SetConfig+0x130>
 800c9f2:	2380      	movs	r3, #128	@ 0x80
 800c9f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c9f6:	e02e      	b.n	800ca56 <UART_SetConfig+0x18e>
 800c9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	4b3b      	ldr	r3, [pc, #236]	@ (800caec <UART_SetConfig+0x224>)
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d103      	bne.n	800ca0a <UART_SetConfig+0x142>
 800ca02:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca06:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca08:	e025      	b.n	800ca56 <UART_SetConfig+0x18e>
 800ca0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	4b38      	ldr	r3, [pc, #224]	@ (800caf0 <UART_SetConfig+0x228>)
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d103      	bne.n	800ca1c <UART_SetConfig+0x154>
 800ca14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ca18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca1a:	e01c      	b.n	800ca56 <UART_SetConfig+0x18e>
 800ca1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	4b34      	ldr	r3, [pc, #208]	@ (800caf4 <UART_SetConfig+0x22c>)
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d103      	bne.n	800ca2e <UART_SetConfig+0x166>
 800ca26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca2c:	e013      	b.n	800ca56 <UART_SetConfig+0x18e>
 800ca2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca30:	681a      	ldr	r2, [r3, #0]
 800ca32:	4b31      	ldr	r3, [pc, #196]	@ (800caf8 <UART_SetConfig+0x230>)
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d103      	bne.n	800ca40 <UART_SetConfig+0x178>
 800ca38:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ca3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca3e:	e00a      	b.n	800ca56 <UART_SetConfig+0x18e>
 800ca40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	4b1e      	ldr	r3, [pc, #120]	@ (800cac0 <UART_SetConfig+0x1f8>)
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d103      	bne.n	800ca52 <UART_SetConfig+0x18a>
 800ca4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca50:	e001      	b.n	800ca56 <UART_SetConfig+0x18e>
 800ca52:	2300      	movs	r3, #0
 800ca54:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ca56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca58:	681a      	ldr	r2, [r3, #0]
 800ca5a:	4b19      	ldr	r3, [pc, #100]	@ (800cac0 <UART_SetConfig+0x1f8>)
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d005      	beq.n	800ca6c <UART_SetConfig+0x1a4>
 800ca60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	4b18      	ldr	r3, [pc, #96]	@ (800cac8 <UART_SetConfig+0x200>)
 800ca66:	429a      	cmp	r2, r3
 800ca68:	f040 8094 	bne.w	800cb94 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ca6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca6e:	2200      	movs	r2, #0
 800ca70:	623b      	str	r3, [r7, #32]
 800ca72:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca74:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800ca78:	f7fc fbea 	bl	8009250 <HAL_RCCEx_GetPeriphCLKFreq>
 800ca7c:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800ca7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f000 80f7 	beq.w	800cc74 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ca86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca8a:	4a1c      	ldr	r2, [pc, #112]	@ (800cafc <UART_SetConfig+0x234>)
 800ca8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca90:	461a      	mov	r2, r3
 800ca92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca94:	fbb3 f3f2 	udiv	r3, r3, r2
 800ca98:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ca9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca9c:	685a      	ldr	r2, [r3, #4]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	005b      	lsls	r3, r3, #1
 800caa2:	4413      	add	r3, r2
 800caa4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d305      	bcc.n	800cab6 <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800caaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d924      	bls.n	800cb00 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800cab6:	2301      	movs	r3, #1
 800cab8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800cabc:	e069      	b.n	800cb92 <UART_SetConfig+0x2ca>
 800cabe:	bf00      	nop
 800cac0:	44002400 	.word	0x44002400
 800cac4:	cfff69f3 	.word	0xcfff69f3
 800cac8:	54002400 	.word	0x54002400
 800cacc:	40013800 	.word	0x40013800
 800cad0:	40004400 	.word	0x40004400
 800cad4:	40004800 	.word	0x40004800
 800cad8:	40004c00 	.word	0x40004c00
 800cadc:	40005000 	.word	0x40005000
 800cae0:	40006400 	.word	0x40006400
 800cae4:	40007800 	.word	0x40007800
 800cae8:	40007c00 	.word	0x40007c00
 800caec:	40008000 	.word	0x40008000
 800caf0:	40006800 	.word	0x40006800
 800caf4:	40006c00 	.word	0x40006c00
 800caf8:	40008400 	.word	0x40008400
 800cafc:	08013b74 	.word	0x08013b74
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cb00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb02:	2200      	movs	r2, #0
 800cb04:	61bb      	str	r3, [r7, #24]
 800cb06:	61fa      	str	r2, [r7, #28]
 800cb08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb0c:	4a64      	ldr	r2, [pc, #400]	@ (800cca0 <UART_SetConfig+0x3d8>)
 800cb0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	2200      	movs	r2, #0
 800cb16:	613b      	str	r3, [r7, #16]
 800cb18:	617a      	str	r2, [r7, #20]
 800cb1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cb1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cb22:	f7f3 fbb3 	bl	800028c <__aeabi_uldivmod>
 800cb26:	4602      	mov	r2, r0
 800cb28:	460b      	mov	r3, r1
 800cb2a:	4610      	mov	r0, r2
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	f04f 0200 	mov.w	r2, #0
 800cb32:	f04f 0300 	mov.w	r3, #0
 800cb36:	020b      	lsls	r3, r1, #8
 800cb38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cb3c:	0202      	lsls	r2, r0, #8
 800cb3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cb40:	6849      	ldr	r1, [r1, #4]
 800cb42:	0849      	lsrs	r1, r1, #1
 800cb44:	2000      	movs	r0, #0
 800cb46:	460c      	mov	r4, r1
 800cb48:	4605      	mov	r5, r0
 800cb4a:	eb12 0804 	adds.w	r8, r2, r4
 800cb4e:	eb43 0905 	adc.w	r9, r3, r5
 800cb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb54:	685b      	ldr	r3, [r3, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	60bb      	str	r3, [r7, #8]
 800cb5a:	60fa      	str	r2, [r7, #12]
 800cb5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cb60:	4640      	mov	r0, r8
 800cb62:	4649      	mov	r1, r9
 800cb64:	f7f3 fb92 	bl	800028c <__aeabi_uldivmod>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	4613      	mov	r3, r2
 800cb6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cb70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb76:	d308      	bcc.n	800cb8a <UART_SetConfig+0x2c2>
 800cb78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cb7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb7e:	d204      	bcs.n	800cb8a <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800cb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800cb86:	60da      	str	r2, [r3, #12]
 800cb88:	e003      	b.n	800cb92 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800cb90:	e070      	b.n	800cc74 <UART_SetConfig+0x3ac>
 800cb92:	e06f      	b.n	800cc74 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb96:	69db      	ldr	r3, [r3, #28]
 800cb98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cb9c:	d13c      	bne.n	800cc18 <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cb9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cba0:	2200      	movs	r2, #0
 800cba2:	603b      	str	r3, [r7, #0]
 800cba4:	607a      	str	r2, [r7, #4]
 800cba6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cbaa:	f7fc fb51 	bl	8009250 <HAL_RCCEx_GetPeriphCLKFreq>
 800cbae:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cbb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d05e      	beq.n	800cc74 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cbb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbba:	4a39      	ldr	r2, [pc, #228]	@ (800cca0 <UART_SetConfig+0x3d8>)
 800cbbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800cbc8:	005a      	lsls	r2, r3, #1
 800cbca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbcc:	685b      	ldr	r3, [r3, #4]
 800cbce:	085b      	lsrs	r3, r3, #1
 800cbd0:	441a      	add	r2, r3
 800cbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cbdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbde:	2b0f      	cmp	r3, #15
 800cbe0:	d916      	bls.n	800cc10 <UART_SetConfig+0x348>
 800cbe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cbe8:	d212      	bcs.n	800cc10 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cbea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbec:	b29b      	uxth	r3, r3
 800cbee:	f023 030f 	bic.w	r3, r3, #15
 800cbf2:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cbf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbf6:	085b      	lsrs	r3, r3, #1
 800cbf8:	b29b      	uxth	r3, r3
 800cbfa:	f003 0307 	and.w	r3, r3, #7
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cc02:	4313      	orrs	r3, r2
 800cc04:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800cc06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800cc0c:	60da      	str	r2, [r3, #12]
 800cc0e:	e031      	b.n	800cc74 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800cc10:	2301      	movs	r3, #1
 800cc12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800cc16:	e02d      	b.n	800cc74 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800cc18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	469a      	mov	sl, r3
 800cc1e:	4693      	mov	fp, r2
 800cc20:	4650      	mov	r0, sl
 800cc22:	4659      	mov	r1, fp
 800cc24:	f7fc fb14 	bl	8009250 <HAL_RCCEx_GetPeriphCLKFreq>
 800cc28:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800cc2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d021      	beq.n	800cc74 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc34:	4a1a      	ldr	r2, [pc, #104]	@ (800cca0 <UART_SetConfig+0x3d8>)
 800cc36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc3a:	461a      	mov	r2, r3
 800cc3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cc3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	085b      	lsrs	r3, r3, #1
 800cc48:	441a      	add	r2, r3
 800cc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc52:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc56:	2b0f      	cmp	r3, #15
 800cc58:	d909      	bls.n	800cc6e <UART_SetConfig+0x3a6>
 800cc5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cc60:	d205      	bcs.n	800cc6e <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc64:	b29a      	uxth	r2, r3
 800cc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	60da      	str	r2, [r3, #12]
 800cc6c:	e002      	b.n	800cc74 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cc74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc76:	2201      	movs	r2, #1
 800cc78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800cc7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc7e:	2201      	movs	r2, #1
 800cc80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc86:	2200      	movs	r2, #0
 800cc88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800cc8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800cc90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3750      	adds	r7, #80	@ 0x50
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc9e:	bf00      	nop
 800cca0:	08013b74 	.word	0x08013b74

0800cca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccb0:	f003 0308 	and.w	r3, r3, #8
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d00a      	beq.n	800ccce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	430a      	orrs	r2, r1
 800cccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccd2:	f003 0301 	and.w	r3, r3, #1
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00a      	beq.n	800ccf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	430a      	orrs	r2, r1
 800ccee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf4:	f003 0302 	and.w	r3, r3, #2
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00a      	beq.n	800cd12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	430a      	orrs	r2, r1
 800cd10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd16:	f003 0304 	and.w	r3, r3, #4
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00a      	beq.n	800cd34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	430a      	orrs	r2, r1
 800cd32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd38:	f003 0310 	and.w	r3, r3, #16
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d00a      	beq.n	800cd56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	689b      	ldr	r3, [r3, #8]
 800cd46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	430a      	orrs	r2, r1
 800cd54:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd5a:	f003 0320 	and.w	r3, r3, #32
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d00a      	beq.n	800cd78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	430a      	orrs	r2, r1
 800cd76:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d01a      	beq.n	800cdba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	430a      	orrs	r2, r1
 800cd98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cda2:	d10a      	bne.n	800cdba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	685b      	ldr	r3, [r3, #4]
 800cdaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	430a      	orrs	r2, r1
 800cdb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d00a      	beq.n	800cddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	685b      	ldr	r3, [r3, #4]
 800cdcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	430a      	orrs	r2, r1
 800cdda:	605a      	str	r2, [r3, #4]
  }
}
 800cddc:	bf00      	nop
 800cdde:	370c      	adds	r7, #12
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b098      	sub	sp, #96	@ 0x60
 800cdec:	af02      	add	r7, sp, #8
 800cdee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdf8:	f7f6 f8de 	bl	8002fb8 <HAL_GetTick>
 800cdfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f003 0308 	and.w	r3, r3, #8
 800ce08:	2b08      	cmp	r3, #8
 800ce0a:	d12f      	bne.n	800ce6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce10:	9300      	str	r3, [sp, #0]
 800ce12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce14:	2200      	movs	r2, #0
 800ce16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 f88e 	bl	800cf3c <UART_WaitOnFlagUntilTimeout>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d022      	beq.n	800ce6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce2e:	e853 3f00 	ldrex	r3, [r3]
 800ce32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ce34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ce3a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	461a      	mov	r2, r3
 800ce42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce44:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ce4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce4c:	e841 2300 	strex	r3, r2, [r1]
 800ce50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ce52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d1e6      	bne.n	800ce26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2220      	movs	r2, #32
 800ce5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce68:	2303      	movs	r3, #3
 800ce6a:	e063      	b.n	800cf34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	f003 0304 	and.w	r3, r3, #4
 800ce76:	2b04      	cmp	r3, #4
 800ce78:	d149      	bne.n	800cf0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ce7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ce7e:	9300      	str	r3, [sp, #0]
 800ce80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce82:	2200      	movs	r2, #0
 800ce84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 f857 	bl	800cf3c <UART_WaitOnFlagUntilTimeout>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d03c      	beq.n	800cf0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce9c:	e853 3f00 	ldrex	r3, [r3]
 800cea0:	623b      	str	r3, [r7, #32]
   return(result);
 800cea2:	6a3b      	ldr	r3, [r7, #32]
 800cea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ceb2:	633b      	str	r3, [r7, #48]	@ 0x30
 800ceb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ceb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceba:	e841 2300 	strex	r3, r2, [r1]
 800cebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1e6      	bne.n	800ce94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3308      	adds	r3, #8
 800cecc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	e853 3f00 	ldrex	r3, [r3]
 800ced4:	60fb      	str	r3, [r7, #12]
   return(result);
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f023 0301 	bic.w	r3, r3, #1
 800cedc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	3308      	adds	r3, #8
 800cee4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cee6:	61fa      	str	r2, [r7, #28]
 800cee8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceea:	69b9      	ldr	r1, [r7, #24]
 800ceec:	69fa      	ldr	r2, [r7, #28]
 800ceee:	e841 2300 	strex	r3, r2, [r1]
 800cef2:	617b      	str	r3, [r7, #20]
   return(result);
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d1e5      	bne.n	800cec6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2220      	movs	r2, #32
 800cefe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2200      	movs	r2, #0
 800cf06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cf0a:	2303      	movs	r3, #3
 800cf0c:	e012      	b.n	800cf34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2220      	movs	r2, #32
 800cf12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2220      	movs	r2, #32
 800cf1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf32:	2300      	movs	r3, #0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3758      	adds	r7, #88	@ 0x58
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b084      	sub	sp, #16
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	603b      	str	r3, [r7, #0]
 800cf48:	4613      	mov	r3, r2
 800cf4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf4c:	e04f      	b.n	800cfee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf54:	d04b      	beq.n	800cfee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cf56:	f7f6 f82f 	bl	8002fb8 <HAL_GetTick>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	1ad3      	subs	r3, r2, r3
 800cf60:	69ba      	ldr	r2, [r7, #24]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d302      	bcc.n	800cf6c <UART_WaitOnFlagUntilTimeout+0x30>
 800cf66:	69bb      	ldr	r3, [r7, #24]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d101      	bne.n	800cf70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cf6c:	2303      	movs	r3, #3
 800cf6e:	e04e      	b.n	800d00e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f003 0304 	and.w	r3, r3, #4
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d037      	beq.n	800cfee <UART_WaitOnFlagUntilTimeout+0xb2>
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	2b80      	cmp	r3, #128	@ 0x80
 800cf82:	d034      	beq.n	800cfee <UART_WaitOnFlagUntilTimeout+0xb2>
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	2b40      	cmp	r3, #64	@ 0x40
 800cf88:	d031      	beq.n	800cfee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	69db      	ldr	r3, [r3, #28]
 800cf90:	f003 0308 	and.w	r3, r3, #8
 800cf94:	2b08      	cmp	r3, #8
 800cf96:	d110      	bne.n	800cfba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2208      	movs	r2, #8
 800cf9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfa0:	68f8      	ldr	r0, [r7, #12]
 800cfa2:	f000 f838 	bl	800d016 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2208      	movs	r2, #8
 800cfaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e029      	b.n	800d00e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	69db      	ldr	r3, [r3, #28]
 800cfc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cfc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cfc8:	d111      	bne.n	800cfee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cfd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f000 f81e 	bl	800d016 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2220      	movs	r2, #32
 800cfde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cfea:	2303      	movs	r3, #3
 800cfec:	e00f      	b.n	800d00e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	69da      	ldr	r2, [r3, #28]
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	4013      	ands	r3, r2
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	bf0c      	ite	eq
 800cffe:	2301      	moveq	r3, #1
 800d000:	2300      	movne	r3, #0
 800d002:	b2db      	uxtb	r3, r3
 800d004:	461a      	mov	r2, r3
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d0a0      	beq.n	800cf4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d016:	b480      	push	{r7}
 800d018:	b095      	sub	sp, #84	@ 0x54
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d026:	e853 3f00 	ldrex	r3, [r3]
 800d02a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d032:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	461a      	mov	r2, r3
 800d03a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d03c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d03e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d040:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d042:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d044:	e841 2300 	strex	r3, r2, [r1]
 800d048:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1e6      	bne.n	800d01e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	3308      	adds	r3, #8
 800d056:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	e853 3f00 	ldrex	r3, [r3]
 800d05e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d066:	f023 0301 	bic.w	r3, r3, #1
 800d06a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	3308      	adds	r3, #8
 800d072:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d074:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d076:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d07a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d07c:	e841 2300 	strex	r3, r2, [r1]
 800d080:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d084:	2b00      	cmp	r3, #0
 800d086:	d1e3      	bne.n	800d050 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d08c:	2b01      	cmp	r3, #1
 800d08e:	d118      	bne.n	800d0c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	e853 3f00 	ldrex	r3, [r3]
 800d09c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	f023 0310 	bic.w	r3, r3, #16
 800d0a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0ae:	61bb      	str	r3, [r7, #24]
 800d0b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b2:	6979      	ldr	r1, [r7, #20]
 800d0b4:	69ba      	ldr	r2, [r7, #24]
 800d0b6:	e841 2300 	strex	r3, r2, [r1]
 800d0ba:	613b      	str	r3, [r7, #16]
   return(result);
 800d0bc:	693b      	ldr	r3, [r7, #16]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d1e6      	bne.n	800d090 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2220      	movs	r2, #32
 800d0c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d0d6:	bf00      	nop
 800d0d8:	3754      	adds	r7, #84	@ 0x54
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr

0800d0e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d0e2:	b480      	push	{r7}
 800d0e4:	b085      	sub	sp, #20
 800d0e6:	af00      	add	r7, sp, #0
 800d0e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d101      	bne.n	800d0f8 <HAL_UARTEx_DisableFifoMode+0x16>
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	e027      	b.n	800d148 <HAL_UARTEx_DisableFifoMode+0x66>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2224      	movs	r2, #36	@ 0x24
 800d104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	681a      	ldr	r2, [r3, #0]
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f022 0201 	bic.w	r2, r2, #1
 800d11e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d126:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	68fa      	ldr	r2, [r7, #12]
 800d134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2220      	movs	r2, #32
 800d13a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	2200      	movs	r2, #0
 800d142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3714      	adds	r7, #20
 800d14c:	46bd      	mov	sp, r7
 800d14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d152:	4770      	bx	lr

0800d154 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d164:	2b01      	cmp	r3, #1
 800d166:	d101      	bne.n	800d16c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d168:	2302      	movs	r3, #2
 800d16a:	e02d      	b.n	800d1c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2201      	movs	r2, #1
 800d170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2224      	movs	r2, #36	@ 0x24
 800d178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	681a      	ldr	r2, [r3, #0]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f022 0201 	bic.w	r2, r2, #1
 800d192:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	683a      	ldr	r2, [r7, #0]
 800d1a4:	430a      	orrs	r2, r1
 800d1a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f000 f84f 	bl	800d24c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2220      	movs	r2, #32
 800d1ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d1c6:	2300      	movs	r3, #0
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3710      	adds	r7, #16
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d101      	bne.n	800d1e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d1e4:	2302      	movs	r3, #2
 800d1e6:	e02d      	b.n	800d244 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2224      	movs	r2, #36	@ 0x24
 800d1f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	681a      	ldr	r2, [r3, #0]
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f022 0201 	bic.w	r2, r2, #1
 800d20e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	689b      	ldr	r3, [r3, #8]
 800d216:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	683a      	ldr	r2, [r7, #0]
 800d220:	430a      	orrs	r2, r1
 800d222:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 f811 	bl	800d24c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	68fa      	ldr	r2, [r7, #12]
 800d230:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2220      	movs	r2, #32
 800d236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2200      	movs	r2, #0
 800d23e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d242:	2300      	movs	r3, #0
}
 800d244:	4618      	mov	r0, r3
 800d246:	3710      	adds	r7, #16
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}

0800d24c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b085      	sub	sp, #20
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d108      	bne.n	800d26e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2201      	movs	r2, #1
 800d260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2201      	movs	r2, #1
 800d268:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d26c:	e031      	b.n	800d2d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d26e:	2308      	movs	r3, #8
 800d270:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d272:	2308      	movs	r3, #8
 800d274:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	0e5b      	lsrs	r3, r3, #25
 800d27e:	b2db      	uxtb	r3, r3
 800d280:	f003 0307 	and.w	r3, r3, #7
 800d284:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	689b      	ldr	r3, [r3, #8]
 800d28c:	0f5b      	lsrs	r3, r3, #29
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	f003 0307 	and.w	r3, r3, #7
 800d294:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d296:	7bbb      	ldrb	r3, [r7, #14]
 800d298:	7b3a      	ldrb	r2, [r7, #12]
 800d29a:	4911      	ldr	r1, [pc, #68]	@ (800d2e0 <UARTEx_SetNbDataToProcess+0x94>)
 800d29c:	5c8a      	ldrb	r2, [r1, r2]
 800d29e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d2a2:	7b3a      	ldrb	r2, [r7, #12]
 800d2a4:	490f      	ldr	r1, [pc, #60]	@ (800d2e4 <UARTEx_SetNbDataToProcess+0x98>)
 800d2a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d2a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2ac:	b29a      	uxth	r2, r3
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2b4:	7bfb      	ldrb	r3, [r7, #15]
 800d2b6:	7b7a      	ldrb	r2, [r7, #13]
 800d2b8:	4909      	ldr	r1, [pc, #36]	@ (800d2e0 <UARTEx_SetNbDataToProcess+0x94>)
 800d2ba:	5c8a      	ldrb	r2, [r1, r2]
 800d2bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d2c0:	7b7a      	ldrb	r2, [r7, #13]
 800d2c2:	4908      	ldr	r1, [pc, #32]	@ (800d2e4 <UARTEx_SetNbDataToProcess+0x98>)
 800d2c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d2c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d2ca:	b29a      	uxth	r2, r3
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d2d2:	bf00      	nop
 800d2d4:	3714      	adds	r7, #20
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2dc:	4770      	bx	lr
 800d2de:	bf00      	nop
 800d2e0:	08013b8c 	.word	0x08013b8c
 800d2e4:	08013b94 	.word	0x08013b94

0800d2e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	b083      	sub	sp, #12
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d300:	f043 0201 	orr.w	r2, r3, #1
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d308:	2300      	movs	r3, #0
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	370c      	adds	r7, #12
 800d30e:	46bd      	mov	sp, r7
 800d310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d314:	4770      	bx	lr

0800d316 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800d316:	b084      	sub	sp, #16
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	f107 001c 	add.w	r0, r7, #28
 800d324:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d101      	bne.n	800d332 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800d32e:	2301      	movs	r3, #1
 800d330:	e008      	b.n	800d344 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f7ff ffd8 	bl	800d2e8 <USB_CoreReset>
 800d338:	4603      	mov	r3, r0
 800d33a:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800d342:	7bfb      	ldrb	r3, [r7, #15]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3710      	adds	r7, #16
 800d348:	46bd      	mov	sp, r7
 800d34a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d34e:	b004      	add	sp, #16
 800d350:	4770      	bx	lr

0800d352 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800d352:	b480      	push	{r7}
 800d354:	b085      	sub	sp, #20
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2200      	movs	r2, #0
 800d35e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d360:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d364:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3714      	adds	r7, #20
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr

0800d37a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800d37a:	b480      	push	{r7}
 800d37c:	b085      	sub	sp, #20
 800d37e:	af00      	add	r7, sp, #0
 800d380:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d382:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d386:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	43db      	mvns	r3, r3
 800d390:	401a      	ands	r2, r3
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3714      	adds	r7, #20
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800d3b0:	78fb      	ldrb	r3, [r7, #3]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d106      	bne.n	800d3c4 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	641a      	str	r2, [r3, #64]	@ 0x40
 800d3c2:	e00b      	b.n	800d3dc <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800d3c4:	78fb      	ldrb	r3, [r7, #3]
 800d3c6:	2b01      	cmp	r3, #1
 800d3c8:	d106      	bne.n	800d3d8 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	641a      	str	r2, [r3, #64]	@ 0x40
 800d3d6:	e001      	b.n	800d3dc <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800d3d8:	2301      	movs	r3, #1
 800d3da:	e000      	b.n	800d3de <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	370c      	adds	r7, #12
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr

0800d3ea <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b084      	sub	sp, #16
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	f107 001c 	add.w	r0, r7, #28
 800d3f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2201      	movs	r2, #1
 800d400:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d406:	f023 0201 	bic.w	r2, r3, #1
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800d40e:	2100      	movs	r1, #0
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f7ff ffc7 	bl	800d3a4 <USB_SetCurrentMode>
 800d416:	4603      	mov	r3, r0
 800d418:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2200      	movs	r2, #0
 800d41e:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800d420:	7bfb      	ldrb	r3, [r7, #15]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d42c:	b004      	add	sp, #16
 800d42e:	4770      	bx	lr

0800d430 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d430:	b480      	push	{r7}
 800d432:	b09f      	sub	sp, #124	@ 0x7c
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d43a:	2300      	movs	r3, #0
 800d43c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d440:	687a      	ldr	r2, [r7, #4]
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	781b      	ldrb	r3, [r3, #0]
 800d446:	009b      	lsls	r3, r3, #2
 800d448:	4413      	add	r3, r2
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	4ba0      	ldr	r3, [pc, #640]	@ (800d6d0 <USB_ActivateEndpoint+0x2a0>)
 800d44e:	4013      	ands	r3, r2
 800d450:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	78db      	ldrb	r3, [r3, #3]
 800d456:	2b03      	cmp	r3, #3
 800d458:	d819      	bhi.n	800d48e <USB_ActivateEndpoint+0x5e>
 800d45a:	a201      	add	r2, pc, #4	@ (adr r2, 800d460 <USB_ActivateEndpoint+0x30>)
 800d45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d460:	0800d471 	.word	0x0800d471
 800d464:	0800d485 	.word	0x0800d485
 800d468:	0800d497 	.word	0x0800d497
 800d46c:	0800d47b 	.word	0x0800d47b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d470:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d472:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d476:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800d478:	e00e      	b.n	800d498 <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d47a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d47c:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800d480:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800d482:	e009      	b.n	800d498 <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d484:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d486:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d48a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800d48c:	e004      	b.n	800d498 <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800d48e:	2301      	movs	r3, #1
 800d490:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800d494:	e000      	b.n	800d498 <USB_ActivateEndpoint+0x68>
      break;
 800d496:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800d498:	687a      	ldr	r2, [r7, #4]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	781b      	ldrb	r3, [r3, #0]
 800d49e:	009b      	lsls	r3, r3, #2
 800d4a0:	441a      	add	r2, r3
 800d4a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4ac:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d4ae:	687a      	ldr	r2, [r7, #4]
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	781b      	ldrb	r3, [r3, #0]
 800d4b4:	009b      	lsls	r3, r3, #2
 800d4b6:	4413      	add	r3, r2
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	4b86      	ldr	r3, [pc, #536]	@ (800d6d4 <USB_ActivateEndpoint+0x2a4>)
 800d4bc:	4013      	ands	r3, r2
 800d4be:	683a      	ldr	r2, [r7, #0]
 800d4c0:	7812      	ldrb	r2, [r2, #0]
 800d4c2:	4313      	orrs	r3, r2
 800d4c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d4c6:	687a      	ldr	r2, [r7, #4]
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	781b      	ldrb	r3, [r3, #0]
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	441a      	add	r2, r3
 800d4d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d4d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4da:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	7b1b      	ldrb	r3, [r3, #12]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	f040 8177 	bne.w	800d7d4 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	785b      	ldrb	r3, [r3, #1]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d079      	beq.n	800d5e2 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	00db      	lsls	r3, r3, #3
 800d4f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4fc:	681a      	ldr	r2, [r3, #0]
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	781b      	ldrb	r3, [r3, #0]
 800d502:	00db      	lsls	r3, r3, #3
 800d504:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d508:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d50c:	0c12      	lsrs	r2, r2, #16
 800d50e:	0412      	lsls	r2, r2, #16
 800d510:	601a      	str	r2, [r3, #0]
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d51c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d520:	6819      	ldr	r1, [r3, #0]
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	88db      	ldrh	r3, [r3, #6]
 800d526:	089b      	lsrs	r3, r3, #2
 800d528:	b29b      	uxth	r3, r3
 800d52a:	009a      	lsls	r2, r3, #2
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	00db      	lsls	r3, r3, #3
 800d532:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d536:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d53a:	430a      	orrs	r2, r1
 800d53c:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d53e:	687a      	ldr	r2, [r7, #4]
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	781b      	ldrb	r3, [r3, #0]
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	4413      	add	r3, r2
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	61bb      	str	r3, [r7, #24]
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d552:	2b00      	cmp	r3, #0
 800d554:	d013      	beq.n	800d57e <USB_ActivateEndpoint+0x14e>
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	009b      	lsls	r3, r3, #2
 800d55e:	4413      	add	r3, r2
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	4b5c      	ldr	r3, [pc, #368]	@ (800d6d4 <USB_ActivateEndpoint+0x2a4>)
 800d564:	4013      	ands	r3, r2
 800d566:	617b      	str	r3, [r7, #20]
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	441a      	add	r2, r3
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d578:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d57c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	78db      	ldrb	r3, [r3, #3]
 800d582:	2b01      	cmp	r3, #1
 800d584:	d018      	beq.n	800d5b8 <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	4413      	add	r3, r2
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	4b51      	ldr	r3, [pc, #324]	@ (800d6d8 <USB_ActivateEndpoint+0x2a8>)
 800d594:	4013      	ands	r3, r2
 800d596:	60fb      	str	r3, [r7, #12]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f083 0320 	eor.w	r3, r3, #32
 800d59e:	60fb      	str	r3, [r7, #12]
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	441a      	add	r2, r3
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5b4:	6013      	str	r3, [r2, #0]
 800d5b6:	e28c      	b.n	800dad2 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	009b      	lsls	r3, r3, #2
 800d5c0:	4413      	add	r3, r2
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	4b44      	ldr	r3, [pc, #272]	@ (800d6d8 <USB_ActivateEndpoint+0x2a8>)
 800d5c6:	4013      	ands	r3, r2
 800d5c8:	613b      	str	r3, [r7, #16]
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	441a      	add	r2, r3
 800d5d4:	693b      	ldr	r3, [r7, #16]
 800d5d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d5da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5de:	6013      	str	r3, [r2, #0]
 800d5e0:	e277      	b.n	800dad2 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	781b      	ldrb	r3, [r3, #0]
 800d5e6:	00db      	lsls	r3, r3, #3
 800d5e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5f0:	685a      	ldr	r2, [r3, #4]
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	781b      	ldrb	r3, [r3, #0]
 800d5f6:	00db      	lsls	r3, r3, #3
 800d5f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d600:	0c12      	lsrs	r2, r2, #16
 800d602:	0412      	lsls	r2, r2, #16
 800d604:	605a      	str	r2, [r3, #4]
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	00db      	lsls	r3, r3, #3
 800d60c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d610:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d614:	6859      	ldr	r1, [r3, #4]
 800d616:	683b      	ldr	r3, [r7, #0]
 800d618:	88db      	ldrh	r3, [r3, #6]
 800d61a:	089b      	lsrs	r3, r3, #2
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	009a      	lsls	r2, r3, #2
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	781b      	ldrb	r3, [r3, #0]
 800d624:	00db      	lsls	r3, r3, #3
 800d626:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d62a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d62e:	430a      	orrs	r2, r1
 800d630:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	00db      	lsls	r3, r3, #3
 800d638:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d63c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d640:	685a      	ldr	r2, [r3, #4]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	00db      	lsls	r3, r3, #3
 800d648:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d64c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d650:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d654:	605a      	str	r2, [r3, #4]
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	691b      	ldr	r3, [r3, #16]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d112      	bne.n	800d684 <USB_ActivateEndpoint+0x254>
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	00db      	lsls	r3, r3, #3
 800d664:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d668:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d66c:	685a      	ldr	r2, [r3, #4]
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	00db      	lsls	r3, r3, #3
 800d674:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d678:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d67c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d680:	605a      	str	r2, [r3, #4]
 800d682:	e04d      	b.n	800d720 <USB_ActivateEndpoint+0x2f0>
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	691b      	ldr	r3, [r3, #16]
 800d688:	2b3e      	cmp	r3, #62	@ 0x3e
 800d68a:	d827      	bhi.n	800d6dc <USB_ActivateEndpoint+0x2ac>
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	691b      	ldr	r3, [r3, #16]
 800d690:	085b      	lsrs	r3, r3, #1
 800d692:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	f003 0301 	and.w	r3, r3, #1
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d002      	beq.n	800d6a6 <USB_ActivateEndpoint+0x276>
 800d6a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	00db      	lsls	r3, r3, #3
 800d6ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6b4:	6859      	ldr	r1, [r3, #4]
 800d6b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6b8:	069a      	lsls	r2, r3, #26
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	00db      	lsls	r3, r3, #3
 800d6c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6c8:	430a      	orrs	r2, r1
 800d6ca:	605a      	str	r2, [r3, #4]
 800d6cc:	e028      	b.n	800d720 <USB_ActivateEndpoint+0x2f0>
 800d6ce:	bf00      	nop
 800d6d0:	07ff898f 	.word	0x07ff898f
 800d6d4:	07ff8f8f 	.word	0x07ff8f8f
 800d6d8:	07ff8fbf 	.word	0x07ff8fbf
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	691b      	ldr	r3, [r3, #16]
 800d6e0:	095b      	lsrs	r3, r3, #5
 800d6e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	691b      	ldr	r3, [r3, #16]
 800d6e8:	f003 031f 	and.w	r3, r3, #31
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d102      	bne.n	800d6f6 <USB_ActivateEndpoint+0x2c6>
 800d6f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	00db      	lsls	r3, r3, #3
 800d6fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d700:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d704:	685a      	ldr	r2, [r3, #4]
 800d706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d708:	069b      	lsls	r3, r3, #26
 800d70a:	431a      	orrs	r2, r3
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	00db      	lsls	r3, r3, #3
 800d712:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d716:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d71a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d71e:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	781b      	ldrb	r3, [r3, #0]
 800d726:	009b      	lsls	r3, r3, #2
 800d728:	4413      	add	r3, r2
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d72e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d734:	2b00      	cmp	r3, #0
 800d736:	d013      	beq.n	800d760 <USB_ActivateEndpoint+0x330>
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	4413      	add	r3, r2
 800d742:	681a      	ldr	r2, [r3, #0]
 800d744:	4b9c      	ldr	r3, [pc, #624]	@ (800d9b8 <USB_ActivateEndpoint+0x588>)
 800d746:	4013      	ands	r3, r2
 800d748:	627b      	str	r3, [r7, #36]	@ 0x24
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	009b      	lsls	r3, r3, #2
 800d752:	441a      	add	r2, r3
 800d754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d756:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d75a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d75e:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d11c      	bne.n	800d7a2 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d768:	687a      	ldr	r2, [r7, #4]
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	009b      	lsls	r3, r3, #2
 800d770:	4413      	add	r3, r2
 800d772:	681a      	ldr	r2, [r3, #0]
 800d774:	4b91      	ldr	r3, [pc, #580]	@ (800d9bc <USB_ActivateEndpoint+0x58c>)
 800d776:	4013      	ands	r3, r2
 800d778:	61fb      	str	r3, [r7, #28]
 800d77a:	69fb      	ldr	r3, [r7, #28]
 800d77c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d780:	61fb      	str	r3, [r7, #28]
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d788:	61fb      	str	r3, [r7, #28]
 800d78a:	687a      	ldr	r2, [r7, #4]
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	009b      	lsls	r3, r3, #2
 800d792:	441a      	add	r2, r3
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d79a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d79e:	6013      	str	r3, [r2, #0]
 800d7a0:	e197      	b.n	800dad2 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	4413      	add	r3, r2
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	4b83      	ldr	r3, [pc, #524]	@ (800d9bc <USB_ActivateEndpoint+0x58c>)
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	623b      	str	r3, [r7, #32]
 800d7b4:	6a3b      	ldr	r3, [r7, #32]
 800d7b6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d7ba:	623b      	str	r3, [r7, #32]
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	781b      	ldrb	r3, [r3, #0]
 800d7c2:	009b      	lsls	r3, r3, #2
 800d7c4:	441a      	add	r2, r3
 800d7c6:	6a3b      	ldr	r3, [r7, #32]
 800d7c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7d0:	6013      	str	r3, [r2, #0]
 800d7d2:	e17e      	b.n	800dad2 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	78db      	ldrb	r3, [r3, #3]
 800d7d8:	2b02      	cmp	r3, #2
 800d7da:	d114      	bne.n	800d806 <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	4413      	add	r3, r2
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	4b73      	ldr	r3, [pc, #460]	@ (800d9b8 <USB_ActivateEndpoint+0x588>)
 800d7ea:	4013      	ands	r3, r2
 800d7ec:	663b      	str	r3, [r7, #96]	@ 0x60
 800d7ee:	687a      	ldr	r2, [r7, #4]
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	441a      	add	r2, r3
 800d7f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d7fa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d7fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	e013      	b.n	800d82e <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	4413      	add	r3, r2
 800d810:	681a      	ldr	r2, [r3, #0]
 800d812:	4b6b      	ldr	r3, [pc, #428]	@ (800d9c0 <USB_ActivateEndpoint+0x590>)
 800d814:	4013      	ands	r3, r2
 800d816:	667b      	str	r3, [r7, #100]	@ 0x64
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	009b      	lsls	r3, r3, #2
 800d820:	441a      	add	r2, r3
 800d822:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d828:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d82c:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	00db      	lsls	r3, r3, #3
 800d834:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d838:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d83c:	681a      	ldr	r2, [r3, #0]
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	00db      	lsls	r3, r3, #3
 800d844:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d848:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d84c:	0c12      	lsrs	r2, r2, #16
 800d84e:	0412      	lsls	r2, r2, #16
 800d850:	601a      	str	r2, [r3, #0]
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	781b      	ldrb	r3, [r3, #0]
 800d856:	00db      	lsls	r3, r3, #3
 800d858:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d85c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d860:	6819      	ldr	r1, [r3, #0]
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	891b      	ldrh	r3, [r3, #8]
 800d866:	089b      	lsrs	r3, r3, #2
 800d868:	b29b      	uxth	r3, r3
 800d86a:	009a      	lsls	r2, r3, #2
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	00db      	lsls	r3, r3, #3
 800d872:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d876:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d87a:	430a      	orrs	r2, r1
 800d87c:	601a      	str	r2, [r3, #0]
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	00db      	lsls	r3, r3, #3
 800d884:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d888:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d88c:	685a      	ldr	r2, [r3, #4]
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	00db      	lsls	r3, r3, #3
 800d894:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d898:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d89c:	0c12      	lsrs	r2, r2, #16
 800d89e:	0412      	lsls	r2, r2, #16
 800d8a0:	605a      	str	r2, [r3, #4]
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	781b      	ldrb	r3, [r3, #0]
 800d8a6:	00db      	lsls	r3, r3, #3
 800d8a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8b0:	6859      	ldr	r1, [r3, #4]
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	895b      	ldrh	r3, [r3, #10]
 800d8b6:	089b      	lsrs	r3, r3, #2
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	009a      	lsls	r2, r3, #2
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	00db      	lsls	r3, r3, #3
 800d8c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8ca:	430a      	orrs	r2, r1
 800d8cc:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	785b      	ldrb	r3, [r3, #1]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d178      	bne.n	800d9c8 <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d8d6:	687a      	ldr	r2, [r7, #4]
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	781b      	ldrb	r3, [r3, #0]
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	4413      	add	r3, r2
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d8e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d013      	beq.n	800d916 <USB_ActivateEndpoint+0x4e6>
 800d8ee:	687a      	ldr	r2, [r7, #4]
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	4413      	add	r3, r2
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	4b2f      	ldr	r3, [pc, #188]	@ (800d9b8 <USB_ActivateEndpoint+0x588>)
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	781b      	ldrb	r3, [r3, #0]
 800d906:	009b      	lsls	r3, r3, #2
 800d908:	441a      	add	r2, r3
 800d90a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d90c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d910:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d914:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d916:	687a      	ldr	r2, [r7, #4]
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	4413      	add	r3, r2
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d926:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d013      	beq.n	800d956 <USB_ActivateEndpoint+0x526>
 800d92e:	687a      	ldr	r2, [r7, #4]
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	4413      	add	r3, r2
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	4b1f      	ldr	r3, [pc, #124]	@ (800d9b8 <USB_ActivateEndpoint+0x588>)
 800d93c:	4013      	ands	r3, r2
 800d93e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d940:	687a      	ldr	r2, [r7, #4]
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	441a      	add	r2, r3
 800d94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d94c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d950:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d954:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	4413      	add	r3, r2
 800d960:	681a      	ldr	r2, [r3, #0]
 800d962:	4b16      	ldr	r3, [pc, #88]	@ (800d9bc <USB_ActivateEndpoint+0x58c>)
 800d964:	4013      	ands	r3, r2
 800d966:	633b      	str	r3, [r7, #48]	@ 0x30
 800d968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d96a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d96e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d972:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d976:	633b      	str	r3, [r7, #48]	@ 0x30
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	009b      	lsls	r3, r3, #2
 800d980:	441a      	add	r2, r3
 800d982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d98c:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	009b      	lsls	r3, r3, #2
 800d996:	4413      	add	r3, r2
 800d998:	681a      	ldr	r2, [r3, #0]
 800d99a:	4b0a      	ldr	r3, [pc, #40]	@ (800d9c4 <USB_ActivateEndpoint+0x594>)
 800d99c:	4013      	ands	r3, r2
 800d99e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	781b      	ldrb	r3, [r3, #0]
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	441a      	add	r2, r3
 800d9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9b4:	6013      	str	r3, [r2, #0]
 800d9b6:	e08c      	b.n	800dad2 <USB_ActivateEndpoint+0x6a2>
 800d9b8:	07ff8f8f 	.word	0x07ff8f8f
 800d9bc:	07ffbf8f 	.word	0x07ffbf8f
 800d9c0:	07ff8e8f 	.word	0x07ff8e8f
 800d9c4:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	009b      	lsls	r3, r3, #2
 800d9d0:	4413      	add	r3, r2
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d9d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d013      	beq.n	800da08 <USB_ActivateEndpoint+0x5d8>
 800d9e0:	687a      	ldr	r2, [r7, #4]
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	4413      	add	r3, r2
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	4b3d      	ldr	r3, [pc, #244]	@ (800dae4 <USB_ActivateEndpoint+0x6b4>)
 800d9ee:	4013      	ands	r3, r2
 800d9f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	441a      	add	r2, r3
 800d9fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d9fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800da02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da06:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	4413      	add	r3, r2
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	657b      	str	r3, [r7, #84]	@ 0x54
 800da16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d013      	beq.n	800da48 <USB_ActivateEndpoint+0x618>
 800da20:	687a      	ldr	r2, [r7, #4]
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	4413      	add	r3, r2
 800da2a:	681a      	ldr	r2, [r3, #0]
 800da2c:	4b2d      	ldr	r3, [pc, #180]	@ (800dae4 <USB_ActivateEndpoint+0x6b4>)
 800da2e:	4013      	ands	r3, r2
 800da30:	653b      	str	r3, [r7, #80]	@ 0x50
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	009b      	lsls	r3, r3, #2
 800da3a:	441a      	add	r2, r3
 800da3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800da46:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	78db      	ldrb	r3, [r3, #3]
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d018      	beq.n	800da82 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	4413      	add	r3, r2
 800da5a:	681a      	ldr	r2, [r3, #0]
 800da5c:	4b22      	ldr	r3, [pc, #136]	@ (800dae8 <USB_ActivateEndpoint+0x6b8>)
 800da5e:	4013      	ands	r3, r2
 800da60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da64:	f083 0320 	eor.w	r3, r3, #32
 800da68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da6a:	687a      	ldr	r2, [r7, #4]
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	781b      	ldrb	r3, [r3, #0]
 800da70:	009b      	lsls	r3, r3, #2
 800da72:	441a      	add	r2, r3
 800da74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	e013      	b.n	800daaa <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	781b      	ldrb	r3, [r3, #0]
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	4413      	add	r3, r2
 800da8c:	681a      	ldr	r2, [r3, #0]
 800da8e:	4b16      	ldr	r3, [pc, #88]	@ (800dae8 <USB_ActivateEndpoint+0x6b8>)
 800da90:	4013      	ands	r3, r2
 800da92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	781b      	ldrb	r3, [r3, #0]
 800da9a:	009b      	lsls	r3, r3, #2
 800da9c:	441a      	add	r2, r3
 800da9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800daa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800daa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daa8:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	4413      	add	r3, r2
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	4b0d      	ldr	r3, [pc, #52]	@ (800daec <USB_ActivateEndpoint+0x6bc>)
 800dab8:	4013      	ands	r3, r2
 800daba:	647b      	str	r3, [r7, #68]	@ 0x44
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	441a      	add	r2, r3
 800dac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dac8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dacc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dad0:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800dad2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	377c      	adds	r7, #124	@ 0x7c
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr
 800dae2:	bf00      	nop
 800dae4:	07ff8f8f 	.word	0x07ff8f8f
 800dae8:	07ff8fbf 	.word	0x07ff8fbf
 800daec:	07ffbf8f 	.word	0x07ffbf8f

0800daf0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b097      	sub	sp, #92	@ 0x5c
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	7b1b      	ldrb	r3, [r3, #12]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d16d      	bne.n	800dbde <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	785b      	ldrb	r3, [r3, #1]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d034      	beq.n	800db74 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db0a:	687a      	ldr	r2, [r7, #4]
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	4413      	add	r3, r2
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	613b      	str	r3, [r7, #16]
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d013      	beq.n	800db4a <USB_DeactivateEndpoint+0x5a>
 800db22:	687a      	ldr	r2, [r7, #4]
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	4413      	add	r3, r2
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	4b6d      	ldr	r3, [pc, #436]	@ (800dce4 <USB_DeactivateEndpoint+0x1f4>)
 800db30:	4013      	ands	r3, r2
 800db32:	60fb      	str	r3, [r7, #12]
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	009b      	lsls	r3, r3, #2
 800db3c:	441a      	add	r2, r3
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800db48:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	781b      	ldrb	r3, [r3, #0]
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	4413      	add	r3, r2
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	4b64      	ldr	r3, [pc, #400]	@ (800dce8 <USB_DeactivateEndpoint+0x1f8>)
 800db58:	4013      	ands	r3, r2
 800db5a:	60bb      	str	r3, [r7, #8]
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	441a      	add	r2, r3
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db70:	6013      	str	r3, [r2, #0]
 800db72:	e139      	b.n	800dde8 <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800db74:	687a      	ldr	r2, [r7, #4]
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	009b      	lsls	r3, r3, #2
 800db7c:	4413      	add	r3, r2
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	61fb      	str	r3, [r7, #28]
 800db82:	69fb      	ldr	r3, [r7, #28]
 800db84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d013      	beq.n	800dbb4 <USB_DeactivateEndpoint+0xc4>
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	781b      	ldrb	r3, [r3, #0]
 800db92:	009b      	lsls	r3, r3, #2
 800db94:	4413      	add	r3, r2
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	4b52      	ldr	r3, [pc, #328]	@ (800dce4 <USB_DeactivateEndpoint+0x1f4>)
 800db9a:	4013      	ands	r3, r2
 800db9c:	61bb      	str	r3, [r7, #24]
 800db9e:	687a      	ldr	r2, [r7, #4]
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	781b      	ldrb	r3, [r3, #0]
 800dba4:	009b      	lsls	r3, r3, #2
 800dba6:	441a      	add	r2, r3
 800dba8:	69bb      	ldr	r3, [r7, #24]
 800dbaa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dbae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbb2:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	009b      	lsls	r3, r3, #2
 800dbbc:	4413      	add	r3, r2
 800dbbe:	681a      	ldr	r2, [r3, #0]
 800dbc0:	4b4a      	ldr	r3, [pc, #296]	@ (800dcec <USB_DeactivateEndpoint+0x1fc>)
 800dbc2:	4013      	ands	r3, r2
 800dbc4:	617b      	str	r3, [r7, #20]
 800dbc6:	687a      	ldr	r2, [r7, #4]
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	781b      	ldrb	r3, [r3, #0]
 800dbcc:	009b      	lsls	r3, r3, #2
 800dbce:	441a      	add	r2, r3
 800dbd0:	697b      	ldr	r3, [r7, #20]
 800dbd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbda:	6013      	str	r3, [r2, #0]
 800dbdc:	e104      	b.n	800dde8 <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	785b      	ldrb	r3, [r3, #1]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f040 8084 	bne.w	800dcf0 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	009b      	lsls	r3, r3, #2
 800dbf0:	4413      	add	r3, r2
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d013      	beq.n	800dc28 <USB_DeactivateEndpoint+0x138>
 800dc00:	687a      	ldr	r2, [r7, #4]
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	4413      	add	r3, r2
 800dc0a:	681a      	ldr	r2, [r3, #0]
 800dc0c:	4b35      	ldr	r3, [pc, #212]	@ (800dce4 <USB_DeactivateEndpoint+0x1f4>)
 800dc0e:	4013      	ands	r3, r2
 800dc10:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc12:	687a      	ldr	r2, [r7, #4]
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	441a      	add	r2, r3
 800dc1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc1e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dc22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc26:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4413      	add	r3, r2
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d013      	beq.n	800dc68 <USB_DeactivateEndpoint+0x178>
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	4413      	add	r3, r2
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	4b25      	ldr	r3, [pc, #148]	@ (800dce4 <USB_DeactivateEndpoint+0x1f4>)
 800dc4e:	4013      	ands	r3, r2
 800dc50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	683b      	ldr	r3, [r7, #0]
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	009b      	lsls	r3, r3, #2
 800dc5a:	441a      	add	r2, r3
 800dc5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dc66:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800dc68:	687a      	ldr	r2, [r7, #4]
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	4413      	add	r3, r2
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	4b1b      	ldr	r3, [pc, #108]	@ (800dce4 <USB_DeactivateEndpoint+0x1f4>)
 800dc76:	4013      	ands	r3, r2
 800dc78:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	441a      	add	r2, r3
 800dc84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc8a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dc8e:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dc90:	687a      	ldr	r2, [r7, #4]
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4413      	add	r3, r2
 800dc9a:	681a      	ldr	r2, [r3, #0]
 800dc9c:	4b13      	ldr	r3, [pc, #76]	@ (800dcec <USB_DeactivateEndpoint+0x1fc>)
 800dc9e:	4013      	ands	r3, r2
 800dca0:	627b      	str	r3, [r7, #36]	@ 0x24
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	781b      	ldrb	r3, [r3, #0]
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	441a      	add	r2, r3
 800dcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dcb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcb6:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dcb8:	687a      	ldr	r2, [r7, #4]
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	4413      	add	r3, r2
 800dcc2:	681a      	ldr	r2, [r3, #0]
 800dcc4:	4b08      	ldr	r3, [pc, #32]	@ (800dce8 <USB_DeactivateEndpoint+0x1f8>)
 800dcc6:	4013      	ands	r3, r2
 800dcc8:	623b      	str	r3, [r7, #32]
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	441a      	add	r2, r3
 800dcd4:	6a3b      	ldr	r3, [r7, #32]
 800dcd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dcda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcde:	6013      	str	r3, [r2, #0]
 800dce0:	e082      	b.n	800dde8 <USB_DeactivateEndpoint+0x2f8>
 800dce2:	bf00      	nop
 800dce4:	07ff8f8f 	.word	0x07ff8f8f
 800dce8:	07ff8fbf 	.word	0x07ff8fbf
 800dcec:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dcf0:	687a      	ldr	r2, [r7, #4]
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	4413      	add	r3, r2
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	657b      	str	r3, [r7, #84]	@ 0x54
 800dcfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d013      	beq.n	800dd30 <USB_DeactivateEndpoint+0x240>
 800dd08:	687a      	ldr	r2, [r7, #4]
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	4413      	add	r3, r2
 800dd12:	681a      	ldr	r2, [r3, #0]
 800dd14:	4b38      	ldr	r3, [pc, #224]	@ (800ddf8 <USB_DeactivateEndpoint+0x308>)
 800dd16:	4013      	ands	r3, r2
 800dd18:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	781b      	ldrb	r3, [r3, #0]
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	441a      	add	r2, r3
 800dd24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dd2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd2e:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	4413      	add	r3, r2
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d013      	beq.n	800dd70 <USB_DeactivateEndpoint+0x280>
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	009b      	lsls	r3, r3, #2
 800dd50:	4413      	add	r3, r2
 800dd52:	681a      	ldr	r2, [r3, #0]
 800dd54:	4b28      	ldr	r3, [pc, #160]	@ (800ddf8 <USB_DeactivateEndpoint+0x308>)
 800dd56:	4013      	ands	r3, r2
 800dd58:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	781b      	ldrb	r3, [r3, #0]
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	441a      	add	r2, r3
 800dd64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd6a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dd6e:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4413      	add	r3, r2
 800dd7a:	681a      	ldr	r2, [r3, #0]
 800dd7c:	4b1e      	ldr	r3, [pc, #120]	@ (800ddf8 <USB_DeactivateEndpoint+0x308>)
 800dd7e:	4013      	ands	r3, r2
 800dd80:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	009b      	lsls	r3, r3, #2
 800dd8a:	441a      	add	r2, r3
 800dd8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dd92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd96:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	4413      	add	r3, r2
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	4b15      	ldr	r3, [pc, #84]	@ (800ddfc <USB_DeactivateEndpoint+0x30c>)
 800dda6:	4013      	ands	r3, r2
 800dda8:	643b      	str	r3, [r7, #64]	@ 0x40
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	781b      	ldrb	r3, [r3, #0]
 800ddb0:	009b      	lsls	r3, r3, #2
 800ddb2:	441a      	add	r2, r3
 800ddb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddbe:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	4413      	add	r3, r2
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	4b0c      	ldr	r3, [pc, #48]	@ (800de00 <USB_DeactivateEndpoint+0x310>)
 800ddce:	4013      	ands	r3, r2
 800ddd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ddd2:	687a      	ldr	r2, [r7, #4]
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	009b      	lsls	r3, r3, #2
 800ddda:	441a      	add	r2, r3
 800dddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ddde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dde2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dde6:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800dde8:	2300      	movs	r3, #0
}
 800ddea:	4618      	mov	r0, r3
 800ddec:	375c      	adds	r7, #92	@ 0x5c
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf4:	4770      	bx	lr
 800ddf6:	bf00      	nop
 800ddf8:	07ff8f8f 	.word	0x07ff8f8f
 800ddfc:	07ff8fbf 	.word	0x07ff8fbf
 800de00:	07ffbf8f 	.word	0x07ffbf8f

0800de04 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b096      	sub	sp, #88	@ 0x58
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
 800de0c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	785b      	ldrb	r3, [r3, #1]
 800de12:	2b01      	cmp	r3, #1
 800de14:	f040 84ed 	bne.w	800e7f2 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	699a      	ldr	r2, [r3, #24]
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	691b      	ldr	r3, [r3, #16]
 800de20:	429a      	cmp	r2, r3
 800de22:	d903      	bls.n	800de2c <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800de24:	683b      	ldr	r3, [r7, #0]
 800de26:	691b      	ldr	r3, [r3, #16]
 800de28:	657b      	str	r3, [r7, #84]	@ 0x54
 800de2a:	e002      	b.n	800de32 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	699b      	ldr	r3, [r3, #24]
 800de30:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	7b1b      	ldrb	r3, [r3, #12]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d12e      	bne.n	800de98 <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	6959      	ldr	r1, [r3, #20]
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	88da      	ldrh	r2, [r3, #6]
 800de42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de44:	b29b      	uxth	r3, r3
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f001 f963 	bl	800f112 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	781b      	ldrb	r3, [r3, #0]
 800de50:	00db      	lsls	r3, r3, #3
 800de52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	00db      	lsls	r3, r3, #3
 800de62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de6a:	b292      	uxth	r2, r2
 800de6c:	601a      	str	r2, [r3, #0]
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	00db      	lsls	r3, r3, #3
 800de74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de7c:	6819      	ldr	r1, [r3, #0]
 800de7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de80:	041a      	lsls	r2, r3, #16
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	00db      	lsls	r3, r3, #3
 800de88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de90:	430a      	orrs	r2, r1
 800de92:	601a      	str	r2, [r3, #0]
 800de94:	f000 bc90 	b.w	800e7b8 <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	78db      	ldrb	r3, [r3, #3]
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	f040 8332 	bne.w	800e506 <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	6a1a      	ldr	r2, [r3, #32]
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	691b      	ldr	r3, [r3, #16]
 800deaa:	429a      	cmp	r2, r3
 800deac:	f240 82e4 	bls.w	800e478 <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	4413      	add	r3, r2
 800deba:	681a      	ldr	r2, [r3, #0]
 800debc:	4ba4      	ldr	r3, [pc, #656]	@ (800e150 <USB_EPStartXfer+0x34c>)
 800debe:	4013      	ands	r3, r2
 800dec0:	613b      	str	r3, [r7, #16]
 800dec2:	687a      	ldr	r2, [r7, #4]
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	441a      	add	r2, r3
 800decc:	693b      	ldr	r3, [r7, #16]
 800dece:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800ded2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ded6:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	6a1a      	ldr	r2, [r3, #32]
 800dedc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dede:	1ad2      	subs	r2, r2, r3
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	781b      	ldrb	r3, [r3, #0]
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	4413      	add	r3, r2
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800def4:	2b00      	cmp	r3, #0
 800def6:	f000 8161 	beq.w	800e1bc <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	785b      	ldrb	r3, [r3, #1]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d16a      	bne.n	800dfd8 <USB_EPStartXfer+0x1d4>
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	00db      	lsls	r3, r3, #3
 800df08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df0c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df10:	685a      	ldr	r2, [r3, #4]
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	781b      	ldrb	r3, [r3, #0]
 800df16:	00db      	lsls	r3, r3, #3
 800df18:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df1c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df20:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800df24:	605a      	str	r2, [r3, #4]
 800df26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d112      	bne.n	800df52 <USB_EPStartXfer+0x14e>
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	00db      	lsls	r3, r3, #3
 800df32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df3a:	685a      	ldr	r2, [r3, #4]
 800df3c:	683b      	ldr	r3, [r7, #0]
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	00db      	lsls	r3, r3, #3
 800df42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df4a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800df4e:	605a      	str	r2, [r3, #4]
 800df50:	e06a      	b.n	800e028 <USB_EPStartXfer+0x224>
 800df52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df54:	2b3e      	cmp	r3, #62	@ 0x3e
 800df56:	d81e      	bhi.n	800df96 <USB_EPStartXfer+0x192>
 800df58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df5a:	085b      	lsrs	r3, r3, #1
 800df5c:	653b      	str	r3, [r7, #80]	@ 0x50
 800df5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df60:	f003 0301 	and.w	r3, r3, #1
 800df64:	2b00      	cmp	r3, #0
 800df66:	d002      	beq.n	800df6e <USB_EPStartXfer+0x16a>
 800df68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df6a:	3301      	adds	r3, #1
 800df6c:	653b      	str	r3, [r7, #80]	@ 0x50
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	00db      	lsls	r3, r3, #3
 800df74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df7c:	6859      	ldr	r1, [r3, #4]
 800df7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df80:	069a      	lsls	r2, r3, #26
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	00db      	lsls	r3, r3, #3
 800df88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df90:	430a      	orrs	r2, r1
 800df92:	605a      	str	r2, [r3, #4]
 800df94:	e048      	b.n	800e028 <USB_EPStartXfer+0x224>
 800df96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df98:	095b      	lsrs	r3, r3, #5
 800df9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800df9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df9e:	f003 031f 	and.w	r3, r3, #31
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d102      	bne.n	800dfac <USB_EPStartXfer+0x1a8>
 800dfa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfa8:	3b01      	subs	r3, #1
 800dfaa:	653b      	str	r3, [r7, #80]	@ 0x50
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	00db      	lsls	r3, r3, #3
 800dfb2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfb6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfba:	685a      	ldr	r2, [r3, #4]
 800dfbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfbe:	069b      	lsls	r3, r3, #26
 800dfc0:	431a      	orrs	r2, r3
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	00db      	lsls	r3, r3, #3
 800dfc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfcc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfd0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dfd4:	605a      	str	r2, [r3, #4]
 800dfd6:	e027      	b.n	800e028 <USB_EPStartXfer+0x224>
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	785b      	ldrb	r3, [r3, #1]
 800dfdc:	2b01      	cmp	r3, #1
 800dfde:	d123      	bne.n	800e028 <USB_EPStartXfer+0x224>
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	00db      	lsls	r3, r3, #3
 800dfe6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfee:	685a      	ldr	r2, [r3, #4]
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	00db      	lsls	r3, r3, #3
 800dff6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dffa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dffe:	b292      	uxth	r2, r2
 800e000:	605a      	str	r2, [r3, #4]
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	00db      	lsls	r3, r3, #3
 800e008:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e00c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e010:	6859      	ldr	r1, [r3, #4]
 800e012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e014:	041a      	lsls	r2, r3, #16
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	00db      	lsls	r3, r3, #3
 800e01c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e020:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e024:	430a      	orrs	r2, r1
 800e026:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	895b      	ldrh	r3, [r3, #10]
 800e02c:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	6959      	ldr	r1, [r3, #20]
 800e032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e034:	b29b      	uxth	r3, r3
 800e036:	8b7a      	ldrh	r2, [r7, #26]
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f001 f86a 	bl	800f112 <USB_WritePMA>
            ep->xfer_buff += len;
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	695a      	ldr	r2, [r3, #20]
 800e042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e044:	441a      	add	r2, r3
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	6a1a      	ldr	r2, [r3, #32]
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	691b      	ldr	r3, [r3, #16]
 800e052:	429a      	cmp	r2, r3
 800e054:	d906      	bls.n	800e064 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	6a1a      	ldr	r2, [r3, #32]
 800e05a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e05c:	1ad2      	subs	r2, r2, r3
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	621a      	str	r2, [r3, #32]
 800e062:	e005      	b.n	800e070 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	6a1b      	ldr	r3, [r3, #32]
 800e068:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	2200      	movs	r2, #0
 800e06e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	785b      	ldrb	r3, [r3, #1]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d16d      	bne.n	800e154 <USB_EPStartXfer+0x350>
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	781b      	ldrb	r3, [r3, #0]
 800e07c:	00db      	lsls	r3, r3, #3
 800e07e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e082:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	781b      	ldrb	r3, [r3, #0]
 800e08c:	00db      	lsls	r3, r3, #3
 800e08e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e092:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e096:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d112      	bne.n	800e0c8 <USB_EPStartXfer+0x2c4>
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	00db      	lsls	r3, r3, #3
 800e0a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0b0:	681a      	ldr	r2, [r3, #0]
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	781b      	ldrb	r3, [r3, #0]
 800e0b6:	00db      	lsls	r3, r3, #3
 800e0b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0c0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e0c4:	601a      	str	r2, [r3, #0]
 800e0c6:	e06d      	b.n	800e1a4 <USB_EPStartXfer+0x3a0>
 800e0c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800e0cc:	d81e      	bhi.n	800e10c <USB_EPStartXfer+0x308>
 800e0ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0d0:	085b      	lsrs	r3, r3, #1
 800e0d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0d6:	f003 0301 	and.w	r3, r3, #1
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d002      	beq.n	800e0e4 <USB_EPStartXfer+0x2e0>
 800e0de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0e0:	3301      	adds	r3, #1
 800e0e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	00db      	lsls	r3, r3, #3
 800e0ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0f2:	6819      	ldr	r1, [r3, #0]
 800e0f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0f6:	069a      	lsls	r2, r3, #26
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	00db      	lsls	r3, r3, #3
 800e0fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e102:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e106:	430a      	orrs	r2, r1
 800e108:	601a      	str	r2, [r3, #0]
 800e10a:	e04b      	b.n	800e1a4 <USB_EPStartXfer+0x3a0>
 800e10c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e10e:	095b      	lsrs	r3, r3, #5
 800e110:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e114:	f003 031f 	and.w	r3, r3, #31
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d102      	bne.n	800e122 <USB_EPStartXfer+0x31e>
 800e11c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e11e:	3b01      	subs	r3, #1
 800e120:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e12c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e134:	069b      	lsls	r3, r3, #26
 800e136:	431a      	orrs	r2, r3
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	00db      	lsls	r3, r3, #3
 800e13e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e142:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e146:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e14a:	601a      	str	r2, [r3, #0]
 800e14c:	e02a      	b.n	800e1a4 <USB_EPStartXfer+0x3a0>
 800e14e:	bf00      	nop
 800e150:	07ff8f8f 	.word	0x07ff8f8f
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	785b      	ldrb	r3, [r3, #1]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d123      	bne.n	800e1a4 <USB_EPStartXfer+0x3a0>
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	781b      	ldrb	r3, [r3, #0]
 800e160:	00db      	lsls	r3, r3, #3
 800e162:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e166:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	00db      	lsls	r3, r3, #3
 800e172:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e176:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e17a:	b292      	uxth	r2, r2
 800e17c:	601a      	str	r2, [r3, #0]
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	781b      	ldrb	r3, [r3, #0]
 800e182:	00db      	lsls	r3, r3, #3
 800e184:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e188:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e18c:	6819      	ldr	r1, [r3, #0]
 800e18e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e190:	041a      	lsls	r2, r3, #16
 800e192:	683b      	ldr	r3, [r7, #0]
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	00db      	lsls	r3, r3, #3
 800e198:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e19c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1a0:	430a      	orrs	r2, r1
 800e1a2:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	891b      	ldrh	r3, [r3, #8]
 800e1a8:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	6959      	ldr	r1, [r3, #20]
 800e1ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	8b7a      	ldrh	r2, [r7, #26]
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 ffac 	bl	800f112 <USB_WritePMA>
 800e1ba:	e2fd      	b.n	800e7b8 <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	785b      	ldrb	r3, [r3, #1]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d16a      	bne.n	800e29a <USB_EPStartXfer+0x496>
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	00db      	lsls	r3, r3, #3
 800e1ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1d2:	681a      	ldr	r2, [r3, #0]
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	781b      	ldrb	r3, [r3, #0]
 800e1d8:	00db      	lsls	r3, r3, #3
 800e1da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1de:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1e2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e1e6:	601a      	str	r2, [r3, #0]
 800e1e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d112      	bne.n	800e214 <USB_EPStartXfer+0x410>
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	00db      	lsls	r3, r3, #3
 800e1f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1f8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1fc:	681a      	ldr	r2, [r3, #0]
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	00db      	lsls	r3, r3, #3
 800e204:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e208:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e20c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e210:	601a      	str	r2, [r3, #0]
 800e212:	e06a      	b.n	800e2ea <USB_EPStartXfer+0x4e6>
 800e214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e216:	2b3e      	cmp	r3, #62	@ 0x3e
 800e218:	d81e      	bhi.n	800e258 <USB_EPStartXfer+0x454>
 800e21a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e21c:	085b      	lsrs	r3, r3, #1
 800e21e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e222:	f003 0301 	and.w	r3, r3, #1
 800e226:	2b00      	cmp	r3, #0
 800e228:	d002      	beq.n	800e230 <USB_EPStartXfer+0x42c>
 800e22a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e22c:	3301      	adds	r3, #1
 800e22e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	00db      	lsls	r3, r3, #3
 800e236:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e23a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e23e:	6819      	ldr	r1, [r3, #0]
 800e240:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e242:	069a      	lsls	r2, r3, #26
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	00db      	lsls	r3, r3, #3
 800e24a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e24e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e252:	430a      	orrs	r2, r1
 800e254:	601a      	str	r2, [r3, #0]
 800e256:	e048      	b.n	800e2ea <USB_EPStartXfer+0x4e6>
 800e258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e25a:	095b      	lsrs	r3, r3, #5
 800e25c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e25e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e260:	f003 031f 	and.w	r3, r3, #31
 800e264:	2b00      	cmp	r3, #0
 800e266:	d102      	bne.n	800e26e <USB_EPStartXfer+0x46a>
 800e268:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e26a:	3b01      	subs	r3, #1
 800e26c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	00db      	lsls	r3, r3, #3
 800e274:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e278:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e27c:	681a      	ldr	r2, [r3, #0]
 800e27e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e280:	069b      	lsls	r3, r3, #26
 800e282:	431a      	orrs	r2, r3
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	00db      	lsls	r3, r3, #3
 800e28a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e28e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e292:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e296:	601a      	str	r2, [r3, #0]
 800e298:	e027      	b.n	800e2ea <USB_EPStartXfer+0x4e6>
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	785b      	ldrb	r3, [r3, #1]
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d123      	bne.n	800e2ea <USB_EPStartXfer+0x4e6>
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	00db      	lsls	r3, r3, #3
 800e2a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e2ac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e2b0:	681a      	ldr	r2, [r3, #0]
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	00db      	lsls	r3, r3, #3
 800e2b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e2bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e2c0:	b292      	uxth	r2, r2
 800e2c2:	601a      	str	r2, [r3, #0]
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	00db      	lsls	r3, r3, #3
 800e2ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e2ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e2d2:	6819      	ldr	r1, [r3, #0]
 800e2d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2d6:	041a      	lsls	r2, r3, #16
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	00db      	lsls	r3, r3, #3
 800e2de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e2e2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e2e6:	430a      	orrs	r2, r1
 800e2e8:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	891b      	ldrh	r3, [r3, #8]
 800e2ee:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e2f0:	683b      	ldr	r3, [r7, #0]
 800e2f2:	6959      	ldr	r1, [r3, #20]
 800e2f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	8b7a      	ldrh	r2, [r7, #26]
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f000 ff09 	bl	800f112 <USB_WritePMA>
            ep->xfer_buff += len;
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	695a      	ldr	r2, [r3, #20]
 800e304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e306:	441a      	add	r2, r3
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e30c:	683b      	ldr	r3, [r7, #0]
 800e30e:	6a1a      	ldr	r2, [r3, #32]
 800e310:	683b      	ldr	r3, [r7, #0]
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	429a      	cmp	r2, r3
 800e316:	d906      	bls.n	800e326 <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800e318:	683b      	ldr	r3, [r7, #0]
 800e31a:	6a1a      	ldr	r2, [r3, #32]
 800e31c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e31e:	1ad2      	subs	r2, r2, r3
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	621a      	str	r2, [r3, #32]
 800e324:	e005      	b.n	800e332 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	6a1b      	ldr	r3, [r3, #32]
 800e32a:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	2200      	movs	r2, #0
 800e330:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	785b      	ldrb	r3, [r3, #1]
 800e336:	2b00      	cmp	r3, #0
 800e338:	d16a      	bne.n	800e410 <USB_EPStartXfer+0x60c>
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	00db      	lsls	r3, r3, #3
 800e340:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e344:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e348:	685a      	ldr	r2, [r3, #4]
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	00db      	lsls	r3, r3, #3
 800e350:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e354:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e358:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e35c:	605a      	str	r2, [r3, #4]
 800e35e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e360:	2b00      	cmp	r3, #0
 800e362:	d112      	bne.n	800e38a <USB_EPStartXfer+0x586>
 800e364:	683b      	ldr	r3, [r7, #0]
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	00db      	lsls	r3, r3, #3
 800e36a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e36e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e372:	685a      	ldr	r2, [r3, #4]
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	00db      	lsls	r3, r3, #3
 800e37a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e37e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e382:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e386:	605a      	str	r2, [r3, #4]
 800e388:	e06a      	b.n	800e460 <USB_EPStartXfer+0x65c>
 800e38a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e38c:	2b3e      	cmp	r3, #62	@ 0x3e
 800e38e:	d81e      	bhi.n	800e3ce <USB_EPStartXfer+0x5ca>
 800e390:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e392:	085b      	lsrs	r3, r3, #1
 800e394:	647b      	str	r3, [r7, #68]	@ 0x44
 800e396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e398:	f003 0301 	and.w	r3, r3, #1
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d002      	beq.n	800e3a6 <USB_EPStartXfer+0x5a2>
 800e3a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3a2:	3301      	adds	r3, #1
 800e3a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	00db      	lsls	r3, r3, #3
 800e3ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e3b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e3b4:	6859      	ldr	r1, [r3, #4]
 800e3b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3b8:	069a      	lsls	r2, r3, #26
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	00db      	lsls	r3, r3, #3
 800e3c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e3c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e3c8:	430a      	orrs	r2, r1
 800e3ca:	605a      	str	r2, [r3, #4]
 800e3cc:	e048      	b.n	800e460 <USB_EPStartXfer+0x65c>
 800e3ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3d0:	095b      	lsrs	r3, r3, #5
 800e3d2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3d6:	f003 031f 	and.w	r3, r3, #31
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d102      	bne.n	800e3e4 <USB_EPStartXfer+0x5e0>
 800e3de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3e0:	3b01      	subs	r3, #1
 800e3e2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	00db      	lsls	r3, r3, #3
 800e3ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e3ee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e3f2:	685a      	ldr	r2, [r3, #4]
 800e3f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3f6:	069b      	lsls	r3, r3, #26
 800e3f8:	431a      	orrs	r2, r3
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	00db      	lsls	r3, r3, #3
 800e400:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e404:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e408:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e40c:	605a      	str	r2, [r3, #4]
 800e40e:	e027      	b.n	800e460 <USB_EPStartXfer+0x65c>
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	785b      	ldrb	r3, [r3, #1]
 800e414:	2b01      	cmp	r3, #1
 800e416:	d123      	bne.n	800e460 <USB_EPStartXfer+0x65c>
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	00db      	lsls	r3, r3, #3
 800e41e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e422:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e426:	685a      	ldr	r2, [r3, #4]
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	00db      	lsls	r3, r3, #3
 800e42e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e432:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e436:	b292      	uxth	r2, r2
 800e438:	605a      	str	r2, [r3, #4]
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	00db      	lsls	r3, r3, #3
 800e440:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e444:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e448:	6859      	ldr	r1, [r3, #4]
 800e44a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e44c:	041a      	lsls	r2, r3, #16
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	00db      	lsls	r3, r3, #3
 800e454:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e458:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e45c:	430a      	orrs	r2, r1
 800e45e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	895b      	ldrh	r3, [r3, #10]
 800e464:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	6959      	ldr	r1, [r3, #20]
 800e46a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e46c:	b29b      	uxth	r3, r3
 800e46e:	8b7a      	ldrh	r2, [r7, #26]
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 fe4e 	bl	800f112 <USB_WritePMA>
 800e476:	e19f      	b.n	800e7b8 <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	6a1b      	ldr	r3, [r3, #32]
 800e47c:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e47e:	687a      	ldr	r2, [r7, #4]
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	681a      	ldr	r2, [r3, #0]
 800e48a:	4ba0      	ldr	r3, [pc, #640]	@ (800e70c <USB_EPStartXfer+0x908>)
 800e48c:	4013      	ands	r3, r2
 800e48e:	617b      	str	r3, [r7, #20]
 800e490:	687a      	ldr	r2, [r7, #4]
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	781b      	ldrb	r3, [r3, #0]
 800e496:	009b      	lsls	r3, r3, #2
 800e498:	441a      	add	r2, r3
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4a4:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	00db      	lsls	r3, r3, #3
 800e4ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e4b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	00db      	lsls	r3, r3, #3
 800e4bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e4c0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e4c4:	b292      	uxth	r2, r2
 800e4c6:	601a      	str	r2, [r3, #0]
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	781b      	ldrb	r3, [r3, #0]
 800e4cc:	00db      	lsls	r3, r3, #3
 800e4ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e4d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e4d6:	6819      	ldr	r1, [r3, #0]
 800e4d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4da:	041a      	lsls	r2, r3, #16
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	00db      	lsls	r3, r3, #3
 800e4e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e4e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e4ea:	430a      	orrs	r2, r1
 800e4ec:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	891b      	ldrh	r3, [r3, #8]
 800e4f2:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	6959      	ldr	r1, [r3, #20]
 800e4f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	8b7a      	ldrh	r2, [r7, #26]
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 fe07 	bl	800f112 <USB_WritePMA>
 800e504:	e158      	b.n	800e7b8 <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	6a1a      	ldr	r2, [r3, #32]
 800e50a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e50c:	1ad2      	subs	r2, r2, r3
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e512:	687a      	ldr	r2, [r7, #4]
 800e514:	683b      	ldr	r3, [r7, #0]
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	4413      	add	r3, r2
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e522:	2b00      	cmp	r3, #0
 800e524:	f000 80a3 	beq.w	800e66e <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	785b      	ldrb	r3, [r3, #1]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d16a      	bne.n	800e606 <USB_EPStartXfer+0x802>
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	00db      	lsls	r3, r3, #3
 800e536:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e53a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e53e:	685a      	ldr	r2, [r3, #4]
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	00db      	lsls	r3, r3, #3
 800e546:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e54a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e54e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e552:	605a      	str	r2, [r3, #4]
 800e554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e556:	2b00      	cmp	r3, #0
 800e558:	d112      	bne.n	800e580 <USB_EPStartXfer+0x77c>
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	00db      	lsls	r3, r3, #3
 800e560:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e564:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e568:	685a      	ldr	r2, [r3, #4]
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	00db      	lsls	r3, r3, #3
 800e570:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e574:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e578:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e57c:	605a      	str	r2, [r3, #4]
 800e57e:	e06a      	b.n	800e656 <USB_EPStartXfer+0x852>
 800e580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e582:	2b3e      	cmp	r3, #62	@ 0x3e
 800e584:	d81e      	bhi.n	800e5c4 <USB_EPStartXfer+0x7c0>
 800e586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e588:	085b      	lsrs	r3, r3, #1
 800e58a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e58c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e58e:	f003 0301 	and.w	r3, r3, #1
 800e592:	2b00      	cmp	r3, #0
 800e594:	d002      	beq.n	800e59c <USB_EPStartXfer+0x798>
 800e596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e598:	3301      	adds	r3, #1
 800e59a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e59c:	683b      	ldr	r3, [r7, #0]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	00db      	lsls	r3, r3, #3
 800e5a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e5a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e5aa:	6859      	ldr	r1, [r3, #4]
 800e5ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5ae:	069a      	lsls	r2, r3, #26
 800e5b0:	683b      	ldr	r3, [r7, #0]
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	00db      	lsls	r3, r3, #3
 800e5b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e5ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e5be:	430a      	orrs	r2, r1
 800e5c0:	605a      	str	r2, [r3, #4]
 800e5c2:	e048      	b.n	800e656 <USB_EPStartXfer+0x852>
 800e5c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5c6:	095b      	lsrs	r3, r3, #5
 800e5c8:	643b      	str	r3, [r7, #64]	@ 0x40
 800e5ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5cc:	f003 031f 	and.w	r3, r3, #31
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d102      	bne.n	800e5da <USB_EPStartXfer+0x7d6>
 800e5d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5d6:	3b01      	subs	r3, #1
 800e5d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	00db      	lsls	r3, r3, #3
 800e5e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e5e4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e5e8:	685a      	ldr	r2, [r3, #4]
 800e5ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5ec:	069b      	lsls	r3, r3, #26
 800e5ee:	431a      	orrs	r2, r3
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	00db      	lsls	r3, r3, #3
 800e5f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e5fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e5fe:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e602:	605a      	str	r2, [r3, #4]
 800e604:	e027      	b.n	800e656 <USB_EPStartXfer+0x852>
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	785b      	ldrb	r3, [r3, #1]
 800e60a:	2b01      	cmp	r3, #1
 800e60c:	d123      	bne.n	800e656 <USB_EPStartXfer+0x852>
 800e60e:	683b      	ldr	r3, [r7, #0]
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	00db      	lsls	r3, r3, #3
 800e614:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e618:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e61c:	685a      	ldr	r2, [r3, #4]
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	00db      	lsls	r3, r3, #3
 800e624:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e628:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e62c:	b292      	uxth	r2, r2
 800e62e:	605a      	str	r2, [r3, #4]
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	00db      	lsls	r3, r3, #3
 800e636:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e63a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e63e:	6859      	ldr	r1, [r3, #4]
 800e640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e642:	041a      	lsls	r2, r3, #16
 800e644:	683b      	ldr	r3, [r7, #0]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	00db      	lsls	r3, r3, #3
 800e64a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e64e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e652:	430a      	orrs	r2, r1
 800e654:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	895b      	ldrh	r3, [r3, #10]
 800e65a:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	6959      	ldr	r1, [r3, #20]
 800e660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e662:	b29b      	uxth	r3, r3
 800e664:	8b7a      	ldrh	r2, [r7, #26]
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f000 fd53 	bl	800f112 <USB_WritePMA>
 800e66c:	e0a4      	b.n	800e7b8 <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	785b      	ldrb	r3, [r3, #1]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d16d      	bne.n	800e752 <USB_EPStartXfer+0x94e>
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	00db      	lsls	r3, r3, #3
 800e67c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e680:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e684:	681a      	ldr	r2, [r3, #0]
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	00db      	lsls	r3, r3, #3
 800e68c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e690:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e694:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d112      	bne.n	800e6c6 <USB_EPStartXfer+0x8c2>
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	00db      	lsls	r3, r3, #3
 800e6a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e6aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e6ae:	681a      	ldr	r2, [r3, #0]
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	00db      	lsls	r3, r3, #3
 800e6b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e6ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e6be:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e6c2:	601a      	str	r2, [r3, #0]
 800e6c4:	e06d      	b.n	800e7a2 <USB_EPStartXfer+0x99e>
 800e6c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6c8:	2b3e      	cmp	r3, #62	@ 0x3e
 800e6ca:	d821      	bhi.n	800e710 <USB_EPStartXfer+0x90c>
 800e6cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6ce:	085b      	lsrs	r3, r3, #1
 800e6d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e6d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6d4:	f003 0301 	and.w	r3, r3, #1
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d002      	beq.n	800e6e2 <USB_EPStartXfer+0x8de>
 800e6dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6de:	3301      	adds	r3, #1
 800e6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	00db      	lsls	r3, r3, #3
 800e6e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e6ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e6f0:	6819      	ldr	r1, [r3, #0]
 800e6f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6f4:	069a      	lsls	r2, r3, #26
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	00db      	lsls	r3, r3, #3
 800e6fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e700:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e704:	430a      	orrs	r2, r1
 800e706:	601a      	str	r2, [r3, #0]
 800e708:	e04b      	b.n	800e7a2 <USB_EPStartXfer+0x99e>
 800e70a:	bf00      	nop
 800e70c:	07ff8e8f 	.word	0x07ff8e8f
 800e710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e712:	095b      	lsrs	r3, r3, #5
 800e714:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e718:	f003 031f 	and.w	r3, r3, #31
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d102      	bne.n	800e726 <USB_EPStartXfer+0x922>
 800e720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e722:	3b01      	subs	r3, #1
 800e724:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	781b      	ldrb	r3, [r3, #0]
 800e72a:	00db      	lsls	r3, r3, #3
 800e72c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e730:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e738:	069b      	lsls	r3, r3, #26
 800e73a:	431a      	orrs	r2, r3
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	00db      	lsls	r3, r3, #3
 800e742:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e746:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e74a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e74e:	601a      	str	r2, [r3, #0]
 800e750:	e027      	b.n	800e7a2 <USB_EPStartXfer+0x99e>
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	785b      	ldrb	r3, [r3, #1]
 800e756:	2b01      	cmp	r3, #1
 800e758:	d123      	bne.n	800e7a2 <USB_EPStartXfer+0x99e>
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	781b      	ldrb	r3, [r3, #0]
 800e75e:	00db      	lsls	r3, r3, #3
 800e760:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e764:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	00db      	lsls	r3, r3, #3
 800e770:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e774:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e778:	b292      	uxth	r2, r2
 800e77a:	601a      	str	r2, [r3, #0]
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	00db      	lsls	r3, r3, #3
 800e782:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e786:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e78a:	6819      	ldr	r1, [r3, #0]
 800e78c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e78e:	041a      	lsls	r2, r3, #16
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	781b      	ldrb	r3, [r3, #0]
 800e794:	00db      	lsls	r3, r3, #3
 800e796:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e79a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e79e:	430a      	orrs	r2, r1
 800e7a0:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	891b      	ldrh	r3, [r3, #8]
 800e7a6:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	6959      	ldr	r1, [r3, #20]
 800e7ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	8b7a      	ldrh	r2, [r7, #26]
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fcad 	bl	800f112 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e7b8:	687a      	ldr	r2, [r7, #4]
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	009b      	lsls	r3, r3, #2
 800e7c0:	4413      	add	r3, r2
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	4b8b      	ldr	r3, [pc, #556]	@ (800e9f4 <USB_EPStartXfer+0xbf0>)
 800e7c6:	4013      	ands	r3, r2
 800e7c8:	60fb      	str	r3, [r7, #12]
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f083 0310 	eor.w	r3, r3, #16
 800e7d0:	60fb      	str	r3, [r7, #12]
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	f083 0320 	eor.w	r3, r3, #32
 800e7d8:	60fb      	str	r3, [r7, #12]
 800e7da:	687a      	ldr	r2, [r7, #4]
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	441a      	add	r2, r3
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e7ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7ee:	6013      	str	r3, [r2, #0]
 800e7f0:	e36b      	b.n	800eeca <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	7b1b      	ldrb	r3, [r3, #12]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	f040 8081 	bne.w	800e8fe <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	699a      	ldr	r2, [r3, #24]
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	691b      	ldr	r3, [r3, #16]
 800e804:	429a      	cmp	r2, r3
 800e806:	d909      	bls.n	800e81c <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800e808:	683b      	ldr	r3, [r7, #0]
 800e80a:	691b      	ldr	r3, [r3, #16]
 800e80c:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	699a      	ldr	r2, [r3, #24]
 800e812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e814:	1ad2      	subs	r2, r2, r3
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	619a      	str	r2, [r3, #24]
 800e81a:	e005      	b.n	800e828 <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	699b      	ldr	r3, [r3, #24]
 800e820:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	2200      	movs	r2, #0
 800e826:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	00db      	lsls	r3, r3, #3
 800e82e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e832:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e836:	685a      	ldr	r2, [r3, #4]
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	781b      	ldrb	r3, [r3, #0]
 800e83c:	00db      	lsls	r3, r3, #3
 800e83e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e842:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e846:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e84a:	605a      	str	r2, [r3, #4]
 800e84c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d112      	bne.n	800e878 <USB_EPStartXfer+0xa74>
 800e852:	683b      	ldr	r3, [r7, #0]
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	00db      	lsls	r3, r3, #3
 800e858:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e85c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e860:	685a      	ldr	r2, [r3, #4]
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	00db      	lsls	r3, r3, #3
 800e868:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e86c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e870:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e874:	605a      	str	r2, [r3, #4]
 800e876:	e30c      	b.n	800ee92 <USB_EPStartXfer+0x108e>
 800e878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e87a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e87c:	d81e      	bhi.n	800e8bc <USB_EPStartXfer+0xab8>
 800e87e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e880:	085b      	lsrs	r3, r3, #1
 800e882:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e886:	f003 0301 	and.w	r3, r3, #1
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d002      	beq.n	800e894 <USB_EPStartXfer+0xa90>
 800e88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e890:	3301      	adds	r3, #1
 800e892:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	00db      	lsls	r3, r3, #3
 800e89a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e89e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8a2:	6859      	ldr	r1, [r3, #4]
 800e8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8a6:	069a      	lsls	r2, r3, #26
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	00db      	lsls	r3, r3, #3
 800e8ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8b6:	430a      	orrs	r2, r1
 800e8b8:	605a      	str	r2, [r3, #4]
 800e8ba:	e2ea      	b.n	800ee92 <USB_EPStartXfer+0x108e>
 800e8bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8be:	095b      	lsrs	r3, r3, #5
 800e8c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e8c4:	f003 031f 	and.w	r3, r3, #31
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d102      	bne.n	800e8d2 <USB_EPStartXfer+0xace>
 800e8cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8ce:	3b01      	subs	r3, #1
 800e8d0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8d2:	683b      	ldr	r3, [r7, #0]
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	00db      	lsls	r3, r3, #3
 800e8d8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8dc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8e0:	685a      	ldr	r2, [r3, #4]
 800e8e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8e4:	069b      	lsls	r3, r3, #26
 800e8e6:	431a      	orrs	r2, r3
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	00db      	lsls	r3, r3, #3
 800e8ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e8f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e8f6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e8fa:	605a      	str	r2, [r3, #4]
 800e8fc:	e2c9      	b.n	800ee92 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	78db      	ldrb	r3, [r3, #3]
 800e902:	2b02      	cmp	r3, #2
 800e904:	f040 8176 	bne.w	800ebf4 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e908:	683b      	ldr	r3, [r7, #0]
 800e90a:	785b      	ldrb	r3, [r3, #1]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d173      	bne.n	800e9f8 <USB_EPStartXfer+0xbf4>
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	00db      	lsls	r3, r3, #3
 800e916:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e91a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	00db      	lsls	r3, r3, #3
 800e926:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e92a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e92e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e932:	601a      	str	r2, [r3, #0]
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	691b      	ldr	r3, [r3, #16]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d112      	bne.n	800e962 <USB_EPStartXfer+0xb5e>
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	00db      	lsls	r3, r3, #3
 800e942:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e946:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e94a:	681a      	ldr	r2, [r3, #0]
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	00db      	lsls	r3, r3, #3
 800e952:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e956:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e95a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e95e:	601a      	str	r2, [r3, #0]
 800e960:	e073      	b.n	800ea4a <USB_EPStartXfer+0xc46>
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	691b      	ldr	r3, [r3, #16]
 800e966:	2b3e      	cmp	r3, #62	@ 0x3e
 800e968:	d820      	bhi.n	800e9ac <USB_EPStartXfer+0xba8>
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	691b      	ldr	r3, [r3, #16]
 800e96e:	085b      	lsrs	r3, r3, #1
 800e970:	637b      	str	r3, [r7, #52]	@ 0x34
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	691b      	ldr	r3, [r3, #16]
 800e976:	f003 0301 	and.w	r3, r3, #1
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d002      	beq.n	800e984 <USB_EPStartXfer+0xb80>
 800e97e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e980:	3301      	adds	r3, #1
 800e982:	637b      	str	r3, [r7, #52]	@ 0x34
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	781b      	ldrb	r3, [r3, #0]
 800e988:	00db      	lsls	r3, r3, #3
 800e98a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e98e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e992:	6819      	ldr	r1, [r3, #0]
 800e994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e996:	069a      	lsls	r2, r3, #26
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	00db      	lsls	r3, r3, #3
 800e99e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9a6:	430a      	orrs	r2, r1
 800e9a8:	601a      	str	r2, [r3, #0]
 800e9aa:	e04e      	b.n	800ea4a <USB_EPStartXfer+0xc46>
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	691b      	ldr	r3, [r3, #16]
 800e9b0:	095b      	lsrs	r3, r3, #5
 800e9b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	691b      	ldr	r3, [r3, #16]
 800e9b8:	f003 031f 	and.w	r3, r3, #31
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d102      	bne.n	800e9c6 <USB_EPStartXfer+0xbc2>
 800e9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9c2:	3b01      	subs	r3, #1
 800e9c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	00db      	lsls	r3, r3, #3
 800e9cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9d4:	681a      	ldr	r2, [r3, #0]
 800e9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e9d8:	069b      	lsls	r3, r3, #26
 800e9da:	431a      	orrs	r2, r3
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	781b      	ldrb	r3, [r3, #0]
 800e9e0:	00db      	lsls	r3, r3, #3
 800e9e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e9e6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e9ea:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e9ee:	601a      	str	r2, [r3, #0]
 800e9f0:	e02b      	b.n	800ea4a <USB_EPStartXfer+0xc46>
 800e9f2:	bf00      	nop
 800e9f4:	07ff8fbf 	.word	0x07ff8fbf
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	785b      	ldrb	r3, [r3, #1]
 800e9fc:	2b01      	cmp	r3, #1
 800e9fe:	d124      	bne.n	800ea4a <USB_EPStartXfer+0xc46>
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	00db      	lsls	r3, r3, #3
 800ea06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	781b      	ldrb	r3, [r3, #0]
 800ea14:	00db      	lsls	r3, r3, #3
 800ea16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea1e:	b292      	uxth	r2, r2
 800ea20:	601a      	str	r2, [r3, #0]
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	781b      	ldrb	r3, [r3, #0]
 800ea26:	00db      	lsls	r3, r3, #3
 800ea28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea2c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea30:	6819      	ldr	r1, [r3, #0]
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	691b      	ldr	r3, [r3, #16]
 800ea36:	041a      	lsls	r2, r3, #16
 800ea38:	683b      	ldr	r3, [r7, #0]
 800ea3a:	781b      	ldrb	r3, [r3, #0]
 800ea3c:	00db      	lsls	r3, r3, #3
 800ea3e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea42:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea46:	430a      	orrs	r2, r1
 800ea48:	601a      	str	r2, [r3, #0]
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	785b      	ldrb	r3, [r3, #1]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d170      	bne.n	800eb34 <USB_EPStartXfer+0xd30>
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	781b      	ldrb	r3, [r3, #0]
 800ea56:	00db      	lsls	r3, r3, #3
 800ea58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea60:	685a      	ldr	r2, [r3, #4]
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	00db      	lsls	r3, r3, #3
 800ea68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea70:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ea74:	605a      	str	r2, [r3, #4]
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	691b      	ldr	r3, [r3, #16]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d112      	bne.n	800eaa4 <USB_EPStartXfer+0xca0>
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	781b      	ldrb	r3, [r3, #0]
 800ea82:	00db      	lsls	r3, r3, #3
 800ea84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea8c:	685a      	ldr	r2, [r3, #4]
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	00db      	lsls	r3, r3, #3
 800ea94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ea98:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ea9c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eaa0:	605a      	str	r2, [r3, #4]
 800eaa2:	e070      	b.n	800eb86 <USB_EPStartXfer+0xd82>
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	691b      	ldr	r3, [r3, #16]
 800eaa8:	2b3e      	cmp	r3, #62	@ 0x3e
 800eaaa:	d820      	bhi.n	800eaee <USB_EPStartXfer+0xcea>
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	691b      	ldr	r3, [r3, #16]
 800eab0:	085b      	lsrs	r3, r3, #1
 800eab2:	633b      	str	r3, [r7, #48]	@ 0x30
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	691b      	ldr	r3, [r3, #16]
 800eab8:	f003 0301 	and.w	r3, r3, #1
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d002      	beq.n	800eac6 <USB_EPStartXfer+0xcc2>
 800eac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac2:	3301      	adds	r3, #1
 800eac4:	633b      	str	r3, [r7, #48]	@ 0x30
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	781b      	ldrb	r3, [r3, #0]
 800eaca:	00db      	lsls	r3, r3, #3
 800eacc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ead0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ead4:	6859      	ldr	r1, [r3, #4]
 800ead6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead8:	069a      	lsls	r2, r3, #26
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	00db      	lsls	r3, r3, #3
 800eae0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eae4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eae8:	430a      	orrs	r2, r1
 800eaea:	605a      	str	r2, [r3, #4]
 800eaec:	e04b      	b.n	800eb86 <USB_EPStartXfer+0xd82>
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	691b      	ldr	r3, [r3, #16]
 800eaf2:	095b      	lsrs	r3, r3, #5
 800eaf4:	633b      	str	r3, [r7, #48]	@ 0x30
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	691b      	ldr	r3, [r3, #16]
 800eafa:	f003 031f 	and.w	r3, r3, #31
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d102      	bne.n	800eb08 <USB_EPStartXfer+0xd04>
 800eb02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb04:	3b01      	subs	r3, #1
 800eb06:	633b      	str	r3, [r7, #48]	@ 0x30
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	00db      	lsls	r3, r3, #3
 800eb0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb12:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb16:	685a      	ldr	r2, [r3, #4]
 800eb18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb1a:	069b      	lsls	r3, r3, #26
 800eb1c:	431a      	orrs	r2, r3
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	781b      	ldrb	r3, [r3, #0]
 800eb22:	00db      	lsls	r3, r3, #3
 800eb24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb2c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800eb30:	605a      	str	r2, [r3, #4]
 800eb32:	e028      	b.n	800eb86 <USB_EPStartXfer+0xd82>
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	785b      	ldrb	r3, [r3, #1]
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	d124      	bne.n	800eb86 <USB_EPStartXfer+0xd82>
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	00db      	lsls	r3, r3, #3
 800eb42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb46:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb4a:	685a      	ldr	r2, [r3, #4]
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	781b      	ldrb	r3, [r3, #0]
 800eb50:	00db      	lsls	r3, r3, #3
 800eb52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb5a:	b292      	uxth	r2, r2
 800eb5c:	605a      	str	r2, [r3, #4]
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	781b      	ldrb	r3, [r3, #0]
 800eb62:	00db      	lsls	r3, r3, #3
 800eb64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb68:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb6c:	6859      	ldr	r1, [r3, #4]
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	691b      	ldr	r3, [r3, #16]
 800eb72:	041a      	lsls	r2, r3, #16
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	00db      	lsls	r3, r3, #3
 800eb7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eb7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eb82:	430a      	orrs	r2, r1
 800eb84:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	69db      	ldr	r3, [r3, #28]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	f000 8181 	beq.w	800ee92 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	4413      	add	r3, r2
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800eb9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800eba0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d004      	beq.n	800ebb2 <USB_EPStartXfer+0xdae>
 800eba8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d10b      	bne.n	800ebca <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ebb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	f040 816a 	bne.w	800ee92 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ebbe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800ebc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f040 8164 	bne.w	800ee92 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	4413      	add	r3, r2
 800ebd4:	681a      	ldr	r2, [r3, #0]
 800ebd6:	4b98      	ldr	r3, [pc, #608]	@ (800ee38 <USB_EPStartXfer+0x1034>)
 800ebd8:	4013      	ands	r3, r2
 800ebda:	623b      	str	r3, [r7, #32]
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	441a      	add	r2, r3
 800ebe6:	6a3b      	ldr	r3, [r7, #32]
 800ebe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ebec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ebf0:	6013      	str	r3, [r2, #0]
 800ebf2:	e14e      	b.n	800ee92 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	78db      	ldrb	r3, [r3, #3]
 800ebf8:	2b01      	cmp	r3, #1
 800ebfa:	f040 8148 	bne.w	800ee8e <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	699a      	ldr	r2, [r3, #24]
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	691b      	ldr	r3, [r3, #16]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d909      	bls.n	800ec1e <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	691b      	ldr	r3, [r3, #16]
 800ec0e:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	699a      	ldr	r2, [r3, #24]
 800ec14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec16:	1ad2      	subs	r2, r2, r3
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	619a      	str	r2, [r3, #24]
 800ec1c:	e005      	b.n	800ec2a <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	699b      	ldr	r3, [r3, #24]
 800ec22:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	2200      	movs	r2, #0
 800ec28:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	785b      	ldrb	r3, [r3, #1]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d16a      	bne.n	800ed08 <USB_EPStartXfer+0xf04>
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	00db      	lsls	r3, r3, #3
 800ec38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec40:	681a      	ldr	r2, [r3, #0]
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	00db      	lsls	r3, r3, #3
 800ec48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec50:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ec54:	601a      	str	r2, [r3, #0]
 800ec56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d112      	bne.n	800ec82 <USB_EPStartXfer+0xe7e>
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	781b      	ldrb	r3, [r3, #0]
 800ec60:	00db      	lsls	r3, r3, #3
 800ec62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	00db      	lsls	r3, r3, #3
 800ec72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ec76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ec7a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ec7e:	601a      	str	r2, [r3, #0]
 800ec80:	e06a      	b.n	800ed58 <USB_EPStartXfer+0xf54>
 800ec82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec84:	2b3e      	cmp	r3, #62	@ 0x3e
 800ec86:	d81e      	bhi.n	800ecc6 <USB_EPStartXfer+0xec2>
 800ec88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec8a:	085b      	lsrs	r3, r3, #1
 800ec8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec90:	f003 0301 	and.w	r3, r3, #1
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d002      	beq.n	800ec9e <USB_EPStartXfer+0xe9a>
 800ec98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	00db      	lsls	r3, r3, #3
 800eca4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eca8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecac:	6819      	ldr	r1, [r3, #0]
 800ecae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecb0:	069a      	lsls	r2, r3, #26
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	00db      	lsls	r3, r3, #3
 800ecb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecbc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecc0:	430a      	orrs	r2, r1
 800ecc2:	601a      	str	r2, [r3, #0]
 800ecc4:	e048      	b.n	800ed58 <USB_EPStartXfer+0xf54>
 800ecc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecc8:	095b      	lsrs	r3, r3, #5
 800ecca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800eccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecce:	f003 031f 	and.w	r3, r3, #31
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d102      	bne.n	800ecdc <USB_EPStartXfer+0xed8>
 800ecd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	00db      	lsls	r3, r3, #3
 800ece2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ece6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecee:	069b      	lsls	r3, r3, #26
 800ecf0:	431a      	orrs	r2, r3
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	00db      	lsls	r3, r3, #3
 800ecf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ecfc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed00:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ed04:	601a      	str	r2, [r3, #0]
 800ed06:	e027      	b.n	800ed58 <USB_EPStartXfer+0xf54>
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	785b      	ldrb	r3, [r3, #1]
 800ed0c:	2b01      	cmp	r3, #1
 800ed0e:	d123      	bne.n	800ed58 <USB_EPStartXfer+0xf54>
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	00db      	lsls	r3, r3, #3
 800ed16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed1a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	00db      	lsls	r3, r3, #3
 800ed26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed2e:	b292      	uxth	r2, r2
 800ed30:	601a      	str	r2, [r3, #0]
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	00db      	lsls	r3, r3, #3
 800ed38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed40:	6819      	ldr	r1, [r3, #0]
 800ed42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed44:	041a      	lsls	r2, r3, #16
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	781b      	ldrb	r3, [r3, #0]
 800ed4a:	00db      	lsls	r3, r3, #3
 800ed4c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed50:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed54:	430a      	orrs	r2, r1
 800ed56:	601a      	str	r2, [r3, #0]
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	785b      	ldrb	r3, [r3, #1]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d16d      	bne.n	800ee3c <USB_EPStartXfer+0x1038>
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	00db      	lsls	r3, r3, #3
 800ed66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed6e:	685a      	ldr	r2, [r3, #4]
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	00db      	lsls	r3, r3, #3
 800ed76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed7a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed7e:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ed82:	605a      	str	r2, [r3, #4]
 800ed84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d112      	bne.n	800edb0 <USB_EPStartXfer+0xfac>
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	00db      	lsls	r3, r3, #3
 800ed90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ed94:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ed98:	685a      	ldr	r2, [r3, #4]
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	781b      	ldrb	r3, [r3, #0]
 800ed9e:	00db      	lsls	r3, r3, #3
 800eda0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800eda4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800eda8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800edac:	605a      	str	r2, [r3, #4]
 800edae:	e070      	b.n	800ee92 <USB_EPStartXfer+0x108e>
 800edb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edb2:	2b3e      	cmp	r3, #62	@ 0x3e
 800edb4:	d81e      	bhi.n	800edf4 <USB_EPStartXfer+0xff0>
 800edb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edb8:	085b      	lsrs	r3, r3, #1
 800edba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800edbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edbe:	f003 0301 	and.w	r3, r3, #1
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d002      	beq.n	800edcc <USB_EPStartXfer+0xfc8>
 800edc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edc8:	3301      	adds	r3, #1
 800edca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	781b      	ldrb	r3, [r3, #0]
 800edd0:	00db      	lsls	r3, r3, #3
 800edd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edd6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edda:	6859      	ldr	r1, [r3, #4]
 800eddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edde:	069a      	lsls	r2, r3, #26
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	781b      	ldrb	r3, [r3, #0]
 800ede4:	00db      	lsls	r3, r3, #3
 800ede6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800edea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800edee:	430a      	orrs	r2, r1
 800edf0:	605a      	str	r2, [r3, #4]
 800edf2:	e04e      	b.n	800ee92 <USB_EPStartXfer+0x108e>
 800edf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edf6:	095b      	lsrs	r3, r3, #5
 800edf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800edfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800edfc:	f003 031f 	and.w	r3, r3, #31
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d102      	bne.n	800ee0a <USB_EPStartXfer+0x1006>
 800ee04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee06:	3b01      	subs	r3, #1
 800ee08:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	00db      	lsls	r3, r3, #3
 800ee10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee18:	685a      	ldr	r2, [r3, #4]
 800ee1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee1c:	069b      	lsls	r3, r3, #26
 800ee1e:	431a      	orrs	r2, r3
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	00db      	lsls	r3, r3, #3
 800ee26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee2e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800ee32:	605a      	str	r2, [r3, #4]
 800ee34:	e02d      	b.n	800ee92 <USB_EPStartXfer+0x108e>
 800ee36:	bf00      	nop
 800ee38:	07ff8f8f 	.word	0x07ff8f8f
 800ee3c:	683b      	ldr	r3, [r7, #0]
 800ee3e:	785b      	ldrb	r3, [r3, #1]
 800ee40:	2b01      	cmp	r3, #1
 800ee42:	d126      	bne.n	800ee92 <USB_EPStartXfer+0x108e>
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	781b      	ldrb	r3, [r3, #0]
 800ee48:	00db      	lsls	r3, r3, #3
 800ee4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee52:	685a      	ldr	r2, [r3, #4]
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	781b      	ldrb	r3, [r3, #0]
 800ee58:	00db      	lsls	r3, r3, #3
 800ee5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee62:	b292      	uxth	r2, r2
 800ee64:	605a      	str	r2, [r3, #4]
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	781b      	ldrb	r3, [r3, #0]
 800ee6a:	00db      	lsls	r3, r3, #3
 800ee6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee74:	6859      	ldr	r1, [r3, #4]
 800ee76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ee78:	041a      	lsls	r2, r3, #16
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	00db      	lsls	r3, r3, #3
 800ee80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ee84:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ee88:	430a      	orrs	r2, r1
 800ee8a:	605a      	str	r2, [r3, #4]
 800ee8c:	e001      	b.n	800ee92 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e01c      	b.n	800eecc <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	683b      	ldr	r3, [r7, #0]
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	009b      	lsls	r3, r3, #2
 800ee9a:	4413      	add	r3, r2
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	4b0d      	ldr	r3, [pc, #52]	@ (800eed4 <USB_EPStartXfer+0x10d0>)
 800eea0:	4013      	ands	r3, r2
 800eea2:	61fb      	str	r3, [r7, #28]
 800eea4:	69fb      	ldr	r3, [r7, #28]
 800eea6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800eeaa:	61fb      	str	r3, [r7, #28]
 800eeac:	69fb      	ldr	r3, [r7, #28]
 800eeae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800eeb2:	61fb      	str	r3, [r7, #28]
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	781b      	ldrb	r3, [r3, #0]
 800eeba:	009b      	lsls	r3, r3, #2
 800eebc:	441a      	add	r2, r3
 800eebe:	69fb      	ldr	r3, [r7, #28]
 800eec0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eec8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eeca:	2300      	movs	r3, #0
}
 800eecc:	4618      	mov	r0, r3
 800eece:	3758      	adds	r7, #88	@ 0x58
 800eed0:	46bd      	mov	sp, r7
 800eed2:	bd80      	pop	{r7, pc}
 800eed4:	07ffbf8f 	.word	0x07ffbf8f

0800eed8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800eed8:	b480      	push	{r7}
 800eeda:	b085      	sub	sp, #20
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	785b      	ldrb	r3, [r3, #1]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d018      	beq.n	800ef1c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	781b      	ldrb	r3, [r3, #0]
 800eef0:	009b      	lsls	r3, r3, #2
 800eef2:	4413      	add	r3, r2
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	4b19      	ldr	r3, [pc, #100]	@ (800ef5c <USB_EPSetStall+0x84>)
 800eef8:	4013      	ands	r3, r2
 800eefa:	60bb      	str	r3, [r7, #8]
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	f083 0310 	eor.w	r3, r3, #16
 800ef02:	60bb      	str	r3, [r7, #8]
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	009b      	lsls	r3, r3, #2
 800ef0c:	441a      	add	r2, r3
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef18:	6013      	str	r3, [r2, #0]
 800ef1a:	e017      	b.n	800ef4c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ef1c:	687a      	ldr	r2, [r7, #4]
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	009b      	lsls	r3, r3, #2
 800ef24:	4413      	add	r3, r2
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	4b0d      	ldr	r3, [pc, #52]	@ (800ef60 <USB_EPSetStall+0x88>)
 800ef2a:	4013      	ands	r3, r2
 800ef2c:	60fb      	str	r3, [r7, #12]
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ef34:	60fb      	str	r3, [r7, #12]
 800ef36:	687a      	ldr	r2, [r7, #4]
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	441a      	add	r2, r3
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ef46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef4c:	2300      	movs	r3, #0
}
 800ef4e:	4618      	mov	r0, r3
 800ef50:	3714      	adds	r7, #20
 800ef52:	46bd      	mov	sp, r7
 800ef54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef58:	4770      	bx	lr
 800ef5a:	bf00      	nop
 800ef5c:	07ff8fbf 	.word	0x07ff8fbf
 800ef60:	07ffbf8f 	.word	0x07ffbf8f

0800ef64 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b089      	sub	sp, #36	@ 0x24
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	7b1b      	ldrb	r3, [r3, #12]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d17c      	bne.n	800f070 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	785b      	ldrb	r3, [r3, #1]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d03c      	beq.n	800eff8 <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	4413      	add	r3, r2
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	613b      	str	r3, [r7, #16]
 800ef8c:	693b      	ldr	r3, [r7, #16]
 800ef8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d013      	beq.n	800efbe <USB_EPClearStall+0x5a>
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	4413      	add	r3, r2
 800efa0:	681a      	ldr	r2, [r3, #0]
 800efa2:	4b37      	ldr	r3, [pc, #220]	@ (800f080 <USB_EPClearStall+0x11c>)
 800efa4:	4013      	ands	r3, r2
 800efa6:	60fb      	str	r3, [r7, #12]
 800efa8:	687a      	ldr	r2, [r7, #4]
 800efaa:	683b      	ldr	r3, [r7, #0]
 800efac:	781b      	ldrb	r3, [r3, #0]
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	441a      	add	r2, r3
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800efb8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800efbc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	78db      	ldrb	r3, [r3, #3]
 800efc2:	2b01      	cmp	r3, #1
 800efc4:	d054      	beq.n	800f070 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800efc6:	687a      	ldr	r2, [r7, #4]
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	781b      	ldrb	r3, [r3, #0]
 800efcc:	009b      	lsls	r3, r3, #2
 800efce:	4413      	add	r3, r2
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	4b2c      	ldr	r3, [pc, #176]	@ (800f084 <USB_EPClearStall+0x120>)
 800efd4:	4013      	ands	r3, r2
 800efd6:	60bb      	str	r3, [r7, #8]
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	f083 0320 	eor.w	r3, r3, #32
 800efde:	60bb      	str	r3, [r7, #8]
 800efe0:	687a      	ldr	r2, [r7, #4]
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	009b      	lsls	r3, r3, #2
 800efe8:	441a      	add	r2, r3
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eff0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eff4:	6013      	str	r3, [r2, #0]
 800eff6:	e03b      	b.n	800f070 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	781b      	ldrb	r3, [r3, #0]
 800effe:	009b      	lsls	r3, r3, #2
 800f000:	4413      	add	r3, r2
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	61fb      	str	r3, [r7, #28]
 800f006:	69fb      	ldr	r3, [r7, #28]
 800f008:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d013      	beq.n	800f038 <USB_EPClearStall+0xd4>
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	781b      	ldrb	r3, [r3, #0]
 800f016:	009b      	lsls	r3, r3, #2
 800f018:	4413      	add	r3, r2
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	4b18      	ldr	r3, [pc, #96]	@ (800f080 <USB_EPClearStall+0x11c>)
 800f01e:	4013      	ands	r3, r2
 800f020:	61bb      	str	r3, [r7, #24]
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	441a      	add	r2, r3
 800f02c:	69bb      	ldr	r3, [r7, #24]
 800f02e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f036:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	781b      	ldrb	r3, [r3, #0]
 800f03e:	009b      	lsls	r3, r3, #2
 800f040:	4413      	add	r3, r2
 800f042:	681a      	ldr	r2, [r3, #0]
 800f044:	4b10      	ldr	r3, [pc, #64]	@ (800f088 <USB_EPClearStall+0x124>)
 800f046:	4013      	ands	r3, r2
 800f048:	617b      	str	r3, [r7, #20]
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f050:	617b      	str	r3, [r7, #20]
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f058:	617b      	str	r3, [r7, #20]
 800f05a:	687a      	ldr	r2, [r7, #4]
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	009b      	lsls	r3, r3, #2
 800f062:	441a      	add	r2, r3
 800f064:	697b      	ldr	r3, [r7, #20]
 800f066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f06a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f06e:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f070:	2300      	movs	r3, #0
}
 800f072:	4618      	mov	r0, r3
 800f074:	3724      	adds	r7, #36	@ 0x24
 800f076:	46bd      	mov	sp, r7
 800f078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07c:	4770      	bx	lr
 800f07e:	bf00      	nop
 800f080:	07ff8f8f 	.word	0x07ff8f8f
 800f084:	07ff8fbf 	.word	0x07ff8fbf
 800f088:	07ffbf8f 	.word	0x07ffbf8f

0800f08c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b083      	sub	sp, #12
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	460b      	mov	r3, r1
 800f096:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f098:	78fb      	ldrb	r3, [r7, #3]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d102      	bne.n	800f0a4 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2280      	movs	r2, #128	@ 0x80
 800f0a2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f0a4:	2300      	movs	r3, #0
}
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	370c      	adds	r7, #12
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0b0:	4770      	bx	lr

0800f0b2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800f0b2:	b480      	push	{r7}
 800f0b4:	b083      	sub	sp, #12
 800f0b6:	af00      	add	r7, sp, #0
 800f0b8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0be:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f0c6:	2300      	movs	r3, #0
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	370c      	adds	r7, #12
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr

0800f0d4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0e0:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f0e8:	2300      	movs	r3, #0
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	370c      	adds	r7, #12
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr

0800f0f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800f0f6:	b480      	push	{r7}
 800f0f8:	b085      	sub	sp, #20
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f102:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f104:	68fb      	ldr	r3, [r7, #12]
}
 800f106:	4618      	mov	r0, r3
 800f108:	3714      	adds	r7, #20
 800f10a:	46bd      	mov	sp, r7
 800f10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f110:	4770      	bx	lr

0800f112 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f112:	b480      	push	{r7}
 800f114:	b08b      	sub	sp, #44	@ 0x2c
 800f116:	af00      	add	r7, sp, #0
 800f118:	60f8      	str	r0, [r7, #12]
 800f11a:	60b9      	str	r1, [r7, #8]
 800f11c:	4611      	mov	r1, r2
 800f11e:	461a      	mov	r2, r3
 800f120:	460b      	mov	r3, r1
 800f122:	80fb      	strh	r3, [r7, #6]
 800f124:	4613      	mov	r3, r2
 800f126:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800f128:	88bb      	ldrh	r3, [r7, #4]
 800f12a:	3303      	adds	r3, #3
 800f12c:	089b      	lsrs	r3, r3, #2
 800f12e:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800f130:	88bb      	ldrh	r3, [r7, #4]
 800f132:	f003 0303 	and.w	r3, r3, #3
 800f136:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800f13c:	8afb      	ldrh	r3, [r7, #22]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d002      	beq.n	800f148 <USB_WritePMA+0x36>
  {
    NbWords--;
 800f142:	69bb      	ldr	r3, [r7, #24]
 800f144:	3b01      	subs	r3, #1
 800f146:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800f148:	88fb      	ldrh	r3, [r7, #6]
 800f14a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f14e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f152:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800f154:	69bb      	ldr	r3, [r7, #24]
 800f156:	623b      	str	r3, [r7, #32]
 800f158:	e015      	b.n	800f186 <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	69fb      	ldr	r3, [r7, #28]
 800f160:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	3304      	adds	r3, #4
 800f166:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800f168:	693b      	ldr	r3, [r7, #16]
 800f16a:	3301      	adds	r3, #1
 800f16c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	3301      	adds	r3, #1
 800f172:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	3301      	adds	r3, #1
 800f178:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	3301      	adds	r3, #1
 800f17e:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800f180:	6a3b      	ldr	r3, [r7, #32]
 800f182:	3b01      	subs	r3, #1
 800f184:	623b      	str	r3, [r7, #32]
 800f186:	6a3b      	ldr	r3, [r7, #32]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d1e6      	bne.n	800f15a <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800f18c:	8afb      	ldrh	r3, [r7, #22]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d01a      	beq.n	800f1c8 <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800f192:	2300      	movs	r3, #0
 800f194:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800f196:	693b      	ldr	r3, [r7, #16]
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	461a      	mov	r2, r3
 800f19c:	6a3b      	ldr	r3, [r7, #32]
 800f19e:	00db      	lsls	r3, r3, #3
 800f1a0:	fa02 f303 	lsl.w	r3, r2, r3
 800f1a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1a6:	4313      	orrs	r3, r2
 800f1a8:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800f1aa:	6a3b      	ldr	r3, [r7, #32]
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	623b      	str	r3, [r7, #32]
      pBuf++;
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	3301      	adds	r3, #1
 800f1b4:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800f1b6:	8afb      	ldrh	r3, [r7, #22]
 800f1b8:	3b01      	subs	r3, #1
 800f1ba:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800f1bc:	8afb      	ldrh	r3, [r7, #22]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d1e9      	bne.n	800f196 <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800f1c2:	69fb      	ldr	r3, [r7, #28]
 800f1c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1c6:	601a      	str	r2, [r3, #0]
  }
}
 800f1c8:	bf00      	nop
 800f1ca:	372c      	adds	r7, #44	@ 0x2c
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr

0800f1d4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b08b      	sub	sp, #44	@ 0x2c
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	60f8      	str	r0, [r7, #12]
 800f1dc:	60b9      	str	r1, [r7, #8]
 800f1de:	4611      	mov	r1, r2
 800f1e0:	461a      	mov	r2, r3
 800f1e2:	460b      	mov	r3, r1
 800f1e4:	80fb      	strh	r3, [r7, #6]
 800f1e6:	4613      	mov	r3, r2
 800f1e8:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800f1ea:	88bb      	ldrh	r3, [r7, #4]
 800f1ec:	3303      	adds	r3, #3
 800f1ee:	089b      	lsrs	r3, r3, #2
 800f1f0:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800f1f2:	88bb      	ldrh	r3, [r7, #4]
 800f1f4:	f003 0303 	and.w	r3, r3, #3
 800f1f8:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800f1fa:	68bb      	ldr	r3, [r7, #8]
 800f1fc:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800f1fe:	88fb      	ldrh	r3, [r7, #6]
 800f200:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800f204:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800f208:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800f20a:	8b7b      	ldrh	r3, [r7, #26]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d002      	beq.n	800f216 <USB_ReadPMA+0x42>
  {
    NbWords--;
 800f210:	69fb      	ldr	r3, [r7, #28]
 800f212:	3b01      	subs	r3, #1
 800f214:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	627b      	str	r3, [r7, #36]	@ 0x24
 800f21a:	e015      	b.n	800f248 <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800f21c:	6a3b      	ldr	r3, [r7, #32]
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800f224:	6a3b      	ldr	r3, [r7, #32]
 800f226:	3304      	adds	r3, #4
 800f228:	623b      	str	r3, [r7, #32]
    pBuf++;
 800f22a:	697b      	ldr	r3, [r7, #20]
 800f22c:	3301      	adds	r3, #1
 800f22e:	617b      	str	r3, [r7, #20]
    pBuf++;
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	3301      	adds	r3, #1
 800f234:	617b      	str	r3, [r7, #20]
    pBuf++;
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	3301      	adds	r3, #1
 800f23a:	617b      	str	r3, [r7, #20]
    pBuf++;
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	3301      	adds	r3, #1
 800f240:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800f242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f244:	3b01      	subs	r3, #1
 800f246:	627b      	str	r3, [r7, #36]	@ 0x24
 800f248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d1e6      	bne.n	800f21c <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800f24e:	8b7b      	ldrh	r3, [r7, #26]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d017      	beq.n	800f284 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800f254:	6a3b      	ldr	r3, [r7, #32]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800f25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	00db      	lsls	r3, r3, #3
 800f260:	693a      	ldr	r2, [r7, #16]
 800f262:	fa22 f303 	lsr.w	r3, r2, r3
 800f266:	b2da      	uxtb	r2, r3
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	701a      	strb	r2, [r3, #0]
      count++;
 800f26c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f26e:	3301      	adds	r3, #1
 800f270:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	3301      	adds	r3, #1
 800f276:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800f278:	8b7b      	ldrh	r3, [r7, #26]
 800f27a:	3b01      	subs	r3, #1
 800f27c:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800f27e:	8b7b      	ldrh	r3, [r7, #26]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d1ea      	bne.n	800f25a <USB_ReadPMA+0x86>
  }
}
 800f284:	bf00      	nop
 800f286:	372c      	adds	r7, #44	@ 0x2c
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr

0800f290 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	460b      	mov	r3, r1
 800f29a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f29c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f2a0:	f001 f8fa 	bl	8010498 <USBD_static_malloc>
 800f2a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d109      	bne.n	800f2c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	32b0      	adds	r2, #176	@ 0xb0
 800f2b6:	2100      	movs	r1, #0
 800f2b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f2bc:	2302      	movs	r3, #2
 800f2be:	e0d4      	b.n	800f46a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f2c0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f2c4:	2100      	movs	r1, #0
 800f2c6:	68f8      	ldr	r0, [r7, #12]
 800f2c8:	f002 fe0c 	bl	8011ee4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	32b0      	adds	r2, #176	@ 0xb0
 800f2d6:	68f9      	ldr	r1, [r7, #12]
 800f2d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	32b0      	adds	r2, #176	@ 0xb0
 800f2e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	7c1b      	ldrb	r3, [r3, #16]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d138      	bne.n	800f36a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f2f8:	4b5e      	ldr	r3, [pc, #376]	@ (800f474 <USBD_CDC_Init+0x1e4>)
 800f2fa:	7819      	ldrb	r1, [r3, #0]
 800f2fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f300:	2202      	movs	r2, #2
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f000 ffcf 	bl	80102a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f308:	4b5a      	ldr	r3, [pc, #360]	@ (800f474 <USBD_CDC_Init+0x1e4>)
 800f30a:	781b      	ldrb	r3, [r3, #0]
 800f30c:	f003 020f 	and.w	r2, r3, #15
 800f310:	6879      	ldr	r1, [r7, #4]
 800f312:	4613      	mov	r3, r2
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	4413      	add	r3, r2
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	440b      	add	r3, r1
 800f31c:	3324      	adds	r3, #36	@ 0x24
 800f31e:	2201      	movs	r2, #1
 800f320:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f322:	4b55      	ldr	r3, [pc, #340]	@ (800f478 <USBD_CDC_Init+0x1e8>)
 800f324:	7819      	ldrb	r1, [r3, #0]
 800f326:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f32a:	2202      	movs	r2, #2
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f000 ffba 	bl	80102a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f332:	4b51      	ldr	r3, [pc, #324]	@ (800f478 <USBD_CDC_Init+0x1e8>)
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	f003 020f 	and.w	r2, r3, #15
 800f33a:	6879      	ldr	r1, [r7, #4]
 800f33c:	4613      	mov	r3, r2
 800f33e:	009b      	lsls	r3, r3, #2
 800f340:	4413      	add	r3, r2
 800f342:	009b      	lsls	r3, r3, #2
 800f344:	440b      	add	r3, r1
 800f346:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f34a:	2201      	movs	r2, #1
 800f34c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f34e:	4b4b      	ldr	r3, [pc, #300]	@ (800f47c <USBD_CDC_Init+0x1ec>)
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	f003 020f 	and.w	r2, r3, #15
 800f356:	6879      	ldr	r1, [r7, #4]
 800f358:	4613      	mov	r3, r2
 800f35a:	009b      	lsls	r3, r3, #2
 800f35c:	4413      	add	r3, r2
 800f35e:	009b      	lsls	r3, r3, #2
 800f360:	440b      	add	r3, r1
 800f362:	3326      	adds	r3, #38	@ 0x26
 800f364:	2210      	movs	r2, #16
 800f366:	801a      	strh	r2, [r3, #0]
 800f368:	e035      	b.n	800f3d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f36a:	4b42      	ldr	r3, [pc, #264]	@ (800f474 <USBD_CDC_Init+0x1e4>)
 800f36c:	7819      	ldrb	r1, [r3, #0]
 800f36e:	2340      	movs	r3, #64	@ 0x40
 800f370:	2202      	movs	r2, #2
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 ff97 	bl	80102a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f378:	4b3e      	ldr	r3, [pc, #248]	@ (800f474 <USBD_CDC_Init+0x1e4>)
 800f37a:	781b      	ldrb	r3, [r3, #0]
 800f37c:	f003 020f 	and.w	r2, r3, #15
 800f380:	6879      	ldr	r1, [r7, #4]
 800f382:	4613      	mov	r3, r2
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	4413      	add	r3, r2
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	440b      	add	r3, r1
 800f38c:	3324      	adds	r3, #36	@ 0x24
 800f38e:	2201      	movs	r2, #1
 800f390:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f392:	4b39      	ldr	r3, [pc, #228]	@ (800f478 <USBD_CDC_Init+0x1e8>)
 800f394:	7819      	ldrb	r1, [r3, #0]
 800f396:	2340      	movs	r3, #64	@ 0x40
 800f398:	2202      	movs	r2, #2
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 ff83 	bl	80102a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f3a0:	4b35      	ldr	r3, [pc, #212]	@ (800f478 <USBD_CDC_Init+0x1e8>)
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	f003 020f 	and.w	r2, r3, #15
 800f3a8:	6879      	ldr	r1, [r7, #4]
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	009b      	lsls	r3, r3, #2
 800f3ae:	4413      	add	r3, r2
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	440b      	add	r3, r1
 800f3b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f3bc:	4b2f      	ldr	r3, [pc, #188]	@ (800f47c <USBD_CDC_Init+0x1ec>)
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	f003 020f 	and.w	r2, r3, #15
 800f3c4:	6879      	ldr	r1, [r7, #4]
 800f3c6:	4613      	mov	r3, r2
 800f3c8:	009b      	lsls	r3, r3, #2
 800f3ca:	4413      	add	r3, r2
 800f3cc:	009b      	lsls	r3, r3, #2
 800f3ce:	440b      	add	r3, r1
 800f3d0:	3326      	adds	r3, #38	@ 0x26
 800f3d2:	2210      	movs	r2, #16
 800f3d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f3d6:	4b29      	ldr	r3, [pc, #164]	@ (800f47c <USBD_CDC_Init+0x1ec>)
 800f3d8:	7819      	ldrb	r1, [r3, #0]
 800f3da:	2308      	movs	r3, #8
 800f3dc:	2203      	movs	r2, #3
 800f3de:	6878      	ldr	r0, [r7, #4]
 800f3e0:	f000 ff61 	bl	80102a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f3e4:	4b25      	ldr	r3, [pc, #148]	@ (800f47c <USBD_CDC_Init+0x1ec>)
 800f3e6:	781b      	ldrb	r3, [r3, #0]
 800f3e8:	f003 020f 	and.w	r2, r3, #15
 800f3ec:	6879      	ldr	r1, [r7, #4]
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	4413      	add	r3, r2
 800f3f4:	009b      	lsls	r3, r3, #2
 800f3f6:	440b      	add	r3, r1
 800f3f8:	3324      	adds	r3, #36	@ 0x24
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2200      	movs	r2, #0
 800f402:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	33b0      	adds	r3, #176	@ 0xb0
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	4413      	add	r3, r2
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2200      	movs	r2, #0
 800f41e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	2200      	movs	r2, #0
 800f426:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f430:	2b00      	cmp	r3, #0
 800f432:	d101      	bne.n	800f438 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f434:	2302      	movs	r3, #2
 800f436:	e018      	b.n	800f46a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	7c1b      	ldrb	r3, [r3, #16]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d10a      	bne.n	800f456 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f440:	4b0d      	ldr	r3, [pc, #52]	@ (800f478 <USBD_CDC_Init+0x1e8>)
 800f442:	7819      	ldrb	r1, [r3, #0]
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f44a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f000 fff4 	bl	801043c <USBD_LL_PrepareReceive>
 800f454:	e008      	b.n	800f468 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f456:	4b08      	ldr	r3, [pc, #32]	@ (800f478 <USBD_CDC_Init+0x1e8>)
 800f458:	7819      	ldrb	r1, [r3, #0]
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f460:	2340      	movs	r3, #64	@ 0x40
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 ffea 	bl	801043c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f468:	2300      	movs	r3, #0
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}
 800f472:	bf00      	nop
 800f474:	200000b3 	.word	0x200000b3
 800f478:	200000b4 	.word	0x200000b4
 800f47c:	200000b5 	.word	0x200000b5

0800f480 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	460b      	mov	r3, r1
 800f48a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f48c:	4b3a      	ldr	r3, [pc, #232]	@ (800f578 <USBD_CDC_DeInit+0xf8>)
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	4619      	mov	r1, r3
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f000 ff27 	bl	80102e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f498:	4b37      	ldr	r3, [pc, #220]	@ (800f578 <USBD_CDC_DeInit+0xf8>)
 800f49a:	781b      	ldrb	r3, [r3, #0]
 800f49c:	f003 020f 	and.w	r2, r3, #15
 800f4a0:	6879      	ldr	r1, [r7, #4]
 800f4a2:	4613      	mov	r3, r2
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	4413      	add	r3, r2
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	440b      	add	r3, r1
 800f4ac:	3324      	adds	r3, #36	@ 0x24
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f4b2:	4b32      	ldr	r3, [pc, #200]	@ (800f57c <USBD_CDC_DeInit+0xfc>)
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 ff14 	bl	80102e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f4be:	4b2f      	ldr	r3, [pc, #188]	@ (800f57c <USBD_CDC_DeInit+0xfc>)
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	f003 020f 	and.w	r2, r3, #15
 800f4c6:	6879      	ldr	r1, [r7, #4]
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	4413      	add	r3, r2
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	440b      	add	r3, r1
 800f4d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f4d6:	2200      	movs	r2, #0
 800f4d8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f4da:	4b29      	ldr	r3, [pc, #164]	@ (800f580 <USBD_CDC_DeInit+0x100>)
 800f4dc:	781b      	ldrb	r3, [r3, #0]
 800f4de:	4619      	mov	r1, r3
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f000 ff00 	bl	80102e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f4e6:	4b26      	ldr	r3, [pc, #152]	@ (800f580 <USBD_CDC_DeInit+0x100>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	f003 020f 	and.w	r2, r3, #15
 800f4ee:	6879      	ldr	r1, [r7, #4]
 800f4f0:	4613      	mov	r3, r2
 800f4f2:	009b      	lsls	r3, r3, #2
 800f4f4:	4413      	add	r3, r2
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	440b      	add	r3, r1
 800f4fa:	3324      	adds	r3, #36	@ 0x24
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f500:	4b1f      	ldr	r3, [pc, #124]	@ (800f580 <USBD_CDC_DeInit+0x100>)
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	f003 020f 	and.w	r2, r3, #15
 800f508:	6879      	ldr	r1, [r7, #4]
 800f50a:	4613      	mov	r3, r2
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	4413      	add	r3, r2
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	440b      	add	r3, r1
 800f514:	3326      	adds	r3, #38	@ 0x26
 800f516:	2200      	movs	r2, #0
 800f518:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	32b0      	adds	r2, #176	@ 0xb0
 800f524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d01f      	beq.n	800f56c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f532:	687a      	ldr	r2, [r7, #4]
 800f534:	33b0      	adds	r3, #176	@ 0xb0
 800f536:	009b      	lsls	r3, r3, #2
 800f538:	4413      	add	r3, r2
 800f53a:	685b      	ldr	r3, [r3, #4]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	32b0      	adds	r2, #176	@ 0xb0
 800f54a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f54e:	4618      	mov	r0, r3
 800f550:	f000 ffb0 	bl	80104b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	32b0      	adds	r2, #176	@ 0xb0
 800f55e:	2100      	movs	r1, #0
 800f560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2200      	movs	r2, #0
 800f568:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f56c:	2300      	movs	r3, #0
}
 800f56e:	4618      	mov	r0, r3
 800f570:	3708      	adds	r7, #8
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}
 800f576:	bf00      	nop
 800f578:	200000b3 	.word	0x200000b3
 800f57c:	200000b4 	.word	0x200000b4
 800f580:	200000b5 	.word	0x200000b5

0800f584 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b086      	sub	sp, #24
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	32b0      	adds	r2, #176	@ 0xb0
 800f598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f59c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f5aa:	693b      	ldr	r3, [r7, #16]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d101      	bne.n	800f5b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f5b0:	2303      	movs	r3, #3
 800f5b2:	e0bf      	b.n	800f734 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5b4:	683b      	ldr	r3, [r7, #0]
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d050      	beq.n	800f662 <USBD_CDC_Setup+0xde>
 800f5c0:	2b20      	cmp	r3, #32
 800f5c2:	f040 80af 	bne.w	800f724 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	88db      	ldrh	r3, [r3, #6]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d03a      	beq.n	800f644 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	b25b      	sxtb	r3, r3
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	da1b      	bge.n	800f610 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f5de:	687a      	ldr	r2, [r7, #4]
 800f5e0:	33b0      	adds	r3, #176	@ 0xb0
 800f5e2:	009b      	lsls	r3, r3, #2
 800f5e4:	4413      	add	r3, r2
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	689b      	ldr	r3, [r3, #8]
 800f5ea:	683a      	ldr	r2, [r7, #0]
 800f5ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f5ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f5f0:	683a      	ldr	r2, [r7, #0]
 800f5f2:	88d2      	ldrh	r2, [r2, #6]
 800f5f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	88db      	ldrh	r3, [r3, #6]
 800f5fa:	2b07      	cmp	r3, #7
 800f5fc:	bf28      	it	cs
 800f5fe:	2307      	movcs	r3, #7
 800f600:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	89fa      	ldrh	r2, [r7, #14]
 800f606:	4619      	mov	r1, r3
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f002 fa46 	bl	8011a9a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f60e:	e090      	b.n	800f732 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	785a      	ldrb	r2, [r3, #1]
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	88db      	ldrh	r3, [r3, #6]
 800f61e:	2b3f      	cmp	r3, #63	@ 0x3f
 800f620:	d803      	bhi.n	800f62a <USBD_CDC_Setup+0xa6>
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	88db      	ldrh	r3, [r3, #6]
 800f626:	b2da      	uxtb	r2, r3
 800f628:	e000      	b.n	800f62c <USBD_CDC_Setup+0xa8>
 800f62a:	2240      	movs	r2, #64	@ 0x40
 800f62c:	693b      	ldr	r3, [r7, #16]
 800f62e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f632:	6939      	ldr	r1, [r7, #16]
 800f634:	693b      	ldr	r3, [r7, #16]
 800f636:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f63a:	461a      	mov	r2, r3
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f002 fa58 	bl	8011af2 <USBD_CtlPrepareRx>
      break;
 800f642:	e076      	b.n	800f732 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f64a:	687a      	ldr	r2, [r7, #4]
 800f64c:	33b0      	adds	r3, #176	@ 0xb0
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	4413      	add	r3, r2
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	689b      	ldr	r3, [r3, #8]
 800f656:	683a      	ldr	r2, [r7, #0]
 800f658:	7850      	ldrb	r0, [r2, #1]
 800f65a:	2200      	movs	r2, #0
 800f65c:	6839      	ldr	r1, [r7, #0]
 800f65e:	4798      	blx	r3
      break;
 800f660:	e067      	b.n	800f732 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	785b      	ldrb	r3, [r3, #1]
 800f666:	2b0b      	cmp	r3, #11
 800f668:	d851      	bhi.n	800f70e <USBD_CDC_Setup+0x18a>
 800f66a:	a201      	add	r2, pc, #4	@ (adr r2, 800f670 <USBD_CDC_Setup+0xec>)
 800f66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f670:	0800f6a1 	.word	0x0800f6a1
 800f674:	0800f71d 	.word	0x0800f71d
 800f678:	0800f70f 	.word	0x0800f70f
 800f67c:	0800f70f 	.word	0x0800f70f
 800f680:	0800f70f 	.word	0x0800f70f
 800f684:	0800f70f 	.word	0x0800f70f
 800f688:	0800f70f 	.word	0x0800f70f
 800f68c:	0800f70f 	.word	0x0800f70f
 800f690:	0800f70f 	.word	0x0800f70f
 800f694:	0800f70f 	.word	0x0800f70f
 800f698:	0800f6cb 	.word	0x0800f6cb
 800f69c:	0800f6f5 	.word	0x0800f6f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	2b03      	cmp	r3, #3
 800f6aa:	d107      	bne.n	800f6bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f6ac:	f107 030a 	add.w	r3, r7, #10
 800f6b0:	2202      	movs	r2, #2
 800f6b2:	4619      	mov	r1, r3
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f002 f9f0 	bl	8011a9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f6ba:	e032      	b.n	800f722 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f6bc:	6839      	ldr	r1, [r7, #0]
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f002 f86d 	bl	801179e <USBD_CtlError>
            ret = USBD_FAIL;
 800f6c4:	2303      	movs	r3, #3
 800f6c6:	75fb      	strb	r3, [r7, #23]
          break;
 800f6c8:	e02b      	b.n	800f722 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	2b03      	cmp	r3, #3
 800f6d4:	d107      	bne.n	800f6e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f6d6:	f107 030d 	add.w	r3, r7, #13
 800f6da:	2201      	movs	r2, #1
 800f6dc:	4619      	mov	r1, r3
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f002 f9db 	bl	8011a9a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f6e4:	e01d      	b.n	800f722 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f6e6:	6839      	ldr	r1, [r7, #0]
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f002 f858 	bl	801179e <USBD_CtlError>
            ret = USBD_FAIL;
 800f6ee:	2303      	movs	r3, #3
 800f6f0:	75fb      	strb	r3, [r7, #23]
          break;
 800f6f2:	e016      	b.n	800f722 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	2b03      	cmp	r3, #3
 800f6fe:	d00f      	beq.n	800f720 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f700:	6839      	ldr	r1, [r7, #0]
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f002 f84b 	bl	801179e <USBD_CtlError>
            ret = USBD_FAIL;
 800f708:	2303      	movs	r3, #3
 800f70a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f70c:	e008      	b.n	800f720 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f70e:	6839      	ldr	r1, [r7, #0]
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f002 f844 	bl	801179e <USBD_CtlError>
          ret = USBD_FAIL;
 800f716:	2303      	movs	r3, #3
 800f718:	75fb      	strb	r3, [r7, #23]
          break;
 800f71a:	e002      	b.n	800f722 <USBD_CDC_Setup+0x19e>
          break;
 800f71c:	bf00      	nop
 800f71e:	e008      	b.n	800f732 <USBD_CDC_Setup+0x1ae>
          break;
 800f720:	bf00      	nop
      }
      break;
 800f722:	e006      	b.n	800f732 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f724:	6839      	ldr	r1, [r7, #0]
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f002 f839 	bl	801179e <USBD_CtlError>
      ret = USBD_FAIL;
 800f72c:	2303      	movs	r3, #3
 800f72e:	75fb      	strb	r3, [r7, #23]
      break;
 800f730:	bf00      	nop
  }

  return (uint8_t)ret;
 800f732:	7dfb      	ldrb	r3, [r7, #23]
}
 800f734:	4618      	mov	r0, r3
 800f736:	3718      	adds	r7, #24
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}

0800f73c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b084      	sub	sp, #16
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	460b      	mov	r3, r1
 800f746:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f74e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	32b0      	adds	r2, #176	@ 0xb0
 800f75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d101      	bne.n	800f766 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f762:	2303      	movs	r3, #3
 800f764:	e065      	b.n	800f832 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	32b0      	adds	r2, #176	@ 0xb0
 800f770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f774:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f776:	78fb      	ldrb	r3, [r7, #3]
 800f778:	f003 020f 	and.w	r2, r3, #15
 800f77c:	6879      	ldr	r1, [r7, #4]
 800f77e:	4613      	mov	r3, r2
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	4413      	add	r3, r2
 800f784:	009b      	lsls	r3, r3, #2
 800f786:	440b      	add	r3, r1
 800f788:	3318      	adds	r3, #24
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d02f      	beq.n	800f7f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f790:	78fb      	ldrb	r3, [r7, #3]
 800f792:	f003 020f 	and.w	r2, r3, #15
 800f796:	6879      	ldr	r1, [r7, #4]
 800f798:	4613      	mov	r3, r2
 800f79a:	009b      	lsls	r3, r3, #2
 800f79c:	4413      	add	r3, r2
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	440b      	add	r3, r1
 800f7a2:	3318      	adds	r3, #24
 800f7a4:	681a      	ldr	r2, [r3, #0]
 800f7a6:	78fb      	ldrb	r3, [r7, #3]
 800f7a8:	f003 010f 	and.w	r1, r3, #15
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	460b      	mov	r3, r1
 800f7b0:	009b      	lsls	r3, r3, #2
 800f7b2:	440b      	add	r3, r1
 800f7b4:	00db      	lsls	r3, r3, #3
 800f7b6:	4403      	add	r3, r0
 800f7b8:	3324      	adds	r3, #36	@ 0x24
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800f7c0:	fb01 f303 	mul.w	r3, r1, r3
 800f7c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d112      	bne.n	800f7f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f7ca:	78fb      	ldrb	r3, [r7, #3]
 800f7cc:	f003 020f 	and.w	r2, r3, #15
 800f7d0:	6879      	ldr	r1, [r7, #4]
 800f7d2:	4613      	mov	r3, r2
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	4413      	add	r3, r2
 800f7d8:	009b      	lsls	r3, r3, #2
 800f7da:	440b      	add	r3, r1
 800f7dc:	3318      	adds	r3, #24
 800f7de:	2200      	movs	r2, #0
 800f7e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f7e2:	78f9      	ldrb	r1, [r7, #3]
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f000 fe0c 	bl	8010406 <USBD_LL_Transmit>
 800f7ee:	e01f      	b.n	800f830 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	33b0      	adds	r3, #176	@ 0xb0
 800f802:	009b      	lsls	r3, r3, #2
 800f804:	4413      	add	r3, r2
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	691b      	ldr	r3, [r3, #16]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d010      	beq.n	800f830 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f814:	687a      	ldr	r2, [r7, #4]
 800f816:	33b0      	adds	r3, #176	@ 0xb0
 800f818:	009b      	lsls	r3, r3, #2
 800f81a:	4413      	add	r3, r2
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	691b      	ldr	r3, [r3, #16]
 800f820:	68ba      	ldr	r2, [r7, #8]
 800f822:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f826:	68ba      	ldr	r2, [r7, #8]
 800f828:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f82c:	78fa      	ldrb	r2, [r7, #3]
 800f82e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f830:	2300      	movs	r3, #0
}
 800f832:	4618      	mov	r0, r3
 800f834:	3710      	adds	r7, #16
 800f836:	46bd      	mov	sp, r7
 800f838:	bd80      	pop	{r7, pc}

0800f83a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f83a:	b580      	push	{r7, lr}
 800f83c:	b084      	sub	sp, #16
 800f83e:	af00      	add	r7, sp, #0
 800f840:	6078      	str	r0, [r7, #4]
 800f842:	460b      	mov	r3, r1
 800f844:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	32b0      	adds	r2, #176	@ 0xb0
 800f850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f854:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	32b0      	adds	r2, #176	@ 0xb0
 800f860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d101      	bne.n	800f86c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f868:	2303      	movs	r3, #3
 800f86a:	e01a      	b.n	800f8a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f86c:	78fb      	ldrb	r3, [r7, #3]
 800f86e:	4619      	mov	r1, r3
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f000 fdfe 	bl	8010472 <USBD_LL_GetRxDataSize>
 800f876:	4602      	mov	r2, r0
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f884:	687a      	ldr	r2, [r7, #4]
 800f886:	33b0      	adds	r3, #176	@ 0xb0
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	4413      	add	r3, r2
 800f88c:	685b      	ldr	r3, [r3, #4]
 800f88e:	68db      	ldr	r3, [r3, #12]
 800f890:	68fa      	ldr	r2, [r7, #12]
 800f892:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f89c:	4611      	mov	r1, r2
 800f89e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f8a0:	2300      	movs	r3, #0
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3710      	adds	r7, #16
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}

0800f8aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f8aa:	b580      	push	{r7, lr}
 800f8ac:	b084      	sub	sp, #16
 800f8ae:	af00      	add	r7, sp, #0
 800f8b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	32b0      	adds	r2, #176	@ 0xb0
 800f8bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d101      	bne.n	800f8cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f8c8:	2303      	movs	r3, #3
 800f8ca:	e024      	b.n	800f916 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f8d2:	687a      	ldr	r2, [r7, #4]
 800f8d4:	33b0      	adds	r3, #176	@ 0xb0
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	4413      	add	r3, r2
 800f8da:	685b      	ldr	r3, [r3, #4]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d019      	beq.n	800f914 <USBD_CDC_EP0_RxReady+0x6a>
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f8e6:	2bff      	cmp	r3, #255	@ 0xff
 800f8e8:	d014      	beq.n	800f914 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f8f0:	687a      	ldr	r2, [r7, #4]
 800f8f2:	33b0      	adds	r3, #176	@ 0xb0
 800f8f4:	009b      	lsls	r3, r3, #2
 800f8f6:	4413      	add	r3, r2
 800f8f8:	685b      	ldr	r3, [r3, #4]
 800f8fa:	689b      	ldr	r3, [r3, #8]
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f902:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f904:	68fa      	ldr	r2, [r7, #12]
 800f906:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f90a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	22ff      	movs	r2, #255	@ 0xff
 800f910:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f914:	2300      	movs	r3, #0
}
 800f916:	4618      	mov	r0, r3
 800f918:	3710      	adds	r7, #16
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}
	...

0800f920 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b086      	sub	sp, #24
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f928:	2182      	movs	r1, #130	@ 0x82
 800f92a:	4818      	ldr	r0, [pc, #96]	@ (800f98c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f92c:	f001 f901 	bl	8010b32 <USBD_GetEpDesc>
 800f930:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f932:	2101      	movs	r1, #1
 800f934:	4815      	ldr	r0, [pc, #84]	@ (800f98c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f936:	f001 f8fc 	bl	8010b32 <USBD_GetEpDesc>
 800f93a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f93c:	2181      	movs	r1, #129	@ 0x81
 800f93e:	4813      	ldr	r0, [pc, #76]	@ (800f98c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f940:	f001 f8f7 	bl	8010b32 <USBD_GetEpDesc>
 800f944:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d002      	beq.n	800f952 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	2210      	movs	r2, #16
 800f950:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d006      	beq.n	800f966 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f958:	693b      	ldr	r3, [r7, #16]
 800f95a:	2200      	movs	r2, #0
 800f95c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f960:	711a      	strb	r2, [r3, #4]
 800f962:	2200      	movs	r2, #0
 800f964:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d006      	beq.n	800f97a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	2200      	movs	r2, #0
 800f970:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f974:	711a      	strb	r2, [r3, #4]
 800f976:	2200      	movs	r2, #0
 800f978:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2243      	movs	r2, #67	@ 0x43
 800f97e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f980:	4b02      	ldr	r3, [pc, #8]	@ (800f98c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800f982:	4618      	mov	r0, r3
 800f984:	3718      	adds	r7, #24
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	20000070 	.word	0x20000070

0800f990 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b086      	sub	sp, #24
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f998:	2182      	movs	r1, #130	@ 0x82
 800f99a:	4818      	ldr	r0, [pc, #96]	@ (800f9fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f99c:	f001 f8c9 	bl	8010b32 <USBD_GetEpDesc>
 800f9a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f9a2:	2101      	movs	r1, #1
 800f9a4:	4815      	ldr	r0, [pc, #84]	@ (800f9fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f9a6:	f001 f8c4 	bl	8010b32 <USBD_GetEpDesc>
 800f9aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f9ac:	2181      	movs	r1, #129	@ 0x81
 800f9ae:	4813      	ldr	r0, [pc, #76]	@ (800f9fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800f9b0:	f001 f8bf 	bl	8010b32 <USBD_GetEpDesc>
 800f9b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d002      	beq.n	800f9c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800f9bc:	697b      	ldr	r3, [r7, #20]
 800f9be:	2210      	movs	r2, #16
 800f9c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f9c2:	693b      	ldr	r3, [r7, #16]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d006      	beq.n	800f9d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f9c8:	693b      	ldr	r3, [r7, #16]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	711a      	strb	r2, [r3, #4]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	f042 0202 	orr.w	r2, r2, #2
 800f9d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d006      	beq.n	800f9ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	711a      	strb	r2, [r3, #4]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	f042 0202 	orr.w	r2, r2, #2
 800f9e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	2243      	movs	r2, #67	@ 0x43
 800f9ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800f9f0:	4b02      	ldr	r3, [pc, #8]	@ (800f9fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3718      	adds	r7, #24
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}
 800f9fa:	bf00      	nop
 800f9fc:	20000070 	.word	0x20000070

0800fa00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b086      	sub	sp, #24
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fa08:	2182      	movs	r1, #130	@ 0x82
 800fa0a:	4818      	ldr	r0, [pc, #96]	@ (800fa6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fa0c:	f001 f891 	bl	8010b32 <USBD_GetEpDesc>
 800fa10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fa12:	2101      	movs	r1, #1
 800fa14:	4815      	ldr	r0, [pc, #84]	@ (800fa6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fa16:	f001 f88c 	bl	8010b32 <USBD_GetEpDesc>
 800fa1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fa1c:	2181      	movs	r1, #129	@ 0x81
 800fa1e:	4813      	ldr	r0, [pc, #76]	@ (800fa6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fa20:	f001 f887 	bl	8010b32 <USBD_GetEpDesc>
 800fa24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fa26:	697b      	ldr	r3, [r7, #20]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d002      	beq.n	800fa32 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fa2c:	697b      	ldr	r3, [r7, #20]
 800fa2e:	2210      	movs	r2, #16
 800fa30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d006      	beq.n	800fa46 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fa38:	693b      	ldr	r3, [r7, #16]
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fa40:	711a      	strb	r2, [r3, #4]
 800fa42:	2200      	movs	r2, #0
 800fa44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d006      	beq.n	800fa5a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2200      	movs	r2, #0
 800fa50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fa54:	711a      	strb	r2, [r3, #4]
 800fa56:	2200      	movs	r2, #0
 800fa58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2243      	movs	r2, #67	@ 0x43
 800fa5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fa60:	4b02      	ldr	r3, [pc, #8]	@ (800fa6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3718      	adds	r7, #24
 800fa66:	46bd      	mov	sp, r7
 800fa68:	bd80      	pop	{r7, pc}
 800fa6a:	bf00      	nop
 800fa6c:	20000070 	.word	0x20000070

0800fa70 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b083      	sub	sp, #12
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	220a      	movs	r2, #10
 800fa7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fa7e:	4b03      	ldr	r3, [pc, #12]	@ (800fa8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr
 800fa8c:	2000002c 	.word	0x2000002c

0800fa90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d101      	bne.n	800faa4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800faa0:	2303      	movs	r3, #3
 800faa2:	e009      	b.n	800fab8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800faaa:	687a      	ldr	r2, [r7, #4]
 800faac:	33b0      	adds	r3, #176	@ 0xb0
 800faae:	009b      	lsls	r3, r3, #2
 800fab0:	4413      	add	r3, r2
 800fab2:	683a      	ldr	r2, [r7, #0]
 800fab4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800fab6:	2300      	movs	r3, #0
}
 800fab8:	4618      	mov	r0, r3
 800faba:	370c      	adds	r7, #12
 800fabc:	46bd      	mov	sp, r7
 800fabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac2:	4770      	bx	lr

0800fac4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fac4:	b480      	push	{r7}
 800fac6:	b087      	sub	sp, #28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	60f8      	str	r0, [r7, #12]
 800facc:	60b9      	str	r1, [r7, #8]
 800face:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	32b0      	adds	r2, #176	@ 0xb0
 800fada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fade:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d101      	bne.n	800faea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fae6:	2303      	movs	r3, #3
 800fae8:	e008      	b.n	800fafc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	68ba      	ldr	r2, [r7, #8]
 800faee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	687a      	ldr	r2, [r7, #4]
 800faf6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800fafa:	2300      	movs	r3, #0
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	371c      	adds	r7, #28
 800fb00:	46bd      	mov	sp, r7
 800fb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb06:	4770      	bx	lr

0800fb08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fb08:	b480      	push	{r7}
 800fb0a:	b085      	sub	sp, #20
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	32b0      	adds	r2, #176	@ 0xb0
 800fb1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d101      	bne.n	800fb2c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fb28:	2303      	movs	r3, #3
 800fb2a:	e004      	b.n	800fb36 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	683a      	ldr	r2, [r7, #0]
 800fb30:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800fb34:	2300      	movs	r3, #0
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	3714      	adds	r7, #20
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
	...

0800fb44 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b084      	sub	sp, #16
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	32b0      	adds	r2, #176	@ 0xb0
 800fb56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb5a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d101      	bne.n	800fb6a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fb66:	2303      	movs	r3, #3
 800fb68:	e025      	b.n	800fbb6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d11f      	bne.n	800fbb4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	2201      	movs	r2, #1
 800fb78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800fb7c:	4b10      	ldr	r3, [pc, #64]	@ (800fbc0 <USBD_CDC_TransmitPacket+0x7c>)
 800fb7e:	781b      	ldrb	r3, [r3, #0]
 800fb80:	f003 020f 	and.w	r2, r3, #15
 800fb84:	68bb      	ldr	r3, [r7, #8]
 800fb86:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800fb8a:	6878      	ldr	r0, [r7, #4]
 800fb8c:	4613      	mov	r3, r2
 800fb8e:	009b      	lsls	r3, r3, #2
 800fb90:	4413      	add	r3, r2
 800fb92:	009b      	lsls	r3, r3, #2
 800fb94:	4403      	add	r3, r0
 800fb96:	3318      	adds	r3, #24
 800fb98:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800fb9a:	4b09      	ldr	r3, [pc, #36]	@ (800fbc0 <USBD_CDC_TransmitPacket+0x7c>)
 800fb9c:	7819      	ldrb	r1, [r3, #0]
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fbaa:	6878      	ldr	r0, [r7, #4]
 800fbac:	f000 fc2b 	bl	8010406 <USBD_LL_Transmit>

    ret = USBD_OK;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fbb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	3710      	adds	r7, #16
 800fbba:	46bd      	mov	sp, r7
 800fbbc:	bd80      	pop	{r7, pc}
 800fbbe:	bf00      	nop
 800fbc0:	200000b3 	.word	0x200000b3

0800fbc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	b084      	sub	sp, #16
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	32b0      	adds	r2, #176	@ 0xb0
 800fbd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbda:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	32b0      	adds	r2, #176	@ 0xb0
 800fbe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d101      	bne.n	800fbf2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800fbee:	2303      	movs	r3, #3
 800fbf0:	e018      	b.n	800fc24 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	7c1b      	ldrb	r3, [r3, #16]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d10a      	bne.n	800fc10 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fbfa:	4b0c      	ldr	r3, [pc, #48]	@ (800fc2c <USBD_CDC_ReceivePacket+0x68>)
 800fbfc:	7819      	ldrb	r1, [r3, #0]
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fc04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f000 fc17 	bl	801043c <USBD_LL_PrepareReceive>
 800fc0e:	e008      	b.n	800fc22 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fc10:	4b06      	ldr	r3, [pc, #24]	@ (800fc2c <USBD_CDC_ReceivePacket+0x68>)
 800fc12:	7819      	ldrb	r1, [r3, #0]
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fc1a:	2340      	movs	r3, #64	@ 0x40
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f000 fc0d 	bl	801043c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fc22:	2300      	movs	r3, #0
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3710      	adds	r7, #16
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	200000b4 	.word	0x200000b4

0800fc30 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fc34:	2200      	movs	r2, #0
 800fc36:	4905      	ldr	r1, [pc, #20]	@ (800fc4c <TEMPLATE_Init+0x1c>)
 800fc38:	4805      	ldr	r0, [pc, #20]	@ (800fc50 <TEMPLATE_Init+0x20>)
 800fc3a:	f7ff ff43 	bl	800fac4 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fc3e:	4905      	ldr	r1, [pc, #20]	@ (800fc54 <TEMPLATE_Init+0x24>)
 800fc40:	4803      	ldr	r0, [pc, #12]	@ (800fc50 <TEMPLATE_Init+0x20>)
 800fc42:	f7ff ff61 	bl	800fb08 <USBD_CDC_SetRxBuffer>
      return (0);
 800fc46:	2300      	movs	r3, #0
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	20000d7c 	.word	0x20000d7c
 800fc50:	200007f4 	.word	0x200007f4
 800fc54:	20000b7c 	.word	0x20000b7c

0800fc58 <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800fc5c:	2300      	movs	r3, #0
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	46bd      	mov	sp, r7
 800fc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc66:	4770      	bx	lr

0800fc68 <USB_Transmit>:

uint8_t USB_Transmit(uint8_t *data, uint32_t len)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b0a4      	sub	sp, #144	@ 0x90
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
    uint32_t offset = 0;
 800fc72:	2300      	movs	r3, #0
 800fc74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const uint32_t bytesPerLine = 16;
 800fc78:	2310      	movs	r3, #16
 800fc7a:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (offset < len)
 800fc7c:	e0a4      	b.n	800fdc8 <USB_Transmit+0x160>
    {
        uint16_t chunk_len = ((len - offset) >= CDC_BLOCK_SIZE) ? CDC_BLOCK_SIZE : (len - offset);
 800fc7e:	683a      	ldr	r2, [r7, #0]
 800fc80:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc84:	1ad3      	subs	r3, r2, r3
 800fc86:	2b40      	cmp	r3, #64	@ 0x40
 800fc88:	bf28      	it	cs
 800fc8a:	2340      	movcs	r3, #64	@ 0x40
 800fc8c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        tx_complete = 0;
 800fc90:	4b53      	ldr	r3, [pc, #332]	@ (800fde0 <USB_Transmit+0x178>)
 800fc92:	2200      	movs	r2, #0
 800fc94:	701a      	strb	r2, [r3, #0]
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &data[offset], chunk_len);
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc9c:	4413      	add	r3, r2
 800fc9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800fca2:	4619      	mov	r1, r3
 800fca4:	484f      	ldr	r0, [pc, #316]	@ (800fde4 <USB_Transmit+0x17c>)
 800fca6:	f7ff ff0d 	bl	800fac4 <USBD_CDC_SetTxBuffer>

        // Log in 32-byte lines
        uint32_t printed = 0;
 800fcaa:	2300      	movs	r3, #0
 800fcac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 800fcb0:	e056      	b.n	800fd60 <USB_Transmit+0xf8>
        {
            uint32_t lineLen = ((chunk_len - printed) > bytesPerLine) ? bytesPerLine : (chunk_len - printed);
 800fcb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800fcb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fcba:	1ad3      	subs	r3, r2, r3
 800fcbc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	bf28      	it	cs
 800fcc2:	4613      	movcs	r3, r2
 800fcc4:	673b      	str	r3, [r7, #112]	@ 0x70
            char log_line[BYTES_PER_LINE * 3 + 1] = {0};
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	60bb      	str	r3, [r7, #8]
 800fcca:	f107 030c 	add.w	r3, r7, #12
 800fcce:	225d      	movs	r2, #93	@ 0x5d
 800fcd0:	2100      	movs	r1, #0
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f002 f906 	bl	8011ee4 <memset>
            char *ptr = log_line;
 800fcd8:	f107 0308 	add.w	r3, r7, #8
 800fcdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

            for (uint32_t i = 0; i < lineLen; i++)
 800fce0:	2300      	movs	r3, #0
 800fce2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fce6:	e01c      	b.n	800fd22 <USB_Transmit+0xba>
            {
                ptr += snprintf(ptr, 4, "%02X ", data[offset + printed + i]);
 800fce8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fcec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fcf0:	441a      	add	r2, r3
 800fcf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fcf6:	4413      	add	r3, r2
 800fcf8:	687a      	ldr	r2, [r7, #4]
 800fcfa:	4413      	add	r3, r2
 800fcfc:	781b      	ldrb	r3, [r3, #0]
 800fcfe:	4a3a      	ldr	r2, [pc, #232]	@ (800fde8 <USB_Transmit+0x180>)
 800fd00:	2104      	movs	r1, #4
 800fd02:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800fd06:	f002 f81d 	bl	8011d44 <sniprintf>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	461a      	mov	r2, r3
 800fd0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fd12:	4413      	add	r3, r2
 800fd14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            for (uint32_t i = 0; i < lineLen; i++)
 800fd18:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800fd22:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fd26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d3dd      	bcc.n	800fce8 <USB_Transmit+0x80>
            }

            if (printed == 0)
 800fd2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d108      	bne.n	800fd46 <USB_Transmit+0xde>
            {
                log_info("USB Tx [%d bytes]: %s", chunk_len, log_line);
 800fd34:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800fd38:	f107 0208 	add.w	r2, r7, #8
 800fd3c:	4619      	mov	r1, r3
 800fd3e:	482b      	ldr	r0, [pc, #172]	@ (800fdec <USB_Transmit+0x184>)
 800fd40:	f7f1 fbe4 	bl	800150c <log_info>
 800fd44:	e006      	b.n	800fd54 <USB_Transmit+0xec>
            }
            else
            {
                log_info("%19s%s", "", log_line);
 800fd46:	f107 0308 	add.w	r3, r7, #8
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	4928      	ldr	r1, [pc, #160]	@ (800fdf0 <USB_Transmit+0x188>)
 800fd4e:	4829      	ldr	r0, [pc, #164]	@ (800fdf4 <USB_Transmit+0x18c>)
 800fd50:	f7f1 fbdc 	bl	800150c <log_info>
            }

            printed += lineLen;
 800fd54:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800fd58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fd5a:	4413      	add	r3, r2
 800fd5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 800fd60:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800fd64:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d3a2      	bcc.n	800fcb2 <USB_Transmit+0x4a>
        }

        if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK)
 800fd6c:	481d      	ldr	r0, [pc, #116]	@ (800fde4 <USB_Transmit+0x17c>)
 800fd6e:	f7ff fee9 	bl	800fb44 <USBD_CDC_TransmitPacket>
 800fd72:	4603      	mov	r3, r0
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d001      	beq.n	800fd7c <USB_Transmit+0x114>
        {
            return USBD_FAIL;
 800fd78:	2303      	movs	r3, #3
 800fd7a:	e02c      	b.n	800fdd6 <USB_Transmit+0x16e>
        }

        uint32_t timeout = 10000;
 800fd7c:	f242 7310 	movw	r3, #10000	@ 0x2710
 800fd80:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (tx_complete == 0 && timeout--);
 800fd82:	bf00      	nop
 800fd84:	4b16      	ldr	r3, [pc, #88]	@ (800fde0 <USB_Transmit+0x178>)
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	b2db      	uxtb	r3, r3
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d104      	bne.n	800fd98 <USB_Transmit+0x130>
 800fd8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fd90:	1e5a      	subs	r2, r3, #1
 800fd92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d1f5      	bne.n	800fd84 <USB_Transmit+0x11c>
        if (timeout == 0)
 800fd98:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d104      	bne.n	800fda8 <USB_Transmit+0x140>
        {
            log_error("USB TX Timeout");
 800fd9e:	4816      	ldr	r0, [pc, #88]	@ (800fdf8 <USB_Transmit+0x190>)
 800fda0:	f7f1 fbe8 	bl	8001574 <log_error>
            return USBD_FAIL;
 800fda4:	2303      	movs	r3, #3
 800fda6:	e016      	b.n	800fdd6 <USB_Transmit+0x16e>
        }

        offset += chunk_len;
 800fda8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800fdac:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fdb0:	4413      	add	r3, r2
 800fdb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (volatile int i = 0; i < 200; i++);
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fdba:	e002      	b.n	800fdc2 <USB_Transmit+0x15a>
 800fdbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fdbe:	3301      	adds	r3, #1
 800fdc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800fdc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fdc4:	2bc7      	cmp	r3, #199	@ 0xc7
 800fdc6:	ddf9      	ble.n	800fdbc <USB_Transmit+0x154>
    while (offset < len)
 800fdc8:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	f4ff af55 	bcc.w	800fc7e <USB_Transmit+0x16>
    }

    return USBD_OK;
 800fdd4:	2300      	movs	r3, #0
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3790      	adds	r7, #144	@ 0x90
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	200000b6 	.word	0x200000b6
 800fde4:	200007f4 	.word	0x200007f4
 800fde8:	08013aa0 	.word	0x08013aa0
 800fdec:	08013aa8 	.word	0x08013aa8
 800fdf0:	08013ac0 	.word	0x08013ac0
 800fdf4:	08013ac4 	.word	0x08013ac4
 800fdf8:	08013acc 	.word	0x08013acc

0800fdfc <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b083      	sub	sp, #12
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	4603      	mov	r3, r0
 800fe04:	6039      	str	r1, [r7, #0]
 800fe06:	71fb      	strb	r3, [r7, #7]
 800fe08:	4613      	mov	r3, r2
 800fe0a:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800fe0c:	79fb      	ldrb	r3, [r7, #7]
 800fe0e:	2b23      	cmp	r3, #35	@ 0x23
 800fe10:	f200 8098 	bhi.w	800ff44 <TEMPLATE_Control+0x148>
 800fe14:	a201      	add	r2, pc, #4	@ (adr r2, 800fe1c <TEMPLATE_Control+0x20>)
 800fe16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe1a:	bf00      	nop
 800fe1c:	0800ff45 	.word	0x0800ff45
 800fe20:	0800ff45 	.word	0x0800ff45
 800fe24:	0800ff45 	.word	0x0800ff45
 800fe28:	0800ff45 	.word	0x0800ff45
 800fe2c:	0800ff45 	.word	0x0800ff45
 800fe30:	0800ff45 	.word	0x0800ff45
 800fe34:	0800ff45 	.word	0x0800ff45
 800fe38:	0800ff45 	.word	0x0800ff45
 800fe3c:	0800ff45 	.word	0x0800ff45
 800fe40:	0800ff45 	.word	0x0800ff45
 800fe44:	0800ff45 	.word	0x0800ff45
 800fe48:	0800ff45 	.word	0x0800ff45
 800fe4c:	0800ff45 	.word	0x0800ff45
 800fe50:	0800ff45 	.word	0x0800ff45
 800fe54:	0800ff45 	.word	0x0800ff45
 800fe58:	0800ff45 	.word	0x0800ff45
 800fe5c:	0800ff45 	.word	0x0800ff45
 800fe60:	0800ff45 	.word	0x0800ff45
 800fe64:	0800ff45 	.word	0x0800ff45
 800fe68:	0800ff45 	.word	0x0800ff45
 800fe6c:	0800ff45 	.word	0x0800ff45
 800fe70:	0800ff45 	.word	0x0800ff45
 800fe74:	0800ff45 	.word	0x0800ff45
 800fe78:	0800ff45 	.word	0x0800ff45
 800fe7c:	0800ff45 	.word	0x0800ff45
 800fe80:	0800ff45 	.word	0x0800ff45
 800fe84:	0800ff45 	.word	0x0800ff45
 800fe88:	0800ff45 	.word	0x0800ff45
 800fe8c:	0800ff45 	.word	0x0800ff45
 800fe90:	0800ff45 	.word	0x0800ff45
 800fe94:	0800ff45 	.word	0x0800ff45
 800fe98:	0800ff45 	.word	0x0800ff45
 800fe9c:	0800fead 	.word	0x0800fead
 800fea0:	0800fef1 	.word	0x0800fef1
 800fea4:	0800ff45 	.word	0x0800ff45
 800fea8:	0800ff45 	.word	0x0800ff45
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	461a      	mov	r2, r3
 800feb2:	683b      	ldr	r3, [r7, #0]
 800feb4:	3301      	adds	r3, #1
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	021b      	lsls	r3, r3, #8
 800feba:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800febc:	683b      	ldr	r3, [r7, #0]
 800febe:	3302      	adds	r3, #2
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800fec4:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	3303      	adds	r3, #3
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	061b      	lsls	r3, r3, #24
 800fece:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800fed0:	461a      	mov	r2, r3
 800fed2:	4b20      	ldr	r3, [pc, #128]	@ (800ff54 <TEMPLATE_Control+0x158>)
 800fed4:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	791a      	ldrb	r2, [r3, #4]
 800feda:	4b1e      	ldr	r3, [pc, #120]	@ (800ff54 <TEMPLATE_Control+0x158>)
 800fedc:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	795a      	ldrb	r2, [r3, #5]
 800fee2:	4b1c      	ldr	r3, [pc, #112]	@ (800ff54 <TEMPLATE_Control+0x158>)
 800fee4:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	799a      	ldrb	r2, [r3, #6]
 800feea:	4b1a      	ldr	r3, [pc, #104]	@ (800ff54 <TEMPLATE_Control+0x158>)
 800feec:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800feee:	e02a      	b.n	800ff46 <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800fef0:	4b18      	ldr	r3, [pc, #96]	@ (800ff54 <TEMPLATE_Control+0x158>)
 800fef2:	681b      	ldr	r3, [r3, #0]
 800fef4:	b2da      	uxtb	r2, r3
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800fefa:	4b16      	ldr	r3, [pc, #88]	@ (800ff54 <TEMPLATE_Control+0x158>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	0a1a      	lsrs	r2, r3, #8
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	3301      	adds	r3, #1
 800ff04:	b2d2      	uxtb	r2, r2
 800ff06:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800ff08:	4b12      	ldr	r3, [pc, #72]	@ (800ff54 <TEMPLATE_Control+0x158>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	0c1a      	lsrs	r2, r3, #16
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	3302      	adds	r3, #2
 800ff12:	b2d2      	uxtb	r2, r2
 800ff14:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800ff16:	4b0f      	ldr	r3, [pc, #60]	@ (800ff54 <TEMPLATE_Control+0x158>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	0e1a      	lsrs	r2, r3, #24
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	3303      	adds	r3, #3
 800ff20:	b2d2      	uxtb	r2, r2
 800ff22:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	3304      	adds	r3, #4
 800ff28:	4a0a      	ldr	r2, [pc, #40]	@ (800ff54 <TEMPLATE_Control+0x158>)
 800ff2a:	7912      	ldrb	r2, [r2, #4]
 800ff2c:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	3305      	adds	r3, #5
 800ff32:	4a08      	ldr	r2, [pc, #32]	@ (800ff54 <TEMPLATE_Control+0x158>)
 800ff34:	7952      	ldrb	r2, [r2, #5]
 800ff36:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	3306      	adds	r3, #6
 800ff3c:	4a05      	ldr	r2, [pc, #20]	@ (800ff54 <TEMPLATE_Control+0x158>)
 800ff3e:	7992      	ldrb	r2, [r2, #6]
 800ff40:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800ff42:	e000      	b.n	800ff46 <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800ff44:	bf00      	nop
  }

  return (0);
 800ff46:	2300      	movs	r3, #0
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	370c      	adds	r7, #12
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr
 800ff54:	200000cc 	.word	0x200000cc

0800ff58 <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800ff58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff5c:	b08b      	sub	sp, #44	@ 0x2c
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
 800ff62:	6039      	str	r1, [r7, #0]
 800ff64:	466b      	mov	r3, sp
 800ff66:	461e      	mov	r6, r3
    const uint32_t bytesPerLine = 16;
 800ff68:	2310      	movs	r3, #16
 800ff6a:	61bb      	str	r3, [r7, #24]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 800ff6c:	69ba      	ldr	r2, [r7, #24]
 800ff6e:	4613      	mov	r3, r2
 800ff70:	005b      	lsls	r3, r3, #1
 800ff72:	4413      	add	r3, r2
 800ff74:	617b      	str	r3, [r7, #20]
 800ff76:	69ba      	ldr	r2, [r7, #24]
 800ff78:	4613      	mov	r3, r2
 800ff7a:	005b      	lsls	r3, r3, #1
 800ff7c:	4413      	add	r3, r2
 800ff7e:	3301      	adds	r3, #1
 800ff80:	2200      	movs	r2, #0
 800ff82:	4698      	mov	r8, r3
 800ff84:	4691      	mov	r9, r2
 800ff86:	f04f 0200 	mov.w	r2, #0
 800ff8a:	f04f 0300 	mov.w	r3, #0
 800ff8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ff92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ff96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ff9a:	69ba      	ldr	r2, [r7, #24]
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	005b      	lsls	r3, r3, #1
 800ffa0:	4413      	add	r3, r2
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	461c      	mov	r4, r3
 800ffa8:	4615      	mov	r5, r2
 800ffaa:	f04f 0200 	mov.w	r2, #0
 800ffae:	f04f 0300 	mov.w	r3, #0
 800ffb2:	00eb      	lsls	r3, r5, #3
 800ffb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ffb8:	00e2      	lsls	r2, r4, #3
 800ffba:	69ba      	ldr	r2, [r7, #24]
 800ffbc:	4613      	mov	r3, r2
 800ffbe:	005b      	lsls	r3, r3, #1
 800ffc0:	4413      	add	r3, r2
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	3307      	adds	r3, #7
 800ffc6:	08db      	lsrs	r3, r3, #3
 800ffc8:	00db      	lsls	r3, r3, #3
 800ffca:	ebad 0d03 	sub.w	sp, sp, r3
 800ffce:	466b      	mov	r3, sp
 800ffd0:	3300      	adds	r3, #0
 800ffd2:	613b      	str	r3, [r7, #16]
    uint32_t totalLen = *Len;
 800ffd4:	683b      	ldr	r3, [r7, #0]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	60fb      	str	r3, [r7, #12]
    uint32_t printed = 0;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (*Len > CDC_DATA_FS_MAX_PACKET_SIZE) {
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2b40      	cmp	r3, #64	@ 0x40
 800ffe4:	d944      	bls.n	8010070 <TEMPLATE_Receive+0x118>
        *Len = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ffe6:	683b      	ldr	r3, [r7, #0]
 800ffe8:	2240      	movs	r2, #64	@ 0x40
 800ffea:	601a      	str	r2, [r3, #0]
    }

    while (printed < *Len)
 800ffec:	e040      	b.n	8010070 <TEMPLATE_Receive+0x118>
    {
        uint32_t lineLen = ((*Len - printed) > bytesPerLine) ? bytesPerLine : (*Len - printed);
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	681a      	ldr	r2, [r3, #0]
 800fff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff4:	1ad3      	subs	r3, r2, r3
 800fff6:	69ba      	ldr	r2, [r7, #24]
 800fff8:	4293      	cmp	r3, r2
 800fffa:	bf28      	it	cs
 800fffc:	4613      	movcs	r3, r2
 800fffe:	60bb      	str	r3, [r7, #8]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 8010000:	69ba      	ldr	r2, [r7, #24]
 8010002:	4613      	mov	r3, r2
 8010004:	005b      	lsls	r3, r3, #1
 8010006:	4413      	add	r3, r2
        memset(hexLine, 0, sizeof(hexLine));
 8010008:	3301      	adds	r3, #1
 801000a:	461a      	mov	r2, r3
 801000c:	2100      	movs	r1, #0
 801000e:	6938      	ldr	r0, [r7, #16]
 8010010:	f001 ff68 	bl	8011ee4 <memset>
        char *ptr = hexLine;
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	623b      	str	r3, [r7, #32]

        for (uint32_t i = 0; i < lineLen; ++i)
 8010018:	2300      	movs	r3, #0
 801001a:	61fb      	str	r3, [r7, #28]
 801001c:	e012      	b.n	8010044 <TEMPLATE_Receive+0xec>
        {
            ptr += snprintf(ptr, 4, "%02X ", Buf[printed + i]);
 801001e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010020:	69fb      	ldr	r3, [r7, #28]
 8010022:	4413      	add	r3, r2
 8010024:	687a      	ldr	r2, [r7, #4]
 8010026:	4413      	add	r3, r2
 8010028:	781b      	ldrb	r3, [r3, #0]
 801002a:	4a2d      	ldr	r2, [pc, #180]	@ (80100e0 <TEMPLATE_Receive+0x188>)
 801002c:	2104      	movs	r1, #4
 801002e:	6a38      	ldr	r0, [r7, #32]
 8010030:	f001 fe88 	bl	8011d44 <sniprintf>
 8010034:	4603      	mov	r3, r0
 8010036:	461a      	mov	r2, r3
 8010038:	6a3b      	ldr	r3, [r7, #32]
 801003a:	4413      	add	r3, r2
 801003c:	623b      	str	r3, [r7, #32]
        for (uint32_t i = 0; i < lineLen; ++i)
 801003e:	69fb      	ldr	r3, [r7, #28]
 8010040:	3301      	adds	r3, #1
 8010042:	61fb      	str	r3, [r7, #28]
 8010044:	69fa      	ldr	r2, [r7, #28]
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	429a      	cmp	r2, r3
 801004a:	d3e8      	bcc.n	801001e <TEMPLATE_Receive+0xc6>
        }

        if (printed == 0)
 801004c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801004e:	2b00      	cmp	r3, #0
 8010050:	d105      	bne.n	801005e <TEMPLATE_Receive+0x106>
        {
            // First line includes logger message
            log_info("USB Rx [%lu bytes]: %s", totalLen, hexLine);
 8010052:	693a      	ldr	r2, [r7, #16]
 8010054:	68f9      	ldr	r1, [r7, #12]
 8010056:	4823      	ldr	r0, [pc, #140]	@ (80100e4 <TEMPLATE_Receive+0x18c>)
 8010058:	f7f1 fa58 	bl	800150c <log_info>
 801005c:	e004      	b.n	8010068 <TEMPLATE_Receive+0x110>
        }
        else
        {
            // Subsequent lines have 26-space indent
            log_info("%19s%s", "", hexLine);
 801005e:	693a      	ldr	r2, [r7, #16]
 8010060:	4921      	ldr	r1, [pc, #132]	@ (80100e8 <TEMPLATE_Receive+0x190>)
 8010062:	4822      	ldr	r0, [pc, #136]	@ (80100ec <TEMPLATE_Receive+0x194>)
 8010064:	f7f1 fa52 	bl	800150c <log_info>
        }

        printed += lineLen;
 8010068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	4413      	add	r3, r2
 801006e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (printed < *Len)
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010076:	429a      	cmp	r2, r3
 8010078:	d3b9      	bcc.n	800ffee <TEMPLATE_Receive+0x96>
    }

    // Copy to usb_rx_buffer if space permits
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	681a      	ldr	r2, [r3, #0]
 801007e:	4b1c      	ldr	r3, [pc, #112]	@ (80100f0 <TEMPLATE_Receive+0x198>)
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4413      	add	r3, r2
 8010084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010088:	d215      	bcs.n	80100b6 <TEMPLATE_Receive+0x15e>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 801008a:	4b19      	ldr	r3, [pc, #100]	@ (80100f0 <TEMPLATE_Receive+0x198>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	4a19      	ldr	r2, [pc, #100]	@ (80100f4 <TEMPLATE_Receive+0x19c>)
 8010090:	1898      	adds	r0, r3, r2
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	461a      	mov	r2, r3
 8010098:	6879      	ldr	r1, [r7, #4]
 801009a:	f001 ff9e 	bl	8011fda <memcpy>
        usb_rx_index += *Len;
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	681a      	ldr	r2, [r3, #0]
 80100a2:	4b13      	ldr	r3, [pc, #76]	@ (80100f0 <TEMPLATE_Receive+0x198>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	4413      	add	r3, r2
 80100a8:	4a11      	ldr	r2, [pc, #68]	@ (80100f0 <TEMPLATE_Receive+0x198>)
 80100aa:	6013      	str	r3, [r2, #0]
        log_error("USB buffer overflow");
        return USBD_FAIL;
    }

    // If this was the last packet
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	2b3f      	cmp	r3, #63	@ 0x3f
 80100b2:	d80b      	bhi.n	80100cc <TEMPLATE_Receive+0x174>
 80100b4:	e007      	b.n	80100c6 <TEMPLATE_Receive+0x16e>
        usb_rx_index = 0;
 80100b6:	4b0e      	ldr	r3, [pc, #56]	@ (80100f0 <TEMPLATE_Receive+0x198>)
 80100b8:	2200      	movs	r2, #0
 80100ba:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 80100bc:	480e      	ldr	r0, [pc, #56]	@ (80100f8 <TEMPLATE_Receive+0x1a0>)
 80100be:	f7f1 fa59 	bl	8001574 <log_error>
        return USBD_FAIL;
 80100c2:	2303      	movs	r3, #3
 80100c4:	e006      	b.n	80100d4 <TEMPLATE_Receive+0x17c>
    {
        usb_rx_complete = true;
 80100c6:	4b0d      	ldr	r3, [pc, #52]	@ (80100fc <TEMPLATE_Receive+0x1a4>)
 80100c8:	2201      	movs	r2, #1
 80100ca:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80100cc:	480c      	ldr	r0, [pc, #48]	@ (8010100 <TEMPLATE_Receive+0x1a8>)
 80100ce:	f7ff fd79 	bl	800fbc4 <USBD_CDC_ReceivePacket>
    return USBD_OK;
 80100d2:	2300      	movs	r3, #0
 80100d4:	46b5      	mov	sp, r6
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	372c      	adds	r7, #44	@ 0x2c
 80100da:	46bd      	mov	sp, r7
 80100dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100e0:	08013aa0 	.word	0x08013aa0
 80100e4:	08013adc 	.word	0x08013adc
 80100e8:	08013ac0 	.word	0x08013ac0
 80100ec:	08013ac4 	.word	0x08013ac4
 80100f0:	20010f7c 	.word	0x20010f7c
 80100f4:	20000f7c 	.word	0x20000f7c
 80100f8:	08013af4 	.word	0x08013af4
 80100fc:	20010f80 	.word	0x20010f80
 8010100:	200007f4 	.word	0x200007f4

08010104 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010104:	b480      	push	{r7}
 8010106:	b085      	sub	sp, #20
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	60b9      	str	r1, [r7, #8]
 801010e:	4613      	mov	r3, r2
 8010110:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 8010112:	2300      	movs	r3, #0

}
 8010114:	4618      	mov	r0, r3
 8010116:	3714      	adds	r7, #20
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 8010134:	4619      	mov	r1, r3
 8010136:	4610      	mov	r0, r2
 8010138:	f000 faa5 	bl	8010686 <USBD_LL_SetupStage>
}
 801013c:	bf00      	nop
 801013e:	3708      	adds	r7, #8
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b082      	sub	sp, #8
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	460b      	mov	r3, r1
 801014e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 8010156:	78fa      	ldrb	r2, [r7, #3]
 8010158:	6879      	ldr	r1, [r7, #4]
 801015a:	4613      	mov	r3, r2
 801015c:	009b      	lsls	r3, r3, #2
 801015e:	4413      	add	r3, r2
 8010160:	00db      	lsls	r3, r3, #3
 8010162:	440b      	add	r3, r1
 8010164:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8010168:	681a      	ldr	r2, [r3, #0]
 801016a:	78fb      	ldrb	r3, [r7, #3]
 801016c:	4619      	mov	r1, r3
 801016e:	f000 fadf 	bl	8010730 <USBD_LL_DataOutStage>
}
 8010172:	bf00      	nop
 8010174:	3708      	adds	r7, #8
 8010176:	46bd      	mov	sp, r7
 8010178:	bd80      	pop	{r7, pc}

0801017a <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 801017a:	b580      	push	{r7, lr}
 801017c:	b082      	sub	sp, #8
 801017e:	af00      	add	r7, sp, #0
 8010180:	6078      	str	r0, [r7, #4]
 8010182:	460b      	mov	r3, r1
 8010184:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 801018c:	78fa      	ldrb	r2, [r7, #3]
 801018e:	6879      	ldr	r1, [r7, #4]
 8010190:	4613      	mov	r3, r2
 8010192:	009b      	lsls	r3, r3, #2
 8010194:	4413      	add	r3, r2
 8010196:	00db      	lsls	r3, r3, #3
 8010198:	440b      	add	r3, r1
 801019a:	3328      	adds	r3, #40	@ 0x28
 801019c:	681a      	ldr	r2, [r3, #0]
 801019e:	78fb      	ldrb	r3, [r7, #3]
 80101a0:	4619      	mov	r1, r3
 80101a2:	f000 fb78 	bl	8010896 <USBD_LL_DataInStage>
}
 80101a6:	bf00      	nop
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b082      	sub	sp, #8
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80101bc:	4618      	mov	r0, r3
 80101be:	f000 fc7e 	bl	8010abe <USBD_LL_SOF>
}
 80101c2:	bf00      	nop
 80101c4:	3708      	adds	r7, #8
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}

080101ca <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 80101ca:	b580      	push	{r7, lr}
 80101cc:	b084      	sub	sp, #16
 80101ce:	af00      	add	r7, sp, #0
 80101d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80101d2:	2301      	movs	r3, #1
 80101d4:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	79db      	ldrb	r3, [r3, #7]
 80101da:	2b02      	cmp	r3, #2
 80101dc:	d001      	beq.n	80101e2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80101de:	f7f1 fe33 	bl	8001e48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80101e8:	7bfa      	ldrb	r2, [r7, #15]
 80101ea:	4611      	mov	r1, r2
 80101ec:	4618      	mov	r0, r3
 80101ee:	f000 fc56 	bl	8010a9e <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 80101f8:	4618      	mov	r0, r3
 80101fa:	f000 fbfe 	bl	80109fa <USBD_LL_Reset>
}
 80101fe:	bf00      	nop
 8010200:	3710      	adds	r7, #16
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
	...

08010208 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	4a19      	ldr	r2, [pc, #100]	@ (8010278 <USBD_LL_Init+0x70>)
 8010214:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801021e:	2340      	movs	r3, #64	@ 0x40
 8010220:	2200      	movs	r2, #0
 8010222:	2100      	movs	r1, #0
 8010224:	f7f5 fc48 	bl	8005ab8 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801022e:	2380      	movs	r3, #128	@ 0x80
 8010230:	2200      	movs	r2, #0
 8010232:	2180      	movs	r1, #128	@ 0x80
 8010234:	f7f5 fc40 	bl	8005ab8 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801023e:	23c0      	movs	r3, #192	@ 0xc0
 8010240:	2200      	movs	r2, #0
 8010242:	2181      	movs	r1, #129	@ 0x81
 8010244:	f7f5 fc38 	bl	8005ab8 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801024e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010252:	2200      	movs	r2, #0
 8010254:	2101      	movs	r1, #1
 8010256:	f7f5 fc2f 	bl	8005ab8 <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010260:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8010264:	2200      	movs	r2, #0
 8010266:	2182      	movs	r1, #130	@ 0x82
 8010268:	f7f5 fc26 	bl	8005ab8 <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 801026c:	2300      	movs	r3, #0
}
 801026e:	4618      	mov	r0, r3
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	20000510 	.word	0x20000510

0801027c <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b084      	sub	sp, #16
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801028a:	4618      	mov	r0, r3
 801028c:	f7f4 f8f7 	bl	800447e <HAL_PCD_Start>
 8010290:	4603      	mov	r3, r0
 8010292:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 8010294:	7bfb      	ldrb	r3, [r7, #15]
 8010296:	4618      	mov	r0, r3
 8010298:	f000 f916 	bl	80104c8 <USBD_Get_USB_Status>
 801029c:	4603      	mov	r3, r0
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3710      	adds	r7, #16
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}

080102a6 <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 80102a6:	b580      	push	{r7, lr}
 80102a8:	b084      	sub	sp, #16
 80102aa:	af00      	add	r7, sp, #0
 80102ac:	6078      	str	r0, [r7, #4]
 80102ae:	4608      	mov	r0, r1
 80102b0:	4611      	mov	r1, r2
 80102b2:	461a      	mov	r2, r3
 80102b4:	4603      	mov	r3, r0
 80102b6:	70fb      	strb	r3, [r7, #3]
 80102b8:	460b      	mov	r3, r1
 80102ba:	70bb      	strb	r3, [r7, #2]
 80102bc:	4613      	mov	r3, r2
 80102be:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80102c6:	78bb      	ldrb	r3, [r7, #2]
 80102c8:	883a      	ldrh	r2, [r7, #0]
 80102ca:	78f9      	ldrb	r1, [r7, #3]
 80102cc:	f7f4 fa26 	bl	800471c <HAL_PCD_EP_Open>
 80102d0:	4603      	mov	r3, r0
 80102d2:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 80102d4:	7bfb      	ldrb	r3, [r7, #15]
 80102d6:	4618      	mov	r0, r3
 80102d8:	f000 f8f6 	bl	80104c8 <USBD_Get_USB_Status>
 80102dc:	4603      	mov	r3, r0
}
 80102de:	4618      	mov	r0, r3
 80102e0:	3710      	adds	r7, #16
 80102e2:	46bd      	mov	sp, r7
 80102e4:	bd80      	pop	{r7, pc}

080102e6 <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80102e6:	b580      	push	{r7, lr}
 80102e8:	b084      	sub	sp, #16
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
 80102ee:	460b      	mov	r3, r1
 80102f0:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80102f8:	78fa      	ldrb	r2, [r7, #3]
 80102fa:	4611      	mov	r1, r2
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7f4 fa6e 	bl	80047de <HAL_PCD_EP_Close>
 8010302:	4603      	mov	r3, r0
 8010304:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010306:	7bfb      	ldrb	r3, [r7, #15]
 8010308:	4618      	mov	r0, r3
 801030a:	f000 f8dd 	bl	80104c8 <USBD_Get_USB_Status>
 801030e:	4603      	mov	r3, r0
}
 8010310:	4618      	mov	r0, r3
 8010312:	3710      	adds	r7, #16
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}

08010318 <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b084      	sub	sp, #16
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
 8010320:	460b      	mov	r3, r1
 8010322:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801032a:	78fa      	ldrb	r2, [r7, #3]
 801032c:	4611      	mov	r1, r2
 801032e:	4618      	mov	r0, r3
 8010330:	f7f4 fb21 	bl	8004976 <HAL_PCD_EP_SetStall>
 8010334:	4603      	mov	r3, r0
 8010336:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 8010338:	7bfb      	ldrb	r3, [r7, #15]
 801033a:	4618      	mov	r0, r3
 801033c:	f000 f8c4 	bl	80104c8 <USBD_Get_USB_Status>
 8010340:	4603      	mov	r3, r0
}
 8010342:	4618      	mov	r0, r3
 8010344:	3710      	adds	r7, #16
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b084      	sub	sp, #16
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
 8010352:	460b      	mov	r3, r1
 8010354:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801035c:	78fa      	ldrb	r2, [r7, #3]
 801035e:	4611      	mov	r1, r2
 8010360:	4618      	mov	r0, r3
 8010362:	f7f4 fb5c 	bl	8004a1e <HAL_PCD_EP_ClrStall>
 8010366:	4603      	mov	r3, r0
 8010368:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 801036a:	7bfb      	ldrb	r3, [r7, #15]
 801036c:	4618      	mov	r0, r3
 801036e:	f000 f8ab 	bl	80104c8 <USBD_Get_USB_Status>
 8010372:	4603      	mov	r3, r0
}
 8010374:	4618      	mov	r0, r3
 8010376:	3710      	adds	r7, #16
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801037c:	b480      	push	{r7}
 801037e:	b085      	sub	sp, #20
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	460b      	mov	r3, r1
 8010386:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801038e:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 8010390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010394:	2b00      	cmp	r3, #0
 8010396:	da0b      	bge.n	80103b0 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010398:	78fb      	ldrb	r3, [r7, #3]
 801039a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801039e:	68f9      	ldr	r1, [r7, #12]
 80103a0:	4613      	mov	r3, r2
 80103a2:	009b      	lsls	r3, r3, #2
 80103a4:	4413      	add	r3, r2
 80103a6:	00db      	lsls	r3, r3, #3
 80103a8:	440b      	add	r3, r1
 80103aa:	3316      	adds	r3, #22
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	e00b      	b.n	80103c8 <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80103b0:	78fb      	ldrb	r3, [r7, #3]
 80103b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80103b6:	68f9      	ldr	r1, [r7, #12]
 80103b8:	4613      	mov	r3, r2
 80103ba:	009b      	lsls	r3, r3, #2
 80103bc:	4413      	add	r3, r2
 80103be:	00db      	lsls	r3, r3, #3
 80103c0:	440b      	add	r3, r1
 80103c2:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 80103c6:	781b      	ldrb	r3, [r3, #0]
      }
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3714      	adds	r7, #20
 80103cc:	46bd      	mov	sp, r7
 80103ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103d2:	4770      	bx	lr

080103d4 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b084      	sub	sp, #16
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
 80103dc:	460b      	mov	r3, r1
 80103de:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80103e6:	78fa      	ldrb	r2, [r7, #3]
 80103e8:	4611      	mov	r1, r2
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7f4 f972 	bl	80046d4 <HAL_PCD_SetAddress>
 80103f0:	4603      	mov	r3, r0
 80103f2:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 80103f4:	7bfb      	ldrb	r3, [r7, #15]
 80103f6:	4618      	mov	r0, r3
 80103f8:	f000 f866 	bl	80104c8 <USBD_Get_USB_Status>
 80103fc:	4603      	mov	r3, r0
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3710      	adds	r7, #16
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}

08010406 <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 8010406:	b580      	push	{r7, lr}
 8010408:	b086      	sub	sp, #24
 801040a:	af00      	add	r7, sp, #0
 801040c:	60f8      	str	r0, [r7, #12]
 801040e:	607a      	str	r2, [r7, #4]
 8010410:	603b      	str	r3, [r7, #0]
 8010412:	460b      	mov	r3, r1
 8010414:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801041c:	7af9      	ldrb	r1, [r7, #11]
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	f7f4 fa70 	bl	8004906 <HAL_PCD_EP_Transmit>
 8010426:	4603      	mov	r3, r0
 8010428:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 801042a:	7dfb      	ldrb	r3, [r7, #23]
 801042c:	4618      	mov	r0, r3
 801042e:	f000 f84b 	bl	80104c8 <USBD_Get_USB_Status>
 8010432:	4603      	mov	r3, r0
}
 8010434:	4618      	mov	r0, r3
 8010436:	3718      	adds	r7, #24
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}

0801043c <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b086      	sub	sp, #24
 8010440:	af00      	add	r7, sp, #0
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	607a      	str	r2, [r7, #4]
 8010446:	603b      	str	r3, [r7, #0]
 8010448:	460b      	mov	r3, r1
 801044a:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010452:	7af9      	ldrb	r1, [r7, #11]
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	687a      	ldr	r2, [r7, #4]
 8010458:	f7f4 fa0b 	bl	8004872 <HAL_PCD_EP_Receive>
 801045c:	4603      	mov	r3, r0
 801045e:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 8010460:	7dfb      	ldrb	r3, [r7, #23]
 8010462:	4618      	mov	r0, r3
 8010464:	f000 f830 	bl	80104c8 <USBD_Get_USB_Status>
 8010468:	4603      	mov	r3, r0
}
 801046a:	4618      	mov	r0, r3
 801046c:	3718      	adds	r7, #24
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}

08010472 <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010472:	b580      	push	{r7, lr}
 8010474:	b082      	sub	sp, #8
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
 801047a:	460b      	mov	r3, r1
 801047c:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010484:	78fa      	ldrb	r2, [r7, #3]
 8010486:	4611      	mov	r1, r2
 8010488:	4618      	mov	r0, r3
 801048a:	f7f4 fa24 	bl	80048d6 <HAL_PCD_EP_GetRxCount>
 801048e:	4603      	mov	r3, r0
}
 8010490:	4618      	mov	r0, r3
 8010492:	3708      	adds	r7, #8
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 8010498:	b480      	push	{r7}
 801049a:	b083      	sub	sp, #12
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 80104a0:	4b03      	ldr	r3, [pc, #12]	@ (80104b0 <USBD_static_malloc+0x18>)
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	370c      	adds	r7, #12
 80104a6:	46bd      	mov	sp, r7
 80104a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ac:	4770      	bx	lr
 80104ae:	bf00      	nop
 80104b0:	20010f84 	.word	0x20010f84

080104b4 <USBD_static_free>:

void USBD_static_free(void *p)
{
 80104b4:	b480      	push	{r7}
 80104b6:	b083      	sub	sp, #12
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 80104bc:	bf00      	nop
 80104be:	370c      	adds	r7, #12
 80104c0:	46bd      	mov	sp, r7
 80104c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c6:	4770      	bx	lr

080104c8 <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80104c8:	b480      	push	{r7}
 80104ca:	b085      	sub	sp, #20
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	4603      	mov	r3, r0
 80104d0:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 80104d2:	2300      	movs	r3, #0
 80104d4:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 80104d6:	79fb      	ldrb	r3, [r7, #7]
 80104d8:	2b03      	cmp	r3, #3
 80104da:	d817      	bhi.n	801050c <USBD_Get_USB_Status+0x44>
 80104dc:	a201      	add	r2, pc, #4	@ (adr r2, 80104e4 <USBD_Get_USB_Status+0x1c>)
 80104de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104e2:	bf00      	nop
 80104e4:	080104f5 	.word	0x080104f5
 80104e8:	080104fb 	.word	0x080104fb
 80104ec:	08010501 	.word	0x08010501
 80104f0:	08010507 	.word	0x08010507
      {
      case HAL_OK :
             usb_status = USBD_OK;
 80104f4:	2300      	movs	r3, #0
 80104f6:	73fb      	strb	r3, [r7, #15]
             break;
 80104f8:	e00b      	b.n	8010512 <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 80104fa:	2303      	movs	r3, #3
 80104fc:	73fb      	strb	r3, [r7, #15]
             break;
 80104fe:	e008      	b.n	8010512 <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 8010500:	2301      	movs	r3, #1
 8010502:	73fb      	strb	r3, [r7, #15]
             break;
 8010504:	e005      	b.n	8010512 <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 8010506:	2303      	movs	r3, #3
 8010508:	73fb      	strb	r3, [r7, #15]
             break;
 801050a:	e002      	b.n	8010512 <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 801050c:	2303      	movs	r3, #3
 801050e:	73fb      	strb	r3, [r7, #15]
             break;
 8010510:	bf00      	nop
      }
      return usb_status;
 8010512:	7bfb      	ldrb	r3, [r7, #15]
}
 8010514:	4618      	mov	r0, r3
 8010516:	3714      	adds	r7, #20
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr

08010520 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b086      	sub	sp, #24
 8010524:	af00      	add	r7, sp, #0
 8010526:	60f8      	str	r0, [r7, #12]
 8010528:	60b9      	str	r1, [r7, #8]
 801052a:	4613      	mov	r3, r2
 801052c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d101      	bne.n	8010538 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010534:	2303      	movs	r3, #3
 8010536:	e01f      	b.n	8010578 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2200      	movs	r2, #0
 801053c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2200      	movs	r2, #0
 8010544:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2200      	movs	r2, #0
 801054c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d003      	beq.n	801055e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	68ba      	ldr	r2, [r7, #8]
 801055a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2201      	movs	r2, #1
 8010562:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	79fa      	ldrb	r2, [r7, #7]
 801056a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801056c:	68f8      	ldr	r0, [r7, #12]
 801056e:	f7ff fe4b 	bl	8010208 <USBD_LL_Init>
 8010572:	4603      	mov	r3, r0
 8010574:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010576:	7dfb      	ldrb	r3, [r7, #23]
}
 8010578:	4618      	mov	r0, r3
 801057a:	3718      	adds	r7, #24
 801057c:	46bd      	mov	sp, r7
 801057e:	bd80      	pop	{r7, pc}

08010580 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b084      	sub	sp, #16
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801058a:	2300      	movs	r3, #0
 801058c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801058e:	683b      	ldr	r3, [r7, #0]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d101      	bne.n	8010598 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010594:	2303      	movs	r3, #3
 8010596:	e025      	b.n	80105e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	683a      	ldr	r2, [r7, #0]
 801059c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	32ae      	adds	r2, #174	@ 0xae
 80105aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d00f      	beq.n	80105d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	32ae      	adds	r2, #174	@ 0xae
 80105be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105c4:	f107 020e 	add.w	r2, r7, #14
 80105c8:	4610      	mov	r0, r2
 80105ca:	4798      	blx	r3
 80105cc:	4602      	mov	r2, r0
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80105da:	1c5a      	adds	r2, r3, #1
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80105e2:	2300      	movs	r3, #0
}
 80105e4:	4618      	mov	r0, r3
 80105e6:	3710      	adds	r7, #16
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80105f4:	6878      	ldr	r0, [r7, #4]
 80105f6:	f7ff fe41 	bl	801027c <USBD_LL_Start>
 80105fa:	4603      	mov	r3, r0
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3708      	adds	r7, #8
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}

08010604 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010604:	b480      	push	{r7}
 8010606:	b083      	sub	sp, #12
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801060c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801060e:	4618      	mov	r0, r3
 8010610:	370c      	adds	r7, #12
 8010612:	46bd      	mov	sp, r7
 8010614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010618:	4770      	bx	lr

0801061a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801061a:	b580      	push	{r7, lr}
 801061c:	b084      	sub	sp, #16
 801061e:	af00      	add	r7, sp, #0
 8010620:	6078      	str	r0, [r7, #4]
 8010622:	460b      	mov	r3, r1
 8010624:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010626:	2300      	movs	r3, #0
 8010628:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010630:	2b00      	cmp	r3, #0
 8010632:	d009      	beq.n	8010648 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	78fa      	ldrb	r2, [r7, #3]
 801063e:	4611      	mov	r1, r2
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	4798      	blx	r3
 8010644:	4603      	mov	r3, r0
 8010646:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010648:	7bfb      	ldrb	r3, [r7, #15]
}
 801064a:	4618      	mov	r0, r3
 801064c:	3710      	adds	r7, #16
 801064e:	46bd      	mov	sp, r7
 8010650:	bd80      	pop	{r7, pc}

08010652 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010652:	b580      	push	{r7, lr}
 8010654:	b084      	sub	sp, #16
 8010656:	af00      	add	r7, sp, #0
 8010658:	6078      	str	r0, [r7, #4]
 801065a:	460b      	mov	r3, r1
 801065c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801065e:	2300      	movs	r3, #0
 8010660:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010668:	685b      	ldr	r3, [r3, #4]
 801066a:	78fa      	ldrb	r2, [r7, #3]
 801066c:	4611      	mov	r1, r2
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	4798      	blx	r3
 8010672:	4603      	mov	r3, r0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d001      	beq.n	801067c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010678:	2303      	movs	r3, #3
 801067a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801067c:	7bfb      	ldrb	r3, [r7, #15]
}
 801067e:	4618      	mov	r0, r3
 8010680:	3710      	adds	r7, #16
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}

08010686 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010686:	b580      	push	{r7, lr}
 8010688:	b084      	sub	sp, #16
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
 801068e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010696:	6839      	ldr	r1, [r7, #0]
 8010698:	4618      	mov	r0, r3
 801069a:	f001 f846 	bl	801172a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	2201      	movs	r2, #1
 80106a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80106ac:	461a      	mov	r2, r3
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80106ba:	f003 031f 	and.w	r3, r3, #31
 80106be:	2b02      	cmp	r3, #2
 80106c0:	d01a      	beq.n	80106f8 <USBD_LL_SetupStage+0x72>
 80106c2:	2b02      	cmp	r3, #2
 80106c4:	d822      	bhi.n	801070c <USBD_LL_SetupStage+0x86>
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d002      	beq.n	80106d0 <USBD_LL_SetupStage+0x4a>
 80106ca:	2b01      	cmp	r3, #1
 80106cc:	d00a      	beq.n	80106e4 <USBD_LL_SetupStage+0x5e>
 80106ce:	e01d      	b.n	801070c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80106d6:	4619      	mov	r1, r3
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f000 fa9d 	bl	8010c18 <USBD_StdDevReq>
 80106de:	4603      	mov	r3, r0
 80106e0:	73fb      	strb	r3, [r7, #15]
      break;
 80106e2:	e020      	b.n	8010726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80106ea:	4619      	mov	r1, r3
 80106ec:	6878      	ldr	r0, [r7, #4]
 80106ee:	f000 fb05 	bl	8010cfc <USBD_StdItfReq>
 80106f2:	4603      	mov	r3, r0
 80106f4:	73fb      	strb	r3, [r7, #15]
      break;
 80106f6:	e016      	b.n	8010726 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80106fe:	4619      	mov	r1, r3
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f000 fb67 	bl	8010dd4 <USBD_StdEPReq>
 8010706:	4603      	mov	r3, r0
 8010708:	73fb      	strb	r3, [r7, #15]
      break;
 801070a:	e00c      	b.n	8010726 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010712:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010716:	b2db      	uxtb	r3, r3
 8010718:	4619      	mov	r1, r3
 801071a:	6878      	ldr	r0, [r7, #4]
 801071c:	f7ff fdfc 	bl	8010318 <USBD_LL_StallEP>
 8010720:	4603      	mov	r3, r0
 8010722:	73fb      	strb	r3, [r7, #15]
      break;
 8010724:	bf00      	nop
  }

  return ret;
 8010726:	7bfb      	ldrb	r3, [r7, #15]
}
 8010728:	4618      	mov	r0, r3
 801072a:	3710      	adds	r7, #16
 801072c:	46bd      	mov	sp, r7
 801072e:	bd80      	pop	{r7, pc}

08010730 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b086      	sub	sp, #24
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	460b      	mov	r3, r1
 801073a:	607a      	str	r2, [r7, #4]
 801073c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801073e:	2300      	movs	r3, #0
 8010740:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010742:	7afb      	ldrb	r3, [r7, #11]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d16e      	bne.n	8010826 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801074e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010756:	2b03      	cmp	r3, #3
 8010758:	f040 8098 	bne.w	801088c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801075c:	693b      	ldr	r3, [r7, #16]
 801075e:	689a      	ldr	r2, [r3, #8]
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	68db      	ldr	r3, [r3, #12]
 8010764:	429a      	cmp	r2, r3
 8010766:	d913      	bls.n	8010790 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010768:	693b      	ldr	r3, [r7, #16]
 801076a:	689a      	ldr	r2, [r3, #8]
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	1ad2      	subs	r2, r2, r3
 8010772:	693b      	ldr	r3, [r7, #16]
 8010774:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	68da      	ldr	r2, [r3, #12]
 801077a:	693b      	ldr	r3, [r7, #16]
 801077c:	689b      	ldr	r3, [r3, #8]
 801077e:	4293      	cmp	r3, r2
 8010780:	bf28      	it	cs
 8010782:	4613      	movcs	r3, r2
 8010784:	461a      	mov	r2, r3
 8010786:	6879      	ldr	r1, [r7, #4]
 8010788:	68f8      	ldr	r0, [r7, #12]
 801078a:	f001 f9cf 	bl	8011b2c <USBD_CtlContinueRx>
 801078e:	e07d      	b.n	801088c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010796:	f003 031f 	and.w	r3, r3, #31
 801079a:	2b02      	cmp	r3, #2
 801079c:	d014      	beq.n	80107c8 <USBD_LL_DataOutStage+0x98>
 801079e:	2b02      	cmp	r3, #2
 80107a0:	d81d      	bhi.n	80107de <USBD_LL_DataOutStage+0xae>
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d002      	beq.n	80107ac <USBD_LL_DataOutStage+0x7c>
 80107a6:	2b01      	cmp	r3, #1
 80107a8:	d003      	beq.n	80107b2 <USBD_LL_DataOutStage+0x82>
 80107aa:	e018      	b.n	80107de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80107ac:	2300      	movs	r3, #0
 80107ae:	75bb      	strb	r3, [r7, #22]
            break;
 80107b0:	e018      	b.n	80107e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80107b8:	b2db      	uxtb	r3, r3
 80107ba:	4619      	mov	r1, r3
 80107bc:	68f8      	ldr	r0, [r7, #12]
 80107be:	f000 f99e 	bl	8010afe <USBD_CoreFindIF>
 80107c2:	4603      	mov	r3, r0
 80107c4:	75bb      	strb	r3, [r7, #22]
            break;
 80107c6:	e00d      	b.n	80107e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80107ce:	b2db      	uxtb	r3, r3
 80107d0:	4619      	mov	r1, r3
 80107d2:	68f8      	ldr	r0, [r7, #12]
 80107d4:	f000 f9a0 	bl	8010b18 <USBD_CoreFindEP>
 80107d8:	4603      	mov	r3, r0
 80107da:	75bb      	strb	r3, [r7, #22]
            break;
 80107dc:	e002      	b.n	80107e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80107de:	2300      	movs	r3, #0
 80107e0:	75bb      	strb	r3, [r7, #22]
            break;
 80107e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80107e4:	7dbb      	ldrb	r3, [r7, #22]
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d119      	bne.n	801081e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80107f0:	b2db      	uxtb	r3, r3
 80107f2:	2b03      	cmp	r3, #3
 80107f4:	d113      	bne.n	801081e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80107f6:	7dba      	ldrb	r2, [r7, #22]
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	32ae      	adds	r2, #174	@ 0xae
 80107fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010800:	691b      	ldr	r3, [r3, #16]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d00b      	beq.n	801081e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010806:	7dba      	ldrb	r2, [r7, #22]
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801080e:	7dba      	ldrb	r2, [r7, #22]
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	32ae      	adds	r2, #174	@ 0xae
 8010814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010818:	691b      	ldr	r3, [r3, #16]
 801081a:	68f8      	ldr	r0, [r7, #12]
 801081c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801081e:	68f8      	ldr	r0, [r7, #12]
 8010820:	f001 f995 	bl	8011b4e <USBD_CtlSendStatus>
 8010824:	e032      	b.n	801088c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010826:	7afb      	ldrb	r3, [r7, #11]
 8010828:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801082c:	b2db      	uxtb	r3, r3
 801082e:	4619      	mov	r1, r3
 8010830:	68f8      	ldr	r0, [r7, #12]
 8010832:	f000 f971 	bl	8010b18 <USBD_CoreFindEP>
 8010836:	4603      	mov	r3, r0
 8010838:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801083a:	7dbb      	ldrb	r3, [r7, #22]
 801083c:	2bff      	cmp	r3, #255	@ 0xff
 801083e:	d025      	beq.n	801088c <USBD_LL_DataOutStage+0x15c>
 8010840:	7dbb      	ldrb	r3, [r7, #22]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d122      	bne.n	801088c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801084c:	b2db      	uxtb	r3, r3
 801084e:	2b03      	cmp	r3, #3
 8010850:	d117      	bne.n	8010882 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010852:	7dba      	ldrb	r2, [r7, #22]
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	32ae      	adds	r2, #174	@ 0xae
 8010858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801085c:	699b      	ldr	r3, [r3, #24]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d00f      	beq.n	8010882 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010862:	7dba      	ldrb	r2, [r7, #22]
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801086a:	7dba      	ldrb	r2, [r7, #22]
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	32ae      	adds	r2, #174	@ 0xae
 8010870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010874:	699b      	ldr	r3, [r3, #24]
 8010876:	7afa      	ldrb	r2, [r7, #11]
 8010878:	4611      	mov	r1, r2
 801087a:	68f8      	ldr	r0, [r7, #12]
 801087c:	4798      	blx	r3
 801087e:	4603      	mov	r3, r0
 8010880:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010882:	7dfb      	ldrb	r3, [r7, #23]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d001      	beq.n	801088c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010888:	7dfb      	ldrb	r3, [r7, #23]
 801088a:	e000      	b.n	801088e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801088c:	2300      	movs	r3, #0
}
 801088e:	4618      	mov	r0, r3
 8010890:	3718      	adds	r7, #24
 8010892:	46bd      	mov	sp, r7
 8010894:	bd80      	pop	{r7, pc}

08010896 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010896:	b580      	push	{r7, lr}
 8010898:	b086      	sub	sp, #24
 801089a:	af00      	add	r7, sp, #0
 801089c:	60f8      	str	r0, [r7, #12]
 801089e:	460b      	mov	r3, r1
 80108a0:	607a      	str	r2, [r7, #4]
 80108a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80108a4:	7afb      	ldrb	r3, [r7, #11]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d16f      	bne.n	801098a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	3314      	adds	r3, #20
 80108ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80108b0:	68fb      	ldr	r3, [r7, #12]
 80108b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80108b6:	2b02      	cmp	r3, #2
 80108b8:	d15a      	bne.n	8010970 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	689a      	ldr	r2, [r3, #8]
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	68db      	ldr	r3, [r3, #12]
 80108c2:	429a      	cmp	r2, r3
 80108c4:	d914      	bls.n	80108f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	689a      	ldr	r2, [r3, #8]
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	68db      	ldr	r3, [r3, #12]
 80108ce:	1ad2      	subs	r2, r2, r3
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	689b      	ldr	r3, [r3, #8]
 80108d8:	461a      	mov	r2, r3
 80108da:	6879      	ldr	r1, [r7, #4]
 80108dc:	68f8      	ldr	r0, [r7, #12]
 80108de:	f001 f8f7 	bl	8011ad0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80108e2:	2300      	movs	r3, #0
 80108e4:	2200      	movs	r2, #0
 80108e6:	2100      	movs	r1, #0
 80108e8:	68f8      	ldr	r0, [r7, #12]
 80108ea:	f7ff fda7 	bl	801043c <USBD_LL_PrepareReceive>
 80108ee:	e03f      	b.n	8010970 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	68da      	ldr	r2, [r3, #12]
 80108f4:	693b      	ldr	r3, [r7, #16]
 80108f6:	689b      	ldr	r3, [r3, #8]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d11c      	bne.n	8010936 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	685a      	ldr	r2, [r3, #4]
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010904:	429a      	cmp	r2, r3
 8010906:	d316      	bcc.n	8010936 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010908:	693b      	ldr	r3, [r7, #16]
 801090a:	685a      	ldr	r2, [r3, #4]
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010912:	429a      	cmp	r2, r3
 8010914:	d20f      	bcs.n	8010936 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010916:	2200      	movs	r2, #0
 8010918:	2100      	movs	r1, #0
 801091a:	68f8      	ldr	r0, [r7, #12]
 801091c:	f001 f8d8 	bl	8011ad0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	2200      	movs	r2, #0
 8010924:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010928:	2300      	movs	r3, #0
 801092a:	2200      	movs	r2, #0
 801092c:	2100      	movs	r1, #0
 801092e:	68f8      	ldr	r0, [r7, #12]
 8010930:	f7ff fd84 	bl	801043c <USBD_LL_PrepareReceive>
 8010934:	e01c      	b.n	8010970 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801093c:	b2db      	uxtb	r3, r3
 801093e:	2b03      	cmp	r3, #3
 8010940:	d10f      	bne.n	8010962 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010948:	68db      	ldr	r3, [r3, #12]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d009      	beq.n	8010962 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2200      	movs	r2, #0
 8010952:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801095c:	68db      	ldr	r3, [r3, #12]
 801095e:	68f8      	ldr	r0, [r7, #12]
 8010960:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010962:	2180      	movs	r1, #128	@ 0x80
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f7ff fcd7 	bl	8010318 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801096a:	68f8      	ldr	r0, [r7, #12]
 801096c:	f001 f902 	bl	8011b74 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010976:	2b00      	cmp	r3, #0
 8010978:	d03a      	beq.n	80109f0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801097a:	68f8      	ldr	r0, [r7, #12]
 801097c:	f7ff fe42 	bl	8010604 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	2200      	movs	r2, #0
 8010984:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010988:	e032      	b.n	80109f0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801098a:	7afb      	ldrb	r3, [r7, #11]
 801098c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010990:	b2db      	uxtb	r3, r3
 8010992:	4619      	mov	r1, r3
 8010994:	68f8      	ldr	r0, [r7, #12]
 8010996:	f000 f8bf 	bl	8010b18 <USBD_CoreFindEP>
 801099a:	4603      	mov	r3, r0
 801099c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801099e:	7dfb      	ldrb	r3, [r7, #23]
 80109a0:	2bff      	cmp	r3, #255	@ 0xff
 80109a2:	d025      	beq.n	80109f0 <USBD_LL_DataInStage+0x15a>
 80109a4:	7dfb      	ldrb	r3, [r7, #23]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d122      	bne.n	80109f0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109b0:	b2db      	uxtb	r3, r3
 80109b2:	2b03      	cmp	r3, #3
 80109b4:	d11c      	bne.n	80109f0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80109b6:	7dfa      	ldrb	r2, [r7, #23]
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	32ae      	adds	r2, #174	@ 0xae
 80109bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109c0:	695b      	ldr	r3, [r3, #20]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d014      	beq.n	80109f0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80109c6:	7dfa      	ldrb	r2, [r7, #23]
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80109ce:	7dfa      	ldrb	r2, [r7, #23]
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	32ae      	adds	r2, #174	@ 0xae
 80109d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109d8:	695b      	ldr	r3, [r3, #20]
 80109da:	7afa      	ldrb	r2, [r7, #11]
 80109dc:	4611      	mov	r1, r2
 80109de:	68f8      	ldr	r0, [r7, #12]
 80109e0:	4798      	blx	r3
 80109e2:	4603      	mov	r3, r0
 80109e4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80109e6:	7dbb      	ldrb	r3, [r7, #22]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d001      	beq.n	80109f0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80109ec:	7dbb      	ldrb	r3, [r7, #22]
 80109ee:	e000      	b.n	80109f2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80109f0:	2300      	movs	r3, #0
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3718      	adds	r7, #24
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}

080109fa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80109fa:	b580      	push	{r7, lr}
 80109fc:	b084      	sub	sp, #16
 80109fe:	af00      	add	r7, sp, #0
 8010a00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a02:	2300      	movs	r3, #0
 8010a04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2201      	movs	r2, #1
 8010a0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	2200      	movs	r2, #0
 8010a12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	2200      	movs	r2, #0
 8010a20:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2200      	movs	r2, #0
 8010a28:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d014      	beq.n	8010a60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d00e      	beq.n	8010a60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a48:	685b      	ldr	r3, [r3, #4]
 8010a4a:	687a      	ldr	r2, [r7, #4]
 8010a4c:	6852      	ldr	r2, [r2, #4]
 8010a4e:	b2d2      	uxtb	r2, r2
 8010a50:	4611      	mov	r1, r2
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	4798      	blx	r3
 8010a56:	4603      	mov	r3, r0
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d001      	beq.n	8010a60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010a5c:	2303      	movs	r3, #3
 8010a5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010a60:	2340      	movs	r3, #64	@ 0x40
 8010a62:	2200      	movs	r2, #0
 8010a64:	2100      	movs	r1, #0
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	f7ff fc1d 	bl	80102a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2201      	movs	r2, #1
 8010a70:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2240      	movs	r2, #64	@ 0x40
 8010a78:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010a7c:	2340      	movs	r3, #64	@ 0x40
 8010a7e:	2200      	movs	r2, #0
 8010a80:	2180      	movs	r1, #128	@ 0x80
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	f7ff fc0f 	bl	80102a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	2240      	movs	r2, #64	@ 0x40
 8010a92:	621a      	str	r2, [r3, #32]

  return ret;
 8010a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3710      	adds	r7, #16
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}

08010a9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010a9e:	b480      	push	{r7}
 8010aa0:	b083      	sub	sp, #12
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]
 8010aa6:	460b      	mov	r3, r1
 8010aa8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	78fa      	ldrb	r2, [r7, #3]
 8010aae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010ab0:	2300      	movs	r3, #0
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	370c      	adds	r7, #12
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abc:	4770      	bx	lr

08010abe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010abe:	b580      	push	{r7, lr}
 8010ac0:	b082      	sub	sp, #8
 8010ac2:	af00      	add	r7, sp, #0
 8010ac4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010acc:	b2db      	uxtb	r3, r3
 8010ace:	2b03      	cmp	r3, #3
 8010ad0:	d110      	bne.n	8010af4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d00b      	beq.n	8010af4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010ae2:	69db      	ldr	r3, [r3, #28]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d005      	beq.n	8010af4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010aee:	69db      	ldr	r3, [r3, #28]
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010af4:	2300      	movs	r3, #0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3708      	adds	r7, #8
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}

08010afe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010afe:	b480      	push	{r7}
 8010b00:	b083      	sub	sp, #12
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	460b      	mov	r3, r1
 8010b08:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010b0a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	370c      	adds	r7, #12
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr

08010b18 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b083      	sub	sp, #12
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	460b      	mov	r3, r1
 8010b22:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010b24:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	370c      	adds	r7, #12
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b30:	4770      	bx	lr

08010b32 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010b32:	b580      	push	{r7, lr}
 8010b34:	b086      	sub	sp, #24
 8010b36:	af00      	add	r7, sp, #0
 8010b38:	6078      	str	r0, [r7, #4]
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010b46:	2300      	movs	r3, #0
 8010b48:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	885b      	ldrh	r3, [r3, #2]
 8010b4e:	b29b      	uxth	r3, r3
 8010b50:	68fa      	ldr	r2, [r7, #12]
 8010b52:	7812      	ldrb	r2, [r2, #0]
 8010b54:	4293      	cmp	r3, r2
 8010b56:	d91f      	bls.n	8010b98 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010b5e:	e013      	b.n	8010b88 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010b60:	f107 030a 	add.w	r3, r7, #10
 8010b64:	4619      	mov	r1, r3
 8010b66:	6978      	ldr	r0, [r7, #20]
 8010b68:	f000 f81b 	bl	8010ba2 <USBD_GetNextDesc>
 8010b6c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010b6e:	697b      	ldr	r3, [r7, #20]
 8010b70:	785b      	ldrb	r3, [r3, #1]
 8010b72:	2b05      	cmp	r3, #5
 8010b74:	d108      	bne.n	8010b88 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	789b      	ldrb	r3, [r3, #2]
 8010b7e:	78fa      	ldrb	r2, [r7, #3]
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d008      	beq.n	8010b96 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010b84:	2300      	movs	r3, #0
 8010b86:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	885b      	ldrh	r3, [r3, #2]
 8010b8c:	b29a      	uxth	r2, r3
 8010b8e:	897b      	ldrh	r3, [r7, #10]
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d8e5      	bhi.n	8010b60 <USBD_GetEpDesc+0x2e>
 8010b94:	e000      	b.n	8010b98 <USBD_GetEpDesc+0x66>
          break;
 8010b96:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010b98:	693b      	ldr	r3, [r7, #16]
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3718      	adds	r7, #24
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}

08010ba2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010ba2:	b480      	push	{r7}
 8010ba4:	b085      	sub	sp, #20
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	6078      	str	r0, [r7, #4]
 8010baa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	881b      	ldrh	r3, [r3, #0]
 8010bb4:	68fa      	ldr	r2, [r7, #12]
 8010bb6:	7812      	ldrb	r2, [r2, #0]
 8010bb8:	4413      	add	r3, r2
 8010bba:	b29a      	uxth	r2, r3
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	4413      	add	r3, r2
 8010bca:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010bcc:	68fb      	ldr	r3, [r7, #12]
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3714      	adds	r7, #20
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd8:	4770      	bx	lr

08010bda <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010bda:	b480      	push	{r7}
 8010bdc:	b087      	sub	sp, #28
 8010bde:	af00      	add	r7, sp, #0
 8010be0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010be6:	697b      	ldr	r3, [r7, #20]
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	3301      	adds	r3, #1
 8010bf0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010bf8:	8a3b      	ldrh	r3, [r7, #16]
 8010bfa:	021b      	lsls	r3, r3, #8
 8010bfc:	b21a      	sxth	r2, r3
 8010bfe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010c02:	4313      	orrs	r3, r2
 8010c04:	b21b      	sxth	r3, r3
 8010c06:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010c08:	89fb      	ldrh	r3, [r7, #14]
}
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	371c      	adds	r7, #28
 8010c0e:	46bd      	mov	sp, r7
 8010c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c14:	4770      	bx	lr
	...

08010c18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b084      	sub	sp, #16
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
 8010c20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010c22:	2300      	movs	r3, #0
 8010c24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010c26:	683b      	ldr	r3, [r7, #0]
 8010c28:	781b      	ldrb	r3, [r3, #0]
 8010c2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010c2e:	2b40      	cmp	r3, #64	@ 0x40
 8010c30:	d005      	beq.n	8010c3e <USBD_StdDevReq+0x26>
 8010c32:	2b40      	cmp	r3, #64	@ 0x40
 8010c34:	d857      	bhi.n	8010ce6 <USBD_StdDevReq+0xce>
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d00f      	beq.n	8010c5a <USBD_StdDevReq+0x42>
 8010c3a:	2b20      	cmp	r3, #32
 8010c3c:	d153      	bne.n	8010ce6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	32ae      	adds	r2, #174	@ 0xae
 8010c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c4c:	689b      	ldr	r3, [r3, #8]
 8010c4e:	6839      	ldr	r1, [r7, #0]
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	4798      	blx	r3
 8010c54:	4603      	mov	r3, r0
 8010c56:	73fb      	strb	r3, [r7, #15]
      break;
 8010c58:	e04a      	b.n	8010cf0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010c5a:	683b      	ldr	r3, [r7, #0]
 8010c5c:	785b      	ldrb	r3, [r3, #1]
 8010c5e:	2b09      	cmp	r3, #9
 8010c60:	d83b      	bhi.n	8010cda <USBD_StdDevReq+0xc2>
 8010c62:	a201      	add	r2, pc, #4	@ (adr r2, 8010c68 <USBD_StdDevReq+0x50>)
 8010c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c68:	08010cbd 	.word	0x08010cbd
 8010c6c:	08010cd1 	.word	0x08010cd1
 8010c70:	08010cdb 	.word	0x08010cdb
 8010c74:	08010cc7 	.word	0x08010cc7
 8010c78:	08010cdb 	.word	0x08010cdb
 8010c7c:	08010c9b 	.word	0x08010c9b
 8010c80:	08010c91 	.word	0x08010c91
 8010c84:	08010cdb 	.word	0x08010cdb
 8010c88:	08010cb3 	.word	0x08010cb3
 8010c8c:	08010ca5 	.word	0x08010ca5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010c90:	6839      	ldr	r1, [r7, #0]
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f000 fa3c 	bl	8011110 <USBD_GetDescriptor>
          break;
 8010c98:	e024      	b.n	8010ce4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010c9a:	6839      	ldr	r1, [r7, #0]
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f000 fba1 	bl	80113e4 <USBD_SetAddress>
          break;
 8010ca2:	e01f      	b.n	8010ce4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010ca4:	6839      	ldr	r1, [r7, #0]
 8010ca6:	6878      	ldr	r0, [r7, #4]
 8010ca8:	f000 fbe0 	bl	801146c <USBD_SetConfig>
 8010cac:	4603      	mov	r3, r0
 8010cae:	73fb      	strb	r3, [r7, #15]
          break;
 8010cb0:	e018      	b.n	8010ce4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010cb2:	6839      	ldr	r1, [r7, #0]
 8010cb4:	6878      	ldr	r0, [r7, #4]
 8010cb6:	f000 fc83 	bl	80115c0 <USBD_GetConfig>
          break;
 8010cba:	e013      	b.n	8010ce4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010cbc:	6839      	ldr	r1, [r7, #0]
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 fcb4 	bl	801162c <USBD_GetStatus>
          break;
 8010cc4:	e00e      	b.n	8010ce4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010cc6:	6839      	ldr	r1, [r7, #0]
 8010cc8:	6878      	ldr	r0, [r7, #4]
 8010cca:	f000 fce3 	bl	8011694 <USBD_SetFeature>
          break;
 8010cce:	e009      	b.n	8010ce4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010cd0:	6839      	ldr	r1, [r7, #0]
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f000 fd07 	bl	80116e6 <USBD_ClrFeature>
          break;
 8010cd8:	e004      	b.n	8010ce4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010cda:	6839      	ldr	r1, [r7, #0]
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f000 fd5e 	bl	801179e <USBD_CtlError>
          break;
 8010ce2:	bf00      	nop
      }
      break;
 8010ce4:	e004      	b.n	8010cf0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010ce6:	6839      	ldr	r1, [r7, #0]
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f000 fd58 	bl	801179e <USBD_CtlError>
      break;
 8010cee:	bf00      	nop
  }

  return ret;
 8010cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3710      	adds	r7, #16
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}
 8010cfa:	bf00      	nop

08010cfc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b084      	sub	sp, #16
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	6078      	str	r0, [r7, #4]
 8010d04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d06:	2300      	movs	r3, #0
 8010d08:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010d0a:	683b      	ldr	r3, [r7, #0]
 8010d0c:	781b      	ldrb	r3, [r3, #0]
 8010d0e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010d12:	2b40      	cmp	r3, #64	@ 0x40
 8010d14:	d005      	beq.n	8010d22 <USBD_StdItfReq+0x26>
 8010d16:	2b40      	cmp	r3, #64	@ 0x40
 8010d18:	d852      	bhi.n	8010dc0 <USBD_StdItfReq+0xc4>
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d001      	beq.n	8010d22 <USBD_StdItfReq+0x26>
 8010d1e:	2b20      	cmp	r3, #32
 8010d20:	d14e      	bne.n	8010dc0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	2b02      	cmp	r3, #2
 8010d2e:	d840      	bhi.n	8010db2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	889b      	ldrh	r3, [r3, #4]
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	2b01      	cmp	r3, #1
 8010d38:	d836      	bhi.n	8010da8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	889b      	ldrh	r3, [r3, #4]
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	4619      	mov	r1, r3
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f7ff fedb 	bl	8010afe <USBD_CoreFindIF>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010d4c:	7bbb      	ldrb	r3, [r7, #14]
 8010d4e:	2bff      	cmp	r3, #255	@ 0xff
 8010d50:	d01d      	beq.n	8010d8e <USBD_StdItfReq+0x92>
 8010d52:	7bbb      	ldrb	r3, [r7, #14]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d11a      	bne.n	8010d8e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010d58:	7bba      	ldrb	r2, [r7, #14]
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	32ae      	adds	r2, #174	@ 0xae
 8010d5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d62:	689b      	ldr	r3, [r3, #8]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d00f      	beq.n	8010d88 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010d68:	7bba      	ldrb	r2, [r7, #14]
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010d70:	7bba      	ldrb	r2, [r7, #14]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	32ae      	adds	r2, #174	@ 0xae
 8010d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d7a:	689b      	ldr	r3, [r3, #8]
 8010d7c:	6839      	ldr	r1, [r7, #0]
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	4798      	blx	r3
 8010d82:	4603      	mov	r3, r0
 8010d84:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010d86:	e004      	b.n	8010d92 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010d88:	2303      	movs	r3, #3
 8010d8a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010d8c:	e001      	b.n	8010d92 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010d8e:	2303      	movs	r3, #3
 8010d90:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	88db      	ldrh	r3, [r3, #6]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d110      	bne.n	8010dbc <USBD_StdItfReq+0xc0>
 8010d9a:	7bfb      	ldrb	r3, [r7, #15]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d10d      	bne.n	8010dbc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f000 fed4 	bl	8011b4e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010da6:	e009      	b.n	8010dbc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010da8:	6839      	ldr	r1, [r7, #0]
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f000 fcf7 	bl	801179e <USBD_CtlError>
          break;
 8010db0:	e004      	b.n	8010dbc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010db2:	6839      	ldr	r1, [r7, #0]
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f000 fcf2 	bl	801179e <USBD_CtlError>
          break;
 8010dba:	e000      	b.n	8010dbe <USBD_StdItfReq+0xc2>
          break;
 8010dbc:	bf00      	nop
      }
      break;
 8010dbe:	e004      	b.n	8010dca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010dc0:	6839      	ldr	r1, [r7, #0]
 8010dc2:	6878      	ldr	r0, [r7, #4]
 8010dc4:	f000 fceb 	bl	801179e <USBD_CtlError>
      break;
 8010dc8:	bf00      	nop
  }

  return ret;
 8010dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8010dcc:	4618      	mov	r0, r3
 8010dce:	3710      	adds	r7, #16
 8010dd0:	46bd      	mov	sp, r7
 8010dd2:	bd80      	pop	{r7, pc}

08010dd4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b084      	sub	sp, #16
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010dde:	2300      	movs	r3, #0
 8010de0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	889b      	ldrh	r3, [r3, #4]
 8010de6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010de8:	683b      	ldr	r3, [r7, #0]
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010df0:	2b40      	cmp	r3, #64	@ 0x40
 8010df2:	d007      	beq.n	8010e04 <USBD_StdEPReq+0x30>
 8010df4:	2b40      	cmp	r3, #64	@ 0x40
 8010df6:	f200 817f 	bhi.w	80110f8 <USBD_StdEPReq+0x324>
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d02a      	beq.n	8010e54 <USBD_StdEPReq+0x80>
 8010dfe:	2b20      	cmp	r3, #32
 8010e00:	f040 817a 	bne.w	80110f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010e04:	7bbb      	ldrb	r3, [r7, #14]
 8010e06:	4619      	mov	r1, r3
 8010e08:	6878      	ldr	r0, [r7, #4]
 8010e0a:	f7ff fe85 	bl	8010b18 <USBD_CoreFindEP>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010e12:	7b7b      	ldrb	r3, [r7, #13]
 8010e14:	2bff      	cmp	r3, #255	@ 0xff
 8010e16:	f000 8174 	beq.w	8011102 <USBD_StdEPReq+0x32e>
 8010e1a:	7b7b      	ldrb	r3, [r7, #13]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f040 8170 	bne.w	8011102 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010e22:	7b7a      	ldrb	r2, [r7, #13]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010e2a:	7b7a      	ldrb	r2, [r7, #13]
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	32ae      	adds	r2, #174	@ 0xae
 8010e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e34:	689b      	ldr	r3, [r3, #8]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	f000 8163 	beq.w	8011102 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010e3c:	7b7a      	ldrb	r2, [r7, #13]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	32ae      	adds	r2, #174	@ 0xae
 8010e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e46:	689b      	ldr	r3, [r3, #8]
 8010e48:	6839      	ldr	r1, [r7, #0]
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	4798      	blx	r3
 8010e4e:	4603      	mov	r3, r0
 8010e50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010e52:	e156      	b.n	8011102 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	785b      	ldrb	r3, [r3, #1]
 8010e58:	2b03      	cmp	r3, #3
 8010e5a:	d008      	beq.n	8010e6e <USBD_StdEPReq+0x9a>
 8010e5c:	2b03      	cmp	r3, #3
 8010e5e:	f300 8145 	bgt.w	80110ec <USBD_StdEPReq+0x318>
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	f000 809b 	beq.w	8010f9e <USBD_StdEPReq+0x1ca>
 8010e68:	2b01      	cmp	r3, #1
 8010e6a:	d03c      	beq.n	8010ee6 <USBD_StdEPReq+0x112>
 8010e6c:	e13e      	b.n	80110ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e74:	b2db      	uxtb	r3, r3
 8010e76:	2b02      	cmp	r3, #2
 8010e78:	d002      	beq.n	8010e80 <USBD_StdEPReq+0xac>
 8010e7a:	2b03      	cmp	r3, #3
 8010e7c:	d016      	beq.n	8010eac <USBD_StdEPReq+0xd8>
 8010e7e:	e02c      	b.n	8010eda <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010e80:	7bbb      	ldrb	r3, [r7, #14]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d00d      	beq.n	8010ea2 <USBD_StdEPReq+0xce>
 8010e86:	7bbb      	ldrb	r3, [r7, #14]
 8010e88:	2b80      	cmp	r3, #128	@ 0x80
 8010e8a:	d00a      	beq.n	8010ea2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010e8c:	7bbb      	ldrb	r3, [r7, #14]
 8010e8e:	4619      	mov	r1, r3
 8010e90:	6878      	ldr	r0, [r7, #4]
 8010e92:	f7ff fa41 	bl	8010318 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010e96:	2180      	movs	r1, #128	@ 0x80
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f7ff fa3d 	bl	8010318 <USBD_LL_StallEP>
 8010e9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010ea0:	e020      	b.n	8010ee4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010ea2:	6839      	ldr	r1, [r7, #0]
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f000 fc7a 	bl	801179e <USBD_CtlError>
              break;
 8010eaa:	e01b      	b.n	8010ee4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	885b      	ldrh	r3, [r3, #2]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d10e      	bne.n	8010ed2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010eb4:	7bbb      	ldrb	r3, [r7, #14]
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00b      	beq.n	8010ed2 <USBD_StdEPReq+0xfe>
 8010eba:	7bbb      	ldrb	r3, [r7, #14]
 8010ebc:	2b80      	cmp	r3, #128	@ 0x80
 8010ebe:	d008      	beq.n	8010ed2 <USBD_StdEPReq+0xfe>
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	88db      	ldrh	r3, [r3, #6]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d104      	bne.n	8010ed2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010ec8:	7bbb      	ldrb	r3, [r7, #14]
 8010eca:	4619      	mov	r1, r3
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f7ff fa23 	bl	8010318 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010ed2:	6878      	ldr	r0, [r7, #4]
 8010ed4:	f000 fe3b 	bl	8011b4e <USBD_CtlSendStatus>

              break;
 8010ed8:	e004      	b.n	8010ee4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010eda:	6839      	ldr	r1, [r7, #0]
 8010edc:	6878      	ldr	r0, [r7, #4]
 8010ede:	f000 fc5e 	bl	801179e <USBD_CtlError>
              break;
 8010ee2:	bf00      	nop
          }
          break;
 8010ee4:	e107      	b.n	80110f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010eec:	b2db      	uxtb	r3, r3
 8010eee:	2b02      	cmp	r3, #2
 8010ef0:	d002      	beq.n	8010ef8 <USBD_StdEPReq+0x124>
 8010ef2:	2b03      	cmp	r3, #3
 8010ef4:	d016      	beq.n	8010f24 <USBD_StdEPReq+0x150>
 8010ef6:	e04b      	b.n	8010f90 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010ef8:	7bbb      	ldrb	r3, [r7, #14]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d00d      	beq.n	8010f1a <USBD_StdEPReq+0x146>
 8010efe:	7bbb      	ldrb	r3, [r7, #14]
 8010f00:	2b80      	cmp	r3, #128	@ 0x80
 8010f02:	d00a      	beq.n	8010f1a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010f04:	7bbb      	ldrb	r3, [r7, #14]
 8010f06:	4619      	mov	r1, r3
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f7ff fa05 	bl	8010318 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010f0e:	2180      	movs	r1, #128	@ 0x80
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f7ff fa01 	bl	8010318 <USBD_LL_StallEP>
 8010f16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010f18:	e040      	b.n	8010f9c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010f1a:	6839      	ldr	r1, [r7, #0]
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f000 fc3e 	bl	801179e <USBD_CtlError>
              break;
 8010f22:	e03b      	b.n	8010f9c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	885b      	ldrh	r3, [r3, #2]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d136      	bne.n	8010f9a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010f2c:	7bbb      	ldrb	r3, [r7, #14]
 8010f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d004      	beq.n	8010f40 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010f36:	7bbb      	ldrb	r3, [r7, #14]
 8010f38:	4619      	mov	r1, r3
 8010f3a:	6878      	ldr	r0, [r7, #4]
 8010f3c:	f7ff fa05 	bl	801034a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f000 fe04 	bl	8011b4e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010f46:	7bbb      	ldrb	r3, [r7, #14]
 8010f48:	4619      	mov	r1, r3
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f7ff fde4 	bl	8010b18 <USBD_CoreFindEP>
 8010f50:	4603      	mov	r3, r0
 8010f52:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010f54:	7b7b      	ldrb	r3, [r7, #13]
 8010f56:	2bff      	cmp	r3, #255	@ 0xff
 8010f58:	d01f      	beq.n	8010f9a <USBD_StdEPReq+0x1c6>
 8010f5a:	7b7b      	ldrb	r3, [r7, #13]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d11c      	bne.n	8010f9a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010f60:	7b7a      	ldrb	r2, [r7, #13]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010f68:	7b7a      	ldrb	r2, [r7, #13]
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	32ae      	adds	r2, #174	@ 0xae
 8010f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f72:	689b      	ldr	r3, [r3, #8]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d010      	beq.n	8010f9a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010f78:	7b7a      	ldrb	r2, [r7, #13]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	32ae      	adds	r2, #174	@ 0xae
 8010f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f82:	689b      	ldr	r3, [r3, #8]
 8010f84:	6839      	ldr	r1, [r7, #0]
 8010f86:	6878      	ldr	r0, [r7, #4]
 8010f88:	4798      	blx	r3
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010f8e:	e004      	b.n	8010f9a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010f90:	6839      	ldr	r1, [r7, #0]
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	f000 fc03 	bl	801179e <USBD_CtlError>
              break;
 8010f98:	e000      	b.n	8010f9c <USBD_StdEPReq+0x1c8>
              break;
 8010f9a:	bf00      	nop
          }
          break;
 8010f9c:	e0ab      	b.n	80110f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fa4:	b2db      	uxtb	r3, r3
 8010fa6:	2b02      	cmp	r3, #2
 8010fa8:	d002      	beq.n	8010fb0 <USBD_StdEPReq+0x1dc>
 8010faa:	2b03      	cmp	r3, #3
 8010fac:	d032      	beq.n	8011014 <USBD_StdEPReq+0x240>
 8010fae:	e097      	b.n	80110e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010fb0:	7bbb      	ldrb	r3, [r7, #14]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d007      	beq.n	8010fc6 <USBD_StdEPReq+0x1f2>
 8010fb6:	7bbb      	ldrb	r3, [r7, #14]
 8010fb8:	2b80      	cmp	r3, #128	@ 0x80
 8010fba:	d004      	beq.n	8010fc6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010fbc:	6839      	ldr	r1, [r7, #0]
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f000 fbed 	bl	801179e <USBD_CtlError>
                break;
 8010fc4:	e091      	b.n	80110ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010fc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	da0b      	bge.n	8010fe6 <USBD_StdEPReq+0x212>
 8010fce:	7bbb      	ldrb	r3, [r7, #14]
 8010fd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010fd4:	4613      	mov	r3, r2
 8010fd6:	009b      	lsls	r3, r3, #2
 8010fd8:	4413      	add	r3, r2
 8010fda:	009b      	lsls	r3, r3, #2
 8010fdc:	3310      	adds	r3, #16
 8010fde:	687a      	ldr	r2, [r7, #4]
 8010fe0:	4413      	add	r3, r2
 8010fe2:	3304      	adds	r3, #4
 8010fe4:	e00b      	b.n	8010ffe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010fe6:	7bbb      	ldrb	r3, [r7, #14]
 8010fe8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010fec:	4613      	mov	r3, r2
 8010fee:	009b      	lsls	r3, r3, #2
 8010ff0:	4413      	add	r3, r2
 8010ff2:	009b      	lsls	r3, r3, #2
 8010ff4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	4413      	add	r3, r2
 8010ffc:	3304      	adds	r3, #4
 8010ffe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011000:	68bb      	ldr	r3, [r7, #8]
 8011002:	2200      	movs	r2, #0
 8011004:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011006:	68bb      	ldr	r3, [r7, #8]
 8011008:	2202      	movs	r2, #2
 801100a:	4619      	mov	r1, r3
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f000 fd44 	bl	8011a9a <USBD_CtlSendData>
              break;
 8011012:	e06a      	b.n	80110ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011014:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011018:	2b00      	cmp	r3, #0
 801101a:	da11      	bge.n	8011040 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801101c:	7bbb      	ldrb	r3, [r7, #14]
 801101e:	f003 020f 	and.w	r2, r3, #15
 8011022:	6879      	ldr	r1, [r7, #4]
 8011024:	4613      	mov	r3, r2
 8011026:	009b      	lsls	r3, r3, #2
 8011028:	4413      	add	r3, r2
 801102a:	009b      	lsls	r3, r3, #2
 801102c:	440b      	add	r3, r1
 801102e:	3324      	adds	r3, #36	@ 0x24
 8011030:	881b      	ldrh	r3, [r3, #0]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d117      	bne.n	8011066 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011036:	6839      	ldr	r1, [r7, #0]
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f000 fbb0 	bl	801179e <USBD_CtlError>
                  break;
 801103e:	e054      	b.n	80110ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011040:	7bbb      	ldrb	r3, [r7, #14]
 8011042:	f003 020f 	and.w	r2, r3, #15
 8011046:	6879      	ldr	r1, [r7, #4]
 8011048:	4613      	mov	r3, r2
 801104a:	009b      	lsls	r3, r3, #2
 801104c:	4413      	add	r3, r2
 801104e:	009b      	lsls	r3, r3, #2
 8011050:	440b      	add	r3, r1
 8011052:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011056:	881b      	ldrh	r3, [r3, #0]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d104      	bne.n	8011066 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801105c:	6839      	ldr	r1, [r7, #0]
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 fb9d 	bl	801179e <USBD_CtlError>
                  break;
 8011064:	e041      	b.n	80110ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801106a:	2b00      	cmp	r3, #0
 801106c:	da0b      	bge.n	8011086 <USBD_StdEPReq+0x2b2>
 801106e:	7bbb      	ldrb	r3, [r7, #14]
 8011070:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011074:	4613      	mov	r3, r2
 8011076:	009b      	lsls	r3, r3, #2
 8011078:	4413      	add	r3, r2
 801107a:	009b      	lsls	r3, r3, #2
 801107c:	3310      	adds	r3, #16
 801107e:	687a      	ldr	r2, [r7, #4]
 8011080:	4413      	add	r3, r2
 8011082:	3304      	adds	r3, #4
 8011084:	e00b      	b.n	801109e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011086:	7bbb      	ldrb	r3, [r7, #14]
 8011088:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801108c:	4613      	mov	r3, r2
 801108e:	009b      	lsls	r3, r3, #2
 8011090:	4413      	add	r3, r2
 8011092:	009b      	lsls	r3, r3, #2
 8011094:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011098:	687a      	ldr	r2, [r7, #4]
 801109a:	4413      	add	r3, r2
 801109c:	3304      	adds	r3, #4
 801109e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80110a0:	7bbb      	ldrb	r3, [r7, #14]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d002      	beq.n	80110ac <USBD_StdEPReq+0x2d8>
 80110a6:	7bbb      	ldrb	r3, [r7, #14]
 80110a8:	2b80      	cmp	r3, #128	@ 0x80
 80110aa:	d103      	bne.n	80110b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	2200      	movs	r2, #0
 80110b0:	601a      	str	r2, [r3, #0]
 80110b2:	e00e      	b.n	80110d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80110b4:	7bbb      	ldrb	r3, [r7, #14]
 80110b6:	4619      	mov	r1, r3
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f7ff f95f 	bl	801037c <USBD_LL_IsStallEP>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d003      	beq.n	80110cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80110c4:	68bb      	ldr	r3, [r7, #8]
 80110c6:	2201      	movs	r2, #1
 80110c8:	601a      	str	r2, [r3, #0]
 80110ca:	e002      	b.n	80110d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	2200      	movs	r2, #0
 80110d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	2202      	movs	r2, #2
 80110d6:	4619      	mov	r1, r3
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 fcde 	bl	8011a9a <USBD_CtlSendData>
              break;
 80110de:	e004      	b.n	80110ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80110e0:	6839      	ldr	r1, [r7, #0]
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f000 fb5b 	bl	801179e <USBD_CtlError>
              break;
 80110e8:	bf00      	nop
          }
          break;
 80110ea:	e004      	b.n	80110f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80110ec:	6839      	ldr	r1, [r7, #0]
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f000 fb55 	bl	801179e <USBD_CtlError>
          break;
 80110f4:	bf00      	nop
      }
      break;
 80110f6:	e005      	b.n	8011104 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80110f8:	6839      	ldr	r1, [r7, #0]
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f000 fb4f 	bl	801179e <USBD_CtlError>
      break;
 8011100:	e000      	b.n	8011104 <USBD_StdEPReq+0x330>
      break;
 8011102:	bf00      	nop
  }

  return ret;
 8011104:	7bfb      	ldrb	r3, [r7, #15]
}
 8011106:	4618      	mov	r0, r3
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
	...

08011110 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b084      	sub	sp, #16
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801111a:	2300      	movs	r3, #0
 801111c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801111e:	2300      	movs	r3, #0
 8011120:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011122:	2300      	movs	r3, #0
 8011124:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011126:	683b      	ldr	r3, [r7, #0]
 8011128:	885b      	ldrh	r3, [r3, #2]
 801112a:	0a1b      	lsrs	r3, r3, #8
 801112c:	b29b      	uxth	r3, r3
 801112e:	3b01      	subs	r3, #1
 8011130:	2b06      	cmp	r3, #6
 8011132:	f200 8128 	bhi.w	8011386 <USBD_GetDescriptor+0x276>
 8011136:	a201      	add	r2, pc, #4	@ (adr r2, 801113c <USBD_GetDescriptor+0x2c>)
 8011138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801113c:	08011159 	.word	0x08011159
 8011140:	08011171 	.word	0x08011171
 8011144:	080111b1 	.word	0x080111b1
 8011148:	08011387 	.word	0x08011387
 801114c:	08011387 	.word	0x08011387
 8011150:	08011327 	.word	0x08011327
 8011154:	08011353 	.word	0x08011353
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801115e:	681b      	ldr	r3, [r3, #0]
 8011160:	687a      	ldr	r2, [r7, #4]
 8011162:	7c12      	ldrb	r2, [r2, #16]
 8011164:	f107 0108 	add.w	r1, r7, #8
 8011168:	4610      	mov	r0, r2
 801116a:	4798      	blx	r3
 801116c:	60f8      	str	r0, [r7, #12]
      break;
 801116e:	e112      	b.n	8011396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	7c1b      	ldrb	r3, [r3, #16]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d10d      	bne.n	8011194 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801117e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011180:	f107 0208 	add.w	r2, r7, #8
 8011184:	4610      	mov	r0, r2
 8011186:	4798      	blx	r3
 8011188:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	3301      	adds	r3, #1
 801118e:	2202      	movs	r2, #2
 8011190:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011192:	e100      	b.n	8011396 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801119a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801119c:	f107 0208 	add.w	r2, r7, #8
 80111a0:	4610      	mov	r0, r2
 80111a2:	4798      	blx	r3
 80111a4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	3301      	adds	r3, #1
 80111aa:	2202      	movs	r2, #2
 80111ac:	701a      	strb	r2, [r3, #0]
      break;
 80111ae:	e0f2      	b.n	8011396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80111b0:	683b      	ldr	r3, [r7, #0]
 80111b2:	885b      	ldrh	r3, [r3, #2]
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	2b05      	cmp	r3, #5
 80111b8:	f200 80ac 	bhi.w	8011314 <USBD_GetDescriptor+0x204>
 80111bc:	a201      	add	r2, pc, #4	@ (adr r2, 80111c4 <USBD_GetDescriptor+0xb4>)
 80111be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111c2:	bf00      	nop
 80111c4:	080111dd 	.word	0x080111dd
 80111c8:	08011211 	.word	0x08011211
 80111cc:	08011245 	.word	0x08011245
 80111d0:	08011279 	.word	0x08011279
 80111d4:	080112ad 	.word	0x080112ad
 80111d8:	080112e1 	.word	0x080112e1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111e2:	685b      	ldr	r3, [r3, #4]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d00b      	beq.n	8011200 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80111ee:	685b      	ldr	r3, [r3, #4]
 80111f0:	687a      	ldr	r2, [r7, #4]
 80111f2:	7c12      	ldrb	r2, [r2, #16]
 80111f4:	f107 0108 	add.w	r1, r7, #8
 80111f8:	4610      	mov	r0, r2
 80111fa:	4798      	blx	r3
 80111fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80111fe:	e091      	b.n	8011324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011200:	6839      	ldr	r1, [r7, #0]
 8011202:	6878      	ldr	r0, [r7, #4]
 8011204:	f000 facb 	bl	801179e <USBD_CtlError>
            err++;
 8011208:	7afb      	ldrb	r3, [r7, #11]
 801120a:	3301      	adds	r3, #1
 801120c:	72fb      	strb	r3, [r7, #11]
          break;
 801120e:	e089      	b.n	8011324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011216:	689b      	ldr	r3, [r3, #8]
 8011218:	2b00      	cmp	r3, #0
 801121a:	d00b      	beq.n	8011234 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011222:	689b      	ldr	r3, [r3, #8]
 8011224:	687a      	ldr	r2, [r7, #4]
 8011226:	7c12      	ldrb	r2, [r2, #16]
 8011228:	f107 0108 	add.w	r1, r7, #8
 801122c:	4610      	mov	r0, r2
 801122e:	4798      	blx	r3
 8011230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011232:	e077      	b.n	8011324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011234:	6839      	ldr	r1, [r7, #0]
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f000 fab1 	bl	801179e <USBD_CtlError>
            err++;
 801123c:	7afb      	ldrb	r3, [r7, #11]
 801123e:	3301      	adds	r3, #1
 8011240:	72fb      	strb	r3, [r7, #11]
          break;
 8011242:	e06f      	b.n	8011324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801124a:	68db      	ldr	r3, [r3, #12]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d00b      	beq.n	8011268 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011256:	68db      	ldr	r3, [r3, #12]
 8011258:	687a      	ldr	r2, [r7, #4]
 801125a:	7c12      	ldrb	r2, [r2, #16]
 801125c:	f107 0108 	add.w	r1, r7, #8
 8011260:	4610      	mov	r0, r2
 8011262:	4798      	blx	r3
 8011264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011266:	e05d      	b.n	8011324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011268:	6839      	ldr	r1, [r7, #0]
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f000 fa97 	bl	801179e <USBD_CtlError>
            err++;
 8011270:	7afb      	ldrb	r3, [r7, #11]
 8011272:	3301      	adds	r3, #1
 8011274:	72fb      	strb	r3, [r7, #11]
          break;
 8011276:	e055      	b.n	8011324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801127e:	691b      	ldr	r3, [r3, #16]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d00b      	beq.n	801129c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801128a:	691b      	ldr	r3, [r3, #16]
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	7c12      	ldrb	r2, [r2, #16]
 8011290:	f107 0108 	add.w	r1, r7, #8
 8011294:	4610      	mov	r0, r2
 8011296:	4798      	blx	r3
 8011298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801129a:	e043      	b.n	8011324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801129c:	6839      	ldr	r1, [r7, #0]
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f000 fa7d 	bl	801179e <USBD_CtlError>
            err++;
 80112a4:	7afb      	ldrb	r3, [r7, #11]
 80112a6:	3301      	adds	r3, #1
 80112a8:	72fb      	strb	r3, [r7, #11]
          break;
 80112aa:	e03b      	b.n	8011324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80112b2:	695b      	ldr	r3, [r3, #20]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d00b      	beq.n	80112d0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80112be:	695b      	ldr	r3, [r3, #20]
 80112c0:	687a      	ldr	r2, [r7, #4]
 80112c2:	7c12      	ldrb	r2, [r2, #16]
 80112c4:	f107 0108 	add.w	r1, r7, #8
 80112c8:	4610      	mov	r0, r2
 80112ca:	4798      	blx	r3
 80112cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80112ce:	e029      	b.n	8011324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80112d0:	6839      	ldr	r1, [r7, #0]
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f000 fa63 	bl	801179e <USBD_CtlError>
            err++;
 80112d8:	7afb      	ldrb	r3, [r7, #11]
 80112da:	3301      	adds	r3, #1
 80112dc:	72fb      	strb	r3, [r7, #11]
          break;
 80112de:	e021      	b.n	8011324 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80112e6:	699b      	ldr	r3, [r3, #24]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d00b      	beq.n	8011304 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80112f2:	699b      	ldr	r3, [r3, #24]
 80112f4:	687a      	ldr	r2, [r7, #4]
 80112f6:	7c12      	ldrb	r2, [r2, #16]
 80112f8:	f107 0108 	add.w	r1, r7, #8
 80112fc:	4610      	mov	r0, r2
 80112fe:	4798      	blx	r3
 8011300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011302:	e00f      	b.n	8011324 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011304:	6839      	ldr	r1, [r7, #0]
 8011306:	6878      	ldr	r0, [r7, #4]
 8011308:	f000 fa49 	bl	801179e <USBD_CtlError>
            err++;
 801130c:	7afb      	ldrb	r3, [r7, #11]
 801130e:	3301      	adds	r3, #1
 8011310:	72fb      	strb	r3, [r7, #11]
          break;
 8011312:	e007      	b.n	8011324 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011314:	6839      	ldr	r1, [r7, #0]
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f000 fa41 	bl	801179e <USBD_CtlError>
          err++;
 801131c:	7afb      	ldrb	r3, [r7, #11]
 801131e:	3301      	adds	r3, #1
 8011320:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011322:	bf00      	nop
      }
      break;
 8011324:	e037      	b.n	8011396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	7c1b      	ldrb	r3, [r3, #16]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d109      	bne.n	8011342 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011336:	f107 0208 	add.w	r2, r7, #8
 801133a:	4610      	mov	r0, r2
 801133c:	4798      	blx	r3
 801133e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011340:	e029      	b.n	8011396 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011342:	6839      	ldr	r1, [r7, #0]
 8011344:	6878      	ldr	r0, [r7, #4]
 8011346:	f000 fa2a 	bl	801179e <USBD_CtlError>
        err++;
 801134a:	7afb      	ldrb	r3, [r7, #11]
 801134c:	3301      	adds	r3, #1
 801134e:	72fb      	strb	r3, [r7, #11]
      break;
 8011350:	e021      	b.n	8011396 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	7c1b      	ldrb	r3, [r3, #16]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d10d      	bne.n	8011376 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011362:	f107 0208 	add.w	r2, r7, #8
 8011366:	4610      	mov	r0, r2
 8011368:	4798      	blx	r3
 801136a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	3301      	adds	r3, #1
 8011370:	2207      	movs	r2, #7
 8011372:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011374:	e00f      	b.n	8011396 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011376:	6839      	ldr	r1, [r7, #0]
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f000 fa10 	bl	801179e <USBD_CtlError>
        err++;
 801137e:	7afb      	ldrb	r3, [r7, #11]
 8011380:	3301      	adds	r3, #1
 8011382:	72fb      	strb	r3, [r7, #11]
      break;
 8011384:	e007      	b.n	8011396 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011386:	6839      	ldr	r1, [r7, #0]
 8011388:	6878      	ldr	r0, [r7, #4]
 801138a:	f000 fa08 	bl	801179e <USBD_CtlError>
      err++;
 801138e:	7afb      	ldrb	r3, [r7, #11]
 8011390:	3301      	adds	r3, #1
 8011392:	72fb      	strb	r3, [r7, #11]
      break;
 8011394:	bf00      	nop
  }

  if (err != 0U)
 8011396:	7afb      	ldrb	r3, [r7, #11]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d11e      	bne.n	80113da <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	88db      	ldrh	r3, [r3, #6]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d016      	beq.n	80113d2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80113a4:	893b      	ldrh	r3, [r7, #8]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d00e      	beq.n	80113c8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	88da      	ldrh	r2, [r3, #6]
 80113ae:	893b      	ldrh	r3, [r7, #8]
 80113b0:	4293      	cmp	r3, r2
 80113b2:	bf28      	it	cs
 80113b4:	4613      	movcs	r3, r2
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80113ba:	893b      	ldrh	r3, [r7, #8]
 80113bc:	461a      	mov	r2, r3
 80113be:	68f9      	ldr	r1, [r7, #12]
 80113c0:	6878      	ldr	r0, [r7, #4]
 80113c2:	f000 fb6a 	bl	8011a9a <USBD_CtlSendData>
 80113c6:	e009      	b.n	80113dc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80113c8:	6839      	ldr	r1, [r7, #0]
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f000 f9e7 	bl	801179e <USBD_CtlError>
 80113d0:	e004      	b.n	80113dc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 fbbb 	bl	8011b4e <USBD_CtlSendStatus>
 80113d8:	e000      	b.n	80113dc <USBD_GetDescriptor+0x2cc>
    return;
 80113da:	bf00      	nop
  }
}
 80113dc:	3710      	adds	r7, #16
 80113de:	46bd      	mov	sp, r7
 80113e0:	bd80      	pop	{r7, pc}
 80113e2:	bf00      	nop

080113e4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b084      	sub	sp, #16
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
 80113ec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	889b      	ldrh	r3, [r3, #4]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d131      	bne.n	801145a <USBD_SetAddress+0x76>
 80113f6:	683b      	ldr	r3, [r7, #0]
 80113f8:	88db      	ldrh	r3, [r3, #6]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d12d      	bne.n	801145a <USBD_SetAddress+0x76>
 80113fe:	683b      	ldr	r3, [r7, #0]
 8011400:	885b      	ldrh	r3, [r3, #2]
 8011402:	2b7f      	cmp	r3, #127	@ 0x7f
 8011404:	d829      	bhi.n	801145a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	885b      	ldrh	r3, [r3, #2]
 801140a:	b2db      	uxtb	r3, r3
 801140c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011410:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011418:	b2db      	uxtb	r3, r3
 801141a:	2b03      	cmp	r3, #3
 801141c:	d104      	bne.n	8011428 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801141e:	6839      	ldr	r1, [r7, #0]
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f000 f9bc 	bl	801179e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011426:	e01d      	b.n	8011464 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	7bfa      	ldrb	r2, [r7, #15]
 801142c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011430:	7bfb      	ldrb	r3, [r7, #15]
 8011432:	4619      	mov	r1, r3
 8011434:	6878      	ldr	r0, [r7, #4]
 8011436:	f7fe ffcd 	bl	80103d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f000 fb87 	bl	8011b4e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011440:	7bfb      	ldrb	r3, [r7, #15]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d004      	beq.n	8011450 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2202      	movs	r2, #2
 801144a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801144e:	e009      	b.n	8011464 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	2201      	movs	r2, #1
 8011454:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011458:	e004      	b.n	8011464 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801145a:	6839      	ldr	r1, [r7, #0]
 801145c:	6878      	ldr	r0, [r7, #4]
 801145e:	f000 f99e 	bl	801179e <USBD_CtlError>
  }
}
 8011462:	bf00      	nop
 8011464:	bf00      	nop
 8011466:	3710      	adds	r7, #16
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}

0801146c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801146c:	b580      	push	{r7, lr}
 801146e:	b084      	sub	sp, #16
 8011470:	af00      	add	r7, sp, #0
 8011472:	6078      	str	r0, [r7, #4]
 8011474:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011476:	2300      	movs	r3, #0
 8011478:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	885b      	ldrh	r3, [r3, #2]
 801147e:	b2da      	uxtb	r2, r3
 8011480:	4b4e      	ldr	r3, [pc, #312]	@ (80115bc <USBD_SetConfig+0x150>)
 8011482:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011484:	4b4d      	ldr	r3, [pc, #308]	@ (80115bc <USBD_SetConfig+0x150>)
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	2b01      	cmp	r3, #1
 801148a:	d905      	bls.n	8011498 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801148c:	6839      	ldr	r1, [r7, #0]
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f000 f985 	bl	801179e <USBD_CtlError>
    return USBD_FAIL;
 8011494:	2303      	movs	r3, #3
 8011496:	e08c      	b.n	80115b2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801149e:	b2db      	uxtb	r3, r3
 80114a0:	2b02      	cmp	r3, #2
 80114a2:	d002      	beq.n	80114aa <USBD_SetConfig+0x3e>
 80114a4:	2b03      	cmp	r3, #3
 80114a6:	d029      	beq.n	80114fc <USBD_SetConfig+0x90>
 80114a8:	e075      	b.n	8011596 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80114aa:	4b44      	ldr	r3, [pc, #272]	@ (80115bc <USBD_SetConfig+0x150>)
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d020      	beq.n	80114f4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80114b2:	4b42      	ldr	r3, [pc, #264]	@ (80115bc <USBD_SetConfig+0x150>)
 80114b4:	781b      	ldrb	r3, [r3, #0]
 80114b6:	461a      	mov	r2, r3
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80114bc:	4b3f      	ldr	r3, [pc, #252]	@ (80115bc <USBD_SetConfig+0x150>)
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	4619      	mov	r1, r3
 80114c2:	6878      	ldr	r0, [r7, #4]
 80114c4:	f7ff f8a9 	bl	801061a <USBD_SetClassConfig>
 80114c8:	4603      	mov	r3, r0
 80114ca:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80114cc:	7bfb      	ldrb	r3, [r7, #15]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d008      	beq.n	80114e4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80114d2:	6839      	ldr	r1, [r7, #0]
 80114d4:	6878      	ldr	r0, [r7, #4]
 80114d6:	f000 f962 	bl	801179e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2202      	movs	r2, #2
 80114de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80114e2:	e065      	b.n	80115b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f000 fb32 	bl	8011b4e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	2203      	movs	r2, #3
 80114ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80114f2:	e05d      	b.n	80115b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f000 fb2a 	bl	8011b4e <USBD_CtlSendStatus>
      break;
 80114fa:	e059      	b.n	80115b0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80114fc:	4b2f      	ldr	r3, [pc, #188]	@ (80115bc <USBD_SetConfig+0x150>)
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d112      	bne.n	801152a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2202      	movs	r2, #2
 8011508:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801150c:	4b2b      	ldr	r3, [pc, #172]	@ (80115bc <USBD_SetConfig+0x150>)
 801150e:	781b      	ldrb	r3, [r3, #0]
 8011510:	461a      	mov	r2, r3
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011516:	4b29      	ldr	r3, [pc, #164]	@ (80115bc <USBD_SetConfig+0x150>)
 8011518:	781b      	ldrb	r3, [r3, #0]
 801151a:	4619      	mov	r1, r3
 801151c:	6878      	ldr	r0, [r7, #4]
 801151e:	f7ff f898 	bl	8010652 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f000 fb13 	bl	8011b4e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011528:	e042      	b.n	80115b0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801152a:	4b24      	ldr	r3, [pc, #144]	@ (80115bc <USBD_SetConfig+0x150>)
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	461a      	mov	r2, r3
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	685b      	ldr	r3, [r3, #4]
 8011534:	429a      	cmp	r2, r3
 8011536:	d02a      	beq.n	801158e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	685b      	ldr	r3, [r3, #4]
 801153c:	b2db      	uxtb	r3, r3
 801153e:	4619      	mov	r1, r3
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f7ff f886 	bl	8010652 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011546:	4b1d      	ldr	r3, [pc, #116]	@ (80115bc <USBD_SetConfig+0x150>)
 8011548:	781b      	ldrb	r3, [r3, #0]
 801154a:	461a      	mov	r2, r3
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011550:	4b1a      	ldr	r3, [pc, #104]	@ (80115bc <USBD_SetConfig+0x150>)
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	4619      	mov	r1, r3
 8011556:	6878      	ldr	r0, [r7, #4]
 8011558:	f7ff f85f 	bl	801061a <USBD_SetClassConfig>
 801155c:	4603      	mov	r3, r0
 801155e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011560:	7bfb      	ldrb	r3, [r7, #15]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d00f      	beq.n	8011586 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011566:	6839      	ldr	r1, [r7, #0]
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f000 f918 	bl	801179e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	685b      	ldr	r3, [r3, #4]
 8011572:	b2db      	uxtb	r3, r3
 8011574:	4619      	mov	r1, r3
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f7ff f86b 	bl	8010652 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2202      	movs	r2, #2
 8011580:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011584:	e014      	b.n	80115b0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f000 fae1 	bl	8011b4e <USBD_CtlSendStatus>
      break;
 801158c:	e010      	b.n	80115b0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f000 fadd 	bl	8011b4e <USBD_CtlSendStatus>
      break;
 8011594:	e00c      	b.n	80115b0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011596:	6839      	ldr	r1, [r7, #0]
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f000 f900 	bl	801179e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801159e:	4b07      	ldr	r3, [pc, #28]	@ (80115bc <USBD_SetConfig+0x150>)
 80115a0:	781b      	ldrb	r3, [r3, #0]
 80115a2:	4619      	mov	r1, r3
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f7ff f854 	bl	8010652 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80115aa:	2303      	movs	r3, #3
 80115ac:	73fb      	strb	r3, [r7, #15]
      break;
 80115ae:	bf00      	nop
  }

  return ret;
 80115b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80115b2:	4618      	mov	r0, r3
 80115b4:	3710      	adds	r7, #16
 80115b6:	46bd      	mov	sp, r7
 80115b8:	bd80      	pop	{r7, pc}
 80115ba:	bf00      	nop
 80115bc:	200111a4 	.word	0x200111a4

080115c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b082      	sub	sp, #8
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80115ca:	683b      	ldr	r3, [r7, #0]
 80115cc:	88db      	ldrh	r3, [r3, #6]
 80115ce:	2b01      	cmp	r3, #1
 80115d0:	d004      	beq.n	80115dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80115d2:	6839      	ldr	r1, [r7, #0]
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f000 f8e2 	bl	801179e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80115da:	e023      	b.n	8011624 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80115e2:	b2db      	uxtb	r3, r3
 80115e4:	2b02      	cmp	r3, #2
 80115e6:	dc02      	bgt.n	80115ee <USBD_GetConfig+0x2e>
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	dc03      	bgt.n	80115f4 <USBD_GetConfig+0x34>
 80115ec:	e015      	b.n	801161a <USBD_GetConfig+0x5a>
 80115ee:	2b03      	cmp	r3, #3
 80115f0:	d00b      	beq.n	801160a <USBD_GetConfig+0x4a>
 80115f2:	e012      	b.n	801161a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2200      	movs	r2, #0
 80115f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	3308      	adds	r3, #8
 80115fe:	2201      	movs	r2, #1
 8011600:	4619      	mov	r1, r3
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 fa49 	bl	8011a9a <USBD_CtlSendData>
        break;
 8011608:	e00c      	b.n	8011624 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	3304      	adds	r3, #4
 801160e:	2201      	movs	r2, #1
 8011610:	4619      	mov	r1, r3
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f000 fa41 	bl	8011a9a <USBD_CtlSendData>
        break;
 8011618:	e004      	b.n	8011624 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801161a:	6839      	ldr	r1, [r7, #0]
 801161c:	6878      	ldr	r0, [r7, #4]
 801161e:	f000 f8be 	bl	801179e <USBD_CtlError>
        break;
 8011622:	bf00      	nop
}
 8011624:	bf00      	nop
 8011626:	3708      	adds	r7, #8
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b082      	sub	sp, #8
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
 8011634:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801163c:	b2db      	uxtb	r3, r3
 801163e:	3b01      	subs	r3, #1
 8011640:	2b02      	cmp	r3, #2
 8011642:	d81e      	bhi.n	8011682 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011644:	683b      	ldr	r3, [r7, #0]
 8011646:	88db      	ldrh	r3, [r3, #6]
 8011648:	2b02      	cmp	r3, #2
 801164a:	d004      	beq.n	8011656 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801164c:	6839      	ldr	r1, [r7, #0]
 801164e:	6878      	ldr	r0, [r7, #4]
 8011650:	f000 f8a5 	bl	801179e <USBD_CtlError>
        break;
 8011654:	e01a      	b.n	801168c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	2201      	movs	r2, #1
 801165a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8011662:	2b00      	cmp	r3, #0
 8011664:	d005      	beq.n	8011672 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	68db      	ldr	r3, [r3, #12]
 801166a:	f043 0202 	orr.w	r2, r3, #2
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	330c      	adds	r3, #12
 8011676:	2202      	movs	r2, #2
 8011678:	4619      	mov	r1, r3
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f000 fa0d 	bl	8011a9a <USBD_CtlSendData>
      break;
 8011680:	e004      	b.n	801168c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011682:	6839      	ldr	r1, [r7, #0]
 8011684:	6878      	ldr	r0, [r7, #4]
 8011686:	f000 f88a 	bl	801179e <USBD_CtlError>
      break;
 801168a:	bf00      	nop
  }
}
 801168c:	bf00      	nop
 801168e:	3708      	adds	r7, #8
 8011690:	46bd      	mov	sp, r7
 8011692:	bd80      	pop	{r7, pc}

08011694 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
 801169c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	885b      	ldrh	r3, [r3, #2]
 80116a2:	2b01      	cmp	r3, #1
 80116a4:	d107      	bne.n	80116b6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2201      	movs	r2, #1
 80116aa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80116ae:	6878      	ldr	r0, [r7, #4]
 80116b0:	f000 fa4d 	bl	8011b4e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80116b4:	e013      	b.n	80116de <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	885b      	ldrh	r3, [r3, #2]
 80116ba:	2b02      	cmp	r3, #2
 80116bc:	d10b      	bne.n	80116d6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	889b      	ldrh	r3, [r3, #4]
 80116c2:	0a1b      	lsrs	r3, r3, #8
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	b2da      	uxtb	r2, r3
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f000 fa3d 	bl	8011b4e <USBD_CtlSendStatus>
}
 80116d4:	e003      	b.n	80116de <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80116d6:	6839      	ldr	r1, [r7, #0]
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f000 f860 	bl	801179e <USBD_CtlError>
}
 80116de:	bf00      	nop
 80116e0:	3708      	adds	r7, #8
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}

080116e6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80116e6:	b580      	push	{r7, lr}
 80116e8:	b082      	sub	sp, #8
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	6078      	str	r0, [r7, #4]
 80116ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116f6:	b2db      	uxtb	r3, r3
 80116f8:	3b01      	subs	r3, #1
 80116fa:	2b02      	cmp	r3, #2
 80116fc:	d80b      	bhi.n	8011716 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	885b      	ldrh	r3, [r3, #2]
 8011702:	2b01      	cmp	r3, #1
 8011704:	d10c      	bne.n	8011720 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	2200      	movs	r2, #0
 801170a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f000 fa1d 	bl	8011b4e <USBD_CtlSendStatus>
      }
      break;
 8011714:	e004      	b.n	8011720 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011716:	6839      	ldr	r1, [r7, #0]
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f000 f840 	bl	801179e <USBD_CtlError>
      break;
 801171e:	e000      	b.n	8011722 <USBD_ClrFeature+0x3c>
      break;
 8011720:	bf00      	nop
  }
}
 8011722:	bf00      	nop
 8011724:	3708      	adds	r7, #8
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}

0801172a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801172a:	b580      	push	{r7, lr}
 801172c:	b084      	sub	sp, #16
 801172e:	af00      	add	r7, sp, #0
 8011730:	6078      	str	r0, [r7, #4]
 8011732:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011734:	683b      	ldr	r3, [r7, #0]
 8011736:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	781a      	ldrb	r2, [r3, #0]
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	3301      	adds	r3, #1
 8011744:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	781a      	ldrb	r2, [r3, #0]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	3301      	adds	r3, #1
 8011752:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011754:	68f8      	ldr	r0, [r7, #12]
 8011756:	f7ff fa40 	bl	8010bda <SWAPBYTE>
 801175a:	4603      	mov	r3, r0
 801175c:	461a      	mov	r2, r3
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	3301      	adds	r3, #1
 8011766:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	3301      	adds	r3, #1
 801176c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801176e:	68f8      	ldr	r0, [r7, #12]
 8011770:	f7ff fa33 	bl	8010bda <SWAPBYTE>
 8011774:	4603      	mov	r3, r0
 8011776:	461a      	mov	r2, r3
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	3301      	adds	r3, #1
 8011780:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	3301      	adds	r3, #1
 8011786:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011788:	68f8      	ldr	r0, [r7, #12]
 801178a:	f7ff fa26 	bl	8010bda <SWAPBYTE>
 801178e:	4603      	mov	r3, r0
 8011790:	461a      	mov	r2, r3
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	80da      	strh	r2, [r3, #6]
}
 8011796:	bf00      	nop
 8011798:	3710      	adds	r7, #16
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801179e:	b580      	push	{r7, lr}
 80117a0:	b082      	sub	sp, #8
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	6078      	str	r0, [r7, #4]
 80117a6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80117a8:	2180      	movs	r1, #128	@ 0x80
 80117aa:	6878      	ldr	r0, [r7, #4]
 80117ac:	f7fe fdb4 	bl	8010318 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80117b0:	2100      	movs	r1, #0
 80117b2:	6878      	ldr	r0, [r7, #4]
 80117b4:	f7fe fdb0 	bl	8010318 <USBD_LL_StallEP>
}
 80117b8:	bf00      	nop
 80117ba:	3708      	adds	r7, #8
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd80      	pop	{r7, pc}

080117c0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b086      	sub	sp, #24
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	60f8      	str	r0, [r7, #12]
 80117c8:	60b9      	str	r1, [r7, #8]
 80117ca:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80117cc:	2300      	movs	r3, #0
 80117ce:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d036      	beq.n	8011844 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80117da:	6938      	ldr	r0, [r7, #16]
 80117dc:	f000 f836 	bl	801184c <USBD_GetLen>
 80117e0:	4603      	mov	r3, r0
 80117e2:	3301      	adds	r3, #1
 80117e4:	b29b      	uxth	r3, r3
 80117e6:	005b      	lsls	r3, r3, #1
 80117e8:	b29a      	uxth	r2, r3
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80117ee:	7dfb      	ldrb	r3, [r7, #23]
 80117f0:	68ba      	ldr	r2, [r7, #8]
 80117f2:	4413      	add	r3, r2
 80117f4:	687a      	ldr	r2, [r7, #4]
 80117f6:	7812      	ldrb	r2, [r2, #0]
 80117f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80117fa:	7dfb      	ldrb	r3, [r7, #23]
 80117fc:	3301      	adds	r3, #1
 80117fe:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011800:	7dfb      	ldrb	r3, [r7, #23]
 8011802:	68ba      	ldr	r2, [r7, #8]
 8011804:	4413      	add	r3, r2
 8011806:	2203      	movs	r2, #3
 8011808:	701a      	strb	r2, [r3, #0]
  idx++;
 801180a:	7dfb      	ldrb	r3, [r7, #23]
 801180c:	3301      	adds	r3, #1
 801180e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011810:	e013      	b.n	801183a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011812:	7dfb      	ldrb	r3, [r7, #23]
 8011814:	68ba      	ldr	r2, [r7, #8]
 8011816:	4413      	add	r3, r2
 8011818:	693a      	ldr	r2, [r7, #16]
 801181a:	7812      	ldrb	r2, [r2, #0]
 801181c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	3301      	adds	r3, #1
 8011822:	613b      	str	r3, [r7, #16]
    idx++;
 8011824:	7dfb      	ldrb	r3, [r7, #23]
 8011826:	3301      	adds	r3, #1
 8011828:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801182a:	7dfb      	ldrb	r3, [r7, #23]
 801182c:	68ba      	ldr	r2, [r7, #8]
 801182e:	4413      	add	r3, r2
 8011830:	2200      	movs	r2, #0
 8011832:	701a      	strb	r2, [r3, #0]
    idx++;
 8011834:	7dfb      	ldrb	r3, [r7, #23]
 8011836:	3301      	adds	r3, #1
 8011838:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801183a:	693b      	ldr	r3, [r7, #16]
 801183c:	781b      	ldrb	r3, [r3, #0]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d1e7      	bne.n	8011812 <USBD_GetString+0x52>
 8011842:	e000      	b.n	8011846 <USBD_GetString+0x86>
    return;
 8011844:	bf00      	nop
  }
}
 8011846:	3718      	adds	r7, #24
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801184c:	b480      	push	{r7}
 801184e:	b085      	sub	sp, #20
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011854:	2300      	movs	r3, #0
 8011856:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801185c:	e005      	b.n	801186a <USBD_GetLen+0x1e>
  {
    len++;
 801185e:	7bfb      	ldrb	r3, [r7, #15]
 8011860:	3301      	adds	r3, #1
 8011862:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	3301      	adds	r3, #1
 8011868:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801186a:	68bb      	ldr	r3, [r7, #8]
 801186c:	781b      	ldrb	r3, [r3, #0]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d1f5      	bne.n	801185e <USBD_GetLen+0x12>
  }

  return len;
 8011872:	7bfb      	ldrb	r3, [r7, #15]
}
 8011874:	4618      	mov	r0, r3
 8011876:	3714      	adds	r7, #20
 8011878:	46bd      	mov	sp, r7
 801187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187e:	4770      	bx	lr

08011880 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011880:	b480      	push	{r7}
 8011882:	b083      	sub	sp, #12
 8011884:	af00      	add	r7, sp, #0
 8011886:	4603      	mov	r3, r0
 8011888:	6039      	str	r1, [r7, #0]
 801188a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	2212      	movs	r2, #18
 8011890:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 8011892:	4b03      	ldr	r3, [pc, #12]	@ (80118a0 <USBD_Class_DeviceDescriptor+0x20>)
}
 8011894:	4618      	mov	r0, r3
 8011896:	370c      	adds	r7, #12
 8011898:	46bd      	mov	sp, r7
 801189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189e:	4770      	bx	lr
 80118a0:	200000f0 	.word	0x200000f0

080118a4 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b083      	sub	sp, #12
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	4603      	mov	r3, r0
 80118ac:	6039      	str	r1, [r7, #0]
 80118ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	2204      	movs	r2, #4
 80118b4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 80118b6:	4b03      	ldr	r3, [pc, #12]	@ (80118c4 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	370c      	adds	r7, #12
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr
 80118c4:	20000104 	.word	0x20000104

080118c8 <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b082      	sub	sp, #8
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	4603      	mov	r3, r0
 80118d0:	6039      	str	r1, [r7, #0]
 80118d2:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 80118d4:	79fb      	ldrb	r3, [r7, #7]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d105      	bne.n	80118e6 <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 80118da:	683a      	ldr	r2, [r7, #0]
 80118dc:	4907      	ldr	r1, [pc, #28]	@ (80118fc <USBD_Class_ProductStrDescriptor+0x34>)
 80118de:	4808      	ldr	r0, [pc, #32]	@ (8011900 <USBD_Class_ProductStrDescriptor+0x38>)
 80118e0:	f7ff ff6e 	bl	80117c0 <USBD_GetString>
 80118e4:	e004      	b.n	80118f0 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 80118e6:	683a      	ldr	r2, [r7, #0]
 80118e8:	4904      	ldr	r1, [pc, #16]	@ (80118fc <USBD_Class_ProductStrDescriptor+0x34>)
 80118ea:	4805      	ldr	r0, [pc, #20]	@ (8011900 <USBD_Class_ProductStrDescriptor+0x38>)
 80118ec:	f7ff ff68 	bl	80117c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80118f0:	4b02      	ldr	r3, [pc, #8]	@ (80118fc <USBD_Class_ProductStrDescriptor+0x34>)
}
 80118f2:	4618      	mov	r0, r3
 80118f4:	3708      	adds	r7, #8
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
 80118fa:	bf00      	nop
 80118fc:	200111a8 	.word	0x200111a8
 8011900:	08013b08 	.word	0x08013b08

08011904 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b082      	sub	sp, #8
 8011908:	af00      	add	r7, sp, #0
 801190a:	4603      	mov	r3, r0
 801190c:	6039      	str	r1, [r7, #0]
 801190e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011910:	683a      	ldr	r2, [r7, #0]
 8011912:	4904      	ldr	r1, [pc, #16]	@ (8011924 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 8011914:	4804      	ldr	r0, [pc, #16]	@ (8011928 <USBD_Class_ManufacturerStrDescriptor+0x24>)
 8011916:	f7ff ff53 	bl	80117c0 <USBD_GetString>
  return USBD_StrDesc;
 801191a:	4b02      	ldr	r3, [pc, #8]	@ (8011924 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 801191c:	4618      	mov	r0, r3
 801191e:	3708      	adds	r7, #8
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}
 8011924:	200111a8 	.word	0x200111a8
 8011928:	08013b20 	.word	0x08013b20

0801192c <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	4603      	mov	r3, r0
 8011934:	6039      	str	r1, [r7, #0]
 8011936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	221a      	movs	r2, #26
 801193c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 801193e:	f000 f843 	bl	80119c8 <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 8011942:	4b02      	ldr	r3, [pc, #8]	@ (801194c <USBD_Class_SerialStrDescriptor+0x20>)
}
 8011944:	4618      	mov	r0, r3
 8011946:	3708      	adds	r7, #8
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}
 801194c:	20000108 	.word	0x20000108

08011950 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b082      	sub	sp, #8
 8011954:	af00      	add	r7, sp, #0
 8011956:	4603      	mov	r3, r0
 8011958:	6039      	str	r1, [r7, #0]
 801195a:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 801195c:	79fb      	ldrb	r3, [r7, #7]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d105      	bne.n	801196e <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8011962:	683a      	ldr	r2, [r7, #0]
 8011964:	4907      	ldr	r1, [pc, #28]	@ (8011984 <USBD_Class_ConfigStrDescriptor+0x34>)
 8011966:	4808      	ldr	r0, [pc, #32]	@ (8011988 <USBD_Class_ConfigStrDescriptor+0x38>)
 8011968:	f7ff ff2a 	bl	80117c0 <USBD_GetString>
 801196c:	e004      	b.n	8011978 <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 801196e:	683a      	ldr	r2, [r7, #0]
 8011970:	4904      	ldr	r1, [pc, #16]	@ (8011984 <USBD_Class_ConfigStrDescriptor+0x34>)
 8011972:	4805      	ldr	r0, [pc, #20]	@ (8011988 <USBD_Class_ConfigStrDescriptor+0x38>)
 8011974:	f7ff ff24 	bl	80117c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011978:	4b02      	ldr	r3, [pc, #8]	@ (8011984 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 801197a:	4618      	mov	r0, r3
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
 8011982:	bf00      	nop
 8011984:	200111a8 	.word	0x200111a8
 8011988:	08013b34 	.word	0x08013b34

0801198c <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	4603      	mov	r3, r0
 8011994:	6039      	str	r1, [r7, #0]
 8011996:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8011998:	79fb      	ldrb	r3, [r7, #7]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d105      	bne.n	80119aa <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 801199e:	683a      	ldr	r2, [r7, #0]
 80119a0:	4907      	ldr	r1, [pc, #28]	@ (80119c0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 80119a2:	4808      	ldr	r0, [pc, #32]	@ (80119c4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 80119a4:	f7ff ff0c 	bl	80117c0 <USBD_GetString>
 80119a8:	e004      	b.n	80119b4 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 80119aa:	683a      	ldr	r2, [r7, #0]
 80119ac:	4904      	ldr	r1, [pc, #16]	@ (80119c0 <USBD_Class_InterfaceStrDescriptor+0x34>)
 80119ae:	4805      	ldr	r0, [pc, #20]	@ (80119c4 <USBD_Class_InterfaceStrDescriptor+0x38>)
 80119b0:	f7ff ff06 	bl	80117c0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80119b4:	4b02      	ldr	r3, [pc, #8]	@ (80119c0 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3708      	adds	r7, #8
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}
 80119be:	bf00      	nop
 80119c0:	200111a8 	.word	0x200111a8
 80119c4:	08013b40 	.word	0x08013b40

080119c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 80119ce:	4b0f      	ldr	r3, [pc, #60]	@ (8011a0c <Get_SerialNum+0x44>)
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 80119d4:	4b0e      	ldr	r3, [pc, #56]	@ (8011a10 <Get_SerialNum+0x48>)
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 80119da:	4b0e      	ldr	r3, [pc, #56]	@ (8011a14 <Get_SerialNum+0x4c>)
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80119e0:	68fa      	ldr	r2, [r7, #12]
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	4413      	add	r3, r2
 80119e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d009      	beq.n	8011a02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 80119ee:	2208      	movs	r2, #8
 80119f0:	4909      	ldr	r1, [pc, #36]	@ (8011a18 <Get_SerialNum+0x50>)
 80119f2:	68f8      	ldr	r0, [r7, #12]
 80119f4:	f000 f814 	bl	8011a20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 80119f8:	2204      	movs	r2, #4
 80119fa:	4908      	ldr	r1, [pc, #32]	@ (8011a1c <Get_SerialNum+0x54>)
 80119fc:	68b8      	ldr	r0, [r7, #8]
 80119fe:	f000 f80f 	bl	8011a20 <IntToUnicode>
  }
}
 8011a02:	bf00      	nop
 8011a04:	3710      	adds	r7, #16
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	08fff800 	.word	0x08fff800
 8011a10:	08fff804 	.word	0x08fff804
 8011a14:	08fff808 	.word	0x08fff808
 8011a18:	2000010a 	.word	0x2000010a
 8011a1c:	2000011a 	.word	0x2000011a

08011a20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b087      	sub	sp, #28
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	4613      	mov	r3, r2
 8011a2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 8011a32:	2300      	movs	r3, #0
 8011a34:	75fb      	strb	r3, [r7, #23]
 8011a36:	e025      	b.n	8011a84 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	0f1b      	lsrs	r3, r3, #28
 8011a3c:	2b09      	cmp	r3, #9
 8011a3e:	d80a      	bhi.n	8011a56 <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	0f1b      	lsrs	r3, r3, #28
 8011a44:	b2da      	uxtb	r2, r3
 8011a46:	7dfb      	ldrb	r3, [r7, #23]
 8011a48:	005b      	lsls	r3, r3, #1
 8011a4a:	68b9      	ldr	r1, [r7, #8]
 8011a4c:	440b      	add	r3, r1
 8011a4e:	3230      	adds	r2, #48	@ 0x30
 8011a50:	b2d2      	uxtb	r2, r2
 8011a52:	701a      	strb	r2, [r3, #0]
 8011a54:	e009      	b.n	8011a6a <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	0f1b      	lsrs	r3, r3, #28
 8011a5a:	b2da      	uxtb	r2, r3
 8011a5c:	7dfb      	ldrb	r3, [r7, #23]
 8011a5e:	005b      	lsls	r3, r3, #1
 8011a60:	68b9      	ldr	r1, [r7, #8]
 8011a62:	440b      	add	r3, r1
 8011a64:	3237      	adds	r2, #55	@ 0x37
 8011a66:	b2d2      	uxtb	r2, r2
 8011a68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	011b      	lsls	r3, r3, #4
 8011a6e:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8011a70:	7dfb      	ldrb	r3, [r7, #23]
 8011a72:	005b      	lsls	r3, r3, #1
 8011a74:	3301      	adds	r3, #1
 8011a76:	68ba      	ldr	r2, [r7, #8]
 8011a78:	4413      	add	r3, r2
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 8011a7e:	7dfb      	ldrb	r3, [r7, #23]
 8011a80:	3301      	adds	r3, #1
 8011a82:	75fb      	strb	r3, [r7, #23]
 8011a84:	7dfa      	ldrb	r2, [r7, #23]
 8011a86:	79fb      	ldrb	r3, [r7, #7]
 8011a88:	429a      	cmp	r2, r3
 8011a8a:	d3d5      	bcc.n	8011a38 <IntToUnicode+0x18>
  }
}
 8011a8c:	bf00      	nop
 8011a8e:	bf00      	nop
 8011a90:	371c      	adds	r7, #28
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr

08011a9a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011a9a:	b580      	push	{r7, lr}
 8011a9c:	b084      	sub	sp, #16
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	60f8      	str	r0, [r7, #12]
 8011aa2:	60b9      	str	r1, [r7, #8]
 8011aa4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	2202      	movs	r2, #2
 8011aaa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	687a      	ldr	r2, [r7, #4]
 8011ab2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	687a      	ldr	r2, [r7, #4]
 8011ab8:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	68ba      	ldr	r2, [r7, #8]
 8011abe:	2100      	movs	r1, #0
 8011ac0:	68f8      	ldr	r0, [r7, #12]
 8011ac2:	f7fe fca0 	bl	8010406 <USBD_LL_Transmit>

  return USBD_OK;
 8011ac6:	2300      	movs	r3, #0
}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3710      	adds	r7, #16
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b084      	sub	sp, #16
 8011ad4:	af00      	add	r7, sp, #0
 8011ad6:	60f8      	str	r0, [r7, #12]
 8011ad8:	60b9      	str	r1, [r7, #8]
 8011ada:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	68ba      	ldr	r2, [r7, #8]
 8011ae0:	2100      	movs	r1, #0
 8011ae2:	68f8      	ldr	r0, [r7, #12]
 8011ae4:	f7fe fc8f 	bl	8010406 <USBD_LL_Transmit>

  return USBD_OK;
 8011ae8:	2300      	movs	r3, #0
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3710      	adds	r7, #16
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}

08011af2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011af2:	b580      	push	{r7, lr}
 8011af4:	b084      	sub	sp, #16
 8011af6:	af00      	add	r7, sp, #0
 8011af8:	60f8      	str	r0, [r7, #12]
 8011afa:	60b9      	str	r1, [r7, #8]
 8011afc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	2203      	movs	r2, #3
 8011b02:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	687a      	ldr	r2, [r7, #4]
 8011b0a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	687a      	ldr	r2, [r7, #4]
 8011b12:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	68ba      	ldr	r2, [r7, #8]
 8011b1a:	2100      	movs	r1, #0
 8011b1c:	68f8      	ldr	r0, [r7, #12]
 8011b1e:	f7fe fc8d 	bl	801043c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011b22:	2300      	movs	r3, #0
}
 8011b24:	4618      	mov	r0, r3
 8011b26:	3710      	adds	r7, #16
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}

08011b2c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b084      	sub	sp, #16
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	60f8      	str	r0, [r7, #12]
 8011b34:	60b9      	str	r1, [r7, #8]
 8011b36:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	68ba      	ldr	r2, [r7, #8]
 8011b3c:	2100      	movs	r1, #0
 8011b3e:	68f8      	ldr	r0, [r7, #12]
 8011b40:	f7fe fc7c 	bl	801043c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011b44:	2300      	movs	r3, #0
}
 8011b46:	4618      	mov	r0, r3
 8011b48:	3710      	adds	r7, #16
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd80      	pop	{r7, pc}

08011b4e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011b4e:	b580      	push	{r7, lr}
 8011b50:	b082      	sub	sp, #8
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	2204      	movs	r2, #4
 8011b5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011b5e:	2300      	movs	r3, #0
 8011b60:	2200      	movs	r2, #0
 8011b62:	2100      	movs	r1, #0
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f7fe fc4e 	bl	8010406 <USBD_LL_Transmit>

  return USBD_OK;
 8011b6a:	2300      	movs	r3, #0
}
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	3708      	adds	r7, #8
 8011b70:	46bd      	mov	sp, r7
 8011b72:	bd80      	pop	{r7, pc}

08011b74 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b082      	sub	sp, #8
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	2205      	movs	r2, #5
 8011b80:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011b84:	2300      	movs	r3, #0
 8011b86:	2200      	movs	r2, #0
 8011b88:	2100      	movs	r1, #0
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f7fe fc56 	bl	801043c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011b90:	2300      	movs	r3, #0
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3708      	adds	r7, #8
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
	...

08011b9c <std>:
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	b510      	push	{r4, lr}
 8011ba0:	4604      	mov	r4, r0
 8011ba2:	6083      	str	r3, [r0, #8]
 8011ba4:	8181      	strh	r1, [r0, #12]
 8011ba6:	4619      	mov	r1, r3
 8011ba8:	6643      	str	r3, [r0, #100]	@ 0x64
 8011baa:	81c2      	strh	r2, [r0, #14]
 8011bac:	2208      	movs	r2, #8
 8011bae:	6183      	str	r3, [r0, #24]
 8011bb0:	e9c0 3300 	strd	r3, r3, [r0]
 8011bb4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011bb8:	305c      	adds	r0, #92	@ 0x5c
 8011bba:	f000 f993 	bl	8011ee4 <memset>
 8011bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8011bf4 <std+0x58>)
 8011bc0:	6224      	str	r4, [r4, #32]
 8011bc2:	6263      	str	r3, [r4, #36]	@ 0x24
 8011bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8011bf8 <std+0x5c>)
 8011bc6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8011bfc <std+0x60>)
 8011bca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011bcc:	4b0c      	ldr	r3, [pc, #48]	@ (8011c00 <std+0x64>)
 8011bce:	6323      	str	r3, [r4, #48]	@ 0x30
 8011bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8011c04 <std+0x68>)
 8011bd2:	429c      	cmp	r4, r3
 8011bd4:	d006      	beq.n	8011be4 <std+0x48>
 8011bd6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011bda:	4294      	cmp	r4, r2
 8011bdc:	d002      	beq.n	8011be4 <std+0x48>
 8011bde:	33d0      	adds	r3, #208	@ 0xd0
 8011be0:	429c      	cmp	r4, r3
 8011be2:	d105      	bne.n	8011bf0 <std+0x54>
 8011be4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bec:	f000 b9f2 	b.w	8011fd4 <__retarget_lock_init_recursive>
 8011bf0:	bd10      	pop	{r4, pc}
 8011bf2:	bf00      	nop
 8011bf4:	08011ded 	.word	0x08011ded
 8011bf8:	08011e0f 	.word	0x08011e0f
 8011bfc:	08011e47 	.word	0x08011e47
 8011c00:	08011e6b 	.word	0x08011e6b
 8011c04:	200112a8 	.word	0x200112a8

08011c08 <stdio_exit_handler>:
 8011c08:	4a02      	ldr	r2, [pc, #8]	@ (8011c14 <stdio_exit_handler+0xc>)
 8011c0a:	4903      	ldr	r1, [pc, #12]	@ (8011c18 <stdio_exit_handler+0x10>)
 8011c0c:	4803      	ldr	r0, [pc, #12]	@ (8011c1c <stdio_exit_handler+0x14>)
 8011c0e:	f000 b869 	b.w	8011ce4 <_fwalk_sglue>
 8011c12:	bf00      	nop
 8011c14:	20000124 	.word	0x20000124
 8011c18:	08012b45 	.word	0x08012b45
 8011c1c:	20000134 	.word	0x20000134

08011c20 <cleanup_stdio>:
 8011c20:	6841      	ldr	r1, [r0, #4]
 8011c22:	4b0c      	ldr	r3, [pc, #48]	@ (8011c54 <cleanup_stdio+0x34>)
 8011c24:	4299      	cmp	r1, r3
 8011c26:	b510      	push	{r4, lr}
 8011c28:	4604      	mov	r4, r0
 8011c2a:	d001      	beq.n	8011c30 <cleanup_stdio+0x10>
 8011c2c:	f000 ff8a 	bl	8012b44 <_fflush_r>
 8011c30:	68a1      	ldr	r1, [r4, #8]
 8011c32:	4b09      	ldr	r3, [pc, #36]	@ (8011c58 <cleanup_stdio+0x38>)
 8011c34:	4299      	cmp	r1, r3
 8011c36:	d002      	beq.n	8011c3e <cleanup_stdio+0x1e>
 8011c38:	4620      	mov	r0, r4
 8011c3a:	f000 ff83 	bl	8012b44 <_fflush_r>
 8011c3e:	68e1      	ldr	r1, [r4, #12]
 8011c40:	4b06      	ldr	r3, [pc, #24]	@ (8011c5c <cleanup_stdio+0x3c>)
 8011c42:	4299      	cmp	r1, r3
 8011c44:	d004      	beq.n	8011c50 <cleanup_stdio+0x30>
 8011c46:	4620      	mov	r0, r4
 8011c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c4c:	f000 bf7a 	b.w	8012b44 <_fflush_r>
 8011c50:	bd10      	pop	{r4, pc}
 8011c52:	bf00      	nop
 8011c54:	200112a8 	.word	0x200112a8
 8011c58:	20011310 	.word	0x20011310
 8011c5c:	20011378 	.word	0x20011378

08011c60 <global_stdio_init.part.0>:
 8011c60:	b510      	push	{r4, lr}
 8011c62:	4b0b      	ldr	r3, [pc, #44]	@ (8011c90 <global_stdio_init.part.0+0x30>)
 8011c64:	2104      	movs	r1, #4
 8011c66:	4c0b      	ldr	r4, [pc, #44]	@ (8011c94 <global_stdio_init.part.0+0x34>)
 8011c68:	4a0b      	ldr	r2, [pc, #44]	@ (8011c98 <global_stdio_init.part.0+0x38>)
 8011c6a:	4620      	mov	r0, r4
 8011c6c:	601a      	str	r2, [r3, #0]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	f7ff ff94 	bl	8011b9c <std>
 8011c74:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011c78:	2201      	movs	r2, #1
 8011c7a:	2109      	movs	r1, #9
 8011c7c:	f7ff ff8e 	bl	8011b9c <std>
 8011c80:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011c84:	2202      	movs	r2, #2
 8011c86:	2112      	movs	r1, #18
 8011c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c8c:	f7ff bf86 	b.w	8011b9c <std>
 8011c90:	200113e0 	.word	0x200113e0
 8011c94:	200112a8 	.word	0x200112a8
 8011c98:	08011c09 	.word	0x08011c09

08011c9c <__sfp_lock_acquire>:
 8011c9c:	4801      	ldr	r0, [pc, #4]	@ (8011ca4 <__sfp_lock_acquire+0x8>)
 8011c9e:	f000 b99a 	b.w	8011fd6 <__retarget_lock_acquire_recursive>
 8011ca2:	bf00      	nop
 8011ca4:	200113e9 	.word	0x200113e9

08011ca8 <__sfp_lock_release>:
 8011ca8:	4801      	ldr	r0, [pc, #4]	@ (8011cb0 <__sfp_lock_release+0x8>)
 8011caa:	f000 b995 	b.w	8011fd8 <__retarget_lock_release_recursive>
 8011cae:	bf00      	nop
 8011cb0:	200113e9 	.word	0x200113e9

08011cb4 <__sinit>:
 8011cb4:	b510      	push	{r4, lr}
 8011cb6:	4604      	mov	r4, r0
 8011cb8:	f7ff fff0 	bl	8011c9c <__sfp_lock_acquire>
 8011cbc:	6a23      	ldr	r3, [r4, #32]
 8011cbe:	b11b      	cbz	r3, 8011cc8 <__sinit+0x14>
 8011cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cc4:	f7ff bff0 	b.w	8011ca8 <__sfp_lock_release>
 8011cc8:	4b04      	ldr	r3, [pc, #16]	@ (8011cdc <__sinit+0x28>)
 8011cca:	6223      	str	r3, [r4, #32]
 8011ccc:	4b04      	ldr	r3, [pc, #16]	@ (8011ce0 <__sinit+0x2c>)
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d1f5      	bne.n	8011cc0 <__sinit+0xc>
 8011cd4:	f7ff ffc4 	bl	8011c60 <global_stdio_init.part.0>
 8011cd8:	e7f2      	b.n	8011cc0 <__sinit+0xc>
 8011cda:	bf00      	nop
 8011cdc:	08011c21 	.word	0x08011c21
 8011ce0:	200113e0 	.word	0x200113e0

08011ce4 <_fwalk_sglue>:
 8011ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ce8:	4607      	mov	r7, r0
 8011cea:	4688      	mov	r8, r1
 8011cec:	4614      	mov	r4, r2
 8011cee:	2600      	movs	r6, #0
 8011cf0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011cf4:	f1b9 0901 	subs.w	r9, r9, #1
 8011cf8:	d505      	bpl.n	8011d06 <_fwalk_sglue+0x22>
 8011cfa:	6824      	ldr	r4, [r4, #0]
 8011cfc:	2c00      	cmp	r4, #0
 8011cfe:	d1f7      	bne.n	8011cf0 <_fwalk_sglue+0xc>
 8011d00:	4630      	mov	r0, r6
 8011d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d06:	89ab      	ldrh	r3, [r5, #12]
 8011d08:	2b01      	cmp	r3, #1
 8011d0a:	d907      	bls.n	8011d1c <_fwalk_sglue+0x38>
 8011d0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d10:	3301      	adds	r3, #1
 8011d12:	d003      	beq.n	8011d1c <_fwalk_sglue+0x38>
 8011d14:	4629      	mov	r1, r5
 8011d16:	4638      	mov	r0, r7
 8011d18:	47c0      	blx	r8
 8011d1a:	4306      	orrs	r6, r0
 8011d1c:	3568      	adds	r5, #104	@ 0x68
 8011d1e:	e7e9      	b.n	8011cf4 <_fwalk_sglue+0x10>

08011d20 <iprintf>:
 8011d20:	b40f      	push	{r0, r1, r2, r3}
 8011d22:	b507      	push	{r0, r1, r2, lr}
 8011d24:	4906      	ldr	r1, [pc, #24]	@ (8011d40 <iprintf+0x20>)
 8011d26:	ab04      	add	r3, sp, #16
 8011d28:	6808      	ldr	r0, [r1, #0]
 8011d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d2e:	6881      	ldr	r1, [r0, #8]
 8011d30:	9301      	str	r3, [sp, #4]
 8011d32:	f000 fbd9 	bl	80124e8 <_vfiprintf_r>
 8011d36:	b003      	add	sp, #12
 8011d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d3c:	b004      	add	sp, #16
 8011d3e:	4770      	bx	lr
 8011d40:	20000130 	.word	0x20000130

08011d44 <sniprintf>:
 8011d44:	b40c      	push	{r2, r3}
 8011d46:	4b18      	ldr	r3, [pc, #96]	@ (8011da8 <sniprintf+0x64>)
 8011d48:	b530      	push	{r4, r5, lr}
 8011d4a:	1e0c      	subs	r4, r1, #0
 8011d4c:	b09d      	sub	sp, #116	@ 0x74
 8011d4e:	681d      	ldr	r5, [r3, #0]
 8011d50:	da08      	bge.n	8011d64 <sniprintf+0x20>
 8011d52:	238b      	movs	r3, #139	@ 0x8b
 8011d54:	f04f 30ff 	mov.w	r0, #4294967295
 8011d58:	602b      	str	r3, [r5, #0]
 8011d5a:	b01d      	add	sp, #116	@ 0x74
 8011d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d60:	b002      	add	sp, #8
 8011d62:	4770      	bx	lr
 8011d64:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011d68:	9002      	str	r0, [sp, #8]
 8011d6a:	9006      	str	r0, [sp, #24]
 8011d6c:	a902      	add	r1, sp, #8
 8011d6e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011d72:	bf14      	ite	ne
 8011d74:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011d78:	4623      	moveq	r3, r4
 8011d7a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011d7c:	4628      	mov	r0, r5
 8011d7e:	9304      	str	r3, [sp, #16]
 8011d80:	9307      	str	r3, [sp, #28]
 8011d82:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011d86:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011d8a:	ab21      	add	r3, sp, #132	@ 0x84
 8011d8c:	9301      	str	r3, [sp, #4]
 8011d8e:	f000 fa85 	bl	801229c <_svfiprintf_r>
 8011d92:	1c43      	adds	r3, r0, #1
 8011d94:	bfbc      	itt	lt
 8011d96:	238b      	movlt	r3, #139	@ 0x8b
 8011d98:	602b      	strlt	r3, [r5, #0]
 8011d9a:	2c00      	cmp	r4, #0
 8011d9c:	d0dd      	beq.n	8011d5a <sniprintf+0x16>
 8011d9e:	9b02      	ldr	r3, [sp, #8]
 8011da0:	2200      	movs	r2, #0
 8011da2:	701a      	strb	r2, [r3, #0]
 8011da4:	e7d9      	b.n	8011d5a <sniprintf+0x16>
 8011da6:	bf00      	nop
 8011da8:	20000130 	.word	0x20000130

08011dac <siprintf>:
 8011dac:	b40e      	push	{r1, r2, r3}
 8011dae:	b500      	push	{lr}
 8011db0:	b09c      	sub	sp, #112	@ 0x70
 8011db2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011db6:	ab1d      	add	r3, sp, #116	@ 0x74
 8011db8:	9002      	str	r0, [sp, #8]
 8011dba:	9006      	str	r0, [sp, #24]
 8011dbc:	9107      	str	r1, [sp, #28]
 8011dbe:	9104      	str	r1, [sp, #16]
 8011dc0:	4808      	ldr	r0, [pc, #32]	@ (8011de4 <siprintf+0x38>)
 8011dc2:	4909      	ldr	r1, [pc, #36]	@ (8011de8 <siprintf+0x3c>)
 8011dc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011dc8:	9105      	str	r1, [sp, #20]
 8011dca:	a902      	add	r1, sp, #8
 8011dcc:	6800      	ldr	r0, [r0, #0]
 8011dce:	9301      	str	r3, [sp, #4]
 8011dd0:	f000 fa64 	bl	801229c <_svfiprintf_r>
 8011dd4:	9b02      	ldr	r3, [sp, #8]
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	701a      	strb	r2, [r3, #0]
 8011dda:	b01c      	add	sp, #112	@ 0x70
 8011ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011de0:	b003      	add	sp, #12
 8011de2:	4770      	bx	lr
 8011de4:	20000130 	.word	0x20000130
 8011de8:	ffff0208 	.word	0xffff0208

08011dec <__sread>:
 8011dec:	b510      	push	{r4, lr}
 8011dee:	460c      	mov	r4, r1
 8011df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011df4:	f000 f8a0 	bl	8011f38 <_read_r>
 8011df8:	2800      	cmp	r0, #0
 8011dfa:	bfab      	itete	ge
 8011dfc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8011e00:	181b      	addge	r3, r3, r0
 8011e02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011e06:	bfac      	ite	ge
 8011e08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011e0a:	81a3      	strhlt	r3, [r4, #12]
 8011e0c:	bd10      	pop	{r4, pc}

08011e0e <__swrite>:
 8011e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e12:	461f      	mov	r7, r3
 8011e14:	898b      	ldrh	r3, [r1, #12]
 8011e16:	4605      	mov	r5, r0
 8011e18:	460c      	mov	r4, r1
 8011e1a:	05db      	lsls	r3, r3, #23
 8011e1c:	4616      	mov	r6, r2
 8011e1e:	d505      	bpl.n	8011e2c <__swrite+0x1e>
 8011e20:	2302      	movs	r3, #2
 8011e22:	2200      	movs	r2, #0
 8011e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e28:	f000 f874 	bl	8011f14 <_lseek_r>
 8011e2c:	89a3      	ldrh	r3, [r4, #12]
 8011e2e:	4632      	mov	r2, r6
 8011e30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e34:	4628      	mov	r0, r5
 8011e36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011e3a:	81a3      	strh	r3, [r4, #12]
 8011e3c:	463b      	mov	r3, r7
 8011e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e42:	f000 b88b 	b.w	8011f5c <_write_r>

08011e46 <__sseek>:
 8011e46:	b510      	push	{r4, lr}
 8011e48:	460c      	mov	r4, r1
 8011e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e4e:	f000 f861 	bl	8011f14 <_lseek_r>
 8011e52:	1c43      	adds	r3, r0, #1
 8011e54:	89a3      	ldrh	r3, [r4, #12]
 8011e56:	bf15      	itete	ne
 8011e58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011e5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011e5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011e62:	81a3      	strheq	r3, [r4, #12]
 8011e64:	bf18      	it	ne
 8011e66:	81a3      	strhne	r3, [r4, #12]
 8011e68:	bd10      	pop	{r4, pc}

08011e6a <__sclose>:
 8011e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e6e:	f000 b841 	b.w	8011ef4 <_close_r>

08011e72 <_vsniprintf_r>:
 8011e72:	b530      	push	{r4, r5, lr}
 8011e74:	4614      	mov	r4, r2
 8011e76:	b09b      	sub	sp, #108	@ 0x6c
 8011e78:	4605      	mov	r5, r0
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	2c00      	cmp	r4, #0
 8011e7e:	da05      	bge.n	8011e8c <_vsniprintf_r+0x1a>
 8011e80:	238b      	movs	r3, #139	@ 0x8b
 8011e82:	6003      	str	r3, [r0, #0]
 8011e84:	f04f 30ff 	mov.w	r0, #4294967295
 8011e88:	b01b      	add	sp, #108	@ 0x6c
 8011e8a:	bd30      	pop	{r4, r5, pc}
 8011e8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8011e90:	9100      	str	r1, [sp, #0]
 8011e92:	9104      	str	r1, [sp, #16]
 8011e94:	4669      	mov	r1, sp
 8011e96:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011e9a:	bf14      	ite	ne
 8011e9c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8011ea0:	4623      	moveq	r3, r4
 8011ea2:	9302      	str	r3, [sp, #8]
 8011ea4:	9305      	str	r3, [sp, #20]
 8011ea6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011eaa:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011eae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8011eb0:	f000 f9f4 	bl	801229c <_svfiprintf_r>
 8011eb4:	1c43      	adds	r3, r0, #1
 8011eb6:	bfbc      	itt	lt
 8011eb8:	238b      	movlt	r3, #139	@ 0x8b
 8011eba:	602b      	strlt	r3, [r5, #0]
 8011ebc:	2c00      	cmp	r4, #0
 8011ebe:	d0e3      	beq.n	8011e88 <_vsniprintf_r+0x16>
 8011ec0:	9b00      	ldr	r3, [sp, #0]
 8011ec2:	2200      	movs	r2, #0
 8011ec4:	701a      	strb	r2, [r3, #0]
 8011ec6:	e7df      	b.n	8011e88 <_vsniprintf_r+0x16>

08011ec8 <vsniprintf>:
 8011ec8:	b507      	push	{r0, r1, r2, lr}
 8011eca:	9300      	str	r3, [sp, #0]
 8011ecc:	4613      	mov	r3, r2
 8011ece:	460a      	mov	r2, r1
 8011ed0:	4601      	mov	r1, r0
 8011ed2:	4803      	ldr	r0, [pc, #12]	@ (8011ee0 <vsniprintf+0x18>)
 8011ed4:	6800      	ldr	r0, [r0, #0]
 8011ed6:	f7ff ffcc 	bl	8011e72 <_vsniprintf_r>
 8011eda:	b003      	add	sp, #12
 8011edc:	f85d fb04 	ldr.w	pc, [sp], #4
 8011ee0:	20000130 	.word	0x20000130

08011ee4 <memset>:
 8011ee4:	4402      	add	r2, r0
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	4293      	cmp	r3, r2
 8011eea:	d100      	bne.n	8011eee <memset+0xa>
 8011eec:	4770      	bx	lr
 8011eee:	f803 1b01 	strb.w	r1, [r3], #1
 8011ef2:	e7f9      	b.n	8011ee8 <memset+0x4>

08011ef4 <_close_r>:
 8011ef4:	b538      	push	{r3, r4, r5, lr}
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	4d05      	ldr	r5, [pc, #20]	@ (8011f10 <_close_r+0x1c>)
 8011efa:	4604      	mov	r4, r0
 8011efc:	4608      	mov	r0, r1
 8011efe:	602b      	str	r3, [r5, #0]
 8011f00:	f7f0 fc7d 	bl	80027fe <_close>
 8011f04:	1c43      	adds	r3, r0, #1
 8011f06:	d102      	bne.n	8011f0e <_close_r+0x1a>
 8011f08:	682b      	ldr	r3, [r5, #0]
 8011f0a:	b103      	cbz	r3, 8011f0e <_close_r+0x1a>
 8011f0c:	6023      	str	r3, [r4, #0]
 8011f0e:	bd38      	pop	{r3, r4, r5, pc}
 8011f10:	200113e4 	.word	0x200113e4

08011f14 <_lseek_r>:
 8011f14:	b538      	push	{r3, r4, r5, lr}
 8011f16:	4604      	mov	r4, r0
 8011f18:	4d06      	ldr	r5, [pc, #24]	@ (8011f34 <_lseek_r+0x20>)
 8011f1a:	4608      	mov	r0, r1
 8011f1c:	4611      	mov	r1, r2
 8011f1e:	2200      	movs	r2, #0
 8011f20:	602a      	str	r2, [r5, #0]
 8011f22:	461a      	mov	r2, r3
 8011f24:	f7f0 fc92 	bl	800284c <_lseek>
 8011f28:	1c43      	adds	r3, r0, #1
 8011f2a:	d102      	bne.n	8011f32 <_lseek_r+0x1e>
 8011f2c:	682b      	ldr	r3, [r5, #0]
 8011f2e:	b103      	cbz	r3, 8011f32 <_lseek_r+0x1e>
 8011f30:	6023      	str	r3, [r4, #0]
 8011f32:	bd38      	pop	{r3, r4, r5, pc}
 8011f34:	200113e4 	.word	0x200113e4

08011f38 <_read_r>:
 8011f38:	b538      	push	{r3, r4, r5, lr}
 8011f3a:	4604      	mov	r4, r0
 8011f3c:	4d06      	ldr	r5, [pc, #24]	@ (8011f58 <_read_r+0x20>)
 8011f3e:	4608      	mov	r0, r1
 8011f40:	4611      	mov	r1, r2
 8011f42:	2200      	movs	r2, #0
 8011f44:	602a      	str	r2, [r5, #0]
 8011f46:	461a      	mov	r2, r3
 8011f48:	f7f0 fc20 	bl	800278c <_read>
 8011f4c:	1c43      	adds	r3, r0, #1
 8011f4e:	d102      	bne.n	8011f56 <_read_r+0x1e>
 8011f50:	682b      	ldr	r3, [r5, #0]
 8011f52:	b103      	cbz	r3, 8011f56 <_read_r+0x1e>
 8011f54:	6023      	str	r3, [r4, #0]
 8011f56:	bd38      	pop	{r3, r4, r5, pc}
 8011f58:	200113e4 	.word	0x200113e4

08011f5c <_write_r>:
 8011f5c:	b538      	push	{r3, r4, r5, lr}
 8011f5e:	4604      	mov	r4, r0
 8011f60:	4d06      	ldr	r5, [pc, #24]	@ (8011f7c <_write_r+0x20>)
 8011f62:	4608      	mov	r0, r1
 8011f64:	4611      	mov	r1, r2
 8011f66:	2200      	movs	r2, #0
 8011f68:	602a      	str	r2, [r5, #0]
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	f7f0 fc2b 	bl	80027c6 <_write>
 8011f70:	1c43      	adds	r3, r0, #1
 8011f72:	d102      	bne.n	8011f7a <_write_r+0x1e>
 8011f74:	682b      	ldr	r3, [r5, #0]
 8011f76:	b103      	cbz	r3, 8011f7a <_write_r+0x1e>
 8011f78:	6023      	str	r3, [r4, #0]
 8011f7a:	bd38      	pop	{r3, r4, r5, pc}
 8011f7c:	200113e4 	.word	0x200113e4

08011f80 <__errno>:
 8011f80:	4b01      	ldr	r3, [pc, #4]	@ (8011f88 <__errno+0x8>)
 8011f82:	6818      	ldr	r0, [r3, #0]
 8011f84:	4770      	bx	lr
 8011f86:	bf00      	nop
 8011f88:	20000130 	.word	0x20000130

08011f8c <__libc_init_array>:
 8011f8c:	b570      	push	{r4, r5, r6, lr}
 8011f8e:	4d0d      	ldr	r5, [pc, #52]	@ (8011fc4 <__libc_init_array+0x38>)
 8011f90:	2600      	movs	r6, #0
 8011f92:	4c0d      	ldr	r4, [pc, #52]	@ (8011fc8 <__libc_init_array+0x3c>)
 8011f94:	1b64      	subs	r4, r4, r5
 8011f96:	10a4      	asrs	r4, r4, #2
 8011f98:	42a6      	cmp	r6, r4
 8011f9a:	d109      	bne.n	8011fb0 <__libc_init_array+0x24>
 8011f9c:	4d0b      	ldr	r5, [pc, #44]	@ (8011fcc <__libc_init_array+0x40>)
 8011f9e:	2600      	movs	r6, #0
 8011fa0:	4c0b      	ldr	r4, [pc, #44]	@ (8011fd0 <__libc_init_array+0x44>)
 8011fa2:	f000 ff7d 	bl	8012ea0 <_init>
 8011fa6:	1b64      	subs	r4, r4, r5
 8011fa8:	10a4      	asrs	r4, r4, #2
 8011faa:	42a6      	cmp	r6, r4
 8011fac:	d105      	bne.n	8011fba <__libc_init_array+0x2e>
 8011fae:	bd70      	pop	{r4, r5, r6, pc}
 8011fb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fb4:	3601      	adds	r6, #1
 8011fb6:	4798      	blx	r3
 8011fb8:	e7ee      	b.n	8011f98 <__libc_init_array+0xc>
 8011fba:	f855 3b04 	ldr.w	r3, [r5], #4
 8011fbe:	3601      	adds	r6, #1
 8011fc0:	4798      	blx	r3
 8011fc2:	e7f2      	b.n	8011faa <__libc_init_array+0x1e>
 8011fc4:	08013bd8 	.word	0x08013bd8
 8011fc8:	08013bd8 	.word	0x08013bd8
 8011fcc:	08013bd8 	.word	0x08013bd8
 8011fd0:	08013bdc 	.word	0x08013bdc

08011fd4 <__retarget_lock_init_recursive>:
 8011fd4:	4770      	bx	lr

08011fd6 <__retarget_lock_acquire_recursive>:
 8011fd6:	4770      	bx	lr

08011fd8 <__retarget_lock_release_recursive>:
 8011fd8:	4770      	bx	lr

08011fda <memcpy>:
 8011fda:	440a      	add	r2, r1
 8011fdc:	1e43      	subs	r3, r0, #1
 8011fde:	4291      	cmp	r1, r2
 8011fe0:	d100      	bne.n	8011fe4 <memcpy+0xa>
 8011fe2:	4770      	bx	lr
 8011fe4:	b510      	push	{r4, lr}
 8011fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011fea:	4291      	cmp	r1, r2
 8011fec:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ff0:	d1f9      	bne.n	8011fe6 <memcpy+0xc>
 8011ff2:	bd10      	pop	{r4, pc}

08011ff4 <_free_r>:
 8011ff4:	b538      	push	{r3, r4, r5, lr}
 8011ff6:	4605      	mov	r5, r0
 8011ff8:	2900      	cmp	r1, #0
 8011ffa:	d041      	beq.n	8012080 <_free_r+0x8c>
 8011ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012000:	1f0c      	subs	r4, r1, #4
 8012002:	2b00      	cmp	r3, #0
 8012004:	bfb8      	it	lt
 8012006:	18e4      	addlt	r4, r4, r3
 8012008:	f000 f8e0 	bl	80121cc <__malloc_lock>
 801200c:	4a1d      	ldr	r2, [pc, #116]	@ (8012084 <_free_r+0x90>)
 801200e:	6813      	ldr	r3, [r2, #0]
 8012010:	b933      	cbnz	r3, 8012020 <_free_r+0x2c>
 8012012:	6063      	str	r3, [r4, #4]
 8012014:	6014      	str	r4, [r2, #0]
 8012016:	4628      	mov	r0, r5
 8012018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801201c:	f000 b8dc 	b.w	80121d8 <__malloc_unlock>
 8012020:	42a3      	cmp	r3, r4
 8012022:	d908      	bls.n	8012036 <_free_r+0x42>
 8012024:	6820      	ldr	r0, [r4, #0]
 8012026:	1821      	adds	r1, r4, r0
 8012028:	428b      	cmp	r3, r1
 801202a:	bf01      	itttt	eq
 801202c:	6819      	ldreq	r1, [r3, #0]
 801202e:	685b      	ldreq	r3, [r3, #4]
 8012030:	1809      	addeq	r1, r1, r0
 8012032:	6021      	streq	r1, [r4, #0]
 8012034:	e7ed      	b.n	8012012 <_free_r+0x1e>
 8012036:	461a      	mov	r2, r3
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	b10b      	cbz	r3, 8012040 <_free_r+0x4c>
 801203c:	42a3      	cmp	r3, r4
 801203e:	d9fa      	bls.n	8012036 <_free_r+0x42>
 8012040:	6811      	ldr	r1, [r2, #0]
 8012042:	1850      	adds	r0, r2, r1
 8012044:	42a0      	cmp	r0, r4
 8012046:	d10b      	bne.n	8012060 <_free_r+0x6c>
 8012048:	6820      	ldr	r0, [r4, #0]
 801204a:	4401      	add	r1, r0
 801204c:	1850      	adds	r0, r2, r1
 801204e:	6011      	str	r1, [r2, #0]
 8012050:	4283      	cmp	r3, r0
 8012052:	d1e0      	bne.n	8012016 <_free_r+0x22>
 8012054:	6818      	ldr	r0, [r3, #0]
 8012056:	685b      	ldr	r3, [r3, #4]
 8012058:	4408      	add	r0, r1
 801205a:	6053      	str	r3, [r2, #4]
 801205c:	6010      	str	r0, [r2, #0]
 801205e:	e7da      	b.n	8012016 <_free_r+0x22>
 8012060:	d902      	bls.n	8012068 <_free_r+0x74>
 8012062:	230c      	movs	r3, #12
 8012064:	602b      	str	r3, [r5, #0]
 8012066:	e7d6      	b.n	8012016 <_free_r+0x22>
 8012068:	6820      	ldr	r0, [r4, #0]
 801206a:	1821      	adds	r1, r4, r0
 801206c:	428b      	cmp	r3, r1
 801206e:	bf02      	ittt	eq
 8012070:	6819      	ldreq	r1, [r3, #0]
 8012072:	685b      	ldreq	r3, [r3, #4]
 8012074:	1809      	addeq	r1, r1, r0
 8012076:	6063      	str	r3, [r4, #4]
 8012078:	bf08      	it	eq
 801207a:	6021      	streq	r1, [r4, #0]
 801207c:	6054      	str	r4, [r2, #4]
 801207e:	e7ca      	b.n	8012016 <_free_r+0x22>
 8012080:	bd38      	pop	{r3, r4, r5, pc}
 8012082:	bf00      	nop
 8012084:	200113f0 	.word	0x200113f0

08012088 <sbrk_aligned>:
 8012088:	b570      	push	{r4, r5, r6, lr}
 801208a:	4e0f      	ldr	r6, [pc, #60]	@ (80120c8 <sbrk_aligned+0x40>)
 801208c:	460c      	mov	r4, r1
 801208e:	4605      	mov	r5, r0
 8012090:	6831      	ldr	r1, [r6, #0]
 8012092:	b911      	cbnz	r1, 801209a <sbrk_aligned+0x12>
 8012094:	f000 fe2c 	bl	8012cf0 <_sbrk_r>
 8012098:	6030      	str	r0, [r6, #0]
 801209a:	4621      	mov	r1, r4
 801209c:	4628      	mov	r0, r5
 801209e:	f000 fe27 	bl	8012cf0 <_sbrk_r>
 80120a2:	1c43      	adds	r3, r0, #1
 80120a4:	d103      	bne.n	80120ae <sbrk_aligned+0x26>
 80120a6:	f04f 34ff 	mov.w	r4, #4294967295
 80120aa:	4620      	mov	r0, r4
 80120ac:	bd70      	pop	{r4, r5, r6, pc}
 80120ae:	1cc4      	adds	r4, r0, #3
 80120b0:	f024 0403 	bic.w	r4, r4, #3
 80120b4:	42a0      	cmp	r0, r4
 80120b6:	d0f8      	beq.n	80120aa <sbrk_aligned+0x22>
 80120b8:	1a21      	subs	r1, r4, r0
 80120ba:	4628      	mov	r0, r5
 80120bc:	f000 fe18 	bl	8012cf0 <_sbrk_r>
 80120c0:	3001      	adds	r0, #1
 80120c2:	d1f2      	bne.n	80120aa <sbrk_aligned+0x22>
 80120c4:	e7ef      	b.n	80120a6 <sbrk_aligned+0x1e>
 80120c6:	bf00      	nop
 80120c8:	200113ec 	.word	0x200113ec

080120cc <_malloc_r>:
 80120cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120d0:	1ccd      	adds	r5, r1, #3
 80120d2:	4606      	mov	r6, r0
 80120d4:	f025 0503 	bic.w	r5, r5, #3
 80120d8:	3508      	adds	r5, #8
 80120da:	2d0c      	cmp	r5, #12
 80120dc:	bf38      	it	cc
 80120de:	250c      	movcc	r5, #12
 80120e0:	2d00      	cmp	r5, #0
 80120e2:	db01      	blt.n	80120e8 <_malloc_r+0x1c>
 80120e4:	42a9      	cmp	r1, r5
 80120e6:	d904      	bls.n	80120f2 <_malloc_r+0x26>
 80120e8:	230c      	movs	r3, #12
 80120ea:	6033      	str	r3, [r6, #0]
 80120ec:	2000      	movs	r0, #0
 80120ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80121c8 <_malloc_r+0xfc>
 80120f6:	f000 f869 	bl	80121cc <__malloc_lock>
 80120fa:	f8d8 3000 	ldr.w	r3, [r8]
 80120fe:	461c      	mov	r4, r3
 8012100:	bb44      	cbnz	r4, 8012154 <_malloc_r+0x88>
 8012102:	4629      	mov	r1, r5
 8012104:	4630      	mov	r0, r6
 8012106:	f7ff ffbf 	bl	8012088 <sbrk_aligned>
 801210a:	1c43      	adds	r3, r0, #1
 801210c:	4604      	mov	r4, r0
 801210e:	d158      	bne.n	80121c2 <_malloc_r+0xf6>
 8012110:	f8d8 4000 	ldr.w	r4, [r8]
 8012114:	4627      	mov	r7, r4
 8012116:	2f00      	cmp	r7, #0
 8012118:	d143      	bne.n	80121a2 <_malloc_r+0xd6>
 801211a:	2c00      	cmp	r4, #0
 801211c:	d04b      	beq.n	80121b6 <_malloc_r+0xea>
 801211e:	6823      	ldr	r3, [r4, #0]
 8012120:	4639      	mov	r1, r7
 8012122:	4630      	mov	r0, r6
 8012124:	eb04 0903 	add.w	r9, r4, r3
 8012128:	f000 fde2 	bl	8012cf0 <_sbrk_r>
 801212c:	4581      	cmp	r9, r0
 801212e:	d142      	bne.n	80121b6 <_malloc_r+0xea>
 8012130:	6821      	ldr	r1, [r4, #0]
 8012132:	4630      	mov	r0, r6
 8012134:	1a6d      	subs	r5, r5, r1
 8012136:	4629      	mov	r1, r5
 8012138:	f7ff ffa6 	bl	8012088 <sbrk_aligned>
 801213c:	3001      	adds	r0, #1
 801213e:	d03a      	beq.n	80121b6 <_malloc_r+0xea>
 8012140:	6823      	ldr	r3, [r4, #0]
 8012142:	442b      	add	r3, r5
 8012144:	6023      	str	r3, [r4, #0]
 8012146:	f8d8 3000 	ldr.w	r3, [r8]
 801214a:	685a      	ldr	r2, [r3, #4]
 801214c:	bb62      	cbnz	r2, 80121a8 <_malloc_r+0xdc>
 801214e:	f8c8 7000 	str.w	r7, [r8]
 8012152:	e00f      	b.n	8012174 <_malloc_r+0xa8>
 8012154:	6822      	ldr	r2, [r4, #0]
 8012156:	1b52      	subs	r2, r2, r5
 8012158:	d420      	bmi.n	801219c <_malloc_r+0xd0>
 801215a:	2a0b      	cmp	r2, #11
 801215c:	d917      	bls.n	801218e <_malloc_r+0xc2>
 801215e:	1961      	adds	r1, r4, r5
 8012160:	42a3      	cmp	r3, r4
 8012162:	6025      	str	r5, [r4, #0]
 8012164:	bf18      	it	ne
 8012166:	6059      	strne	r1, [r3, #4]
 8012168:	6863      	ldr	r3, [r4, #4]
 801216a:	bf08      	it	eq
 801216c:	f8c8 1000 	streq.w	r1, [r8]
 8012170:	5162      	str	r2, [r4, r5]
 8012172:	604b      	str	r3, [r1, #4]
 8012174:	4630      	mov	r0, r6
 8012176:	f000 f82f 	bl	80121d8 <__malloc_unlock>
 801217a:	f104 000b 	add.w	r0, r4, #11
 801217e:	1d23      	adds	r3, r4, #4
 8012180:	f020 0007 	bic.w	r0, r0, #7
 8012184:	1ac2      	subs	r2, r0, r3
 8012186:	bf1c      	itt	ne
 8012188:	1a1b      	subne	r3, r3, r0
 801218a:	50a3      	strne	r3, [r4, r2]
 801218c:	e7af      	b.n	80120ee <_malloc_r+0x22>
 801218e:	6862      	ldr	r2, [r4, #4]
 8012190:	42a3      	cmp	r3, r4
 8012192:	bf0c      	ite	eq
 8012194:	f8c8 2000 	streq.w	r2, [r8]
 8012198:	605a      	strne	r2, [r3, #4]
 801219a:	e7eb      	b.n	8012174 <_malloc_r+0xa8>
 801219c:	4623      	mov	r3, r4
 801219e:	6864      	ldr	r4, [r4, #4]
 80121a0:	e7ae      	b.n	8012100 <_malloc_r+0x34>
 80121a2:	463c      	mov	r4, r7
 80121a4:	687f      	ldr	r7, [r7, #4]
 80121a6:	e7b6      	b.n	8012116 <_malloc_r+0x4a>
 80121a8:	461a      	mov	r2, r3
 80121aa:	685b      	ldr	r3, [r3, #4]
 80121ac:	42a3      	cmp	r3, r4
 80121ae:	d1fb      	bne.n	80121a8 <_malloc_r+0xdc>
 80121b0:	2300      	movs	r3, #0
 80121b2:	6053      	str	r3, [r2, #4]
 80121b4:	e7de      	b.n	8012174 <_malloc_r+0xa8>
 80121b6:	230c      	movs	r3, #12
 80121b8:	4630      	mov	r0, r6
 80121ba:	6033      	str	r3, [r6, #0]
 80121bc:	f000 f80c 	bl	80121d8 <__malloc_unlock>
 80121c0:	e794      	b.n	80120ec <_malloc_r+0x20>
 80121c2:	6005      	str	r5, [r0, #0]
 80121c4:	e7d6      	b.n	8012174 <_malloc_r+0xa8>
 80121c6:	bf00      	nop
 80121c8:	200113f0 	.word	0x200113f0

080121cc <__malloc_lock>:
 80121cc:	4801      	ldr	r0, [pc, #4]	@ (80121d4 <__malloc_lock+0x8>)
 80121ce:	f7ff bf02 	b.w	8011fd6 <__retarget_lock_acquire_recursive>
 80121d2:	bf00      	nop
 80121d4:	200113e8 	.word	0x200113e8

080121d8 <__malloc_unlock>:
 80121d8:	4801      	ldr	r0, [pc, #4]	@ (80121e0 <__malloc_unlock+0x8>)
 80121da:	f7ff befd 	b.w	8011fd8 <__retarget_lock_release_recursive>
 80121de:	bf00      	nop
 80121e0:	200113e8 	.word	0x200113e8

080121e4 <__ssputs_r>:
 80121e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121e8:	461f      	mov	r7, r3
 80121ea:	688e      	ldr	r6, [r1, #8]
 80121ec:	4682      	mov	sl, r0
 80121ee:	460c      	mov	r4, r1
 80121f0:	42be      	cmp	r6, r7
 80121f2:	4690      	mov	r8, r2
 80121f4:	680b      	ldr	r3, [r1, #0]
 80121f6:	d82d      	bhi.n	8012254 <__ssputs_r+0x70>
 80121f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80121fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012200:	d026      	beq.n	8012250 <__ssputs_r+0x6c>
 8012202:	6965      	ldr	r5, [r4, #20]
 8012204:	6909      	ldr	r1, [r1, #16]
 8012206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801220a:	eba3 0901 	sub.w	r9, r3, r1
 801220e:	1c7b      	adds	r3, r7, #1
 8012210:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012214:	444b      	add	r3, r9
 8012216:	106d      	asrs	r5, r5, #1
 8012218:	429d      	cmp	r5, r3
 801221a:	bf38      	it	cc
 801221c:	461d      	movcc	r5, r3
 801221e:	0553      	lsls	r3, r2, #21
 8012220:	d527      	bpl.n	8012272 <__ssputs_r+0x8e>
 8012222:	4629      	mov	r1, r5
 8012224:	f7ff ff52 	bl	80120cc <_malloc_r>
 8012228:	4606      	mov	r6, r0
 801222a:	b360      	cbz	r0, 8012286 <__ssputs_r+0xa2>
 801222c:	464a      	mov	r2, r9
 801222e:	6921      	ldr	r1, [r4, #16]
 8012230:	f7ff fed3 	bl	8011fda <memcpy>
 8012234:	89a3      	ldrh	r3, [r4, #12]
 8012236:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801223a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801223e:	81a3      	strh	r3, [r4, #12]
 8012240:	6126      	str	r6, [r4, #16]
 8012242:	444e      	add	r6, r9
 8012244:	6165      	str	r5, [r4, #20]
 8012246:	eba5 0509 	sub.w	r5, r5, r9
 801224a:	6026      	str	r6, [r4, #0]
 801224c:	463e      	mov	r6, r7
 801224e:	60a5      	str	r5, [r4, #8]
 8012250:	42be      	cmp	r6, r7
 8012252:	d900      	bls.n	8012256 <__ssputs_r+0x72>
 8012254:	463e      	mov	r6, r7
 8012256:	4632      	mov	r2, r6
 8012258:	4641      	mov	r1, r8
 801225a:	6820      	ldr	r0, [r4, #0]
 801225c:	f000 fd2e 	bl	8012cbc <memmove>
 8012260:	68a3      	ldr	r3, [r4, #8]
 8012262:	2000      	movs	r0, #0
 8012264:	1b9b      	subs	r3, r3, r6
 8012266:	60a3      	str	r3, [r4, #8]
 8012268:	6823      	ldr	r3, [r4, #0]
 801226a:	4433      	add	r3, r6
 801226c:	6023      	str	r3, [r4, #0]
 801226e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012272:	462a      	mov	r2, r5
 8012274:	f000 fd5a 	bl	8012d2c <_realloc_r>
 8012278:	4606      	mov	r6, r0
 801227a:	2800      	cmp	r0, #0
 801227c:	d1e0      	bne.n	8012240 <__ssputs_r+0x5c>
 801227e:	6921      	ldr	r1, [r4, #16]
 8012280:	4650      	mov	r0, sl
 8012282:	f7ff feb7 	bl	8011ff4 <_free_r>
 8012286:	230c      	movs	r3, #12
 8012288:	f04f 30ff 	mov.w	r0, #4294967295
 801228c:	f8ca 3000 	str.w	r3, [sl]
 8012290:	89a3      	ldrh	r3, [r4, #12]
 8012292:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012296:	81a3      	strh	r3, [r4, #12]
 8012298:	e7e9      	b.n	801226e <__ssputs_r+0x8a>
	...

0801229c <_svfiprintf_r>:
 801229c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122a0:	4698      	mov	r8, r3
 80122a2:	898b      	ldrh	r3, [r1, #12]
 80122a4:	b09d      	sub	sp, #116	@ 0x74
 80122a6:	4607      	mov	r7, r0
 80122a8:	061b      	lsls	r3, r3, #24
 80122aa:	460d      	mov	r5, r1
 80122ac:	4614      	mov	r4, r2
 80122ae:	d510      	bpl.n	80122d2 <_svfiprintf_r+0x36>
 80122b0:	690b      	ldr	r3, [r1, #16]
 80122b2:	b973      	cbnz	r3, 80122d2 <_svfiprintf_r+0x36>
 80122b4:	2140      	movs	r1, #64	@ 0x40
 80122b6:	f7ff ff09 	bl	80120cc <_malloc_r>
 80122ba:	6028      	str	r0, [r5, #0]
 80122bc:	6128      	str	r0, [r5, #16]
 80122be:	b930      	cbnz	r0, 80122ce <_svfiprintf_r+0x32>
 80122c0:	230c      	movs	r3, #12
 80122c2:	603b      	str	r3, [r7, #0]
 80122c4:	f04f 30ff 	mov.w	r0, #4294967295
 80122c8:	b01d      	add	sp, #116	@ 0x74
 80122ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122ce:	2340      	movs	r3, #64	@ 0x40
 80122d0:	616b      	str	r3, [r5, #20]
 80122d2:	2300      	movs	r3, #0
 80122d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80122d8:	f04f 0901 	mov.w	r9, #1
 80122dc:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8012480 <_svfiprintf_r+0x1e4>
 80122e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80122e2:	2320      	movs	r3, #32
 80122e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80122e8:	2330      	movs	r3, #48	@ 0x30
 80122ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80122ee:	4623      	mov	r3, r4
 80122f0:	469a      	mov	sl, r3
 80122f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80122f6:	b10a      	cbz	r2, 80122fc <_svfiprintf_r+0x60>
 80122f8:	2a25      	cmp	r2, #37	@ 0x25
 80122fa:	d1f9      	bne.n	80122f0 <_svfiprintf_r+0x54>
 80122fc:	ebba 0b04 	subs.w	fp, sl, r4
 8012300:	d00b      	beq.n	801231a <_svfiprintf_r+0x7e>
 8012302:	465b      	mov	r3, fp
 8012304:	4622      	mov	r2, r4
 8012306:	4629      	mov	r1, r5
 8012308:	4638      	mov	r0, r7
 801230a:	f7ff ff6b 	bl	80121e4 <__ssputs_r>
 801230e:	3001      	adds	r0, #1
 8012310:	f000 80a7 	beq.w	8012462 <_svfiprintf_r+0x1c6>
 8012314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012316:	445a      	add	r2, fp
 8012318:	9209      	str	r2, [sp, #36]	@ 0x24
 801231a:	f89a 3000 	ldrb.w	r3, [sl]
 801231e:	2b00      	cmp	r3, #0
 8012320:	f000 809f 	beq.w	8012462 <_svfiprintf_r+0x1c6>
 8012324:	2300      	movs	r3, #0
 8012326:	f04f 32ff 	mov.w	r2, #4294967295
 801232a:	f10a 0a01 	add.w	sl, sl, #1
 801232e:	9304      	str	r3, [sp, #16]
 8012330:	9307      	str	r3, [sp, #28]
 8012332:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012336:	931a      	str	r3, [sp, #104]	@ 0x68
 8012338:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801233c:	4654      	mov	r4, sl
 801233e:	2205      	movs	r2, #5
 8012340:	484f      	ldr	r0, [pc, #316]	@ (8012480 <_svfiprintf_r+0x1e4>)
 8012342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012346:	f000 fce3 	bl	8012d10 <memchr>
 801234a:	9a04      	ldr	r2, [sp, #16]
 801234c:	b9d8      	cbnz	r0, 8012386 <_svfiprintf_r+0xea>
 801234e:	06d0      	lsls	r0, r2, #27
 8012350:	bf44      	itt	mi
 8012352:	2320      	movmi	r3, #32
 8012354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012358:	0711      	lsls	r1, r2, #28
 801235a:	bf44      	itt	mi
 801235c:	232b      	movmi	r3, #43	@ 0x2b
 801235e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012362:	f89a 3000 	ldrb.w	r3, [sl]
 8012366:	2b2a      	cmp	r3, #42	@ 0x2a
 8012368:	d015      	beq.n	8012396 <_svfiprintf_r+0xfa>
 801236a:	9a07      	ldr	r2, [sp, #28]
 801236c:	4654      	mov	r4, sl
 801236e:	2000      	movs	r0, #0
 8012370:	f04f 0c0a 	mov.w	ip, #10
 8012374:	4621      	mov	r1, r4
 8012376:	f811 3b01 	ldrb.w	r3, [r1], #1
 801237a:	3b30      	subs	r3, #48	@ 0x30
 801237c:	2b09      	cmp	r3, #9
 801237e:	d94b      	bls.n	8012418 <_svfiprintf_r+0x17c>
 8012380:	b1b0      	cbz	r0, 80123b0 <_svfiprintf_r+0x114>
 8012382:	9207      	str	r2, [sp, #28]
 8012384:	e014      	b.n	80123b0 <_svfiprintf_r+0x114>
 8012386:	eba0 0308 	sub.w	r3, r0, r8
 801238a:	46a2      	mov	sl, r4
 801238c:	fa09 f303 	lsl.w	r3, r9, r3
 8012390:	4313      	orrs	r3, r2
 8012392:	9304      	str	r3, [sp, #16]
 8012394:	e7d2      	b.n	801233c <_svfiprintf_r+0xa0>
 8012396:	9b03      	ldr	r3, [sp, #12]
 8012398:	1d19      	adds	r1, r3, #4
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	2b00      	cmp	r3, #0
 801239e:	9103      	str	r1, [sp, #12]
 80123a0:	bfbb      	ittet	lt
 80123a2:	425b      	neglt	r3, r3
 80123a4:	f042 0202 	orrlt.w	r2, r2, #2
 80123a8:	9307      	strge	r3, [sp, #28]
 80123aa:	9307      	strlt	r3, [sp, #28]
 80123ac:	bfb8      	it	lt
 80123ae:	9204      	strlt	r2, [sp, #16]
 80123b0:	7823      	ldrb	r3, [r4, #0]
 80123b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80123b4:	d10a      	bne.n	80123cc <_svfiprintf_r+0x130>
 80123b6:	7863      	ldrb	r3, [r4, #1]
 80123b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80123ba:	d132      	bne.n	8012422 <_svfiprintf_r+0x186>
 80123bc:	9b03      	ldr	r3, [sp, #12]
 80123be:	3402      	adds	r4, #2
 80123c0:	1d1a      	adds	r2, r3, #4
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80123c8:	9203      	str	r2, [sp, #12]
 80123ca:	9305      	str	r3, [sp, #20]
 80123cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012490 <_svfiprintf_r+0x1f4>
 80123d0:	2203      	movs	r2, #3
 80123d2:	7821      	ldrb	r1, [r4, #0]
 80123d4:	4650      	mov	r0, sl
 80123d6:	f000 fc9b 	bl	8012d10 <memchr>
 80123da:	b138      	cbz	r0, 80123ec <_svfiprintf_r+0x150>
 80123dc:	eba0 000a 	sub.w	r0, r0, sl
 80123e0:	2240      	movs	r2, #64	@ 0x40
 80123e2:	9b04      	ldr	r3, [sp, #16]
 80123e4:	3401      	adds	r4, #1
 80123e6:	4082      	lsls	r2, r0
 80123e8:	4313      	orrs	r3, r2
 80123ea:	9304      	str	r3, [sp, #16]
 80123ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80123f0:	2206      	movs	r2, #6
 80123f2:	4824      	ldr	r0, [pc, #144]	@ (8012484 <_svfiprintf_r+0x1e8>)
 80123f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80123f8:	f000 fc8a 	bl	8012d10 <memchr>
 80123fc:	2800      	cmp	r0, #0
 80123fe:	d036      	beq.n	801246e <_svfiprintf_r+0x1d2>
 8012400:	4b21      	ldr	r3, [pc, #132]	@ (8012488 <_svfiprintf_r+0x1ec>)
 8012402:	bb1b      	cbnz	r3, 801244c <_svfiprintf_r+0x1b0>
 8012404:	9b03      	ldr	r3, [sp, #12]
 8012406:	3307      	adds	r3, #7
 8012408:	f023 0307 	bic.w	r3, r3, #7
 801240c:	3308      	adds	r3, #8
 801240e:	9303      	str	r3, [sp, #12]
 8012410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012412:	4433      	add	r3, r6
 8012414:	9309      	str	r3, [sp, #36]	@ 0x24
 8012416:	e76a      	b.n	80122ee <_svfiprintf_r+0x52>
 8012418:	fb0c 3202 	mla	r2, ip, r2, r3
 801241c:	460c      	mov	r4, r1
 801241e:	2001      	movs	r0, #1
 8012420:	e7a8      	b.n	8012374 <_svfiprintf_r+0xd8>
 8012422:	2300      	movs	r3, #0
 8012424:	3401      	adds	r4, #1
 8012426:	f04f 0c0a 	mov.w	ip, #10
 801242a:	4619      	mov	r1, r3
 801242c:	9305      	str	r3, [sp, #20]
 801242e:	4620      	mov	r0, r4
 8012430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012434:	3a30      	subs	r2, #48	@ 0x30
 8012436:	2a09      	cmp	r2, #9
 8012438:	d903      	bls.n	8012442 <_svfiprintf_r+0x1a6>
 801243a:	2b00      	cmp	r3, #0
 801243c:	d0c6      	beq.n	80123cc <_svfiprintf_r+0x130>
 801243e:	9105      	str	r1, [sp, #20]
 8012440:	e7c4      	b.n	80123cc <_svfiprintf_r+0x130>
 8012442:	fb0c 2101 	mla	r1, ip, r1, r2
 8012446:	4604      	mov	r4, r0
 8012448:	2301      	movs	r3, #1
 801244a:	e7f0      	b.n	801242e <_svfiprintf_r+0x192>
 801244c:	ab03      	add	r3, sp, #12
 801244e:	462a      	mov	r2, r5
 8012450:	a904      	add	r1, sp, #16
 8012452:	4638      	mov	r0, r7
 8012454:	9300      	str	r3, [sp, #0]
 8012456:	4b0d      	ldr	r3, [pc, #52]	@ (801248c <_svfiprintf_r+0x1f0>)
 8012458:	f3af 8000 	nop.w
 801245c:	1c42      	adds	r2, r0, #1
 801245e:	4606      	mov	r6, r0
 8012460:	d1d6      	bne.n	8012410 <_svfiprintf_r+0x174>
 8012462:	89ab      	ldrh	r3, [r5, #12]
 8012464:	065b      	lsls	r3, r3, #25
 8012466:	f53f af2d 	bmi.w	80122c4 <_svfiprintf_r+0x28>
 801246a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801246c:	e72c      	b.n	80122c8 <_svfiprintf_r+0x2c>
 801246e:	ab03      	add	r3, sp, #12
 8012470:	462a      	mov	r2, r5
 8012472:	a904      	add	r1, sp, #16
 8012474:	4638      	mov	r0, r7
 8012476:	9300      	str	r3, [sp, #0]
 8012478:	4b04      	ldr	r3, [pc, #16]	@ (801248c <_svfiprintf_r+0x1f0>)
 801247a:	f000 f9bf 	bl	80127fc <_printf_i>
 801247e:	e7ed      	b.n	801245c <_svfiprintf_r+0x1c0>
 8012480:	08013b9c 	.word	0x08013b9c
 8012484:	08013ba6 	.word	0x08013ba6
 8012488:	00000000 	.word	0x00000000
 801248c:	080121e5 	.word	0x080121e5
 8012490:	08013ba2 	.word	0x08013ba2

08012494 <__sfputc_r>:
 8012494:	6893      	ldr	r3, [r2, #8]
 8012496:	3b01      	subs	r3, #1
 8012498:	2b00      	cmp	r3, #0
 801249a:	6093      	str	r3, [r2, #8]
 801249c:	b410      	push	{r4}
 801249e:	da08      	bge.n	80124b2 <__sfputc_r+0x1e>
 80124a0:	6994      	ldr	r4, [r2, #24]
 80124a2:	42a3      	cmp	r3, r4
 80124a4:	db01      	blt.n	80124aa <__sfputc_r+0x16>
 80124a6:	290a      	cmp	r1, #10
 80124a8:	d103      	bne.n	80124b2 <__sfputc_r+0x1e>
 80124aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124ae:	f000 bb71 	b.w	8012b94 <__swbuf_r>
 80124b2:	6813      	ldr	r3, [r2, #0]
 80124b4:	1c58      	adds	r0, r3, #1
 80124b6:	6010      	str	r0, [r2, #0]
 80124b8:	4608      	mov	r0, r1
 80124ba:	7019      	strb	r1, [r3, #0]
 80124bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80124c0:	4770      	bx	lr

080124c2 <__sfputs_r>:
 80124c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124c4:	4606      	mov	r6, r0
 80124c6:	460f      	mov	r7, r1
 80124c8:	4614      	mov	r4, r2
 80124ca:	18d5      	adds	r5, r2, r3
 80124cc:	42ac      	cmp	r4, r5
 80124ce:	d101      	bne.n	80124d4 <__sfputs_r+0x12>
 80124d0:	2000      	movs	r0, #0
 80124d2:	e007      	b.n	80124e4 <__sfputs_r+0x22>
 80124d4:	463a      	mov	r2, r7
 80124d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124da:	4630      	mov	r0, r6
 80124dc:	f7ff ffda 	bl	8012494 <__sfputc_r>
 80124e0:	1c43      	adds	r3, r0, #1
 80124e2:	d1f3      	bne.n	80124cc <__sfputs_r+0xa>
 80124e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080124e8 <_vfiprintf_r>:
 80124e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80124ec:	460d      	mov	r5, r1
 80124ee:	b09d      	sub	sp, #116	@ 0x74
 80124f0:	4614      	mov	r4, r2
 80124f2:	4698      	mov	r8, r3
 80124f4:	4606      	mov	r6, r0
 80124f6:	b118      	cbz	r0, 8012500 <_vfiprintf_r+0x18>
 80124f8:	6a03      	ldr	r3, [r0, #32]
 80124fa:	b90b      	cbnz	r3, 8012500 <_vfiprintf_r+0x18>
 80124fc:	f7ff fbda 	bl	8011cb4 <__sinit>
 8012500:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012502:	07d9      	lsls	r1, r3, #31
 8012504:	d405      	bmi.n	8012512 <_vfiprintf_r+0x2a>
 8012506:	89ab      	ldrh	r3, [r5, #12]
 8012508:	059a      	lsls	r2, r3, #22
 801250a:	d402      	bmi.n	8012512 <_vfiprintf_r+0x2a>
 801250c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801250e:	f7ff fd62 	bl	8011fd6 <__retarget_lock_acquire_recursive>
 8012512:	89ab      	ldrh	r3, [r5, #12]
 8012514:	071b      	lsls	r3, r3, #28
 8012516:	d501      	bpl.n	801251c <_vfiprintf_r+0x34>
 8012518:	692b      	ldr	r3, [r5, #16]
 801251a:	b99b      	cbnz	r3, 8012544 <_vfiprintf_r+0x5c>
 801251c:	4629      	mov	r1, r5
 801251e:	4630      	mov	r0, r6
 8012520:	f000 fb76 	bl	8012c10 <__swsetup_r>
 8012524:	b170      	cbz	r0, 8012544 <_vfiprintf_r+0x5c>
 8012526:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012528:	07dc      	lsls	r4, r3, #31
 801252a:	d504      	bpl.n	8012536 <_vfiprintf_r+0x4e>
 801252c:	f04f 30ff 	mov.w	r0, #4294967295
 8012530:	b01d      	add	sp, #116	@ 0x74
 8012532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012536:	89ab      	ldrh	r3, [r5, #12]
 8012538:	0598      	lsls	r0, r3, #22
 801253a:	d4f7      	bmi.n	801252c <_vfiprintf_r+0x44>
 801253c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801253e:	f7ff fd4b 	bl	8011fd8 <__retarget_lock_release_recursive>
 8012542:	e7f3      	b.n	801252c <_vfiprintf_r+0x44>
 8012544:	2300      	movs	r3, #0
 8012546:	f8cd 800c 	str.w	r8, [sp, #12]
 801254a:	f04f 0901 	mov.w	r9, #1
 801254e:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8012704 <_vfiprintf_r+0x21c>
 8012552:	9309      	str	r3, [sp, #36]	@ 0x24
 8012554:	2320      	movs	r3, #32
 8012556:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801255a:	2330      	movs	r3, #48	@ 0x30
 801255c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012560:	4623      	mov	r3, r4
 8012562:	469a      	mov	sl, r3
 8012564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012568:	b10a      	cbz	r2, 801256e <_vfiprintf_r+0x86>
 801256a:	2a25      	cmp	r2, #37	@ 0x25
 801256c:	d1f9      	bne.n	8012562 <_vfiprintf_r+0x7a>
 801256e:	ebba 0b04 	subs.w	fp, sl, r4
 8012572:	d00b      	beq.n	801258c <_vfiprintf_r+0xa4>
 8012574:	465b      	mov	r3, fp
 8012576:	4622      	mov	r2, r4
 8012578:	4629      	mov	r1, r5
 801257a:	4630      	mov	r0, r6
 801257c:	f7ff ffa1 	bl	80124c2 <__sfputs_r>
 8012580:	3001      	adds	r0, #1
 8012582:	f000 80a7 	beq.w	80126d4 <_vfiprintf_r+0x1ec>
 8012586:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012588:	445a      	add	r2, fp
 801258a:	9209      	str	r2, [sp, #36]	@ 0x24
 801258c:	f89a 3000 	ldrb.w	r3, [sl]
 8012590:	2b00      	cmp	r3, #0
 8012592:	f000 809f 	beq.w	80126d4 <_vfiprintf_r+0x1ec>
 8012596:	2300      	movs	r3, #0
 8012598:	f04f 32ff 	mov.w	r2, #4294967295
 801259c:	f10a 0a01 	add.w	sl, sl, #1
 80125a0:	9304      	str	r3, [sp, #16]
 80125a2:	9307      	str	r3, [sp, #28]
 80125a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80125a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80125aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80125ae:	4654      	mov	r4, sl
 80125b0:	2205      	movs	r2, #5
 80125b2:	4854      	ldr	r0, [pc, #336]	@ (8012704 <_vfiprintf_r+0x21c>)
 80125b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125b8:	f000 fbaa 	bl	8012d10 <memchr>
 80125bc:	9a04      	ldr	r2, [sp, #16]
 80125be:	b9d8      	cbnz	r0, 80125f8 <_vfiprintf_r+0x110>
 80125c0:	06d1      	lsls	r1, r2, #27
 80125c2:	bf44      	itt	mi
 80125c4:	2320      	movmi	r3, #32
 80125c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125ca:	0713      	lsls	r3, r2, #28
 80125cc:	bf44      	itt	mi
 80125ce:	232b      	movmi	r3, #43	@ 0x2b
 80125d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80125d4:	f89a 3000 	ldrb.w	r3, [sl]
 80125d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80125da:	d015      	beq.n	8012608 <_vfiprintf_r+0x120>
 80125dc:	9a07      	ldr	r2, [sp, #28]
 80125de:	4654      	mov	r4, sl
 80125e0:	2000      	movs	r0, #0
 80125e2:	f04f 0c0a 	mov.w	ip, #10
 80125e6:	4621      	mov	r1, r4
 80125e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80125ec:	3b30      	subs	r3, #48	@ 0x30
 80125ee:	2b09      	cmp	r3, #9
 80125f0:	d94b      	bls.n	801268a <_vfiprintf_r+0x1a2>
 80125f2:	b1b0      	cbz	r0, 8012622 <_vfiprintf_r+0x13a>
 80125f4:	9207      	str	r2, [sp, #28]
 80125f6:	e014      	b.n	8012622 <_vfiprintf_r+0x13a>
 80125f8:	eba0 0308 	sub.w	r3, r0, r8
 80125fc:	46a2      	mov	sl, r4
 80125fe:	fa09 f303 	lsl.w	r3, r9, r3
 8012602:	4313      	orrs	r3, r2
 8012604:	9304      	str	r3, [sp, #16]
 8012606:	e7d2      	b.n	80125ae <_vfiprintf_r+0xc6>
 8012608:	9b03      	ldr	r3, [sp, #12]
 801260a:	1d19      	adds	r1, r3, #4
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	2b00      	cmp	r3, #0
 8012610:	9103      	str	r1, [sp, #12]
 8012612:	bfbb      	ittet	lt
 8012614:	425b      	neglt	r3, r3
 8012616:	f042 0202 	orrlt.w	r2, r2, #2
 801261a:	9307      	strge	r3, [sp, #28]
 801261c:	9307      	strlt	r3, [sp, #28]
 801261e:	bfb8      	it	lt
 8012620:	9204      	strlt	r2, [sp, #16]
 8012622:	7823      	ldrb	r3, [r4, #0]
 8012624:	2b2e      	cmp	r3, #46	@ 0x2e
 8012626:	d10a      	bne.n	801263e <_vfiprintf_r+0x156>
 8012628:	7863      	ldrb	r3, [r4, #1]
 801262a:	2b2a      	cmp	r3, #42	@ 0x2a
 801262c:	d132      	bne.n	8012694 <_vfiprintf_r+0x1ac>
 801262e:	9b03      	ldr	r3, [sp, #12]
 8012630:	3402      	adds	r4, #2
 8012632:	1d1a      	adds	r2, r3, #4
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801263a:	9203      	str	r2, [sp, #12]
 801263c:	9305      	str	r3, [sp, #20]
 801263e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012714 <_vfiprintf_r+0x22c>
 8012642:	2203      	movs	r2, #3
 8012644:	7821      	ldrb	r1, [r4, #0]
 8012646:	4650      	mov	r0, sl
 8012648:	f000 fb62 	bl	8012d10 <memchr>
 801264c:	b138      	cbz	r0, 801265e <_vfiprintf_r+0x176>
 801264e:	eba0 000a 	sub.w	r0, r0, sl
 8012652:	2240      	movs	r2, #64	@ 0x40
 8012654:	9b04      	ldr	r3, [sp, #16]
 8012656:	3401      	adds	r4, #1
 8012658:	4082      	lsls	r2, r0
 801265a:	4313      	orrs	r3, r2
 801265c:	9304      	str	r3, [sp, #16]
 801265e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012662:	2206      	movs	r2, #6
 8012664:	4828      	ldr	r0, [pc, #160]	@ (8012708 <_vfiprintf_r+0x220>)
 8012666:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801266a:	f000 fb51 	bl	8012d10 <memchr>
 801266e:	2800      	cmp	r0, #0
 8012670:	d03f      	beq.n	80126f2 <_vfiprintf_r+0x20a>
 8012672:	4b26      	ldr	r3, [pc, #152]	@ (801270c <_vfiprintf_r+0x224>)
 8012674:	bb1b      	cbnz	r3, 80126be <_vfiprintf_r+0x1d6>
 8012676:	9b03      	ldr	r3, [sp, #12]
 8012678:	3307      	adds	r3, #7
 801267a:	f023 0307 	bic.w	r3, r3, #7
 801267e:	3308      	adds	r3, #8
 8012680:	9303      	str	r3, [sp, #12]
 8012682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012684:	443b      	add	r3, r7
 8012686:	9309      	str	r3, [sp, #36]	@ 0x24
 8012688:	e76a      	b.n	8012560 <_vfiprintf_r+0x78>
 801268a:	fb0c 3202 	mla	r2, ip, r2, r3
 801268e:	460c      	mov	r4, r1
 8012690:	2001      	movs	r0, #1
 8012692:	e7a8      	b.n	80125e6 <_vfiprintf_r+0xfe>
 8012694:	2300      	movs	r3, #0
 8012696:	3401      	adds	r4, #1
 8012698:	f04f 0c0a 	mov.w	ip, #10
 801269c:	4619      	mov	r1, r3
 801269e:	9305      	str	r3, [sp, #20]
 80126a0:	4620      	mov	r0, r4
 80126a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80126a6:	3a30      	subs	r2, #48	@ 0x30
 80126a8:	2a09      	cmp	r2, #9
 80126aa:	d903      	bls.n	80126b4 <_vfiprintf_r+0x1cc>
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d0c6      	beq.n	801263e <_vfiprintf_r+0x156>
 80126b0:	9105      	str	r1, [sp, #20]
 80126b2:	e7c4      	b.n	801263e <_vfiprintf_r+0x156>
 80126b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80126b8:	4604      	mov	r4, r0
 80126ba:	2301      	movs	r3, #1
 80126bc:	e7f0      	b.n	80126a0 <_vfiprintf_r+0x1b8>
 80126be:	ab03      	add	r3, sp, #12
 80126c0:	462a      	mov	r2, r5
 80126c2:	a904      	add	r1, sp, #16
 80126c4:	4630      	mov	r0, r6
 80126c6:	9300      	str	r3, [sp, #0]
 80126c8:	4b11      	ldr	r3, [pc, #68]	@ (8012710 <_vfiprintf_r+0x228>)
 80126ca:	f3af 8000 	nop.w
 80126ce:	4607      	mov	r7, r0
 80126d0:	1c78      	adds	r0, r7, #1
 80126d2:	d1d6      	bne.n	8012682 <_vfiprintf_r+0x19a>
 80126d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80126d6:	07d9      	lsls	r1, r3, #31
 80126d8:	d405      	bmi.n	80126e6 <_vfiprintf_r+0x1fe>
 80126da:	89ab      	ldrh	r3, [r5, #12]
 80126dc:	059a      	lsls	r2, r3, #22
 80126de:	d402      	bmi.n	80126e6 <_vfiprintf_r+0x1fe>
 80126e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80126e2:	f7ff fc79 	bl	8011fd8 <__retarget_lock_release_recursive>
 80126e6:	89ab      	ldrh	r3, [r5, #12]
 80126e8:	065b      	lsls	r3, r3, #25
 80126ea:	f53f af1f 	bmi.w	801252c <_vfiprintf_r+0x44>
 80126ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126f0:	e71e      	b.n	8012530 <_vfiprintf_r+0x48>
 80126f2:	ab03      	add	r3, sp, #12
 80126f4:	462a      	mov	r2, r5
 80126f6:	a904      	add	r1, sp, #16
 80126f8:	4630      	mov	r0, r6
 80126fa:	9300      	str	r3, [sp, #0]
 80126fc:	4b04      	ldr	r3, [pc, #16]	@ (8012710 <_vfiprintf_r+0x228>)
 80126fe:	f000 f87d 	bl	80127fc <_printf_i>
 8012702:	e7e4      	b.n	80126ce <_vfiprintf_r+0x1e6>
 8012704:	08013b9c 	.word	0x08013b9c
 8012708:	08013ba6 	.word	0x08013ba6
 801270c:	00000000 	.word	0x00000000
 8012710:	080124c3 	.word	0x080124c3
 8012714:	08013ba2 	.word	0x08013ba2

08012718 <_printf_common>:
 8012718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801271c:	4616      	mov	r6, r2
 801271e:	4698      	mov	r8, r3
 8012720:	688a      	ldr	r2, [r1, #8]
 8012722:	4607      	mov	r7, r0
 8012724:	690b      	ldr	r3, [r1, #16]
 8012726:	460c      	mov	r4, r1
 8012728:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801272c:	4293      	cmp	r3, r2
 801272e:	bfb8      	it	lt
 8012730:	4613      	movlt	r3, r2
 8012732:	6033      	str	r3, [r6, #0]
 8012734:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012738:	b10a      	cbz	r2, 801273e <_printf_common+0x26>
 801273a:	3301      	adds	r3, #1
 801273c:	6033      	str	r3, [r6, #0]
 801273e:	6823      	ldr	r3, [r4, #0]
 8012740:	0699      	lsls	r1, r3, #26
 8012742:	bf42      	ittt	mi
 8012744:	6833      	ldrmi	r3, [r6, #0]
 8012746:	3302      	addmi	r3, #2
 8012748:	6033      	strmi	r3, [r6, #0]
 801274a:	6825      	ldr	r5, [r4, #0]
 801274c:	f015 0506 	ands.w	r5, r5, #6
 8012750:	d106      	bne.n	8012760 <_printf_common+0x48>
 8012752:	f104 0a19 	add.w	sl, r4, #25
 8012756:	68e3      	ldr	r3, [r4, #12]
 8012758:	6832      	ldr	r2, [r6, #0]
 801275a:	1a9b      	subs	r3, r3, r2
 801275c:	42ab      	cmp	r3, r5
 801275e:	dc2b      	bgt.n	80127b8 <_printf_common+0xa0>
 8012760:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012764:	6822      	ldr	r2, [r4, #0]
 8012766:	3b00      	subs	r3, #0
 8012768:	bf18      	it	ne
 801276a:	2301      	movne	r3, #1
 801276c:	0692      	lsls	r2, r2, #26
 801276e:	d430      	bmi.n	80127d2 <_printf_common+0xba>
 8012770:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012774:	4641      	mov	r1, r8
 8012776:	4638      	mov	r0, r7
 8012778:	47c8      	blx	r9
 801277a:	3001      	adds	r0, #1
 801277c:	d023      	beq.n	80127c6 <_printf_common+0xae>
 801277e:	6823      	ldr	r3, [r4, #0]
 8012780:	341a      	adds	r4, #26
 8012782:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8012786:	f003 0306 	and.w	r3, r3, #6
 801278a:	2b04      	cmp	r3, #4
 801278c:	bf0a      	itet	eq
 801278e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8012792:	2500      	movne	r5, #0
 8012794:	6833      	ldreq	r3, [r6, #0]
 8012796:	f04f 0600 	mov.w	r6, #0
 801279a:	bf08      	it	eq
 801279c:	1aed      	subeq	r5, r5, r3
 801279e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80127a2:	bf08      	it	eq
 80127a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80127a8:	4293      	cmp	r3, r2
 80127aa:	bfc4      	itt	gt
 80127ac:	1a9b      	subgt	r3, r3, r2
 80127ae:	18ed      	addgt	r5, r5, r3
 80127b0:	42b5      	cmp	r5, r6
 80127b2:	d11a      	bne.n	80127ea <_printf_common+0xd2>
 80127b4:	2000      	movs	r0, #0
 80127b6:	e008      	b.n	80127ca <_printf_common+0xb2>
 80127b8:	2301      	movs	r3, #1
 80127ba:	4652      	mov	r2, sl
 80127bc:	4641      	mov	r1, r8
 80127be:	4638      	mov	r0, r7
 80127c0:	47c8      	blx	r9
 80127c2:	3001      	adds	r0, #1
 80127c4:	d103      	bne.n	80127ce <_printf_common+0xb6>
 80127c6:	f04f 30ff 	mov.w	r0, #4294967295
 80127ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127ce:	3501      	adds	r5, #1
 80127d0:	e7c1      	b.n	8012756 <_printf_common+0x3e>
 80127d2:	18e1      	adds	r1, r4, r3
 80127d4:	1c5a      	adds	r2, r3, #1
 80127d6:	2030      	movs	r0, #48	@ 0x30
 80127d8:	3302      	adds	r3, #2
 80127da:	4422      	add	r2, r4
 80127dc:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80127e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80127e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80127e8:	e7c2      	b.n	8012770 <_printf_common+0x58>
 80127ea:	2301      	movs	r3, #1
 80127ec:	4622      	mov	r2, r4
 80127ee:	4641      	mov	r1, r8
 80127f0:	4638      	mov	r0, r7
 80127f2:	47c8      	blx	r9
 80127f4:	3001      	adds	r0, #1
 80127f6:	d0e6      	beq.n	80127c6 <_printf_common+0xae>
 80127f8:	3601      	adds	r6, #1
 80127fa:	e7d9      	b.n	80127b0 <_printf_common+0x98>

080127fc <_printf_i>:
 80127fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012800:	7e0f      	ldrb	r7, [r1, #24]
 8012802:	4691      	mov	r9, r2
 8012804:	4680      	mov	r8, r0
 8012806:	460c      	mov	r4, r1
 8012808:	2f78      	cmp	r7, #120	@ 0x78
 801280a:	469a      	mov	sl, r3
 801280c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801280e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012812:	d807      	bhi.n	8012824 <_printf_i+0x28>
 8012814:	2f62      	cmp	r7, #98	@ 0x62
 8012816:	d80a      	bhi.n	801282e <_printf_i+0x32>
 8012818:	2f00      	cmp	r7, #0
 801281a:	f000 80d2 	beq.w	80129c2 <_printf_i+0x1c6>
 801281e:	2f58      	cmp	r7, #88	@ 0x58
 8012820:	f000 80b9 	beq.w	8012996 <_printf_i+0x19a>
 8012824:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012828:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801282c:	e03a      	b.n	80128a4 <_printf_i+0xa8>
 801282e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012832:	2b15      	cmp	r3, #21
 8012834:	d8f6      	bhi.n	8012824 <_printf_i+0x28>
 8012836:	a101      	add	r1, pc, #4	@ (adr r1, 801283c <_printf_i+0x40>)
 8012838:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801283c:	08012895 	.word	0x08012895
 8012840:	080128a9 	.word	0x080128a9
 8012844:	08012825 	.word	0x08012825
 8012848:	08012825 	.word	0x08012825
 801284c:	08012825 	.word	0x08012825
 8012850:	08012825 	.word	0x08012825
 8012854:	080128a9 	.word	0x080128a9
 8012858:	08012825 	.word	0x08012825
 801285c:	08012825 	.word	0x08012825
 8012860:	08012825 	.word	0x08012825
 8012864:	08012825 	.word	0x08012825
 8012868:	080129a9 	.word	0x080129a9
 801286c:	080128d3 	.word	0x080128d3
 8012870:	08012963 	.word	0x08012963
 8012874:	08012825 	.word	0x08012825
 8012878:	08012825 	.word	0x08012825
 801287c:	080129cb 	.word	0x080129cb
 8012880:	08012825 	.word	0x08012825
 8012884:	080128d3 	.word	0x080128d3
 8012888:	08012825 	.word	0x08012825
 801288c:	08012825 	.word	0x08012825
 8012890:	0801296b 	.word	0x0801296b
 8012894:	6833      	ldr	r3, [r6, #0]
 8012896:	1d1a      	adds	r2, r3, #4
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	6032      	str	r2, [r6, #0]
 801289c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80128a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80128a4:	2301      	movs	r3, #1
 80128a6:	e09d      	b.n	80129e4 <_printf_i+0x1e8>
 80128a8:	6833      	ldr	r3, [r6, #0]
 80128aa:	6820      	ldr	r0, [r4, #0]
 80128ac:	1d19      	adds	r1, r3, #4
 80128ae:	6031      	str	r1, [r6, #0]
 80128b0:	0606      	lsls	r6, r0, #24
 80128b2:	d501      	bpl.n	80128b8 <_printf_i+0xbc>
 80128b4:	681d      	ldr	r5, [r3, #0]
 80128b6:	e003      	b.n	80128c0 <_printf_i+0xc4>
 80128b8:	0645      	lsls	r5, r0, #25
 80128ba:	d5fb      	bpl.n	80128b4 <_printf_i+0xb8>
 80128bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80128c0:	2d00      	cmp	r5, #0
 80128c2:	da03      	bge.n	80128cc <_printf_i+0xd0>
 80128c4:	232d      	movs	r3, #45	@ 0x2d
 80128c6:	426d      	negs	r5, r5
 80128c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80128cc:	4859      	ldr	r0, [pc, #356]	@ (8012a34 <_printf_i+0x238>)
 80128ce:	230a      	movs	r3, #10
 80128d0:	e011      	b.n	80128f6 <_printf_i+0xfa>
 80128d2:	6821      	ldr	r1, [r4, #0]
 80128d4:	6833      	ldr	r3, [r6, #0]
 80128d6:	0608      	lsls	r0, r1, #24
 80128d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80128dc:	d402      	bmi.n	80128e4 <_printf_i+0xe8>
 80128de:	0649      	lsls	r1, r1, #25
 80128e0:	bf48      	it	mi
 80128e2:	b2ad      	uxthmi	r5, r5
 80128e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80128e6:	6033      	str	r3, [r6, #0]
 80128e8:	4852      	ldr	r0, [pc, #328]	@ (8012a34 <_printf_i+0x238>)
 80128ea:	bf14      	ite	ne
 80128ec:	230a      	movne	r3, #10
 80128ee:	2308      	moveq	r3, #8
 80128f0:	2100      	movs	r1, #0
 80128f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80128f6:	6866      	ldr	r6, [r4, #4]
 80128f8:	2e00      	cmp	r6, #0
 80128fa:	60a6      	str	r6, [r4, #8]
 80128fc:	bfa2      	ittt	ge
 80128fe:	6821      	ldrge	r1, [r4, #0]
 8012900:	f021 0104 	bicge.w	r1, r1, #4
 8012904:	6021      	strge	r1, [r4, #0]
 8012906:	b90d      	cbnz	r5, 801290c <_printf_i+0x110>
 8012908:	2e00      	cmp	r6, #0
 801290a:	d04b      	beq.n	80129a4 <_printf_i+0x1a8>
 801290c:	4616      	mov	r6, r2
 801290e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012912:	fb03 5711 	mls	r7, r3, r1, r5
 8012916:	5dc7      	ldrb	r7, [r0, r7]
 8012918:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801291c:	462f      	mov	r7, r5
 801291e:	460d      	mov	r5, r1
 8012920:	42bb      	cmp	r3, r7
 8012922:	d9f4      	bls.n	801290e <_printf_i+0x112>
 8012924:	2b08      	cmp	r3, #8
 8012926:	d10b      	bne.n	8012940 <_printf_i+0x144>
 8012928:	6823      	ldr	r3, [r4, #0]
 801292a:	07df      	lsls	r7, r3, #31
 801292c:	d508      	bpl.n	8012940 <_printf_i+0x144>
 801292e:	6923      	ldr	r3, [r4, #16]
 8012930:	6861      	ldr	r1, [r4, #4]
 8012932:	4299      	cmp	r1, r3
 8012934:	bfde      	ittt	le
 8012936:	2330      	movle	r3, #48	@ 0x30
 8012938:	f806 3c01 	strble.w	r3, [r6, #-1]
 801293c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012940:	1b92      	subs	r2, r2, r6
 8012942:	6122      	str	r2, [r4, #16]
 8012944:	464b      	mov	r3, r9
 8012946:	aa03      	add	r2, sp, #12
 8012948:	4621      	mov	r1, r4
 801294a:	4640      	mov	r0, r8
 801294c:	f8cd a000 	str.w	sl, [sp]
 8012950:	f7ff fee2 	bl	8012718 <_printf_common>
 8012954:	3001      	adds	r0, #1
 8012956:	d14a      	bne.n	80129ee <_printf_i+0x1f2>
 8012958:	f04f 30ff 	mov.w	r0, #4294967295
 801295c:	b004      	add	sp, #16
 801295e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012962:	6823      	ldr	r3, [r4, #0]
 8012964:	f043 0320 	orr.w	r3, r3, #32
 8012968:	6023      	str	r3, [r4, #0]
 801296a:	2778      	movs	r7, #120	@ 0x78
 801296c:	4832      	ldr	r0, [pc, #200]	@ (8012a38 <_printf_i+0x23c>)
 801296e:	6823      	ldr	r3, [r4, #0]
 8012970:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012974:	061f      	lsls	r7, r3, #24
 8012976:	6831      	ldr	r1, [r6, #0]
 8012978:	f851 5b04 	ldr.w	r5, [r1], #4
 801297c:	d402      	bmi.n	8012984 <_printf_i+0x188>
 801297e:	065f      	lsls	r7, r3, #25
 8012980:	bf48      	it	mi
 8012982:	b2ad      	uxthmi	r5, r5
 8012984:	6031      	str	r1, [r6, #0]
 8012986:	07d9      	lsls	r1, r3, #31
 8012988:	bf44      	itt	mi
 801298a:	f043 0320 	orrmi.w	r3, r3, #32
 801298e:	6023      	strmi	r3, [r4, #0]
 8012990:	b11d      	cbz	r5, 801299a <_printf_i+0x19e>
 8012992:	2310      	movs	r3, #16
 8012994:	e7ac      	b.n	80128f0 <_printf_i+0xf4>
 8012996:	4827      	ldr	r0, [pc, #156]	@ (8012a34 <_printf_i+0x238>)
 8012998:	e7e9      	b.n	801296e <_printf_i+0x172>
 801299a:	6823      	ldr	r3, [r4, #0]
 801299c:	f023 0320 	bic.w	r3, r3, #32
 80129a0:	6023      	str	r3, [r4, #0]
 80129a2:	e7f6      	b.n	8012992 <_printf_i+0x196>
 80129a4:	4616      	mov	r6, r2
 80129a6:	e7bd      	b.n	8012924 <_printf_i+0x128>
 80129a8:	6833      	ldr	r3, [r6, #0]
 80129aa:	6825      	ldr	r5, [r4, #0]
 80129ac:	1d18      	adds	r0, r3, #4
 80129ae:	6961      	ldr	r1, [r4, #20]
 80129b0:	6030      	str	r0, [r6, #0]
 80129b2:	062e      	lsls	r6, r5, #24
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	d501      	bpl.n	80129bc <_printf_i+0x1c0>
 80129b8:	6019      	str	r1, [r3, #0]
 80129ba:	e002      	b.n	80129c2 <_printf_i+0x1c6>
 80129bc:	0668      	lsls	r0, r5, #25
 80129be:	d5fb      	bpl.n	80129b8 <_printf_i+0x1bc>
 80129c0:	8019      	strh	r1, [r3, #0]
 80129c2:	2300      	movs	r3, #0
 80129c4:	4616      	mov	r6, r2
 80129c6:	6123      	str	r3, [r4, #16]
 80129c8:	e7bc      	b.n	8012944 <_printf_i+0x148>
 80129ca:	6833      	ldr	r3, [r6, #0]
 80129cc:	2100      	movs	r1, #0
 80129ce:	1d1a      	adds	r2, r3, #4
 80129d0:	6032      	str	r2, [r6, #0]
 80129d2:	681e      	ldr	r6, [r3, #0]
 80129d4:	6862      	ldr	r2, [r4, #4]
 80129d6:	4630      	mov	r0, r6
 80129d8:	f000 f99a 	bl	8012d10 <memchr>
 80129dc:	b108      	cbz	r0, 80129e2 <_printf_i+0x1e6>
 80129de:	1b80      	subs	r0, r0, r6
 80129e0:	6060      	str	r0, [r4, #4]
 80129e2:	6863      	ldr	r3, [r4, #4]
 80129e4:	6123      	str	r3, [r4, #16]
 80129e6:	2300      	movs	r3, #0
 80129e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80129ec:	e7aa      	b.n	8012944 <_printf_i+0x148>
 80129ee:	6923      	ldr	r3, [r4, #16]
 80129f0:	4632      	mov	r2, r6
 80129f2:	4649      	mov	r1, r9
 80129f4:	4640      	mov	r0, r8
 80129f6:	47d0      	blx	sl
 80129f8:	3001      	adds	r0, #1
 80129fa:	d0ad      	beq.n	8012958 <_printf_i+0x15c>
 80129fc:	6823      	ldr	r3, [r4, #0]
 80129fe:	079b      	lsls	r3, r3, #30
 8012a00:	d413      	bmi.n	8012a2a <_printf_i+0x22e>
 8012a02:	68e0      	ldr	r0, [r4, #12]
 8012a04:	9b03      	ldr	r3, [sp, #12]
 8012a06:	4298      	cmp	r0, r3
 8012a08:	bfb8      	it	lt
 8012a0a:	4618      	movlt	r0, r3
 8012a0c:	e7a6      	b.n	801295c <_printf_i+0x160>
 8012a0e:	2301      	movs	r3, #1
 8012a10:	4632      	mov	r2, r6
 8012a12:	4649      	mov	r1, r9
 8012a14:	4640      	mov	r0, r8
 8012a16:	47d0      	blx	sl
 8012a18:	3001      	adds	r0, #1
 8012a1a:	d09d      	beq.n	8012958 <_printf_i+0x15c>
 8012a1c:	3501      	adds	r5, #1
 8012a1e:	68e3      	ldr	r3, [r4, #12]
 8012a20:	9903      	ldr	r1, [sp, #12]
 8012a22:	1a5b      	subs	r3, r3, r1
 8012a24:	42ab      	cmp	r3, r5
 8012a26:	dcf2      	bgt.n	8012a0e <_printf_i+0x212>
 8012a28:	e7eb      	b.n	8012a02 <_printf_i+0x206>
 8012a2a:	2500      	movs	r5, #0
 8012a2c:	f104 0619 	add.w	r6, r4, #25
 8012a30:	e7f5      	b.n	8012a1e <_printf_i+0x222>
 8012a32:	bf00      	nop
 8012a34:	08013bad 	.word	0x08013bad
 8012a38:	08013bbe 	.word	0x08013bbe

08012a3c <__sflush_r>:
 8012a3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a44:	0716      	lsls	r6, r2, #28
 8012a46:	4605      	mov	r5, r0
 8012a48:	460c      	mov	r4, r1
 8012a4a:	d454      	bmi.n	8012af6 <__sflush_r+0xba>
 8012a4c:	684b      	ldr	r3, [r1, #4]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	dc02      	bgt.n	8012a58 <__sflush_r+0x1c>
 8012a52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	dd48      	ble.n	8012aea <__sflush_r+0xae>
 8012a58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012a5a:	2e00      	cmp	r6, #0
 8012a5c:	d045      	beq.n	8012aea <__sflush_r+0xae>
 8012a5e:	2300      	movs	r3, #0
 8012a60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012a64:	682f      	ldr	r7, [r5, #0]
 8012a66:	6a21      	ldr	r1, [r4, #32]
 8012a68:	602b      	str	r3, [r5, #0]
 8012a6a:	d030      	beq.n	8012ace <__sflush_r+0x92>
 8012a6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012a6e:	89a3      	ldrh	r3, [r4, #12]
 8012a70:	0759      	lsls	r1, r3, #29
 8012a72:	d505      	bpl.n	8012a80 <__sflush_r+0x44>
 8012a74:	6863      	ldr	r3, [r4, #4]
 8012a76:	1ad2      	subs	r2, r2, r3
 8012a78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012a7a:	b10b      	cbz	r3, 8012a80 <__sflush_r+0x44>
 8012a7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012a7e:	1ad2      	subs	r2, r2, r3
 8012a80:	2300      	movs	r3, #0
 8012a82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012a84:	6a21      	ldr	r1, [r4, #32]
 8012a86:	4628      	mov	r0, r5
 8012a88:	47b0      	blx	r6
 8012a8a:	1c43      	adds	r3, r0, #1
 8012a8c:	89a3      	ldrh	r3, [r4, #12]
 8012a8e:	d106      	bne.n	8012a9e <__sflush_r+0x62>
 8012a90:	6829      	ldr	r1, [r5, #0]
 8012a92:	291d      	cmp	r1, #29
 8012a94:	d82b      	bhi.n	8012aee <__sflush_r+0xb2>
 8012a96:	4a2a      	ldr	r2, [pc, #168]	@ (8012b40 <__sflush_r+0x104>)
 8012a98:	410a      	asrs	r2, r1
 8012a9a:	07d6      	lsls	r6, r2, #31
 8012a9c:	d427      	bmi.n	8012aee <__sflush_r+0xb2>
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	04d9      	lsls	r1, r3, #19
 8012aa2:	6062      	str	r2, [r4, #4]
 8012aa4:	6922      	ldr	r2, [r4, #16]
 8012aa6:	6022      	str	r2, [r4, #0]
 8012aa8:	d504      	bpl.n	8012ab4 <__sflush_r+0x78>
 8012aaa:	1c42      	adds	r2, r0, #1
 8012aac:	d101      	bne.n	8012ab2 <__sflush_r+0x76>
 8012aae:	682b      	ldr	r3, [r5, #0]
 8012ab0:	b903      	cbnz	r3, 8012ab4 <__sflush_r+0x78>
 8012ab2:	6560      	str	r0, [r4, #84]	@ 0x54
 8012ab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012ab6:	602f      	str	r7, [r5, #0]
 8012ab8:	b1b9      	cbz	r1, 8012aea <__sflush_r+0xae>
 8012aba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012abe:	4299      	cmp	r1, r3
 8012ac0:	d002      	beq.n	8012ac8 <__sflush_r+0x8c>
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	f7ff fa96 	bl	8011ff4 <_free_r>
 8012ac8:	2300      	movs	r3, #0
 8012aca:	6363      	str	r3, [r4, #52]	@ 0x34
 8012acc:	e00d      	b.n	8012aea <__sflush_r+0xae>
 8012ace:	2301      	movs	r3, #1
 8012ad0:	4628      	mov	r0, r5
 8012ad2:	47b0      	blx	r6
 8012ad4:	4602      	mov	r2, r0
 8012ad6:	1c50      	adds	r0, r2, #1
 8012ad8:	d1c9      	bne.n	8012a6e <__sflush_r+0x32>
 8012ada:	682b      	ldr	r3, [r5, #0]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d0c6      	beq.n	8012a6e <__sflush_r+0x32>
 8012ae0:	2b1d      	cmp	r3, #29
 8012ae2:	d001      	beq.n	8012ae8 <__sflush_r+0xac>
 8012ae4:	2b16      	cmp	r3, #22
 8012ae6:	d11d      	bne.n	8012b24 <__sflush_r+0xe8>
 8012ae8:	602f      	str	r7, [r5, #0]
 8012aea:	2000      	movs	r0, #0
 8012aec:	e021      	b.n	8012b32 <__sflush_r+0xf6>
 8012aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012af2:	b21b      	sxth	r3, r3
 8012af4:	e01a      	b.n	8012b2c <__sflush_r+0xf0>
 8012af6:	690f      	ldr	r7, [r1, #16]
 8012af8:	2f00      	cmp	r7, #0
 8012afa:	d0f6      	beq.n	8012aea <__sflush_r+0xae>
 8012afc:	0793      	lsls	r3, r2, #30
 8012afe:	680e      	ldr	r6, [r1, #0]
 8012b00:	600f      	str	r7, [r1, #0]
 8012b02:	bf0c      	ite	eq
 8012b04:	694b      	ldreq	r3, [r1, #20]
 8012b06:	2300      	movne	r3, #0
 8012b08:	eba6 0807 	sub.w	r8, r6, r7
 8012b0c:	608b      	str	r3, [r1, #8]
 8012b0e:	f1b8 0f00 	cmp.w	r8, #0
 8012b12:	ddea      	ble.n	8012aea <__sflush_r+0xae>
 8012b14:	4643      	mov	r3, r8
 8012b16:	463a      	mov	r2, r7
 8012b18:	6a21      	ldr	r1, [r4, #32]
 8012b1a:	4628      	mov	r0, r5
 8012b1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8012b1e:	47b0      	blx	r6
 8012b20:	2800      	cmp	r0, #0
 8012b22:	dc08      	bgt.n	8012b36 <__sflush_r+0xfa>
 8012b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b30:	81a3      	strh	r3, [r4, #12]
 8012b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b36:	4407      	add	r7, r0
 8012b38:	eba8 0800 	sub.w	r8, r8, r0
 8012b3c:	e7e7      	b.n	8012b0e <__sflush_r+0xd2>
 8012b3e:	bf00      	nop
 8012b40:	dfbffffe 	.word	0xdfbffffe

08012b44 <_fflush_r>:
 8012b44:	b538      	push	{r3, r4, r5, lr}
 8012b46:	690b      	ldr	r3, [r1, #16]
 8012b48:	4605      	mov	r5, r0
 8012b4a:	460c      	mov	r4, r1
 8012b4c:	b913      	cbnz	r3, 8012b54 <_fflush_r+0x10>
 8012b4e:	2500      	movs	r5, #0
 8012b50:	4628      	mov	r0, r5
 8012b52:	bd38      	pop	{r3, r4, r5, pc}
 8012b54:	b118      	cbz	r0, 8012b5e <_fflush_r+0x1a>
 8012b56:	6a03      	ldr	r3, [r0, #32]
 8012b58:	b90b      	cbnz	r3, 8012b5e <_fflush_r+0x1a>
 8012b5a:	f7ff f8ab 	bl	8011cb4 <__sinit>
 8012b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d0f3      	beq.n	8012b4e <_fflush_r+0xa>
 8012b66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8012b68:	07d0      	lsls	r0, r2, #31
 8012b6a:	d404      	bmi.n	8012b76 <_fflush_r+0x32>
 8012b6c:	0599      	lsls	r1, r3, #22
 8012b6e:	d402      	bmi.n	8012b76 <_fflush_r+0x32>
 8012b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b72:	f7ff fa30 	bl	8011fd6 <__retarget_lock_acquire_recursive>
 8012b76:	4628      	mov	r0, r5
 8012b78:	4621      	mov	r1, r4
 8012b7a:	f7ff ff5f 	bl	8012a3c <__sflush_r>
 8012b7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012b80:	4605      	mov	r5, r0
 8012b82:	07da      	lsls	r2, r3, #31
 8012b84:	d4e4      	bmi.n	8012b50 <_fflush_r+0xc>
 8012b86:	89a3      	ldrh	r3, [r4, #12]
 8012b88:	059b      	lsls	r3, r3, #22
 8012b8a:	d4e1      	bmi.n	8012b50 <_fflush_r+0xc>
 8012b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012b8e:	f7ff fa23 	bl	8011fd8 <__retarget_lock_release_recursive>
 8012b92:	e7dd      	b.n	8012b50 <_fflush_r+0xc>

08012b94 <__swbuf_r>:
 8012b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b96:	460e      	mov	r6, r1
 8012b98:	4614      	mov	r4, r2
 8012b9a:	4605      	mov	r5, r0
 8012b9c:	b118      	cbz	r0, 8012ba6 <__swbuf_r+0x12>
 8012b9e:	6a03      	ldr	r3, [r0, #32]
 8012ba0:	b90b      	cbnz	r3, 8012ba6 <__swbuf_r+0x12>
 8012ba2:	f7ff f887 	bl	8011cb4 <__sinit>
 8012ba6:	69a3      	ldr	r3, [r4, #24]
 8012ba8:	60a3      	str	r3, [r4, #8]
 8012baa:	89a3      	ldrh	r3, [r4, #12]
 8012bac:	071a      	lsls	r2, r3, #28
 8012bae:	d501      	bpl.n	8012bb4 <__swbuf_r+0x20>
 8012bb0:	6923      	ldr	r3, [r4, #16]
 8012bb2:	b943      	cbnz	r3, 8012bc6 <__swbuf_r+0x32>
 8012bb4:	4621      	mov	r1, r4
 8012bb6:	4628      	mov	r0, r5
 8012bb8:	f000 f82a 	bl	8012c10 <__swsetup_r>
 8012bbc:	b118      	cbz	r0, 8012bc6 <__swbuf_r+0x32>
 8012bbe:	f04f 37ff 	mov.w	r7, #4294967295
 8012bc2:	4638      	mov	r0, r7
 8012bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bc6:	6823      	ldr	r3, [r4, #0]
 8012bc8:	b2f6      	uxtb	r6, r6
 8012bca:	6922      	ldr	r2, [r4, #16]
 8012bcc:	4637      	mov	r7, r6
 8012bce:	1a98      	subs	r0, r3, r2
 8012bd0:	6963      	ldr	r3, [r4, #20]
 8012bd2:	4283      	cmp	r3, r0
 8012bd4:	dc05      	bgt.n	8012be2 <__swbuf_r+0x4e>
 8012bd6:	4621      	mov	r1, r4
 8012bd8:	4628      	mov	r0, r5
 8012bda:	f7ff ffb3 	bl	8012b44 <_fflush_r>
 8012bde:	2800      	cmp	r0, #0
 8012be0:	d1ed      	bne.n	8012bbe <__swbuf_r+0x2a>
 8012be2:	68a3      	ldr	r3, [r4, #8]
 8012be4:	3b01      	subs	r3, #1
 8012be6:	60a3      	str	r3, [r4, #8]
 8012be8:	6823      	ldr	r3, [r4, #0]
 8012bea:	1c5a      	adds	r2, r3, #1
 8012bec:	6022      	str	r2, [r4, #0]
 8012bee:	701e      	strb	r6, [r3, #0]
 8012bf0:	1c43      	adds	r3, r0, #1
 8012bf2:	6962      	ldr	r2, [r4, #20]
 8012bf4:	429a      	cmp	r2, r3
 8012bf6:	d004      	beq.n	8012c02 <__swbuf_r+0x6e>
 8012bf8:	89a3      	ldrh	r3, [r4, #12]
 8012bfa:	07db      	lsls	r3, r3, #31
 8012bfc:	d5e1      	bpl.n	8012bc2 <__swbuf_r+0x2e>
 8012bfe:	2e0a      	cmp	r6, #10
 8012c00:	d1df      	bne.n	8012bc2 <__swbuf_r+0x2e>
 8012c02:	4621      	mov	r1, r4
 8012c04:	4628      	mov	r0, r5
 8012c06:	f7ff ff9d 	bl	8012b44 <_fflush_r>
 8012c0a:	2800      	cmp	r0, #0
 8012c0c:	d0d9      	beq.n	8012bc2 <__swbuf_r+0x2e>
 8012c0e:	e7d6      	b.n	8012bbe <__swbuf_r+0x2a>

08012c10 <__swsetup_r>:
 8012c10:	b538      	push	{r3, r4, r5, lr}
 8012c12:	4b29      	ldr	r3, [pc, #164]	@ (8012cb8 <__swsetup_r+0xa8>)
 8012c14:	4605      	mov	r5, r0
 8012c16:	460c      	mov	r4, r1
 8012c18:	6818      	ldr	r0, [r3, #0]
 8012c1a:	b118      	cbz	r0, 8012c24 <__swsetup_r+0x14>
 8012c1c:	6a03      	ldr	r3, [r0, #32]
 8012c1e:	b90b      	cbnz	r3, 8012c24 <__swsetup_r+0x14>
 8012c20:	f7ff f848 	bl	8011cb4 <__sinit>
 8012c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c28:	0719      	lsls	r1, r3, #28
 8012c2a:	d422      	bmi.n	8012c72 <__swsetup_r+0x62>
 8012c2c:	06da      	lsls	r2, r3, #27
 8012c2e:	d407      	bmi.n	8012c40 <__swsetup_r+0x30>
 8012c30:	2209      	movs	r2, #9
 8012c32:	602a      	str	r2, [r5, #0]
 8012c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012c38:	f04f 30ff 	mov.w	r0, #4294967295
 8012c3c:	81a3      	strh	r3, [r4, #12]
 8012c3e:	e033      	b.n	8012ca8 <__swsetup_r+0x98>
 8012c40:	0758      	lsls	r0, r3, #29
 8012c42:	d512      	bpl.n	8012c6a <__swsetup_r+0x5a>
 8012c44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012c46:	b141      	cbz	r1, 8012c5a <__swsetup_r+0x4a>
 8012c48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012c4c:	4299      	cmp	r1, r3
 8012c4e:	d002      	beq.n	8012c56 <__swsetup_r+0x46>
 8012c50:	4628      	mov	r0, r5
 8012c52:	f7ff f9cf 	bl	8011ff4 <_free_r>
 8012c56:	2300      	movs	r3, #0
 8012c58:	6363      	str	r3, [r4, #52]	@ 0x34
 8012c5a:	89a3      	ldrh	r3, [r4, #12]
 8012c5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012c60:	81a3      	strh	r3, [r4, #12]
 8012c62:	2300      	movs	r3, #0
 8012c64:	6063      	str	r3, [r4, #4]
 8012c66:	6923      	ldr	r3, [r4, #16]
 8012c68:	6023      	str	r3, [r4, #0]
 8012c6a:	89a3      	ldrh	r3, [r4, #12]
 8012c6c:	f043 0308 	orr.w	r3, r3, #8
 8012c70:	81a3      	strh	r3, [r4, #12]
 8012c72:	6923      	ldr	r3, [r4, #16]
 8012c74:	b94b      	cbnz	r3, 8012c8a <__swsetup_r+0x7a>
 8012c76:	89a3      	ldrh	r3, [r4, #12]
 8012c78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012c7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012c80:	d003      	beq.n	8012c8a <__swsetup_r+0x7a>
 8012c82:	4621      	mov	r1, r4
 8012c84:	4628      	mov	r0, r5
 8012c86:	f000 f8a4 	bl	8012dd2 <__smakebuf_r>
 8012c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c8e:	f013 0201 	ands.w	r2, r3, #1
 8012c92:	d00a      	beq.n	8012caa <__swsetup_r+0x9a>
 8012c94:	2200      	movs	r2, #0
 8012c96:	60a2      	str	r2, [r4, #8]
 8012c98:	6962      	ldr	r2, [r4, #20]
 8012c9a:	4252      	negs	r2, r2
 8012c9c:	61a2      	str	r2, [r4, #24]
 8012c9e:	6922      	ldr	r2, [r4, #16]
 8012ca0:	b942      	cbnz	r2, 8012cb4 <__swsetup_r+0xa4>
 8012ca2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012ca6:	d1c5      	bne.n	8012c34 <__swsetup_r+0x24>
 8012ca8:	bd38      	pop	{r3, r4, r5, pc}
 8012caa:	0799      	lsls	r1, r3, #30
 8012cac:	bf58      	it	pl
 8012cae:	6962      	ldrpl	r2, [r4, #20]
 8012cb0:	60a2      	str	r2, [r4, #8]
 8012cb2:	e7f4      	b.n	8012c9e <__swsetup_r+0x8e>
 8012cb4:	2000      	movs	r0, #0
 8012cb6:	e7f7      	b.n	8012ca8 <__swsetup_r+0x98>
 8012cb8:	20000130 	.word	0x20000130

08012cbc <memmove>:
 8012cbc:	4288      	cmp	r0, r1
 8012cbe:	b510      	push	{r4, lr}
 8012cc0:	eb01 0402 	add.w	r4, r1, r2
 8012cc4:	d902      	bls.n	8012ccc <memmove+0x10>
 8012cc6:	4284      	cmp	r4, r0
 8012cc8:	4623      	mov	r3, r4
 8012cca:	d807      	bhi.n	8012cdc <memmove+0x20>
 8012ccc:	1e43      	subs	r3, r0, #1
 8012cce:	42a1      	cmp	r1, r4
 8012cd0:	d008      	beq.n	8012ce4 <memmove+0x28>
 8012cd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012cd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012cda:	e7f8      	b.n	8012cce <memmove+0x12>
 8012cdc:	4402      	add	r2, r0
 8012cde:	4601      	mov	r1, r0
 8012ce0:	428a      	cmp	r2, r1
 8012ce2:	d100      	bne.n	8012ce6 <memmove+0x2a>
 8012ce4:	bd10      	pop	{r4, pc}
 8012ce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012cea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012cee:	e7f7      	b.n	8012ce0 <memmove+0x24>

08012cf0 <_sbrk_r>:
 8012cf0:	b538      	push	{r3, r4, r5, lr}
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	4d05      	ldr	r5, [pc, #20]	@ (8012d0c <_sbrk_r+0x1c>)
 8012cf6:	4604      	mov	r4, r0
 8012cf8:	4608      	mov	r0, r1
 8012cfa:	602b      	str	r3, [r5, #0]
 8012cfc:	f7ef fdb4 	bl	8002868 <_sbrk>
 8012d00:	1c43      	adds	r3, r0, #1
 8012d02:	d102      	bne.n	8012d0a <_sbrk_r+0x1a>
 8012d04:	682b      	ldr	r3, [r5, #0]
 8012d06:	b103      	cbz	r3, 8012d0a <_sbrk_r+0x1a>
 8012d08:	6023      	str	r3, [r4, #0]
 8012d0a:	bd38      	pop	{r3, r4, r5, pc}
 8012d0c:	200113e4 	.word	0x200113e4

08012d10 <memchr>:
 8012d10:	b2c9      	uxtb	r1, r1
 8012d12:	4603      	mov	r3, r0
 8012d14:	4402      	add	r2, r0
 8012d16:	b510      	push	{r4, lr}
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	d101      	bne.n	8012d22 <memchr+0x12>
 8012d1e:	2000      	movs	r0, #0
 8012d20:	e003      	b.n	8012d2a <memchr+0x1a>
 8012d22:	7804      	ldrb	r4, [r0, #0]
 8012d24:	3301      	adds	r3, #1
 8012d26:	428c      	cmp	r4, r1
 8012d28:	d1f6      	bne.n	8012d18 <memchr+0x8>
 8012d2a:	bd10      	pop	{r4, pc}

08012d2c <_realloc_r>:
 8012d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d30:	4680      	mov	r8, r0
 8012d32:	4615      	mov	r5, r2
 8012d34:	460c      	mov	r4, r1
 8012d36:	b921      	cbnz	r1, 8012d42 <_realloc_r+0x16>
 8012d38:	4611      	mov	r1, r2
 8012d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d3e:	f7ff b9c5 	b.w	80120cc <_malloc_r>
 8012d42:	b92a      	cbnz	r2, 8012d50 <_realloc_r+0x24>
 8012d44:	f7ff f956 	bl	8011ff4 <_free_r>
 8012d48:	2400      	movs	r4, #0
 8012d4a:	4620      	mov	r0, r4
 8012d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d50:	f000 f89e 	bl	8012e90 <_malloc_usable_size_r>
 8012d54:	4285      	cmp	r5, r0
 8012d56:	4606      	mov	r6, r0
 8012d58:	d802      	bhi.n	8012d60 <_realloc_r+0x34>
 8012d5a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8012d5e:	d8f4      	bhi.n	8012d4a <_realloc_r+0x1e>
 8012d60:	4629      	mov	r1, r5
 8012d62:	4640      	mov	r0, r8
 8012d64:	f7ff f9b2 	bl	80120cc <_malloc_r>
 8012d68:	4607      	mov	r7, r0
 8012d6a:	2800      	cmp	r0, #0
 8012d6c:	d0ec      	beq.n	8012d48 <_realloc_r+0x1c>
 8012d6e:	42b5      	cmp	r5, r6
 8012d70:	462a      	mov	r2, r5
 8012d72:	4621      	mov	r1, r4
 8012d74:	bf28      	it	cs
 8012d76:	4632      	movcs	r2, r6
 8012d78:	f7ff f92f 	bl	8011fda <memcpy>
 8012d7c:	4621      	mov	r1, r4
 8012d7e:	4640      	mov	r0, r8
 8012d80:	463c      	mov	r4, r7
 8012d82:	f7ff f937 	bl	8011ff4 <_free_r>
 8012d86:	e7e0      	b.n	8012d4a <_realloc_r+0x1e>

08012d88 <__swhatbuf_r>:
 8012d88:	b570      	push	{r4, r5, r6, lr}
 8012d8a:	460c      	mov	r4, r1
 8012d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d90:	b096      	sub	sp, #88	@ 0x58
 8012d92:	4615      	mov	r5, r2
 8012d94:	2900      	cmp	r1, #0
 8012d96:	461e      	mov	r6, r3
 8012d98:	da0c      	bge.n	8012db4 <__swhatbuf_r+0x2c>
 8012d9a:	89a3      	ldrh	r3, [r4, #12]
 8012d9c:	2100      	movs	r1, #0
 8012d9e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8012da2:	bf14      	ite	ne
 8012da4:	2340      	movne	r3, #64	@ 0x40
 8012da6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8012daa:	2000      	movs	r0, #0
 8012dac:	6031      	str	r1, [r6, #0]
 8012dae:	602b      	str	r3, [r5, #0]
 8012db0:	b016      	add	sp, #88	@ 0x58
 8012db2:	bd70      	pop	{r4, r5, r6, pc}
 8012db4:	466a      	mov	r2, sp
 8012db6:	f000 f849 	bl	8012e4c <_fstat_r>
 8012dba:	2800      	cmp	r0, #0
 8012dbc:	dbed      	blt.n	8012d9a <__swhatbuf_r+0x12>
 8012dbe:	9901      	ldr	r1, [sp, #4]
 8012dc0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012dc4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8012dc8:	4259      	negs	r1, r3
 8012dca:	4159      	adcs	r1, r3
 8012dcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012dd0:	e7eb      	b.n	8012daa <__swhatbuf_r+0x22>

08012dd2 <__smakebuf_r>:
 8012dd2:	898b      	ldrh	r3, [r1, #12]
 8012dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012dd6:	079d      	lsls	r5, r3, #30
 8012dd8:	4606      	mov	r6, r0
 8012dda:	460c      	mov	r4, r1
 8012ddc:	d507      	bpl.n	8012dee <__smakebuf_r+0x1c>
 8012dde:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012de2:	6023      	str	r3, [r4, #0]
 8012de4:	6123      	str	r3, [r4, #16]
 8012de6:	2301      	movs	r3, #1
 8012de8:	6163      	str	r3, [r4, #20]
 8012dea:	b003      	add	sp, #12
 8012dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dee:	ab01      	add	r3, sp, #4
 8012df0:	466a      	mov	r2, sp
 8012df2:	f7ff ffc9 	bl	8012d88 <__swhatbuf_r>
 8012df6:	9f00      	ldr	r7, [sp, #0]
 8012df8:	4605      	mov	r5, r0
 8012dfa:	4630      	mov	r0, r6
 8012dfc:	4639      	mov	r1, r7
 8012dfe:	f7ff f965 	bl	80120cc <_malloc_r>
 8012e02:	b948      	cbnz	r0, 8012e18 <__smakebuf_r+0x46>
 8012e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e08:	059a      	lsls	r2, r3, #22
 8012e0a:	d4ee      	bmi.n	8012dea <__smakebuf_r+0x18>
 8012e0c:	f023 0303 	bic.w	r3, r3, #3
 8012e10:	f043 0302 	orr.w	r3, r3, #2
 8012e14:	81a3      	strh	r3, [r4, #12]
 8012e16:	e7e2      	b.n	8012dde <__smakebuf_r+0xc>
 8012e18:	89a3      	ldrh	r3, [r4, #12]
 8012e1a:	6020      	str	r0, [r4, #0]
 8012e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012e20:	81a3      	strh	r3, [r4, #12]
 8012e22:	9b01      	ldr	r3, [sp, #4]
 8012e24:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012e28:	b15b      	cbz	r3, 8012e42 <__smakebuf_r+0x70>
 8012e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e2e:	4630      	mov	r0, r6
 8012e30:	f000 f81e 	bl	8012e70 <_isatty_r>
 8012e34:	b128      	cbz	r0, 8012e42 <__smakebuf_r+0x70>
 8012e36:	89a3      	ldrh	r3, [r4, #12]
 8012e38:	f023 0303 	bic.w	r3, r3, #3
 8012e3c:	f043 0301 	orr.w	r3, r3, #1
 8012e40:	81a3      	strh	r3, [r4, #12]
 8012e42:	89a3      	ldrh	r3, [r4, #12]
 8012e44:	431d      	orrs	r5, r3
 8012e46:	81a5      	strh	r5, [r4, #12]
 8012e48:	e7cf      	b.n	8012dea <__smakebuf_r+0x18>
	...

08012e4c <_fstat_r>:
 8012e4c:	b538      	push	{r3, r4, r5, lr}
 8012e4e:	2300      	movs	r3, #0
 8012e50:	4d06      	ldr	r5, [pc, #24]	@ (8012e6c <_fstat_r+0x20>)
 8012e52:	4604      	mov	r4, r0
 8012e54:	4608      	mov	r0, r1
 8012e56:	4611      	mov	r1, r2
 8012e58:	602b      	str	r3, [r5, #0]
 8012e5a:	f7ef fcdc 	bl	8002816 <_fstat>
 8012e5e:	1c43      	adds	r3, r0, #1
 8012e60:	d102      	bne.n	8012e68 <_fstat_r+0x1c>
 8012e62:	682b      	ldr	r3, [r5, #0]
 8012e64:	b103      	cbz	r3, 8012e68 <_fstat_r+0x1c>
 8012e66:	6023      	str	r3, [r4, #0]
 8012e68:	bd38      	pop	{r3, r4, r5, pc}
 8012e6a:	bf00      	nop
 8012e6c:	200113e4 	.word	0x200113e4

08012e70 <_isatty_r>:
 8012e70:	b538      	push	{r3, r4, r5, lr}
 8012e72:	2300      	movs	r3, #0
 8012e74:	4d05      	ldr	r5, [pc, #20]	@ (8012e8c <_isatty_r+0x1c>)
 8012e76:	4604      	mov	r4, r0
 8012e78:	4608      	mov	r0, r1
 8012e7a:	602b      	str	r3, [r5, #0]
 8012e7c:	f7ef fcdb 	bl	8002836 <_isatty>
 8012e80:	1c43      	adds	r3, r0, #1
 8012e82:	d102      	bne.n	8012e8a <_isatty_r+0x1a>
 8012e84:	682b      	ldr	r3, [r5, #0]
 8012e86:	b103      	cbz	r3, 8012e8a <_isatty_r+0x1a>
 8012e88:	6023      	str	r3, [r4, #0]
 8012e8a:	bd38      	pop	{r3, r4, r5, pc}
 8012e8c:	200113e4 	.word	0x200113e4

08012e90 <_malloc_usable_size_r>:
 8012e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e94:	1f18      	subs	r0, r3, #4
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	bfbc      	itt	lt
 8012e9a:	580b      	ldrlt	r3, [r1, r0]
 8012e9c:	18c0      	addlt	r0, r0, r3
 8012e9e:	4770      	bx	lr

08012ea0 <_init>:
 8012ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ea2:	bf00      	nop
 8012ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012ea6:	bc08      	pop	{r3}
 8012ea8:	469e      	mov	lr, r3
 8012eaa:	4770      	bx	lr

08012eac <_fini>:
 8012eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012eae:	bf00      	nop
 8012eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012eb2:	bc08      	pop	{r3}
 8012eb4:	469e      	mov	lr, r3
 8012eb6:	4770      	bx	lr
