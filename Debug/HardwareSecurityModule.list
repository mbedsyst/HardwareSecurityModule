
HardwareSecurityModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000024c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120b0  0800024c  0800024c  0000124c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000864  080122fc  080122fc  000132fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b60  08012b60  00014180  2**0
                  CONTENTS
  4 .ARM          00000008  08012b60  08012b60  00013b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b68  08012b68  00014180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b68  08012b68  00013b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012b6c  08012b6c  00013b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000180  20000000  08012b70  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011234  20000180  08012cf0  00014180  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200113b4  08012cf0  000143b4  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00014180  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002765e  00000000  00000000  000141b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055c0  00000000  00000000  0003b814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001eb0  00000000  00000000  00040dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001771  00000000  00000000  00042c88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039507  00000000  00000000  000443f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e743  00000000  00000000  0007d900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0014c1d5  00000000  00000000  000ac043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f8218  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b0c  00000000  00000000  001f825c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  00200d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	@ (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x20>)
 800025a:	f3af 8000 	nop.w
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	20000180 	.word	0x20000180
 8000268:	00000000 	.word	0x00000000
 800026c:	080122e4 	.word	0x080122e4

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	@ (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	@ (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	@ (8000288 <frame_dummy+0x18>)
 800027a:	f3af 8000 	nop.w
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000184 	.word	0x20000184
 8000288:	080122e4 	.word	0x080122e4

0800028c <__aeabi_uldivmod>:
 800028c:	b953      	cbnz	r3, 80002a4 <__aeabi_uldivmod+0x18>
 800028e:	b94a      	cbnz	r2, 80002a4 <__aeabi_uldivmod+0x18>
 8000290:	2900      	cmp	r1, #0
 8000292:	bf08      	it	eq
 8000294:	2800      	cmpeq	r0, #0
 8000296:	bf1c      	itt	ne
 8000298:	f04f 31ff 	movne.w	r1, #4294967295
 800029c:	f04f 30ff 	movne.w	r0, #4294967295
 80002a0:	f000 b97e 	b.w	80005a0 <__aeabi_idiv0>
 80002a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ac:	f000 f806 	bl	80002bc <__udivmoddi4>
 80002b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b8:	b004      	add	sp, #16
 80002ba:	4770      	bx	lr

080002bc <__udivmoddi4>:
 80002bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002c0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002c2:	460c      	mov	r4, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d14d      	bne.n	8000364 <__udivmoddi4+0xa8>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	460f      	mov	r7, r1
 80002cc:	4684      	mov	ip, r0
 80002ce:	4696      	mov	lr, r2
 80002d0:	fab2 f382 	clz	r3, r2
 80002d4:	d960      	bls.n	8000398 <__udivmoddi4+0xdc>
 80002d6:	b14b      	cbz	r3, 80002ec <__udivmoddi4+0x30>
 80002d8:	fa02 fe03 	lsl.w	lr, r2, r3
 80002dc:	f1c3 0220 	rsb	r2, r3, #32
 80002e0:	409f      	lsls	r7, r3
 80002e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002f0:	fa1f f48e 	uxth.w	r4, lr
 80002f4:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002f8:	fbb7 f1f6 	udiv	r1, r7, r6
 80002fc:	fb06 7711 	mls	r7, r6, r1, r7
 8000300:	fb01 f004 	mul.w	r0, r1, r4
 8000304:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000308:	4290      	cmp	r0, r2
 800030a:	d908      	bls.n	800031e <__udivmoddi4+0x62>
 800030c:	eb1e 0202 	adds.w	r2, lr, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x60>
 8000316:	4290      	cmp	r0, r2
 8000318:	f200 812d 	bhi.w	8000576 <__udivmoddi4+0x2ba>
 800031c:	4639      	mov	r1, r7
 800031e:	1a12      	subs	r2, r2, r0
 8000320:	fa1f fc8c 	uxth.w	ip, ip
 8000324:	fbb2 f0f6 	udiv	r0, r2, r6
 8000328:	fb06 2210 	mls	r2, r6, r0, r2
 800032c:	fb00 f404 	mul.w	r4, r0, r4
 8000330:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000334:	4564      	cmp	r4, ip
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x8e>
 8000338:	eb1e 0c0c 	adds.w	ip, lr, ip
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x8c>
 8000342:	4564      	cmp	r4, ip
 8000344:	f200 811a 	bhi.w	800057c <__udivmoddi4+0x2c0>
 8000348:	4610      	mov	r0, r2
 800034a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800034e:	ebac 0c04 	sub.w	ip, ip, r4
 8000352:	2100      	movs	r1, #0
 8000354:	b125      	cbz	r5, 8000360 <__udivmoddi4+0xa4>
 8000356:	fa2c f303 	lsr.w	r3, ip, r3
 800035a:	2200      	movs	r2, #0
 800035c:	e9c5 3200 	strd	r3, r2, [r5]
 8000360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d905      	bls.n	8000374 <__udivmoddi4+0xb8>
 8000368:	b10d      	cbz	r5, 800036e <__udivmoddi4+0xb2>
 800036a:	e9c5 0100 	strd	r0, r1, [r5]
 800036e:	2100      	movs	r1, #0
 8000370:	4608      	mov	r0, r1
 8000372:	e7f5      	b.n	8000360 <__udivmoddi4+0xa4>
 8000374:	fab3 f183 	clz	r1, r3
 8000378:	2900      	cmp	r1, #0
 800037a:	d14d      	bne.n	8000418 <__udivmoddi4+0x15c>
 800037c:	42a3      	cmp	r3, r4
 800037e:	f0c0 80f2 	bcc.w	8000566 <__udivmoddi4+0x2aa>
 8000382:	4290      	cmp	r0, r2
 8000384:	f080 80ef 	bcs.w	8000566 <__udivmoddi4+0x2aa>
 8000388:	4606      	mov	r6, r0
 800038a:	4623      	mov	r3, r4
 800038c:	4608      	mov	r0, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e6      	beq.n	8000360 <__udivmoddi4+0xa4>
 8000392:	e9c5 6300 	strd	r6, r3, [r5]
 8000396:	e7e3      	b.n	8000360 <__udivmoddi4+0xa4>
 8000398:	2b00      	cmp	r3, #0
 800039a:	f040 80a2 	bne.w	80004e2 <__udivmoddi4+0x226>
 800039e:	1a8a      	subs	r2, r1, r2
 80003a0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80003a4:	fa1f f68e 	uxth.w	r6, lr
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 f4f7 	udiv	r4, r2, r7
 80003ae:	fb07 2014 	mls	r0, r7, r4, r2
 80003b2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb06 f004 	mul.w	r0, r6, r4
 80003be:	4290      	cmp	r0, r2
 80003c0:	d90f      	bls.n	80003e2 <__udivmoddi4+0x126>
 80003c2:	eb1e 0202 	adds.w	r2, lr, r2
 80003c6:	f104 38ff 	add.w	r8, r4, #4294967295
 80003ca:	bf2c      	ite	cs
 80003cc:	f04f 0901 	movcs.w	r9, #1
 80003d0:	f04f 0900 	movcc.w	r9, #0
 80003d4:	4290      	cmp	r0, r2
 80003d6:	d903      	bls.n	80003e0 <__udivmoddi4+0x124>
 80003d8:	f1b9 0f00 	cmp.w	r9, #0
 80003dc:	f000 80c8 	beq.w	8000570 <__udivmoddi4+0x2b4>
 80003e0:	4644      	mov	r4, r8
 80003e2:	1a12      	subs	r2, r2, r0
 80003e4:	fa1f fc8c 	uxth.w	ip, ip
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	fb00 f606 	mul.w	r6, r0, r6
 80003f4:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003f8:	4566      	cmp	r6, ip
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x152>
 80003fc:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x150>
 8000406:	4566      	cmp	r6, ip
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c6>
 800040c:	4610      	mov	r0, r2
 800040e:	ebac 0c06 	sub.w	ip, ip, r6
 8000412:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000416:	e79d      	b.n	8000354 <__udivmoddi4+0x98>
 8000418:	f1c1 0620 	rsb	r6, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	fa20 fc06 	lsr.w	ip, r0, r6
 800042a:	40f4      	lsrs	r4, r6
 800042c:	408a      	lsls	r2, r1
 800042e:	431f      	orrs	r7, r3
 8000430:	ea4e 030c 	orr.w	r3, lr, ip
 8000434:	fa00 fe01 	lsl.w	lr, r0, r1
 8000438:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800043c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000440:	fa1f fc87 	uxth.w	ip, r7
 8000444:	fbb4 f0f8 	udiv	r0, r4, r8
 8000448:	fb08 4410 	mls	r4, r8, r0, r4
 800044c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000450:	fb00 f90c 	mul.w	r9, r0, ip
 8000454:	45a1      	cmp	r9, r4
 8000456:	d90e      	bls.n	8000476 <__udivmoddi4+0x1ba>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 3aff 	add.w	sl, r0, #4294967295
 800045e:	bf2c      	ite	cs
 8000460:	f04f 0b01 	movcs.w	fp, #1
 8000464:	f04f 0b00 	movcc.w	fp, #0
 8000468:	45a1      	cmp	r9, r4
 800046a:	d903      	bls.n	8000474 <__udivmoddi4+0x1b8>
 800046c:	f1bb 0f00 	cmp.w	fp, #0
 8000470:	f000 8093 	beq.w	800059a <__udivmoddi4+0x2de>
 8000474:	4650      	mov	r0, sl
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f8 	udiv	r3, r4, r8
 8000482:	fb08 4413 	mls	r4, r8, r3, r4
 8000486:	fb03 fc0c 	mul.w	ip, r3, ip
 800048a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048e:	45a4      	cmp	ip, r4
 8000490:	d906      	bls.n	80004a0 <__udivmoddi4+0x1e4>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 38ff 	add.w	r8, r3, #4294967295
 8000498:	d201      	bcs.n	800049e <__udivmoddi4+0x1e2>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d87a      	bhi.n	8000594 <__udivmoddi4+0x2d8>
 800049e:	4643      	mov	r3, r8
 80004a0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a4:	eba4 040c 	sub.w	r4, r4, ip
 80004a8:	fba0 9802 	umull	r9, r8, r0, r2
 80004ac:	4544      	cmp	r4, r8
 80004ae:	46cc      	mov	ip, r9
 80004b0:	4643      	mov	r3, r8
 80004b2:	d302      	bcc.n	80004ba <__udivmoddi4+0x1fe>
 80004b4:	d106      	bne.n	80004c4 <__udivmoddi4+0x208>
 80004b6:	45ce      	cmp	lr, r9
 80004b8:	d204      	bcs.n	80004c4 <__udivmoddi4+0x208>
 80004ba:	3801      	subs	r0, #1
 80004bc:	ebb9 0c02 	subs.w	ip, r9, r2
 80004c0:	eb68 0307 	sbc.w	r3, r8, r7
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x222>
 80004c6:	ebbe 020c 	subs.w	r2, lr, ip
 80004ca:	eb64 0403 	sbc.w	r4, r4, r3
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e73e      	b.n	8000360 <__udivmoddi4+0xa4>
 80004e2:	fa02 fe03 	lsl.w	lr, r2, r3
 80004e6:	f1c3 0120 	rsb	r1, r3, #32
 80004ea:	fa04 f203 	lsl.w	r2, r4, r3
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	40cc      	lsrs	r4, r1
 80004f4:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004f8:	fa20 f101 	lsr.w	r1, r0, r1
 80004fc:	fa1f f68e 	uxth.w	r6, lr
 8000500:	fbb4 f0f7 	udiv	r0, r4, r7
 8000504:	430a      	orrs	r2, r1
 8000506:	fb07 4410 	mls	r4, r7, r0, r4
 800050a:	0c11      	lsrs	r1, r2, #16
 800050c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000510:	fb00 f406 	mul.w	r4, r0, r6
 8000514:	428c      	cmp	r4, r1
 8000516:	d90e      	bls.n	8000536 <__udivmoddi4+0x27a>
 8000518:	eb1e 0101 	adds.w	r1, lr, r1
 800051c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000520:	bf2c      	ite	cs
 8000522:	f04f 0901 	movcs.w	r9, #1
 8000526:	f04f 0900 	movcc.w	r9, #0
 800052a:	428c      	cmp	r4, r1
 800052c:	d902      	bls.n	8000534 <__udivmoddi4+0x278>
 800052e:	f1b9 0f00 	cmp.w	r9, #0
 8000532:	d02c      	beq.n	800058e <__udivmoddi4+0x2d2>
 8000534:	4640      	mov	r0, r8
 8000536:	1b09      	subs	r1, r1, r4
 8000538:	b292      	uxth	r2, r2
 800053a:	fbb1 f4f7 	udiv	r4, r1, r7
 800053e:	fb07 1114 	mls	r1, r7, r4, r1
 8000542:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000546:	fb04 f106 	mul.w	r1, r4, r6
 800054a:	4291      	cmp	r1, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x2a2>
 800054e:	eb1e 0202 	adds.w	r2, lr, r2
 8000552:	f104 38ff 	add.w	r8, r4, #4294967295
 8000556:	d201      	bcs.n	800055c <__udivmoddi4+0x2a0>
 8000558:	4291      	cmp	r1, r2
 800055a:	d815      	bhi.n	8000588 <__udivmoddi4+0x2cc>
 800055c:	4644      	mov	r4, r8
 800055e:	1a52      	subs	r2, r2, r1
 8000560:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000564:	e721      	b.n	80003aa <__udivmoddi4+0xee>
 8000566:	1a86      	subs	r6, r0, r2
 8000568:	eb64 0303 	sbc.w	r3, r4, r3
 800056c:	2001      	movs	r0, #1
 800056e:	e70e      	b.n	800038e <__udivmoddi4+0xd2>
 8000570:	3c02      	subs	r4, #2
 8000572:	4472      	add	r2, lr
 8000574:	e735      	b.n	80003e2 <__udivmoddi4+0x126>
 8000576:	3902      	subs	r1, #2
 8000578:	4472      	add	r2, lr
 800057a:	e6d0      	b.n	800031e <__udivmoddi4+0x62>
 800057c:	44f4      	add	ip, lr
 800057e:	3802      	subs	r0, #2
 8000580:	e6e3      	b.n	800034a <__udivmoddi4+0x8e>
 8000582:	44f4      	add	ip, lr
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x152>
 8000588:	3c02      	subs	r4, #2
 800058a:	4472      	add	r2, lr
 800058c:	e7e7      	b.n	800055e <__udivmoddi4+0x2a2>
 800058e:	3802      	subs	r0, #2
 8000590:	4471      	add	r1, lr
 8000592:	e7d0      	b.n	8000536 <__udivmoddi4+0x27a>
 8000594:	3b02      	subs	r3, #2
 8000596:	443c      	add	r4, r7
 8000598:	e782      	b.n	80004a0 <__udivmoddi4+0x1e4>
 800059a:	3802      	subs	r0, #2
 800059c:	443c      	add	r4, r7
 800059e:	e76a      	b.n	8000476 <__udivmoddi4+0x1ba>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <LogParsedPacket>:

#include <stdio.h>
#include <stdint.h>

static void LogParsedPacket(const ParsedPacket_t* packet)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	@ 0x50
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
    if (!packet)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d103      	bne.n	80005ba <LogParsedPacket+0x16>
    {
        log_error("ParsedPacket is NULL");
 80005b2:	483d      	ldr	r0, [pc, #244]	@ (80006a8 <LogParsedPacket+0x104>)
 80005b4:	f000 fdde 	bl	8001174 <log_error>
        return;
 80005b8:	e073      	b.n	80006a2 <LogParsedPacket+0xfe>
    }

    log_debug("PARSED PACKET:");
 80005ba:	483c      	ldr	r0, [pc, #240]	@ (80006ac <LogParsedPacket+0x108>)
 80005bc:	f000 fd8c 	bl	80010d8 <log_debug>
    log_debug("TXID       : %08X", packet->transactionID);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	483a      	ldr	r0, [pc, #232]	@ (80006b0 <LogParsedPacket+0x10c>)
 80005c8:	f000 fd86 	bl	80010d8 <log_debug>
    log_debug("CMD        : %02X", packet->cmd);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	791b      	ldrb	r3, [r3, #4]
 80005d0:	4619      	mov	r1, r3
 80005d2:	4838      	ldr	r0, [pc, #224]	@ (80006b4 <LogParsedPacket+0x110>)
 80005d4:	f000 fd80 	bl	80010d8 <log_debug>
    log_debug("OPTION     : %02X", packet->option);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	795b      	ldrb	r3, [r3, #5]
 80005dc:	4619      	mov	r1, r3
 80005de:	4836      	ldr	r0, [pc, #216]	@ (80006b8 <LogParsedPacket+0x114>)
 80005e0:	f000 fd7a 	bl	80010d8 <log_debug>
    log_debug("INPUT SIZE : %04X", packet->inputSize);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	88db      	ldrh	r3, [r3, #6]
 80005e8:	4619      	mov	r1, r3
 80005ea:	4834      	ldr	r0, [pc, #208]	@ (80006bc <LogParsedPacket+0x118>)
 80005ec:	f000 fd74 	bl	80010d8 <log_debug>

    const uint8_t* data = packet->inputData;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3308      	adds	r3, #8
 80005f4:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->inputSize;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	88db      	ldrh	r3, [r3, #6]
 80005fa:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000602:	e049      	b.n	8000698 <LogParsedPacket+0xf4>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	f107 0310 	add.w	r3, r7, #16
 800060c:	222d      	movs	r2, #45	@ 0x2d
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f010 fe89 	bl	8011328 <memset>
        char* ptr = line;
 8000616:	f107 030c 	add.w	r3, r7, #12
 800061a:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 800061c:	2300      	movs	r3, #0
 800061e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000622:	e017      	b.n	8000654 <LogParsedPacket+0xb0>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 8000624:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000628:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800062c:	4413      	add	r3, r2
 800062e:	461a      	mov	r2, r3
 8000630:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000632:	4413      	add	r3, r2
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	4921      	ldr	r1, [pc, #132]	@ (80006c0 <LogParsedPacket+0x11c>)
 800063a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800063c:	f010 fdd8 	bl	80111f0 <siprintf>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000646:	4413      	add	r3, r2
 8000648:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 800064a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800064e:	3301      	adds	r3, #1
 8000650:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000654:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000658:	2b0f      	cmp	r3, #15
 800065a:	d807      	bhi.n	800066c <LogParsedPacket+0xc8>
 800065c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000660:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000664:	441a      	add	r2, r3
 8000666:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000668:	429a      	cmp	r2, r3
 800066a:	dbdb      	blt.n	8000624 <LogParsedPacket+0x80>
        }

        if (i == 0)
 800066c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000670:	2b00      	cmp	r3, #0
 8000672:	d106      	bne.n	8000682 <LogParsedPacket+0xde>
        {
        	log_debug("INPUT DATA : %s", line);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	4619      	mov	r1, r3
 800067a:	4812      	ldr	r0, [pc, #72]	@ (80006c4 <LogParsedPacket+0x120>)
 800067c:	f000 fd2c 	bl	80010d8 <log_debug>
 8000680:	e005      	b.n	800068e <LogParsedPacket+0xea>
        }
        else
        {
        	log_debug("             %s", line);
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	4619      	mov	r1, r3
 8000688:	480f      	ldr	r0, [pc, #60]	@ (80006c8 <LogParsedPacket+0x124>)
 800068a:	f000 fd25 	bl	80010d8 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 800068e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000692:	3310      	adds	r3, #16
 8000694:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000698:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800069c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800069e:	429a      	cmp	r2, r3
 80006a0:	d3b0      	bcc.n	8000604 <LogParsedPacket+0x60>
        }
    }
}
 80006a2:	3750      	adds	r7, #80	@ 0x50
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	080122fc 	.word	0x080122fc
 80006ac:	08012314 	.word	0x08012314
 80006b0:	08012324 	.word	0x08012324
 80006b4:	08012338 	.word	0x08012338
 80006b8:	0801234c 	.word	0x0801234c
 80006bc:	08012360 	.word	0x08012360
 80006c0:	08012374 	.word	0x08012374
 80006c4:	0801237c 	.word	0x0801237c
 80006c8:	0801238c 	.word	0x0801238c

080006cc <LogResponsePacket>:

static void LogResponsePacket(const ResponsePacket_t* packet)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b094      	sub	sp, #80	@ 0x50
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    if (!packet)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d103      	bne.n	80006e2 <LogResponsePacket+0x16>
    {
        log_error("ResponsePacket is NULL");
 80006da:	483b      	ldr	r0, [pc, #236]	@ (80007c8 <LogResponsePacket+0xfc>)
 80006dc:	f000 fd4a 	bl	8001174 <log_error>
        return;
 80006e0:	e06f      	b.n	80007c2 <LogResponsePacket+0xf6>
    }

    log_debug("RESPONSE PACKET");
 80006e2:	483a      	ldr	r0, [pc, #232]	@ (80007cc <LogResponsePacket+0x100>)
 80006e4:	f000 fcf8 	bl	80010d8 <log_debug>
    log_debug("TXID        : %08X", packet->transactionID);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	4838      	ldr	r0, [pc, #224]	@ (80007d0 <LogResponsePacket+0x104>)
 80006f0:	f000 fcf2 	bl	80010d8 <log_debug>
    log_debug("OUTPUT SIZE : %04X", packet->outputSize);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	889b      	ldrh	r3, [r3, #4]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4836      	ldr	r0, [pc, #216]	@ (80007d4 <LogResponsePacket+0x108>)
 80006fc:	f000 fcec 	bl	80010d8 <log_debug>
    log_debug("EOD FLAG    : %08X", packet->out_eod_flag);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	4619      	mov	r1, r3
 800070a:	4833      	ldr	r0, [pc, #204]	@ (80007d8 <LogResponsePacket+0x10c>)
 800070c:	f000 fce4 	bl	80010d8 <log_debug>

    const uint8_t* data = packet->outputData;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3306      	adds	r3, #6
 8000714:	643b      	str	r3, [r7, #64]	@ 0x40
    uint16_t size = packet->outputSize;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	889b      	ldrh	r3, [r3, #4]
 800071a:	87fb      	strh	r3, [r7, #62]	@ 0x3e

    for (uint16_t i = 0; i < size; i += bytesPerLine)
 800071c:	2300      	movs	r3, #0
 800071e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8000722:	e049      	b.n	80007b8 <LogResponsePacket+0xec>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	222d      	movs	r2, #45	@ 0x2d
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f010 fdf9 	bl	8011328 <memset>
        char* ptr = line;
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	64bb      	str	r3, [r7, #72]	@ 0x48

        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 800073c:	2300      	movs	r3, #0
 800073e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000742:	e017      	b.n	8000774 <LogResponsePacket+0xa8>
        {
            ptr += sprintf(ptr, "%02X ", data[i + j]);
 8000744:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000748:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800074c:	4413      	add	r3, r2
 800074e:	461a      	mov	r2, r3
 8000750:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	4920      	ldr	r1, [pc, #128]	@ (80007dc <LogResponsePacket+0x110>)
 800075a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800075c:	f010 fd48 	bl	80111f0 <siprintf>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000766:	4413      	add	r3, r2
 8000768:	64bb      	str	r3, [r7, #72]	@ 0x48
        for (uint16_t j = 0; j < bytesPerLine && (i + j) < size; ++j)
 800076a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800076e:	3301      	adds	r3, #1
 8000770:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8000774:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d807      	bhi.n	800078c <LogResponsePacket+0xc0>
 800077c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8000780:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8000784:	441a      	add	r2, r3
 8000786:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000788:	429a      	cmp	r2, r3
 800078a:	dbdb      	blt.n	8000744 <LogResponsePacket+0x78>
        }

        if (i == 0)
 800078c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8000790:	2b00      	cmp	r3, #0
 8000792:	d106      	bne.n	80007a2 <LogResponsePacket+0xd6>
            log_debug("OUTPUT DATA : %s", line);
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	4619      	mov	r1, r3
 800079a:	4811      	ldr	r0, [pc, #68]	@ (80007e0 <LogResponsePacket+0x114>)
 800079c:	f000 fc9c 	bl	80010d8 <log_debug>
 80007a0:	e005      	b.n	80007ae <LogResponsePacket+0xe2>
        else
            log_debug("              %s", line);
 80007a2:	f107 030c 	add.w	r3, r7, #12
 80007a6:	4619      	mov	r1, r3
 80007a8:	480e      	ldr	r0, [pc, #56]	@ (80007e4 <LogResponsePacket+0x118>)
 80007aa:	f000 fc95 	bl	80010d8 <log_debug>
    for (uint16_t i = 0; i < size; i += bytesPerLine)
 80007ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80007b2:	3310      	adds	r3, #16
 80007b4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80007b8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80007bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80007be:	429a      	cmp	r2, r3
 80007c0:	d3b0      	bcc.n	8000724 <LogResponsePacket+0x58>
    }
}
 80007c2:	3750      	adds	r7, #80	@ 0x50
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	0801239c 	.word	0x0801239c
 80007cc:	080123b4 	.word	0x080123b4
 80007d0:	080123c4 	.word	0x080123c4
 80007d4:	080123d8 	.word	0x080123d8
 80007d8:	080123ec 	.word	0x080123ec
 80007dc:	08012374 	.word	0x08012374
 80007e0:	08012400 	.word	0x08012400
 80007e4:	08012414 	.word	0x08012414

080007e8 <LogTransmitBuffer>:

static void LogTransmitBuffer(const uint8_t* usb_tx_buffer, uint32_t usb_tx_index)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b092      	sub	sp, #72	@ 0x48
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
    if (!usb_tx_buffer || usb_tx_index == 0)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d002      	beq.n	80007fe <LogTransmitBuffer+0x16>
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d103      	bne.n	8000806 <LogTransmitBuffer+0x1e>
    {
        log_debug("USB TX buffer is empty or NULL.");
 80007fe:	4826      	ldr	r0, [pc, #152]	@ (8000898 <LogTransmitBuffer+0xb0>)
 8000800:	f000 fc6a 	bl	80010d8 <log_debug>
        return;
 8000804:	e045      	b.n	8000892 <LogTransmitBuffer+0xaa>
    }


    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000806:	2300      	movs	r3, #0
 8000808:	647b      	str	r3, [r7, #68]	@ 0x44
 800080a:	e03e      	b.n	800088a <LogTransmitBuffer+0xa2>
    {
        char line[bytesPerLine * 3 + 1] = {0};
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	222d      	movs	r2, #45	@ 0x2d
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f010 fd85 	bl	8011328 <memset>
        char* ptr = line;
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	643b      	str	r3, [r7, #64]	@ 0x40

        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000828:	e012      	b.n	8000850 <LogTransmitBuffer+0x68>
        {
            ptr += sprintf(ptr, "%02X ", usb_tx_buffer[i + j]);
 800082a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800082c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800082e:	4413      	add	r3, r2
 8000830:	687a      	ldr	r2, [r7, #4]
 8000832:	4413      	add	r3, r2
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	461a      	mov	r2, r3
 8000838:	4918      	ldr	r1, [pc, #96]	@ (800089c <LogTransmitBuffer+0xb4>)
 800083a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800083c:	f010 fcd8 	bl	80111f0 <siprintf>
 8000840:	4603      	mov	r3, r0
 8000842:	461a      	mov	r2, r3
 8000844:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000846:	4413      	add	r3, r2
 8000848:	643b      	str	r3, [r7, #64]	@ 0x40
        for (uint32_t j = 0; j < bytesPerLine && (i + j) < usb_tx_index; ++j)
 800084a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800084c:	3301      	adds	r3, #1
 800084e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000852:	2b0f      	cmp	r3, #15
 8000854:	d805      	bhi.n	8000862 <LogTransmitBuffer+0x7a>
 8000856:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800085a:	4413      	add	r3, r2
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	429a      	cmp	r2, r3
 8000860:	d8e3      	bhi.n	800082a <LogTransmitBuffer+0x42>
        }

        if (i == 0)
 8000862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000864:	2b00      	cmp	r3, #0
 8000866:	d107      	bne.n	8000878 <LogTransmitBuffer+0x90>
            log_debug("USB Tx [%lu bytes]: %s", usb_tx_index, line);
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	461a      	mov	r2, r3
 800086e:	6839      	ldr	r1, [r7, #0]
 8000870:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <LogTransmitBuffer+0xb8>)
 8000872:	f000 fc31 	bl	80010d8 <log_debug>
 8000876:	e005      	b.n	8000884 <LogTransmitBuffer+0x9c>
        else
            log_debug("                 %s", line);  // 17-character indent to align with line 1
 8000878:	f107 0308 	add.w	r3, r7, #8
 800087c:	4619      	mov	r1, r3
 800087e:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <LogTransmitBuffer+0xbc>)
 8000880:	f000 fc2a 	bl	80010d8 <log_debug>
    for (uint32_t i = 0; i < usb_tx_index; i += bytesPerLine)
 8000884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000886:	3310      	adds	r3, #16
 8000888:	647b      	str	r3, [r7, #68]	@ 0x44
 800088a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3bc      	bcc.n	800080c <LogTransmitBuffer+0x24>
    }
}
 8000892:	3748      	adds	r7, #72	@ 0x48
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	08012428 	.word	0x08012428
 800089c:	08012374 	.word	0x08012374
 80008a0:	08012448 	.word	0x08012448
 80008a4:	08012460 	.word	0x08012460

080008a8 <HSMManager_Init>:

void HSMManager_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  log_init(LOG_LEVEL_DEBUG);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f000 fbb7 	bl	8001020 <log_init>
  log_info("HSM Initialized.");
 80008b2:	4834      	ldr	r0, [pc, #208]	@ (8000984 <HSMManager_Init+0xdc>)
 80008b4:	f000 fc2a 	bl	800110c <log_info>
  HAL_Delay(1000);
 80008b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008bc:	f002 f974 	bl	8002ba8 <HAL_Delay>
  log_info("Turning LED ON.");
 80008c0:	4831      	ldr	r0, [pc, #196]	@ (8000988 <HSMManager_Init+0xe0>)
 80008c2:	f000 fc23 	bl	800110c <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 80008c6:	2000      	movs	r0, #0
 80008c8:	f001 ff0c 	bl	80026e4 <BSP_LED_Toggle>
 80008cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008d0:	f002 f96a 	bl	8002ba8 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 80008d4:	2002      	movs	r0, #2
 80008d6:	f001 ff05 	bl	80026e4 <BSP_LED_Toggle>
 80008da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008de:	f002 f963 	bl	8002ba8 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 80008e2:	2001      	movs	r0, #1
 80008e4:	f001 fefe 	bl	80026e4 <BSP_LED_Toggle>
 80008e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008ec:	f002 f95c 	bl	8002ba8 <HAL_Delay>
  log_info("Turning LED OFF.");
 80008f0:	4826      	ldr	r0, [pc, #152]	@ (800098c <HSMManager_Init+0xe4>)
 80008f2:	f000 fc0b 	bl	800110c <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f001 fef4 	bl	80026e4 <BSP_LED_Toggle>
 80008fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000900:	f002 f952 	bl	8002ba8 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000904:	2002      	movs	r0, #2
 8000906:	f001 feed 	bl	80026e4 <BSP_LED_Toggle>
 800090a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800090e:	f002 f94b 	bl	8002ba8 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000912:	2001      	movs	r0, #1
 8000914:	f001 fee6 	bl	80026e4 <BSP_LED_Toggle>
 8000918:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800091c:	f002 f944 	bl	8002ba8 <HAL_Delay>
  log_info("Turning LED ON.");
 8000920:	4819      	ldr	r0, [pc, #100]	@ (8000988 <HSMManager_Init+0xe0>)
 8000922:	f000 fbf3 	bl	800110c <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000926:	2000      	movs	r0, #0
 8000928:	f001 fedc 	bl	80026e4 <BSP_LED_Toggle>
 800092c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000930:	f002 f93a 	bl	8002ba8 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000934:	2002      	movs	r0, #2
 8000936:	f001 fed5 	bl	80026e4 <BSP_LED_Toggle>
 800093a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800093e:	f002 f933 	bl	8002ba8 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000942:	2001      	movs	r0, #1
 8000944:	f001 fece 	bl	80026e4 <BSP_LED_Toggle>
 8000948:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800094c:	f002 f92c 	bl	8002ba8 <HAL_Delay>
  log_info("Turning LED OFF.");
 8000950:	480e      	ldr	r0, [pc, #56]	@ (800098c <HSMManager_Init+0xe4>)
 8000952:	f000 fbdb 	bl	800110c <log_info>
  BSP_LED_Toggle(LED_GREEN);  HAL_Delay(1000);
 8000956:	2000      	movs	r0, #0
 8000958:	f001 fec4 	bl	80026e4 <BSP_LED_Toggle>
 800095c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000960:	f002 f922 	bl	8002ba8 <HAL_Delay>
  BSP_LED_Toggle(LED_RED);    HAL_Delay(1000);
 8000964:	2002      	movs	r0, #2
 8000966:	f001 febd 	bl	80026e4 <BSP_LED_Toggle>
 800096a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800096e:	f002 f91b 	bl	8002ba8 <HAL_Delay>
  BSP_LED_Toggle(LED_YELLOW); HAL_Delay(1000);
 8000972:	2001      	movs	r0, #1
 8000974:	f001 feb6 	bl	80026e4 <BSP_LED_Toggle>
 8000978:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800097c:	f002 f914 	bl	8002ba8 <HAL_Delay>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	08012474 	.word	0x08012474
 8000988:	08012488 	.word	0x08012488
 800098c:	08012498 	.word	0x08012498

08000990 <HSMManager_ProcessCommand>:


OperationStatus_t HSMManager_ProcessCommand(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	f5ad 3d90 	sub.w	sp, sp, #73728	@ 0x12000
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
	 if (usb_rx_complete)
 800099a:	4b43      	ldr	r3, [pc, #268]	@ (8000aa8 <HSMManager_ProcessCommand+0x118>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d079      	beq.n	8000a98 <HSMManager_ProcessCommand+0x108>
	 {
		 ParsedPacket_t request;
		 ResponsePacket_t response;
		 uint8_t usb_tx_buffer[MAX_USB_DATA_SIZE];
		 uint16_t usb_tx_index;
		 ParseStatus_t status = PacketParser_Parse(usb_rx_buffer, usb_rx_index, &request);
 80009a4:	4b41      	ldr	r3, [pc, #260]	@ (8000aac <HSMManager_ProcessCommand+0x11c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	b299      	uxth	r1, r3
 80009aa:	f107 0318 	add.w	r3, r7, #24
 80009ae:	3b18      	subs	r3, #24
 80009b0:	461a      	mov	r2, r3
 80009b2:	483f      	ldr	r0, [pc, #252]	@ (8000ab0 <HSMManager_ProcessCommand+0x120>)
 80009b4:	f000 fa5a 	bl	8000e6c <PacketParser_Parse>
 80009b8:	4603      	mov	r3, r0
 80009ba:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 80009be:	f102 0217 	add.w	r2, r2, #23
 80009c2:	7013      	strb	r3, [r2, #0]

		 if (status == PARSE_SUCCESS)
 80009c4:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 80009c8:	f103 0317 	add.w	r3, r3, #23
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d159      	bne.n	8000a86 <HSMManager_ProcessCommand+0xf6>
		 {
			 log_debug("Packet Parsed Successfully:");
 80009d2:	4838      	ldr	r0, [pc, #224]	@ (8000ab4 <HSMManager_ProcessCommand+0x124>)
 80009d4:	f000 fb80 	bl	80010d8 <log_debug>
			 LogParsedPacket(&request);
 80009d8:	f107 0318 	add.w	r3, r7, #24
 80009dc:	3b18      	subs	r3, #24
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fde0 	bl	80005a4 <LogParsedPacket>
			 OperationDispatcher_Dispatch(&request, &response);
 80009e4:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 80009e8:	f102 0218 	add.w	r2, r2, #24
 80009ec:	3a10      	subs	r2, #16
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	3b18      	subs	r3, #24
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f000 f860 	bl	8000abc <OperationDispatcher_Dispatch>
			 LogResponsePacket(&response);
 80009fc:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000a00:	f103 0318 	add.w	r3, r3, #24
 8000a04:	3b10      	subs	r3, #16
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fe60 	bl	80006cc <LogResponsePacket>
			 usb_tx_index = response.outputSize + 10;
 8000a0c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000a10:	f103 0318 	add.w	r3, r3, #24
 8000a14:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000a18:	330a      	adds	r3, #10
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000a20:	f102 0214 	add.w	r2, r2, #20
 8000a24:	8013      	strh	r3, [r2, #0]
			 PacketBuilder_Build(&response, usb_tx_buffer, &usb_tx_index);
 8000a26:	f507 3290 	add.w	r2, r7, #73728	@ 0x12000
 8000a2a:	f102 0214 	add.w	r2, r2, #20
 8000a2e:	f507 5100 	add.w	r1, r7, #8192	@ 0x2000
 8000a32:	f101 0118 	add.w	r1, r1, #24
 8000a36:	3904      	subs	r1, #4
 8000a38:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8000a3c:	f103 0318 	add.w	r3, r3, #24
 8000a40:	3b10      	subs	r3, #16
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f962 	bl	8000d0c <PacketBuilder_Build>
			 LogTransmitBuffer(usb_tx_buffer, usb_tx_index);
 8000a48:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000a4c:	f103 0314 	add.w	r3, r3, #20
 8000a50:	881b      	ldrh	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000a58:	f103 0318 	add.w	r3, r3, #24
 8000a5c:	3b04      	subs	r3, #4
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fec1 	bl	80007e8 <LogTransmitBuffer>
			 USB_Transmit(usb_tx_buffer, usb_tx_index);
 8000a66:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000a6a:	f103 0314 	add.w	r3, r3, #20
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	f507 5300 	add.w	r3, r7, #8192	@ 0x2000
 8000a76:	f103 0318 	add.w	r3, r3, #24
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f00e fb14 	bl	800f0ac <USB_Transmit>
 8000a84:	e008      	b.n	8000a98 <HSMManager_ProcessCommand+0x108>
		 }
		 else
		 {
			 log_error("Parsing failed with status code: %d", status);
 8000a86:	f507 3390 	add.w	r3, r7, #73728	@ 0x12000
 8000a8a:	f103 0317 	add.w	r3, r3, #23
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	4619      	mov	r1, r3
 8000a92:	4809      	ldr	r0, [pc, #36]	@ (8000ab8 <HSMManager_ProcessCommand+0x128>)
 8000a94:	f000 fb6e 	bl	8001174 <log_error>
		 }
	 }
	 return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f507 3790 	add.w	r7, r7, #73728	@ 0x12000
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20010f40 	.word	0x20010f40
 8000aac:	20010f3c 	.word	0x20010f3c
 8000ab0:	20000f3c 	.word	0x20000f3c
 8000ab4:	080124ac 	.word	0x080124ac
 8000ab8:	080124c8 	.word	0x080124c8

08000abc <OperationDispatcher_Dispatch>:
#include "constants.h"
#include "types.h"
#include "Logger.h"

OperationStatus_t OperationDispatcher_Dispatch(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
    log_info("Dispatching Command.");
 8000ac6:	4831      	ldr	r0, [pc, #196]	@ (8000b8c <OperationDispatcher_Dispatch+0xd0>)
 8000ac8:	f000 fb20 	bl	800110c <log_info>

    switch (request->cmd)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	791b      	ldrb	r3, [r3, #4]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	2b0e      	cmp	r3, #14
 8000ad4:	d84e      	bhi.n	8000b74 <OperationDispatcher_Dispatch+0xb8>
 8000ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8000adc <OperationDispatcher_Dispatch+0x20>)
 8000ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000adc:	08000b19 	.word	0x08000b19
 8000ae0:	08000b29 	.word	0x08000b29
 8000ae4:	08000b39 	.word	0x08000b39
 8000ae8:	08000b49 	.word	0x08000b49
 8000aec:	08000b55 	.word	0x08000b55
 8000af0:	08000b55 	.word	0x08000b55
 8000af4:	08000b55 	.word	0x08000b55
 8000af8:	08000b75 	.word	0x08000b75
 8000afc:	08000b75 	.word	0x08000b75
 8000b00:	08000b75 	.word	0x08000b75
 8000b04:	08000b75 	.word	0x08000b75
 8000b08:	08000b75 	.word	0x08000b75
 8000b0c:	08000b75 	.word	0x08000b75
 8000b10:	08000b75 	.word	0x08000b75
 8000b14:	08000b65 	.word	0x08000b65
    {
        case CMD_ENCRYPT:
        	log_info("Calling Encryption Operation.");
 8000b18:	481d      	ldr	r0, [pc, #116]	@ (8000b90 <OperationDispatcher_Dispatch+0xd4>)
 8000b1a:	f000 faf7 	bl	800110c <log_info>
        	log_warn("Encryption Operation not supported");
 8000b1e:	481d      	ldr	r0, [pc, #116]	@ (8000b94 <OperationDispatcher_Dispatch+0xd8>)
 8000b20:	f000 fb0e 	bl	8001140 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000b24:	230b      	movs	r3, #11
 8000b26:	e02c      	b.n	8000b82 <OperationDispatcher_Dispatch+0xc6>

        case CMD_DECRYPT:
        	log_info("Calling Decryption Operation.");
 8000b28:	481b      	ldr	r0, [pc, #108]	@ (8000b98 <OperationDispatcher_Dispatch+0xdc>)
 8000b2a:	f000 faef 	bl	800110c <log_info>
        	log_warn("Decryption Operation not supported");
 8000b2e:	481b      	ldr	r0, [pc, #108]	@ (8000b9c <OperationDispatcher_Dispatch+0xe0>)
 8000b30:	f000 fb06 	bl	8001140 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000b34:	230b      	movs	r3, #11
 8000b36:	e024      	b.n	8000b82 <OperationDispatcher_Dispatch+0xc6>

        case CMD_HASH:
        	log_info("Calling Hashing Operation.");
 8000b38:	4819      	ldr	r0, [pc, #100]	@ (8000ba0 <OperationDispatcher_Dispatch+0xe4>)
 8000b3a:	f000 fae7 	bl	800110c <log_info>
        	log_warn("Hashing Operation not supported");
 8000b3e:	4819      	ldr	r0, [pc, #100]	@ (8000ba4 <OperationDispatcher_Dispatch+0xe8>)
 8000b40:	f000 fafe 	bl	8001140 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000b44:	230b      	movs	r3, #11
 8000b46:	e01c      	b.n	8000b82 <OperationDispatcher_Dispatch+0xc6>

        case CMD_RANDOM:
            return RandomHandler_Handle(request, response);
 8000b48:	6839      	ldr	r1, [r7, #0]
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f888 	bl	8000c60 <RandomHandler_Handle>
 8000b50:	4603      	mov	r3, r0
 8000b52:	e016      	b.n	8000b82 <OperationDispatcher_Dispatch+0xc6>

        case CMD_KEY_STORE:
        case CMD_KEY_RETRIEVE:
        case CMD_KEY_ERASE:
        	log_info("Calling Key Management.");
 8000b54:	4814      	ldr	r0, [pc, #80]	@ (8000ba8 <OperationDispatcher_Dispatch+0xec>)
 8000b56:	f000 fad9 	bl	800110c <log_info>
        	log_warn("Key Management Operation not supported");
 8000b5a:	4814      	ldr	r0, [pc, #80]	@ (8000bac <OperationDispatcher_Dispatch+0xf0>)
 8000b5c:	f000 faf0 	bl	8001140 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000b60:	230b      	movs	r3, #11
 8000b62:	e00e      	b.n	8000b82 <OperationDispatcher_Dispatch+0xc6>

        case CMD_PING:
        	log_info("Calling Ping Operation.");
 8000b64:	4812      	ldr	r0, [pc, #72]	@ (8000bb0 <OperationDispatcher_Dispatch+0xf4>)
 8000b66:	f000 fad1 	bl	800110c <log_info>
        	log_warn("Ping Operation not supported");
 8000b6a:	4812      	ldr	r0, [pc, #72]	@ (8000bb4 <OperationDispatcher_Dispatch+0xf8>)
 8000b6c:	f000 fae8 	bl	8001140 <log_warn>
            return OPERATION_UNKNOWN_ERROR;
 8000b70:	230b      	movs	r3, #11
 8000b72:	e006      	b.n	8000b82 <OperationDispatcher_Dispatch+0xc6>

        default:
            log_error("Invalid Command code received");
 8000b74:	4810      	ldr	r0, [pc, #64]	@ (8000bb8 <OperationDispatcher_Dispatch+0xfc>)
 8000b76:	f000 fafd 	bl	8001174 <log_error>
            log_error("Returning Failure Status code");
 8000b7a:	4810      	ldr	r0, [pc, #64]	@ (8000bbc <OperationDispatcher_Dispatch+0x100>)
 8000b7c:	f000 fafa 	bl	8001174 <log_error>
            return OPERATION_INVALID_CMD;
 8000b80:	2301      	movs	r3, #1
    }
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	080124ec 	.word	0x080124ec
 8000b90:	08012504 	.word	0x08012504
 8000b94:	08012524 	.word	0x08012524
 8000b98:	08012548 	.word	0x08012548
 8000b9c:	08012568 	.word	0x08012568
 8000ba0:	0801258c 	.word	0x0801258c
 8000ba4:	080125a8 	.word	0x080125a8
 8000ba8:	080125c8 	.word	0x080125c8
 8000bac:	080125e0 	.word	0x080125e0
 8000bb0:	08012608 	.word	0x08012608
 8000bb4:	08012620 	.word	0x08012620
 8000bb8:	08012640 	.word	0x08012640
 8000bbc:	08012660 	.word	0x08012660

08000bc0 <CalculateByteSize>:
#define MAX_RANDOM_BYTES 4096
// Externally link RNG Instance
extern RNG_HandleTypeDef hrng;

uint16_t CalculateByteSize(uint8_t option_member)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
	uint16_t byteSize;
	switch(option_member)
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	3b31      	subs	r3, #49	@ 0x31
 8000bce:	2b0a      	cmp	r3, #10
 8000bd0:	d83e      	bhi.n	8000c50 <CalculateByteSize+0x90>
 8000bd2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bd8 <CalculateByteSize+0x18>)
 8000bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd8:	08000c05 	.word	0x08000c05
 8000bdc:	08000c0b 	.word	0x08000c0b
 8000be0:	08000c11 	.word	0x08000c11
 8000be4:	08000c17 	.word	0x08000c17
 8000be8:	08000c1d 	.word	0x08000c1d
 8000bec:	08000c23 	.word	0x08000c23
 8000bf0:	08000c29 	.word	0x08000c29
 8000bf4:	08000c31 	.word	0x08000c31
 8000bf8:	08000c39 	.word	0x08000c39
 8000bfc:	08000c41 	.word	0x08000c41
 8000c00:	08000c49 	.word	0x08000c49
	{
		case OPTION_RNG_0004: byteSize = 4; break;
 8000c04:	2304      	movs	r3, #4
 8000c06:	81fb      	strh	r3, [r7, #14]
 8000c08:	e023      	b.n	8000c52 <CalculateByteSize+0x92>
		case OPTION_RNG_0008: byteSize = 8; break;
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	81fb      	strh	r3, [r7, #14]
 8000c0e:	e020      	b.n	8000c52 <CalculateByteSize+0x92>
		case OPTION_RNG_0016: byteSize = 16; break;
 8000c10:	2310      	movs	r3, #16
 8000c12:	81fb      	strh	r3, [r7, #14]
 8000c14:	e01d      	b.n	8000c52 <CalculateByteSize+0x92>
		case OPTION_RNG_0032: byteSize = 32; break;
 8000c16:	2320      	movs	r3, #32
 8000c18:	81fb      	strh	r3, [r7, #14]
 8000c1a:	e01a      	b.n	8000c52 <CalculateByteSize+0x92>
		case OPTION_RNG_0064: byteSize = 64; break;
 8000c1c:	2340      	movs	r3, #64	@ 0x40
 8000c1e:	81fb      	strh	r3, [r7, #14]
 8000c20:	e017      	b.n	8000c52 <CalculateByteSize+0x92>
		case OPTION_RNG_0128: byteSize = 128; break;
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	81fb      	strh	r3, [r7, #14]
 8000c26:	e014      	b.n	8000c52 <CalculateByteSize+0x92>
		case OPTION_RNG_0256: byteSize = 256; break;
 8000c28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c2c:	81fb      	strh	r3, [r7, #14]
 8000c2e:	e010      	b.n	8000c52 <CalculateByteSize+0x92>
		case OPTION_RNG_0512: byteSize = 512; break;
 8000c30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c34:	81fb      	strh	r3, [r7, #14]
 8000c36:	e00c      	b.n	8000c52 <CalculateByteSize+0x92>
		case OPTION_RNG_1024: byteSize = 1024; break;
 8000c38:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c3c:	81fb      	strh	r3, [r7, #14]
 8000c3e:	e008      	b.n	8000c52 <CalculateByteSize+0x92>
		case OPTION_RNG_2048: byteSize = 2048; break;
 8000c40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000c44:	81fb      	strh	r3, [r7, #14]
 8000c46:	e004      	b.n	8000c52 <CalculateByteSize+0x92>
		case OPTION_RNG_4096: byteSize = 4096; break;
 8000c48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c4c:	81fb      	strh	r3, [r7, #14]
 8000c4e:	e000      	b.n	8000c52 <CalculateByteSize+0x92>
		default: break;
 8000c50:	bf00      	nop
	}
	return byteSize;
 8000c52:	89fb      	ldrh	r3, [r7, #14]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <RandomHandler_Handle>:

OperationStatus_t RandomHandler_Handle(const ParsedPacket_t* request, ResponsePacket_t* response)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
    log_info("Handling Random Number Generation operation.");
 8000c6a:	4823      	ldr	r0, [pc, #140]	@ (8000cf8 <RandomHandler_Handle+0x98>)
 8000c6c:	f000 fa4e 	bl	800110c <log_info>
    // Retrieve requested OPTION half-word from Request Packet
    uint8_t option_val = (request->option);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	795b      	ldrb	r3, [r3, #5]
 8000c74:	75bb      	strb	r3, [r7, #22]
    // Set the requested Random Number size
    uint16_t numBytes = CalculateByteSize(option_val);
 8000c76:	7dbb      	ldrb	r3, [r7, #22]
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff ffa1 	bl	8000bc0 <CalculateByteSize>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	82bb      	strh	r3, [r7, #20]
    // Check if the requested size is within the limits
    if (numBytes == 0 || numBytes > MAX_RANDOM_BYTES)
 8000c82:	8abb      	ldrh	r3, [r7, #20]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d003      	beq.n	8000c90 <RandomHandler_Handle+0x30>
 8000c88:	8abb      	ldrh	r3, [r7, #20]
 8000c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c8e:	d904      	bls.n	8000c9a <RandomHandler_Handle+0x3a>
    {
        log_error("Requested random byte count is invalid.");
 8000c90:	481a      	ldr	r0, [pc, #104]	@ (8000cfc <RandomHandler_Handle+0x9c>)
 8000c92:	f000 fa6f 	bl	8001174 <log_error>
        return OPERATION_INVALID_OPTION;
 8000c96:	2302      	movs	r3, #2
 8000c98:	e02a      	b.n	8000cf0 <RandomHandler_Handle+0x90>
    // Declare a status handler for RNG calls
    HAL_StatusTypeDef hal_status;
    // Declare a 32-bit variable to store generated word
    uint32_t randomValue;
    // Iterate through loop till required number of random words are filled
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	75fb      	strb	r3, [r7, #23]
 8000c9e:	e019      	b.n	8000cd4 <RandomHandler_Handle+0x74>
    {
    	// Call HAL API to generate 32-bit random word
    	hal_status = HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4816      	ldr	r0, [pc, #88]	@ (8000d00 <RandomHandler_Handle+0xa0>)
 8000ca8:	f00a fa1c 	bl	800b0e4 <HAL_RNG_GenerateRandomNumber>
 8000cac:	4603      	mov	r3, r0
 8000cae:	74fb      	strb	r3, [r7, #19]
    	// Check if API call returned successfully
	    if (hal_status != HAL_OK)
 8000cb0:	7cfb      	ldrb	r3, [r7, #19]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d004      	beq.n	8000cc0 <RandomHandler_Handle+0x60>
	    {
	    	log_error("Failed to generate random number from RNG peripheral.");
 8000cb6:	4813      	ldr	r0, [pc, #76]	@ (8000d04 <RandomHandler_Handle+0xa4>)
 8000cb8:	f000 fa5c 	bl	8001174 <log_error>
		    return OPERATION_RANDOM_GEN_FAIL;
 8000cbc:	2306      	movs	r3, #6
 8000cbe:	e017      	b.n	8000cf0 <RandomHandler_Handle+0x90>
	    }
	    // Append generated random word to response packet
        response->outputData[i] = (uint8_t)(randomValue & 0xFF);
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	7dfb      	ldrb	r3, [r7, #23]
 8000cc4:	b2d1      	uxtb	r1, r2
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	4413      	add	r3, r2
 8000cca:	460a      	mov	r2, r1
 8000ccc:	719a      	strb	r2, [r3, #6]
    for (uint8_t i = 0; i < numBytes/4; ++i)
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	75fb      	strb	r3, [r7, #23]
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	8abb      	ldrh	r3, [r7, #20]
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d3de      	bcc.n	8000ca0 <RandomHandler_Handle+0x40>
    }
    // Set the Output Size to number of randomly generated bytes
    response->outputSize = numBytes;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	8aba      	ldrh	r2, [r7, #20]
 8000ce6:	809a      	strh	r2, [r3, #4]
    log_info("Random Number Generation complete.");
 8000ce8:	4807      	ldr	r0, [pc, #28]	@ (8000d08 <RandomHandler_Handle+0xa8>)
 8000cea:	f000 fa0f 	bl	800110c <log_info>
    return OPERATION_SUCCESS;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	08012680 	.word	0x08012680
 8000cfc:	080126b0 	.word	0x080126b0
 8000d00:	20000240 	.word	0x20000240
 8000d04:	080126d8 	.word	0x080126d8
 8000d08:	08012710 	.word	0x08012710

08000d0c <PacketBuilder_Build>:
#include "Logger.h"
#include <string.h>


BuildStatus_t PacketBuilder_Build(const ResponsePacket_t* responsePacket, uint8_t* outBuffer, uint16_t* outLength)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	60f8      	str	r0, [r7, #12]
 8000d14:	60b9      	str	r1, [r7, #8]
 8000d16:	607a      	str	r2, [r7, #4]
	log_debug("Checking if Response Packet is NULL");
 8000d18:	484e      	ldr	r0, [pc, #312]	@ (8000e54 <PacketBuilder_Build+0x148>)
 8000d1a:	f000 f9dd 	bl	80010d8 <log_debug>
	// Check if Response, Output and Output Size are NULL
    if (!responsePacket || !outBuffer || !outLength)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <PacketBuilder_Build+0x24>
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <PacketBuilder_Build+0x24>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d101      	bne.n	8000d34 <PacketBuilder_Build+0x28>
    {
    	return BUILD_NULL_POINTER;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e08b      	b.n	8000e4c <PacketBuilder_Build+0x140>
    }
    log_debug("Checking if Output Size is under limits");
 8000d34:	4848      	ldr	r0, [pc, #288]	@ (8000e58 <PacketBuilder_Build+0x14c>)
 8000d36:	f000 f9cf 	bl	80010d8 <log_debug>
    // Check if Output Size is under the specified limits
    if (responsePacket->outputSize > MAX_OUTPUT_DATA_SIZE)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	889b      	ldrh	r3, [r3, #4]
 8000d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d42:	d901      	bls.n	8000d48 <PacketBuilder_Build+0x3c>
    {
    	return BUILD_OUTPUT_TOO_LARGE;
 8000d44:	2302      	movs	r3, #2
 8000d46:	e081      	b.n	8000e4c <PacketBuilder_Build+0x140>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Transaction ID to Out Buffer");
 8000d4c:	4843      	ldr	r0, [pc, #268]	@ (8000e5c <PacketBuilder_Build+0x150>)
 8000d4e:	f000 f9c3 	bl	80010d8 <log_debug>
    // Fill Data Stream with the corresponding Transaction ID
    outBuffer[index++] = (responsePacket->transactionID >> 24) & 0xFF;
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	0e1a      	lsrs	r2, r3, #24
 8000d58:	8afb      	ldrh	r3, [r7, #22]
 8000d5a:	1c59      	adds	r1, r3, #1
 8000d5c:	82f9      	strh	r1, [r7, #22]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	440b      	add	r3, r1
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 16) & 0xFF;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	0c1a      	lsrs	r2, r3, #16
 8000d6e:	8afb      	ldrh	r3, [r7, #22]
 8000d70:	1c59      	adds	r1, r3, #1
 8000d72:	82f9      	strh	r1, [r7, #22]
 8000d74:	4619      	mov	r1, r3
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	440b      	add	r3, r1
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID >> 8)  & 0xFF;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	0a1a      	lsrs	r2, r3, #8
 8000d84:	8afb      	ldrh	r3, [r7, #22]
 8000d86:	1c59      	adds	r1, r3, #1
 8000d88:	82f9      	strh	r1, [r7, #22]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	440b      	add	r3, r1
 8000d90:	b2d2      	uxtb	r2, r2
 8000d92:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->transactionID)       & 0xFF;
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	8afb      	ldrh	r3, [r7, #22]
 8000d9a:	1c59      	adds	r1, r3, #1
 8000d9c:	82f9      	strh	r1, [r7, #22]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	440b      	add	r3, r1
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	701a      	strb	r2, [r3, #0]
    log_debug("Adding Output Data Size to Out Buffer");
 8000da8:	482d      	ldr	r0, [pc, #180]	@ (8000e60 <PacketBuilder_Build+0x154>)
 8000daa:	f000 f995 	bl	80010d8 <log_debug>
    // Fill Data Stream with the Output Data Size
    outBuffer[index++] = (responsePacket->outputSize >> 8) & 0xFF;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	889b      	ldrh	r3, [r3, #4]
 8000db2:	0a1b      	lsrs	r3, r3, #8
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	8afb      	ldrh	r3, [r7, #22]
 8000db8:	1c59      	adds	r1, r3, #1
 8000dba:	82f9      	strh	r1, [r7, #22]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	440b      	add	r3, r1
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (responsePacket->outputSize)      & 0xFF;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	889a      	ldrh	r2, [r3, #4]
 8000dca:	8afb      	ldrh	r3, [r7, #22]
 8000dcc:	1c59      	adds	r1, r3, #1
 8000dce:	82f9      	strh	r1, [r7, #22]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	440b      	add	r3, r1
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	701a      	strb	r2, [r3, #0]
    // Copy Output Data contents to Data Stream
    log_debug("Copying Output Data to Out Buffer");
 8000dda:	4822      	ldr	r0, [pc, #136]	@ (8000e64 <PacketBuilder_Build+0x158>)
 8000ddc:	f000 f97c 	bl	80010d8 <log_debug>
    memcpy(&outBuffer[index], responsePacket->outputData, responsePacket->outputSize);
 8000de0:	8afb      	ldrh	r3, [r7, #22]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	18d0      	adds	r0, r2, r3
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	1d99      	adds	r1, r3, #6
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	889b      	ldrh	r3, [r3, #4]
 8000dee:	461a      	mov	r2, r3
 8000df0:	f010 fb15 	bl	801141e <memcpy>
    // Set Index to point to EOD Flag
    index += responsePacket->outputSize;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	889a      	ldrh	r2, [r3, #4]
 8000df8:	8afb      	ldrh	r3, [r7, #22]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	82fb      	strh	r3, [r7, #22]
    log_debug("Adding Outward EOD Flag to Out Buffer");
 8000dfe:	481a      	ldr	r0, [pc, #104]	@ (8000e68 <PacketBuilder_Build+0x15c>)
 8000e00:	f000 f96a 	bl	80010d8 <log_debug>
    // Add EOD Flag to Data Stream
    outBuffer[index++] = (OUT_EOD_FLAG >> 24) & 0xFF;
 8000e04:	8afb      	ldrh	r3, [r7, #22]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	82fa      	strh	r2, [r7, #22]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	4413      	add	r3, r2
 8000e10:	22ca      	movs	r2, #202	@ 0xca
 8000e12:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 16) & 0xFF;
 8000e14:	8afb      	ldrh	r3, [r7, #22]
 8000e16:	1c5a      	adds	r2, r3, #1
 8000e18:	82fa      	strh	r2, [r7, #22]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4413      	add	r3, r2
 8000e20:	22fe      	movs	r2, #254	@ 0xfe
 8000e22:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG >> 8)  & 0xFF;
 8000e24:	8afb      	ldrh	r3, [r7, #22]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	82fa      	strh	r2, [r7, #22]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	4413      	add	r3, r2
 8000e30:	22ba      	movs	r2, #186	@ 0xba
 8000e32:	701a      	strb	r2, [r3, #0]
    outBuffer[index++] = (OUT_EOD_FLAG)       & 0xFF;
 8000e34:	8afb      	ldrh	r3, [r7, #22]
 8000e36:	1c5a      	adds	r2, r3, #1
 8000e38:	82fa      	strh	r2, [r7, #22]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4413      	add	r3, r2
 8000e40:	22be      	movs	r2, #190	@ 0xbe
 8000e42:	701a      	strb	r2, [r3, #0]
    // Set Index to point to End of Data Stream
    *outLength = index;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	8afa      	ldrh	r2, [r7, #22]
 8000e48:	801a      	strh	r2, [r3, #0]
    // Return to indicate successful Packet Build
    return BUILD_SUCCESS;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	08012734 	.word	0x08012734
 8000e58:	08012758 	.word	0x08012758
 8000e5c:	08012780 	.word	0x08012780
 8000e60:	080127a4 	.word	0x080127a4
 8000e64:	080127cc 	.word	0x080127cc
 8000e68:	080127f0 	.word	0x080127f0

08000e6c <PacketParser_Parse>:
#include "constants.h"
#include "Logger.h"
#include <string.h>

ParseStatus_t PacketParser_Parse(const uint8_t* rawData, uint16_t rawLength, ParsedPacket_t* parsedPacket)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	460b      	mov	r3, r1
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	817b      	strh	r3, [r7, #10]
	log_debug("Checking if Data Stream or Packet Structure is NULL.");
 8000e7a:	485d      	ldr	r0, [pc, #372]	@ (8000ff0 <PacketParser_Parse+0x184>)
 8000e7c:	f000 f92c 	bl	80010d8 <log_debug>
	// Check if Data Stream or Packet structure is NULL
	if (!rawData || !parsedPacket)
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d002      	beq.n	8000e8c <PacketParser_Parse+0x20>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d104      	bne.n	8000e96 <PacketParser_Parse+0x2a>
    {
		log_error("Data Stream or Packet Structure is NULL");
 8000e8c:	4859      	ldr	r0, [pc, #356]	@ (8000ff4 <PacketParser_Parse+0x188>)
 8000e8e:	f000 f971 	bl	8001174 <log_error>
    	return PARSE_NULL_POINTER;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e0a7      	b.n	8000fe6 <PacketParser_Parse+0x17a>
    }
	log_debug("Checking if Data Stream contains less than 12 bytes.");
 8000e96:	4858      	ldr	r0, [pc, #352]	@ (8000ff8 <PacketParser_Parse+0x18c>)
 8000e98:	f000 f91e 	bl	80010d8 <log_debug>
    // Check if Data Stream contains Data of valid length
    if (rawLength < 12)
 8000e9c:	897b      	ldrh	r3, [r7, #10]
 8000e9e:	2b0b      	cmp	r3, #11
 8000ea0:	d804      	bhi.n	8000eac <PacketParser_Parse+0x40>
    {
    	log_error("Data stream contain less than 12 bytes");
 8000ea2:	4856      	ldr	r0, [pc, #344]	@ (8000ffc <PacketParser_Parse+0x190>)
 8000ea4:	f000 f966 	bl	8001174 <log_error>
    	return PARSE_INVALID_LENGTH;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e09c      	b.n	8000fe6 <PacketParser_Parse+0x17a>
    }
    // Set Index to start of Data Stream
    uint16_t index = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up Transaction ID.");
 8000eb0:	4853      	ldr	r0, [pc, #332]	@ (8001000 <PacketParser_Parse+0x194>)
 8000eb2:	f000 f911 	bl	80010d8 <log_debug>
    // Retrieve Transaction ID from Data Stream
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8000eb6:	8afb      	ldrh	r3, [r7, #22]
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	061a      	lsls	r2, r3, #24
                                  (rawData[index + 1] << 16) |
 8000ec0:	8afb      	ldrh	r3, [r7, #22]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	68f9      	ldr	r1, [r7, #12]
 8000ec6:	440b      	add	r3, r1
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	041b      	lsls	r3, r3, #16
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8000ecc:	431a      	orrs	r2, r3
                                  (rawData[index + 2] << 8)  |
 8000ece:	8afb      	ldrh	r3, [r7, #22]
 8000ed0:	3302      	adds	r3, #2
 8000ed2:	68f9      	ldr	r1, [r7, #12]
 8000ed4:	440b      	add	r3, r1
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	021b      	lsls	r3, r3, #8
                                  (rawData[index + 1] << 16) |
 8000eda:	4313      	orrs	r3, r2
                                  (rawData[index + 3]);
 8000edc:	8afa      	ldrh	r2, [r7, #22]
 8000ede:	3203      	adds	r2, #3
 8000ee0:	68f9      	ldr	r1, [r7, #12]
 8000ee2:	440a      	add	r2, r1
 8000ee4:	7812      	ldrb	r2, [r2, #0]
                                  (rawData[index + 2] << 8)  |
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	461a      	mov	r2, r3
    parsedPacket->transactionID = (rawData[index]     << 24) |
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	601a      	str	r2, [r3, #0]
    // Set Index to point CMD byte
    index += 4;
 8000eee:	8afb      	ldrh	r3, [r7, #22]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	82fb      	strh	r3, [r7, #22]
    log_debug("Filling up CMD, OPTION and INPUT_SIZE fields.");
 8000ef4:	4843      	ldr	r0, [pc, #268]	@ (8001004 <PacketParser_Parse+0x198>)
 8000ef6:	f000 f8ef 	bl	80010d8 <log_debug>
    // Retrieve CMD byte from Data Stream
    parsedPacket->cmd = rawData[index++];
 8000efa:	8afb      	ldrh	r3, [r7, #22]
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	82fa      	strh	r2, [r7, #22]
 8000f00:	461a      	mov	r2, r3
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4413      	add	r3, r2
 8000f06:	781a      	ldrb	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	711a      	strb	r2, [r3, #4]
    // Retrieve OPTION byte from Data Stream
    parsedPacket->option = rawData[index++];
 8000f0c:	8afb      	ldrh	r3, [r7, #22]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	82fa      	strh	r2, [r7, #22]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	781a      	ldrb	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	715a      	strb	r2, [r3, #5]
    // Retrieve INPUT_SIZE half-word from Data Stream
    parsedPacket->inputSize = (rawData[index] << 8) | rawData[index + 1];
 8000f1e:	8afb      	ldrh	r3, [r7, #22]
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	8afb      	ldrh	r3, [r7, #22]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	68f9      	ldr	r1, [r7, #12]
 8000f30:	440b      	add	r3, r1
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	80da      	strh	r2, [r3, #6]
    // Set Index to point INPUT_DATA
    index += 2;
 8000f40:	8afb      	ldrh	r3, [r7, #22]
 8000f42:	3302      	adds	r3, #2
 8000f44:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking if INPUT_SIZE is within the limits.");
 8000f46:	4830      	ldr	r0, [pc, #192]	@ (8001008 <PacketParser_Parse+0x19c>)
 8000f48:	f000 f8c6 	bl	80010d8 <log_debug>
    // Check if INPUT_SIZE is under the prescribed limit
    if (parsedPacket->inputSize > MAX_INPUT_DATA_SIZE || ((index - 1) + parsedPacket->inputSize + 4) > rawLength)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	88db      	ldrh	r3, [r3, #6]
 8000f50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f54:	d808      	bhi.n	8000f68 <PacketParser_Parse+0xfc>
 8000f56:	8afb      	ldrh	r3, [r7, #22]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	88d2      	ldrh	r2, [r2, #6]
 8000f5e:	4413      	add	r3, r2
 8000f60:	1cda      	adds	r2, r3, #3
 8000f62:	897b      	ldrh	r3, [r7, #10]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	db04      	blt.n	8000f72 <PacketParser_Parse+0x106>
    {
    	log_error("Input Data Size is too big.");
 8000f68:	4828      	ldr	r0, [pc, #160]	@ (800100c <PacketParser_Parse+0x1a0>)
 8000f6a:	f000 f903 	bl	8001174 <log_error>
        return PARSE_INPUT_TOO_LARGE;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	e039      	b.n	8000fe6 <PacketParser_Parse+0x17a>
    }
    log_debug("Copying INPUT DATA to Packet Structure.");
 8000f72:	4827      	ldr	r0, [pc, #156]	@ (8001010 <PacketParser_Parse+0x1a4>)
 8000f74:	f000 f8b0 	bl	80010d8 <log_debug>
    // Copy INPUT_DATA array from Data Stream to Packet structure
    memcpy(parsedPacket->inputData, &rawData[index], parsedPacket->inputSize);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f103 0008 	add.w	r0, r3, #8
 8000f7e:	8afb      	ldrh	r3, [r7, #22]
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	18d1      	adds	r1, r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	88db      	ldrh	r3, [r3, #6]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	f010 fa48 	bl	801141e <memcpy>
    // Set Index to point EOD Flag
    index += parsedPacket->inputSize;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	88da      	ldrh	r2, [r3, #6]
 8000f92:	8afb      	ldrh	r3, [r7, #22]
 8000f94:	4413      	add	r3, r2
 8000f96:	82fb      	strh	r3, [r7, #22]
    log_debug("Checking the Received EOD word.");
 8000f98:	481e      	ldr	r0, [pc, #120]	@ (8001014 <PacketParser_Parse+0x1a8>)
 8000f9a:	f000 f89d 	bl	80010d8 <log_debug>
    // Retrieve EOD Flag from Data Stream
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8000f9e:	8afb      	ldrh	r3, [r7, #22]
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	061a      	lsls	r2, r3, #24
                           	   (rawData[index + 1] << 16) |
 8000fa8:	8afb      	ldrh	r3, [r7, #22]
 8000faa:	3301      	adds	r3, #1
 8000fac:	68f9      	ldr	r1, [r7, #12]
 8000fae:	440b      	add	r3, r1
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	041b      	lsls	r3, r3, #16
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8000fb4:	431a      	orrs	r2, r3
							   (rawData[index + 2] << 8)  |
 8000fb6:	8afb      	ldrh	r3, [r7, #22]
 8000fb8:	3302      	adds	r3, #2
 8000fba:	68f9      	ldr	r1, [r7, #12]
 8000fbc:	440b      	add	r3, r1
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	021b      	lsls	r3, r3, #8
                           	   (rawData[index + 1] << 16) |
 8000fc2:	4313      	orrs	r3, r2
							   (rawData[index + 3]);
 8000fc4:	8afa      	ldrh	r2, [r7, #22]
 8000fc6:	3203      	adds	r2, #3
 8000fc8:	68f9      	ldr	r1, [r7, #12]
 8000fca:	440a      	add	r2, r1
 8000fcc:	7812      	ldrb	r2, [r2, #0]
							   (rawData[index + 2] << 8)  |
 8000fce:	4313      	orrs	r3, r2
    uint32_t received_IN_EOD = (rawData[index]     << 24) |
 8000fd0:	613b      	str	r3, [r7, #16]
    // Check if EOD Flag is valid
    if (received_IN_EOD != IN_EOD_FLAG)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4a10      	ldr	r2, [pc, #64]	@ (8001018 <PacketParser_Parse+0x1ac>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d004      	beq.n	8000fe4 <PacketParser_Parse+0x178>
    {
    	log_error("Received EOD Flag is Invalid");
 8000fda:	4810      	ldr	r0, [pc, #64]	@ (800101c <PacketParser_Parse+0x1b0>)
 8000fdc:	f000 f8ca 	bl	8001174 <log_error>
        return PARSE_EOD_MISMATCH;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e000      	b.n	8000fe6 <PacketParser_Parse+0x17a>
    }
    // Return to Indicate successful parsing
    return PARSE_SUCCESS;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	08012818 	.word	0x08012818
 8000ff4:	08012850 	.word	0x08012850
 8000ff8:	08012878 	.word	0x08012878
 8000ffc:	080128b0 	.word	0x080128b0
 8001000:	080128d8 	.word	0x080128d8
 8001004:	080128f4 	.word	0x080128f4
 8001008:	08012924 	.word	0x08012924
 800100c:	08012954 	.word	0x08012954
 8001010:	08012970 	.word	0x08012970
 8001014:	08012998 	.word	0x08012998
 8001018:	deadbeef 	.word	0xdeadbeef
 800101c:	080129b8 	.word	0x080129b8

08001020 <log_init>:
#define LOG_BUFFER_SIZE 256

static LogLevel current_level = LOG_LEVEL_INFO;

void log_init(LogLevel level)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
    current_level = level;
 800102a:	4a04      	ldr	r2, [pc, #16]	@ (800103c <log_init+0x1c>)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	7013      	strb	r3, [r2, #0]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	20000000 	.word	0x20000000

08001040 <log_generic>:

static void log_generic(LogLevel level, const char *prefix, const char *color, const char *fmt, va_list args)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b0c7      	sub	sp, #284	@ 0x11c
 8001044:	af02      	add	r7, sp, #8
 8001046:	4604      	mov	r4, r0
 8001048:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 800104c:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8001050:	6001      	str	r1, [r0, #0]
 8001052:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001056:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 800105a:	600a      	str	r2, [r1, #0]
 800105c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001060:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800106a:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800106e:	4622      	mov	r2, r4
 8001070:	701a      	strb	r2, [r3, #0]
    if (level < current_level)
 8001072:	4b16      	ldr	r3, [pc, #88]	@ (80010cc <log_generic+0x8c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800107a:	f2a2 1201 	subw	r2, r2, #257	@ 0x101
 800107e:	7812      	ldrb	r2, [r2, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d31e      	bcc.n	80010c2 <log_generic+0x82>
        return;

    char buffer[LOG_BUFFER_SIZE];
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001084:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001088:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 800108c:	f107 0010 	add.w	r0, r7, #16
 8001090:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001094:	6812      	ldr	r2, [r2, #0]
 8001096:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800109a:	f010 f937 	bl	801130c <vsniprintf>

    // Print directly using printf(), assumes it's redirected to VCOM via BSP
    printf("%s[%s] %s%s\r\n", color, prefix, buffer, COLOR_RESET);
 800109e:	f107 0310 	add.w	r3, r7, #16
 80010a2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80010a6:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80010aa:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80010ae:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 80010b2:	4807      	ldr	r0, [pc, #28]	@ (80010d0 <log_generic+0x90>)
 80010b4:	9000      	str	r0, [sp, #0]
 80010b6:	6812      	ldr	r2, [r2, #0]
 80010b8:	6809      	ldr	r1, [r1, #0]
 80010ba:	4806      	ldr	r0, [pc, #24]	@ (80010d4 <log_generic+0x94>)
 80010bc:	f010 f852 	bl	8011164 <iprintf>
 80010c0:	e000      	b.n	80010c4 <log_generic+0x84>
        return;
 80010c2:	bf00      	nop
}
 80010c4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd90      	pop	{r4, r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	080129e8 	.word	0x080129e8
 80010d4:	080129d8 	.word	0x080129d8

080010d8 <log_debug>:

void log_debug(const char *fmt, ...)
{
 80010d8:	b40f      	push	{r0, r1, r2, r3}
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 80010e0:	f107 0314 	add.w	r3, r7, #20
 80010e4:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_DEBUG, "DEBUG", COLOR_DEBUG, fmt, args);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <log_debug+0x2c>)
 80010ee:	4906      	ldr	r1, [pc, #24]	@ (8001108 <log_debug+0x30>)
 80010f0:	2000      	movs	r0, #0
 80010f2:	f7ff ffa5 	bl	8001040 <log_generic>
    va_end(args);
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001100:	b004      	add	sp, #16
 8001102:	4770      	bx	lr
 8001104:	080129f0 	.word	0x080129f0
 8001108:	080129f8 	.word	0x080129f8

0800110c <log_info>:

void log_info(const char *fmt, ...)
{
 800110c:	b40f      	push	{r0, r1, r2, r3}
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_INFO, "INFO", COLOR_INFO, fmt, args);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <log_info+0x2c>)
 8001122:	4906      	ldr	r1, [pc, #24]	@ (800113c <log_info+0x30>)
 8001124:	2001      	movs	r0, #1
 8001126:	f7ff ff8b 	bl	8001040 <log_generic>
    va_end(args);
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001134:	b004      	add	sp, #16
 8001136:	4770      	bx	lr
 8001138:	08012a00 	.word	0x08012a00
 800113c:	08012a08 	.word	0x08012a08

08001140 <log_warn>:

void log_warn(const char *fmt, ...)
{
 8001140:	b40f      	push	{r0, r1, r2, r3}
 8001142:	b580      	push	{r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_WARN, "WARN", COLOR_WARN, fmt, args);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	4a05      	ldr	r2, [pc, #20]	@ (800116c <log_warn+0x2c>)
 8001156:	4906      	ldr	r1, [pc, #24]	@ (8001170 <log_warn+0x30>)
 8001158:	2002      	movs	r0, #2
 800115a:	f7ff ff71 	bl	8001040 <log_generic>
    va_end(args);
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001168:	b004      	add	sp, #16
 800116a:	4770      	bx	lr
 800116c:	08012a10 	.word	0x08012a10
 8001170:	08012a18 	.word	0x08012a18

08001174 <log_error>:

void log_error(const char *fmt, ...)
{
 8001174:	b40f      	push	{r0, r1, r2, r3}
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af02      	add	r7, sp, #8
    va_list args;
    va_start(args, fmt);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	607b      	str	r3, [r7, #4]
    log_generic(LOG_LEVEL_ERROR, "ERROR", COLOR_ERROR, fmt, args);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4a05      	ldr	r2, [pc, #20]	@ (80011a0 <log_error+0x2c>)
 800118a:	4906      	ldr	r1, [pc, #24]	@ (80011a4 <log_error+0x30>)
 800118c:	2003      	movs	r0, #3
 800118e:	f7ff ff57 	bl	8001040 <log_generic>
    va_end(args);
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800119c:	b004      	add	sp, #16
 800119e:	4770      	bx	lr
 80011a0:	08012a20 	.word	0x08012a20
 80011a4:	08012a28 	.word	0x08012a28

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ac:	f001 fc3e 	bl	8002a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b0:	f000 f84a 	bl	8001248 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b4:	f000 fb4c 	bl	8001850 <MX_GPIO_Init>
  MX_USB_PCD_Init();
 80011b8:	f000 fae8 	bl	800178c <MX_USB_PCD_Init>
  MX_USART2_UART_Init();
 80011bc:	f000 fa02 	bl	80015c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011c0:	f000 f8d2 	bl	8001368 <MX_I2C1_Init>
  MX_SPI1_Init();
 80011c4:	f000 f9a8 	bl	8001518 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 80011c8:	f000 fa94 	bl	80016f4 <MX_USART6_UART_Init>
  MX_RTC_Init();
 80011cc:	f000 f922 	bl	8001414 <MX_RTC_Init>
  MX_RNG_Init();
 80011d0:	f000 f90a 	bl	80013e8 <MX_RNG_Init>
  MX_HASH_Init();
 80011d4:	f000 f8ae 	bl	8001334 <MX_HASH_Init>
  MX_USART3_UART_Init();
 80011d8:	f000 fa40 	bl	800165c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  while(hUsbDeviceFS.pClassData == NULL);
 80011dc:	bf00      	nop
 80011de:	4b18      	ldr	r3, [pc, #96]	@ (8001240 <main+0x98>)
 80011e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0fa      	beq.n	80011de <main+0x36>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80011e8:	2000      	movs	r0, #0
 80011ea:	f001 fa05 	bl	80025f8 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80011ee:	2001      	movs	r0, #1
 80011f0:	f001 fa02 	bl	80025f8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80011f4:	2002      	movs	r0, #2
 80011f6:	f001 f9ff 	bl	80025f8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80011fa:	2101      	movs	r1, #1
 80011fc:	2000      	movs	r0, #0
 80011fe:	f001 fa9b 	bl	8002738 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001202:	4b10      	ldr	r3, [pc, #64]	@ (8001244 <main+0x9c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001208:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	@ (8001244 <main+0x9c>)
 800120c:	2200      	movs	r2, #0
 800120e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <main+0x9c>)
 8001212:	2200      	movs	r2, #0
 8001214:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <main+0x9c>)
 8001218:	2200      	movs	r2, #0
 800121a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800121c:	4b09      	ldr	r3, [pc, #36]	@ (8001244 <main+0x9c>)
 800121e:	2200      	movs	r2, #0
 8001220:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001222:	4908      	ldr	r1, [pc, #32]	@ (8001244 <main+0x9c>)
 8001224:	2000      	movs	r0, #0
 8001226:	f001 fb21 	bl	800286c <BSP_COM_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <main+0x8c>
  {
    Error_Handler();
 8001230:	f000 fc0a 	bl	8001a48 <Error_Handler>
  }

  /* Infinite loop */

  HSMManager_Init();
 8001234:	f7ff fb38 	bl	80008a8 <HSMManager_Init>

  HSMManager_ProcessCommand();
 8001238:	f7ff fbaa 	bl	8000990 <HSMManager_ProcessCommand>

  /* USER CODE BEGIN WHILE */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <main+0x94>
 8001240:	200007b4 	.word	0x200007b4
 8001244:	2000019c 	.word	0x2000019c

08001248 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b09c      	sub	sp, #112	@ 0x70
 800124c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124e:	f107 0320 	add.w	r3, r7, #32
 8001252:	2250      	movs	r2, #80	@ 0x50
 8001254:	2100      	movs	r1, #0
 8001256:	4618      	mov	r0, r3
 8001258:	f010 f866 	bl	8011328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800125c:	f107 0308 	add.w	r3, r7, #8
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800126e:	4b2f      	ldr	r3, [pc, #188]	@ (800132c <SystemClock_Config+0xe4>)
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	4a2e      	ldr	r2, [pc, #184]	@ (800132c <SystemClock_Config+0xe4>)
 8001274:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 8001278:	6113      	str	r3, [r2, #16]
 800127a:	4b2c      	ldr	r3, [pc, #176]	@ (800132c <SystemClock_Config+0xe4>)
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001286:	bf00      	nop
 8001288:	4b28      	ldr	r3, [pc, #160]	@ (800132c <SystemClock_Config+0xe4>)
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	f003 0308 	and.w	r3, r3, #8
 8001290:	2b08      	cmp	r3, #8
 8001292:	d1f9      	bne.n	8001288 <SystemClock_Config+0x40>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8001294:	2329      	movs	r3, #41	@ 0x29
 8001296:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001298:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800129e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80012a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80012a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012aa:	2302      	movs	r3, #2
 80012ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80012ae:	2303      	movs	r3, #3
 80012b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012b2:	2304      	movs	r3, #4
 80012b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 250;
 80012b6:	23fa      	movs	r3, #250	@ 0xfa
 80012b8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012ba:	2302      	movs	r3, #2
 80012bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012be:	2302      	movs	r3, #2
 80012c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012c2:	2302      	movs	r3, #2
 80012c4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_1;
 80012c6:	2304      	movs	r3, #4
 80012c8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d2:	f107 0320 	add.w	r3, r7, #32
 80012d6:	4618      	mov	r0, r3
 80012d8:	f003 fe94 	bl	8005004 <HAL_RCC_OscConfig>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80012e2:	f000 fbb1 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e6:	231f      	movs	r3, #31
 80012e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ea:	2303      	movs	r3, #3
 80012ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012fe:	f107 0308 	add.w	r3, r7, #8
 8001302:	2105      	movs	r1, #5
 8001304:	4618      	mov	r0, r3
 8001306:	f004 fab5 	bl	8005874 <HAL_RCC_ClockConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001310:	f000 fb9a 	bl	8001a48 <Error_Handler>
  }

  /** Configure the programming delay
  */
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001314:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <SystemClock_Config+0xe8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800131c:	4a04      	ldr	r2, [pc, #16]	@ (8001330 <SystemClock_Config+0xe8>)
 800131e:	f043 0320 	orr.w	r3, r3, #32
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	3770      	adds	r7, #112	@ 0x70
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	44020800 	.word	0x44020800
 8001330:	40022000 	.word	0x40022000

08001334 <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Instance = HASH;
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <MX_HASH_Init+0x2c>)
 800133a:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <MX_HASH_Init+0x30>)
 800133c:	601a      	str	r2, [r3, #0]
  hhash.Init.DataType = HASH_NO_SWAP;
 800133e:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <MX_HASH_Init+0x2c>)
 8001340:	2200      	movs	r2, #0
 8001342:	605a      	str	r2, [r3, #4]
  hhash.Init.Algorithm = HASH_ALGOSELECTION_SHA1;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <MX_HASH_Init+0x2c>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	@ (8001360 <MX_HASH_Init+0x2c>)
 800134c:	f001 ffec 	bl	8003328 <HAL_HASH_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_HASH_Init+0x26>
  {
    Error_Handler();
 8001356:	f000 fb77 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	200001ac 	.word	0x200001ac
 8001364:	420c0400 	.word	0x420c0400

08001368 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800136c:	4b1b      	ldr	r3, [pc, #108]	@ (80013dc <MX_I2C1_Init+0x74>)
 800136e:	4a1c      	ldr	r2, [pc, #112]	@ (80013e0 <MX_I2C1_Init+0x78>)
 8001370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C043E5;
 8001372:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <MX_I2C1_Init+0x74>)
 8001374:	4a1b      	ldr	r2, [pc, #108]	@ (80013e4 <MX_I2C1_Init+0x7c>)
 8001376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001378:	4b18      	ldr	r3, [pc, #96]	@ (80013dc <MX_I2C1_Init+0x74>)
 800137a:	2200      	movs	r2, #0
 800137c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800137e:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <MX_I2C1_Init+0x74>)
 8001380:	2201      	movs	r2, #1
 8001382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001384:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <MX_I2C1_Init+0x74>)
 8001386:	2200      	movs	r2, #0
 8001388:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800138a:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <MX_I2C1_Init+0x74>)
 800138c:	2200      	movs	r2, #0
 800138e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001390:	4b12      	ldr	r3, [pc, #72]	@ (80013dc <MX_I2C1_Init+0x74>)
 8001392:	2200      	movs	r2, #0
 8001394:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001396:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <MX_I2C1_Init+0x74>)
 8001398:	2200      	movs	r2, #0
 800139a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139c:	4b0f      	ldr	r3, [pc, #60]	@ (80013dc <MX_I2C1_Init+0x74>)
 800139e:	2200      	movs	r2, #0
 80013a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a2:	480e      	ldr	r0, [pc, #56]	@ (80013dc <MX_I2C1_Init+0x74>)
 80013a4:	f001 fff8 	bl	8003398 <HAL_I2C_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013ae:	f000 fb4b 	bl	8001a48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013b2:	2100      	movs	r1, #0
 80013b4:	4809      	ldr	r0, [pc, #36]	@ (80013dc <MX_I2C1_Init+0x74>)
 80013b6:	f002 f88a 	bl	80034ce <HAL_I2CEx_ConfigAnalogFilter>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013c0:	f000 fb42 	bl	8001a48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013c4:	2100      	movs	r1, #0
 80013c6:	4805      	ldr	r0, [pc, #20]	@ (80013dc <MX_I2C1_Init+0x74>)
 80013c8:	f002 f8cc 	bl	8003564 <HAL_I2CEx_ConfigDigitalFilter>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80013d2:	f000 fb39 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200001ec 	.word	0x200001ec
 80013e0:	40005400 	.word	0x40005400
 80013e4:	10c043e5 	.word	0x10c043e5

080013e8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <MX_RNG_Init+0x24>)
 80013ee:	4a08      	ldr	r2, [pc, #32]	@ (8001410 <MX_RNG_Init+0x28>)
 80013f0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_RNG_Init+0x24>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80013f8:	4804      	ldr	r0, [pc, #16]	@ (800140c <MX_RNG_Init+0x24>)
 80013fa:	f009 fdd5 	bl	800afa8 <HAL_RNG_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001404:	f000 fb20 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000240 	.word	0x20000240
 8001410:	420c0800 	.word	0x420c0800

08001414 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08e      	sub	sp, #56	@ 0x38
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
 800142a:	615a      	str	r2, [r3, #20]
 800142c:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001442:	4b33      	ldr	r3, [pc, #204]	@ (8001510 <MX_RTC_Init+0xfc>)
 8001444:	4a33      	ldr	r2, [pc, #204]	@ (8001514 <MX_RTC_Init+0x100>)
 8001446:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001448:	4b31      	ldr	r3, [pc, #196]	@ (8001510 <MX_RTC_Init+0xfc>)
 800144a:	2200      	movs	r2, #0
 800144c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800144e:	4b30      	ldr	r3, [pc, #192]	@ (8001510 <MX_RTC_Init+0xfc>)
 8001450:	227f      	movs	r2, #127	@ 0x7f
 8001452:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001454:	4b2e      	ldr	r3, [pc, #184]	@ (8001510 <MX_RTC_Init+0xfc>)
 8001456:	22ff      	movs	r2, #255	@ 0xff
 8001458:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800145a:	4b2d      	ldr	r3, [pc, #180]	@ (8001510 <MX_RTC_Init+0xfc>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001460:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <MX_RTC_Init+0xfc>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001466:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <MX_RTC_Init+0xfc>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800146c:	4b28      	ldr	r3, [pc, #160]	@ (8001510 <MX_RTC_Init+0xfc>)
 800146e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001472:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001474:	4b26      	ldr	r3, [pc, #152]	@ (8001510 <MX_RTC_Init+0xfc>)
 8001476:	2200      	movs	r2, #0
 8001478:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800147a:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <MX_RTC_Init+0xfc>)
 800147c:	2200      	movs	r2, #0
 800147e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001480:	4823      	ldr	r0, [pc, #140]	@ (8001510 <MX_RTC_Init+0xfc>)
 8001482:	f009 ff35 	bl	800b2f0 <HAL_RTC_Init>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800148c:	f000 fadc 	bl	8001a48 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8001494:	2300      	movs	r3, #0
 8001496:	62bb      	str	r3, [r7, #40]	@ 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800149c:	2300      	movs	r3, #0
 800149e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	481a      	ldr	r0, [pc, #104]	@ (8001510 <MX_RTC_Init+0xfc>)
 80014a8:	f00a f988 	bl	800b7bc <HAL_RTCEx_PrivilegeModeSet>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80014b2:	f000 fac9 	bl	8001a48 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0x0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0x0;
 80014be:	2300      	movs	r3, #0
 80014c0:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	2201      	movs	r2, #1
 80014d0:	4619      	mov	r1, r3
 80014d2:	480f      	ldr	r0, [pc, #60]	@ (8001510 <MX_RTC_Init+0xfc>)
 80014d4:	f009 ff8e 	bl	800b3f4 <HAL_RTC_SetTime>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80014de:	f000 fab3 	bl	8001a48 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80014e2:	2301      	movs	r3, #1
 80014e4:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 80014e6:	2301      	movs	r3, #1
 80014e8:	717b      	strb	r3, [r7, #5]
  sDate.Date = 0x1;
 80014ea:	2301      	movs	r3, #1
 80014ec:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0x0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2201      	movs	r2, #1
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_RTC_Init+0xfc>)
 80014fa:	f00a f80d 	bl	800b518 <HAL_RTC_SetDate>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8001504:	f000 faa0 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3738      	adds	r7, #56	@ 0x38
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000254 	.word	0x20000254
 8001514:	44007800 	.word	0x44007800

08001518 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800151c:	4b27      	ldr	r3, [pc, #156]	@ (80015bc <MX_SPI1_Init+0xa4>)
 800151e:	4a28      	ldr	r2, [pc, #160]	@ (80015c0 <MX_SPI1_Init+0xa8>)
 8001520:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001522:	4b26      	ldr	r3, [pc, #152]	@ (80015bc <MX_SPI1_Init+0xa4>)
 8001524:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001528:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800152a:	4b24      	ldr	r3, [pc, #144]	@ (80015bc <MX_SPI1_Init+0xa4>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001530:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <MX_SPI1_Init+0xa4>)
 8001532:	2207      	movs	r2, #7
 8001534:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001536:	4b21      	ldr	r3, [pc, #132]	@ (80015bc <MX_SPI1_Init+0xa4>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800153c:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <MX_SPI1_Init+0xa4>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001542:	4b1e      	ldr	r3, [pc, #120]	@ (80015bc <MX_SPI1_Init+0xa4>)
 8001544:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001548:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800154a:	4b1c      	ldr	r3, [pc, #112]	@ (80015bc <MX_SPI1_Init+0xa4>)
 800154c:	f04f 42c0 	mov.w	r2, #1610612736	@ 0x60000000
 8001550:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001552:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <MX_SPI1_Init+0xa4>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001558:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <MX_SPI1_Init+0xa4>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155e:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <MX_SPI1_Init+0xa4>)
 8001560:	2200      	movs	r2, #0
 8001562:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <MX_SPI1_Init+0xa4>)
 8001566:	2207      	movs	r2, #7
 8001568:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800156a:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_SPI1_Init+0xa4>)
 800156c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001570:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001572:	4b12      	ldr	r3, [pc, #72]	@ (80015bc <MX_SPI1_Init+0xa4>)
 8001574:	2200      	movs	r2, #0
 8001576:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001578:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <MX_SPI1_Init+0xa4>)
 800157a:	2200      	movs	r2, #0
 800157c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800157e:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <MX_SPI1_Init+0xa4>)
 8001580:	2200      	movs	r2, #0
 8001582:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001584:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <MX_SPI1_Init+0xa4>)
 8001586:	2200      	movs	r2, #0
 8001588:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800158a:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <MX_SPI1_Init+0xa4>)
 800158c:	2200      	movs	r2, #0
 800158e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001590:	4b0a      	ldr	r3, [pc, #40]	@ (80015bc <MX_SPI1_Init+0xa4>)
 8001592:	2200      	movs	r2, #0
 8001594:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001596:	4b09      	ldr	r3, [pc, #36]	@ (80015bc <MX_SPI1_Init+0xa4>)
 8001598:	2200      	movs	r2, #0
 800159a:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800159c:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <MX_SPI1_Init+0xa4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <MX_SPI1_Init+0xa4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015a8:	4804      	ldr	r0, [pc, #16]	@ (80015bc <MX_SPI1_Init+0xa4>)
 80015aa:	f00a f935 	bl	800b818 <HAL_SPI_Init>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80015b4:	f000 fa48 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000284 	.word	0x20000284
 80015c0:	40013000 	.word	0x40013000

080015c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015c8:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015ca:	4a23      	ldr	r2, [pc, #140]	@ (8001658 <MX_USART2_UART_Init+0x94>)
 80015cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ce:	4b21      	ldr	r3, [pc, #132]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015ea:	220c      	movs	r2, #12
 80015ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ee:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015f4:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001600:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 8001602:	2200      	movs	r2, #0
 8001604:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001606:	4b13      	ldr	r3, [pc, #76]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160c:	4811      	ldr	r0, [pc, #68]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 800160e:	f00a fa8e 	bl	800bb2e <HAL_UART_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001618:	f000 fa16 	bl	8001a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161c:	2100      	movs	r1, #0
 800161e:	480d      	ldr	r0, [pc, #52]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 8001620:	f00a ffba 	bl	800c598 <HAL_UARTEx_SetTxFifoThreshold>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800162a:	f000 fa0d 	bl	8001a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162e:	2100      	movs	r1, #0
 8001630:	4808      	ldr	r0, [pc, #32]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 8001632:	f00a ffef 	bl	800c614 <HAL_UARTEx_SetRxFifoThreshold>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800163c:	f000 fa04 	bl	8001a48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001640:	4804      	ldr	r0, [pc, #16]	@ (8001654 <MX_USART2_UART_Init+0x90>)
 8001642:	f00a ff70 	bl	800c526 <HAL_UARTEx_DisableFifoMode>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800164c:	f000 f9fc 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000314 	.word	0x20000314
 8001658:	40004400 	.word	0x40004400

0800165c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001660:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 8001662:	4a23      	ldr	r2, [pc, #140]	@ (80016f0 <MX_USART3_UART_Init+0x94>)
 8001664:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 8001668:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800166c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800166e:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001674:	4b1d      	ldr	r3, [pc, #116]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800167a:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001680:	4b1a      	ldr	r3, [pc, #104]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 8001682:	220c      	movs	r2, #12
 8001684:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001686:	4b19      	ldr	r3, [pc, #100]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800168c:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 800168e:	2200      	movs	r2, #0
 8001690:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001692:	4b16      	ldr	r3, [pc, #88]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 8001694:	2200      	movs	r2, #0
 8001696:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001698:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800169e:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016a4:	4811      	ldr	r0, [pc, #68]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 80016a6:	f00a fa42 	bl	800bb2e <HAL_UART_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016b0:	f000 f9ca 	bl	8001a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b4:	2100      	movs	r1, #0
 80016b6:	480d      	ldr	r0, [pc, #52]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 80016b8:	f00a ff6e 	bl	800c598 <HAL_UARTEx_SetTxFifoThreshold>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016c2:	f000 f9c1 	bl	8001a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4808      	ldr	r0, [pc, #32]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 80016ca:	f00a ffa3 	bl	800c614 <HAL_UARTEx_SetRxFifoThreshold>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016d4:	f000 f9b8 	bl	8001a48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016d8:	4804      	ldr	r0, [pc, #16]	@ (80016ec <MX_USART3_UART_Init+0x90>)
 80016da:	f00a ff24 	bl	800c526 <HAL_UARTEx_DisableFifoMode>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016e4:	f000 f9b0 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200003a8 	.word	0x200003a8
 80016f0:	40004800 	.word	0x40004800

080016f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016f8:	4b22      	ldr	r3, [pc, #136]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 80016fa:	4a23      	ldr	r2, [pc, #140]	@ (8001788 <MX_USART6_UART_Init+0x94>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b1f      	ldr	r3, [pc, #124]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001712:	4b1c      	ldr	r3, [pc, #112]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b1a      	ldr	r3, [pc, #104]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b19      	ldr	r3, [pc, #100]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b17      	ldr	r3, [pc, #92]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172a:	4b16      	ldr	r3, [pc, #88]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001730:	4b14      	ldr	r3, [pc, #80]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	625a      	str	r2, [r3, #36]	@ 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001736:	4b13      	ldr	r3, [pc, #76]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800173c:	4811      	ldr	r0, [pc, #68]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 800173e:	f00a f9f6 	bl	800bb2e <HAL_UART_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001748:	f000 f97e 	bl	8001a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174c:	2100      	movs	r1, #0
 800174e:	480d      	ldr	r0, [pc, #52]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 8001750:	f00a ff22 	bl	800c598 <HAL_UARTEx_SetTxFifoThreshold>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800175a:	f000 f975 	bl	8001a48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800175e:	2100      	movs	r1, #0
 8001760:	4808      	ldr	r0, [pc, #32]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 8001762:	f00a ff57 	bl	800c614 <HAL_UARTEx_SetRxFifoThreshold>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800176c:	f000 f96c 	bl	8001a48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	@ (8001784 <MX_USART6_UART_Init+0x90>)
 8001772:	f00a fed8 	bl	800c526 <HAL_UARTEx_DisableFifoMode>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800177c:	f000 f964 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	2000043c 	.word	0x2000043c
 8001788:	40006400 	.word	0x40006400

0800178c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USB_Init 0 */
  hpcd_USB_DRD_FS.pData = &hUsbDeviceFS;
 8001790:	4b29      	ldr	r3, [pc, #164]	@ (8001838 <MX_USB_PCD_Init+0xac>)
 8001792:	4a2a      	ldr	r2, [pc, #168]	@ (800183c <MX_USB_PCD_Init+0xb0>)
 8001794:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <MX_USB_PCD_Init+0xac>)
 800179a:	4a29      	ldr	r2, [pc, #164]	@ (8001840 <MX_USB_PCD_Init+0xb4>)
 800179c:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800179e:	4b26      	ldr	r3, [pc, #152]	@ (8001838 <MX_USB_PCD_Init+0xac>)
 80017a0:	2208      	movs	r2, #8
 80017a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80017a4:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <MX_USB_PCD_Init+0xac>)
 80017a6:	2202      	movs	r2, #2
 80017a8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80017aa:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <MX_USB_PCD_Init+0xac>)
 80017ac:	2202      	movs	r2, #2
 80017ae:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80017b0:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <MX_USB_PCD_Init+0xac>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <MX_USB_PCD_Init+0xac>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <MX_USB_PCD_Init+0xac>)
 80017be:	2200      	movs	r2, #0
 80017c0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 80017c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <MX_USB_PCD_Init+0xac>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 80017c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <MX_USB_PCD_Init+0xac>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <MX_USB_PCD_Init+0xac>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80017d4:	4b18      	ldr	r3, [pc, #96]	@ (8001838 <MX_USB_PCD_Init+0xac>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80017da:	4817      	ldr	r0, [pc, #92]	@ (8001838 <MX_USB_PCD_Init+0xac>)
 80017dc:	f001 ff71 	bl	80036c2 <HAL_PCD_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_USB_PCD_Init+0x5e>
  {
    Error_Handler();
 80017e6:	f000 f92f 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */
  if(USBD_Init(&hUsbDeviceFS, &Class_Desc, 0) != USBD_OK)
 80017ea:	2200      	movs	r2, #0
 80017ec:	4915      	ldr	r1, [pc, #84]	@ (8001844 <MX_USB_PCD_Init+0xb8>)
 80017ee:	4813      	ldr	r0, [pc, #76]	@ (800183c <MX_USB_PCD_Init+0xb0>)
 80017f0:	f00e f8b8 	bl	800f964 <USBD_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_USB_PCD_Init+0x72>
        Error_Handler();
 80017fa:	f000 f925 	bl	8001a48 <Error_Handler>

  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80017fe:	4912      	ldr	r1, [pc, #72]	@ (8001848 <MX_USB_PCD_Init+0xbc>)
 8001800:	480e      	ldr	r0, [pc, #56]	@ (800183c <MX_USB_PCD_Init+0xb0>)
 8001802:	f00e f8df 	bl	800f9c4 <USBD_RegisterClass>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_USB_PCD_Init+0x84>
        Error_Handler();
 800180c:	f000 f91c 	bl	8001a48 <Error_Handler>

  if(USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_CDC_Template_fops) != USBD_OK)
 8001810:	490e      	ldr	r1, [pc, #56]	@ (800184c <MX_USB_PCD_Init+0xc0>)
 8001812:	480a      	ldr	r0, [pc, #40]	@ (800183c <MX_USB_PCD_Init+0xb0>)
 8001814:	f00d fb5e 	bl	800eed4 <USBD_CDC_RegisterInterface>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USB_PCD_Init+0x96>
        Error_Handler();
 800181e:	f000 f913 	bl	8001a48 <Error_Handler>

  if(USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8001822:	4806      	ldr	r0, [pc, #24]	@ (800183c <MX_USB_PCD_Init+0xb0>)
 8001824:	f00e f904 	bl	800fa30 <USBD_Start>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USB_PCD_Init+0xa6>
        Error_Handler();
 800182e:	f000 f90b 	bl	8001a48 <Error_Handler>
  /* USER CODE END USB_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200004d0 	.word	0x200004d0
 800183c:	200007b4 	.word	0x200007b4
 8001840:	40016000 	.word	0x40016000
 8001844:	200000d4 	.word	0x200000d4
 8001848:	20000038 	.word	0x20000038
 800184c:	200000b8 	.word	0x200000b8

08001850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	@ 0x30
 8001854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001856:	f107 031c 	add.w	r3, r7, #28
 800185a:	2200      	movs	r2, #0
 800185c:	601a      	str	r2, [r3, #0]
 800185e:	605a      	str	r2, [r3, #4]
 8001860:	609a      	str	r2, [r3, #8]
 8001862:	60da      	str	r2, [r3, #12]
 8001864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001866:	4b72      	ldr	r3, [pc, #456]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 8001868:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800186c:	4a70      	ldr	r2, [pc, #448]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 800186e:	f043 0310 	orr.w	r3, r3, #16
 8001872:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001876:	4b6e      	ldr	r3, [pc, #440]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 8001878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	61bb      	str	r3, [r7, #24]
 8001882:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001884:	4b6a      	ldr	r3, [pc, #424]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 8001886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800188a:	4a69      	ldr	r2, [pc, #420]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001894:	4b66      	ldr	r3, [pc, #408]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 8001896:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a2:	4b63      	ldr	r3, [pc, #396]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 80018a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018a8:	4a61      	ldr	r2, [pc, #388]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 80018aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 80018b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018bc:	613b      	str	r3, [r7, #16]
 80018be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c0:	4b5b      	ldr	r3, [pc, #364]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 80018c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018d0:	4b57      	ldr	r3, [pc, #348]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 80018d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018de:	4b54      	ldr	r3, [pc, #336]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 80018e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018e4:	4a52      	ldr	r2, [pc, #328]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80018ee:	4b50      	ldr	r3, [pc, #320]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 80018f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fc:	4b4c      	ldr	r3, [pc, #304]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 80018fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001902:	4a4b      	ldr	r2, [pc, #300]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 8001904:	f043 0308 	orr.w	r3, r3, #8
 8001908:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800190c:	4b48      	ldr	r3, [pc, #288]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 800190e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800191a:	4b45      	ldr	r3, [pc, #276]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 800191c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001920:	4a43      	ldr	r2, [pc, #268]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 8001922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001926:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800192a:	4b41      	ldr	r3, [pc, #260]	@ (8001a30 <MX_GPIO_Init+0x1e0>)
 800192c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001930:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001938:	2332      	movs	r3, #50	@ 0x32
 800193a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193c:	2302      	movs	r3, #2
 800193e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001944:	2302      	movs	r3, #2
 8001946:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001948:	230b      	movs	r3, #11
 800194a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4619      	mov	r1, r3
 8001952:	4838      	ldr	r0, [pc, #224]	@ (8001a34 <MX_GPIO_Init+0x1e4>)
 8001954:	f001 fb64 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001958:	2384      	movs	r3, #132	@ 0x84
 800195a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001964:	2302      	movs	r3, #2
 8001966:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001968:	230b      	movs	r3, #11
 800196a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4619      	mov	r1, r3
 8001972:	4831      	ldr	r0, [pc, #196]	@ (8001a38 <MX_GPIO_Init+0x1e8>)
 8001974:	f001 fb54 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001978:	2310      	movs	r3, #16
 800197a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197c:	2303      	movs	r3, #3
 800197e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	482b      	ldr	r0, [pc, #172]	@ (8001a38 <MX_GPIO_Init+0x1e8>)
 800198c:	f001 fb48 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : UCPD_CC1_Pin UCPD_CC2_Pin */
  GPIO_InitStruct.Pin = UCPD_CC1_Pin|UCPD_CC2_Pin;
 8001990:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001996:	2303      	movs	r3, #3
 8001998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4825      	ldr	r0, [pc, #148]	@ (8001a3c <MX_GPIO_Init+0x1ec>)
 80019a6:	f001 fb3b 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80019aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80019ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b8:	2302      	movs	r3, #2
 80019ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019bc:	230b      	movs	r3, #11
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	481d      	ldr	r0, [pc, #116]	@ (8001a3c <MX_GPIO_Init+0x1ec>)
 80019c8:	f001 fb2a 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a40 <MX_GPIO_Init+0x1f0>)
 80019d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	4619      	mov	r1, r3
 80019de:	4819      	ldr	r0, [pc, #100]	@ (8001a44 <MX_GPIO_Init+0x1f4>)
 80019e0:	f001 fb1e 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXT_EN_Pin RMI_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TXT_EN_Pin|RMI_TXD0_Pin;
 80019e4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80019e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019f2:	2302      	movs	r3, #2
 80019f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019f6:	230b      	movs	r3, #11
 80019f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4810      	ldr	r0, [pc, #64]	@ (8001a44 <MX_GPIO_Init+0x1f4>)
 8001a02:	f001 fb0d 	bl	8003020 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_TX_Pin ARD_D0_RX_Pin */
  GPIO_InitStruct.Pin = ARD_D1_TX_Pin|ARD_D0_RX_Pin;
 8001a06:	23c0      	movs	r3, #192	@ 0xc0
 8001a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001a16:	2308      	movs	r3, #8
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4806      	ldr	r0, [pc, #24]	@ (8001a3c <MX_GPIO_Init+0x1ec>)
 8001a22:	f001 fafd 	bl	8003020 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a26:	bf00      	nop
 8001a28:	3730      	adds	r7, #48	@ 0x30
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	44020c00 	.word	0x44020c00
 8001a34:	42020800 	.word	0x42020800
 8001a38:	42020000 	.word	0x42020000
 8001a3c:	42020400 	.word	0x42020400
 8001a40:	10110000 	.word	0x10110000
 8001a44:	42021800 	.word	0x42021800

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <Error_Handler+0x8>

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a98 <HAL_HASH_MspInit+0x34>)
 8001a6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a72:	4a09      	ldr	r2, [pc, #36]	@ (8001a98 <HAL_HASH_MspInit+0x34>)
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a78:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_HASH_MspInit+0x34>)
 8001a7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	44020c00 	.word	0x44020c00

08001a9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b0cc      	sub	sp, #304	@ 0x130
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001aa6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001aaa:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001abc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ac0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001aca:	461a      	mov	r2, r3
 8001acc:	2100      	movs	r1, #0
 8001ace:	f00f fc2b 	bl	8011328 <memset>
  if(hi2c->Instance==I2C1)
 8001ad2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ad6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a33      	ldr	r2, [pc, #204]	@ (8001bac <HAL_I2C_MspInit+0x110>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d15e      	bne.n	8001ba2 <HAL_I2C_MspInit+0x106>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ae4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001ae8:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001aec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001af8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001afc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001b00:	2200      	movs	r2, #0
 8001b02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b06:	f107 0310 	add.w	r3, r7, #16
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f004 f9f4 	bl	8005ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_I2C_MspInit+0x7e>
    {
      Error_Handler();
 8001b16:	f7ff ff97 	bl	8001a48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b25      	ldr	r3, [pc, #148]	@ (8001bb0 <HAL_I2C_MspInit+0x114>)
 8001b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b20:	4a23      	ldr	r2, [pc, #140]	@ (8001bb0 <HAL_I2C_MspInit+0x114>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001b2a:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <HAL_I2C_MspInit+0x114>)
 8001b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b30:	f003 0202 	and.w	r2, r3, #2
 8001b34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b38:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b42:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001b46:	681b      	ldr	r3, [r3, #0]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b48:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b4c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b50:	2312      	movs	r3, #18
 8001b52:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b62:	2304      	movs	r3, #4
 8001b64:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b68:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4811      	ldr	r0, [pc, #68]	@ (8001bb4 <HAL_I2C_MspInit+0x118>)
 8001b70:	f001 fa56 	bl	8003020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b74:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <HAL_I2C_MspInit+0x114>)
 8001b76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <HAL_I2C_MspInit+0x114>)
 8001b7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b80:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001b84:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb0 <HAL_I2C_MspInit+0x114>)
 8001b86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b8a:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001b8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b92:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8001b9c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ba0:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ba2:	bf00      	nop
 8001ba4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40005400 	.word	0x40005400
 8001bb0:	44020c00 	.word	0x44020c00
 8001bb4:	42020400 	.word	0x42020400

08001bb8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b0c6      	sub	sp, #280	@ 0x118
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bc2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001bc6:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bc8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	2100      	movs	r1, #0
 8001bda:	f00f fba5 	bl	8011328 <memset>
  if(hrng->Instance==RNG)
 8001bde:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001be2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a1d      	ldr	r2, [pc, #116]	@ (8001c60 <HAL_RNG_MspInit+0xa8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d131      	bne.n	8001c54 <HAL_RNG_MspInit+0x9c>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001bf0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001bf4:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001bf8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001c04:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c12:	f107 0310 	add.w	r3, r7, #16
 8001c16:	4618      	mov	r0, r3
 8001c18:	f004 f96e 	bl	8005ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_RNG_MspInit+0x6e>
    {
      Error_Handler();
 8001c22:	f7ff ff11 	bl	8001a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001c26:	4b0f      	ldr	r3, [pc, #60]	@ (8001c64 <HAL_RNG_MspInit+0xac>)
 8001c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c64 <HAL_RNG_MspInit+0xac>)
 8001c2e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_RNG_MspInit+0xac>)
 8001c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c3c:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8001c40:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c44:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c52:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001c54:	bf00      	nop
 8001c56:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	420c0800 	.word	0x420c0800
 8001c64:	44020c00 	.word	0x44020c00

08001c68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b0c6      	sub	sp, #280	@ 0x118
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c72:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c76:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c78:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001c80:	4618      	mov	r0, r3
 8001c82:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001c86:	461a      	mov	r2, r3
 8001c88:	2100      	movs	r1, #0
 8001c8a:	f00f fb4d 	bl	8011328 <memset>
  if(hrtc->Instance==RTC)
 8001c8e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001c92:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a21      	ldr	r2, [pc, #132]	@ (8001d20 <HAL_RTC_MspInit+0xb8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d13a      	bne.n	8001d16 <HAL_RTC_MspInit+0xae>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ca0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001ca4:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8001ca8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001cb4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001cb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001cbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cc0:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cc4:	f107 0310 	add.w	r3, r7, #16
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f004 f915 	bl	8005ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RTC_MspInit+0x70>
    {
      Error_Handler();
 8001cd4:	f7ff feb8 	bl	8001a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cd8:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <HAL_RTC_MspInit+0xbc>)
 8001cda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001cde:	4a11      	ldr	r2, [pc, #68]	@ (8001d24 <HAL_RTC_MspInit+0xbc>)
 8001ce0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <HAL_RTC_MspInit+0xbc>)
 8001cea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001cee:	4a0d      	ldr	r2, [pc, #52]	@ (8001d24 <HAL_RTC_MspInit+0xbc>)
 8001cf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cf4:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <HAL_RTC_MspInit+0xbc>)
 8001cfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8001cfe:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001d02:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001d10:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001d14:	681b      	ldr	r3, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001d16:	bf00      	nop
 8001d18:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	44007800 	.word	0x44007800
 8001d24:	44020c00 	.word	0x44020c00

08001d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0ce      	sub	sp, #312	@ 0x138
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d32:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001d36:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d48:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d4c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d50:	4618      	mov	r0, r3
 8001d52:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001d56:	461a      	mov	r2, r3
 8001d58:	2100      	movs	r1, #0
 8001d5a:	f00f fae5 	bl	8011328 <memset>
  if(hspi->Instance==SPI1)
 8001d5e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d62:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a49      	ldr	r2, [pc, #292]	@ (8001e90 <HAL_SPI_MspInit+0x168>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	f040 808a 	bne.w	8001e86 <HAL_SPI_MspInit+0x15e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001d72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d76:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001d7a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Spi1ClockSelection = RCC_SPI1CLKSOURCE_PLL1Q;
 8001d86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001d8a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d94:	f107 0318 	add.w	r3, r7, #24
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f004 f8ad 	bl	8005ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <HAL_SPI_MspInit+0x80>
    {
      Error_Handler();
 8001da4:	f7ff fe50 	bl	8001a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001da8:	4b3a      	ldr	r3, [pc, #232]	@ (8001e94 <HAL_SPI_MspInit+0x16c>)
 8001daa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dae:	4a39      	ldr	r2, [pc, #228]	@ (8001e94 <HAL_SPI_MspInit+0x16c>)
 8001db0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001db4:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 8001db8:	4b36      	ldr	r3, [pc, #216]	@ (8001e94 <HAL_SPI_MspInit+0x16c>)
 8001dba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001dbe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001dc2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001dc6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001dd0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001dd4:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8001e94 <HAL_SPI_MspInit+0x16c>)
 8001dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8001e94 <HAL_SPI_MspInit+0x16c>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001de6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e94 <HAL_SPI_MspInit+0x16c>)
 8001de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dec:	f003 0201 	and.w	r2, r3, #1
 8001df0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001df4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001dfe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001e02:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e04:	4b23      	ldr	r3, [pc, #140]	@ (8001e94 <HAL_SPI_MspInit+0x16c>)
 8001e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e0a:	4a22      	ldr	r2, [pc, #136]	@ (8001e94 <HAL_SPI_MspInit+0x16c>)
 8001e0c:	f043 0308 	orr.w	r3, r3, #8
 8001e10:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001e14:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <HAL_SPI_MspInit+0x16c>)
 8001e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001e1a:	f003 0208 	and.w	r2, r3, #8
 8001e1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e22:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001e2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001e30:	681b      	ldr	r3, [r3, #0]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e32:	2360      	movs	r3, #96	@ 0x60
 8001e34:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e4a:	2305      	movs	r3, #5
 8001e4c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001e54:	4619      	mov	r1, r3
 8001e56:	4810      	ldr	r0, [pc, #64]	@ (8001e98 <HAL_SPI_MspInit+0x170>)
 8001e58:	f001 f8e2 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e5c:	2380      	movs	r3, #128	@ 0x80
 8001e5e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e74:	2305      	movs	r3, #5
 8001e76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7a:	f507 7392 	add.w	r3, r7, #292	@ 0x124
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4806      	ldr	r0, [pc, #24]	@ (8001e9c <HAL_SPI_MspInit+0x174>)
 8001e82:	f001 f8cd 	bl	8003020 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001e86:	bf00      	nop
 8001e88:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40013000 	.word	0x40013000
 8001e94:	44020c00 	.word	0x44020c00
 8001e98:	42020000 	.word	0x42020000
 8001e9c:	42020c00 	.word	0x42020c00

08001ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b0d2      	sub	sp, #328	@ 0x148
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001eaa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001eae:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001ec4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8001ece:	461a      	mov	r2, r3
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	f00f fa29 	bl	8011328 <memset>
  if(huart->Instance==USART2)
 8001ed6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001eda:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4ac7      	ldr	r2, [pc, #796]	@ (8002200 <HAL_UART_MspInit+0x360>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	f040 808a 	bne.w	8001ffe <HAL_UART_MspInit+0x15e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001eea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001eee:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8001ef2:	f04f 0202 	mov.w	r2, #2
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001efe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001f02:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f06:	2200      	movs	r2, #0
 8001f08:	661a      	str	r2, [r3, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 fff2 	bl	8005ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <HAL_UART_MspInit+0x7e>
    {
      Error_Handler();
 8001f1a:	f7ff fd95 	bl	8001a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f1e:	4bb9      	ldr	r3, [pc, #740]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8001f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f24:	4ab7      	ldr	r2, [pc, #732]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8001f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f2a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001f2e:	4bb5      	ldr	r3, [pc, #724]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8001f30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001f34:	f403 3200 	and.w	r2, r3, #131072	@ 0x20000
 8001f38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001f3c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001f46:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001f4a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4c:	4bad      	ldr	r3, [pc, #692]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8001f4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f52:	4aac      	ldr	r2, [pc, #688]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f5c:	4ba9      	ldr	r3, [pc, #676]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8001f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f62:	f003 0201 	and.w	r2, r3, #1
 8001f66:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001f6a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001f74:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001f78:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7a:	4ba2      	ldr	r3, [pc, #648]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8001f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f80:	4aa0      	ldr	r2, [pc, #640]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8001f82:	f043 0308 	orr.w	r3, r3, #8
 8001f86:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001f8a:	4b9e      	ldr	r3, [pc, #632]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8001f8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f90:	f003 0208 	and.w	r2, r3, #8
 8001f94:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001f98:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001fa2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001fa6:	681b      	ldr	r3, [r3, #0]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fa8:	2308      	movs	r3, #8
 8001faa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fc0:	2307      	movs	r3, #7
 8001fc2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001fca:	4619      	mov	r1, r3
 8001fcc:	488e      	ldr	r0, [pc, #568]	@ (8002208 <HAL_UART_MspInit+0x368>)
 8001fce:	f001 f827 	bl	8003020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fea:	2307      	movs	r3, #7
 8001fec:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff0:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4885      	ldr	r0, [pc, #532]	@ (800220c <HAL_UART_MspInit+0x36c>)
 8001ff8:	f001 f812 	bl	8003020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ffc:	e0fb      	b.n	80021f6 <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART3)
 8001ffe:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002002:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a81      	ldr	r2, [pc, #516]	@ (8002210 <HAL_UART_MspInit+0x370>)
 800200c:	4293      	cmp	r3, r2
 800200e:	f040 808c 	bne.w	800212a <HAL_UART_MspInit+0x28a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002012:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002016:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 800201a:	f04f 0204 	mov.w	r2, #4
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002026:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800202a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800202e:	2200      	movs	r2, #0
 8002030:	665a      	str	r2, [r3, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002032:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002036:	4618      	mov	r0, r3
 8002038:	f003 ff5e 	bl	8005ef8 <HAL_RCCEx_PeriphCLKConfig>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_UART_MspInit+0x1a6>
      Error_Handler();
 8002042:	f7ff fd01 	bl	8001a48 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002046:	4b6f      	ldr	r3, [pc, #444]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8002048:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800204c:	4a6d      	ldr	r2, [pc, #436]	@ (8002204 <HAL_UART_MspInit+0x364>)
 800204e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002052:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002056:	4b6b      	ldr	r3, [pc, #428]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8002058:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800205c:	f403 2280 	and.w	r2, r3, #262144	@ 0x40000
 8002060:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002064:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800206e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002072:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002074:	4b63      	ldr	r3, [pc, #396]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8002076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800207a:	4a62      	ldr	r2, [pc, #392]	@ (8002204 <HAL_UART_MspInit+0x364>)
 800207c:	f043 0302 	orr.w	r3, r3, #2
 8002080:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002084:	4b5f      	ldr	r3, [pc, #380]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8002086:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800208a:	f003 0202 	and.w	r2, r3, #2
 800208e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002092:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800209c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80020a0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a2:	4b58      	ldr	r3, [pc, #352]	@ (8002204 <HAL_UART_MspInit+0x364>)
 80020a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020a8:	4a56      	ldr	r2, [pc, #344]	@ (8002204 <HAL_UART_MspInit+0x364>)
 80020aa:	f043 0308 	orr.w	r3, r3, #8
 80020ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80020b2:	4b54      	ldr	r3, [pc, #336]	@ (8002204 <HAL_UART_MspInit+0x364>)
 80020b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020b8:	f003 0208 	and.w	r2, r3, #8
 80020bc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020c0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80020ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80020ce:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020d4:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020ea:	2307      	movs	r3, #7
 80020ec:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80020f4:	4619      	mov	r1, r3
 80020f6:	4847      	ldr	r0, [pc, #284]	@ (8002214 <HAL_UART_MspInit+0x374>)
 80020f8:	f000 ff92 	bl	8003020 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002100:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002104:	2302      	movs	r3, #2
 8002106:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	2300      	movs	r3, #0
 8002112:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002116:	2307      	movs	r3, #7
 8002118:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800211c:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8002120:	4619      	mov	r1, r3
 8002122:	483a      	ldr	r0, [pc, #232]	@ (800220c <HAL_UART_MspInit+0x36c>)
 8002124:	f000 ff7c 	bl	8003020 <HAL_GPIO_Init>
}
 8002128:	e065      	b.n	80021f6 <HAL_UART_MspInit+0x356>
  else if(huart->Instance==USART6)
 800212a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800212e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a38      	ldr	r2, [pc, #224]	@ (8002218 <HAL_UART_MspInit+0x378>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d15c      	bne.n	80021f6 <HAL_UART_MspInit+0x356>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800213c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002140:	f5a3 7190 	sub.w	r1, r3, #288	@ 0x120
 8002144:	f04f 0220 	mov.w	r2, #32
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK1;
 8002150:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002154:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002158:	2200      	movs	r2, #0
 800215a:	671a      	str	r2, [r3, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800215c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002160:	4618      	mov	r0, r3
 8002162:	f003 fec9 	bl	8005ef8 <HAL_RCCEx_PeriphCLKConfig>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_UART_MspInit+0x2d0>
      Error_Handler();
 800216c:	f7ff fc6c 	bl	8001a48 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002170:	4b24      	ldr	r3, [pc, #144]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8002172:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002176:	4a23      	ldr	r2, [pc, #140]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8002178:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800217c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002180:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <HAL_UART_MspInit+0x364>)
 8002182:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002186:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 800218a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800218e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002198:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800219c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219e:	4b19      	ldr	r3, [pc, #100]	@ (8002204 <HAL_UART_MspInit+0x364>)
 80021a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a4:	4a17      	ldr	r2, [pc, #92]	@ (8002204 <HAL_UART_MspInit+0x364>)
 80021a6:	f043 0304 	orr.w	r3, r3, #4
 80021aa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80021ae:	4b15      	ldr	r3, [pc, #84]	@ (8002204 <HAL_UART_MspInit+0x364>)
 80021b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021b4:	f003 0204 	and.w	r2, r3, #4
 80021b8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80021bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80021c6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80021ca:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021cc:	23c0      	movs	r3, #192	@ 0xc0
 80021ce:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d8:	2300      	movs	r3, #0
 80021da:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80021e4:	2307      	movs	r3, #7
 80021e6:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ea:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80021ee:	4619      	mov	r1, r3
 80021f0:	480a      	ldr	r0, [pc, #40]	@ (800221c <HAL_UART_MspInit+0x37c>)
 80021f2:	f000 ff15 	bl	8003020 <HAL_GPIO_Init>
}
 80021f6:	bf00      	nop
 80021f8:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40004400 	.word	0x40004400
 8002204:	44020c00 	.word	0x44020c00
 8002208:	42020000 	.word	0x42020000
 800220c:	42020c00 	.word	0x42020c00
 8002210:	40004800 	.word	0x40004800
 8002214:	42020400 	.word	0x42020400
 8002218:	40006400 	.word	0x40006400
 800221c:	42020800 	.word	0x42020800

08002220 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b0c6      	sub	sp, #280	@ 0x118
 8002224:	af00      	add	r7, sp, #0
 8002226:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800222a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800222e:	6018      	str	r0, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002230:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002234:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002238:	4618      	mov	r0, r3
 800223a:	f44f 7384 	mov.w	r3, #264	@ 0x108
 800223e:	461a      	mov	r2, r3
 8002240:	2100      	movs	r1, #0
 8002242:	f00f f871 	bl	8011328 <memset>
  if(hpcd->Instance==USB_DRD_FS)
 8002246:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800224a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a22      	ldr	r2, [pc, #136]	@ (80022dc <HAL_PCD_MspInit+0xbc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d13b      	bne.n	80022d0 <HAL_PCD_MspInit+0xb0>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002258:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800225c:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 8002260:	f04f 0200 	mov.w	r2, #0
 8002264:	f04f 0310 	mov.w	r3, #16
 8002268:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800226c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002274:	2230      	movs	r2, #48	@ 0x30
 8002276:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800227a:	f107 0310 	add.w	r3, r7, #16
 800227e:	4618      	mov	r0, r3
 8002280:	f003 fe3a 	bl	8005ef8 <HAL_RCCEx_PeriphCLKConfig>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_PCD_MspInit+0x6e>
    {
      Error_Handler();
 800228a:	f7ff fbdd 	bl	8001a48 <Error_Handler>
    }

    /* Enable VDDUSB */
    HAL_PWREx_EnableVddUSB();
 800228e:	f002 fea9 	bl	8004fe4 <HAL_PWREx_EnableVddUSB>
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002292:	4b13      	ldr	r3, [pc, #76]	@ (80022e0 <HAL_PCD_MspInit+0xc0>)
 8002294:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002298:	4a11      	ldr	r2, [pc, #68]	@ (80022e0 <HAL_PCD_MspInit+0xc0>)
 800229a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800229e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80022a2:	4b0f      	ldr	r3, [pc, #60]	@ (80022e0 <HAL_PCD_MspInit+0xc0>)
 80022a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80022a8:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 80022ac:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022b0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80022ba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80022be:	681b      	ldr	r3, [r3, #0]
    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 0, 0);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2100      	movs	r1, #0
 80022c4:	204a      	movs	r0, #74	@ 0x4a
 80022c6:	f000 fd4b 	bl	8002d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 80022ca:	204a      	movs	r0, #74	@ 0x4a
 80022cc:	f000 fd62 	bl	8002d94 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USB_DRD_FS_MspInit 1 */

  }

}
 80022d0:	bf00      	nop
 80022d2:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40016000 	.word	0x40016000
 80022e0:	44020c00 	.word	0x44020c00

080022e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <NMI_Handler+0x4>

080022ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <HardFault_Handler+0x4>

080022f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <MemManage_Handler+0x4>

080022fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <BusFault_Handler+0x4>

08002304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002308:	bf00      	nop
 800230a:	e7fd      	b.n	8002308 <UsageFault_Handler+0x4>

0800230c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800233a:	f000 fc15 	bl	8002b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}

08002342 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8002342:	b580      	push	{r7, lr}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8002346:	2000      	movs	r0, #0
 8002348:	f000 fa6e 	bl	8002828 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}

08002350 <USB_DRD_FS_IRQHandler>:

/**
  * @brief This function handles USB FS global interrupt.
  */
void USB_DRD_FS_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <USB_DRD_FS_IRQHandler+0x10>)
 8002356:	f001 fad7 	bl	8003908 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_DRD_FS_IRQn 1 */

  /* USER CODE END USB_DRD_FS_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200004d0 	.word	0x200004d0

08002364 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	e00a      	b.n	800238c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002376:	f3af 8000 	nop.w
 800237a:	4601      	mov	r1, r0
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	1c5a      	adds	r2, r3, #1
 8002380:	60ba      	str	r2, [r7, #8]
 8002382:	b2ca      	uxtb	r2, r1
 8002384:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	429a      	cmp	r2, r3
 8002392:	dbf0      	blt.n	8002376 <_read+0x12>
  }

  return len;
 8002394:	687b      	ldr	r3, [r7, #4]
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b086      	sub	sp, #24
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e009      	b.n	80023c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	1c5a      	adds	r2, r3, #1
 80023b4:	60ba      	str	r2, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f000 fabb 	bl	8002934 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3301      	adds	r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	dbf1      	blt.n	80023b0 <_write+0x12>
  }
  return len;
 80023cc:	687b      	ldr	r3, [r7, #4]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <_close>:

int _close(int file)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_isatty>:

int _isatty(int file)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002416:	2301      	movs	r3, #1
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002448:	4a14      	ldr	r2, [pc, #80]	@ (800249c <_sbrk+0x5c>)
 800244a:	4b15      	ldr	r3, [pc, #84]	@ (80024a0 <_sbrk+0x60>)
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002454:	4b13      	ldr	r3, [pc, #76]	@ (80024a4 <_sbrk+0x64>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800245c:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <_sbrk+0x64>)
 800245e:	4a12      	ldr	r2, [pc, #72]	@ (80024a8 <_sbrk+0x68>)
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002462:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	429a      	cmp	r2, r3
 800246e:	d207      	bcs.n	8002480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002470:	f00e ffa8 	bl	80113c4 <__errno>
 8002474:	4603      	mov	r3, r0
 8002476:	220c      	movs	r2, #12
 8002478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
 800247e:	e009      	b.n	8002494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002480:	4b08      	ldr	r3, [pc, #32]	@ (80024a4 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002486:	4b07      	ldr	r3, [pc, #28]	@ (80024a4 <_sbrk+0x64>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	4a05      	ldr	r2, [pc, #20]	@ (80024a4 <_sbrk+0x64>)
 8002490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002492:	68fb      	ldr	r3, [r7, #12]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	200a0000 	.word	0x200a0000
 80024a0:	00000500 	.word	0x00000500
 80024a4:	20000a90 	.word	0x20000a90
 80024a8:	200113b8 	.word	0x200113b8

080024ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
  uint32_t reg_opsr;

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80024b2:	4b35      	ldr	r3, [pc, #212]	@ (8002588 <SystemInit+0xdc>)
 80024b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b8:	4a33      	ldr	r2, [pc, #204]	@ (8002588 <SystemInit+0xdc>)
 80024ba:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024be:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;
 80024c2:	4b32      	ldr	r3, [pc, #200]	@ (800258c <SystemInit+0xe0>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80024c8:	4b30      	ldr	r3, [pc, #192]	@ (800258c <SystemInit+0xe0>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80024ce:	4b2f      	ldr	r3, [pc, #188]	@ (800258c <SystemInit+0xe0>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	621a      	str	r2, [r3, #32]

  /* Reset HSEON, HSECSSON, HSEBYP, HSEEXT, HSIDIV, HSIKERON, CSION, CSIKERON, HSI48 and PLLxON bits */
#if defined(RCC_CR_PLL3ON)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 80024d4:	4b2d      	ldr	r3, [pc, #180]	@ (800258c <SystemInit+0xe0>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	492c      	ldr	r1, [pc, #176]	@ (800258c <SystemInit+0xe0>)
 80024da:	4b2d      	ldr	r3, [pc, #180]	@ (8002590 <SystemInit+0xe4>)
 80024dc:	4013      	ands	r3, r2
 80024de:	600b      	str	r3, [r1, #0]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
               RCC_CR_CSION | RCC_CR_CSIKERON |RCC_CR_HSI48ON | RCC_CR_PLL1ON | RCC_CR_PLL2ON);
#endif

  /* Reset PLLxCFGR register */
  RCC->PLL1CFGR = 0U;
 80024e0:	4b2a      	ldr	r3, [pc, #168]	@ (800258c <SystemInit+0xe0>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC->PLL2CFGR = 0U;
 80024e6:	4b29      	ldr	r3, [pc, #164]	@ (800258c <SystemInit+0xe0>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(RCC_CR_PLL3ON)
  RCC->PLL3CFGR = 0U;
 80024ec:	4b27      	ldr	r3, [pc, #156]	@ (800258c <SystemInit+0xe0>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* RCC_CR_PLL3ON */

  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280U;
 80024f2:	4b26      	ldr	r3, [pc, #152]	@ (800258c <SystemInit+0xe0>)
 80024f4:	4a27      	ldr	r2, [pc, #156]	@ (8002594 <SystemInit+0xe8>)
 80024f6:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000U;
 80024f8:	4b24      	ldr	r3, [pc, #144]	@ (800258c <SystemInit+0xe0>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280U;
 80024fe:	4b23      	ldr	r3, [pc, #140]	@ (800258c <SystemInit+0xe0>)
 8002500:	4a24      	ldr	r2, [pc, #144]	@ (8002594 <SystemInit+0xe8>)
 8002502:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL2FRACR register */
  RCC->PLL2FRACR = 0x00000000U;
 8002504:	4b21      	ldr	r3, [pc, #132]	@ (800258c <SystemInit+0xe0>)
 8002506:	2200      	movs	r2, #0
 8002508:	641a      	str	r2, [r3, #64]	@ 0x40
#if defined(RCC_CR_PLL3ON)
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280U;
 800250a:	4b20      	ldr	r3, [pc, #128]	@ (800258c <SystemInit+0xe0>)
 800250c:	4a21      	ldr	r2, [pc, #132]	@ (8002594 <SystemInit+0xe8>)
 800250e:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000U;
 8002510:	4b1e      	ldr	r3, [pc, #120]	@ (800258c <SystemInit+0xe0>)
 8002512:	2200      	movs	r2, #0
 8002514:	649a      	str	r2, [r3, #72]	@ 0x48
#endif /* RCC_CR_PLL3ON */

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002516:	4b1d      	ldr	r3, [pc, #116]	@ (800258c <SystemInit+0xe0>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1c      	ldr	r2, [pc, #112]	@ (800258c <SystemInit+0xe0>)
 800251c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002520:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002522:	4b1a      	ldr	r3, [pc, #104]	@ (800258c <SystemInit+0xe0>)
 8002524:	2200      	movs	r2, #0
 8002526:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002528:	4b17      	ldr	r3, [pc, #92]	@ (8002588 <SystemInit+0xdc>)
 800252a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800252e:	609a      	str	r2, [r3, #8]
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8002530:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <SystemInit+0xec>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
 8002538:	607b      	str	r3, [r7, #4]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8002540:	d003      	beq.n	800254a <SystemInit+0x9e>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002548:	d117      	bne.n	800257a <SystemInit+0xce>
  {
    /* Check FLASH Option Control Register access */
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800254a:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <SystemInit+0xec>)
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	2b00      	cmp	r3, #0
 8002554:	d005      	beq.n	8002562 <SystemInit+0xb6>
    {
      /* Authorizes the Option Byte registers programming */
      FLASH->OPTKEYR = 0x08192A3BU;
 8002556:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <SystemInit+0xec>)
 8002558:	4a10      	ldr	r2, [pc, #64]	@ (800259c <SystemInit+0xf0>)
 800255a:	60da      	str	r2, [r3, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800255c:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <SystemInit+0xec>)
 800255e:	4a10      	ldr	r2, [pc, #64]	@ (80025a0 <SystemInit+0xf4>)
 8002560:	60da      	str	r2, [r3, #12]
    }
    /* Launch the option bytes change operation */
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8002562:	4b0d      	ldr	r3, [pc, #52]	@ (8002598 <SystemInit+0xec>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	4a0c      	ldr	r2, [pc, #48]	@ (8002598 <SystemInit+0xec>)
 8002568:	f043 0302 	orr.w	r3, r3, #2
 800256c:	61d3      	str	r3, [r2, #28]

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800256e:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <SystemInit+0xec>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a09      	ldr	r2, [pc, #36]	@ (8002598 <SystemInit+0xec>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	61d3      	str	r3, [r2, #28]
  }
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00
 800258c:	44020c00 	.word	0x44020c00
 8002590:	eae2eae3 	.word	0xeae2eae3
 8002594:	01010280 	.word	0x01010280
 8002598:	40022000 	.word	0x40022000
 800259c:	08192a3b 	.word	0x08192a3b
 80025a0:	4c5d6e7f 	.word	0x4c5d6e7f

080025a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025a4:	480d      	ldr	r0, [pc, #52]	@ (80025dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025a8:	f7ff ff80 	bl	80024ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ac:	480c      	ldr	r0, [pc, #48]	@ (80025e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80025ae:	490d      	ldr	r1, [pc, #52]	@ (80025e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025b0:	4a0d      	ldr	r2, [pc, #52]	@ (80025e8 <LoopForever+0xe>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b4:	e002      	b.n	80025bc <LoopCopyDataInit>

080025b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ba:	3304      	adds	r3, #4

080025bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c0:	d3f9      	bcc.n	80025b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c2:	4a0a      	ldr	r2, [pc, #40]	@ (80025ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80025c4:	4c0a      	ldr	r4, [pc, #40]	@ (80025f0 <LoopForever+0x16>)
  movs r3, #0
 80025c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025c8:	e001      	b.n	80025ce <LoopFillZerobss>

080025ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025cc:	3204      	adds	r2, #4

080025ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d0:	d3fb      	bcc.n	80025ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80025d2:	f00e fefd 	bl	80113d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80025d6:	f7fe fde7 	bl	80011a8 <main>

080025da <LoopForever>:

LoopForever:
    b LoopForever
 80025da:	e7fe      	b.n	80025da <LoopForever>
  ldr   r0, =_estack
 80025dc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80025e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025e4:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 80025e8:	08012b70 	.word	0x08012b70
  ldr r2, =_sbss
 80025ec:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 80025f0:	200113b4 	.word	0x200113b4

080025f4 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025f4:	e7fe      	b.n	80025f4 <ADC1_IRQHandler>
	...

080025f8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	@ 0x30
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002602:	2300      	movs	r3, #0
 8002604:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if ((Led != LED2)
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d009      	beq.n	8002620 <BSP_LED_Init+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <BSP_LED_Init+0x28>
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d003      	beq.n	8002620 <BSP_LED_Init+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002618:	f06f 0301 	mvn.w	r3, #1
 800261c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800261e:	e055      	b.n	80026cc <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if (Led == LED2)
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d10f      	bne.n	8002646 <BSP_LED_Init+0x4e>
    {
      LED2_GPIO_CLK_ENABLE();
 8002626:	4b2c      	ldr	r3, [pc, #176]	@ (80026d8 <BSP_LED_Init+0xe0>)
 8002628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800262c:	4a2a      	ldr	r2, [pc, #168]	@ (80026d8 <BSP_LED_Init+0xe0>)
 800262e:	f043 0320 	orr.w	r3, r3, #32
 8002632:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002636:	4b28      	ldr	r3, [pc, #160]	@ (80026d8 <BSP_LED_Init+0xe0>)
 8002638:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800263c:	f003 0320 	and.w	r3, r3, #32
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	e021      	b.n	800268a <BSP_LED_Init+0x92>
    }
#if defined (USE_NUCLEO_144)
    else if (Led == LED1)
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10f      	bne.n	800266c <BSP_LED_Init+0x74>
    {
      LED1_GPIO_CLK_ENABLE();
 800264c:	4b22      	ldr	r3, [pc, #136]	@ (80026d8 <BSP_LED_Init+0xe0>)
 800264e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002652:	4a21      	ldr	r2, [pc, #132]	@ (80026d8 <BSP_LED_Init+0xe0>)
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800265c:	4b1e      	ldr	r3, [pc, #120]	@ (80026d8 <BSP_LED_Init+0xe0>)
 800265e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	e00e      	b.n	800268a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800266c:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <BSP_LED_Init+0xe0>)
 800266e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002672:	4a19      	ldr	r2, [pc, #100]	@ (80026d8 <BSP_LED_Init+0xe0>)
 8002674:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002678:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800267c:	4b16      	ldr	r3, [pc, #88]	@ (80026d8 <BSP_LED_Init+0xe0>)
 800267e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	68fb      	ldr	r3, [r7, #12]
    }
#endif /* defined (USE_NUCLEO_144) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <BSP_LED_Init+0xe4>)
 800268e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002692:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002694:	2301      	movs	r3, #1
 8002696:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269c:	2303      	movs	r3, #3
 800269e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	4a0f      	ldr	r2, [pc, #60]	@ (80026e0 <BSP_LED_Init+0xe8>)
 80026a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a8:	f107 0218 	add.w	r2, r7, #24
 80026ac:	4611      	mov	r1, r2
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fcb6 	bl	8003020 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80026b4:	79fb      	ldrb	r3, [r7, #7]
 80026b6:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <BSP_LED_Init+0xe8>)
 80026b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	4a07      	ldr	r2, [pc, #28]	@ (80026dc <BSP_LED_Init+0xe4>)
 80026c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026c4:	2200      	movs	r2, #0
 80026c6:	4619      	mov	r1, r3
 80026c8:	f000 fdfc 	bl	80032c4 <HAL_GPIO_WritePin>
  }

  return ret;
 80026cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3730      	adds	r7, #48	@ 0x30
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	44020c00 	.word	0x44020c00
 80026dc:	08012af8 	.word	0x08012af8
 80026e0:	2000000c 	.word	0x2000000c

080026e4 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80026ee:	2300      	movs	r3, #0
 80026f0:	60fb      	str	r3, [r7, #12]

  if ((Led != LED2)
 80026f2:	79fb      	ldrb	r3, [r7, #7]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d009      	beq.n	800270c <BSP_LED_Toggle+0x28>
#if defined (USE_NUCLEO_144)
      && (Led != LED1) && (Led != LED3)
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <BSP_LED_Toggle+0x28>
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d003      	beq.n	800270c <BSP_LED_Toggle+0x28>
#endif /* defined (USE_NUCLEO_144) */
     )
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002704:	f06f 0301 	mvn.w	r3, #1
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	e00b      	b.n	8002724 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	4a08      	ldr	r2, [pc, #32]	@ (8002730 <BSP_LED_Toggle+0x4c>)
 8002710:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	4907      	ldr	r1, [pc, #28]	@ (8002734 <BSP_LED_Toggle+0x50>)
 8002718:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800271c:	4619      	mov	r1, r3
 800271e:	4610      	mov	r0, r2
 8002720:	f000 fde8 	bl	80032f4 <HAL_GPIO_TogglePin>
  }

  return ret;
 8002724:	68fb      	ldr	r3, [r7, #12]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	2000000c 	.word	0x2000000c
 8002734:	08012af8 	.word	0x08012af8

08002738 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	460a      	mov	r2, r1
 8002742:	71fb      	strb	r3, [r7, #7]
 8002744:	4613      	mov	r3, r2
 8002746:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTON_NBR] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTON_NBR] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTON_NBR] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002748:	4b30      	ldr	r3, [pc, #192]	@ (800280c <BSP_PB_Init+0xd4>)
 800274a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800274e:	4a2f      	ldr	r2, [pc, #188]	@ (800280c <BSP_PB_Init+0xd4>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002758:	4b2c      	ldr	r3, [pc, #176]	@ (800280c <BSP_PB_Init+0xd4>)
 800275a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	60bb      	str	r3, [r7, #8]
 8002764:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002766:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800276a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800276c:	2302      	movs	r3, #2
 800276e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002770:	2302      	movs	r3, #2
 8002772:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8002774:	79bb      	ldrb	r3, [r7, #6]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10c      	bne.n	8002794 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800277e:	79fb      	ldrb	r3, [r7, #7]
 8002780:	4a23      	ldr	r2, [pc, #140]	@ (8002810 <BSP_PB_Init+0xd8>)
 8002782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002786:	f107 020c 	add.w	r2, r7, #12
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f000 fc47 	bl	8003020 <HAL_GPIO_Init>
 8002792:	e036      	b.n	8002802 <BSP_PB_Init+0xca>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002794:	4b1f      	ldr	r3, [pc, #124]	@ (8002814 <BSP_PB_Init+0xdc>)
 8002796:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	4a1d      	ldr	r2, [pc, #116]	@ (8002810 <BSP_PB_Init+0xd8>)
 800279c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a0:	f107 020c 	add.w	r2, r7, #12
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fc3a 	bl	8003020 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80027ac:	79fa      	ldrb	r2, [r7, #7]
 80027ae:	4613      	mov	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	4413      	add	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4a18      	ldr	r2, [pc, #96]	@ (8002818 <BSP_PB_Init+0xe0>)
 80027b8:	441a      	add	r2, r3
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	4917      	ldr	r1, [pc, #92]	@ (800281c <BSP_PB_Init+0xe4>)
 80027be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80027c2:	4619      	mov	r1, r3
 80027c4:	4610      	mov	r0, r2
 80027c6:	f000 fbcf 	bl	8002f68 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80027ca:	79fa      	ldrb	r2, [r7, #7]
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4a10      	ldr	r2, [pc, #64]	@ (8002818 <BSP_PB_Init+0xe0>)
 80027d6:	1898      	adds	r0, r3, r2
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	4a11      	ldr	r2, [pc, #68]	@ (8002820 <BSP_PB_Init+0xe8>)
 80027dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e0:	461a      	mov	r2, r3
 80027e2:	2100      	movs	r1, #0
 80027e4:	f000 fb94 	bl	8002f10 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80027e8:	2018      	movs	r0, #24
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002824 <BSP_PB_Init+0xec>)
 80027ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f2:	2200      	movs	r2, #0
 80027f4:	4619      	mov	r1, r3
 80027f6:	f000 fab3 	bl	8002d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80027fa:	2318      	movs	r3, #24
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fac9 	bl	8002d94 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3720      	adds	r7, #32
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	44020c00 	.word	0x44020c00
 8002810:	20000018 	.word	0x20000018
 8002814:	10110000 	.word	0x10110000
 8002818:	20000a94 	.word	0x20000a94
 800281c:	08012b00 	.word	0x08012b00
 8002820:	2000001c 	.word	0x2000001c
 8002824:	20000020 	.word	0x20000020

08002828 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002832:	79fa      	ldrb	r2, [r7, #7]
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4a04      	ldr	r2, [pc, #16]	@ (8002850 <BSP_PB_IRQHandler+0x28>)
 800283e:	4413      	add	r3, r2
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fba5 	bl	8002f90 <HAL_EXTI_IRQHandler>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000a94 	.word	0x20000a94

08002854 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]

  if (COM >= COM_NBR)
 800287c:	79fb      	ldrb	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002882:	f06f 0301 	mvn.w	r3, #1
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	e018      	b.n	80028bc <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800288a:	79fb      	ldrb	r3, [r7, #7]
 800288c:	2294      	movs	r2, #148	@ 0x94
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	4a0d      	ldr	r2, [pc, #52]	@ (80028c8 <BSP_COM_Init+0x5c>)
 8002894:	4413      	add	r3, r2
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f870 	bl	800297c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	2294      	movs	r2, #148	@ 0x94
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	4a08      	ldr	r2, [pc, #32]	@ (80028c8 <BSP_COM_Init+0x5c>)
 80028a6:	4413      	add	r3, r2
 80028a8:	6839      	ldr	r1, [r7, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f80e 	bl	80028cc <MX_USART_Init>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80028b6:	f06f 0303 	mvn.w	r3, #3
 80028ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80028bc:	68fb      	ldr	r3, [r7, #12]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20000aa0 	.word	0x20000aa0

080028cc <MX_USART_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 80028d6:	4b16      	ldr	r3, [pc, #88]	@ (8002930 <MX_USART_Init+0x64>)
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	220c      	movs	r2, #12
 80028ea:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	895b      	ldrh	r3, [r3, #10]
 80028f0:	461a      	mov	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685a      	ldr	r2, [r3, #4]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	891b      	ldrh	r3, [r3, #8]
 8002902:	461a      	mov	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	899b      	ldrh	r3, [r3, #12]
 800290c:	461a      	mov	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002918:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f009 f904 	bl	800bb2e <HAL_UART_Init>
 8002926:	4603      	mov	r3, r0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000008 	.word	0x20000008

08002934 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800293c:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <__io_putchar+0x30>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	461a      	mov	r2, r3
 8002942:	2394      	movs	r3, #148	@ 0x94
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	4a07      	ldr	r2, [pc, #28]	@ (8002968 <__io_putchar+0x34>)
 800294a:	1898      	adds	r0, r3, r2
 800294c:	1d39      	adds	r1, r7, #4
 800294e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002952:	2201      	movs	r2, #1
 8002954:	f009 f93b 	bl	800bbce <HAL_UART_Transmit>
  return ch;
 8002958:	687b      	ldr	r3, [r7, #4]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000b34 	.word	0x20000b34
 8002968:	20000aa0 	.word	0x20000aa0

0800296c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002970:	2000      	movs	r0, #0
 8002972:	f7ff ff6f 	bl	8002854 <BSP_PB_Callback>
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	@ 0x28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002984:	4b27      	ldr	r3, [pc, #156]	@ (8002a24 <COM1_MspInit+0xa8>)
 8002986:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800298a:	4a26      	ldr	r2, [pc, #152]	@ (8002a24 <COM1_MspInit+0xa8>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002994:	4b23      	ldr	r3, [pc, #140]	@ (8002a24 <COM1_MspInit+0xa8>)
 8002996:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80029a2:	4b20      	ldr	r3, [pc, #128]	@ (8002a24 <COM1_MspInit+0xa8>)
 80029a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002a24 <COM1_MspInit+0xa8>)
 80029aa:	f043 0308 	orr.w	r3, r3, #8
 80029ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80029b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a24 <COM1_MspInit+0xa8>)
 80029b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80029c0:	4b18      	ldr	r3, [pc, #96]	@ (8002a24 <COM1_MspInit+0xa8>)
 80029c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029c6:	4a17      	ldr	r2, [pc, #92]	@ (8002a24 <COM1_MspInit+0xa8>)
 80029c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029cc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80029d0:	4b14      	ldr	r3, [pc, #80]	@ (8002a24 <COM1_MspInit+0xa8>)
 80029d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 80029de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029e2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80029e8:	2302      	movs	r3, #2
 80029ea:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80029ec:	2301      	movs	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80029f0:	2307      	movs	r3, #7
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80029f4:	f107 0314 	add.w	r3, r7, #20
 80029f8:	4619      	mov	r1, r3
 80029fa:	480b      	ldr	r0, [pc, #44]	@ (8002a28 <COM1_MspInit+0xac>)
 80029fc:	f000 fb10 	bl	8003020 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8002a00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a04:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002a06:	2302      	movs	r3, #2
 8002a08:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8002a0a:	2307      	movs	r3, #7
 8002a0c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002a0e:	f107 0314 	add.w	r3, r7, #20
 8002a12:	4619      	mov	r1, r3
 8002a14:	4804      	ldr	r0, [pc, #16]	@ (8002a28 <COM1_MspInit+0xac>)
 8002a16:	f000 fb03 	bl	8003020 <HAL_GPIO_Init>
}
 8002a1a:	bf00      	nop
 8002a1c:	3728      	adds	r7, #40	@ 0x28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	44020c00 	.word	0x44020c00
 8002a28:	42020c00 	.word	0x42020c00

08002a2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a30:	2003      	movs	r0, #3
 8002a32:	f000 f98a 	bl	8002d4a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002a36:	f003 f8d5 	bl	8005be4 <HAL_RCC_GetSysClockFreq>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <HAL_Init+0x44>)
 8002a3e:	6a1b      	ldr	r3, [r3, #32]
 8002a40:	f003 030f 	and.w	r3, r3, #15
 8002a44:	490b      	ldr	r1, [pc, #44]	@ (8002a74 <HAL_Init+0x48>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8002a78 <HAL_Init+0x4c>)
 8002a4e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002a50:	2004      	movs	r0, #4
 8002a52:	f000 f9cf 	bl	8002df4 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a56:	200f      	movs	r0, #15
 8002a58:	f000 f810 	bl	8002a7c <HAL_InitTick>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_Init+0x3a>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e002      	b.n	8002a6c <HAL_Init+0x40>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a66:	f7fe fff5 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	44020c00 	.word	0x44020c00
 8002a74:	08012ae0 	.word	0x08012ae0
 8002a78:	20000004 	.word	0x20000004

08002a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002a88:	4b33      	ldr	r3, [pc, #204]	@ (8002b58 <HAL_InitTick+0xdc>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e05c      	b.n	8002b4e <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002a94:	4b31      	ldr	r3, [pc, #196]	@ (8002b5c <HAL_InitTick+0xe0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b04      	cmp	r3, #4
 8002a9e:	d10c      	bne.n	8002aba <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002aa0:	4b2f      	ldr	r3, [pc, #188]	@ (8002b60 <HAL_InitTick+0xe4>)
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8002b58 <HAL_InitTick+0xdc>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e037      	b.n	8002b2a <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8002aba:	f000 f9f3 	bl	8002ea4 <HAL_SYSTICK_GetCLKSourceConfig>
 8002abe:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d023      	beq.n	8002b0e <HAL_InitTick+0x92>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d82d      	bhi.n	8002b28 <HAL_InitTick+0xac>
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <HAL_InitTick+0x5e>
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d00d      	beq.n	8002af4 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 8002ad8:	e026      	b.n	8002b28 <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8002ada:	4b21      	ldr	r3, [pc, #132]	@ (8002b60 <HAL_InitTick+0xe4>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <HAL_InitTick+0xdc>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8002ae8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af0:	60fb      	str	r3, [r7, #12]
        break;
 8002af2:	e01a      	b.n	8002b2a <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002af4:	4b18      	ldr	r3, [pc, #96]	@ (8002b58 <HAL_InitTick+0xdc>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	461a      	mov	r2, r3
 8002afa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002afe:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b02:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8002b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0a:	60fb      	str	r3, [r7, #12]
        break;
 8002b0c:	e00d      	b.n	8002b2a <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8002b0e:	4b12      	ldr	r3, [pc, #72]	@ (8002b58 <HAL_InitTick+0xdc>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b1c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	60fb      	str	r3, [r7, #12]
        break;
 8002b26:	e000      	b.n	8002b2a <HAL_InitTick+0xae>
        break;
 8002b28:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f940 	bl	8002db0 <HAL_SYSTICK_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e009      	b.n	8002b4e <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b42:	f000 f90d 	bl	8002d60 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8002b46:	4a07      	ldr	r2, [pc, #28]	@ (8002b64 <HAL_InitTick+0xe8>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000028 	.word	0x20000028
 8002b5c:	e000e010 	.word	0xe000e010
 8002b60:	20000004 	.word	0x20000004
 8002b64:	20000024 	.word	0x20000024

08002b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	@ (8002b88 <HAL_IncTick+0x20>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	461a      	mov	r2, r3
 8002b72:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_IncTick+0x24>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4413      	add	r3, r2
 8002b78:	4a04      	ldr	r2, [pc, #16]	@ (8002b8c <HAL_IncTick+0x24>)
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	20000028 	.word	0x20000028
 8002b8c:	20000b38 	.word	0x20000b38

08002b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  return uwTick;
 8002b94:	4b03      	ldr	r3, [pc, #12]	@ (8002ba4 <HAL_GetTick+0x14>)
 8002b96:	681b      	ldr	r3, [r3, #0]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000b38 	.word	0x20000b38

08002ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb0:	f7ff ffee 	bl	8002b90 <HAL_GetTick>
 8002bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d005      	beq.n	8002bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bec <HAL_Delay+0x44>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bce:	bf00      	nop
 8002bd0:	f7ff ffde 	bl	8002b90 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d8f7      	bhi.n	8002bd0 <HAL_Delay+0x28>
  {
  }
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	20000028 	.word	0x20000028

08002bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c00:	4b0c      	ldr	r3, [pc, #48]	@ (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c22:	4a04      	ldr	r2, [pc, #16]	@ (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	60d3      	str	r3, [r2, #12]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c3c:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <__NVIC_GetPriorityGrouping+0x18>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	f003 0307 	and.w	r3, r3, #7
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	db0b      	blt.n	8002c7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c66:	88fb      	ldrh	r3, [r7, #6]
 8002c68:	f003 021f 	and.w	r2, r3, #31
 8002c6c:	4907      	ldr	r1, [pc, #28]	@ (8002c8c <__NVIC_EnableIRQ+0x38>)
 8002c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2001      	movs	r0, #1
 8002c76:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e000e100 	.word	0xe000e100

08002c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002c9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db0a      	blt.n	8002cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	490c      	ldr	r1, [pc, #48]	@ (8002cdc <__NVIC_SetPriority+0x4c>)
 8002caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb8:	e00a      	b.n	8002cd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4908      	ldr	r1, [pc, #32]	@ (8002ce0 <__NVIC_SetPriority+0x50>)
 8002cc0:	88fb      	ldrh	r3, [r7, #6]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3b04      	subs	r3, #4
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	440b      	add	r3, r1
 8002cce:	761a      	strb	r2, [r3, #24]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000e100 	.word	0xe000e100
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	@ 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f1c3 0307 	rsb	r3, r3, #7
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	bf28      	it	cs
 8002d02:	2304      	movcs	r3, #4
 8002d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d902      	bls.n	8002d14 <NVIC_EncodePriority+0x30>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3b03      	subs	r3, #3
 8002d12:	e000      	b.n	8002d16 <NVIC_EncodePriority+0x32>
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	401a      	ands	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	4313      	orrs	r3, r2
         );
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	@ 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PRIORITYGROUP_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b082      	sub	sp, #8
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff ff4c 	bl	8002bf0 <__NVIC_SetPriorityGrouping>
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d6e:	f7ff ff63 	bl	8002c38 <__NVIC_GetPriorityGrouping>
 8002d72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	6978      	ldr	r0, [r7, #20]
 8002d7a:	f7ff ffb3 	bl	8002ce4 <NVIC_EncodePriority>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d84:	4611      	mov	r1, r2
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ff82 	bl	8002c90 <__NVIC_SetPriority>
}
 8002d8c:	bf00      	nop
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32h5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ff56 	bl	8002c54 <__NVIC_EnableIRQ>
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dc0:	d301      	bcc.n	8002dc6 <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00d      	b.n	8002de2 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8002df0 <HAL_SYSTICK_Config+0x40>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002dce:	4b08      	ldr	r3, [pc, #32]	@ (8002df0 <HAL_SYSTICK_Config+0x40>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002dd4:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_SYSTICK_Config+0x40>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a05      	ldr	r2, [pc, #20]	@ (8002df0 <HAL_SYSTICK_Config+0x40>)
 8002dda:	f043 0303 	orr.w	r3, r3, #3
 8002dde:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	e000e010 	.word	0xe000e010

08002df4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b04      	cmp	r3, #4
 8002e00:	d844      	bhi.n	8002e8c <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002e02:	a201      	add	r2, pc, #4	@ (adr r2, 8002e08 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e2b 	.word	0x08002e2b
 8002e0c:	08002e49 	.word	0x08002e49
 8002e10:	08002e6b 	.word	0x08002e6b
 8002e14:	08002e8d 	.word	0x08002e8d
 8002e18:	08002e1d 	.word	0x08002e1d
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1e      	ldr	r2, [pc, #120]	@ (8002e9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	6013      	str	r3, [r2, #0]
      break;
 8002e28:	e031      	b.n	8002e8e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002e9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002e9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e30:	f023 0304 	bic.w	r3, r3, #4
 8002e34:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8002e36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e38:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e3c:	4a18      	ldr	r2, [pc, #96]	@ (8002ea0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e3e:	f023 030c 	bic.w	r3, r3, #12
 8002e42:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002e46:	e022      	b.n	8002e8e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002e48:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a13      	ldr	r2, [pc, #76]	@ (8002e9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e4e:	f023 0304 	bic.w	r3, r3, #4
 8002e52:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8002e54:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e56:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e5a:	f023 030c 	bic.w	r3, r3, #12
 8002e5e:	4a10      	ldr	r2, [pc, #64]	@ (8002ea0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e60:	f043 0304 	orr.w	r3, r3, #4
 8002e64:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002e68:	e011      	b.n	8002e8e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8002e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a0b      	ldr	r2, [pc, #44]	@ (8002e9c <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e70:	f023 0304 	bic.w	r3, r3, #4
 8002e74:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8002e76:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e7c:	f023 030c 	bic.w	r3, r3, #12
 8002e80:	4a07      	ldr	r2, [pc, #28]	@ (8002ea0 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e82:	f043 0308 	orr.w	r3, r3, #8
 8002e86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
      break;
 8002e8a:	e000      	b.n	8002e8e <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002e8c:	bf00      	nop
  }
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	e000e010 	.word	0xe000e010
 8002ea0:	44020c00 	.word	0x44020c00

08002ea4 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b083      	sub	sp, #12
 8002ea8:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002eaa:	4b17      	ldr	r3, [pc, #92]	@ (8002f08 <HAL_SYSTICK_GetCLKSourceConfig+0x64>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	607b      	str	r3, [r7, #4]
 8002eba:	e01e      	b.n	8002efa <HAL_SYSTICK_GetCLKSourceConfig+0x56>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8002ebc:	4b13      	ldr	r3, [pc, #76]	@ (8002f0c <HAL_SYSTICK_GetCLKSourceConfig+0x68>)
 8002ebe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002ec2:	f003 030c 	and.w	r3, r3, #12
 8002ec6:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d00f      	beq.n	8002eee <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d80f      	bhi.n	8002ef4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_SYSTICK_GetCLKSourceConfig+0x3e>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d003      	beq.n	8002ee8 <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002ee0:	e008      	b.n	8002ef4 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
        break;
 8002ee6:	e008      	b.n	8002efa <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	607b      	str	r3, [r7, #4]
        break;
 8002eec:	e005      	b.n	8002efa <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	607b      	str	r3, [r7, #4]
        break;
 8002ef2:	e002      	b.n	8002efa <HAL_SYSTICK_GetCLKSourceConfig+0x56>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	607b      	str	r3, [r7, #4]
        break;
 8002ef8:	bf00      	nop
    }
  }
  return systick_source;
 8002efa:	687b      	ldr	r3, [r7, #4]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000e010 	.word	0xe000e010
 8002f0c:	44020c00 	.word	0x44020c00

08002f10 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002f22:	7afb      	ldrb	r3, [r7, #11]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d011      	beq.n	8002f4c <HAL_EXTI_RegisterCallback+0x3c>
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	dc13      	bgt.n	8002f54 <HAL_EXTI_RegisterCallback+0x44>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_EXTI_RegisterCallback+0x26>
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d007      	beq.n	8002f44 <HAL_EXTI_RegisterCallback+0x34>
 8002f34:	e00e      	b.n	8002f54 <HAL_EXTI_RegisterCallback+0x44>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	609a      	str	r2, [r3, #8]
      break;
 8002f42:	e00a      	b.n	8002f5a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	605a      	str	r2, [r3, #4]
      break;
 8002f4a:	e006      	b.n	8002f5a <HAL_EXTI_RegisterCallback+0x4a>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	609a      	str	r2, [r3, #8]
      break;
 8002f52:	e002      	b.n	8002f5a <HAL_EXTI_RegisterCallback+0x4a>

    default:
      status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	75fb      	strb	r3, [r7, #23]
      break;
 8002f58:	bf00      	nop
  }

  return status;
 8002f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	371c      	adds	r7, #28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e003      	b.n	8002f84 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002f82:	2300      	movs	r3, #0
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	0c1b      	lsrs	r3, r3, #16
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 031f 	and.w	r3, r3, #31
 8002fac:	2201      	movs	r2, #1
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	4b17      	ldr	r3, [pc, #92]	@ (8003018 <HAL_EXTI_IRQHandler+0x88>)
 8002fba:	4413      	add	r3, r2
 8002fbc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->RisingCallback();
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800301c <HAL_EXTI_IRQHandler+0x8c>)
 8002fe8:	4413      	add	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	693a      	ldr	r2, [r7, #16]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d009      	beq.n	8003010 <HAL_EXTI_IRQHandler+0x80>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d002      	beq.n	8003010 <HAL_EXTI_IRQHandler+0x80>
    {
      hexti->FallingCallback();
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	4798      	blx	r3
    }
  }
}
 8003010:	bf00      	nop
 8003012:	3718      	adds	r7, #24
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	4402200c 	.word	0x4402200c
 800301c:	44022010 	.word	0x44022010

08003020 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003020:	b480      	push	{r7}
 8003022:	b087      	sub	sp, #28
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800302e:	e136      	b.n	800329e <HAL_GPIO_Init+0x27e>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2101      	movs	r1, #1
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8128 	beq.w	8003298 <HAL_GPIO_Init+0x278>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	2b02      	cmp	r3, #2
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x38>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b12      	cmp	r3, #18
 8003056:	d125      	bne.n	80030a4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	08da      	lsrs	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3208      	adds	r2, #8
 8003060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003064:	617b      	str	r3, [r7, #20]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	220f      	movs	r2, #15
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4013      	ands	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f003 020f 	and.w	r2, r3, #15
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	4313      	orrs	r3, r2
 8003094:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	08da      	lsrs	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3208      	adds	r2, #8
 800309e:	6979      	ldr	r1, [r7, #20]
 80030a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4013      	ands	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0203 	and.w	r2, r3, #3
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	697a      	ldr	r2, [r7, #20]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d00b      	beq.n	80030f8 <HAL_GPIO_Init+0xd8>
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d007      	beq.n	80030f8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030ec:	2b11      	cmp	r3, #17
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b12      	cmp	r3, #18
 80030f6:	d130      	bne.n	800315a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	2203      	movs	r2, #3
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	43db      	mvns	r3, r3
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4013      	ands	r3, r2
 800310e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800312e:	2201      	movs	r2, #1
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	fa02 f303 	lsl.w	r3, r2, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4013      	ands	r3, r2
 800313c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	091b      	lsrs	r3, r3, #4
 8003144:	f003 0201 	and.w	r2, r3, #1
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	fa02 f303 	lsl.w	r3, r2, r3
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4313      	orrs	r3, r2
 8003152:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b03      	cmp	r3, #3
 8003160:	d017      	beq.n	8003192 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	2203      	movs	r2, #3
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4013      	ands	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d07c      	beq.n	8003298 <HAL_GPIO_Init+0x278>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800319e:	4a47      	ldr	r2, [pc, #284]	@ (80032bc <HAL_GPIO_Init+0x29c>)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3318      	adds	r3, #24
 80031a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031aa:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	220f      	movs	r2, #15
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	4013      	ands	r3, r2
 80031c0:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	0a9a      	lsrs	r2, r3, #10
 80031c6:	4b3e      	ldr	r3, [pc, #248]	@ (80032c0 <HAL_GPIO_Init+0x2a0>)
 80031c8:	4013      	ands	r3, r2
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	f002 0203 	and.w	r2, r2, #3
 80031d0:	00d2      	lsls	r2, r2, #3
 80031d2:	4093      	lsls	r3, r2
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80031da:	4938      	ldr	r1, [pc, #224]	@ (80032bc <HAL_GPIO_Init+0x29c>)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	089b      	lsrs	r3, r3, #2
 80031e0:	3318      	adds	r3, #24
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80031e8:	4b34      	ldr	r3, [pc, #208]	@ (80032bc <HAL_GPIO_Init+0x29c>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	43db      	mvns	r3, r3
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4013      	ands	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d003      	beq.n	800320c <HAL_GPIO_Init+0x1ec>
        {
          tmp |= iocurrent;
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800320c:	4a2b      	ldr	r2, [pc, #172]	@ (80032bc <HAL_GPIO_Init+0x29c>)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003212:	4b2a      	ldr	r3, [pc, #168]	@ (80032bc <HAL_GPIO_Init+0x29c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	43db      	mvns	r3, r3
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4013      	ands	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_GPIO_Init+0x216>
        {
          tmp |= iocurrent;
 800322e:	697a      	ldr	r2, [r7, #20]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003236:	4a21      	ldr	r2, [pc, #132]	@ (80032bc <HAL_GPIO_Init+0x29c>)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800323c:	4b1f      	ldr	r3, [pc, #124]	@ (80032bc <HAL_GPIO_Init+0x29c>)
 800323e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003242:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	43db      	mvns	r3, r3
 8003248:	697a      	ldr	r2, [r7, #20]
 800324a:	4013      	ands	r3, r2
 800324c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x242>
        {
          tmp |= iocurrent;
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003262:	4a16      	ldr	r2, [pc, #88]	@ (80032bc <HAL_GPIO_Init+0x29c>)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 800326a:	4b14      	ldr	r3, [pc, #80]	@ (80032bc <HAL_GPIO_Init+0x29c>)
 800326c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003270:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	43db      	mvns	r3, r3
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	4013      	ands	r3, r2
 800327a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x270>
        {
          tmp |= iocurrent;
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003290:	4a0a      	ldr	r2, [pc, #40]	@ (80032bc <HAL_GPIO_Init+0x29c>)
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	3301      	adds	r3, #1
 800329c:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f47f aec1 	bne.w	8003030 <HAL_GPIO_Init+0x10>
  }
}
 80032ae:	bf00      	nop
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	44022000 	.word	0x44022000
 80032c0:	002f7f7f 	.word	0x002f7f7f

080032c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	807b      	strh	r3, [r7, #2]
 80032d0:	4613      	mov	r3, r2
 80032d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032d4:	787b      	ldrb	r3, [r7, #1]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032da:	887a      	ldrh	r2, [r7, #2]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032e0:	e002      	b.n	80032e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032e2:	887a      	ldrh	r2, [r7, #2]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32H5 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	695b      	ldr	r3, [r3, #20]
 8003304:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4013      	ands	r3, r2
 800330c:	041a      	lsls	r2, r3, #16
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	43d9      	mvns	r1, r3
 8003312:	887b      	ldrh	r3, [r7, #2]
 8003314:	400b      	ands	r3, r1
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	619a      	str	r2, [r3, #24]
}
 800331c:	bf00      	nop
 800331e:	3714      	adds	r7, #20
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_HASH_Init>:
  * @param  hhash pointer to a HASH_HandleTypeDef structure that contains
  *         the configuration information for HASH module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t cr_value;

  /* Check the hash handle allocation */
  if (hhash == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e02a      	b.n	8003390 <HAL_HASH_Init+0x68>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d106      	bne.n	8003354 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fe fb88 	bl	8001a64 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Set the key size, data type and Algorithm */
  cr_value = (uint32_t)(hhash->Init.DataType | hhash->Init.Algorithm);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
  /* Set the key size, data type, algorithm and mode */
  MODIFY_REG(hhash->Instance->CR, HASH_CR_DATATYPE | HASH_CR_ALGO | HASH_CR_INIT, cr_value);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f423 13f0 	bic.w	r3, r3, #1966080	@ 0x1e0000
 800336a:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6812      	ldr	r2, [r2, #0]
 8003372:	68f9      	ldr	r1, [r7, #12]
 8003374:	430b      	orrs	r3, r1
 8003376:	6013      	str	r3, [r2, #0]

  /* Change HASH phase to Ready */
  hhash->Phase = HAL_HASH_PHASE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* Change HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Reset error code field */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_HASH_SUSPEND_RESUME == 1U)
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
#endif /* (USE_HAL_HASH_SUSPEND_RESUME) */
  /* Return function status */
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e08d      	b.n	80034c6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fe fb6c 	bl	8001a9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	@ 0x24
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d107      	bne.n	8003412 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689a      	ldr	r2, [r3, #8]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800340e:	609a      	str	r2, [r3, #8]
 8003410:	e006      	b.n	8003420 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800341e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	2b02      	cmp	r3, #2
 8003426:	d108      	bne.n	800343a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003436:	605a      	str	r2, [r3, #4]
 8003438:	e007      	b.n	800344a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003448:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800345c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800346c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69d9      	ldr	r1, [r3, #28]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1a      	ldr	r2, [r3, #32]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
 80034d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b20      	cmp	r3, #32
 80034e2:	d138      	bne.n	8003556 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e032      	b.n	8003558 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2224      	movs	r2, #36	@ 0x24
 80034fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0201 	bic.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003520:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6819      	ldr	r1, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f042 0201 	orr.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2220      	movs	r2, #32
 8003546:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003552:	2300      	movs	r3, #0
 8003554:	e000      	b.n	8003558 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003556:	2302      	movs	r3, #2
  }
}
 8003558:	4618      	mov	r0, r3
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b20      	cmp	r3, #32
 8003578:	d139      	bne.n	80035ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003584:	2302      	movs	r3, #2
 8003586:	e033      	b.n	80035f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2224      	movs	r2, #36	@ 0x24
 8003594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80035b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f042 0201 	orr.w	r2, r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e000      	b.n	80035f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
  }
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8003608:	230a      	movs	r3, #10
 800360a:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800360c:	e002      	b.n	8003614 <PCD_GET_EP_RX_CNT+0x18>
  {
    count--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	3b01      	subs	r3, #1
 8003612:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d1f9      	bne.n	800360e <PCD_GET_EP_RX_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003622:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	0c1b      	lsrs	r3, r3, #16
 800362a:	b29b      	uxth	r3, r3
 800362c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003630:	b29b      	uxth	r3, r3
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	460b      	mov	r3, r1
 8003648:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800364a:	230a      	movs	r3, #10
 800364c:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800364e:	e002      	b.n	8003656 <PCD_GET_EP_DBUF0_CNT+0x18>
  {
    count--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	3b01      	subs	r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1f9      	bne.n	8003650 <PCD_GET_EP_DBUF0_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 800365c:	887b      	ldrh	r3, [r7, #2]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003664:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	0c1b      	lsrs	r3, r3, #16
 800366c:	b29b      	uxth	r3, r3
 800366e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003672:	b29b      	uxth	r3, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	3714      	adds	r7, #20
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	807b      	strh	r3, [r7, #2]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800368c:	230a      	movs	r3, #10
 800368e:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8003690:	e002      	b.n	8003698 <PCD_GET_EP_DBUF1_CNT+0x18>
  {
    count--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	3b01      	subs	r3, #1
 8003696:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f9      	bne.n	8003692 <PCD_GET_EP_DBUF1_CNT+0x12>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 800369e:	887b      	ldrh	r3, [r7, #2]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036a6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	0c1b      	lsrs	r3, r3, #16
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b4:	b29b      	uxth	r3, r3
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b086      	sub	sp, #24
 80036c6:	af02      	add	r7, sp, #8
 80036c8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0f3      	b.n	80038bc <HAL_PCD_Init+0x1fa>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3295 	ldrb.w	r3, [r3, #661]	@ 0x295
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d106      	bne.n	80036ee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7fe fd99 	bl	8002220 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2203      	movs	r2, #3
 80036f2:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f009 f85f 	bl	800c7be <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6818      	ldr	r0, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	7c1a      	ldrb	r2, [r3, #16]
 8003708:	f88d 2000 	strb.w	r2, [sp]
 800370c:	3304      	adds	r3, #4
 800370e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003710:	f009 f823 	bl	800c75a <USB_CoreInit>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2202      	movs	r2, #2
 800371e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e0ca      	b.n	80038bc <HAL_PCD_Init+0x1fa>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f009 f85b 	bl	800c7e8 <USB_SetCurrentMode>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0bb      	b.n	80038bc <HAL_PCD_Init+0x1fa>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003744:	2300      	movs	r3, #0
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	e03f      	b.n	80037ca <HAL_PCD_Init+0x108>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	440b      	add	r3, r1
 8003758:	3315      	adds	r3, #21
 800375a:	2201      	movs	r2, #1
 800375c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800375e:	7bfa      	ldrb	r2, [r7, #15]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	440b      	add	r3, r1
 800376c:	3314      	adds	r3, #20
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	440b      	add	r3, r1
 8003780:	3317      	adds	r3, #23
 8003782:	2200      	movs	r2, #0
 8003784:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	6879      	ldr	r1, [r7, #4]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	440b      	add	r3, r1
 8003794:	3324      	adds	r3, #36	@ 0x24
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800379a:	7bfa      	ldrb	r2, [r7, #15]
 800379c:	6879      	ldr	r1, [r7, #4]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	440b      	add	r3, r1
 80037a8:	3328      	adds	r3, #40	@ 0x28
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	440b      	add	r3, r1
 80037be:	3304      	adds	r3, #4
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	3301      	adds	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	791b      	ldrb	r3, [r3, #4]
 80037ce:	7bfa      	ldrb	r2, [r7, #15]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d3ba      	bcc.n	800374a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	e044      	b.n	8003864 <HAL_PCD_Init+0x1a2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	440b      	add	r3, r1
 80037e8:	f203 1355 	addw	r3, r3, #341	@ 0x155
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	440b      	add	r3, r1
 80037fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	440b      	add	r3, r1
 8003814:	f203 1357 	addw	r3, r3, #343	@ 0x157
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	440b      	add	r3, r1
 800382a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	440b      	add	r3, r1
 8003840:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	440b      	add	r3, r1
 8003856:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800385e:	7bfb      	ldrb	r3, [r7, #15]
 8003860:	3301      	adds	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	791b      	ldrb	r3, [r3, #4]
 8003868:	7bfa      	ldrb	r2, [r7, #15]
 800386a:	429a      	cmp	r2, r3
 800386c:	d3b5      	bcc.n	80037da <HAL_PCD_Init+0x118>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	7c1a      	ldrb	r2, [r3, #16]
 8003876:	f88d 2000 	strb.w	r2, [sp]
 800387a:	3304      	adds	r3, #4
 800387c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800387e:	f008 ffd6 	bl	800c82e <USB_DevInit>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <HAL_PCD_Init+0x1d2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2202      	movs	r2, #2
 800388c:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e013      	b.n	80038bc <HAL_PCD_Init+0x1fa>
  }

  hpcd->USB_Address = 0U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2295 	strb.w	r2, [r3, #661]	@ 0x295

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	7b1b      	ldrb	r3, [r3, #12]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d102      	bne.n	80038b0 <HAL_PCD_Init+0x1ee>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f001 fb6b 	bl	8004f86 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f00a fe2f 	bl	800e518 <USB_DevDisconnect>

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_PCD_Start+0x16>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e012      	b.n	8003900 <HAL_PCD_Start+0x3c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f008 ff55 	bl	800c796 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f00a fe00 	bl	800e4f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f00a fe10 	bl	800e53a <USB_ReadInterrupts>
 800391a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 faf2 	bl	8003f10 <PCD_EP_ISR_Handler>

    return;
 800392c:	e0de      	b.n	8003aec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003934:	2b00      	cmp	r3, #0
 8003936:	d010      	beq.n	800395a <HAL_PCD_IRQHandler+0x52>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	f64f 33ff 	movw	r3, #64511	@ 0xfbff
 8003946:	400b      	ands	r3, r1
 8003948:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f00b fe5f 	bl	800f60e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003950:	2100      	movs	r1, #0
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f8e1 	bl	8003b1a <HAL_PCD_SetAddress>

    return;
 8003958:	e0c8      	b.n	8003aec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d009      	beq.n	8003978 <HAL_PCD_IRQHandler+0x70>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	f64b 73ff 	movw	r3, #49151	@ 0xbfff
 8003972:	400b      	ands	r3, r1
 8003974:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003976:	e0b9      	b.n	8003aec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d009      	beq.n	8003996 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
 8003990:	400b      	ands	r3, r1
 8003992:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003994:	e0aa      	b.n	8003aec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d029      	beq.n	80039f4 <HAL_PCD_IRQHandler+0xec>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0204 	bic.w	r2, r2, #4
 80039ae:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0208 	bic.w	r2, r2, #8
 80039be:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d107      	bne.n	80039da <HAL_PCD_IRQHandler+0xd2>
    {
      hpcd->LPM_State = LPM_L0;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039d2:	2100      	movs	r1, #0
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f001 faf8 	bl	8004fca <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f893 	bl	8003b06 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80039ee:	400b      	ands	r3, r1
 80039f0:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 80039f2:	e07b      	b.n	8003aec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01c      	beq.n	8003a38 <HAL_PCD_IRQHandler+0x130>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0208 	orr.w	r2, r2, #8
 8003a0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	f24f 73ff 	movw	r3, #63487	@ 0xf7ff
 8003a1c:	400b      	ands	r3, r1
 8003a1e:	6453      	str	r3, [r2, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0204 	orr.w	r2, r2, #4
 8003a2e:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f85e 	bl	8003af2 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a36:	e059      	b.n	8003aec <HAL_PCD_IRQHandler+0x1e4>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d033      	beq.n	8003aaa <HAL_PCD_IRQHandler+0x1a2>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	f64f 737f 	movw	r3, #65407	@ 0xff7f
 8003a50:	400b      	ands	r3, r1
 8003a52:	6453      	str	r3, [r2, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 32cc 	ldrb.w	r3, [r3, #716]	@ 0x2cc
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d121      	bne.n	8003aa2 <HAL_PCD_IRQHandler+0x19a>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0204 	orr.w	r2, r2, #4
 8003a6c:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0208 	orr.w	r2, r2, #8
 8003a7c:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a98:	2101      	movs	r1, #1
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f001 fa95 	bl	8004fca <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003aa0:	e024      	b.n	8003aec <HAL_PCD_IRQHandler+0x1e4>
      HAL_PCD_SuspendCallback(hpcd);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f825 	bl	8003af2 <HAL_PCD_SuspendCallback>
    return;
 8003aa8:	e020      	b.n	8003aec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00c      	beq.n	8003ace <HAL_PCD_IRQHandler+0x1c6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	f64f 53ff 	movw	r3, #65023	@ 0xfdff
 8003ac2:	400b      	ands	r3, r1
 8003ac4:	6453      	str	r3, [r2, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f00b fd93 	bl	800f5f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003acc:	e00e      	b.n	8003aec <HAL_PCD_IRQHandler+0x1e4>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d009      	beq.n	8003aec <HAL_PCD_IRQHandler+0x1e4>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8003ae6:	400b      	ands	r3, r1
 8003ae8:	6453      	str	r3, [r2, #68]	@ 0x44

    return;
 8003aea:	bf00      	nop
  }
}
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	460b      	mov	r3, r1
 8003b24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_PCD_SetAddress+0x1a>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e012      	b.n	8003b5a <HAL_PCD_SetAddress+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  hpcd->USB_Address = address;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f00a fcc0 	bl	800e4d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b084      	sub	sp, #16
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	4608      	mov	r0, r1
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4603      	mov	r3, r0
 8003b72:	70fb      	strb	r3, [r7, #3]
 8003b74:	460b      	mov	r3, r1
 8003b76:	803b      	strh	r3, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	da0f      	bge.n	8003ba8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b88:	78fb      	ldrb	r3, [r7, #3]
 8003b8a:	f003 0207 	and.w	r2, r3, #7
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	3310      	adds	r3, #16
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	705a      	strb	r2, [r3, #1]
 8003ba6:	e00f      	b.n	8003bc8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba8:	78fb      	ldrb	r3, [r7, #3]
 8003baa:	f003 0207 	and.w	r2, r3, #7
 8003bae:	4613      	mov	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	b2da      	uxtb	r2, r3
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003bd4:	883b      	ldrh	r3, [r7, #0]
 8003bd6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	78ba      	ldrb	r2, [r7, #2]
 8003be2:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003be4:	78bb      	ldrb	r3, [r7, #2]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d102      	bne.n	8003bf0 <HAL_PCD_EP_Open+0x8e>
  {
    ep->data_pid_start = 0U;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_PCD_EP_Open+0x9c>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e00e      	b.n	8003c1c <HAL_PCD_EP_Open+0xba>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68f9      	ldr	r1, [r7, #12]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f008 fe31 	bl	800c874 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return ret;
 8003c1a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	da0f      	bge.n	8003c58 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	f003 0207 	and.w	r2, r3, #7
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	3310      	adds	r3, #16
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2201      	movs	r2, #1
 8003c54:	705a      	strb	r2, [r3, #1]
 8003c56:	e00f      	b.n	8003c78 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c58:	78fb      	ldrb	r3, [r7, #3]
 8003c5a:	f003 0207 	and.w	r2, r3, #7
 8003c5e:	4613      	mov	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3304      	adds	r3, #4
 8003c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c78:	78fb      	ldrb	r3, [r7, #3]
 8003c7a:	f003 0307 	and.w	r3, r3, #7
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_PCD_EP_Close+0x6e>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e00e      	b.n	8003cb0 <HAL_PCD_EP_Close+0x8c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68f9      	ldr	r1, [r7, #12]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f009 f947 	bl	800cf34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cc8:	7afb      	ldrb	r3, [r7, #11]
 8003cca:	f003 0207 	and.w	r2, r3, #7
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4413      	add	r3, r2
 8003cde:	3304      	adds	r3, #4
 8003ce0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cfa:	7afb      	ldrb	r3, [r7, #11]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6979      	ldr	r1, [r7, #20]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f009 fa9b 	bl	800d248 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	f003 0207 	and.w	r2, r3, #7
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	4613      	mov	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	440b      	add	r3, r1
 8003d3a:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 8003d3e:	681b      	ldr	r3, [r3, #0]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d5c:	7afb      	ldrb	r3, [r7, #11]
 8003d5e:	f003 0207 	and.w	r2, r3, #7
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	3310      	adds	r3, #16
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	3304      	adds	r3, #4
 8003d72:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	619a      	str	r2, [r3, #24]
#if defined (USB_DRD_FS)
  ep->xfer_fill_db = 1U;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	621a      	str	r2, [r3, #32]
#endif /* defined (USB_DRD_FS) */
  ep->xfer_count = 0U;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2200      	movs	r2, #0
 8003d92:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2201      	movs	r2, #1
 8003d98:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d9a:	7afb      	ldrb	r3, [r7, #11]
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	701a      	strb	r2, [r3, #0]
    ep->dma_addr = (uint32_t)pBuf;
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
#else
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6979      	ldr	r1, [r7, #20]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f009 fa4b 	bl	800d248 <USB_EPStartXfer>
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3718      	adds	r7, #24
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dc8:	78fb      	ldrb	r3, [r7, #3]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	7912      	ldrb	r2, [r2, #4]
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e040      	b.n	8003e5c <HAL_PCD_EP_SetStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	da0f      	bge.n	8003e02 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	f003 0207 	and.w	r2, r3, #7
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	00db      	lsls	r3, r3, #3
 8003df0:	3310      	adds	r3, #16
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4413      	add	r3, r2
 8003df6:	3304      	adds	r3, #4
 8003df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	705a      	strb	r2, [r3, #1]
 8003e00:	e00d      	b.n	8003e1e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	4613      	mov	r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4413      	add	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	4413      	add	r3, r2
 8003e14:	3304      	adds	r3, #4
 8003e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_PCD_EP_SetStall+0x82>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e00e      	b.n	8003e5c <HAL_PCD_EP_SetStall+0xa0>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68f9      	ldr	r1, [r7, #12]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f00a fa65 	bl	800e31c <USB_EPSetStall>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_UNLOCK(hpcd);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e70:	78fb      	ldrb	r3, [r7, #3]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	7912      	ldrb	r2, [r2, #4]
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e042      	b.n	8003f08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	da0f      	bge.n	8003eaa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	f003 0207 	and.w	r2, r3, #7
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	3310      	adds	r3, #16
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	705a      	strb	r2, [r3, #1]
 8003ea8:	e00f      	b.n	8003eca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eaa:	78fb      	ldrb	r3, [r7, #3]
 8003eac:	f003 0207 	and.w	r2, r3, #7
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3294 	ldrb.w	r3, [r3, #660]	@ 0x294
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_PCD_EP_ClrStall+0x86>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e00e      	b.n	8003f08 <HAL_PCD_EP_ClrStall+0xa4>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68f9      	ldr	r1, [r7, #12]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f00a fa55 	bl	800e3a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2294 	strb.w	r2, [r3, #660]	@ 0x294

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b08e      	sub	sp, #56	@ 0x38
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f18:	e326      	b.n	8004568 <PCD_EP_ISR_Handler+0x658>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f20:	847b      	strh	r3, [r7, #34]	@ 0x22

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8003f22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    if (epindex == 0U)
 8003f2e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f040 8124 	bne.w	8004180 <PCD_EP_ISR_Handler+0x270>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f38:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003f3a:	f003 0310 	and.w	r3, r3, #16
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d13e      	bne.n	8003fc0 <PCD_EP_ISR_Handler+0xb0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b89      	ldr	r3, [pc, #548]	@ (8004170 <PCD_EP_ISR_Handler+0x260>)
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68ba      	ldr	r2, [r7, #8]
 8003f54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f58:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f6a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	0c1b      	lsrs	r3, r3, #16
 8003f72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f78:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7c:	695a      	ldr	r2, [r3, #20]
 8003f7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	441a      	add	r2, r3
 8003f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f86:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003f88:	2100      	movs	r1, #0
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f00b fb17 	bl	800f5be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	7c5b      	ldrb	r3, [r3, #17]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 82e6 	beq.w	8004568 <PCD_EP_ISR_Handler+0x658>
 8003f9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f040 82e1 	bne.w	8004568 <PCD_EP_ISR_Handler+0x658>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	7c5b      	ldrb	r3, [r3, #17]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	745a      	strb	r2, [r3, #17]
 8003fbe:	e2d3      	b.n	8004568 <PCD_EP_ISR_Handler+0x658>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8003fc6:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	867b      	strh	r3, [r7, #50]	@ 0x32

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003fd0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003fd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d027      	beq.n	800402a <PCD_EP_ISR_Handler+0x11a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	f7ff fb09 	bl	80035fc <PCD_GET_EP_RX_CNT>
 8003fea:	4603      	mov	r3, r0
 8003fec:	461a      	mov	r2, r3
 8003fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ff0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f503 7127 	add.w	r1, r3, #668	@ 0x29c
 8003ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ffe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004002:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004004:	b29b      	uxth	r3, r3
 8004006:	f00a fb07 	bl	800e618 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b58      	ldr	r3, [pc, #352]	@ (8004174 <PCD_EP_ISR_Handler+0x264>)
 8004012:	4013      	ands	r3, r2
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004020:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f00b fa9e 	bl	800f564 <HAL_PCD_SetupStageCallback>
 8004028:	e29e      	b.n	8004568 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 800402a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800402e:	2b00      	cmp	r3, #0
 8004030:	f280 829a 	bge.w	8004568 <PCD_EP_ISR_Handler+0x658>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	4b4e      	ldr	r3, [pc, #312]	@ (8004174 <PCD_EP_ISR_Handler+0x264>)
 800403c:	4013      	ands	r3, r2
 800403e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004046:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800404a:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	4619      	mov	r1, r3
 8004056:	4610      	mov	r0, r2
 8004058:	f7ff fad0 	bl	80035fc <PCD_GET_EP_RX_CNT>
 800405c:	4603      	mov	r3, r0
 800405e:	461a      	mov	r2, r3
 8004060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004062:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d019      	beq.n	80040a0 <PCD_EP_ISR_Handler+0x190>
 800406c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d015      	beq.n	80040a0 <PCD_EP_ISR_Handler+0x190>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407a:	6959      	ldr	r1, [r3, #20]
 800407c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800407e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004082:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004084:	b29b      	uxth	r3, r3
 8004086:	f00a fac7 	bl	800e618 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800408a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800408c:	695a      	ldr	r2, [r3, #20]
 800408e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	441a      	add	r2, r3
 8004094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004096:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004098:	2100      	movs	r1, #0
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f00b fa74 	bl	800f588 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	867b      	strh	r3, [r7, #50]	@ 0x32

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80040a8:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80040aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f040 825a 	bne.w	8004568 <PCD_EP_ISR_Handler+0x658>
 80040b4:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80040b6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80040ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80040be:	f000 8253 	beq.w	8004568 <PCD_EP_ISR_Handler+0x658>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80040c2:	4b2d      	ldr	r3, [pc, #180]	@ (8004178 <PCD_EP_ISR_Handler+0x268>)
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004178 <PCD_EP_ISR_Handler+0x268>)
 80040c8:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 80040cc:	6053      	str	r3, [r2, #4]
 80040ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d106      	bne.n	80040e4 <PCD_EP_ISR_Handler+0x1d4>
 80040d6:	4b28      	ldr	r3, [pc, #160]	@ (8004178 <PCD_EP_ISR_Handler+0x268>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	4a27      	ldr	r2, [pc, #156]	@ (8004178 <PCD_EP_ISR_Handler+0x268>)
 80040dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040e0:	6053      	str	r3, [r2, #4]
 80040e2:	e02e      	b.n	8004142 <PCD_EP_ISR_Handler+0x232>
 80040e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80040ea:	d814      	bhi.n	8004116 <PCD_EP_ISR_Handler+0x206>
 80040ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	085b      	lsrs	r3, r3, #1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <PCD_EP_ISR_Handler+0x1f6>
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	3301      	adds	r3, #1
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	4b1c      	ldr	r3, [pc, #112]	@ (8004178 <PCD_EP_ISR_Handler+0x268>)
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	069b      	lsls	r3, r3, #26
 800410e:	491a      	ldr	r1, [pc, #104]	@ (8004178 <PCD_EP_ISR_Handler+0x268>)
 8004110:	4313      	orrs	r3, r2
 8004112:	604b      	str	r3, [r1, #4]
 8004114:	e015      	b.n	8004142 <PCD_EP_ISR_Handler+0x232>
 8004116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	617b      	str	r3, [r7, #20]
 800411e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2b00      	cmp	r3, #0
 8004128:	d102      	bne.n	8004130 <PCD_EP_ISR_Handler+0x220>
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	3b01      	subs	r3, #1
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	4b11      	ldr	r3, [pc, #68]	@ (8004178 <PCD_EP_ISR_Handler+0x268>)
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	069b      	lsls	r3, r3, #26
 8004138:	4313      	orrs	r3, r2
 800413a:	4a0f      	ldr	r2, [pc, #60]	@ (8004178 <PCD_EP_ISR_Handler+0x268>)
 800413c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004140:	6053      	str	r3, [r2, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <PCD_EP_ISR_Handler+0x26c>)
 800414a:	4013      	ands	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004168:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800416c:	6013      	str	r3, [r2, #0]
 800416e:	e1fb      	b.n	8004568 <PCD_EP_ISR_Handler+0x658>
 8004170:	07ff8f0f 	.word	0x07ff8f0f
 8004174:	07ff0f8f 	.word	0x07ff0f8f
 8004178:	40016400 	.word	0x40016400
 800417c:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	461a      	mov	r2, r3
 8004186:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	867b      	strh	r3, [r7, #50]	@ 0x32

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8004192:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8004196:	2b00      	cmp	r3, #0
 8004198:	f280 80bd 	bge.w	8004316 <PCD_EP_ISR_Handler+0x406>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	461a      	mov	r2, r3
 80041a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4413      	add	r3, r2
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b9e      	ldr	r3, [pc, #632]	@ (8004428 <PCD_EP_ISR_Handler+0x518>)
 80041ae:	4013      	ands	r3, r2
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	461a      	mov	r2, r3
 80041b8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80041c6:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80041c8:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	4413      	add	r3, r2
 80041dc:	3304      	adds	r3, #4
 80041de:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80041e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041e2:	7b1b      	ldrb	r3, [r3, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d116      	bne.n	8004216 <PCD_EP_ISR_Handler+0x306>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	4619      	mov	r1, r3
 80041f2:	4610      	mov	r0, r2
 80041f4:	f7ff fa02 	bl	80035fc <PCD_GET_EP_RX_CNT>
 80041f8:	4603      	mov	r3, r0
 80041fa:	84bb      	strh	r3, [r7, #36]	@ 0x24

          if (count != 0U)
 80041fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d067      	beq.n	80042d2 <PCD_EP_ISR_Handler+0x3c2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	6959      	ldr	r1, [r3, #20]
 800420a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800420c:	88da      	ldrh	r2, [r3, #6]
 800420e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004210:	f00a fa02 	bl	800e618 <USB_ReadPMA>
 8004214:	e05d      	b.n	80042d2 <PCD_EP_ISR_Handler+0x3c2>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004218:	78db      	ldrb	r3, [r3, #3]
 800421a:	2b02      	cmp	r3, #2
 800421c:	d108      	bne.n	8004230 <PCD_EP_ISR_Handler+0x320>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800421e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004220:	461a      	mov	r2, r3
 8004222:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f9ad 	bl	8004584 <HAL_PCD_EP_DB_Receive>
 800422a:	4603      	mov	r3, r0
 800422c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800422e:	e050      	b.n	80042d2 <PCD_EP_ISR_Handler+0x3c2>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	461a      	mov	r2, r3
 8004236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	4b7a      	ldr	r3, [pc, #488]	@ (800442c <PCD_EP_ISR_Handler+0x51c>)
 8004242:	4013      	ands	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	441a      	add	r2, r3
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800425a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800425e:	6013      	str	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d016      	beq.n	80042a6 <PCD_EP_ISR_Handler+0x396>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	4619      	mov	r1, r3
 8004282:	4610      	mov	r0, r2
 8004284:	f7ff f9db 	bl	800363e <PCD_GET_EP_DBUF0_CNT>
 8004288:	4603      	mov	r3, r0
 800428a:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 800428c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01f      	beq.n	80042d2 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004298:	6959      	ldr	r1, [r3, #20]
 800429a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800429c:	891a      	ldrh	r2, [r3, #8]
 800429e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042a0:	f00a f9ba 	bl	800e618 <USB_ReadPMA>
 80042a4:	e015      	b.n	80042d2 <PCD_EP_ISR_Handler+0x3c2>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	4619      	mov	r1, r3
 80042b0:	4610      	mov	r0, r2
 80042b2:	f7ff f9e5 	bl	8003680 <PCD_GET_EP_DBUF1_CNT>
 80042b6:	4603      	mov	r3, r0
 80042b8:	84bb      	strh	r3, [r7, #36]	@ 0x24

              if (count != 0U)
 80042ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <PCD_EP_ISR_Handler+0x3c2>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c6:	6959      	ldr	r1, [r3, #20]
 80042c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ca:	895a      	ldrh	r2, [r3, #10]
 80042cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042ce:	f00a f9a3 	bl	800e618 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80042d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d4:	69da      	ldr	r2, [r3, #28]
 80042d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042d8:	441a      	add	r2, r3
 80042da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80042de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e0:	695a      	ldr	r2, [r3, #20]
 80042e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80042e4:	441a      	add	r2, r3
 80042e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e8:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80042ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d004      	beq.n	80042fc <PCD_EP_ISR_Handler+0x3ec>
 80042f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f6:	691b      	ldr	r3, [r3, #16]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d206      	bcs.n	800430a <PCD_EP_ISR_Handler+0x3fa>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80042fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	4619      	mov	r1, r3
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f00b f940 	bl	800f588 <HAL_PCD_DataOutStageCallback>
 8004308:	e005      	b.n	8004316 <PCD_EP_ISR_Handler+0x406>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004310:	4618      	mov	r0, r3
 8004312:	f008 ff99 	bl	800d248 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8004316:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004318:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 8123 	beq.w	8004568 <PCD_EP_ISR_Handler+0x658>
      {
        ep = &hpcd->IN_ep[epindex];
 8004322:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8004326:	4613      	mov	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4413      	add	r3, r2
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	3310      	adds	r3, #16
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	4413      	add	r3, r2
 8004334:	3304      	adds	r3, #4
 8004336:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b39      	ldr	r3, [pc, #228]	@ (8004430 <PCD_EP_ISR_Handler+0x520>)
 800434a:	4013      	ands	r3, r2
 800434c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800435e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004362:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004366:	78db      	ldrb	r3, [r3, #3]
 8004368:	2b01      	cmp	r3, #1
 800436a:	f040 80b8 	bne.w	80044de <PCD_EP_ISR_Handler+0x5ce>
        {
          ep->xfer_len = 0U;
 800436e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004370:	2200      	movs	r2, #0
 8004372:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004376:	7b1b      	ldrb	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80a9 	beq.w	80044d0 <PCD_EP_ISR_Handler+0x5c0>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800437e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8004380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d055      	beq.n	8004434 <PCD_EP_ISR_Handler+0x524>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800438a:	785b      	ldrb	r3, [r3, #1]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d124      	bne.n	80043da <PCD_EP_ISR_Handler+0x4ca>
 8004390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800439a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043ae:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80043b2:	601a      	str	r2, [r3, #0]
 80043b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	00db      	lsls	r3, r3, #3
 80043ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043ce:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043d2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	e07a      	b.n	80044d0 <PCD_EP_ISR_Handler+0x5c0>
 80043da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043dc:	785b      	ldrb	r3, [r3, #1]
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d176      	bne.n	80044d0 <PCD_EP_ISR_Handler+0x5c0>
 80043e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80043fc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004400:	b292      	uxth	r2, r2
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 800440e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800441c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	e054      	b.n	80044d0 <PCD_EP_ISR_Handler+0x5c0>
 8004426:	bf00      	nop
 8004428:	07ff0f8f 	.word	0x07ff0f8f
 800442c:	07ff8f8f 	.word	0x07ff8f8f
 8004430:	07ff8f0f 	.word	0x07ff8f0f
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004436:	785b      	ldrb	r3, [r3, #1]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d124      	bne.n	8004486 <PCD_EP_ISR_Handler+0x576>
 800443c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004446:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004456:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800445a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800445e:	605a      	str	r2, [r3, #4]
 8004460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	00db      	lsls	r3, r3, #3
 8004466:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800446a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800447a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800447e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004482:	605a      	str	r2, [r3, #4]
 8004484:	e024      	b.n	80044d0 <PCD_EP_ISR_Handler+0x5c0>
 8004486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004488:	785b      	ldrb	r3, [r3, #1]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d120      	bne.n	80044d0 <PCD_EP_ISR_Handler+0x5c0>
 800448e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004498:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044ac:	b292      	uxth	r2, r2
 80044ae:	605a      	str	r2, [r3, #4]
 80044b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	00db      	lsls	r3, r3, #3
 80044b6:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80044ba:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80044be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	00db      	lsls	r3, r3, #3
 80044c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044cc:	6852      	ldr	r2, [r2, #4]
 80044ce:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	4619      	mov	r1, r3
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f00b f871 	bl	800f5be <HAL_PCD_DataInStageCallback>
 80044dc:	e044      	b.n	8004568 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80044de:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80044e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d139      	bne.n	800455c <PCD_EP_ISR_Handler+0x64c>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80044e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	00db      	lsls	r3, r3, #3
 80044ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80044f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004500:	84fb      	strh	r3, [r7, #38]	@ 0x26

            if (ep->xfer_len > TxPctSize)
 8004502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004508:	429a      	cmp	r2, r3
 800450a:	d906      	bls.n	800451a <PCD_EP_ISR_Handler+0x60a>
            {
              ep->xfer_len -= TxPctSize;
 800450c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004512:	1ad2      	subs	r2, r2, r3
 8004514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004516:	619a      	str	r2, [r3, #24]
 8004518:	e002      	b.n	8004520 <PCD_EP_ISR_Handler+0x610>
            }
            else
            {
              ep->xfer_len = 0U;
 800451a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800451c:	2200      	movs	r2, #0
 800451e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <PCD_EP_ISR_Handler+0x626>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f00b f845 	bl	800f5be <HAL_PCD_DataInStageCallback>
 8004534:	e018      	b.n	8004568 <PCD_EP_ISR_Handler+0x658>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004536:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004538:	695a      	ldr	r2, [r3, #20]
 800453a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800453c:	441a      	add	r2, r3
 800453e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004540:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004544:	69da      	ldr	r2, [r3, #28]
 8004546:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004548:	441a      	add	r2, r3
 800454a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800454c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004554:	4618      	mov	r0, r3
 8004556:	f008 fe77 	bl	800d248 <USB_EPStartXfer>
 800455a:	e005      	b.n	8004568 <PCD_EP_ISR_Handler+0x658>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800455c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800455e:	461a      	mov	r2, r3
 8004560:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8e8 	bl	8004738 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800456e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004572:	2b00      	cmp	r3, #0
 8004574:	f47f acd1 	bne.w	8003f1a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3738      	adds	r7, #56	@ 0x38
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop

08004584 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	@ 0x28
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	4613      	mov	r3, r2
 8004590:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d062      	beq.n	8004662 <HAL_PCD_EP_DB_Receive+0xde>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f7ff f849 	bl	800363e <PCD_GET_EP_DBUF0_CNT>
 80045ac:	4603      	mov	r3, r0
 80045ae:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	699a      	ldr	r2, [r3, #24]
 80045b4:	8bfb      	ldrh	r3, [r7, #30]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d306      	bcc.n	80045c8 <HAL_PCD_EP_DB_Receive+0x44>
    {
      ep->xfer_len -= count;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	699a      	ldr	r2, [r3, #24]
 80045be:	8bfb      	ldrh	r3, [r7, #30]
 80045c0:	1ad2      	subs	r2, r2, r3
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	619a      	str	r2, [r3, #24]
 80045c6:	e002      	b.n	80045ce <HAL_PCD_EP_DB_Receive+0x4a>
    }
    else
    {
      ep->xfer_len = 0U;
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2200      	movs	r2, #0
 80045cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d11b      	bne.n	800460e <HAL_PCD_EP_DB_Receive+0x8a>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	461a      	mov	r2, r3
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	4413      	add	r3, r2
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b52      	ldr	r3, [pc, #328]	@ (8004730 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80045f2:	61bb      	str	r3, [r7, #24]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	461a      	mov	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	441a      	add	r2, r3
 8004602:	69bb      	ldr	r3, [r7, #24]
 8004604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800460c:	6013      	str	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004614:	2b00      	cmp	r3, #0
 8004616:	d017      	beq.n	8004648 <HAL_PCD_EP_DB_Receive+0xc4>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	461a      	mov	r2, r3
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4b42      	ldr	r3, [pc, #264]	@ (8004734 <HAL_PCD_EP_DB_Receive+0x1b0>)
 800462a:	4013      	ands	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	461a      	mov	r2, r3
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	441a      	add	r2, r3
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004642:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004646:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 8004648:	8bfb      	ldrh	r3, [r7, #30]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d06b      	beq.n	8004726 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6818      	ldr	r0, [r3, #0]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6959      	ldr	r1, [r3, #20]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	891a      	ldrh	r2, [r3, #8]
 800465a:	8bfb      	ldrh	r3, [r7, #30]
 800465c:	f009 ffdc 	bl	800e618 <USB_ReadPMA>
 8004660:	e061      	b.n	8004726 <HAL_PCD_EP_DB_Receive+0x1a2>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	4619      	mov	r1, r3
 800466c:	4610      	mov	r0, r2
 800466e:	f7ff f807 	bl	8003680 <PCD_GET_EP_DBUF1_CNT>
 8004672:	4603      	mov	r3, r0
 8004674:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= count)
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	8bfb      	ldrh	r3, [r7, #30]
 800467c:	429a      	cmp	r2, r3
 800467e:	d306      	bcc.n	800468e <HAL_PCD_EP_DB_Receive+0x10a>
    {
      ep->xfer_len -= count;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	699a      	ldr	r2, [r3, #24]
 8004684:	8bfb      	ldrh	r3, [r7, #30]
 8004686:	1ad2      	subs	r2, r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	619a      	str	r2, [r3, #24]
 800468c:	e002      	b.n	8004694 <HAL_PCD_EP_DB_Receive+0x110>
    }
    else
    {
      ep->xfer_len = 0U;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2200      	movs	r2, #0
 8004692:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d11b      	bne.n	80046d4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	461a      	mov	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4b20      	ldr	r3, [pc, #128]	@ (8004730 <HAL_PCD_EP_DB_Receive+0x1ac>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80046b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	461a      	mov	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	441a      	add	r2, r3
 80046c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046d2:	6013      	str	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d117      	bne.n	800470e <HAL_PCD_EP_DB_Receive+0x18a>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	4413      	add	r3, r2
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	4b11      	ldr	r3, [pc, #68]	@ (8004734 <HAL_PCD_EP_DB_Receive+0x1b0>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	623b      	str	r3, [r7, #32]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	441a      	add	r2, r3
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004708:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800470c:	6013      	str	r3, [r2, #0]
    }

    if (count != 0U)
 800470e:	8bfb      	ldrh	r3, [r7, #30]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d008      	beq.n	8004726 <HAL_PCD_EP_DB_Receive+0x1a2>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6818      	ldr	r0, [r3, #0]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	6959      	ldr	r1, [r3, #20]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	895a      	ldrh	r2, [r3, #10]
 8004720:	8bfb      	ldrh	r3, [r7, #30]
 8004722:	f009 ff79 	bl	800e618 <USB_ReadPMA>
    }
  }

  return count;
 8004726:	8bfb      	ldrh	r3, [r7, #30]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3728      	adds	r7, #40	@ 0x28
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	07ffbf8f 	.word	0x07ffbf8f
 8004734:	07ff8f8f 	.word	0x07ff8f8f

08004738 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08e      	sub	sp, #56	@ 0x38
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	4613      	mov	r3, r2
 8004744:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 81d5 	beq.w	8004afc <HAL_PCD_EP_DB_Transmit+0x3c4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f7fe ff6e 	bl	800363e <PCD_GET_EP_DBUF0_CNT>
 8004762:	4603      	mov	r3, r0
 8004764:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len > TxPctSize)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	699a      	ldr	r2, [r3, #24]
 800476a:	8bfb      	ldrh	r3, [r7, #30]
 800476c:	429a      	cmp	r2, r3
 800476e:	d906      	bls.n	800477e <HAL_PCD_EP_DB_Transmit+0x46>
    {
      ep->xfer_len -= TxPctSize;
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	699a      	ldr	r2, [r3, #24]
 8004774:	8bfb      	ldrh	r3, [r7, #30]
 8004776:	1ad2      	subs	r2, r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	619a      	str	r2, [r3, #24]
 800477c:	e002      	b.n	8004784 <HAL_PCD_EP_DB_Transmit+0x4c>
    }
    else
    {
      ep->xfer_len = 0U;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	2200      	movs	r2, #0
 8004782:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f040 80c1 	bne.w	8004910 <HAL_PCD_EP_DB_Transmit+0x1d8>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	785b      	ldrb	r3, [r3, #1]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d124      	bne.n	80047e0 <HAL_PCD_EP_DB_Transmit+0xa8>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047a0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047b0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047b4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047c4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047d4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	e024      	b.n	800482a <HAL_PCD_EP_DB_Transmit+0xf2>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	785b      	ldrb	r3, [r3, #1]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d120      	bne.n	800482a <HAL_PCD_EP_DB_Transmit+0xf2>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047f2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	00db      	lsls	r3, r3, #3
 80047fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004802:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004806:	b292      	uxth	r2, r2
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004814:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004822:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	785b      	ldrb	r3, [r3, #1]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d124      	bne.n	800487c <HAL_PCD_EP_DB_Transmit+0x144>
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800483c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800484c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004850:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004854:	605a      	str	r2, [r3, #4]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004860:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004870:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004874:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	e024      	b.n	80048c6 <HAL_PCD_EP_DB_Transmit+0x18e>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	785b      	ldrb	r3, [r3, #1]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d120      	bne.n	80048c6 <HAL_PCD_EP_DB_Transmit+0x18e>
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800488e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004892:	685a      	ldr	r2, [r3, #4]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	00db      	lsls	r3, r3, #3
 800489a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800489e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80048a2:	b292      	uxth	r2, r2
 80048a4:	605a      	str	r2, [r3, #4]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 80048b0:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	00db      	lsls	r3, r3, #3
 80048ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80048c2:	6852      	ldr	r2, [r2, #4]
 80048c4:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	4619      	mov	r1, r3
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f00a fe76 	bl	800f5be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 82e5 	beq.w	8004ea8 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	4413      	add	r3, r2
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	4b8e      	ldr	r3, [pc, #568]	@ (8004b28 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	441a      	add	r2, r3
 8004902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004904:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004908:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e2cb      	b.n	8004ea8 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004910:	88fb      	ldrh	r3, [r7, #6]
 8004912:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d017      	beq.n	800494a <HAL_PCD_EP_DB_Transmit+0x212>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	461a      	mov	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	4413      	add	r3, r2
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4b7f      	ldr	r3, [pc, #508]	@ (8004b28 <HAL_PCD_EP_DB_Transmit+0x3f0>)
 800492c:	4013      	ands	r3, r2
 800492e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	441a      	add	r2, r3
 800493e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004940:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004948:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004950:	2b01      	cmp	r3, #1
 8004952:	f040 82a9 	bne.w	8004ea8 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	8bfb      	ldrh	r3, [r7, #30]
 800495c:	441a      	add	r2, r3
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	69da      	ldr	r2, [r3, #28]
 8004966:	8bfb      	ldrh	r3, [r7, #30]
 8004968:	441a      	add	r2, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6a1a      	ldr	r2, [r3, #32]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	429a      	cmp	r2, r3
 8004978:	d309      	bcc.n	800498e <HAL_PCD_EP_DB_Transmit+0x256>
        {
          len = ep->maxpacket;
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	6a1a      	ldr	r2, [r3, #32]
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	1ad2      	subs	r2, r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	621a      	str	r2, [r3, #32]
 800498c:	e014      	b.n	80049b8 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else if (ep->xfer_len_db == 0U)
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	6a1b      	ldr	r3, [r3, #32]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_PCD_EP_DB_Transmit+0x26c>
        {
          len = TxPctSize;
 8004996:	8bfb      	ldrh	r3, [r7, #30]
 8004998:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80049a2:	e009      	b.n	80049b8 <HAL_PCD_EP_DB_Transmit+0x280>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2200      	movs	r2, #0
 80049b6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	785b      	ldrb	r3, [r3, #1]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d16a      	bne.n	8004a96 <HAL_PCD_EP_DB_Transmit+0x35e>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049ca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049da:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80049de:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 80049e2:	601a      	str	r2, [r3, #0]
 80049e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d112      	bne.n	8004a10 <HAL_PCD_EP_DB_Transmit+0x2d8>
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80049f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a04:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a08:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	e06a      	b.n	8004ae6 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a12:	2b3e      	cmp	r3, #62	@ 0x3e
 8004a14:	d81e      	bhi.n	8004a54 <HAL_PCD_EP_DB_Transmit+0x31c>
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	085b      	lsrs	r3, r3, #1
 8004a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <HAL_PCD_EP_DB_Transmit+0x2f4>
 8004a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a28:	3301      	adds	r3, #1
 8004a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a3a:	6819      	ldr	r1, [r3, #0]
 8004a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3e:	069a      	lsls	r2, r3, #26
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a4a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e048      	b.n	8004ae6 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d102      	bne.n	8004a6a <HAL_PCD_EP_DB_Transmit+0x332>
 8004a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a66:	3b01      	subs	r3, #1
 8004a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a7c:	069b      	lsls	r3, r3, #26
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004a8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004a8e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	e027      	b.n	8004ae6 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	785b      	ldrb	r3, [r3, #1]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d123      	bne.n	8004ae6 <HAL_PCD_EP_DB_Transmit+0x3ae>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004aa8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ab8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004abc:	b292      	uxth	r2, r2
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004aca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ace:	6819      	ldr	r1, [r3, #0]
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	041a      	lsls	r2, r3, #16
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ade:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	6959      	ldr	r1, [r3, #20]
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	891a      	ldrh	r2, [r3, #8]
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	f009 fd2e 	bl	800e556 <USB_WritePMA>
 8004afa:	e1d5      	b.n	8004ea8 <HAL_PCD_EP_DB_Transmit+0x770>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f7fe fdba 	bl	8003680 <PCD_GET_EP_DBUF1_CNT>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	83fb      	strh	r3, [r7, #30]

    if (ep->xfer_len >= TxPctSize)
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	699a      	ldr	r2, [r3, #24]
 8004b14:	8bfb      	ldrh	r3, [r7, #30]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d308      	bcc.n	8004b2c <HAL_PCD_EP_DB_Transmit+0x3f4>
    {
      ep->xfer_len -= TxPctSize;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	699a      	ldr	r2, [r3, #24]
 8004b1e:	8bfb      	ldrh	r3, [r7, #30]
 8004b20:	1ad2      	subs	r2, r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	619a      	str	r2, [r3, #24]
 8004b26:	e004      	b.n	8004b32 <HAL_PCD_EP_DB_Transmit+0x3fa>
 8004b28:	07ff8f8f 	.word	0x07ff8f8f
    }
    else
    {
      ep->xfer_len = 0U;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f040 80c1 	bne.w	8004cbe <HAL_PCD_EP_DB_Transmit+0x586>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	785b      	ldrb	r3, [r3, #1]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d124      	bne.n	8004b8e <HAL_PCD_EP_DB_Transmit+0x456>
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	00db      	lsls	r3, r3, #3
 8004b5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b62:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	00db      	lsls	r3, r3, #3
 8004b6e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b72:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b82:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004b86:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	e024      	b.n	8004bd8 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	785b      	ldrb	r3, [r3, #1]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d120      	bne.n	8004bd8 <HAL_PCD_EP_DB_Transmit+0x4a0>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004ba0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004bb4:	b292      	uxth	r2, r2
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004bc2:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	00db      	lsls	r3, r3, #3
 8004bcc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bd0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	785b      	ldrb	r3, [r3, #1]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d124      	bne.n	8004c2a <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	00db      	lsls	r3, r3, #3
 8004be6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	00db      	lsls	r3, r3, #3
 8004bf6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004bfa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004bfe:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004c02:	605a      	str	r2, [r3, #4]
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c0e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c1e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c22:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004c26:	605a      	str	r2, [r3, #4]
 8004c28:	e024      	b.n	8004c74 <HAL_PCD_EP_DB_Transmit+0x53c>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	785b      	ldrb	r3, [r3, #1]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d120      	bne.n	8004c74 <HAL_PCD_EP_DB_Transmit+0x53c>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c3c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c4c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c50:	b292      	uxth	r2, r2
 8004c52:	605a      	str	r2, [r3, #4]
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	f103 4280 	add.w	r2, r3, #1073741824	@ 0x40000000
 8004c5e:	f502 32b2 	add.w	r2, r2, #91136	@ 0x16400
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004c70:	6852      	ldr	r2, [r2, #4]
 8004c72:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f00a fc9f 	bl	800f5be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004c80:	88fb      	ldrh	r3, [r7, #6]
 8004c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f040 810e 	bne.w	8004ea8 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	4b95      	ldr	r3, [pc, #596]	@ (8004ef4 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	623b      	str	r3, [r7, #32]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	441a      	add	r2, r3
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	e0f4      	b.n	8004ea8 <HAL_PCD_EP_DB_Transmit+0x770>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004cbe:	88fb      	ldrh	r3, [r7, #6]
 8004cc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d117      	bne.n	8004cf8 <HAL_PCD_EP_DB_Transmit+0x5c0>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	461a      	mov	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	4b86      	ldr	r3, [pc, #536]	@ (8004ef4 <HAL_PCD_EP_DB_Transmit+0x7bc>)
 8004cda:	4013      	ands	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	441a      	add	r2, r3
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cf6:	6013      	str	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	f040 80d2 	bne.w	8004ea8 <HAL_PCD_EP_DB_Transmit+0x770>
      {
        ep->xfer_buff += TxPctSize;
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	695a      	ldr	r2, [r3, #20]
 8004d08:	8bfb      	ldrh	r3, [r7, #30]
 8004d0a:	441a      	add	r2, r3
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	69da      	ldr	r2, [r3, #28]
 8004d14:	8bfb      	ldrh	r3, [r7, #30]
 8004d16:	441a      	add	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	6a1a      	ldr	r2, [r3, #32]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d309      	bcc.n	8004d3c <HAL_PCD_EP_DB_Transmit+0x604>
        {
          len = ep->maxpacket;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	6a1a      	ldr	r2, [r3, #32]
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	1ad2      	subs	r2, r2, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	621a      	str	r2, [r3, #32]
 8004d3a:	e014      	b.n	8004d66 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else if (ep->xfer_len_db == 0U)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d106      	bne.n	8004d52 <HAL_PCD_EP_DB_Transmit+0x61a>
        {
          len = TxPctSize;
 8004d44:	8bfb      	ldrh	r3, [r7, #30]
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004d50:	e009      	b.n	8004d66 <HAL_PCD_EP_DB_Transmit+0x62e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d16a      	bne.n	8004e44 <HAL_PCD_EP_DB_Transmit+0x70c>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	781b      	ldrb	r3, [r3, #0]
 8004d82:	00db      	lsls	r3, r3, #3
 8004d84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d88:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004d8c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 8004d90:	605a      	str	r2, [r3, #4]
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d112      	bne.n	8004dbe <HAL_PCD_EP_DB_Transmit+0x686>
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004da2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004db2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004db6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004dba:	605a      	str	r2, [r3, #4]
 8004dbc:	e06a      	b.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x75c>
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	2b3e      	cmp	r3, #62	@ 0x3e
 8004dc2:	d81e      	bhi.n	8004e02 <HAL_PCD_EP_DB_Transmit+0x6ca>
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc6:	085b      	lsrs	r3, r3, #1
 8004dc8:	61bb      	str	r3, [r7, #24]
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <HAL_PCD_EP_DB_Transmit+0x6a2>
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	00db      	lsls	r3, r3, #3
 8004de0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004de4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004de8:	6859      	ldr	r1, [r3, #4]
 8004dea:	69bb      	ldr	r3, [r7, #24]
 8004dec:	069a      	lsls	r2, r3, #26
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004df8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	605a      	str	r2, [r3, #4]
 8004e00:	e048      	b.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x75c>
 8004e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e04:	095b      	lsrs	r3, r3, #5
 8004e06:	61bb      	str	r3, [r7, #24]
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d102      	bne.n	8004e18 <HAL_PCD_EP_DB_Transmit+0x6e0>
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	3b01      	subs	r3, #1
 8004e16:	61bb      	str	r3, [r7, #24]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e22:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	069b      	lsls	r3, r3, #26
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	00db      	lsls	r3, r3, #3
 8004e34:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e38:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e3c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004e40:	605a      	str	r2, [r3, #4]
 8004e42:	e027      	b.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x75c>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	785b      	ldrb	r3, [r3, #1]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d123      	bne.n	8004e94 <HAL_PCD_EP_DB_Transmit+0x75c>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	00db      	lsls	r3, r3, #3
 8004e52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e5a:	685a      	ldr	r2, [r3, #4]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e66:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e6a:	b292      	uxth	r2, r2
 8004e6c:	605a      	str	r2, [r3, #4]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e78:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	041a      	lsls	r2, r3, #16
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 8004e90:	430a      	orrs	r2, r1
 8004e92:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	6959      	ldr	r1, [r3, #20]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	895a      	ldrh	r2, [r3, #10]
 8004ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	f009 fb57 	bl	800e556 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	461a      	mov	r2, r3
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef8 <HAL_PCD_EP_DB_Transmit+0x7c0>)
 8004eba:	4013      	ands	r3, r2
 8004ebc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	f083 0310 	eor.w	r3, r3, #16
 8004ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec8:	f083 0320 	eor.w	r3, r3, #32
 8004ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	441a      	add	r2, r3
 8004edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ede:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ee2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ee6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3738      	adds	r7, #56	@ 0x38
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	07ff8f8f 	.word	0x07ff8f8f
 8004ef8:	07ff8fbf 	.word	0x07ff8fbf

08004efc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	460b      	mov	r3, r1
 8004f08:	817b      	strh	r3, [r7, #10]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004f0e:	897b      	ldrh	r3, [r7, #10]
 8004f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00c      	beq.n	8004f34 <HAL_PCDEx_PMAConfig+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f1a:	897b      	ldrh	r3, [r7, #10]
 8004f1c:	f003 0207 	and.w	r2, r3, #7
 8004f20:	4613      	mov	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4413      	add	r3, r2
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	3310      	adds	r3, #16
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3304      	adds	r3, #4
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	e00a      	b.n	8004f4a <HAL_PCDEx_PMAConfig+0x4e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f34:	897a      	ldrh	r2, [r7, #10]
 8004f36:	4613      	mov	r3, r2
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4413      	add	r3, r2
 8004f46:	3304      	adds	r3, #4
 8004f48:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004f4a:	893b      	ldrh	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d107      	bne.n	8004f60 <HAL_PCDEx_PMAConfig+0x64>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	2200      	movs	r2, #0
 8004f54:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	80da      	strh	r2, [r3, #6]
 8004f5e:	e00b      	b.n	8004f78 <HAL_PCDEx_PMAConfig+0x7c>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2201      	movs	r2, #1
 8004f64:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	b29a      	uxth	r2, r3
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	0c1b      	lsrs	r3, r3, #16
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  hpcd->LPM_State = LPM_L0;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 22cc 	strb.w	r2, [r3, #716]	@ 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa8:	f043 0201 	orr.w	r2, r3, #1
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	f043 0202 	orr.w	r2, r3, #2
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr

08004fca <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8004fe8:	4b05      	ldr	r3, [pc, #20]	@ (8005000 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fec:	4a04      	ldr	r2, [pc, #16]	@ (8005000 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004fee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004ff2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8004ff4:	bf00      	nop
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	44020800 	.word	0x44020800

08005004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pOscInitStruct)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b088      	sub	sp, #32
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  uint32_t temp_pllckselr;
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pOscInitStruct == NULL)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	f000 bc28 	b.w	8005868 <HAL_RCC_OscConfig+0x864>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pOscInitStruct->OscillatorType));
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005018:	4b94      	ldr	r3, [pc, #592]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f003 0318 	and.w	r3, r3, #24
 8005020:	61fb      	str	r3, [r7, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005022:	4b92      	ldr	r3, [pc, #584]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 8005024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	61bb      	str	r3, [r7, #24]

  /*----------------------------- CSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0310 	and.w	r3, r3, #16
 8005034:	2b00      	cmp	r3, #0
 8005036:	d05b      	beq.n	80050f0 <HAL_RCC_OscConfig+0xec>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(pOscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(pOscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	2b08      	cmp	r3, #8
 800503c:	d005      	beq.n	800504a <HAL_RCC_OscConfig+0x46>
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	2b18      	cmp	r3, #24
 8005042:	d114      	bne.n	800506e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d111      	bne.n	800506e <HAL_RCC_OscConfig+0x6a>
    {
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69db      	ldr	r3, [r3, #28]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d102      	bne.n	8005058 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	f000 bc08 	b.w	8005868 <HAL_RCC_OscConfig+0x864>

      /* Otherwise, just the calibration and CSI is allowed */
      else
      {
        /* Adjusts the Internal Low-power oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005058:	4b84      	ldr	r3, [pc, #528]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	4981      	ldr	r1, [pc, #516]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 8005068:	4313      	orrs	r3, r2
 800506a:	618b      	str	r3, [r1, #24]
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 800506c:	e040      	b.n	80050f0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d023      	beq.n	80050be <HAL_RCC_OscConfig+0xba>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005076:	4b7d      	ldr	r3, [pc, #500]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a7c      	ldr	r2, [pc, #496]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 800507c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005082:	f7fd fd85 	bl	8002b90 <HAL_GetTick>
 8005086:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 800508a:	f7fd fd81 	bl	8002b90 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e3e5      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 800509c:	4b73      	ldr	r3, [pc, #460]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0f0      	beq.n	800508a <HAL_RCC_OscConfig+0x86>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80050a8:	4b70      	ldr	r3, [pc, #448]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	041b      	lsls	r3, r3, #16
 80050b6:	496d      	ldr	r1, [pc, #436]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	618b      	str	r3, [r1, #24]
 80050bc:	e018      	b.n	80050f0 <HAL_RCC_OscConfig+0xec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80050be:	4b6b      	ldr	r3, [pc, #428]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a6a      	ldr	r2, [pc, #424]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80050c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ca:	f7fd fd61 	bl	8002b90 <HAL_GetTick>
 80050ce:	6178      	str	r0, [r7, #20]

        /* Wait till CSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80050d2:	f7fd fd5d 	bl	8002b90 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e3c1      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80050e4:	4b61      	ldr	r3, [pc, #388]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1f0      	bne.n	80050d2 <HAL_RCC_OscConfig+0xce>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0301 	and.w	r3, r3, #1
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 80a0 	beq.w	800523e <HAL_RCC_OscConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pOscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	2b10      	cmp	r3, #16
 8005102:	d005      	beq.n	8005110 <HAL_RCC_OscConfig+0x10c>
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	2b18      	cmp	r3, #24
 8005108:	d109      	bne.n	800511e <HAL_RCC_OscConfig+0x11a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b03      	cmp	r3, #3
 800510e:	d106      	bne.n	800511e <HAL_RCC_OscConfig+0x11a>
    {
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f040 8092 	bne.w	800523e <HAL_RCC_OscConfig+0x23a>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e3a4      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005126:	d106      	bne.n	8005136 <HAL_RCC_OscConfig+0x132>
 8005128:	4b50      	ldr	r3, [pc, #320]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a4f      	ldr	r2, [pc, #316]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 800512e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	e058      	b.n	80051e8 <HAL_RCC_OscConfig+0x1e4>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d112      	bne.n	8005164 <HAL_RCC_OscConfig+0x160>
 800513e:	4b4b      	ldr	r3, [pc, #300]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a4a      	ldr	r2, [pc, #296]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 8005144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	4b48      	ldr	r3, [pc, #288]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a47      	ldr	r2, [pc, #284]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 8005150:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	4b45      	ldr	r3, [pc, #276]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a44      	ldr	r2, [pc, #272]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 800515c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	e041      	b.n	80051e8 <HAL_RCC_OscConfig+0x1e4>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800516c:	d112      	bne.n	8005194 <HAL_RCC_OscConfig+0x190>
 800516e:	4b3f      	ldr	r3, [pc, #252]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a3e      	ldr	r2, [pc, #248]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 8005174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	4b3c      	ldr	r3, [pc, #240]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a3b      	ldr	r2, [pc, #236]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 8005180:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005184:	6013      	str	r3, [r2, #0]
 8005186:	4b39      	ldr	r3, [pc, #228]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a38      	ldr	r2, [pc, #224]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 800518c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e029      	b.n	80051e8 <HAL_RCC_OscConfig+0x1e4>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800519c:	d112      	bne.n	80051c4 <HAL_RCC_OscConfig+0x1c0>
 800519e:	4b33      	ldr	r3, [pc, #204]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a32      	ldr	r2, [pc, #200]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80051a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051a8:	6013      	str	r3, [r2, #0]
 80051aa:	4b30      	ldr	r3, [pc, #192]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a2f      	ldr	r2, [pc, #188]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80051b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051b4:	6013      	str	r3, [r2, #0]
 80051b6:	4b2d      	ldr	r3, [pc, #180]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2c      	ldr	r2, [pc, #176]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80051bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	e011      	b.n	80051e8 <HAL_RCC_OscConfig+0x1e4>
 80051c4:	4b29      	ldr	r3, [pc, #164]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a28      	ldr	r2, [pc, #160]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80051ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	4b26      	ldr	r3, [pc, #152]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a25      	ldr	r2, [pc, #148]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80051d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	4b23      	ldr	r3, [pc, #140]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a22      	ldr	r2, [pc, #136]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 80051e2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80051e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pOscInitStruct->HSEState != RCC_HSE_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d013      	beq.n	8005218 <HAL_RCC_OscConfig+0x214>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fd fcce 	bl	8002b90 <HAL_GetTick>
 80051f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80051f8:	f7fd fcca 	bl	8002b90 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b64      	cmp	r3, #100	@ 0x64
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e32e      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800520a:	4b18      	ldr	r3, [pc, #96]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0x1f4>
 8005216:	e012      	b.n	800523e <HAL_RCC_OscConfig+0x23a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005218:	f7fd fcba 	bl	8002b90 <HAL_GetTick>
 800521c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x22e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005220:	f7fd fcb6 	bl	8002b90 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b64      	cmp	r3, #100	@ 0x64
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x22e>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e31a      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005232:	4b0e      	ldr	r3, [pc, #56]	@ (800526c <HAL_RCC_OscConfig+0x268>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1f0      	bne.n	8005220 <HAL_RCC_OscConfig+0x21c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 809a 	beq.w	8005380 <HAL_RCC_OscConfig+0x37c>
    assert_param(IS_RCC_HSI(pOscInitStruct->HSIState));
    assert_param(IS_RCC_HSIDIV(pOscInitStruct->HSIDiv));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pOscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_RCC_OscConfig+0x25a>
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	2b18      	cmp	r3, #24
 8005256:	d149      	bne.n	80052ec <HAL_RCC_OscConfig+0x2e8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d146      	bne.n	80052ec <HAL_RCC_OscConfig+0x2e8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d104      	bne.n	8005270 <HAL_RCC_OscConfig+0x26c>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e2fe      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
 800526a:	bf00      	nop
 800526c:	44020c00 	.word	0x44020c00
      /* Otherwise, HSI calibration and division may be allowed */
      else
      {

        /* HSI division is allowed if HSI is used as system clock */
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d11c      	bne.n	80052b0 <HAL_RCC_OscConfig+0x2ac>
        {
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005276:	4b9a      	ldr	r3, [pc, #616]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0218 	and.w	r2, r3, #24
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	429a      	cmp	r2, r3
 8005284:	d014      	beq.n	80052b0 <HAL_RCC_OscConfig+0x2ac>
          {
            /* Adjust the HSI division factor */
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005286:	4b96      	ldr	r3, [pc, #600]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f023 0218 	bic.w	r2, r3, #24
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	4993      	ldr	r1, [pc, #588]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005294:	4313      	orrs	r3, r2
 8005296:	600b      	str	r3, [r1, #0]

            /* Update the SystemCoreClock global variable with new HSI value  */
            (void) HAL_RCC_GetHCLKFreq();
 8005298:	f000 fdd0 	bl	8005e3c <HAL_RCC_GetHCLKFreq>

            /* Configure the source of time base considering new system clocks settings*/
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800529c:	4b91      	ldr	r3, [pc, #580]	@ (80054e4 <HAL_RCC_OscConfig+0x4e0>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4618      	mov	r0, r3
 80052a2:	f7fd fbeb 	bl	8002a7c <HAL_InitTick>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_RCC_OscConfig+0x2ac>
            {
              return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e2db      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
            }
          }
        }

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b0:	f7fd fc6e 	bl	8002b90 <HAL_GetTick>
 80052b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052b6:	e008      	b.n	80052ca <HAL_RCC_OscConfig+0x2c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80052b8:	f7fd fc6a 	bl	8002b90 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d901      	bls.n	80052ca <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80052c6:	2303      	movs	r3, #3
 80052c8:	e2ce      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80052ca:	4b85      	ldr	r3, [pc, #532]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0302 	and.w	r3, r3, #2
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d0f0      	beq.n	80052b8 <HAL_RCC_OscConfig+0x2b4>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80052d6:	4b82      	ldr	r3, [pc, #520]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	041b      	lsls	r3, r3, #16
 80052e4:	497e      	ldr	r1, [pc, #504]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	610b      	str	r3, [r1, #16]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80052ea:	e049      	b.n	8005380 <HAL_RCC_OscConfig+0x37c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d02c      	beq.n	800534e <HAL_RCC_OscConfig+0x34a>
      {
        /* Adjust the HSI division factor */
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80052f4:	4b7a      	ldr	r3, [pc, #488]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f023 0218 	bic.w	r2, r3, #24
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	4977      	ldr	r1, [pc, #476]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005302:	4313      	orrs	r3, r2
 8005304:	600b      	str	r3, [r1, #0]

        /* Enable the HSI oscillator */
        __HAL_RCC_HSI_ENABLE();
 8005306:	4b76      	ldr	r3, [pc, #472]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a75      	ldr	r2, [pc, #468]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005312:	f7fd fc3d 	bl	8002b90 <HAL_GetTick>
 8005316:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x328>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800531a:	f7fd fc39 	bl	8002b90 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x328>
          {
            return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e29d      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800532c:	4b6c      	ldr	r3, [pc, #432]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0f0      	beq.n	800531a <HAL_RCC_OscConfig+0x316>
          }
        }

        /* Adjust the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005338:	4b69      	ldr	r3, [pc, #420]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	041b      	lsls	r3, r3, #16
 8005346:	4966      	ldr	r1, [pc, #408]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005348:	4313      	orrs	r3, r2
 800534a:	610b      	str	r3, [r1, #16]
 800534c:	e018      	b.n	8005380 <HAL_RCC_OscConfig+0x37c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800534e:	4b64      	ldr	r3, [pc, #400]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a63      	ldr	r2, [pc, #396]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535a:	f7fd fc19 	bl	8002b90 <HAL_GetTick>
 800535e:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005360:	e008      	b.n	8005374 <HAL_RCC_OscConfig+0x370>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005362:	f7fd fc15 	bl	8002b90 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d901      	bls.n	8005374 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e279      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005374:	4b5a      	ldr	r3, [pc, #360]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1f0      	bne.n	8005362 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d03c      	beq.n	8005406 <HAL_RCC_OscConfig+0x402>
    assert_param(IS_RCC_LSI(pOscInitStruct->LSIState));

    /* Update LSI configuration in Backup Domain control register    */

    /* Check the LSI State */
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d01c      	beq.n	80053ce <HAL_RCC_OscConfig+0x3ca>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005394:	4b52      	ldr	r3, [pc, #328]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005396:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800539a:	4a51      	ldr	r2, [pc, #324]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 800539c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053a4:	f7fd fbf4 	bl	8002b90 <HAL_GetTick>
 80053a8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x3ba>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80053ac:	f7fd fbf0 	bl	8002b90 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e254      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80053be:	4b48      	ldr	r3, [pc, #288]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80053c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0ef      	beq.n	80053ac <HAL_RCC_OscConfig+0x3a8>
 80053cc:	e01b      	b.n	8005406 <HAL_RCC_OscConfig+0x402>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053ce:	4b44      	ldr	r3, [pc, #272]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80053d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053d4:	4a42      	ldr	r2, [pc, #264]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80053d6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053de:	f7fd fbd7 	bl	8002b90 <HAL_GetTick>
 80053e2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80053e4:	e008      	b.n	80053f8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80053e6:	f7fd fbd3 	bl	8002b90 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e237      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80053f8:	4b39      	ldr	r3, [pc, #228]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80053fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80053fe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1ef      	bne.n	80053e6 <HAL_RCC_OscConfig+0x3e2>
      }
    }

  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0304 	and.w	r3, r3, #4
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80d2 	beq.w	80055b8 <HAL_RCC_OscConfig+0x5b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pOscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain */
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005414:	4b34      	ldr	r3, [pc, #208]	@ (80054e8 <HAL_RCC_OscConfig+0x4e4>)
 8005416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d118      	bne.n	8005452 <HAL_RCC_OscConfig+0x44e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005420:	4b31      	ldr	r3, [pc, #196]	@ (80054e8 <HAL_RCC_OscConfig+0x4e4>)
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	4a30      	ldr	r2, [pc, #192]	@ (80054e8 <HAL_RCC_OscConfig+0x4e4>)
 8005426:	f043 0301 	orr.w	r3, r3, #1
 800542a:	6253      	str	r3, [r2, #36]	@ 0x24

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800542c:	f7fd fbb0 	bl	8002b90 <HAL_GetTick>
 8005430:	6178      	str	r0, [r7, #20]

      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005434:	f7fd fbac 	bl	8002b90 <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e210      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005446:	4b28      	ldr	r3, [pc, #160]	@ (80054e8 <HAL_RCC_OscConfig+0x4e4>)
 8005448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f0      	beq.n	8005434 <HAL_RCC_OscConfig+0x430>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d108      	bne.n	800546c <HAL_RCC_OscConfig+0x468>
 800545a:	4b21      	ldr	r3, [pc, #132]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 800545c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005460:	4a1f      	ldr	r2, [pc, #124]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005462:	f043 0301 	orr.w	r3, r3, #1
 8005466:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800546a:	e074      	b.n	8005556 <HAL_RCC_OscConfig+0x552>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d118      	bne.n	80054a6 <HAL_RCC_OscConfig+0x4a2>
 8005474:	4b1a      	ldr	r3, [pc, #104]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005476:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800547a:	4a19      	ldr	r2, [pc, #100]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 800547c:	f023 0301 	bic.w	r3, r3, #1
 8005480:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005484:	4b16      	ldr	r3, [pc, #88]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005486:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800548a:	4a15      	ldr	r2, [pc, #84]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 800548c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005490:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005494:	4b12      	ldr	r3, [pc, #72]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 8005496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800549a:	4a11      	ldr	r2, [pc, #68]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 800549c:	f023 0304 	bic.w	r3, r3, #4
 80054a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80054a4:	e057      	b.n	8005556 <HAL_RCC_OscConfig+0x552>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	2b05      	cmp	r3, #5
 80054ac:	d11e      	bne.n	80054ec <HAL_RCC_OscConfig+0x4e8>
 80054ae:	4b0c      	ldr	r3, [pc, #48]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80054b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054b4:	4a0a      	ldr	r2, [pc, #40]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80054b6:	f043 0304 	orr.w	r3, r3, #4
 80054ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80054be:	4b08      	ldr	r3, [pc, #32]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80054c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054c4:	4a06      	ldr	r2, [pc, #24]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80054c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054ca:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80054ce:	4b04      	ldr	r3, [pc, #16]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80054d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054d4:	4a02      	ldr	r2, [pc, #8]	@ (80054e0 <HAL_RCC_OscConfig+0x4dc>)
 80054d6:	f043 0301 	orr.w	r3, r3, #1
 80054da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80054de:	e03a      	b.n	8005556 <HAL_RCC_OscConfig+0x552>
 80054e0:	44020c00 	.word	0x44020c00
 80054e4:	20000024 	.word	0x20000024
 80054e8:	44020800 	.word	0x44020800
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b85      	cmp	r3, #133	@ 0x85
 80054f2:	d118      	bne.n	8005526 <HAL_RCC_OscConfig+0x522>
 80054f4:	4ba2      	ldr	r3, [pc, #648]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 80054f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80054fa:	4aa1      	ldr	r2, [pc, #644]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 80054fc:	f043 0304 	orr.w	r3, r3, #4
 8005500:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005504:	4b9e      	ldr	r3, [pc, #632]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800550a:	4a9d      	ldr	r2, [pc, #628]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 800550c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005510:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005514:	4b9a      	ldr	r3, [pc, #616]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800551a:	4a99      	ldr	r2, [pc, #612]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005524:	e017      	b.n	8005556 <HAL_RCC_OscConfig+0x552>
 8005526:	4b96      	ldr	r3, [pc, #600]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800552c:	4a94      	ldr	r2, [pc, #592]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 800552e:	f023 0301 	bic.w	r3, r3, #1
 8005532:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005536:	4b92      	ldr	r3, [pc, #584]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800553c:	4a90      	ldr	r2, [pc, #576]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 800553e:	f023 0304 	bic.w	r3, r3, #4
 8005542:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005546:	4b8e      	ldr	r3, [pc, #568]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800554c:	4a8c      	ldr	r2, [pc, #560]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 800554e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005552:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

    /* Check the LSE State */
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d016      	beq.n	800558c <HAL_RCC_OscConfig+0x588>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555e:	f7fd fb17 	bl	8002b90 <HAL_GetTick>
 8005562:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005564:	e00a      	b.n	800557c <HAL_RCC_OscConfig+0x578>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005566:	f7fd fb13 	bl	8002b90 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005574:	4293      	cmp	r3, r2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e175      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800557c:	4b80      	ldr	r3, [pc, #512]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 800557e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005582:	f003 0302 	and.w	r3, r3, #2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0ed      	beq.n	8005566 <HAL_RCC_OscConfig+0x562>
 800558a:	e015      	b.n	80055b8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558c:	f7fd fb00 	bl	8002b90 <HAL_GetTick>
 8005590:	6178      	str	r0, [r7, #20]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005592:	e00a      	b.n	80055aa <HAL_RCC_OscConfig+0x5a6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005594:	f7fd fafc 	bl	8002b90 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x5a6>
        {
          return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e15e      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055aa:	4b75      	ldr	r3, [pc, #468]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 80055ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1ed      	bne.n	8005594 <HAL_RCC_OscConfig+0x590>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d036      	beq.n	8005632 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pOscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d019      	beq.n	8005600 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055cc:	4b6c      	ldr	r3, [pc, #432]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a6b      	ldr	r2, [pc, #428]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 80055d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055d6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d8:	f7fd fada 	bl	8002b90 <HAL_GetTick>
 80055dc:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80055e0:	f7fd fad6 	bl	8002b90 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e13a      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80055f2:	4b63      	ldr	r3, [pc, #396]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x5dc>
 80055fe:	e018      	b.n	8005632 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005600:	4b5f      	ldr	r3, [pc, #380]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a5e      	ldr	r2, [pc, #376]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005606:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800560a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800560c:	f7fd fac0 	bl	8002b90 <HAL_GetTick>
 8005610:	6178      	str	r0, [r7, #20]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x622>
      {
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005614:	f7fd fabc 	bl	8002b90 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e120      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005626:	4b56      	ldr	r3, [pc, #344]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1f0      	bne.n	8005614 <HAL_RCC_OscConfig+0x610>

  /*-------------------------------- PLL1 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pOscInitStruct->PLL.PLLState));

  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005636:	2b00      	cmp	r3, #0
 8005638:	f000 8115 	beq.w	8005866 <HAL_RCC_OscConfig+0x862>
  {
    /* Check if the PLL1 is used as system clock or not */
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	2b18      	cmp	r3, #24
 8005640:	f000 80af 	beq.w	80057a2 <HAL_RCC_OscConfig+0x79e>
    {
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005648:	2b02      	cmp	r3, #2
 800564a:	f040 8086 	bne.w	800575a <HAL_RCC_OscConfig+0x756>
        assert_param(IS_RCC_PLL1_DIVP_VALUE(pOscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL1_DIVQ_VALUE(pOscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL1_DIVR_VALUE(pOscInitStruct->PLL.PLLR));

        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800564e:	4b4c      	ldr	r3, [pc, #304]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a4b      	ldr	r2, [pc, #300]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005654:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800565a:	f7fd fa99 	bl	8002b90 <HAL_GetTick>
 800565e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005660:	e008      	b.n	8005674 <HAL_RCC_OscConfig+0x670>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005662:	f7fd fa95 	bl	8002b90 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x670>
          {
            return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e0f9      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005674:	4b42      	ldr	r3, [pc, #264]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d1f0      	bne.n	8005662 <HAL_RCC_OscConfig+0x65e>
          }
        }

        /* Configure the PLL1 clock source, multiplication and division factors. */
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8005680:	4b3f      	ldr	r3, [pc, #252]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005684:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005688:	f023 0303 	bic.w	r3, r3, #3
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005694:	0212      	lsls	r2, r2, #8
 8005696:	430a      	orrs	r2, r1
 8005698:	4939      	ldr	r1, [pc, #228]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 800569a:	4313      	orrs	r3, r2
 800569c:	628b      	str	r3, [r1, #40]	@ 0x28
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056a2:	3b01      	subs	r3, #1
 80056a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ac:	3b01      	subs	r3, #1
 80056ae:	025b      	lsls	r3, r3, #9
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b8:	3b01      	subs	r3, #1
 80056ba:	041b      	lsls	r3, r3, #16
 80056bc:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80056c0:	431a      	orrs	r2, r3
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c6:	3b01      	subs	r3, #1
 80056c8:	061b      	lsls	r3, r3, #24
 80056ca:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80056ce:	492c      	ldr	r1, [pc, #176]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	634b      	str	r3, [r1, #52]	@ 0x34
                              pOscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 80056d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	4a29      	ldr	r2, [pc, #164]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 80056da:	f023 0310 	bic.w	r3, r3, #16
 80056de:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056e4:	4a26      	ldr	r2, [pc, #152]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80056ea:	4b25      	ldr	r3, [pc, #148]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 80056ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ee:	4a24      	ldr	r2, [pc, #144]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 80056f0:	f043 0310 	orr.w	r3, r3, #16
 80056f4:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCIRGE_VALUE(pOscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 80056f6:	4b22      	ldr	r3, [pc, #136]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 80056f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fa:	f023 020c 	bic.w	r2, r3, #12
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005702:	491f      	ldr	r1, [pc, #124]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005704:	4313      	orrs	r3, r2
 8005706:	628b      	str	r3, [r1, #40]	@ 0x28

        assert_param(IS_RCC_PLL1_VCORGE_VALUE(pOscInitStruct->PLL.PLLVCOSEL));

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005708:	4b1d      	ldr	r3, [pc, #116]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 800570a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570c:	f023 0220 	bic.w	r2, r3, #32
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005714:	491a      	ldr	r1, [pc, #104]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005716:	4313      	orrs	r3, r2
 8005718:	628b      	str	r3, [r1, #40]	@ 0x28

        /* Enable PLL1 System Clock output. */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800571a:	4b19      	ldr	r3, [pc, #100]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 800571c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800571e:	4a18      	ldr	r2, [pc, #96]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005724:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Enable the PLL1. */
        __HAL_RCC_PLL1_ENABLE();
 8005726:	4b16      	ldr	r3, [pc, #88]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a15      	ldr	r2, [pc, #84]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 800572c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005730:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005732:	f7fd fa2d 	bl	8002b90 <HAL_GetTick>
 8005736:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x748>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800573a:	f7fd fa29 	bl	8002b90 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x748>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e08d      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800574c:	4b0c      	ldr	r3, [pc, #48]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0f0      	beq.n	800573a <HAL_RCC_OscConfig+0x736>
 8005758:	e085      	b.n	8005866 <HAL_RCC_OscConfig+0x862>
        }
      }
      else
      {
        /* Disable the PLL1. */
        __HAL_RCC_PLL1_DISABLE();
 800575a:	4b09      	ldr	r3, [pc, #36]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a08      	ldr	r2, [pc, #32]	@ (8005780 <HAL_RCC_OscConfig+0x77c>)
 8005760:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005766:	f7fd fa13 	bl	8002b90 <HAL_GetTick>
 800576a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL1 is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800576c:	e00a      	b.n	8005784 <HAL_RCC_OscConfig+0x780>
        {
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 800576e:	f7fd fa0f 	bl	8002b90 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	2b02      	cmp	r3, #2
 800577a:	d903      	bls.n	8005784 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800577c:	2303      	movs	r3, #3
 800577e:	e073      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
 8005780:	44020c00 	.word	0x44020c00
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005784:	4b3a      	ldr	r3, [pc, #232]	@ (8005870 <HAL_RCC_OscConfig+0x86c>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1ee      	bne.n	800576e <HAL_RCC_OscConfig+0x76a>
          }
        }

        /* Unselect PLL1 clock source and disable all PLL1 outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005790:	4b37      	ldr	r3, [pc, #220]	@ (8005870 <HAL_RCC_OscConfig+0x86c>)
 8005792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005794:	4a36      	ldr	r2, [pc, #216]	@ (8005870 <HAL_RCC_OscConfig+0x86c>)
 8005796:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800579a:	f023 0303 	bic.w	r3, r3, #3
 800579e:	6293      	str	r3, [r2, #40]	@ 0x28
 80057a0:	e061      	b.n	8005866 <HAL_RCC_OscConfig+0x862>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80057a2:	4b33      	ldr	r3, [pc, #204]	@ (8005870 <HAL_RCC_OscConfig+0x86c>)
 80057a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80057a8:	4b31      	ldr	r3, [pc, #196]	@ (8005870 <HAL_RCC_OscConfig+0x86c>)
 80057aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ac:	60fb      	str	r3, [r7, #12]
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d031      	beq.n	800581a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	f003 0203 	and.w	r2, r3, #3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d12a      	bne.n	800581a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	0a1b      	lsrs	r3, r3, #8
 80057c8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d122      	bne.n	800581a <HAL_RCC_OscConfig+0x816>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057de:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d11a      	bne.n	800581a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	0a5b      	lsrs	r3, r3, #9
 80057e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d111      	bne.n	800581a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	0c1b      	lsrs	r3, r3, #16
 80057fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005802:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005804:	429a      	cmp	r2, r3
 8005806:	d108      	bne.n	800581a <HAL_RCC_OscConfig+0x816>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	0e1b      	lsrs	r3, r3, #24
 800580c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005816:	429a      	cmp	r2, r3
 8005818:	d001      	beq.n	800581e <HAL_RCC_OscConfig+0x81a>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e024      	b.n	8005868 <HAL_RCC_OscConfig+0x864>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800581e:	4b14      	ldr	r3, [pc, #80]	@ (8005870 <HAL_RCC_OscConfig+0x86c>)
 8005820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005822:	08db      	lsrs	r3, r3, #3
 8005824:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pOscInitStruct->PLL.PLLFRACN))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800582c:	429a      	cmp	r2, r3
 800582e:	d01a      	beq.n	8005866 <HAL_RCC_OscConfig+0x862>
      {
        assert_param(IS_RCC_PLL1_FRACN_VALUE(pOscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN . */
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005830:	4b0f      	ldr	r3, [pc, #60]	@ (8005870 <HAL_RCC_OscConfig+0x86c>)
 8005832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005834:	4a0e      	ldr	r2, [pc, #56]	@ (8005870 <HAL_RCC_OscConfig+0x86c>)
 8005836:	f023 0310 	bic.w	r3, r3, #16
 800583a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800583c:	f7fd f9a8 	bl	8002b90 <HAL_GetTick>
 8005840:	6178      	str	r0, [r7, #20]

        /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8005842:	bf00      	nop
 8005844:	f7fd f9a4 	bl	8002b90 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	4293      	cmp	r3, r2
 800584e:	d0f9      	beq.n	8005844 <HAL_RCC_OscConfig+0x840>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005854:	4a06      	ldr	r2, [pc, #24]	@ (8005870 <HAL_RCC_OscConfig+0x86c>)
 8005856:	00db      	lsls	r3, r3, #3
 8005858:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800585a:	4b05      	ldr	r3, [pc, #20]	@ (8005870 <HAL_RCC_OscConfig+0x86c>)
 800585c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585e:	4a04      	ldr	r2, [pc, #16]	@ (8005870 <HAL_RCC_OscConfig+0x86c>)
 8005860:	f043 0310 	orr.w	r3, r3, #16
 8005864:	6293      	str	r3, [r2, #40]	@ 0x28
      }

    }
  }
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3720      	adds	r7, #32
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	44020c00 	.word	0x44020c00

08005874 <HAL_RCC_ClockConfig>:
  *         currently used as system clock source.
  *
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *pClkInitStruct, uint32_t FLatency)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pClkInitStruct == NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e19e      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x352>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005888:	4b83      	ldr	r3, [pc, #524]	@ (8005a98 <HAL_RCC_ClockConfig+0x224>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d910      	bls.n	80058b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005896:	4b80      	ldr	r3, [pc, #512]	@ (8005a98 <HAL_RCC_ClockConfig+0x224>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 020f 	bic.w	r2, r3, #15
 800589e:	497e      	ldr	r1, [pc, #504]	@ (8005a98 <HAL_RCC_ClockConfig+0x224>)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a6:	4b7c      	ldr	r3, [pc, #496]	@ (8005a98 <HAL_RCC_ClockConfig+0x224>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e186      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0310 	and.w	r3, r3, #16
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d012      	beq.n	80058ea <HAL_RCC_ClockConfig+0x76>
  {
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	695a      	ldr	r2, [r3, #20]
 80058c8:	4b74      	ldr	r3, [pc, #464]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	0a1b      	lsrs	r3, r3, #8
 80058ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d909      	bls.n	80058ea <HAL_RCC_ClockConfig+0x76>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80058d6:	4b71      	ldr	r3, [pc, #452]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	021b      	lsls	r3, r3, #8
 80058e4:	496d      	ldr	r1, [pc, #436]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	620b      	str	r3, [r1, #32]
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d012      	beq.n	800591c <HAL_RCC_ClockConfig+0xa8>
  {
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691a      	ldr	r2, [r3, #16]
 80058fa:	4b68      	ldr	r3, [pc, #416]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	091b      	lsrs	r3, r3, #4
 8005900:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005904:	429a      	cmp	r2, r3
 8005906:	d909      	bls.n	800591c <HAL_RCC_ClockConfig+0xa8>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005908:	4b64      	ldr	r3, [pc, #400]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	4961      	ldr	r1, [pc, #388]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 8005918:	4313      	orrs	r3, r2
 800591a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d010      	beq.n	800594a <HAL_RCC_ClockConfig+0xd6>
  {
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	4b5b      	ldr	r3, [pc, #364]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005934:	429a      	cmp	r2, r3
 8005936:	d908      	bls.n	800594a <HAL_RCC_ClockConfig+0xd6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005938:	4b58      	ldr	r3, [pc, #352]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	4955      	ldr	r1, [pc, #340]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 8005946:	4313      	orrs	r3, r2
 8005948:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d010      	beq.n	8005978 <HAL_RCC_ClockConfig+0x104>
  {
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	4b50      	ldr	r3, [pc, #320]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 800595c:	6a1b      	ldr	r3, [r3, #32]
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	429a      	cmp	r2, r3
 8005964:	d908      	bls.n	8005978 <HAL_RCC_ClockConfig+0x104>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005966:	4b4d      	ldr	r3, [pc, #308]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f023 020f 	bic.w	r2, r3, #15
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	494a      	ldr	r1, [pc, #296]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 8005974:	4313      	orrs	r3, r2
 8005976:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 8093 	beq.w	8005aac <HAL_RCC_ClockConfig+0x238>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b03      	cmp	r3, #3
 800598c:	d107      	bne.n	800599e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800598e:	4b43      	ldr	r3, [pc, #268]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d121      	bne.n	80059de <HAL_RCC_ClockConfig+0x16a>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e113      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x352>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d107      	bne.n	80059b6 <HAL_RCC_ClockConfig+0x142>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059a6:	4b3d      	ldr	r3, [pc, #244]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d115      	bne.n	80059de <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e107      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x352>
        }
      }
      /* CSI is selected as System Clock Source */
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d107      	bne.n	80059ce <HAL_RCC_ClockConfig+0x15a>
      {
        /* Check the CSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80059be:	4b37      	ldr	r3, [pc, #220]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e0fb      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x352>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059ce:	4b33      	ldr	r3, [pc, #204]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_RCC_ClockConfig+0x16a>
        {
          return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e0f3      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x352>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80059de:	4b2f      	ldr	r3, [pc, #188]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	f023 0203 	bic.w	r2, r3, #3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	492c      	ldr	r1, [pc, #176]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	61cb      	str	r3, [r1, #28]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f0:	f7fd f8ce 	bl	8002b90 <HAL_GetTick>
 80059f4:	60f8      	str	r0, [r7, #12]

    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2b03      	cmp	r3, #3
 80059fc:	d112      	bne.n	8005a24 <HAL_RCC_ClockConfig+0x1b0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059fe:	e00a      	b.n	8005a16 <HAL_RCC_ClockConfig+0x1a2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005a00:	f7fd f8c6 	bl	8002b90 <HAL_GetTick>
 8005a04:	4602      	mov	r2, r0
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	1ad3      	subs	r3, r2, r3
 8005a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_ClockConfig+0x1a2>
        {
          return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e0d7      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x352>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a16:	4b21      	ldr	r3, [pc, #132]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f003 0318 	and.w	r3, r3, #24
 8005a1e:	2b18      	cmp	r3, #24
 8005a20:	d1ee      	bne.n	8005a00 <HAL_RCC_ClockConfig+0x18c>
 8005a22:	e043      	b.n	8005aac <HAL_RCC_ClockConfig+0x238>
        }
      }
    }
    else
    {
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b02      	cmp	r3, #2
 8005a2a:	d112      	bne.n	8005a52 <HAL_RCC_ClockConfig+0x1de>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a2c:	e00a      	b.n	8005a44 <HAL_RCC_ClockConfig+0x1d0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005a2e:	f7fd f8af 	bl	8002b90 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d901      	bls.n	8005a44 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e0c0      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a44:	4b15      	ldr	r3, [pc, #84]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 8005a46:	69db      	ldr	r3, [r3, #28]
 8005a48:	f003 0318 	and.w	r3, r3, #24
 8005a4c:	2b10      	cmp	r3, #16
 8005a4e:	d1ee      	bne.n	8005a2e <HAL_RCC_ClockConfig+0x1ba>
 8005a50:	e02c      	b.n	8005aac <HAL_RCC_ClockConfig+0x238>
          }
        }
      }
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d122      	bne.n	8005aa0 <HAL_RCC_ClockConfig+0x22c>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005a5a:	e00a      	b.n	8005a72 <HAL_RCC_ClockConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005a5c:	f7fd f898 	bl	8002b90 <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_ClockConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e0a9      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x352>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 8005a72:	4b0a      	ldr	r3, [pc, #40]	@ (8005a9c <HAL_RCC_ClockConfig+0x228>)
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f003 0318 	and.w	r3, r3, #24
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d1ee      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x1e8>
 8005a7e:	e015      	b.n	8005aac <HAL_RCC_ClockConfig+0x238>
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005a80:	f7fd f886 	bl	8002b90 <HAL_GetTick>
 8005a84:	4602      	mov	r2, r0
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d906      	bls.n	8005aa0 <HAL_RCC_ClockConfig+0x22c>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e097      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x352>
 8005a96:	bf00      	nop
 8005a98:	40022000 	.word	0x40022000
 8005a9c:	44020c00 	.word	0x44020c00
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005aa0:	4b4b      	ldr	r3, [pc, #300]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005aa2:	69db      	ldr	r3, [r3, #28]
 8005aa4:	f003 0318 	and.w	r3, r3, #24
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e9      	bne.n	8005a80 <HAL_RCC_ClockConfig+0x20c>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d010      	beq.n	8005ada <HAL_RCC_ClockConfig+0x266>
  {
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	4b44      	ldr	r3, [pc, #272]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d208      	bcs.n	8005ada <HAL_RCC_ClockConfig+0x266>
    {
      assert_param(IS_RCC_HCLK(pClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005ac8:	4b41      	ldr	r3, [pc, #260]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f023 020f 	bic.w	r2, r3, #15
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	493e      	ldr	r1, [pc, #248]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ada:	4b3e      	ldr	r3, [pc, #248]	@ (8005bd4 <HAL_RCC_ClockConfig+0x360>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 030f 	and.w	r3, r3, #15
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d210      	bcs.n	8005b0a <HAL_RCC_ClockConfig+0x296>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ae8:	4b3a      	ldr	r3, [pc, #232]	@ (8005bd4 <HAL_RCC_ClockConfig+0x360>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f023 020f 	bic.w	r2, r3, #15
 8005af0:	4938      	ldr	r1, [pc, #224]	@ (8005bd4 <HAL_RCC_ClockConfig+0x360>)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af8:	4b36      	ldr	r3, [pc, #216]	@ (8005bd4 <HAL_RCC_ClockConfig+0x360>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 030f 	and.w	r3, r3, #15
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d001      	beq.n	8005b0a <HAL_RCC_ClockConfig+0x296>
    {
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e05d      	b.n	8005bc6 <HAL_RCC_ClockConfig+0x352>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d010      	beq.n	8005b38 <HAL_RCC_ClockConfig+0x2c4>
  {
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	4b2d      	ldr	r3, [pc, #180]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005b1c:	6a1b      	ldr	r3, [r3, #32]
 8005b1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d208      	bcs.n	8005b38 <HAL_RCC_ClockConfig+0x2c4>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005b26:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	4927      	ldr	r1, [pc, #156]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005b34:	4313      	orrs	r3, r2
 8005b36:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0308 	and.w	r3, r3, #8
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d012      	beq.n	8005b6a <HAL_RCC_ClockConfig+0x2f6>
  {
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691a      	ldr	r2, [r3, #16]
 8005b48:	4b21      	ldr	r3, [pc, #132]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	091b      	lsrs	r3, r3, #4
 8005b4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d209      	bcs.n	8005b6a <HAL_RCC_ClockConfig+0x2f6>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005b56:	4b1e      	ldr	r3, [pc, #120]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	011b      	lsls	r3, r3, #4
 8005b64:	491a      	ldr	r1, [pc, #104]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0310 	and.w	r3, r3, #16
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d012      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x328>
  {
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	4b15      	ldr	r3, [pc, #84]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	0a1b      	lsrs	r3, r3, #8
 8005b80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d209      	bcs.n	8005b9c <HAL_RCC_ClockConfig+0x328>
    {
      assert_param(IS_RCC_PCLK(pClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005b88:	4b11      	ldr	r3, [pc, #68]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	490e      	ldr	r1, [pc, #56]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005b9c:	f000 f822 	bl	8005be4 <HAL_RCC_GetSysClockFreq>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <HAL_RCC_ClockConfig+0x35c>)
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	490b      	ldr	r1, [pc, #44]	@ (8005bd8 <HAL_RCC_ClockConfig+0x364>)
 8005bac:	5ccb      	ldrb	r3, [r1, r3]
 8005bae:	fa22 f303 	lsr.w	r3, r2, r3
 8005bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8005bdc <HAL_RCC_ClockConfig+0x368>)
 8005bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8005be0 <HAL_RCC_ClockConfig+0x36c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fc ff5e 	bl	8002a7c <HAL_InitTick>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	72fb      	strb	r3, [r7, #11]

  return halstatus;
 8005bc4:	7afb      	ldrb	r3, [r7, #11]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	44020c00 	.word	0x44020c00
 8005bd4:	40022000 	.word	0x40022000
 8005bd8:	08012ae0 	.word	0x08012ae0
 8005bdc:	20000004 	.word	0x20000004
 8005be0:	20000024 	.word	0x20000024

08005be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b089      	sub	sp, #36	@ 0x24
 8005be8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
  uint32_t hsivalue;
  float_t fracn1;
  float_t pllvco;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005bea:	4b8c      	ldr	r3, [pc, #560]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	f003 0318 	and.w	r3, r3, #24
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d102      	bne.n	8005bfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005bf6:	4b8a      	ldr	r3, [pc, #552]	@ (8005e20 <HAL_RCC_GetSysClockFreq+0x23c>)
 8005bf8:	61fb      	str	r3, [r7, #28]
 8005bfa:	e107      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x228>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bfc:	4b87      	ldr	r3, [pc, #540]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	f003 0318 	and.w	r3, r3, #24
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d112      	bne.n	8005c2e <HAL_RCC_GetSysClockFreq+0x4a>
  {
    /* HSI used as system clock source */
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005c08:	4b84      	ldr	r3, [pc, #528]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0320 	and.w	r3, r3, #32
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d009      	beq.n	8005c28 <HAL_RCC_GetSysClockFreq+0x44>
    {
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005c14:	4b81      	ldr	r3, [pc, #516]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	08db      	lsrs	r3, r3, #3
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	4a81      	ldr	r2, [pc, #516]	@ (8005e24 <HAL_RCC_GetSysClockFreq+0x240>)
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
 8005c24:	61fb      	str	r3, [r7, #28]
 8005c26:	e0f1      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005c28:	4b7e      	ldr	r3, [pc, #504]	@ (8005e24 <HAL_RCC_GetSysClockFreq+0x240>)
 8005c2a:	61fb      	str	r3, [r7, #28]
 8005c2c:	e0ee      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x228>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c2e:	4b7b      	ldr	r3, [pc, #492]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f003 0318 	and.w	r3, r3, #24
 8005c36:	2b10      	cmp	r3, #16
 8005c38:	d102      	bne.n	8005c40 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c3a:	4b7b      	ldr	r3, [pc, #492]	@ (8005e28 <HAL_RCC_GetSysClockFreq+0x244>)
 8005c3c:	61fb      	str	r3, [r7, #28]
 8005c3e:	e0e5      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c40:	4b76      	ldr	r3, [pc, #472]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f003 0318 	and.w	r3, r3, #24
 8005c48:	2b18      	cmp	r3, #24
 8005c4a:	f040 80dd 	bne.w	8005e08 <HAL_RCC_GetSysClockFreq+0x224>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005c4e:	4b73      	ldr	r3, [pc, #460]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c52:	f003 0303 	and.w	r3, r3, #3
 8005c56:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005c58:	4b70      	ldr	r3, [pc, #448]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c62:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005c64:	4b6d      	ldr	r3, [pc, #436]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005c70:	4b6a      	ldr	r3, [pc, #424]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8005c74:	08db      	lsrs	r3, r3, #3
 8005c76:	f3c3 030c 	ubfx	r3, r3, #0, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	fb02 f303 	mul.w	r3, r2, r3
 8005c80:	ee07 3a90 	vmov	s15, r3
 8005c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c88:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 80b7 	beq.w	8005e02 <HAL_RCC_GetSysClockFreq+0x21e>
    {
      switch (pllsource)
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d003      	beq.n	8005ca2 <HAL_RCC_GetSysClockFreq+0xbe>
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d056      	beq.n	8005d4e <HAL_RCC_GetSysClockFreq+0x16a>
 8005ca0:	e077      	b.n	8005d92 <HAL_RCC_GetSysClockFreq+0x1ae>
      {
        case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */

          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005ca2:	4b5e      	ldr	r3, [pc, #376]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d02d      	beq.n	8005d0a <HAL_RCC_GetSysClockFreq+0x126>
          {
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005cae:	4b5b      	ldr	r3, [pc, #364]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	08db      	lsrs	r3, r3, #3
 8005cb4:	f003 0303 	and.w	r3, r3, #3
 8005cb8:	4a5a      	ldr	r2, [pc, #360]	@ (8005e24 <HAL_RCC_GetSysClockFreq+0x240>)
 8005cba:	fa22 f303 	lsr.w	r3, r2, r3
 8005cbe:	607b      	str	r3, [r7, #4]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	ee07 3a90 	vmov	s15, r3
 8005cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd8:	4b50      	ldr	r3, [pc, #320]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ce0:	ee07 3a90 	vmov	s15, r3
 8005ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ce8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005cec:	eddf 5a4f 	vldr	s11, [pc, #316]	@ 8005e2c <HAL_RCC_GetSysClockFreq+0x248>
 8005cf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cf8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d04:	edc7 7a06 	vstr	s15, [r7, #24]
          {
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
          }

          break;
 8005d08:	e065      	b.n	8005dd6 <HAL_RCC_GetSysClockFreq+0x1f2>
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	ee07 3a90 	vmov	s15, r3
 8005d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d14:	eddf 6a46 	vldr	s13, [pc, #280]	@ 8005e30 <HAL_RCC_GetSysClockFreq+0x24c>
 8005d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d24:	ee07 3a90 	vmov	s15, r3
 8005d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d30:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005e2c <HAL_RCC_GetSysClockFreq+0x248>
 8005d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                             (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d3c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
            pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d48:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005d4c:	e043      	b.n	8005dd6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	ee07 3a90 	vmov	s15, r3
 8005d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d58:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005e34 <HAL_RCC_GetSysClockFreq+0x250>
 8005d5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d60:	4b2e      	ldr	r3, [pc, #184]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d68:	ee07 3a90 	vmov	s15, r3
 8005d6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d70:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d74:	eddf 5a2d 	vldr	s11, [pc, #180]	@ 8005e2c <HAL_RCC_GetSysClockFreq+0x248>
 8005d78:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d8c:	edc7 7a06 	vstr	s15, [r7, #24]

          break;
 8005d90:	e021      	b.n	8005dd6 <HAL_RCC_GetSysClockFreq+0x1f2>

        case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        default:
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	ee07 3a90 	vmov	s15, r3
 8005d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d9c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005e38 <HAL_RCC_GetSysClockFreq+0x254>
 8005da0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da4:	4b1d      	ldr	r3, [pc, #116]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dac:	ee07 3a90 	vmov	s15, r3
 8005db0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005db4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005db8:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 8005e2c <HAL_RCC_GetSysClockFreq+0x248>
 8005dbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd0:	edc7 7a06 	vstr	s15, [r7, #24]
          break;
 8005dd4:	bf00      	nop
      }

      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8005dd6:	4b11      	ldr	r3, [pc, #68]	@ (8005e1c <HAL_RCC_GetSysClockFreq+0x238>)
 8005dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dda:	0a5b      	lsrs	r3, r3, #9
 8005ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005de0:	3301      	adds	r3, #1
 8005de2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005dee:	edd7 6a06 	vldr	s13, [r7, #24]
 8005df2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005df6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dfa:	ee17 3a90 	vmov	r3, s15
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	e004      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x228>
    }
    else
    {
      sysclockfreq = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61fb      	str	r3, [r7, #28]
 8005e06:	e001      	b.n	8005e0c <HAL_RCC_GetSysClockFreq+0x228>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005e08:	4b06      	ldr	r3, [pc, #24]	@ (8005e24 <HAL_RCC_GetSysClockFreq+0x240>)
 8005e0a:	61fb      	str	r3, [r7, #28]
  }

  return sysclockfreq;
 8005e0c:	69fb      	ldr	r3, [r7, #28]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3724      	adds	r7, #36	@ 0x24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	44020c00 	.word	0x44020c00
 8005e20:	003d0900 	.word	0x003d0900
 8005e24:	03d09000 	.word	0x03d09000
 8005e28:	007a1200 	.word	0x007a1200
 8005e2c:	46000000 	.word	0x46000000
 8005e30:	4c742400 	.word	0x4c742400
 8005e34:	4af42400 	.word	0x4af42400
 8005e38:	4a742400 	.word	0x4a742400

08005e3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005e40:	f7ff fed0 	bl	8005be4 <HAL_RCC_GetSysClockFreq>
 8005e44:	4602      	mov	r2, r0
 8005e46:	4b08      	ldr	r3, [pc, #32]	@ (8005e68 <HAL_RCC_GetHCLKFreq+0x2c>)
 8005e48:	6a1b      	ldr	r3, [r3, #32]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005e4a:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005e4e:	4907      	ldr	r1, [pc, #28]	@ (8005e6c <HAL_RCC_GetHCLKFreq+0x30>)
 8005e50:	5ccb      	ldrb	r3, [r1, r3]
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005e52:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005e56:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5a:	4a05      	ldr	r2, [pc, #20]	@ (8005e70 <HAL_RCC_GetHCLKFreq+0x34>)
 8005e5c:	6013      	str	r3, [r2, #0]

  return SystemCoreClock;
 8005e5e:	4b04      	ldr	r3, [pc, #16]	@ (8005e70 <HAL_RCC_GetHCLKFreq+0x34>)
 8005e60:	681b      	ldr	r3, [r3, #0]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	44020c00 	.word	0x44020c00
 8005e6c:	08012ae0 	.word	0x08012ae0
 8005e70:	20000004 	.word	0x20000004

08005e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8005e78:	f7ff ffe0 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	4b06      	ldr	r3, [pc, #24]	@ (8005e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	091b      	lsrs	r3, r3, #4
 8005e84:	f003 0307 	and.w	r3, r3, #7
 8005e88:	4904      	ldr	r1, [pc, #16]	@ (8005e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e8a:	5ccb      	ldrb	r3, [r1, r3]
 8005e8c:	f003 031f 	and.w	r3, r3, #31
 8005e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	44020c00 	.word	0x44020c00
 8005e9c:	08012af0 	.word	0x08012af0

08005ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8005ea4:	f7ff ffca 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	4b06      	ldr	r3, [pc, #24]	@ (8005ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	0a1b      	lsrs	r3, r3, #8
 8005eb0:	f003 0307 	and.w	r3, r3, #7
 8005eb4:	4904      	ldr	r1, [pc, #16]	@ (8005ec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005eb6:	5ccb      	ldrb	r3, [r1, r3]
 8005eb8:	f003 031f 	and.w	r3, r3, #31
 8005ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	44020c00 	.word	0x44020c00
 8005ec8:	08012af0 	.word	0x08012af0

08005ecc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8005ed0:	f7ff ffb4 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	4b06      	ldr	r3, [pc, #24]	@ (8005ef0 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	0b1b      	lsrs	r3, r3, #12
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	4904      	ldr	r1, [pc, #16]	@ (8005ef4 <HAL_RCC_GetPCLK3Freq+0x28>)
 8005ee2:	5ccb      	ldrb	r3, [r1, r3]
 8005ee4:	f003 031f 	and.w	r3, r3, #31
 8005ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	44020c00 	.word	0x44020c00
 8005ef4:	08012af0 	.word	0x08012af0

08005ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005efc:	b0d8      	sub	sp, #352	@ 0x160
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	f8c7 014c 	str.w	r0, [r7, #332]	@ 0x14c
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005f04:	2300      	movs	r3, #0
 8005f06:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005f10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	f002 7480 	and.w	r4, r2, #16777216	@ 0x1000000
 8005f1c:	2500      	movs	r5, #0
 8005f1e:	ea54 0305 	orrs.w	r3, r4, r5
 8005f22:	d00b      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(pPeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8005f24:	4bcd      	ldr	r3, [pc, #820]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005f26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f2a:	f023 4140 	bic.w	r1, r3, #3221225472	@ 0xc0000000
 8005f2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f34:	4ac9      	ldr	r2, [pc, #804]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005f36:	430b      	orrs	r3, r1
 8005f38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f44:	f002 0801 	and.w	r8, r2, #1
 8005f48:	f04f 0900 	mov.w	r9, #0
 8005f4c:	ea58 0309 	orrs.w	r3, r8, r9
 8005f50:	d042      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    switch (pPeriphClkInit->Usart1ClockSelection)
 8005f52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f58:	2b05      	cmp	r3, #5
 8005f5a:	d823      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0xac>
 8005f5c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f64 <HAL_RCCEx_PeriphCLKConfig+0x6c>)
 8005f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f62:	bf00      	nop
 8005f64:	08005fad 	.word	0x08005fad
 8005f68:	08005f7d 	.word	0x08005f7d
 8005f6c:	08005f91 	.word	0x08005f91
 8005f70:	08005fad 	.word	0x08005fad
 8005f74:	08005fad 	.word	0x08005fad
 8005f78:	08005fad 	.word	0x08005fad
        /* USART1 clock source config set later after clock selection check */
        break;

      case RCC_USART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f80:	3308      	adds	r3, #8
 8005f82:	4618      	mov	r0, r3
 8005f84:	f004 fee0 	bl	800ad48 <RCCEx_PLL2_Config>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8005f8e:	e00e      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xb6>
#if defined(RCC_USART1CLKSOURCE_PLL3Q)
      case RCC_USART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f90:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005f94:	3330      	adds	r3, #48	@ 0x30
 8005f96:	4618      	mov	r0, r3
 8005f98:	f004 ff6e 	bl	800ae78 <RCCEx_PLL3_Config>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART1 clock source config set later after clock selection check */
        break;
 8005fa2:	e004      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xb6>
      case RCC_USART1CLKSOURCE_LSE:      /* LSE clock is used as source of USART1 clock*/
        /* USART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8005faa:	e000      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0xb6>
        break;
 8005fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fae:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10c      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Set the source of USART1 clock*/
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005fb6:	4ba9      	ldr	r3, [pc, #676]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005fbc:	f023 0107 	bic.w	r1, r3, #7
 8005fc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fc6:	4aa5      	ldr	r2, [pc, #660]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8005fce:	e003      	b.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8005fd4:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fd8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe0:	f002 0a02 	and.w	sl, r2, #2
 8005fe4:	f04f 0b00 	mov.w	fp, #0
 8005fe8:	ea5a 030b 	orrs.w	r3, sl, fp
 8005fec:	f000 8088 	beq.w	8006100 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    switch (pPeriphClkInit->Usart2ClockSelection)
 8005ff0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8005ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff6:	2b28      	cmp	r3, #40	@ 0x28
 8005ff8:	d868      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8006000 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	080060d5 	.word	0x080060d5
 8006004:	080060cd 	.word	0x080060cd
 8006008:	080060cd 	.word	0x080060cd
 800600c:	080060cd 	.word	0x080060cd
 8006010:	080060cd 	.word	0x080060cd
 8006014:	080060cd 	.word	0x080060cd
 8006018:	080060cd 	.word	0x080060cd
 800601c:	080060cd 	.word	0x080060cd
 8006020:	080060a5 	.word	0x080060a5
 8006024:	080060cd 	.word	0x080060cd
 8006028:	080060cd 	.word	0x080060cd
 800602c:	080060cd 	.word	0x080060cd
 8006030:	080060cd 	.word	0x080060cd
 8006034:	080060cd 	.word	0x080060cd
 8006038:	080060cd 	.word	0x080060cd
 800603c:	080060cd 	.word	0x080060cd
 8006040:	080060b9 	.word	0x080060b9
 8006044:	080060cd 	.word	0x080060cd
 8006048:	080060cd 	.word	0x080060cd
 800604c:	080060cd 	.word	0x080060cd
 8006050:	080060cd 	.word	0x080060cd
 8006054:	080060cd 	.word	0x080060cd
 8006058:	080060cd 	.word	0x080060cd
 800605c:	080060cd 	.word	0x080060cd
 8006060:	080060d5 	.word	0x080060d5
 8006064:	080060cd 	.word	0x080060cd
 8006068:	080060cd 	.word	0x080060cd
 800606c:	080060cd 	.word	0x080060cd
 8006070:	080060cd 	.word	0x080060cd
 8006074:	080060cd 	.word	0x080060cd
 8006078:	080060cd 	.word	0x080060cd
 800607c:	080060cd 	.word	0x080060cd
 8006080:	080060d5 	.word	0x080060d5
 8006084:	080060cd 	.word	0x080060cd
 8006088:	080060cd 	.word	0x080060cd
 800608c:	080060cd 	.word	0x080060cd
 8006090:	080060cd 	.word	0x080060cd
 8006094:	080060cd 	.word	0x080060cd
 8006098:	080060cd 	.word	0x080060cd
 800609c:	080060cd 	.word	0x080060cd
 80060a0:	080060d5 	.word	0x080060d5
        /* USART2 clock source config set later after clock selection check */
        break;

      case RCC_USART2CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART2*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060a8:	3308      	adds	r3, #8
 80060aa:	4618      	mov	r0, r3
 80060ac:	f004 fe4c 	bl	800ad48 <RCCEx_PLL2_Config>
 80060b0:	4603      	mov	r3, r0
 80060b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80060b6:	e00e      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1de>

#if defined(RCC_USART2CLKSOURCE_PLL3Q)
      case RCC_USART2CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART2*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80060b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060bc:	3330      	adds	r3, #48	@ 0x30
 80060be:	4618      	mov	r0, r3
 80060c0:	f004 feda 	bl	800ae78 <RCCEx_PLL3_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART2 clock source config set later after clock selection check */
        break;
 80060ca:	e004      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
      case RCC_USART2CLKSOURCE_LSE:      /* LSE clock is used as source of USART2 clock*/
        /* USART2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80060d2:	e000      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x1de>
        break;
 80060d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10c      	bne.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Set the source of USART2 clock*/
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80060de:	4b5f      	ldr	r3, [pc, #380]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80060e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80060e4:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80060e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80060ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80060ee:	4a5b      	ldr	r2, [pc, #364]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80060f0:	430b      	orrs	r3, r1
 80060f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80060f6:	e003      	b.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x208>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80060fc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006100:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006108:	f002 0304 	and.w	r3, r2, #4
 800610c:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8006110:	2300      	movs	r3, #0
 8006112:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8006116:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 800611a:	460b      	mov	r3, r1
 800611c:	4313      	orrs	r3, r2
 800611e:	d04e      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    switch (pPeriphClkInit->Usart3ClockSelection)
 8006120:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006124:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006126:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800612a:	d02c      	beq.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x28e>
 800612c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8006130:	d825      	bhi.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006136:	d028      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006138:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800613c:	d81f      	bhi.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800613e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006140:	d025      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x296>
 8006142:	2bc0      	cmp	r3, #192	@ 0xc0
 8006144:	d81b      	bhi.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8006146:	2b80      	cmp	r3, #128	@ 0x80
 8006148:	d00f      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x272>
 800614a:	2b80      	cmp	r3, #128	@ 0x80
 800614c:	d817      	bhi.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800614e:	2b00      	cmp	r3, #0
 8006150:	d01f      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8006152:	2b40      	cmp	r3, #64	@ 0x40
 8006154:	d113      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x286>
        /* USART3 clock source config set later after clock selection check */
        break;

      case RCC_USART3CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART3*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006156:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800615a:	3308      	adds	r3, #8
 800615c:	4618      	mov	r0, r3
 800615e:	f004 fdf3 	bl	800ad48 <RCCEx_PLL2_Config>
 8006162:	4603      	mov	r3, r0
 8006164:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 8006168:	e014      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x29c>

#if defined(RCC_USART3CLKSOURCE_PLL3Q)
      case RCC_USART3CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART3*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800616a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800616e:	3330      	adds	r3, #48	@ 0x30
 8006170:	4618      	mov	r0, r3
 8006172:	f004 fe81 	bl	800ae78 <RCCEx_PLL3_Config>
 8006176:	4603      	mov	r3, r0
 8006178:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART3 clock source config set later after clock selection check */
        break;
 800617c:	e00a      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x29c>
      case RCC_USART3CLKSOURCE_LSE:      /* LSE clock is used as source of USART3 clock*/
        /* USART3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006184:	e006      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006186:	bf00      	nop
 8006188:	e004      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800618a:	bf00      	nop
 800618c:	e002      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 800618e:	bf00      	nop
 8006190:	e000      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        break;
 8006192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006194:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10c      	bne.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    {
      /* Set the source of USART3 clock*/
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800619c:	4b2f      	ldr	r3, [pc, #188]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800619e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80061a2:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80061a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061ac:	4a2b      	ldr	r2, [pc, #172]	@ (800625c <HAL_RCCEx_PeriphCLKConfig+0x364>)
 80061ae:	430b      	orrs	r3, r1
 80061b0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80061b4:	e003      	b.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x2c6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061b6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80061ba:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061be:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f002 0308 	and.w	r3, r2, #8
 80061ca:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80061ce:	2300      	movs	r3, #0
 80061d0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80061d4:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 80061d8:	460b      	mov	r3, r1
 80061da:	4313      	orrs	r3, r2
 80061dc:	d056      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x394>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    switch (pPeriphClkInit->Uart4ClockSelection)
 80061de:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80061e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80061e4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80061e8:	d031      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80061ea:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80061ee:	d82a      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80061f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061f4:	d02d      	beq.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
 80061f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061fa:	d824      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80061fc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006200:	d029      	beq.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8006202:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006206:	d81e      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006208:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800620c:	d011      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800620e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006212:	d818      	bhi.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d023      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006218:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800621c:	d113      	bne.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        /* UART4 clock source config set later after clock selection check */
        break;

      case RCC_UART4CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART4*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800621e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006222:	3308      	adds	r3, #8
 8006224:	4618      	mov	r0, r3
 8006226:	f004 fd8f 	bl	800ad48 <RCCEx_PLL2_Config>
 800622a:	4603      	mov	r3, r0
 800622c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8006230:	e017      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x36a>

      case RCC_UART4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART4*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006232:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006236:	3330      	adds	r3, #48	@ 0x30
 8006238:	4618      	mov	r0, r3
 800623a:	f004 fe1d 	bl	800ae78 <RCCEx_PLL3_Config>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART4 clock source config set later after clock selection check */
        break;
 8006244:	e00d      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x36a>
      case RCC_UART4CLKSOURCE_LSE:      /* LSE clock is used as source of UART4 clock*/
        /* UART4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800624c:	e009      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 800624e:	bf00      	nop
 8006250:	e007      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006252:	bf00      	nop
 8006254:	e005      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x36a>
        break;
 8006256:	bf00      	nop
 8006258:	e003      	b.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800625a:	bf00      	nop
 800625c:	44020c00 	.word	0x44020c00
        break;
 8006260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006262:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10c      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x38c>
    {
      /* Set the source of UART4 clock*/
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800626a:	4bbb      	ldr	r3, [pc, #748]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800626c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006270:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8006274:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006278:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800627a:	4ab7      	ldr	r2, [pc, #732]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800627c:	430b      	orrs	r3, r1
 800627e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006282:	e003      	b.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x394>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006284:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006288:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART4 */

#if defined(UART5)
  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800628c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006294:	f002 0310 	and.w	r3, r2, #16
 8006298:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800629c:	2300      	movs	r3, #0
 800629e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80062a2:	e9d7 124c 	ldrd	r1, r2, [r7, #304]	@ 0x130
 80062a6:	460b      	mov	r3, r1
 80062a8:	4313      	orrs	r3, r2
 80062aa:	d053      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    switch (pPeriphClkInit->Uart5ClockSelection)
 80062ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062b2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80062b6:	d031      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80062b8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80062bc:	d82a      	bhi.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80062be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062c2:	d02d      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x428>
 80062c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062c8:	d824      	bhi.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80062ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062ce:	d029      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80062d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80062d4:	d81e      	bhi.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80062d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062da:	d011      	beq.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80062dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062e0:	d818      	bhi.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d020      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x430>
 80062e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ea:	d113      	bne.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        /* UART5 clock source config set later after clock selection check */
        break;

      case RCC_UART5CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART5*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062ec:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80062f0:	3308      	adds	r3, #8
 80062f2:	4618      	mov	r0, r3
 80062f4:	f004 fd28 	bl	800ad48 <RCCEx_PLL2_Config>
 80062f8:	4603      	mov	r3, r0
 80062fa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 80062fe:	e014      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x432>

      case RCC_UART5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART5*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006300:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006304:	3330      	adds	r3, #48	@ 0x30
 8006306:	4618      	mov	r0, r3
 8006308:	f004 fdb6 	bl	800ae78 <RCCEx_PLL3_Config>
 800630c:	4603      	mov	r3, r0
 800630e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART5 clock source config set later after clock selection check */
        break;
 8006312:	e00a      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x432>
      case RCC_UART5CLKSOURCE_LSE:      /* LSE clock is used as source of UART5 clock*/
        /* UART5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800631a:	e006      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 800631c:	bf00      	nop
 800631e:	e004      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006320:	bf00      	nop
 8006322:	e002      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006324:	bf00      	nop
 8006326:	e000      	b.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x432>
        break;
 8006328:	bf00      	nop
    }

    if (ret == HAL_OK)
 800632a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10c      	bne.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Set the source of UART5 clock*/
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006332:	4b89      	ldr	r3, [pc, #548]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006334:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006338:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800633c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006340:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006342:	4a85      	ldr	r2, [pc, #532]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 8006344:	430b      	orrs	r3, r1
 8006346:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800634a:	e003      	b.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800634c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006350:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART5 */

#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006354:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	f002 0320 	and.w	r3, r2, #32
 8006360:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8006364:	2300      	movs	r3, #0
 8006366:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800636a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800636e:	460b      	mov	r3, r1
 8006370:	4313      	orrs	r3, r2
 8006372:	d053      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    switch (pPeriphClkInit->Usart6ClockSelection)
 8006374:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800637a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800637e:	d031      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 8006380:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8006384:	d82a      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006386:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800638a:	d02d      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800638c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006390:	d824      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8006392:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8006396:	d029      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 8006398:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800639c:	d81e      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 800639e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063a2:	d011      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 80063a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063a8:	d818      	bhi.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d020      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
 80063ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063b2:	d113      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x4e4>
        /* USART6 clock source config set later after clock selection check */
        break;

      case RCC_USART6CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART6*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063b8:	3308      	adds	r3, #8
 80063ba:	4618      	mov	r0, r3
 80063bc:	f004 fcc4 	bl	800ad48 <RCCEx_PLL2_Config>
 80063c0:	4603      	mov	r3, r0
 80063c2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80063c6:	e014      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>

      case RCC_USART6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART6*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80063c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80063cc:	3330      	adds	r3, #48	@ 0x30
 80063ce:	4618      	mov	r0, r3
 80063d0:	f004 fd52 	bl	800ae78 <RCCEx_PLL3_Config>
 80063d4:	4603      	mov	r3, r0
 80063d6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART6 clock source config set later after clock selection check */
        break;
 80063da:	e00a      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      case RCC_USART6CLKSOURCE_LSE:      /* LSE clock is used as source of USART6 clock*/
        /* USART6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80063e2:	e006      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80063e4:	bf00      	nop
 80063e6:	e004      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80063e8:	bf00      	nop
 80063ea:	e002      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80063ec:	bf00      	nop
 80063ee:	e000      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
        break;
 80063f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10c      	bne.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x51c>
    {
      /* Set the source of USART6 clock*/
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80063fa:	4b57      	ldr	r3, [pc, #348]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80063fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006400:	f423 3160 	bic.w	r1, r3, #229376	@ 0x38000
 8006404:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800640a:	4a53      	ldr	r2, [pc, #332]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 800640c:	430b      	orrs	r3, r1
 800640e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006412:	e003      	b.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006414:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006418:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART6 */

#if defined(UART7)
  /*-------------------------- UART7 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800641c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006424:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006428:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800642c:	2300      	movs	r3, #0
 800642e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8006432:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8006436:	460b      	mov	r3, r1
 8006438:	4313      	orrs	r3, r2
 800643a:	d053      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(pPeriphClkInit->Uart7ClockSelection));

    switch (pPeriphClkInit->Uart7ClockSelection)
 800643c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006442:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006446:	d031      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8006448:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800644c:	d82a      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800644e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006452:	d02d      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
 8006454:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006458:	d824      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 800645a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800645e:	d029      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006460:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006464:	d81e      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006466:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800646a:	d011      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800646c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006470:	d818      	bhi.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d020      	beq.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006476:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800647a:	d113      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x5ac>
        /* UART7 clock source config set later after clock selection check */
        break;

      case RCC_UART7CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART7*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800647c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006480:	3308      	adds	r3, #8
 8006482:	4618      	mov	r0, r3
 8006484:	f004 fc60 	bl	800ad48 <RCCEx_PLL2_Config>
 8006488:	4603      	mov	r3, r0
 800648a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 800648e:	e014      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>

      case RCC_UART7CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART7*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006490:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006494:	3330      	adds	r3, #48	@ 0x30
 8006496:	4618      	mov	r0, r3
 8006498:	f004 fcee 	bl	800ae78 <RCCEx_PLL3_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART7 clock source config set later after clock selection check */
        break;
 80064a2:	e00a      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
      case RCC_UART7CLKSOURCE_LSE:      /* LSE clock is used as source of UART7 clock*/
        /* UART7 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80064aa:	e006      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80064ac:	bf00      	nop
 80064ae:	e004      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80064b0:	bf00      	nop
 80064b2:	e002      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80064b4:	bf00      	nop
 80064b6:	e000      	b.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x5c2>
        break;
 80064b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ba:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10c      	bne.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of UART7 clock*/
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80064c2:	4b25      	ldr	r3, [pc, #148]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80064c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80064c8:	f423 11e0 	bic.w	r1, r3, #1835008	@ 0x1c0000
 80064cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064d2:	4a21      	ldr	r2, [pc, #132]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x660>)
 80064d4:	430b      	orrs	r3, r1
 80064d6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80064da:	e003      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064dc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80064e0:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART7 */

#if defined(UART8)
  /*-------------------------- UART8 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80064e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80064f0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 80064f4:	2300      	movs	r3, #0
 80064f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80064fa:	e9d7 1246 	ldrd	r1, r2, [r7, #280]	@ 0x118
 80064fe:	460b      	mov	r3, r1
 8006500:	4313      	orrs	r3, r2
 8006502:	d055      	beq.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(pPeriphClkInit->Uart8ClockSelection));

    switch (pPeriphClkInit->Uart8ClockSelection)
 8006504:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006508:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800650a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800650e:	d033      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x680>
 8006510:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8006514:	d82c      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006516:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800651a:	d02f      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x684>
 800651c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006520:	d826      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x678>
 8006522:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006526:	d02b      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8006528:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800652c:	d820      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800652e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006532:	d013      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006534:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006538:	d81a      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d022      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x68c>
 800653e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006542:	d115      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* UART8 clock source config set later after clock selection check */
        break;

      case RCC_UART8CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART8*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006544:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006548:	3308      	adds	r3, #8
 800654a:	4618      	mov	r0, r3
 800654c:	f004 fbfc 	bl	800ad48 <RCCEx_PLL2_Config>
 8006550:	4603      	mov	r3, r0
 8006552:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 8006556:	e016      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x68e>
 8006558:	44020c00 	.word	0x44020c00

      case RCC_UART8CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART8*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800655c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006560:	3330      	adds	r3, #48	@ 0x30
 8006562:	4618      	mov	r0, r3
 8006564:	f004 fc88 	bl	800ae78 <RCCEx_PLL3_Config>
 8006568:	4603      	mov	r3, r0
 800656a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART8 clock source config set later after clock selection check */
        break;
 800656e:	e00a      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      case RCC_UART8CLKSOURCE_LSE:      /* LSE clock is used as source of UART8 clock*/
        /* UART8 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006576:	e006      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006578:	bf00      	nop
 800657a:	e004      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 800657c:	bf00      	nop
 800657e:	e002      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006580:	bf00      	nop
 8006582:	e000      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x68e>
        break;
 8006584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006586:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10c      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
    {
      /* Set the source of UART8 clock*/
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800658e:	4bbb      	ldr	r3, [pc, #748]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006590:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006594:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006598:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800659c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800659e:	4ab7      	ldr	r2, [pc, #732]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80065a0:	430b      	orrs	r3, r1
 80065a2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80065a6:	e003      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80065ac:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(UART9)
  /*-------------------------- UART9 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80065b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 80065bc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80065c0:	2300      	movs	r3, #0
 80065c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80065c6:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 80065ca:	460b      	mov	r3, r1
 80065cc:	4313      	orrs	r3, r2
 80065ce:	d053      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x780>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART9CLKSOURCE(pPeriphClkInit->Uart9ClockSelection));

    switch (pPeriphClkInit->Uart9ClockSelection)
 80065d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80065d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065d6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80065da:	d031      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x748>
 80065dc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80065e0:	d82a      	bhi.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80065e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065e6:	d02d      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80065e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80065ec:	d824      	bhi.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80065ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065f2:	d029      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x750>
 80065f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80065f8:	d81e      	bhi.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80065fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065fe:	d011      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 8006600:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006604:	d818      	bhi.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x740>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d020      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x754>
 800660a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800660e:	d113      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x740>
        /* UART9 clock source config set later after clock selection check */
        break;

      case RCC_UART9CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART9*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006610:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006614:	3308      	adds	r3, #8
 8006616:	4618      	mov	r0, r3
 8006618:	f004 fb96 	bl	800ad48 <RCCEx_PLL2_Config>
 800661c:	4603      	mov	r3, r0
 800661e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8006622:	e014      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x756>

      case RCC_UART9CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART9*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006624:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006628:	3330      	adds	r3, #48	@ 0x30
 800662a:	4618      	mov	r0, r3
 800662c:	f004 fc24 	bl	800ae78 <RCCEx_PLL3_Config>
 8006630:	4603      	mov	r3, r0
 8006632:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART9 clock source config set later after clock selection check */
        break;
 8006636:	e00a      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x756>
      case RCC_UART9CLKSOURCE_LSE:      /* LSE clock is used as source of UART9 clock*/
        /* UART9 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800663e:	e006      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006640:	bf00      	nop
 8006642:	e004      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006644:	bf00      	nop
 8006646:	e002      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 8006648:	bf00      	nop
 800664a:	e000      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x756>
        break;
 800664c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10c      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      /* Set the source of UART9 clock*/
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8006656:	4b89      	ldr	r3, [pc, #548]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006658:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800665c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006660:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006664:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006666:	4a85      	ldr	r2, [pc, #532]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006668:	430b      	orrs	r3, r1
 800666a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800666e:	e003      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x780>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006674:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* UART9 */

#if defined(USART10)
  /*-------------------------- USART10 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8006678:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8006684:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006688:	2300      	movs	r3, #0
 800668a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800668e:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006692:	460b      	mov	r3, r1
 8006694:	4313      	orrs	r3, r2
 8006696:	d055      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART10CLKSOURCE(pPeriphClkInit->Usart10ClockSelection));

    switch (pPeriphClkInit->Usart10ClockSelection)
 8006698:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800669c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066a0:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80066a4:	d031      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x812>
 80066a6:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 80066aa:	d82a      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80066ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066b0:	d02d      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x816>
 80066b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066b6:	d824      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80066b8:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80066bc:	d029      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x81a>
 80066be:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80066c2:	d81e      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80066c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066c8:	d011      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x7f6>
 80066ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066ce:	d818      	bhi.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x80a>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d020      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0x81e>
 80066d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066d8:	d113      	bne.n	8006702 <HAL_RCCEx_PeriphCLKConfig+0x80a>
        /* USART10 clock source config set later after clock selection check */
        break;

      case RCC_USART10CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART10*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066de:	3308      	adds	r3, #8
 80066e0:	4618      	mov	r0, r3
 80066e2:	f004 fb31 	bl	800ad48 <RCCEx_PLL2_Config>
 80066e6:	4603      	mov	r3, r0
 80066e8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 80066ec:	e014      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x820>

      case RCC_USART10CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART10*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80066f2:	3330      	adds	r3, #48	@ 0x30
 80066f4:	4618      	mov	r0, r3
 80066f6:	f004 fbbf 	bl	800ae78 <RCCEx_PLL3_Config>
 80066fa:	4603      	mov	r3, r0
 80066fc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART10 clock source config set later after clock selection check */
        break;
 8006700:	e00a      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x820>
      case RCC_USART10CLKSOURCE_LSE:      /* LSE clock is used as source of USART10 clock*/
        /* USART10 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006708:	e006      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800670a:	bf00      	nop
 800670c:	e004      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 800670e:	bf00      	nop
 8006710:	e002      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006712:	bf00      	nop
 8006714:	e000      	b.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x820>
        break;
 8006716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006718:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10d      	bne.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x844>
    {
      /* Set the source of USART10 clock*/
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8006720:	4b56      	ldr	r3, [pc, #344]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006722:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006726:	f023 5160 	bic.w	r1, r3, #939524096	@ 0x38000000
 800672a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800672e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006732:	4a52      	ldr	r2, [pc, #328]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8006734:	430b      	orrs	r3, r1
 8006736:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800673a:	e003      	b.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x84c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006740:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USART10 */

#if defined(USART11)
  /*-------------------------- USART11 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8006744:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006750:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006754:	2300      	movs	r3, #0
 8006756:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800675a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800675e:	460b      	mov	r3, r1
 8006760:	4313      	orrs	r3, r2
 8006762:	d044      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x8f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART11CLKSOURCE(pPeriphClkInit->Usart11ClockSelection));

    switch (pPeriphClkInit->Usart11ClockSelection)
 8006764:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006768:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800676c:	2b05      	cmp	r3, #5
 800676e:	d823      	bhi.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006770:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	080067c1 	.word	0x080067c1
 800677c:	08006791 	.word	0x08006791
 8006780:	080067a5 	.word	0x080067a5
 8006784:	080067c1 	.word	0x080067c1
 8006788:	080067c1 	.word	0x080067c1
 800678c:	080067c1 	.word	0x080067c1
        /* USART11 clock source config set later after clock selection check */
        break;

      case RCC_USART11CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for USART11*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006790:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006794:	3308      	adds	r3, #8
 8006796:	4618      	mov	r0, r3
 8006798:	f004 fad6 	bl	800ad48 <RCCEx_PLL2_Config>
 800679c:	4603      	mov	r3, r0
 800679e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80067a2:	e00e      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>

      case RCC_USART11CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for USART11*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067a8:	3330      	adds	r3, #48	@ 0x30
 80067aa:	4618      	mov	r0, r3
 80067ac:	f004 fb64 	bl	800ae78 <RCCEx_PLL3_Config>
 80067b0:	4603      	mov	r3, r0
 80067b2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* USART11 clock source config set later after clock selection check */
        break;
 80067b6:	e004      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
      case RCC_USART11CLKSOURCE_LSE:      /* LSE clock is used as source of USART11 clock*/
        /* USART11 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80067be:	e000      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x8ca>
        break;
 80067c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d10d      	bne.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
    {
      /* Set the source of USART11 clock*/
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80067ca:	4b2c      	ldr	r3, [pc, #176]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80067cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80067d0:	f023 0107 	bic.w	r1, r3, #7
 80067d4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80067dc:	4a27      	ldr	r2, [pc, #156]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x984>)
 80067de:	430b      	orrs	r3, r1
 80067e0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80067e4:	e003      	b.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80067ea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /*USART11*/

#if defined(UART12)
  /*-------------------------- UART12 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80067ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80067f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80067fa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80067fe:	2300      	movs	r3, #0
 8006800:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006804:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006808:	460b      	mov	r3, r1
 800680a:	4313      	orrs	r3, r2
 800680c:	d04f      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x9b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART12CLKSOURCE(pPeriphClkInit->Uart12ClockSelection));

    switch (pPeriphClkInit->Uart12ClockSelection)
 800680e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006816:	2b50      	cmp	r3, #80	@ 0x50
 8006818:	d029      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800681a:	2b50      	cmp	r3, #80	@ 0x50
 800681c:	d823      	bhi.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800681e:	2b40      	cmp	r3, #64	@ 0x40
 8006820:	d027      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x97a>
 8006822:	2b40      	cmp	r3, #64	@ 0x40
 8006824:	d81f      	bhi.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006826:	2b30      	cmp	r3, #48	@ 0x30
 8006828:	d025      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x97e>
 800682a:	2b30      	cmp	r3, #48	@ 0x30
 800682c:	d81b      	bhi.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800682e:	2b20      	cmp	r3, #32
 8006830:	d00f      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8006832:	2b20      	cmp	r3, #32
 8006834:	d817      	bhi.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d022      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800683a:	2b10      	cmp	r3, #16
 800683c:	d113      	bne.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x96e>
        /* UART12 clock source config set later after clock selection check */
        break;

      case RCC_UART12CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for UART12*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800683e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006842:	3308      	adds	r3, #8
 8006844:	4618      	mov	r0, r3
 8006846:	f004 fa7f 	bl	800ad48 <RCCEx_PLL2_Config>
 800684a:	4603      	mov	r3, r0
 800684c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006850:	e017      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x98a>

      case RCC_UART12CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for UART12*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006852:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006856:	3330      	adds	r3, #48	@ 0x30
 8006858:	4618      	mov	r0, r3
 800685a:	f004 fb0d 	bl	800ae78 <RCCEx_PLL3_Config>
 800685e:	4603      	mov	r3, r0
 8006860:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* UART12 clock source config set later after clock selection check */
        break;
 8006864:	e00d      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      case RCC_UART12CLKSOURCE_LSE:      /* LSE clock is used as source of UART12 clock*/
        /* UART12 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800686c:	e009      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 800686e:	bf00      	nop
 8006870:	e007      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006872:	bf00      	nop
 8006874:	e005      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x98a>
        break;
 8006876:	bf00      	nop
 8006878:	e003      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x98a>
 800687a:	bf00      	nop
 800687c:	44020c00 	.word	0x44020c00
        break;
 8006880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006882:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006886:	2b00      	cmp	r3, #0
 8006888:	d10d      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
    {
      /* Set the source of UART12 clock*/
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800688a:	4baf      	ldr	r3, [pc, #700]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800688c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006890:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8006894:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800689c:	4aaa      	ldr	r2, [pc, #680]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800689e:	430b      	orrs	r3, r1
 80068a0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80068a4:	e003      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80068aa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* UART12 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80068ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80068be:	2300      	movs	r3, #0
 80068c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80068c4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80068c8:	460b      	mov	r3, r1
 80068ca:	4313      	orrs	r3, r2
 80068cc:	d055      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xa82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80068ce:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80068d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068d6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80068da:	d031      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0xa48>
 80068dc:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80068e0:	d82a      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80068e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068e6:	d02d      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 80068e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80068ec:	d824      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80068ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068f2:	d029      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0xa50>
 80068f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80068f8:	d81e      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80068fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80068fe:	d011      	beq.n	8006924 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8006900:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006904:	d818      	bhi.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006906:	2b00      	cmp	r3, #0
 8006908:	d020      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800690a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800690e:	d113      	bne.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0xa40>
        /* LPUART1 clock source config set later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for LPUART1*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006910:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006914:	3308      	adds	r3, #8
 8006916:	4618      	mov	r0, r3
 8006918:	f004 fa16 	bl	800ad48 <RCCEx_PLL2_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006922:	e014      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xa56>

#if defined(RCC_LPUART1CLKSOURCE_PLL3Q)
      case RCC_LPUART1CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for LPUART1*/
        /* PLL3  input clock, parameters M, N & Q configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006924:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006928:	3330      	adds	r3, #48	@ 0x30
 800692a:	4618      	mov	r0, r3
 800692c:	f004 faa4 	bl	800ae78 <RCCEx_PLL3_Config>
 8006930:	4603      	mov	r3, r0
 8006932:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPUART1 clock source config set later after clock selection check */
        break;
 8006936:	e00a      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xa56>
      case RCC_LPUART1CLKSOURCE_LSE:      /* LSE clock is used as source of LPUART1 clock*/
        /* LPUART1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800693e:	e006      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006940:	bf00      	nop
 8006942:	e004      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006944:	bf00      	nop
 8006946:	e002      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 8006948:	bf00      	nop
 800694a:	e000      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xa56>
        break;
 800694c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800694e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006952:	2b00      	cmp	r3, #0
 8006954:	d10d      	bne.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* Set the source of LPUART1 clock*/
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006956:	4b7c      	ldr	r3, [pc, #496]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800695c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006960:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006968:	4a77      	ldr	r2, [pc, #476]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 800696a:	430b      	orrs	r3, r1
 800696c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006970:	e003      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xa82>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006972:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006976:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800697a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006986:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800698a:	2300      	movs	r3, #0
 800698c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006990:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006994:	460b      	mov	r3, r1
 8006996:	4313      	orrs	r3, r2
 8006998:	d03d      	beq.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    switch (pPeriphClkInit->I2c1ClockSelection)
 800699a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069a6:	d01b      	beq.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0xae8>
 80069a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80069ac:	d814      	bhi.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80069ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069b2:	d017      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xaec>
 80069b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80069b8:	d80e      	bhi.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d014      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 80069be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069c2:	d109      	bne.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0xae0>
        break;

#if defined(RCC_I2C1CLKSOURCE_PLL3R)
      case RCC_I2C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80069c4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80069c8:	3330      	adds	r3, #48	@ 0x30
 80069ca:	4618      	mov	r0, r3
 80069cc:	f004 fa54 	bl	800ae78 <RCCEx_PLL3_Config>
 80069d0:	4603      	mov	r3, r0
 80069d2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I2C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C1CLKSOURCE_PLL3R */
        /* I2C1 clock source config set later after clock selection check */
        break;
 80069d6:	e008      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
      case RCC_I2C1CLKSOURCE_CSI:      /* CSI clock is used as source of I2C1 clock*/
        /* I2C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80069de:	e004      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80069e0:	bf00      	nop
 80069e2:	e002      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80069e4:	bf00      	nop
 80069e6:	e000      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0xaf2>
        break;
 80069e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10d      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0xb16>
    {
      /* Set the source of I2C1 clock*/
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80069f2:	4b55      	ldr	r3, [pc, #340]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 80069f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80069f8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80069fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a04:	4a50      	ldr	r2, [pc, #320]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006a06:	430b      	orrs	r3, r1
 8006a08:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006a0c:	e003      	b.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a12:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006a16:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006a22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a26:	2300      	movs	r3, #0
 8006a28:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a2c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006a30:	460b      	mov	r3, r1
 8006a32:	4313      	orrs	r3, r2
 8006a34:	d03d      	beq.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    switch (pPeriphClkInit->I2c2ClockSelection)
 8006a36:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a3e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a42:	d01b      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xb84>
 8006a44:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006a48:	d814      	bhi.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006a4a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a4e:	d017      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xb88>
 8006a50:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006a54:	d80e      	bhi.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d014      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8006a5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a5e:	d109      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
        break;

#if defined(RCC_I2C2CLKSOURCE_PLL3R)
      case RCC_I2C2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C2*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006a60:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a64:	3330      	adds	r3, #48	@ 0x30
 8006a66:	4618      	mov	r0, r3
 8006a68:	f004 fa06 	bl	800ae78 <RCCEx_PLL3_Config>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I2C2CLKSOURCE_PLL2R:  /* PLL32 is used as clock source for I2C2*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I2C2CLKSOURCE_PLL3R */
        /* I2C2 clock source config set later after clock selection check */
        break;
 8006a72:	e008      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
      case RCC_I2C2CLKSOURCE_CSI:      /* CSI clock is used as source of I2C2 clock*/
        /* I2C2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006a7a:	e004      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006a7c:	bf00      	nop
 8006a7e:	e002      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006a80:	bf00      	nop
 8006a82:	e000      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
        break;
 8006a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a86:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10d      	bne.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xbb2>
    {
      /* Set the source of I2C2 clock*/
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006a8e:	4b2e      	ldr	r3, [pc, #184]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006a90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006a94:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8006a98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aa0:	4a29      	ldr	r2, [pc, #164]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006aa2:	430b      	orrs	r3, r1
 8006aa4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006aa8:	e003      	b.n	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0xbba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aaa:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006aae:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ab2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aba:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006ac8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006acc:	460b      	mov	r3, r1
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	d040      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    switch (pPeriphClkInit->I2c3ClockSelection)
 8006ad2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006ada:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ade:	d01b      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0xc20>
 8006ae0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ae4:	d814      	bhi.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006ae6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006aea:	d017      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006aec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006af0:	d80e      	bhi.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc18>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d014      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006afa:	d109      	bne.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0xc18>
        /* I2C3 clock source config set later after clock selection check */
        break;

      case RCC_I2C3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C3*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006afc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b00:	3330      	adds	r3, #48	@ 0x30
 8006b02:	4618      	mov	r0, r3
 8006b04:	f004 f9b8 	bl	800ae78 <RCCEx_PLL3_Config>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C3 clock source config set later after clock selection check */
        break;
 8006b0e:	e008      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      case RCC_I2C3CLKSOURCE_CSI:      /* CSI clock is used as source of I2C3 clock*/
        /* I2C3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006b16:	e004      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006b18:	bf00      	nop
 8006b1a:	e002      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006b1c:	bf00      	nop
 8006b1e:	e000      	b.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8006b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b22:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d110      	bne.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0xc54>
    {
      /* Set the source of I2C3 clock*/
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006b2a:	4b07      	ldr	r3, [pc, #28]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006b2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b30:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006b34:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006b3c:	4a02      	ldr	r2, [pc, #8]	@ (8006b48 <HAL_RCCEx_PeriphCLKConfig+0xc50>)
 8006b3e:	430b      	orrs	r3, r1
 8006b40:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006b44:	e006      	b.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
 8006b46:	bf00      	nop
 8006b48:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b4c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006b50:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* I2C3 */

#if defined(I2C4)
  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b54:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5c:	2100      	movs	r1, #0
 8006b5e:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 8006b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006b6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4313      	orrs	r3, r2
 8006b72:	d03d      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    switch (pPeriphClkInit->I2c4ClockSelection)
 8006b74:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b7c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006b80:	d01b      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8006b82:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006b86:	d814      	bhi.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006b88:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b8c:	d017      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8006b8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006b92:	d80e      	bhi.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d014      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xcca>
 8006b98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b9c:	d109      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
        /* I2C4 clock source config set later after clock selection check */
        break;

      case RCC_I2C4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I2C4*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006b9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ba2:	3330      	adds	r3, #48	@ 0x30
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f004 f967 	bl	800ae78 <RCCEx_PLL3_Config>
 8006baa:	4603      	mov	r3, r0
 8006bac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* I2C4 clock source config set later after clock selection check */
        break;
 8006bb0:	e008      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
      case RCC_I2C4CLKSOURCE_CSI:      /* CSI clock is used as source of I2C4 clock*/
        /* I2C4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006bb8:	e004      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006bba:	bf00      	nop
 8006bbc:	e002      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006bbe:	bf00      	nop
 8006bc0:	e000      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
        break;
 8006bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bc4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10d      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xcf0>
    {
      /* Set the source of I2C4 clock*/
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006bcc:	4bbe      	ldr	r3, [pc, #760]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006bce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006bd2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006bd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bde:	4aba      	ldr	r2, [pc, #744]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006be0:	430b      	orrs	r3, r1
 8006be2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006be6:	e003      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006bec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I2C4 */

  /*-------------------------- I3C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8006bf0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c00:	2300      	movs	r3, #0
 8006c02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	d035      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xd84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I3C1CLKSOURCE(pPeriphClkInit->I3c1ClockSelection));

    switch (pPeriphClkInit->I3c1ClockSelection)
 8006c10:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c1c:	d015      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xd52>
 8006c1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006c22:	d80e      	bhi.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d012      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xd56>
 8006c28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c2c:	d109      	bne.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
        break;

#if defined(RCC_I3C1CLKSOURCE_PLL3R)
      case RCC_I3C1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for I3C1*/
        /* PLL3  input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006c2e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c32:	3330      	adds	r3, #48	@ 0x30
 8006c34:	4618      	mov	r0, r3
 8006c36:	f004 f91f 	bl	800ae78 <RCCEx_PLL3_Config>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_I3C1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for I3C1*/
        /* PLL2  input clock, parameters M, N & R configuration clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_I3C1CLKSOURCE_PLL3R */
        /* I3C1 clock source config set later after clock selection check */
        break;
 8006c40:	e006      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xd58>
      case RCC_I3C1CLKSOURCE_HSI:      /* HSI clock is used as source of I3C1 clock*/
        /* I3C1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006c48:	e002      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006c4a:	bf00      	nop
 8006c4c:	e000      	b.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0xd58>
        break;
 8006c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c50:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d10d      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
      /* Set the source of I3C1 clock*/
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8006c58:	4b9b      	ldr	r3, [pc, #620]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006c5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006c5e:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8006c62:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c6a:	4a97      	ldr	r2, [pc, #604]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006c6c:	430b      	orrs	r3, r1
 8006c6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006c72:	e003      	b.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0xd84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006c78:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* I3C2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006c7c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c84:	2100      	movs	r1, #0
 8006c86:	f8c7 10c0 	str.w	r1, [r7, #192]	@ 0xc0
 8006c8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006c92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006c96:	460b      	mov	r3, r1
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	d00e      	beq.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(pPeriphClkInit->TimPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 8006c9c:	4b8a      	ldr	r3, [pc, #552]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006c9e:	69db      	ldr	r3, [r3, #28]
 8006ca0:	4a89      	ldr	r2, [pc, #548]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006ca2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006ca6:	61d3      	str	r3, [r2, #28]
 8006ca8:	4b87      	ldr	r3, [pc, #540]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006caa:	69d9      	ldr	r1, [r3, #28]
 8006cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cb0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8006cb4:	4a84      	ldr	r2, [pc, #528]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006cba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006cc6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cca:	2300      	movs	r3, #0
 8006ccc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8006cd0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	d055      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));

    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006cda:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006cde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006ce2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006ce6:	d031      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0xe54>
 8006ce8:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006cec:	d82a      	bhi.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006cee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf2:	d02d      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8006cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cf8:	d824      	bhi.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006cfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cfe:	d029      	beq.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006d00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006d04:	d81e      	bhi.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006d06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d0a:	d011      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0xe38>
 8006d0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006d10:	d818      	bhi.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d020      	beq.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8006d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d1a:	d113      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0xe4c>
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d20:	3308      	adds	r3, #8
 8006d22:	4618      	mov	r0, r3
 8006d24:	f004 f810 	bl	800ad48 <RCCEx_PLL2_Config>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006d2e:	e014      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xe62>

#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
      case RCC_LPTIM1CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM1*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006d30:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d34:	3330      	adds	r3, #48	@ 0x30
 8006d36:	4618      	mov	r0, r3
 8006d38:	f004 f89e 	bl	800ae78 <RCCEx_PLL3_Config>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM1 clock source config set later after clock selection check */
        break;
 8006d42:	e00a      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xe62>
      case RCC_LPTIM1CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM1 clock*/
        /* LPTIM1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006d4a:	e006      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006d4c:	bf00      	nop
 8006d4e:	e004      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006d50:	bf00      	nop
 8006d52:	e002      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006d54:	bf00      	nop
 8006d56:	e000      	b.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0xe62>
        break;
 8006d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d5a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d10d      	bne.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006d62:	4b59      	ldr	r3, [pc, #356]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006d64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006d68:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8006d6c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d74:	4a54      	ldr	r2, [pc, #336]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006d76:	430b      	orrs	r3, r1
 8006d78:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006d7c:	e003      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006d82:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

  /*-------------------------- LPTIM2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006d92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d96:	2300      	movs	r3, #0
 8006d98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d9c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006da0:	460b      	mov	r3, r1
 8006da2:	4313      	orrs	r3, r2
 8006da4:	d055      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));

    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006da6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006daa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006dae:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006db2:	d031      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xf20>
 8006db4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8006db8:	d82a      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006dba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dbe:	d02d      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0xf24>
 8006dc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006dc4:	d824      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006dc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006dca:	d029      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0xf28>
 8006dcc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006dd0:	d81e      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dd6:	d011      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xf04>
 8006dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ddc:	d818      	bhi.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xf18>
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d020      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006de6:	d113      	bne.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xf18>
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006de8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006dec:	3308      	adds	r3, #8
 8006dee:	4618      	mov	r0, r3
 8006df0:	f003 ffaa 	bl	800ad48 <RCCEx_PLL2_Config>
 8006df4:	4603      	mov	r3, r0
 8006df6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006dfa:	e014      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xf2e>

#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
      case RCC_LPTIM2CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM2*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006dfc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e00:	3330      	adds	r3, #48	@ 0x30
 8006e02:	4618      	mov	r0, r3
 8006e04:	f004 f838 	bl	800ae78 <RCCEx_PLL3_Config>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM2 clock source config set later after clock selection check */
        break;
 8006e0e:	e00a      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
      case RCC_LPTIM2CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM2 clock*/
        /* LPTIM2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006e16:	e006      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006e18:	bf00      	nop
 8006e1a:	e004      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006e1c:	bf00      	nop
 8006e1e:	e002      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006e20:	bf00      	nop
 8006e22:	e000      	b.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0xf2e>
        break;
 8006e24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e26:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10d      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0xf52>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006e2e:	4b26      	ldr	r3, [pc, #152]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006e30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006e34:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006e38:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e3c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e40:	4a21      	ldr	r2, [pc, #132]	@ (8006ec8 <HAL_RCCEx_PeriphCLKConfig+0xfd0>)
 8006e42:	430b      	orrs	r3, r1
 8006e44:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006e48:	e003      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0xf5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006e4e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(LPTIM3)
  /*-------------------------- LPTIM3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006e52:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	f8c7 10a8 	str.w	r1, [r7, #168]	@ 0xa8
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	d057      	beq.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x102a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(pPeriphClkInit->Lptim3ClockSelection));

    switch (pPeriphClkInit->Lptim3ClockSelection)
 8006e72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006e76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e7a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e7e:	d033      	beq.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xff0>
 8006e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006e84:	d82c      	bhi.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006e86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e8a:	d02f      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0xff4>
 8006e8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e90:	d826      	bhi.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006e92:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e96:	d02b      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xff8>
 8006e98:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006e9c:	d820      	bhi.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006e9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ea2:	d013      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006ea4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ea8:	d81a      	bhi.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d022      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xffc>
 8006eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006eb2:	d115      	bne.n	8006ee0 <HAL_RCCEx_PeriphCLKConfig+0xfe8>
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM3CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006eb4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006eb8:	3308      	adds	r3, #8
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f003 ff44 	bl	800ad48 <RCCEx_PLL2_Config>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8006ec6:	e016      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
 8006ec8:	44020c00 	.word	0x44020c00

      case RCC_LPTIM3CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM3*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006ecc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ed0:	3330      	adds	r3, #48	@ 0x30
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f003 ffd0 	bl	800ae78 <RCCEx_PLL3_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM3 clock source config set later after clock selection check */
        break;
 8006ede:	e00a      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
      case RCC_LPTIM3CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM3 clock*/
        /* LPTIM3 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006ee6:	e006      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006ee8:	bf00      	nop
 8006eea:	e004      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006eec:	bf00      	nop
 8006eee:	e002      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006ef0:	bf00      	nop
 8006ef2:	e000      	b.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
        break;
 8006ef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10d      	bne.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      /* Set the source of LPTIM3 clock*/
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8006efe:	4bbb      	ldr	r3, [pc, #748]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006f00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006f04:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006f08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f10:	4ab6      	ldr	r2, [pc, #728]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006f12:	430b      	orrs	r3, r1
 8006f14:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006f18:	e003      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x102a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006f1e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM3 */

#if defined(LPTIM4)
  /*-------------------------- LPTIM4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8006f22:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 8006f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f34:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006f38:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	d055      	beq.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x10f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM4CLK(pPeriphClkInit->Lptim4ClockSelection));

    switch (pPeriphClkInit->Lptim4ClockSelection)
 8006f42:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006f4a:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006f4e:	d031      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8006f50:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8006f54:	d82a      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f5a:	d02d      	beq.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x10c0>
 8006f5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f60:	d824      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006f62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f66:	d029      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x10c4>
 8006f68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006f6c:	d81e      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006f6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f72:	d011      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x10a0>
 8006f74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f78:	d818      	bhi.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d020      	beq.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x10c8>
 8006f7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f82:	d113      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x10b4>
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM4CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM4*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f84:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f88:	3308      	adds	r3, #8
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f003 fedc 	bl	800ad48 <RCCEx_PLL2_Config>
 8006f90:	4603      	mov	r3, r0
 8006f92:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006f96:	e014      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>

      case RCC_LPTIM4CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM4*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f98:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006f9c:	3330      	adds	r3, #48	@ 0x30
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f003 ff6a 	bl	800ae78 <RCCEx_PLL3_Config>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM4 clock source config set later after clock selection check */
        break;
 8006faa:	e00a      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
      case RCC_LPTIM4CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM4 clock*/
        /* LPTIM4 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8006fb2:	e006      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006fb4:	bf00      	nop
 8006fb6:	e004      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006fb8:	bf00      	nop
 8006fba:	e002      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006fbc:	bf00      	nop
 8006fbe:	e000      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x10ca>
        break;
 8006fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fc2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10d      	bne.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x10ee>
    {
      /* Set the source of LPTIM4 clock*/
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8006fca:	4b88      	ldr	r3, [pc, #544]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006fcc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8006fd0:	f423 01e0 	bic.w	r1, r3, #7340032	@ 0x700000
 8006fd4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006fd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006fdc:	4a83      	ldr	r2, [pc, #524]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8006fe4:	e003      	b.n	8006fee <HAL_RCCEx_PeriphCLKConfig+0x10f6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8006fea:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM4 */

#if defined(LPTIM5)
  /*-------------------------- LPTIM5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8006fee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8006ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007000:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007004:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007008:	460b      	mov	r3, r1
 800700a:	4313      	orrs	r3, r2
 800700c:	d055      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x11c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM5CLK(pPeriphClkInit->Lptim5ClockSelection));

    switch (pPeriphClkInit->Lptim5ClockSelection)
 800700e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007012:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007016:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800701a:	d031      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x1188>
 800701c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8007020:	d82a      	bhi.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007022:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007026:	d02d      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x118c>
 8007028:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800702c:	d824      	bhi.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800702e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007032:	d029      	beq.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x1190>
 8007034:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007038:	d81e      	bhi.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 800703a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800703e:	d011      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0x116c>
 8007040:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007044:	d818      	bhi.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1180>
 8007046:	2b00      	cmp	r3, #0
 8007048:	d020      	beq.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x1194>
 800704a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800704e:	d113      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x1180>
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM5CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM5*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007050:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007054:	3308      	adds	r3, #8
 8007056:	4618      	mov	r0, r3
 8007058:	f003 fe76 	bl	800ad48 <RCCEx_PLL2_Config>
 800705c:	4603      	mov	r3, r0
 800705e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007062:	e014      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1196>

      case RCC_LPTIM5CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM5*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007064:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007068:	3330      	adds	r3, #48	@ 0x30
 800706a:	4618      	mov	r0, r3
 800706c:	f003 ff04 	bl	800ae78 <RCCEx_PLL3_Config>
 8007070:	4603      	mov	r3, r0
 8007072:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM5 clock source config set later after clock selection check */
        break;
 8007076:	e00a      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1196>
      case RCC_LPTIM5CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM5 clock*/
        /* LPTIM5 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800707e:	e006      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007080:	bf00      	nop
 8007082:	e004      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007084:	bf00      	nop
 8007086:	e002      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 8007088:	bf00      	nop
 800708a:	e000      	b.n	800708e <HAL_RCCEx_PeriphCLKConfig+0x1196>
        break;
 800708c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800708e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007092:	2b00      	cmp	r3, #0
 8007094:	d10d      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
      /* Set the source of LPTIM5 clock*/
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8007096:	4b55      	ldr	r3, [pc, #340]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007098:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800709c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80070a0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80070a8:	4a50      	ldr	r2, [pc, #320]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80070aa:	430b      	orrs	r3, r1
 80070ac:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 80070b0:	e003      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80070b6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM5 */

#if defined(LPTIM6)
  /*-------------------------- LPTIM6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80070ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	2100      	movs	r1, #0
 80070c4:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80070c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80070d0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80070d4:	460b      	mov	r3, r1
 80070d6:	4313      	orrs	r3, r2
 80070d8:	d055      	beq.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x128e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM6CLK(pPeriphClkInit->Lptim6ClockSelection));

    switch (pPeriphClkInit->Lptim6ClockSelection)
 80070da:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80070de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80070e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070e6:	d031      	beq.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x1254>
 80070e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80070ec:	d82a      	bhi.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80070ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f2:	d02d      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x1258>
 80070f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070f8:	d824      	bhi.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 80070fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80070fe:	d029      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007100:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007104:	d81e      	bhi.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800710a:	d011      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x1238>
 800710c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007110:	d818      	bhi.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x124c>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d020      	beq.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x1260>
 8007116:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800711a:	d113      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x124c>
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      case RCC_LPTIM6CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for LPTIM6*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800711c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007120:	3308      	adds	r3, #8
 8007122:	4618      	mov	r0, r3
 8007124:	f003 fe10 	bl	800ad48 <RCCEx_PLL2_Config>
 8007128:	4603      	mov	r3, r0
 800712a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 800712e:	e014      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1262>

      case RCC_LPTIM6CLKSOURCE_PLL3R:  /* PLL3 is used as clock source for LPTIM6*/
        /* PLL3 R input clock, parameters M, N & R configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007130:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007134:	3330      	adds	r3, #48	@ 0x30
 8007136:	4618      	mov	r0, r3
 8007138:	f003 fe9e 	bl	800ae78 <RCCEx_PLL3_Config>
 800713c:	4603      	mov	r3, r0
 800713e:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* LPTIM6 clock source config set later after clock selection check */
        break;
 8007142:	e00a      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1262>
      case RCC_LPTIM6CLKSOURCE_CLKP:      /* CLKP is used as source of LPTIM6 clock*/
        /* LPTIM6 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800714a:	e006      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 800714c:	bf00      	nop
 800714e:	e004      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007150:	bf00      	nop
 8007152:	e002      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007154:	bf00      	nop
 8007156:	e000      	b.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x1262>
        break;
 8007158:	bf00      	nop
    }

    if (ret == HAL_OK)
 800715a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10d      	bne.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x1286>
    {
      /* Set the source of LPTIM6 clock*/
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8007162:	4b22      	ldr	r3, [pc, #136]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007164:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007168:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800716c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007170:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007174:	4a1d      	ldr	r2, [pc, #116]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 8007176:	430b      	orrs	r3, r1
 8007178:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800717c:	e003      	b.n	8007186 <HAL_RCCEx_PeriphCLKConfig+0x128e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800717e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007182:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* LPTIM6 */

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007186:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007192:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007196:	2300      	movs	r3, #0
 8007198:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800719c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80071a0:	460b      	mov	r3, r1
 80071a2:	4313      	orrs	r3, r2
 80071a4:	d055      	beq.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x135a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80071a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071aa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80071ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071b2:	d035      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x1328>
 80071b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80071b8:	d82e      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80071ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071be:	d031      	beq.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0x132c>
 80071c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80071c4:	d828      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80071c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071ca:	d01b      	beq.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80071cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80071d0:	d822      	bhi.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x1320>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x12e6>
 80071d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071da:	d009      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x12f8>
 80071dc:	e01c      	b.n	8007218 <HAL_RCCEx_PeriphCLKConfig+0x1320>
    {
      case RCC_SAI1CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071de:	4b03      	ldr	r3, [pc, #12]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80071e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e2:	4a02      	ldr	r2, [pc, #8]	@ (80071ec <HAL_RCCEx_PeriphCLKConfig+0x12f4>)
 80071e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071e8:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80071ea:	e01c      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x132e>
 80071ec:	44020c00 	.word	0x44020c00

      case RCC_SAI1CLKSOURCE_PLL2P:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80071f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80071f4:	3308      	adds	r3, #8
 80071f6:	4618      	mov	r0, r3
 80071f8:	f003 fda6 	bl	800ad48 <RCCEx_PLL2_Config>
 80071fc:	4603      	mov	r3, r0
 80071fe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007202:	e010      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x132e>

      case RCC_SAI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007204:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007208:	3330      	adds	r3, #48	@ 0x30
 800720a:	4618      	mov	r0, r3
 800720c:	f003 fe34 	bl	800ae78 <RCCEx_PLL3_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007216:	e006      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x132e>
      case RCC_SAI1CLKSOURCE_CLKP:      /* CLKP is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800721e:	e002      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007220:	bf00      	nop
 8007222:	e000      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0x132e>
        break;
 8007224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007226:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10d      	bne.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x1352>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800722e:	4bc3      	ldr	r3, [pc, #780]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007234:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8007238:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800723c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007240:	4abe      	ldr	r2, [pc, #760]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007242:	430b      	orrs	r3, r1
 8007244:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8007248:	e003      	b.n	8007252 <HAL_RCCEx_PeriphCLKConfig+0x135a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800724a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800724e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SAI1*/

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8007252:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800725a:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800725e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007262:	2300      	movs	r3, #0
 8007264:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007268:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800726c:	460b      	mov	r3, r1
 800726e:	4313      	orrs	r3, r2
 8007270:	d051      	beq.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x141e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007272:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007276:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800727a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800727e:	d033      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 8007280:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007284:	d82c      	bhi.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007286:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800728a:	d02d      	beq.n	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
 800728c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8007290:	d826      	bhi.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 8007292:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007296:	d019      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x13d4>
 8007298:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800729c:	d820      	bhi.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80072a2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80072a6:	d007      	beq.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x13c0>
 80072a8:	e01a      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x13e8>
    {
      case RCC_SAI2CLKSOURCE_PLL1Q:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072aa:	4ba4      	ldr	r3, [pc, #656]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80072ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ae:	4aa3      	ldr	r2, [pc, #652]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80072b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072b4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80072b6:	e018      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80072b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072bc:	3308      	adds	r3, #8
 80072be:	4618      	mov	r0, r3
 80072c0:	f003 fd42 	bl	800ad48 <RCCEx_PLL2_Config>
 80072c4:	4603      	mov	r3, r0
 80072c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80072ca:	e00e      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x13f2>

      case RCC_SAI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80072cc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80072d0:	3330      	adds	r3, #48	@ 0x30
 80072d2:	4618      	mov	r0, r3
 80072d4:	f003 fdd0 	bl	800ae78 <RCCEx_PLL3_Config>
 80072d8:	4603      	mov	r3, r0
 80072da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SAI2 clock source config set later after clock selection check */
        break;
 80072de:	e004      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x13f2>
      case RCC_SAI2CLKSOURCE_CLKP:      /* CLKP is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80072e6:	e000      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x13f2>
        break;
 80072e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80072ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10d      	bne.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x1416>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80072f2:	4b92      	ldr	r3, [pc, #584]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80072f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80072f8:	f423 1160 	bic.w	r1, r3, #3670016	@ 0x380000
 80072fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007300:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007304:	4a8d      	ldr	r2, [pc, #564]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007306:	430b      	orrs	r3, r1
 8007308:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800730c:	e003      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0x141e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800730e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007312:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* SAI2*/

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007316:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800731a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007322:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007324:	2300      	movs	r3, #0
 8007326:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007328:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800732c:	460b      	mov	r3, r1
 800732e:	4313      	orrs	r3, r2
 8007330:	d032      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8007332:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007336:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800733a:	2b05      	cmp	r3, #5
 800733c:	d80f      	bhi.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x1466>
 800733e:	2b03      	cmp	r3, #3
 8007340:	d211      	bcs.n	8007366 <HAL_RCCEx_PeriphCLKConfig+0x146e>
 8007342:	2b01      	cmp	r3, #1
 8007344:	d911      	bls.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x1472>
 8007346:	2b02      	cmp	r3, #2
 8007348:	d109      	bne.n	800735e <HAL_RCCEx_PeriphCLKConfig+0x1466>
        /* ADCDAC clock source config set later after clock selection check */
        break;

      case RCC_ADCDACCLKSOURCE_PLL2R:
        /* PLL2 input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800734a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800734e:	3308      	adds	r3, #8
 8007350:	4618      	mov	r0, r3
 8007352:	f003 fcf9 	bl	800ad48 <RCCEx_PLL2_Config>
 8007356:	4603      	mov	r3, r0
 8007358:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800735c:	e006      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        /* ADCDAC clock source configuration done later after clock selection check */
        break;


      default:
        ret = HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007364:	e002      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 8007366:	bf00      	nop
 8007368:	e000      	b.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x1474>
        break;
 800736a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10d      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x1498>
    {
      /* Configure the ADCDAC interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007374:	4b71      	ldr	r3, [pc, #452]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007376:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800737a:	f023 0107 	bic.w	r1, r3, #7
 800737e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007382:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007386:	4a6d      	ldr	r2, [pc, #436]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007388:	430b      	orrs	r3, r1
 800738a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800738e:	e003      	b.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x14a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007390:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007394:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- DAC low-power clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8007398:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a0:	2100      	movs	r1, #0
 80073a2:	6739      	str	r1, [r7, #112]	@ 0x70
 80073a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80073aa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80073ae:	460b      	mov	r3, r1
 80073b0:	4313      	orrs	r3, r2
 80073b2:	d024      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DACLPCLKSOURCE(pPeriphClkInit->DacLowPowerClockSelection));

    switch (pPeriphClkInit->DacLowPowerClockSelection)
 80073b4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x14d4>
 80073c0:	2b08      	cmp	r3, #8
 80073c2:	d005      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x14d8>
        /* LSI is used as clock source for DAC low-power clock */
        /* DAC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80073ca:	e002      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80073cc:	bf00      	nop
 80073ce:	e000      	b.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x14da>
        break;
 80073d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073d2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10d      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x14fe>
    {
      /* Configure the DAC low-power interface clock source */
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80073da:	4b58      	ldr	r3, [pc, #352]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80073dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80073e0:	f023 0108 	bic.w	r1, r3, #8
 80073e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80073e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80073ec:	4a53      	ldr	r2, [pc, #332]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80073ee:	430b      	orrs	r3, r1
 80073f0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80073f4:	e003      	b.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x1506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073f6:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80073fa:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80073fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007406:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800740a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800740c:	2300      	movs	r3, #0
 800740e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007410:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007414:	460b      	mov	r3, r1
 8007416:	4313      	orrs	r3, r2
 8007418:	f000 80b9 	beq.w	800758e <HAL_RCCEx_PeriphCLKConfig+0x1696>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800741c:	4b48      	ldr	r3, [pc, #288]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800741e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007420:	4a47      	ldr	r2, [pc, #284]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 8007422:	f043 0301 	orr.w	r3, r3, #1
 8007426:	6253      	str	r3, [r2, #36]	@ 0x24

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007428:	f7fb fbb2 	bl	8002b90 <HAL_GetTick>
 800742c:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8007430:	e00b      	b.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x1552>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007432:	f7fb fbad 	bl	8002b90 <HAL_GetTick>
 8007436:	4602      	mov	r2, r0
 8007438:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b02      	cmp	r3, #2
 8007440:	d903      	bls.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x1552>
      {
        ret = HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007448:	e005      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x155e>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800744a:	4b3d      	ldr	r3, [pc, #244]	@ (8007540 <HAL_RCCEx_PeriphCLKConfig+0x1648>)
 800744c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0ed      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x153a>
      }
    }

    if (ret == HAL_OK)
 8007456:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800745a:	2b00      	cmp	r3, #0
 800745c:	f040 8093 	bne.w	8007586 <HAL_RCCEx_PeriphCLKConfig+0x168e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007460:	4b36      	ldr	r3, [pc, #216]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800746a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800746e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d023      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x15c6>
 8007476:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800747a:	f8d3 20f8 	ldr.w	r2, [r3, #248]	@ 0xf8
 800747e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8007482:	4293      	cmp	r3, r2
 8007484:	d01b      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x15c6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007486:	4b2d      	ldr	r3, [pc, #180]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007488:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800748c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007490:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007494:	4b29      	ldr	r3, [pc, #164]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007496:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800749a:	4a28      	ldr	r2, [pc, #160]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800749c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074a0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074a4:	4b25      	ldr	r3, [pc, #148]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80074a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074aa:	4a24      	ldr	r2, [pc, #144]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80074ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074b0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80074b4:	4a21      	ldr	r2, [pc, #132]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80074b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80074ba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80074be:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d019      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x1606>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ca:	f7fb fb61 	bl	8002b90 <HAL_GetTick>
 80074ce:	f8c7 0154 	str.w	r0, [r7, #340]	@ 0x154

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074d2:	e00d      	b.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074d4:	f7fb fb5c 	bl	8002b90 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80074de:	1ad2      	subs	r2, r2, r3
 80074e0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d903      	bls.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x15f8>
          {
            ret = HAL_TIMEOUT;
 80074e8:	2303      	movs	r3, #3
 80074ea:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
            break;
 80074ee:	e006      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x1606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074f0:	4b12      	ldr	r3, [pc, #72]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 80074f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0ea      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
          }
        }
      }

      if (ret == HAL_OK)
 80074fe:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007502:	2b00      	cmp	r3, #0
 8007504:	d13a      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1684>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007506:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800750a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800750e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007512:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007516:	d115      	bne.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x164c>
 8007518:	4b08      	ldr	r3, [pc, #32]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007520:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007524:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8007528:	091b      	lsrs	r3, r3, #4
 800752a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800752e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8007532:	4a02      	ldr	r2, [pc, #8]	@ (800753c <HAL_RCCEx_PeriphCLKConfig+0x1644>)
 8007534:	430b      	orrs	r3, r1
 8007536:	61d3      	str	r3, [r2, #28]
 8007538:	e00a      	b.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x1658>
 800753a:	bf00      	nop
 800753c:	44020c00 	.word	0x44020c00
 8007540:	44020800 	.word	0x44020800
 8007544:	4b9f      	ldr	r3, [pc, #636]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	4a9e      	ldr	r2, [pc, #632]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800754a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800754e:	61d3      	str	r3, [r2, #28]
 8007550:	4b9c      	ldr	r3, [pc, #624]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007552:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007556:	4a9b      	ldr	r2, [pc, #620]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800755c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8007560:	4b98      	ldr	r3, [pc, #608]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007562:	f8d3 10f0 	ldr.w	r1, [r3, #240]	@ 0xf0
 8007566:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800756a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 800756e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007572:	4a94      	ldr	r2, [pc, #592]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007574:	430b      	orrs	r3, r1
 8007576:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800757a:	e008      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800757c:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007580:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
 8007584:	e003      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x1696>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007586:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800758a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800758e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800759a:	663b      	str	r3, [r7, #96]	@ 0x60
 800759c:	2300      	movs	r3, #0
 800759e:	667b      	str	r3, [r7, #100]	@ 0x64
 80075a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80075a4:	460b      	mov	r3, r1
 80075a6:	4313      	orrs	r3, r2
 80075a8:	d035      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x171e>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80075aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075ae:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80075b2:	2b30      	cmp	r3, #48	@ 0x30
 80075b4:	d014      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x16e8>
 80075b6:	2b30      	cmp	r3, #48	@ 0x30
 80075b8:	d80e      	bhi.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80075ba:	2b20      	cmp	r3, #32
 80075bc:	d012      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x16ec>
 80075be:	2b20      	cmp	r3, #32
 80075c0:	d80a      	bhi.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d010      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80075c6:	2b10      	cmp	r3, #16
 80075c8:	d106      	bne.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0x16e0>
        /* RNG clock source configuration done later after clock selection check */
        break;

      case RCC_RNGCLKSOURCE_PLL1Q: /* PLL1 is used as clock source for RNG*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ca:	4b7e      	ldr	r3, [pc, #504]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80075cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ce:	4a7d      	ldr	r2, [pc, #500]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80075d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075d4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* RNG clock source configuration done later after clock selection check */
        break;
 80075d6:	e008      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x16f2>

        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80075d8:	2301      	movs	r3, #1
 80075da:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80075de:	e004      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80075e0:	bf00      	nop
 80075e2:	e002      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80075e4:	bf00      	nop
 80075e6:	e000      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x16f2>
        break;
 80075e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ea:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10d      	bne.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x1716>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80075f2:	4b74      	ldr	r3, [pc, #464]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80075f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80075f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80075fc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007600:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007604:	4a6f      	ldr	r2, [pc, #444]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007606:	430b      	orrs	r3, r1
 8007608:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800760c:	e003      	b.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x171e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007612:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SDMMC1)
  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007616:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007622:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007624:	2300      	movs	r3, #0
 8007626:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007628:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800762c:	460b      	mov	r3, r1
 800762e:	4313      	orrs	r3, r2
 8007630:	d033      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(pPeriphClkInit->Sdmmc1ClockSelection));

    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8007632:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007636:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800763a:	2b00      	cmp	r3, #0
 800763c:	d002      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x174c>
 800763e:	2b40      	cmp	r3, #64	@ 0x40
 8007640:	d007      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x175a>
 8007642:	e010      	b.n	8007666 <HAL_RCCEx_PeriphCLKConfig+0x176e>
    {
      case RCC_SDMMC1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC1 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007644:	4b5f      	ldr	r3, [pc, #380]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	4a5e      	ldr	r2, [pc, #376]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800764a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800764e:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007650:	e00d      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      case RCC_SDMMC1CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC1 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007652:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007656:	3308      	adds	r3, #8
 8007658:	4618      	mov	r0, r3
 800765a:	f003 fb75 	bl	800ad48 <RCCEx_PLL2_Config>
 800765e:	4603      	mov	r3, r0
 8007660:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC1 kernel clock source config set later after clock selection check */
        break;
 8007664:	e003      	b.n	800766e <HAL_RCCEx_PeriphCLKConfig+0x1776>

      default:
        ret = HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800766c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800766e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007672:	2b00      	cmp	r3, #0
 8007674:	d10d      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x179a>
    {
      /* Configure the SDMMC1 clock source */
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8007676:	4b53      	ldr	r3, [pc, #332]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007678:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800767c:	f023 0140 	bic.w	r1, r3, #64	@ 0x40
 8007680:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007684:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8007688:	4a4e      	ldr	r2, [pc, #312]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800768a:	430b      	orrs	r3, r1
 800768c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007690:	e003      	b.n	800769a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007692:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007696:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SDMMC1 */

#if defined(SDMMC2)
  /*-------------------------- SDMMC2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800769a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800769e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80076a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80076a8:	2300      	movs	r3, #0
 80076aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80076ac:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80076b0:	460b      	mov	r3, r1
 80076b2:	4313      	orrs	r3, r2
 80076b4:	d033      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x1826>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(pPeriphClkInit->Sdmmc2ClockSelection));

    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80076b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076ba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x17d0>
 80076c2:	2b80      	cmp	r3, #128	@ 0x80
 80076c4:	d007      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x17de>
 80076c6:	e010      	b.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x17f2>
    {
      case RCC_SDMMC2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SDMMC2 kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c8:	4b3e      	ldr	r3, [pc, #248]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80076ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076cc:	4a3d      	ldr	r2, [pc, #244]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80076ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076d2:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80076d4:	e00d      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      case RCC_SDMMC2CLKSOURCE_PLL2R:  /* PLL2 is used as clock source for SDMMC2 kernel clock*/
        /* PLL2R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80076da:	3308      	adds	r3, #8
 80076dc:	4618      	mov	r0, r3
 80076de:	f003 fb33 	bl	800ad48 <RCCEx_PLL2_Config>
 80076e2:	4603      	mov	r3, r0
 80076e4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* SDMMC2 kernel clock source config set later after clock selection check */
        break;
 80076e8:	e003      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>

      default:
        ret = HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80076f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076f2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10d      	bne.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x181e>
    {
      /* Configure the SDMMC2 clock source */
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80076fa:	4b32      	ldr	r3, [pc, #200]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80076fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007700:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8007704:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007708:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800770c:	4a2d      	ldr	r2, [pc, #180]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 800770e:	430b      	orrs	r3, r1
 8007710:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8007714:	e003      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x1826>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007716:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 800771a:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }
#endif /* SDMMC2 */

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800771e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007726:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 800772a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800772c:	2300      	movs	r3, #0
 800772e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007730:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007734:	460b      	mov	r3, r1
 8007736:	4313      	orrs	r3, r2
 8007738:	d04a      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    switch (pPeriphClkInit->Spi1ClockSelection)
 800773a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800773e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007742:	2b04      	cmp	r3, #4
 8007744:	d827      	bhi.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x189e>
 8007746:	a201      	add	r2, pc, #4	@ (adr r2, 800774c <HAL_RCCEx_PeriphCLKConfig+0x1854>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	08007761 	.word	0x08007761
 8007750:	0800776f 	.word	0x0800776f
 8007754:	08007783 	.word	0x08007783
 8007758:	0800779f 	.word	0x0800779f
 800775c:	0800779f 	.word	0x0800779f
    {
      case RCC_SPI1CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI1 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007760:	4b18      	ldr	r3, [pc, #96]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007764:	4a17      	ldr	r2, [pc, #92]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 8007766:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800776a:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 800776c:	e018      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

      case RCC_SPI1CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800776e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007772:	3308      	adds	r3, #8
 8007774:	4618      	mov	r0, r3
 8007776:	f003 fae7 	bl	800ad48 <RCCEx_PLL2_Config>
 800777a:	4603      	mov	r3, r0
 800777c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007780:	e00e      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>

#if defined(RCC_SPI1CLKSOURCE_PLL3P)
      case RCC_SPI1CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI1 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007782:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007786:	3330      	adds	r3, #48	@ 0x30
 8007788:	4618      	mov	r0, r3
 800778a:	f003 fb75 	bl	800ae78 <RCCEx_PLL3_Config>
 800778e:	4603      	mov	r3, r0
 8007790:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI1 clock source configuration done later after clock selection check */
        break;
 8007794:	e004      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1 clock */
        /* SPI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 800779c:	e000      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x18a8>
        break;
 800779e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077a0:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10f      	bne.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    {
      /* Configure the SPI1 clock source */
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80077a8:	4b06      	ldr	r3, [pc, #24]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80077aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077ae:	f023 0107 	bic.w	r1, r3, #7
 80077b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80077ba:	4a02      	ldr	r2, [pc, #8]	@ (80077c4 <HAL_RCCEx_PeriphCLKConfig+0x18cc>)
 80077bc:	430b      	orrs	r3, r1
 80077be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80077c2:	e005      	b.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
 80077c4:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80077cc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80077d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80077dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80077de:	2300      	movs	r3, #0
 80077e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80077e2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80077e6:	460b      	mov	r3, r1
 80077e8:	4313      	orrs	r3, r2
 80077ea:	f000 8081 	beq.w	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    switch (pPeriphClkInit->Spi2ClockSelection)
 80077ee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80077f2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	d85f      	bhi.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x19c2>
 80077fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007800 <HAL_RCCEx_PeriphCLKConfig+0x1908>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	08007885 	.word	0x08007885
 8007804:	080078bb 	.word	0x080078bb
 8007808:	080078bb 	.word	0x080078bb
 800780c:	080078bb 	.word	0x080078bb
 8007810:	080078bb 	.word	0x080078bb
 8007814:	080078bb 	.word	0x080078bb
 8007818:	080078bb 	.word	0x080078bb
 800781c:	080078bb 	.word	0x080078bb
 8007820:	08007893 	.word	0x08007893
 8007824:	080078bb 	.word	0x080078bb
 8007828:	080078bb 	.word	0x080078bb
 800782c:	080078bb 	.word	0x080078bb
 8007830:	080078bb 	.word	0x080078bb
 8007834:	080078bb 	.word	0x080078bb
 8007838:	080078bb 	.word	0x080078bb
 800783c:	080078bb 	.word	0x080078bb
 8007840:	080078a7 	.word	0x080078a7
 8007844:	080078bb 	.word	0x080078bb
 8007848:	080078bb 	.word	0x080078bb
 800784c:	080078bb 	.word	0x080078bb
 8007850:	080078bb 	.word	0x080078bb
 8007854:	080078bb 	.word	0x080078bb
 8007858:	080078bb 	.word	0x080078bb
 800785c:	080078bb 	.word	0x080078bb
 8007860:	080078c3 	.word	0x080078c3
 8007864:	080078bb 	.word	0x080078bb
 8007868:	080078bb 	.word	0x080078bb
 800786c:	080078bb 	.word	0x080078bb
 8007870:	080078bb 	.word	0x080078bb
 8007874:	080078bb 	.word	0x080078bb
 8007878:	080078bb 	.word	0x080078bb
 800787c:	080078bb 	.word	0x080078bb
 8007880:	080078c3 	.word	0x080078c3
    {
      case RCC_SPI2CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI2 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007884:	4bab      	ldr	r3, [pc, #684]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007888:	4aaa      	ldr	r2, [pc, #680]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800788a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800788e:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 8007890:	e018      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

      case RCC_SPI2CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007892:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007896:	3308      	adds	r3, #8
 8007898:	4618      	mov	r0, r3
 800789a:	f003 fa55 	bl	800ad48 <RCCEx_PLL2_Config>
 800789e:	4603      	mov	r3, r0
 80078a0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80078a4:	e00e      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>

#if defined(RCC_SPI2CLKSOURCE_PLL3P)
      case RCC_SPI2CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI2 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80078a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078aa:	3330      	adds	r3, #48	@ 0x30
 80078ac:	4618      	mov	r0, r3
 80078ae:	f003 fae3 	bl	800ae78 <RCCEx_PLL3_Config>
 80078b2:	4603      	mov	r3, r0
 80078b4:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI2 clock source configuration done later after clock selection check */
        break;
 80078b8:	e004      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        /* HSI, HSE, or CSI oscillator is used as source of SPI2 clock */
        /* SPI2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 80078c0:	e000      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x19cc>
        break;
 80078c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078c4:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10d      	bne.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
    {
      /* Configure the SPI2 clock source */
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80078cc:	4b99      	ldr	r3, [pc, #612]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80078ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80078d2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80078d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80078de:	4a95      	ldr	r2, [pc, #596]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 80078e0:	430b      	orrs	r3, r1
 80078e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80078e6:	e003      	b.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80078ec:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }

  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80078f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80078fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078fe:	2300      	movs	r3, #0
 8007900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007902:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007906:	460b      	mov	r3, r1
 8007908:	4313      	orrs	r3, r2
 800790a:	d04e      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    switch (pPeriphClkInit->Spi3ClockSelection)
 800790c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007910:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007918:	d02e      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
 800791a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800791e:	d827      	bhi.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007920:	2bc0      	cmp	r3, #192	@ 0xc0
 8007922:	d02b      	beq.n	800797c <HAL_RCCEx_PeriphCLKConfig+0x1a84>
 8007924:	2bc0      	cmp	r3, #192	@ 0xc0
 8007926:	d823      	bhi.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007928:	2b80      	cmp	r3, #128	@ 0x80
 800792a:	d017      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x1a64>
 800792c:	2b80      	cmp	r3, #128	@ 0x80
 800792e:	d81f      	bhi.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
 8007930:	2b00      	cmp	r3, #0
 8007932:	d002      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x1a42>
 8007934:	2b40      	cmp	r3, #64	@ 0x40
 8007936:	d007      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x1a50>
 8007938:	e01a      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x1a78>
    {
      case RCC_SPI3CLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for SPI3 */
        /* Enable SPI Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800793a:	4b7e      	ldr	r3, [pc, #504]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800793c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800793e:	4a7d      	ldr	r2, [pc, #500]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007944:	6293      	str	r3, [r2, #40]	@ 0x28

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 8007946:	e01a      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

      case RCC_SPI3CLKSOURCE_PLL2P: /* PLL2 is used as clock source for SPI3*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007948:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800794c:	3308      	adds	r3, #8
 800794e:	4618      	mov	r0, r3
 8007950:	f003 f9fa 	bl	800ad48 <RCCEx_PLL2_Config>
 8007954:	4603      	mov	r3, r0
 8007956:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800795a:	e010      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x1a86>

#if defined(RCC_SPI3CLKSOURCE_PLL3P)
      case RCC_SPI3CLKSOURCE_PLL3P:  /* PLL3 is used as clock source for SPI3 */
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800795c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007960:	3330      	adds	r3, #48	@ 0x30
 8007962:	4618      	mov	r0, r3
 8007964:	f003 fa88 	bl	800ae78 <RCCEx_PLL3_Config>
 8007968:	4603      	mov	r3, r0
 800796a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI3 clock source configuration done later after clock selection check */
        break;
 800796e:	e006      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        /* HSI, HSE, or CSI oscillator is used as source of SPI3 clock */
        /* SPI3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007976:	e002      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 8007978:	bf00      	nop
 800797a:	e000      	b.n	800797e <HAL_RCCEx_PeriphCLKConfig+0x1a86>
        break;
 800797c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800797e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10d      	bne.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x1aaa>
    {
      /* Configure the SPI3 clock source */
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007986:	4b6b      	ldr	r3, [pc, #428]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800798c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007990:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007998:	4a66      	ldr	r2, [pc, #408]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 800799a:	430b      	orrs	r3, r1
 800799c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80079a0:	e003      	b.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x1ab2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a2:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 80079a6:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a

  }

#if defined(SPI4)
  /*-------------------------- SPI4 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80079aa:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80079b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80079b8:	2300      	movs	r3, #0
 80079ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80079bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80079c0:	460b      	mov	r3, r1
 80079c2:	4313      	orrs	r3, r2
 80079c4:	d055      	beq.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI4CLKSOURCE(pPeriphClkInit->Spi4ClockSelection));

    switch (pPeriphClkInit->Spi4ClockSelection)
 80079c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80079ce:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80079d2:	d031      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x1b40>
 80079d4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80079d8:	d82a      	bhi.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80079da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079de:	d02d      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x1b44>
 80079e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80079e4:	d824      	bhi.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80079e6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80079ea:	d029      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x1b48>
 80079ec:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80079f0:	d81e      	bhi.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80079f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079f6:	d011      	beq.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x1b24>
 80079f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079fc:	d818      	bhi.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d020      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>
 8007a02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a06:	d113      	bne.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x1b38>
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI4CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI4*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007a08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f003 f99a 	bl	800ad48 <RCCEx_PLL2_Config>
 8007a14:	4603      	mov	r3, r0
 8007a16:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007a1a:	e014      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>

      case RCC_SPI4CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI4 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007a1c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a20:	3330      	adds	r3, #48	@ 0x30
 8007a22:	4618      	mov	r0, r3
 8007a24:	f003 fa28 	bl	800ae78 <RCCEx_PLL3_Config>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI4 clock source configuration done later after clock selection check */
        break;
 8007a2e:	e00a      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        /*  HSE oscillator is used as source of SPI4 clock */
        /* SPI4 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007a36:	e006      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007a38:	bf00      	nop
 8007a3a:	e004      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007a3c:	bf00      	nop
 8007a3e:	e002      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007a40:	bf00      	nop
 8007a42:	e000      	b.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x1b4e>
        break;
 8007a44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a46:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10d      	bne.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x1b72>
    {
      /* Configure the SPI4 clock source */
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007a4e:	4b39      	ldr	r3, [pc, #228]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007a54:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8007a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a5c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8007a60:	4a34      	ldr	r2, [pc, #208]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007a62:	430b      	orrs	r3, r1
 8007a64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007a68:	e003      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x1b7a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a6a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007a6e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI4 */

#if defined(SPI5)
  /*-------------------------- SPI5 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8007a72:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a80:	2300      	movs	r3, #0
 8007a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	d058      	beq.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI5CLKSOURCE(pPeriphClkInit->Spi5ClockSelection));

    switch (pPeriphClkInit->Spi5ClockSelection)
 8007a8e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007a96:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007a9a:	d031      	beq.n	8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1c08>
 8007a9c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8007aa0:	d82a      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007aa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007aa6:	d02d      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x1c0c>
 8007aa8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007aac:	d824      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007aae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ab2:	d029      	beq.n	8007b08 <HAL_RCCEx_PeriphCLKConfig+0x1c10>
 8007ab4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007ab8:	d81e      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007abe:	d011      	beq.n	8007ae4 <HAL_RCCEx_PeriphCLKConfig+0x1bec>
 8007ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ac4:	d818      	bhi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d020      	beq.n	8007b0c <HAL_RCCEx_PeriphCLKConfig+0x1c14>
 8007aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ace:	d113      	bne.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x1c00>
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI5CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI5*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ad0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f003 f936 	bl	800ad48 <RCCEx_PLL2_Config>
 8007adc:	4603      	mov	r3, r0
 8007ade:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007ae2:	e014      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>

      case RCC_SPI5CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI5 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007ae4:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ae8:	3330      	adds	r3, #48	@ 0x30
 8007aea:	4618      	mov	r0, r3
 8007aec:	f003 f9c4 	bl	800ae78 <RCCEx_PLL3_Config>
 8007af0:	4603      	mov	r3, r0
 8007af2:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI5 clock source configuration done later after clock selection check */
        break;
 8007af6:	e00a      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        /*  HSE oscillator is used as source of SPI5 clock */
        /* SPI5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007afe:	e006      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007b00:	bf00      	nop
 8007b02:	e004      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007b04:	bf00      	nop
 8007b06:	e002      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007b08:	bf00      	nop
 8007b0a:	e000      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x1c16>
        break;
 8007b0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b0e:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d110      	bne.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1c40>
    {
      /* Configure the SPI5 clock source */
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8007b16:	4b07      	ldr	r3, [pc, #28]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b1c:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 8007b20:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b28:	4902      	ldr	r1, [pc, #8]	@ (8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1c3c>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007b30:	e006      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x1c48>
 8007b32:	bf00      	nop
 8007b34:	44020c00 	.word	0x44020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b38:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007b3c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI5 */

#if defined(SPI6)
  /*-------------------------- SPI6 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007b40:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b48:	2100      	movs	r1, #0
 8007b4a:	6239      	str	r1, [r7, #32]
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b52:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007b56:	460b      	mov	r3, r1
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	d055      	beq.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
  {

    /* Check the parameters */
    assert_param(IS_RCC_SPI6CLKSOURCE(pPeriphClkInit->Spi6ClockSelection));

    switch (pPeriphClkInit->Spi6ClockSelection)
 8007b5c:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007b64:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007b68:	d031      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x1cd6>
 8007b6a:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 8007b6e:	d82a      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007b70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b74:	d02d      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x1cda>
 8007b76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b7a:	d824      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007b7c:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007b80:	d029      	beq.n	8007bd6 <HAL_RCCEx_PeriphCLKConfig+0x1cde>
 8007b82:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8007b86:	d81e      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007b88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b8c:	d011      	beq.n	8007bb2 <HAL_RCCEx_PeriphCLKConfig+0x1cba>
 8007b8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b92:	d818      	bhi.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d020      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x1ce2>
 8007b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b9c:	d113      	bne.n	8007bc6 <HAL_RCCEx_PeriphCLKConfig+0x1cce>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2Q: /* PLL2 is used as clock source for SPI6*/
        /* PLL2 Q input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007b9e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ba2:	3308      	adds	r3, #8
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f003 f8cf 	bl	800ad48 <RCCEx_PLL2_Config>
 8007baa:	4603      	mov	r3, r0
 8007bac:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007bb0:	e014      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>

      case RCC_SPI6CLKSOURCE_PLL3Q:  /* PLL3 is used as clock source for SPI6 */
        /* PLL3 Q input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007bb2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bb6:	3330      	adds	r3, #48	@ 0x30
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f003 f95d 	bl	800ae78 <RCCEx_PLL3_Config>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007bc4:	e00a      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        /*  HSE oscillator is used as source of SPI6 clock */
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007bcc:	e006      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007bce:	bf00      	nop
 8007bd0:	e004      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007bd2:	bf00      	nop
 8007bd4:	e002      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007bd6:	bf00      	nop
 8007bd8:	e000      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
        break;
 8007bda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bdc:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10d      	bne.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
    {
      /* Configure the SPI6 clock source */
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8007be4:	4b88      	ldr	r3, [pc, #544]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bea:	f423 3260 	bic.w	r2, r3, #229376	@ 0x38000
 8007bee:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007bf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007bf6:	4984      	ldr	r1, [pc, #528]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8007bfe:	e003      	b.n	8007c08 <HAL_RCCEx_PeriphCLKConfig+0x1d10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c00:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c04:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* SPI6 */

#if defined(OCTOSPI1)
  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007c08:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	2100      	movs	r1, #0
 8007c12:	61b9      	str	r1, [r7, #24]
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	61fb      	str	r3, [r7, #28]
 8007c1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4313      	orrs	r3, r2
 8007c22:	d03d      	beq.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    switch (pPeriphClkInit->OspiClockSelection)
 8007c24:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d81c      	bhi.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x1d72>
 8007c30:	a201      	add	r2, pc, #4	@ (adr r2, 8007c38 <HAL_RCCEx_PeriphCLKConfig+0x1d40>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c73 	.word	0x08007c73
 8007c3c:	08007c49 	.word	0x08007c49
 8007c40:	08007c57 	.word	0x08007c57
 8007c44:	08007c73 	.word	0x08007c73
        break;

      case RCC_OSPICLKSOURCE_PLL1Q:  /* PLL1 Q is used as clock source for OCTOSPI*/

        /* Enable PLL1 Q CLK output */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c48:	4b6f      	ldr	r3, [pc, #444]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4c:	4a6e      	ldr	r2, [pc, #440]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007c4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c52:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8007c54:	e00e      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>

      case RCC_OSPICLKSOURCE_PLL2R:  /* PLL2 is used as clock source for OCTOSPI*/
        /* PLL2 R input clock, parameters M, N & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007c56:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f003 f873 	bl	800ad48 <RCCEx_PLL2_Config>
 8007c62:	4603      	mov	r3, r0
 8007c64:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* OCTOSPI clock source config set later after clock selection check */
        break;
 8007c68:	e004      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
      case RCC_OSPICLKSOURCE_CLKP:  /* CLKP is used as source of OCTOSPI clock*/
        /* OCTOSPI clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007c70:	e000      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0x1d7c>
        break;
 8007c72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c74:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10d      	bne.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x1da0>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007c7c:	4b62      	ldr	r3, [pc, #392]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007c7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007c82:	f023 0203 	bic.w	r2, r3, #3
 8007c86:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007c8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007c8e:	495e      	ldr	r1, [pc, #376]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007c90:	4313      	orrs	r3, r2
 8007c92:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007c96:	e003      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c98:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007c9c:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }
#endif /* OCTOSPI1*/

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007ca0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	2100      	movs	r1, #0
 8007caa:	6139      	str	r1, [r7, #16]
 8007cac:	f003 0304 	and.w	r3, r3, #4
 8007cb0:	617b      	str	r3, [r7, #20]
 8007cb2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4313      	orrs	r3, r2
 8007cba:	d03a      	beq.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
  {
    assert_param(IS_RCC_FDCANCLK(pPeriphClkInit->FdcanClockSelection));

    switch (pPeriphClkInit->FdcanClockSelection)
 8007cbc:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cc0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007cc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cc8:	d00e      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x1df0>
 8007cca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007cce:	d815      	bhi.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d017      	beq.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>
 8007cd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cd8:	d110      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x1e04>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL1Q:      /* PLL1 is used as clock source for FDCAN kernel clock*/
        /* Enable PLL1Q Clock output generated from System PLL . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cda:	4b4b      	ldr	r3, [pc, #300]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cde:	4a4a      	ldr	r2, [pc, #296]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ce4:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007ce6:	e00e      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      case RCC_FDCANCLKSOURCE_PLL2Q:  /* PLL2 is used as clock source for FDCAN kernel clock*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ce8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cec:	3308      	adds	r3, #8
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f003 f82a 	bl	800ad48 <RCCEx_PLL2_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8007cfa:	e004      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>

      default:
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d02:	e000      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x1e0e>
        break;
 8007d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d06:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10d      	bne.n	8007d2a <HAL_RCCEx_PeriphCLKConfig+0x1e32>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8007d0e:	4b3e      	ldr	r3, [pc, #248]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007d10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007d14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007d18:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d1c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007d20:	4939      	ldr	r1, [pc, #228]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
 8007d28:	e003      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x1e3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d2a:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d2e:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
    }
  }

#if defined(USB_DRD_FS)
  /*------------------------------ USB Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007d32:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	f003 0310 	and.w	r3, r3, #16
 8007d42:	60fb      	str	r3, [r7, #12]
 8007d44:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	d038      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(pPeriphClkInit->UsbClockSelection));

    switch (pPeriphClkInit->UsbClockSelection)
 8007d4e:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d52:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8007d56:	2b30      	cmp	r3, #48	@ 0x30
 8007d58:	d01b      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x1e9a>
 8007d5a:	2b30      	cmp	r3, #48	@ 0x30
 8007d5c:	d815      	bhi.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
 8007d5e:	2b10      	cmp	r3, #16
 8007d60:	d002      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0x1e70>
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d007      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x1e7e>
 8007d66:	e010      	b.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0x1e92>
    {
      case RCC_USBCLKSOURCE_PLL1Q:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d68:	4b27      	ldr	r3, [pc, #156]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6c:	4a26      	ldr	r2, [pc, #152]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007d6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d72:	6293      	str	r3, [r2, #40]	@ 0x28

        /* USB clock source configuration done later after clock selection check */
        break;
 8007d74:	e00e      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>

#if defined(RCC_USBCLKSOURCE_PLL3Q)
      case RCC_USBCLKSOURCE_PLL3Q: /* PLL3 is used as clock source for USB*/
        /* PLL3Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007d76:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007d7a:	3330      	adds	r3, #48	@ 0x30
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f003 f87b 	bl	800ae78 <RCCEx_PLL3_Config>
 8007d82:	4603      	mov	r3, r0
 8007d84:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
      case RCC_USBCLKSOURCE_PLL2Q: /* PLL2 is used as clock source for USB*/
        /* PLL2Q input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
#endif /* RCC_USBCLKSOURCE_PLL3Q */
        /* USB clock source configuration done later after clock selection check */
        break;
 8007d88:	e004      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	f887 315b 	strb.w	r3, [r7, #347]	@ 0x15b
        break;
 8007d90:	e000      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>
        break;
 8007d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d94:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10d      	bne.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x1ec0>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8007d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007d9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007da2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007da6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007daa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8007dae:	4916      	ldr	r1, [pc, #88]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 8007db6:	e003      	b.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1ec8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007db8:	f897 315b 	ldrb.w	r3, [r7, #347]	@ 0x15b
 8007dbc:	f887 315a 	strb.w	r3, [r7, #346]	@ 0x15a
  }
#endif /* USB_DRD_FS */

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007dc0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	2100      	movs	r1, #0
 8007dca:	6039      	str	r1, [r7, #0]
 8007dcc:	f003 0308 	and.w	r3, r3, #8
 8007dd0:	607b      	str	r3, [r7, #4]
 8007dd2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	d00c      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x1efe>

    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(pPeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8007ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007dde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007de2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007de6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007dea:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8007dee:	4906      	ldr	r1, [pc, #24]	@ (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x1f10>)
 8007df0:	4313      	orrs	r3, r2
 8007df2:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8

  }
#endif /* CEC */

  return status;
 8007df6:	f897 315a 	ldrb.w	r3, [r7, #346]	@ 0x15a
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8007e00:	46bd      	mov	sp, r7
 8007e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e06:	bf00      	nop
 8007e08:	44020c00 	.word	0x44020c00

08007e0c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL1_Clocks pointer to PLL1_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *pPLL1_Clocks)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b08b      	sub	sp, #44	@ 0x2c
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL1M) * PLL1N
  PLL1xCLK = PLL1_VCO / PLL1x
  */

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007e14:	4bae      	ldr	r3, [pc, #696]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007e16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e1c:	623b      	str	r3, [r7, #32]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007e1e:	4bac      	ldr	r3, [pc, #688]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e22:	f003 0303 	and.w	r3, r3, #3
 8007e26:	61fb      	str	r3, [r7, #28]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8007e28:	4ba9      	ldr	r3, [pc, #676]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2c:	0a1b      	lsrs	r3, r3, #8
 8007e2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e32:	61bb      	str	r3, [r7, #24]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8007e34:	4ba6      	ldr	r3, [pc, #664]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e38:	091b      	lsrs	r3, r3, #4
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	617b      	str	r3, [r7, #20]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007e40:	4ba3      	ldr	r3, [pc, #652]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e44:	08db      	lsrs	r3, r3, #3
 8007e46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	fb02 f303 	mul.w	r3, r2, r3
 8007e50:	ee07 3a90 	vmov	s15, r3
 8007e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e58:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 8126 	beq.w	80080b0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>
  {
    switch (pll1source)
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	2b03      	cmp	r3, #3
 8007e68:	d053      	beq.n	8007f12 <HAL_RCCEx_GetPLL1ClockFreq+0x106>
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	2b03      	cmp	r3, #3
 8007e6e:	d86f      	bhi.n	8007f50 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d003      	beq.n	8007e7e <HAL_RCCEx_GetPLL1ClockFreq+0x72>
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d02b      	beq.n	8007ed4 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 8007e7c:	e068      	b.n	8007f50 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
    {

      case RCC_PLL1_SOURCE_HSI:  /* HSI used as PLL1 clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007e7e:	4b94      	ldr	r3, [pc, #592]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	08db      	lsrs	r3, r3, #3
 8007e84:	f003 0303 	and.w	r3, r3, #3
 8007e88:	4a92      	ldr	r2, [pc, #584]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007e8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e8e:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	ee07 3a90 	vmov	s15, r3
 8007e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9a:	69bb      	ldr	r3, [r7, #24]
 8007e9c:	ee07 3a90 	vmov	s15, r3
 8007ea0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	ee07 3a90 	vmov	s15, r3
 8007eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb2:	ed97 6a04 	vldr	s12, [r7, #16]
 8007eb6:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80080d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ece:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007ed2:	e068      	b.n	8007fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_CSI:  /* CSI used as PLL1 clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	ee07 3a90 	vmov	s15, r3
 8007eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ede:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80080dc <HAL_RCCEx_GetPLL1ClockFreq+0x2d0>
 8007ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee6:	6a3b      	ldr	r3, [r7, #32]
 8007ee8:	ee07 3a90 	vmov	s15, r3
 8007eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef0:	ed97 6a04 	vldr	s12, [r7, #16]
 8007ef4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80080d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007ef8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007efc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007f10:	e049      	b.n	8007fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      case RCC_PLL1_SOURCE_HSE:  /* HSE used as PLL1 clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	ee07 3a90 	vmov	s15, r3
 8007f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1c:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80080e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2d4>
 8007f20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f24:	6a3b      	ldr	r3, [r7, #32]
 8007f26:	ee07 3a90 	vmov	s15, r3
 8007f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f2e:	ed97 6a04 	vldr	s12, [r7, #16]
 8007f32:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80080d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f4a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8007f4e:	e02a      	b.n	8007fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f50:	4b5f      	ldr	r3, [pc, #380]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	08db      	lsrs	r3, r3, #3
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	4a5e      	ldr	r2, [pc, #376]	@ (80080d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f60:	60fb      	str	r3, [r7, #12]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	ee07 3a90 	vmov	s15, r3
 8007f68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	ee07 3a90 	vmov	s15, r3
 8007f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f7a:	6a3b      	ldr	r3, [r7, #32]
 8007f7c:	ee07 3a90 	vmov	s15, r3
 8007f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f84:	ed97 6a04 	vldr	s12, [r7, #16]
 8007f88:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80080d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>
 8007f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fa0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8007fa4:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007fb2:	d121      	bne.n	8007ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007fb4:	4b46      	ldr	r3, [pc, #280]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d017      	beq.n	8007ff0 <HAL_RCCEx_GetPLL1ClockFreq+0x1e4>
      {
        pPLL1_Clocks->PLL1_P_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007fc0:	4b43      	ldr	r3, [pc, #268]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8007fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007fc4:	0a5b      	lsrs	r3, r3, #9
 8007fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fca:	ee07 3a90 	vmov	s15, r3
 8007fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1P) >> \
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8007fd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fd6:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8007fda:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8007fde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fe6:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_P_Frequency = \
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	e006      	b.n	8007ffe <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	e002      	b.n	8007ffe <HAL_RCCEx_GetPLL1ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ffe:	4b34      	ldr	r3, [pc, #208]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008006:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800800a:	d121      	bne.n	8008050 <HAL_RCCEx_GetPLL1ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800800c:	4b30      	ldr	r3, [pc, #192]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800800e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d017      	beq.n	8008048 <HAL_RCCEx_GetPLL1ClockFreq+0x23c>
      {
        pPLL1_Clocks->PLL1_Q_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008018:	4b2d      	ldr	r3, [pc, #180]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 800801a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800801c:	0c1b      	lsrs	r3, r3, #16
 800801e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008022:	ee07 3a90 	vmov	s15, r3
 8008026:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1Q) >> \
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800802a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800802e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 8008032:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800803a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800803e:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_Q_Frequency = \
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	e006      	b.n	8008056 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	605a      	str	r2, [r3, #4]
 800804e:	e002      	b.n	8008056 <HAL_RCCEx_GetPLL1ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008056:	4b1e      	ldr	r3, [pc, #120]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800805e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008062:	d121      	bne.n	80080a8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008064:	4b1a      	ldr	r3, [pc, #104]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008068:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d017      	beq.n	80080a0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
      {
        pPLL1_Clocks->PLL1_R_Frequency = \
                                         (uint32_t)(float_t)(pll1vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008070:	4b17      	ldr	r3, [pc, #92]	@ (80080d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>)
 8008072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008074:	0e1b      	lsrs	r3, r3, #24
 8008076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800807a:	ee07 3a90 	vmov	s15, r3
 800807e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL1DIVR_PLL1R) >> \
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8008082:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008086:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll1vco / \
 800808a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800808e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008096:	ee17 2a90 	vmov	r2, s15
        pPLL1_Clocks->PLL1_R_Frequency = \
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	609a      	str	r2, [r3, #8]
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800809e:	e010      	b.n	80080c2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	609a      	str	r2, [r3, #8]
}
 80080a6:	e00c      	b.n	80080c2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
      pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	609a      	str	r2, [r3, #8]
}
 80080ae:	e008      	b.n	80080c2 <HAL_RCCEx_GetPLL1ClockFreq+0x2b6>
    pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	605a      	str	r2, [r3, #4]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	609a      	str	r2, [r3, #8]
}
 80080c2:	bf00      	nop
 80080c4:	372c      	adds	r7, #44	@ 0x2c
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	44020c00 	.word	0x44020c00
 80080d4:	03d09000 	.word	0x03d09000
 80080d8:	46000000 	.word	0x46000000
 80080dc:	4a742400 	.word	0x4a742400
 80080e0:	4af42400 	.word	0x4af42400

080080e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL2_Clocks pointer to PLL2_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *pPLL2_Clocks)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b08b      	sub	sp, #44	@ 0x2c
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
  PLL2xCLK = PLL2_VCO / PLL2x
  */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80080ec:	4bae      	ldr	r3, [pc, #696]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80080ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080f4:	623b      	str	r3, [r7, #32]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80080f6:	4bac      	ldr	r3, [pc, #688]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80080f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fa:	f003 0303 	and.w	r3, r3, #3
 80080fe:	61fb      	str	r3, [r7, #28]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8008100:	4ba9      	ldr	r3, [pc, #676]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008104:	0a1b      	lsrs	r3, r3, #8
 8008106:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800810a:	61bb      	str	r3, [r7, #24]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800810c:	4ba6      	ldr	r3, [pc, #664]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	091b      	lsrs	r3, r3, #4
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	617b      	str	r3, [r7, #20]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008118:	4ba3      	ldr	r3, [pc, #652]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800811a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800811c:	08db      	lsrs	r3, r3, #3
 800811e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	fb02 f303 	mul.w	r3, r2, r3
 8008128:	ee07 3a90 	vmov	s15, r3
 800812c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008130:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 8126 	beq.w	8008388 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
  {
    switch (pll2source)
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	2b03      	cmp	r3, #3
 8008140:	d053      	beq.n	80081ea <HAL_RCCEx_GetPLL2ClockFreq+0x106>
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	2b03      	cmp	r3, #3
 8008146:	d86f      	bhi.n	8008228 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8008148:	69fb      	ldr	r3, [r7, #28]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d003      	beq.n	8008156 <HAL_RCCEx_GetPLL2ClockFreq+0x72>
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d02b      	beq.n	80081ac <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8008154:	e068      	b.n	8008228 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
    {
      case RCC_PLL2_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008156:	4b94      	ldr	r3, [pc, #592]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	08db      	lsrs	r3, r3, #3
 800815c:	f003 0303 	and.w	r3, r3, #3
 8008160:	4a92      	ldr	r2, [pc, #584]	@ (80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008162:	fa22 f303 	lsr.w	r3, r2, r3
 8008166:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	ee07 3a90 	vmov	s15, r3
 800816e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	ee07 3a90 	vmov	s15, r3
 8008178:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800817c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	ee07 3a90 	vmov	s15, r3
 8008186:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800818a:	ed97 6a04 	vldr	s12, [r7, #16]
 800818e:	eddf 5a88 	vldr	s11, [pc, #544]	@ 80083b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008192:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008196:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800819a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800819e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081a6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 80081aa:	e068      	b.n	800827e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	ee07 3a90 	vmov	s15, r3
 80081b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081b6:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2d0>
 80081ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081be:	6a3b      	ldr	r3, [r7, #32]
 80081c0:	ee07 3a90 	vmov	s15, r3
 80081c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081c8:	ed97 6a04 	vldr	s12, [r7, #16]
 80081cc:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80083b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 80081d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081e4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80081e8:	e049      	b.n	800827e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      case RCC_PLL2_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	ee07 3a90 	vmov	s15, r3
 80081f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081f4:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2d4>
 80081f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008206:	ed97 6a04 	vldr	s12, [r7, #16]
 800820a:	eddf 5a69 	vldr	s11, [pc, #420]	@ 80083b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 800820e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800821a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800821e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008222:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 8008226:	e02a      	b.n	800827e <HAL_RCCEx_GetPLL2ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008228:	4b5f      	ldr	r3, [pc, #380]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	08db      	lsrs	r3, r3, #3
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	4a5e      	ldr	r2, [pc, #376]	@ (80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8008234:	fa22 f303 	lsr.w	r3, r2, r3
 8008238:	60fb      	str	r3, [r7, #12]
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	ee07 3a90 	vmov	s15, r3
 8008240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008244:	69bb      	ldr	r3, [r7, #24]
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800824e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	ee07 3a90 	vmov	s15, r3
 8008258:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800825c:	ed97 6a04 	vldr	s12, [r7, #16]
 8008260:	eddf 5a53 	vldr	s11, [pc, #332]	@ 80083b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>
 8008264:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008268:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800826c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008270:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008278:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 800827c:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800827e:	4b4a      	ldr	r3, [pc, #296]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008286:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800828a:	d121      	bne.n	80082d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800828c:	4b46      	ldr	r3, [pc, #280]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800828e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d017      	beq.n	80082c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
      {
        pPLL2_Clocks->PLL2_P_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008298:	4b43      	ldr	r3, [pc, #268]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800829a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800829c:	0a5b      	lsrs	r3, r3, #9
 800829e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082a2:	ee07 3a90 	vmov	s15, r3
 80082a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2P) >> \
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80082aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082ae:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 80082b2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80082b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80082be:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_P_Frequency = \
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	e006      	b.n	80082d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	e002      	b.n	80082d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80082d6:	4b34      	ldr	r3, [pc, #208]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80082de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082e2:	d121      	bne.n	8008328 <HAL_RCCEx_GetPLL2ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80082e4:	4b30      	ldr	r3, [pc, #192]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80082e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d017      	beq.n	8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x23c>
      {
        pPLL2_Clocks->PLL2_Q_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80082f0:	4b2d      	ldr	r3, [pc, #180]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 80082f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082f4:	0c1b      	lsrs	r3, r3, #16
 80082f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2Q) >> \
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008302:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008306:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 800830a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800830e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008312:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008316:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_Q_Frequency = \
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	605a      	str	r2, [r3, #4]
 800831e:	e006      	b.n	800832e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	605a      	str	r2, [r3, #4]
 8008326:	e002      	b.n	800832e <HAL_RCCEx_GetPLL2ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2200      	movs	r2, #0
 800832c:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800832e:	4b1e      	ldr	r3, [pc, #120]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008336:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800833a:	d121      	bne.n	8008380 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800833c:	4b1a      	ldr	r3, [pc, #104]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800833e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008340:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d017      	beq.n	8008378 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
      {
        pPLL2_Clocks->PLL2_R_Frequency = \
                                         (uint32_t)(float_t)(pll2vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008348:	4b17      	ldr	r3, [pc, #92]	@ (80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>)
 800834a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800834c:	0e1b      	lsrs	r3, r3, #24
 800834e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008352:	ee07 3a90 	vmov	s15, r3
 8008356:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL2DIVR_PLL2R) >> \
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800835a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800835e:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll2vco / \
 8008362:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8008366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800836a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800836e:	ee17 2a90 	vmov	r2, s15
        pPLL2_Clocks->PLL2_R_Frequency = \
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	609a      	str	r2, [r3, #8]
  {
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008376:	e010      	b.n	800839a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	609a      	str	r2, [r3, #8]
}
 800837e:	e00c      	b.n	800839a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
      pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	609a      	str	r2, [r3, #8]
}
 8008386:	e008      	b.n	800839a <HAL_RCCEx_GetPLL2ClockFreq+0x2b6>
    pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	605a      	str	r2, [r3, #4]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	609a      	str	r2, [r3, #8]
}
 800839a:	bf00      	nop
 800839c:	372c      	adds	r7, #44	@ 0x2c
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	44020c00 	.word	0x44020c00
 80083ac:	03d09000 	.word	0x03d09000
 80083b0:	46000000 	.word	0x46000000
 80083b4:	4a742400 	.word	0x4a742400
 80083b8:	4af42400 	.word	0x4af42400

080083bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  pPLL3_Clocks pointer to PLL3_ClocksTypeDef structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *pPLL3_Clocks)
{
 80083bc:	b480      	push	{r7}
 80083be:	b08b      	sub	sp, #44	@ 0x2c
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  float_t pll3vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLL3x
  */
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80083c4:	4bae      	ldr	r3, [pc, #696]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80083c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083cc:	623b      	str	r3, [r7, #32]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80083ce:	4bac      	ldr	r3, [pc, #688]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80083d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083d2:	f003 0303 	and.w	r3, r3, #3
 80083d6:	61fb      	str	r3, [r7, #28]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80083d8:	4ba9      	ldr	r3, [pc, #676]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80083da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083dc:	0a1b      	lsrs	r3, r3, #8
 80083de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083e2:	61bb      	str	r3, [r7, #24]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80083e4:	4ba6      	ldr	r3, [pc, #664]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80083e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083e8:	091b      	lsrs	r3, r3, #4
 80083ea:	f003 0301 	and.w	r3, r3, #1
 80083ee:	617b      	str	r3, [r7, #20]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80083f0:	4ba3      	ldr	r3, [pc, #652]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80083f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083f4:	08db      	lsrs	r3, r3, #3
 80083f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	fb02 f303 	mul.w	r3, r2, r3
 8008400:	ee07 3a90 	vmov	s15, r3
 8008404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008408:	edc7 7a04 	vstr	s15, [r7, #16]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 8126 	beq.w	8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
  {
    switch (pll3source)
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	2b03      	cmp	r3, #3
 8008418:	d053      	beq.n	80084c2 <HAL_RCCEx_GetPLL3ClockFreq+0x106>
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	2b03      	cmp	r3, #3
 800841e:	d86f      	bhi.n	8008500 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d003      	beq.n	800842e <HAL_RCCEx_GetPLL3ClockFreq+0x72>
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	2b02      	cmp	r3, #2
 800842a:	d02b      	beq.n	8008484 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 800842c:	e068      	b.n	8008500 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
    {
      case RCC_PLL3_SOURCE_HSI:  /* HSI used as PLL clock source */
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800842e:	4b94      	ldr	r3, [pc, #592]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	08db      	lsrs	r3, r3, #3
 8008434:	f003 0303 	and.w	r3, r3, #3
 8008438:	4a92      	ldr	r2, [pc, #584]	@ (8008684 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800843a:	fa22 f303 	lsr.w	r3, r2, r3
 800843e:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	ee07 3a90 	vmov	s15, r3
 8008450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008454:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008458:	6a3b      	ldr	r3, [r7, #32]
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008462:	ed97 6a04 	vldr	s12, [r7, #16]
 8008466:	eddf 5a88 	vldr	s11, [pc, #544]	@ 8008688 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800846a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008472:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008482:	e068      	b.n	8008556 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eddf 6a7f 	vldr	s13, [pc, #508]	@ 800868c <HAL_RCCEx_GetPLL3ClockFreq+0x2d0>
 8008492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	ee07 3a90 	vmov	s15, r3
 800849c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a0:	ed97 6a04 	vldr	s12, [r7, #16]
 80084a4:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008688 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80084a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084bc:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80084c0:	e049      	b.n	8008556 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      case RCC_PLL3_SOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	ee07 3a90 	vmov	s15, r3
 80084c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084cc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8008690 <HAL_RCCEx_GetPLL3ClockFreq+0x2d4>
 80084d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	ee07 3a90 	vmov	s15, r3
 80084da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084de:	ed97 6a04 	vldr	s12, [r7, #16]
 80084e2:	eddf 5a69 	vldr	s11, [pc, #420]	@ 8008688 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 80084e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084fa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                           (float_t)1);
        break;
 80084fe:	e02a      	b.n	8008556 <HAL_RCCEx_GetPLL3ClockFreq+0x19a>

      default:
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008500:	4b5f      	ldr	r3, [pc, #380]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	08db      	lsrs	r3, r3, #3
 8008506:	f003 0303 	and.w	r3, r3, #3
 800850a:	4a5e      	ldr	r2, [pc, #376]	@ (8008684 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800850c:	fa22 f303 	lsr.w	r3, r2, r3
 8008510:	60fb      	str	r3, [r7, #12]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	ee07 3a90 	vmov	s15, r3
 8008518:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	ee07 3a90 	vmov	s15, r3
 8008522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	ee07 3a90 	vmov	s15, r3
 8008530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008534:	ed97 6a04 	vldr	s12, [r7, #16]
 8008538:	eddf 5a53 	vldr	s11, [pc, #332]	@ 8008688 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>
 800853c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008540:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008544:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008548:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800854c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008550:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                                                          (float_t)1);
        break;
 8008554:	bf00      	nop
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008556:	4b4a      	ldr	r3, [pc, #296]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800855e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008562:	d121      	bne.n	80085a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008564:	4b46      	ldr	r3, [pc, #280]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008568:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d017      	beq.n	80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      {
        pPLL3_Clocks->PLL3_P_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008570:	4b43      	ldr	r3, [pc, #268]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008574:	0a5b      	lsrs	r3, r3, #9
 8008576:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800857a:	ee07 3a90 	vmov	s15, r3
 800857e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3P) >> \
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8008582:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008586:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800858a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800858e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008596:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_P_Frequency = \
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	e006      	b.n	80085ae <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	e002      	b.n	80085ae <HAL_RCCEx_GetPLL3ClockFreq+0x1f2>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80085ae:	4b34      	ldr	r3, [pc, #208]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80085b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80085ba:	d121      	bne.n	8008600 <HAL_RCCEx_GetPLL3ClockFreq+0x244>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80085bc:	4b30      	ldr	r3, [pc, #192]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80085be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d017      	beq.n	80085f8 <HAL_RCCEx_GetPLL3ClockFreq+0x23c>
      {
        pPLL3_Clocks->PLL3_Q_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80085c8:	4b2d      	ldr	r3, [pc, #180]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 80085ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085cc:	0c1b      	lsrs	r3, r3, #16
 80085ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085d2:	ee07 3a90 	vmov	s15, r3
 80085d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3Q) >> \
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 80085da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085de:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 80085e2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80085e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085ee:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_Q_Frequency = \
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	605a      	str	r2, [r3, #4]
 80085f6:	e006      	b.n	8008606 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
                                                              (float_t)1));
      }
      else
      {
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	605a      	str	r2, [r3, #4]
 80085fe:	e002      	b.n	8008606 <HAL_RCCEx_GetPLL3ClockFreq+0x24a>
      }
    }
    else
    {
      pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	605a      	str	r2, [r3, #4]
    }

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008606:	4b1e      	ldr	r3, [pc, #120]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800860e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008612:	d121      	bne.n	8008658 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
    {
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008614:	4b1a      	ldr	r3, [pc, #104]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008618:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d017      	beq.n	8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
      {
        pPLL3_Clocks->PLL3_R_Frequency = \
                                         (uint32_t)(float_t)(pll3vco / \
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008620:	4b17      	ldr	r3, [pc, #92]	@ (8008680 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>)
 8008622:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008624:	0e1b      	lsrs	r3, r3, #24
 8008626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800862a:	ee07 3a90 	vmov	s15, r3
 800862e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                                   RCC_PLL3DIVR_PLL3R) >> \
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8008632:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008636:	ee37 7a87 	vadd.f32	s14, s15, s14
                                         (uint32_t)(float_t)(pll3vco / \
 800863a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800863e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008646:	ee17 2a90 	vmov	r2, s15
        pPLL3_Clocks->PLL3_R_Frequency = \
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	609a      	str	r2, [r3, #8]
  {
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800864e:	e010      	b.n	8008672 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2200      	movs	r2, #0
 8008654:	609a      	str	r2, [r3, #8]
}
 8008656:	e00c      	b.n	8008672 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
      pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	609a      	str	r2, [r3, #8]
}
 800865e:	e008      	b.n	8008672 <HAL_RCCEx_GetPLL3ClockFreq+0x2b6>
    pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	605a      	str	r2, [r3, #4]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2200      	movs	r2, #0
 8008670:	609a      	str	r2, [r3, #8]
}
 8008672:	bf00      	nop
 8008674:	372c      	adds	r7, #44	@ 0x2c
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	44020c00 	.word	0x44020c00
 8008684:	03d09000 	.word	0x03d09000
 8008688:	46000000 	.word	0x46000000
 800868c:	4a742400 	.word	0x4a742400
 8008690:	4af42400 	.word	0x4af42400

08008694 <HAL_RCCEx_GetPeriphCLKFreq>:
  *  (*)   : For stm32h56xxx and stm32h57xxx family lines only.
  *  (**)  : For stm32h563xx and stm32h57xxx family lines only.
  *  (***) : For stm32h503xx family line only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008694:	b590      	push	{r4, r7, lr}
 8008696:	b08f      	sub	sp, #60	@ 0x3c
 8008698:	af00      	add	r7, sp, #0
 800869a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800869e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80086a2:	f100 447e 	add.w	r4, r0, #4261412864	@ 0xfe000000
 80086a6:	4321      	orrs	r1, r4
 80086a8:	d150      	bne.n	800874c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80086aa:	4b26      	ldr	r3, [pc, #152]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80086ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086b4:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80086b6:	4b23      	ldr	r3, [pc, #140]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80086b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086bc:	f003 0302 	and.w	r3, r3, #2
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d108      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80086c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086ca:	d104      	bne.n	80086d6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80086cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80086d2:	f002 bb2a 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80086d6:	4b1b      	ldr	r3, [pc, #108]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80086d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80086dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80086e4:	d108      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
 80086e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086ec:	d104      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
    {
      frequency = LSI_VALUE;
 80086ee:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80086f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80086f4:	f002 bb19 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
    }
    /* Check if HSE is ready and if RTC clock selection is HSE_DIVx*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80086f8:	4b12      	ldr	r3, [pc, #72]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008700:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008704:	d119      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 8008706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008708:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800870c:	d115      	bne.n	800873a <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
    {
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800870e:	4b0d      	ldr	r3, [pc, #52]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	f403 537c 	and.w	r3, r3, #16128	@ 0x3f00
 8008716:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800871a:	d30a      	bcc.n	8008732 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      {
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800871c:	4b09      	ldr	r3, [pc, #36]	@ (8008744 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800871e:	69db      	ldr	r3, [r3, #28]
 8008720:	0a1b      	lsrs	r3, r3, #8
 8008722:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008726:	4a08      	ldr	r2, [pc, #32]	@ (8008748 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8008728:	fbb2 f3f3 	udiv	r3, r2, r3
 800872c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800872e:	f002 bafc 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
      }
      else
      {
        frequency = 0U;
 8008732:	2300      	movs	r3, #0
 8008734:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8008736:	f002 baf8 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800873a:	2300      	movs	r3, #0
 800873c:	637b      	str	r3, [r7, #52]	@ 0x34
 800873e:	f002 baf4 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008742:	bf00      	nop
 8008744:	44020c00 	.word	0x44020c00
 8008748:	007a1200 	.word	0x007a1200
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800874c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008750:	f5a1 6480 	sub.w	r4, r1, #1024	@ 0x400
 8008754:	ea50 0104 	orrs.w	r1, r0, r4
 8008758:	f001 8275 	beq.w	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0x15b2>
 800875c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008760:	2801      	cmp	r0, #1
 8008762:	f571 6180 	sbcs.w	r1, r1, #1024	@ 0x400
 8008766:	f082 82dd 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800876a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800876e:	f5a1 7400 	sub.w	r4, r1, #512	@ 0x200
 8008772:	ea50 0104 	orrs.w	r1, r0, r4
 8008776:	f001 816c 	beq.w	8009a52 <HAL_RCCEx_GetPeriphCLKFreq+0x13be>
 800877a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800877e:	2801      	cmp	r0, #1
 8008780:	f571 7100 	sbcs.w	r1, r1, #512	@ 0x200
 8008784:	f082 82ce 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008788:	e9d7 0100 	ldrd	r0, r1, [r7]
 800878c:	f5a1 7480 	sub.w	r4, r1, #256	@ 0x100
 8008790:	ea50 0104 	orrs.w	r1, r0, r4
 8008794:	f001 8602 	beq.w	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x1d08>
 8008798:	e9d7 0100 	ldrd	r0, r1, [r7]
 800879c:	2801      	cmp	r0, #1
 800879e:	f571 7180 	sbcs.w	r1, r1, #256	@ 0x100
 80087a2:	f082 82bf 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80087a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087aa:	f1a1 0480 	sub.w	r4, r1, #128	@ 0x80
 80087ae:	ea50 0104 	orrs.w	r1, r0, r4
 80087b2:	f001 854c 	beq.w	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x1bba>
 80087b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087ba:	2801      	cmp	r0, #1
 80087bc:	f171 0180 	sbcs.w	r1, r1, #128	@ 0x80
 80087c0:	f082 82b0 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80087c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087c8:	f1a1 0440 	sub.w	r4, r1, #64	@ 0x40
 80087cc:	ea50 0104 	orrs.w	r1, r0, r4
 80087d0:	f001 849e 	beq.w	800a110 <HAL_RCCEx_GetPeriphCLKFreq+0x1a7c>
 80087d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087d8:	2801      	cmp	r0, #1
 80087da:	f171 0140 	sbcs.w	r1, r1, #64	@ 0x40
 80087de:	f082 82a1 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80087e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087e6:	f1a1 0420 	sub.w	r4, r1, #32
 80087ea:	ea50 0104 	orrs.w	r1, r0, r4
 80087ee:	f001 83e8 	beq.w	8009fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x192e>
 80087f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80087f6:	2801      	cmp	r0, #1
 80087f8:	f171 0120 	sbcs.w	r1, r1, #32
 80087fc:	f082 8292 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008800:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008804:	f1a1 0410 	sub.w	r4, r1, #16
 8008808:	ea50 0104 	orrs.w	r1, r0, r4
 800880c:	f002 8256 	beq.w	800acbc <HAL_RCCEx_GetPeriphCLKFreq+0x2628>
 8008810:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008814:	2801      	cmp	r0, #1
 8008816:	f171 0110 	sbcs.w	r1, r1, #16
 800881a:	f082 8283 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800881e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008822:	f1a1 0408 	sub.w	r4, r1, #8
 8008826:	ea50 0104 	orrs.w	r1, r0, r4
 800882a:	f002 81cc 	beq.w	800abc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2532>
 800882e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008832:	2801      	cmp	r0, #1
 8008834:	f171 0108 	sbcs.w	r1, r1, #8
 8008838:	f082 8274 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800883c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008840:	1f0c      	subs	r4, r1, #4
 8008842:	ea50 0104 	orrs.w	r1, r0, r4
 8008846:	f001 8648 	beq.w	800a4da <HAL_RCCEx_GetPeriphCLKFreq+0x1e46>
 800884a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800884e:	2801      	cmp	r0, #1
 8008850:	f171 0104 	sbcs.w	r1, r1, #4
 8008854:	f082 8266 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008858:	e9d7 0100 	ldrd	r0, r1, [r7]
 800885c:	1e8c      	subs	r4, r1, #2
 800885e:	ea50 0104 	orrs.w	r1, r0, r4
 8008862:	f002 8143 	beq.w	800aaec <HAL_RCCEx_GetPeriphCLKFreq+0x2458>
 8008866:	e9d7 0100 	ldrd	r0, r1, [r7]
 800886a:	2801      	cmp	r0, #1
 800886c:	f171 0102 	sbcs.w	r1, r1, #2
 8008870:	f082 8258 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008874:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008878:	1e4c      	subs	r4, r1, #1
 800887a:	ea50 0104 	orrs.w	r1, r0, r4
 800887e:	f002 80ce 	beq.w	800aa1e <HAL_RCCEx_GetPeriphCLKFreq+0x238a>
 8008882:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008886:	2801      	cmp	r0, #1
 8008888:	f171 0101 	sbcs.w	r1, r1, #1
 800888c:	f082 824a 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008890:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008894:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8008898:	4321      	orrs	r1, r4
 800889a:	f002 8059 	beq.w	800a950 <HAL_RCCEx_GetPeriphCLKFreq+0x22bc>
 800889e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088a2:	4cd9      	ldr	r4, [pc, #868]	@ (8008c08 <HAL_RCCEx_GetPeriphCLKFreq+0x574>)
 80088a4:	42a0      	cmp	r0, r4
 80088a6:	f171 0100 	sbcs.w	r1, r1, #0
 80088aa:	f082 823b 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80088ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088b2:	f100 4440 	add.w	r4, r0, #3221225472	@ 0xc0000000
 80088b6:	4321      	orrs	r1, r4
 80088b8:	f001 87d9 	beq.w	800a86e <HAL_RCCEx_GetPeriphCLKFreq+0x21da>
 80088bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088c0:	4cd2      	ldr	r4, [pc, #840]	@ (8008c0c <HAL_RCCEx_GetPeriphCLKFreq+0x578>)
 80088c2:	42a0      	cmp	r0, r4
 80088c4:	f171 0100 	sbcs.w	r1, r1, #0
 80088c8:	f082 822c 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80088cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088d0:	f100 4460 	add.w	r4, r0, #3758096384	@ 0xe0000000
 80088d4:	4321      	orrs	r1, r4
 80088d6:	f001 8751 	beq.w	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x20e8>
 80088da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088de:	4ccc      	ldr	r4, [pc, #816]	@ (8008c10 <HAL_RCCEx_GetPeriphCLKFreq+0x57c>)
 80088e0:	42a0      	cmp	r0, r4
 80088e2:	f171 0100 	sbcs.w	r1, r1, #0
 80088e6:	f082 821d 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80088ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088ee:	f100 4470 	add.w	r4, r0, #4026531840	@ 0xf0000000
 80088f2:	4321      	orrs	r1, r4
 80088f4:	f001 869a 	beq.w	800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x1f98>
 80088f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088fc:	4cc5      	ldr	r4, [pc, #788]	@ (8008c14 <HAL_RCCEx_GetPeriphCLKFreq+0x580>)
 80088fe:	42a0      	cmp	r0, r4
 8008900:	f171 0100 	sbcs.w	r1, r1, #0
 8008904:	f082 820e 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008908:	e9d7 0100 	ldrd	r0, r1, [r7]
 800890c:	f100 4478 	add.w	r4, r0, #4160749568	@ 0xf8000000
 8008910:	4321      	orrs	r1, r4
 8008912:	f001 8612 	beq.w	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x1ea6>
 8008916:	e9d7 0100 	ldrd	r0, r1, [r7]
 800891a:	4cbf      	ldr	r4, [pc, #764]	@ (8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0x584>)
 800891c:	42a0      	cmp	r0, r4
 800891e:	f171 0100 	sbcs.w	r1, r1, #0
 8008922:	f082 81ff 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008926:	e9d7 0100 	ldrd	r0, r1, [r7]
 800892a:	f100 447c 	add.w	r4, r0, #4227858432	@ 0xfc000000
 800892e:	4321      	orrs	r1, r4
 8008930:	f002 817e 	beq.w	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x259c>
 8008934:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008938:	4cb8      	ldr	r4, [pc, #736]	@ (8008c1c <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800893a:	42a0      	cmp	r0, r4
 800893c:	f171 0100 	sbcs.w	r1, r1, #0
 8008940:	f082 81f0 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008944:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008948:	f5a0 0400 	sub.w	r4, r0, #8388608	@ 0x800000
 800894c:	4321      	orrs	r1, r4
 800894e:	f000 829e 	beq.w	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x7fa>
 8008952:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008956:	4cb2      	ldr	r4, [pc, #712]	@ (8008c20 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8008958:	42a0      	cmp	r0, r4
 800895a:	f171 0100 	sbcs.w	r1, r1, #0
 800895e:	f082 81e1 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008962:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008966:	f5a0 0480 	sub.w	r4, r0, #4194304	@ 0x400000
 800896a:	4321      	orrs	r1, r4
 800896c:	f000 826d 	beq.w	8008e4a <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8008970:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008974:	4cab      	ldr	r4, [pc, #684]	@ (8008c24 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8008976:	42a0      	cmp	r0, r4
 8008978:	f171 0100 	sbcs.w	r1, r1, #0
 800897c:	f082 81d2 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008980:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008984:	f5a0 1400 	sub.w	r4, r0, #2097152	@ 0x200000
 8008988:	4321      	orrs	r1, r4
 800898a:	f001 800d 	beq.w	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1314>
 800898e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008992:	4ca5      	ldr	r4, [pc, #660]	@ (8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8008994:	42a0      	cmp	r0, r4
 8008996:	f171 0100 	sbcs.w	r1, r1, #0
 800899a:	f082 81c3 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 800899e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089a2:	f5a0 1480 	sub.w	r4, r0, #1048576	@ 0x100000
 80089a6:	4321      	orrs	r1, r4
 80089a8:	f000 81d0 	beq.w	8008d4c <HAL_RCCEx_GetPeriphCLKFreq+0x6b8>
 80089ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089b0:	4c9e      	ldr	r4, [pc, #632]	@ (8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80089b2:	42a0      	cmp	r0, r4
 80089b4:	f171 0100 	sbcs.w	r1, r1, #0
 80089b8:	f082 81b4 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80089bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089c0:	f5a0 2400 	sub.w	r4, r0, #524288	@ 0x80000
 80089c4:	4321      	orrs	r1, r4
 80089c6:	f000 8142 	beq.w	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
 80089ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089ce:	4c98      	ldr	r4, [pc, #608]	@ (8008c30 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80089d0:	42a0      	cmp	r0, r4
 80089d2:	f171 0100 	sbcs.w	r1, r1, #0
 80089d6:	f082 81a5 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80089da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089de:	f5a0 2480 	sub.w	r4, r0, #262144	@ 0x40000
 80089e2:	4321      	orrs	r1, r4
 80089e4:	f001 824e 	beq.w	8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x17f0>
 80089e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089ec:	4c91      	ldr	r4, [pc, #580]	@ (8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80089ee:	42a0      	cmp	r0, r4
 80089f0:	f171 0100 	sbcs.w	r1, r1, #0
 80089f4:	f082 8196 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 80089f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089fc:	f5a0 3400 	sub.w	r4, r0, #131072	@ 0x20000
 8008a00:	4321      	orrs	r1, r4
 8008a02:	f001 8197 	beq.w	8009d34 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
 8008a06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a0a:	4c8b      	ldr	r4, [pc, #556]	@ (8008c38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8008a0c:	42a0      	cmp	r0, r4
 8008a0e:	f171 0100 	sbcs.w	r1, r1, #0
 8008a12:	f082 8187 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a1a:	f5a0 3480 	sub.w	r4, r0, #65536	@ 0x10000
 8008a1e:	4321      	orrs	r1, r4
 8008a20:	f001 8154 	beq.w	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x1638>
 8008a24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a28:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
 8008a2c:	f171 0100 	sbcs.w	r1, r1, #0
 8008a30:	f082 8178 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a38:	f5a0 4400 	sub.w	r4, r0, #32768	@ 0x8000
 8008a3c:	4321      	orrs	r1, r4
 8008a3e:	f001 80b7 	beq.w	8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x151c>
 8008a42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a46:	f248 0401 	movw	r4, #32769	@ 0x8001
 8008a4a:	42a0      	cmp	r0, r4
 8008a4c:	f171 0100 	sbcs.w	r1, r1, #0
 8008a50:	f082 8168 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a58:	f5a0 4480 	sub.w	r4, r0, #16384	@ 0x4000
 8008a5c:	4321      	orrs	r1, r4
 8008a5e:	f001 8064 	beq.w	8009b2a <HAL_RCCEx_GetPeriphCLKFreq+0x1496>
 8008a62:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a66:	f244 0401 	movw	r4, #16385	@ 0x4001
 8008a6a:	42a0      	cmp	r0, r4
 8008a6c:	f171 0100 	sbcs.w	r1, r1, #0
 8008a70:	f082 8158 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a78:	f5a0 5400 	sub.w	r4, r0, #8192	@ 0x2000
 8008a7c:	4321      	orrs	r1, r4
 8008a7e:	f001 8011 	beq.w	8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1410>
 8008a82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a86:	f242 0401 	movw	r4, #8193	@ 0x2001
 8008a8a:	42a0      	cmp	r0, r4
 8008a8c:	f171 0100 	sbcs.w	r1, r1, #0
 8008a90:	f082 8148 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a98:	f5a0 5480 	sub.w	r4, r0, #4096	@ 0x1000
 8008a9c:	4321      	orrs	r1, r4
 8008a9e:	f000 871e 	beq.w	80098de <HAL_RCCEx_GetPeriphCLKFreq+0x124a>
 8008aa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008aa6:	f241 0401 	movw	r4, #4097	@ 0x1001
 8008aaa:	42a0      	cmp	r0, r4
 8008aac:	f171 0100 	sbcs.w	r1, r1, #0
 8008ab0:	f082 8138 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008ab4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ab8:	f5a0 6400 	sub.w	r4, r0, #2048	@ 0x800
 8008abc:	4321      	orrs	r1, r4
 8008abe:	f000 86a8 	beq.w	8009812 <HAL_RCCEx_GetPeriphCLKFreq+0x117e>
 8008ac2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ac6:	f640 0401 	movw	r4, #2049	@ 0x801
 8008aca:	42a0      	cmp	r0, r4
 8008acc:	f171 0100 	sbcs.w	r1, r1, #0
 8008ad0:	f082 8128 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ad8:	f5a0 6480 	sub.w	r4, r0, #1024	@ 0x400
 8008adc:	4321      	orrs	r1, r4
 8008ade:	f000 8632 	beq.w	8009746 <HAL_RCCEx_GetPeriphCLKFreq+0x10b2>
 8008ae2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ae6:	f240 4401 	movw	r4, #1025	@ 0x401
 8008aea:	42a0      	cmp	r0, r4
 8008aec:	f171 0100 	sbcs.w	r1, r1, #0
 8008af0:	f082 8118 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008af4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008af8:	f5a0 7400 	sub.w	r4, r0, #512	@ 0x200
 8008afc:	4321      	orrs	r1, r4
 8008afe:	f000 85b0 	beq.w	8009662 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8008b02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b06:	f240 2401 	movw	r4, #513	@ 0x201
 8008b0a:	42a0      	cmp	r0, r4
 8008b0c:	f171 0100 	sbcs.w	r1, r1, #0
 8008b10:	f082 8108 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b18:	f5a0 7480 	sub.w	r4, r0, #256	@ 0x100
 8008b1c:	4321      	orrs	r1, r4
 8008b1e:	f000 8535 	beq.w	800958c <HAL_RCCEx_GetPeriphCLKFreq+0xef8>
 8008b22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b26:	f240 1401 	movw	r4, #257	@ 0x101
 8008b2a:	42a0      	cmp	r0, r4
 8008b2c:	f171 0100 	sbcs.w	r1, r1, #0
 8008b30:	f082 80f8 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b38:	f1a0 0480 	sub.w	r4, r0, #128	@ 0x80
 8008b3c:	4321      	orrs	r1, r4
 8008b3e:	f000 84ba 	beq.w	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0xe22>
 8008b42:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b46:	2881      	cmp	r0, #129	@ 0x81
 8008b48:	f171 0100 	sbcs.w	r1, r1, #0
 8008b4c:	f082 80ea 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b54:	2821      	cmp	r0, #33	@ 0x21
 8008b56:	f171 0100 	sbcs.w	r1, r1, #0
 8008b5a:	d26f      	bcs.n	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008b5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b60:	4301      	orrs	r1, r0
 8008b62:	f002 80df 	beq.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b6a:	1e42      	subs	r2, r0, #1
 8008b6c:	f141 33ff 	adc.w	r3, r1, #4294967295
 8008b70:	2a20      	cmp	r2, #32
 8008b72:	f173 0100 	sbcs.w	r1, r3, #0
 8008b76:	f082 80d5 	bcs.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b7a:	2a1f      	cmp	r2, #31
 8008b7c:	f202 80d2 	bhi.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
 8008b80:	a101      	add	r1, pc, #4	@ (adr r1, 8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>)
 8008b82:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008b86:	bf00      	nop
 8008b88:	08008ee9 	.word	0x08008ee9
 8008b8c:	08008fb5 	.word	0x08008fb5
 8008b90:	0800ad25 	.word	0x0800ad25
 8008b94:	08009075 	.word	0x08009075
 8008b98:	0800ad25 	.word	0x0800ad25
 8008b9c:	0800ad25 	.word	0x0800ad25
 8008ba0:	0800ad25 	.word	0x0800ad25
 8008ba4:	08009145 	.word	0x08009145
 8008ba8:	0800ad25 	.word	0x0800ad25
 8008bac:	0800ad25 	.word	0x0800ad25
 8008bb0:	0800ad25 	.word	0x0800ad25
 8008bb4:	0800ad25 	.word	0x0800ad25
 8008bb8:	0800ad25 	.word	0x0800ad25
 8008bbc:	0800ad25 	.word	0x0800ad25
 8008bc0:	0800ad25 	.word	0x0800ad25
 8008bc4:	08009227 	.word	0x08009227
 8008bc8:	0800ad25 	.word	0x0800ad25
 8008bcc:	0800ad25 	.word	0x0800ad25
 8008bd0:	0800ad25 	.word	0x0800ad25
 8008bd4:	0800ad25 	.word	0x0800ad25
 8008bd8:	0800ad25 	.word	0x0800ad25
 8008bdc:	0800ad25 	.word	0x0800ad25
 8008be0:	0800ad25 	.word	0x0800ad25
 8008be4:	0800ad25 	.word	0x0800ad25
 8008be8:	0800ad25 	.word	0x0800ad25
 8008bec:	0800ad25 	.word	0x0800ad25
 8008bf0:	0800ad25 	.word	0x0800ad25
 8008bf4:	0800ad25 	.word	0x0800ad25
 8008bf8:	0800ad25 	.word	0x0800ad25
 8008bfc:	0800ad25 	.word	0x0800ad25
 8008c00:	0800ad25 	.word	0x0800ad25
 8008c04:	080092fd 	.word	0x080092fd
 8008c08:	80000001 	.word	0x80000001
 8008c0c:	40000001 	.word	0x40000001
 8008c10:	20000001 	.word	0x20000001
 8008c14:	10000001 	.word	0x10000001
 8008c18:	08000001 	.word	0x08000001
 8008c1c:	04000001 	.word	0x04000001
 8008c20:	00800001 	.word	0x00800001
 8008c24:	00400001 	.word	0x00400001
 8008c28:	00200001 	.word	0x00200001
 8008c2c:	00100001 	.word	0x00100001
 8008c30:	00080001 	.word	0x00080001
 8008c34:	00040001 	.word	0x00040001
 8008c38:	00020001 	.word	0x00020001
 8008c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c40:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 8008c44:	430b      	orrs	r3, r1
 8008c46:	f000 83c4 	beq.w	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0xd3e>
 8008c4a:	f002 b86b 	b.w	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0x2690>
    {
#if defined (SAI1)
      case RCC_PERIPHCLK_SAI1:

        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008c4e:	4ba1      	ldr	r3, [pc, #644]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008c50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008c54:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8008c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c60:	d036      	beq.n	8008cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>
 8008c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c64:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008c68:	d86b      	bhi.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c6c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c70:	d02b      	beq.n	8008cca <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8008c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008c78:	d863      	bhi.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c80:	d01b      	beq.n	8008cba <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c88:	d85b      	bhi.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d004      	beq.n	8008c9a <HAL_RCCEx_GetPeriphCLKFreq+0x606>
 8008c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c96:	d008      	beq.n	8008caa <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8008c98:	e053      	b.n	8008d42 <HAL_RCCEx_GetPeriphCLKFreq+0x6ae>

        switch (srcclk)
        {
          case RCC_SAI1CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008c9a:	f107 0320 	add.w	r3, r7, #32
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff f8b4 	bl	8007e0c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008ca8:	e04e      	b.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008caa:	f107 0314 	add.w	r3, r7, #20
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7ff fa18 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cb8:	e046      	b.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI1 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008cba:	f107 0308 	add.w	r3, r7, #8
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7ff fb7c 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cc8:	e03e      	b.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008cca:	4b83      	ldr	r3, [pc, #524]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008ccc:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008cce:	e03b      	b.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          case RCC_SAI1CLKSOURCE_CLKP: /* CLKP is the clock source for SAI1 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cd0:	4b80      	ldr	r3, [pc, #512]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008cd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008cd6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008cda:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cdc:	4b7d      	ldr	r3, [pc, #500]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d10c      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8008ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d109      	bne.n	8008d02 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cee:	4b79      	ldr	r3, [pc, #484]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	08db      	lsrs	r3, r3, #3
 8008cf4:	f003 0303 	and.w	r3, r3, #3
 8008cf8:	4a78      	ldr	r2, [pc, #480]	@ (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d00:	e01e      	b.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d02:	4b74      	ldr	r3, [pc, #464]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d0e:	d106      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d16:	d102      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008d18:	4b71      	ldr	r3, [pc, #452]	@ (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008d1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d1c:	e010      	b.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d2a:	d106      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
 8008d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d32:	d102      	bne.n	8008d3a <HAL_RCCEx_GetPeriphCLKFreq+0x6a6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008d34:	4b6b      	ldr	r3, [pc, #428]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008d36:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d38:	e002      	b.n	8008d40 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008d3e:	e003      	b.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
 8008d40:	e002      	b.n	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
          }
          default :
          {
            frequency = 0U;
 8008d42:	2300      	movs	r3, #0
 8008d44:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008d46:	bf00      	nop
          }
        }
        break;
 8008d48:	f001 bfef 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /*SAI1*/

#if defined(SAI2)
      case RCC_PERIPHCLK_SAI2:

        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008d4c:	4b61      	ldr	r3, [pc, #388]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008d4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008d52:	f403 1360 	and.w	r3, r3, #3670016	@ 0x380000
 8008d56:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d5e:	d036      	beq.n	8008dce <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
 8008d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d66:	d86b      	bhi.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008d6e:	d02b      	beq.n	8008dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8008d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d72:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8008d76:	d863      	bhi.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d7e:	d01b      	beq.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d86:	d85b      	bhi.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8008d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d004      	beq.n	8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d90:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008d94:	d008      	beq.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8008d96:	e053      	b.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>

        switch (srcclk)
        {
          case RCC_SAI2CLKSOURCE_PLL1Q: /* PLL1Q is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008d98:	f107 0320 	add.w	r3, r7, #32
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7ff f835 	bl	8007e0c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008da6:	e04e      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL2P: /* PLL2P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008da8:	f107 0314 	add.w	r3, r7, #20
 8008dac:	4618      	mov	r0, r3
 8008dae:	f7ff f999 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008db6:	e046      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PLL3P: /* PLLI3P is the clock source for SAI2 */
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008db8:	f107 0308 	add.w	r3, r7, #8
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff fafd 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dc6:	e03e      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 8008dc8:	4b43      	ldr	r3, [pc, #268]	@ (8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8008dca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008dcc:	e03b      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          case RCC_SAI2CLKSOURCE_CLKP: /* CLKP is the clock source for SAI2 */
          {

            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008dce:	4b41      	ldr	r3, [pc, #260]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008dd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8008dd4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8008dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008dda:	4b3e      	ldr	r3, [pc, #248]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f003 0302 	and.w	r3, r3, #2
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d10c      	bne.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
 8008de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d109      	bne.n	8008e00 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008dec:	4b39      	ldr	r3, [pc, #228]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	08db      	lsrs	r3, r3, #3
 8008df2:	f003 0303 	and.w	r3, r3, #3
 8008df6:	4a39      	ldr	r2, [pc, #228]	@ (8008edc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8008df8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dfe:	e01e      	b.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e00:	4b34      	ldr	r3, [pc, #208]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008e08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e0c:	d106      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e14:	d102      	bne.n	8008e1c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8008e16:	4b32      	ldr	r3, [pc, #200]	@ (8008ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8008e18:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e1a:	e010      	b.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008e28:	d106      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
 8008e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e30:	d102      	bne.n	8008e38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8008e32:	4b2c      	ldr	r3, [pc, #176]	@ (8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x850>)
 8008e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e36:	e002      	b.n	8008e3e <HAL_RCCEx_GetPeriphCLKFreq+0x7aa>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8008e3c:	e003      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
 8008e3e:	e002      	b.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          }
          default :
          {
            frequency = 0U;
 8008e40:	2300      	movs	r3, #0
 8008e42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8008e44:	bf00      	nop
          }
        }
        break;
 8008e46:	f001 bf70 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SAI2 */

#if defined(SDMMC1)
      case RCC_PERIPHCLK_SDMMC1:
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 8008e4a:	4b22      	ldr	r3, [pc, #136]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e54:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8008e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d108      	bne.n	8008e6e <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e5c:	f107 0320 	add.w	r3, r7, #32
 8008e60:	4618      	mov	r0, r3
 8008e62:	f7fe ffd3 	bl	8007e0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e68:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008e6a:	f001 bf5e 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC1CLKSOURCE_PLL2R)
 8008e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e70:	2b40      	cmp	r3, #64	@ 0x40
 8008e72:	d108      	bne.n	8008e86 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e74:	f107 0314 	add.w	r3, r7, #20
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7ff f933 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e82:	f001 bf52 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008e8a:	f001 bf4e 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SDMMC1 */

#if defined(SDMMC2)
      case RCC_PERIPHCLK_SDMMC2:
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8008e8e:	4b11      	ldr	r3, [pc, #68]	@ (8008ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8008e90:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e98:	633b      	str	r3, [r7, #48]	@ 0x30
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8008e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d108      	bne.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ea0:	f107 0320 	add.w	r3, r7, #32
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f7fe ffb1 	bl	8007e0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008eae:	f001 bf3c 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_SDMMC2CLKSOURCE_PLL2R)
 8008eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb4:	2b80      	cmp	r3, #128	@ 0x80
 8008eb6:	d108      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eb8:	f107 0314 	add.w	r3, r7, #20
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff f911 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ec6:	f001 bf30 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008ece:	f001 bf2c 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008ed2:	bf00      	nop
 8008ed4:	44020c00 	.word	0x44020c00
 8008ed8:	00bb8000 	.word	0x00bb8000
 8008edc:	03d09000 	.word	0x03d09000
 8008ee0:	003d0900 	.word	0x003d0900
 8008ee4:	007a1200 	.word	0x007a1200
#endif /* SDMMC2 */

      case RCC_PERIPHCLK_USART1:
        /* Get the current USART1 source */
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8008ee8:	4b9d      	ldr	r3, [pc, #628]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008eea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d104      	bne.n	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 8008efa:	f7fc ffd1 	bl	8005ea0 <HAL_RCC_GetPCLK2Freq>
 8008efe:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART1 */
        else
        {
          frequency = 0U;
        }
        break;
 8008f00:	f001 bf13 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8008f04:	4b96      	ldr	r3, [pc, #600]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008f0c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008f10:	d10a      	bne.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
 8008f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d107      	bne.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x894>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f18:	f107 0314 	add.w	r3, r7, #20
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7ff f8e1 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f26:	e043      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8008f28:	4b8d      	ldr	r3, [pc, #564]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008f34:	d10a      	bne.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
 8008f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f38:	2b02      	cmp	r3, #2
 8008f3a:	d107      	bne.n	8008f4c <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f3c:	f107 0308 	add.w	r3, r7, #8
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7ff fa3b 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f4a:	e031      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008f4c:	4b84      	ldr	r3, [pc, #528]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0302 	and.w	r3, r3, #2
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d10c      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8008f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d109      	bne.n	8008f72 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f5e:	4b80      	ldr	r3, [pc, #512]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	08db      	lsrs	r3, r3, #3
 8008f64:	f003 0303 	and.w	r3, r3, #3
 8008f68:	4a7e      	ldr	r2, [pc, #504]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8008f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f70:	e01e      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8008f72:	4b7b      	ldr	r3, [pc, #492]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008f7a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f7e:	d105      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8008f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	d102      	bne.n	8008f8c <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
          frequency = CSI_VALUE;
 8008f86:	4b78      	ldr	r3, [pc, #480]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8008f88:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f8a:	e011      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008f8c:	4b74      	ldr	r3, [pc, #464]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8008f92:	f003 0302 	and.w	r3, r3, #2
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d106      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9c:	2b05      	cmp	r3, #5
 8008f9e:	d103      	bne.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x914>
          frequency = LSE_VALUE;
 8008fa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fa6:	e003      	b.n	8008fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
          frequency = 0U;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8008fac:	f001 bebd 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8008fb0:	f001 bebb 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART2:
        /* Get the current USART2 source */
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8008fb4:	4b6a      	ldr	r3, [pc, #424]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008fb6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008fba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fbe:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d104      	bne.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8008fc6:	f7fc ff55 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 8008fca:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART2 */
        else
        {
          frequency = 0U;
        }
        break;
 8008fcc:	f001 bead 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8008fd0:	4b63      	ldr	r3, [pc, #396]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008fd8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008fdc:	d10a      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
 8008fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fe0:	2b08      	cmp	r3, #8
 8008fe2:	d107      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fe4:	f107 0314 	add.w	r3, r7, #20
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f7ff f87b 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ff2:	e03d      	b.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff6:	2b10      	cmp	r3, #16
 8008ff8:	d108      	bne.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ffa:	f107 0308 	add.w	r3, r7, #8
 8008ffe:	4618      	mov	r0, r3
 8009000:	f7ff f9dc 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009008:	f001 be8f 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800900c:	4b54      	ldr	r3, [pc, #336]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0302 	and.w	r3, r3, #2
 8009014:	2b02      	cmp	r3, #2
 8009016:	d10c      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8009018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901a:	2b18      	cmp	r3, #24
 800901c:	d109      	bne.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800901e:	4b50      	ldr	r3, [pc, #320]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	08db      	lsrs	r3, r3, #3
 8009024:	f003 0303 	and.w	r3, r3, #3
 8009028:	4a4e      	ldr	r2, [pc, #312]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 800902a:	fa22 f303 	lsr.w	r3, r2, r3
 800902e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009030:	e01e      	b.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8009032:	4b4b      	ldr	r3, [pc, #300]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800903a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800903e:	d105      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009042:	2b20      	cmp	r3, #32
 8009044:	d102      	bne.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
          frequency = CSI_VALUE;
 8009046:	4b48      	ldr	r3, [pc, #288]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009048:	637b      	str	r3, [r7, #52]	@ 0x34
 800904a:	e011      	b.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800904c:	4b44      	ldr	r3, [pc, #272]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800904e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009052:	f003 0302 	and.w	r3, r3, #2
 8009056:	2b02      	cmp	r3, #2
 8009058:	d106      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
 800905a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800905c:	2b28      	cmp	r3, #40	@ 0x28
 800905e:	d103      	bne.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          frequency = LSE_VALUE;
 8009060:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009064:	637b      	str	r3, [r7, #52]	@ 0x34
 8009066:	e003      	b.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          frequency = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800906c:	f001 be5d 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009070:	f001 be5b 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_USART3:
        /* Get the current USART3 source */
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009074:	4b3a      	ldr	r3, [pc, #232]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009076:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800907a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800907e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009082:	2b00      	cmp	r3, #0
 8009084:	d104      	bne.n	8009090 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009086:	f7fc fef5 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 800908a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART3 */
        else
        {
          frequency = 0U;
        }
        break;
 800908c:	f001 be4d 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8009090:	4b33      	ldr	r3, [pc, #204]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009098:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800909c:	d10a      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
 800909e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090a0:	2b40      	cmp	r3, #64	@ 0x40
 80090a2:	d107      	bne.n	80090b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa20>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090a4:	f107 0314 	add.w	r3, r7, #20
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7ff f81b 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090ae:	69bb      	ldr	r3, [r7, #24]
 80090b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80090b2:	e045      	b.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 80090b4:	4b2a      	ldr	r3, [pc, #168]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80090bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090c0:	d10a      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
 80090c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090c4:	2b80      	cmp	r3, #128	@ 0x80
 80090c6:	d107      	bne.n	80090d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090c8:	f107 0308 	add.w	r3, r7, #8
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7ff f975 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090d6:	e033      	b.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80090d8:	4b21      	ldr	r3, [pc, #132]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0302 	and.w	r3, r3, #2
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	d10c      	bne.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
 80090e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80090e8:	d109      	bne.n	80090fe <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090ea:	4b1d      	ldr	r3, [pc, #116]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	08db      	lsrs	r3, r3, #3
 80090f0:	f003 0303 	and.w	r3, r3, #3
 80090f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80090f6:	fa22 f303 	lsr.w	r3, r2, r3
 80090fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80090fc:	e020      	b.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80090fe:	4b18      	ldr	r3, [pc, #96]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009106:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800910a:	d106      	bne.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
 800910c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009112:	d102      	bne.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0xa86>
          frequency = CSI_VALUE;
 8009114:	4b14      	ldr	r3, [pc, #80]	@ (8009168 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8009116:	637b      	str	r3, [r7, #52]	@ 0x34
 8009118:	e012      	b.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 800911a:	4b11      	ldr	r3, [pc, #68]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800911c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009120:	f003 0302 	and.w	r3, r3, #2
 8009124:	2b02      	cmp	r3, #2
 8009126:	d107      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
 8009128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800912a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800912e:	d103      	bne.n	8009138 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>
          frequency = LSE_VALUE;
 8009130:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009134:	637b      	str	r3, [r7, #52]	@ 0x34
 8009136:	e003      	b.n	8009140 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = 0U;
 8009138:	2300      	movs	r3, #0
 800913a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800913c:	f001 bdf5 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009140:	f001 bdf3 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(UART4)
      case RCC_PERIPHCLK_UART4:
        /* Get the current UART4 source */
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009144:	4b06      	ldr	r3, [pc, #24]	@ (8009160 <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8009146:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800914a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800914e:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009152:	2b00      	cmp	r3, #0
 8009154:	d10a      	bne.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009156:	f7fc fe8d 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 800915a:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART4 */
        else
        {
          frequency = 0U;
        }
        break;
 800915c:	f001 bde5 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009160:	44020c00 	.word	0x44020c00
 8009164:	03d09000 	.word	0x03d09000
 8009168:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 800916c:	4ba0      	ldr	r3, [pc, #640]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009174:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009178:	d10b      	bne.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
 800917a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009180:	d107      	bne.n	8009192 <HAL_RCCEx_GetPeriphCLKFreq+0xafe>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009182:	f107 0314 	add.w	r3, r7, #20
 8009186:	4618      	mov	r0, r3
 8009188:	f7fe ffac 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009190:	e047      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8009192:	4b97      	ldr	r3, [pc, #604]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800919a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800919e:	d10b      	bne.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80091a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80091a6:	d107      	bne.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091a8:	f107 0308 	add.w	r3, r7, #8
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7ff f905 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80091b6:	e034      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80091b8:	4b8d      	ldr	r3, [pc, #564]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	2b02      	cmp	r3, #2
 80091c2:	d10d      	bne.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
 80091c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80091ca:	d109      	bne.n	80091e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091cc:	4b88      	ldr	r3, [pc, #544]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	08db      	lsrs	r3, r3, #3
 80091d2:	f003 0303 	and.w	r3, r3, #3
 80091d6:	4a87      	ldr	r2, [pc, #540]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80091d8:	fa22 f303 	lsr.w	r3, r2, r3
 80091dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80091de:	e020      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 80091e0:	4b83      	ldr	r3, [pc, #524]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ec:	d106      	bne.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80091ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091f4:	d102      	bne.n	80091fc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
          frequency = CSI_VALUE;
 80091f6:	4b80      	ldr	r3, [pc, #512]	@ (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80091f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80091fa:	e012      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80091fc:	4b7c      	ldr	r3, [pc, #496]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80091fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	2b02      	cmp	r3, #2
 8009208:	d107      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
 800920a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800920c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009210:	d103      	bne.n	800921a <HAL_RCCEx_GetPeriphCLKFreq+0xb86>
          frequency = LSE_VALUE;
 8009212:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009216:	637b      	str	r3, [r7, #52]	@ 0x34
 8009218:	e003      	b.n	8009222 <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
          frequency = 0U;
 800921a:	2300      	movs	r3, #0
 800921c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800921e:	f001 bd84 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009222:	f001 bd82 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART4 */

#if defined(UART5)
      case RCC_PERIPHCLK_UART5:
        /* Get the current UART5 source */
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009226:	4b72      	ldr	r3, [pc, #456]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009228:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800922c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009230:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009234:	2b00      	cmp	r3, #0
 8009236:	d104      	bne.n	8009242 <HAL_RCCEx_GetPeriphCLKFreq+0xbae>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009238:	f7fc fe1c 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 800923c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART5 */
        else
        {
          frequency = 0U;
        }
        break;
 800923e:	f001 bd74 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8009242:	4b6b      	ldr	r3, [pc, #428]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800924a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800924e:	d10b      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 8009250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009256:	d107      	bne.n	8009268 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009258:	f107 0314 	add.w	r3, r7, #20
 800925c:	4618      	mov	r0, r3
 800925e:	f7fe ff41 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009262:	69bb      	ldr	r3, [r7, #24]
 8009264:	637b      	str	r3, [r7, #52]	@ 0x34
 8009266:	e047      	b.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8009268:	4b61      	ldr	r3, [pc, #388]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009270:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009274:	d10b      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
 8009276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800927c:	d107      	bne.n	800928e <HAL_RCCEx_GetPeriphCLKFreq+0xbfa>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800927e:	f107 0308 	add.w	r3, r7, #8
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff f89a 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	637b      	str	r3, [r7, #52]	@ 0x34
 800928c:	e034      	b.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800928e:	4b58      	ldr	r3, [pc, #352]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b02      	cmp	r3, #2
 8009298:	d10d      	bne.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800929a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800929c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80092a0:	d109      	bne.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092a2:	4b53      	ldr	r3, [pc, #332]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	08db      	lsrs	r3, r3, #3
 80092a8:	f003 0303 	and.w	r3, r3, #3
 80092ac:	4a51      	ldr	r2, [pc, #324]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 80092ae:	fa22 f303 	lsr.w	r3, r2, r3
 80092b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80092b4:	e020      	b.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 80092b6:	4b4e      	ldr	r3, [pc, #312]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80092be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092c2:	d106      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80092c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092ca:	d102      	bne.n	80092d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
          frequency = CSI_VALUE;
 80092cc:	4b4a      	ldr	r3, [pc, #296]	@ (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80092ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80092d0:	e012      	b.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80092d2:	4b47      	ldr	r3, [pc, #284]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80092d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80092d8:	f003 0302 	and.w	r3, r3, #2
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d107      	bne.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 80092e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e2:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80092e6:	d103      	bne.n	80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = LSE_VALUE;
 80092e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80092ee:	e003      	b.n	80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
          frequency = 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80092f4:	f001 bd19 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80092f8:	f001 bd17 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART5 */

#if defined(USART6)
      case RCC_PERIPHCLK_USART6:
        /* Get the current USART6 source */
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80092fc:	4b3c      	ldr	r3, [pc, #240]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80092fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009302:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 8009306:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8009308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800930a:	2b00      	cmp	r3, #0
 800930c:	d104      	bne.n	8009318 <HAL_RCCEx_GetPeriphCLKFreq+0xc84>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800930e:	f7fc fdb1 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 8009312:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART6 */
        else
        {
          frequency = 0U;
        }
        break;
 8009314:	f001 bd09 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8009318:	4b35      	ldr	r3, [pc, #212]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009320:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009324:	d10b      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
 8009326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009328:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800932c:	d107      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0xcaa>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800932e:	f107 0314 	add.w	r3, r7, #20
 8009332:	4618      	mov	r0, r3
 8009334:	f7fe fed6 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	637b      	str	r3, [r7, #52]	@ 0x34
 800933c:	e047      	b.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 800933e:	4b2c      	ldr	r3, [pc, #176]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009346:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800934a:	d10b      	bne.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
 800934c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800934e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009352:	d107      	bne.n	8009364 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009354:	f107 0308 	add.w	r3, r7, #8
 8009358:	4618      	mov	r0, r3
 800935a:	f7ff f82f 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	637b      	str	r3, [r7, #52]	@ 0x34
 8009362:	e034      	b.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8009364:	4b22      	ldr	r3, [pc, #136]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0302 	and.w	r3, r3, #2
 800936c:	2b02      	cmp	r3, #2
 800936e:	d10d      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
 8009370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009372:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 8009376:	d109      	bne.n	800938c <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009378:	4b1d      	ldr	r3, [pc, #116]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	08db      	lsrs	r3, r3, #3
 800937e:	f003 0303 	and.w	r3, r3, #3
 8009382:	4a1c      	ldr	r2, [pc, #112]	@ (80093f4 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>)
 8009384:	fa22 f303 	lsr.w	r3, r2, r3
 8009388:	637b      	str	r3, [r7, #52]	@ 0x34
 800938a:	e020      	b.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 800938c:	4b18      	ldr	r3, [pc, #96]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009398:	d106      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800939a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800939c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093a0:	d102      	bne.n	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
          frequency = CSI_VALUE;
 80093a2:	4b15      	ldr	r3, [pc, #84]	@ (80093f8 <HAL_RCCEx_GetPeriphCLKFreq+0xd64>)
 80093a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80093a6:	e012      	b.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80093a8:	4b11      	ldr	r3, [pc, #68]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80093aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80093ae:	f003 0302 	and.w	r3, r3, #2
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d107      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
 80093b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093b8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 80093bc:	d103      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd32>
          frequency = LSE_VALUE;
 80093be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80093c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80093c4:	e003      	b.n	80093ce <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
          frequency = 0U;
 80093c6:	2300      	movs	r3, #0
 80093c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80093ca:	f001 bcae 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093ce:	f001 bcac 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART6 */

#if defined(UART7)
      case RCC_PERIPHCLK_UART7:
        /* Get the current UART7 source */
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80093d2:	4b07      	ldr	r3, [pc, #28]	@ (80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd5c>)
 80093d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80093d8:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
 80093dc:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80093de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10b      	bne.n	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0xd68>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80093e4:	f7fc fd46 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 80093e8:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART7 */
        else
        {
          frequency = 0U;
        }
        break;
 80093ea:	f001 bc9e 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80093ee:	bf00      	nop
 80093f0:	44020c00 	.word	0x44020c00
 80093f4:	03d09000 	.word	0x03d09000
 80093f8:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80093fc:	4ba0      	ldr	r3, [pc, #640]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009404:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009408:	d10b      	bne.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
 800940a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009410:	d107      	bne.n	8009422 <HAL_RCCEx_GetPeriphCLKFreq+0xd8e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009412:	f107 0314 	add.w	r3, r7, #20
 8009416:	4618      	mov	r0, r3
 8009418:	f7fe fe64 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009420:	e047      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8009422:	4b97      	ldr	r3, [pc, #604]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800942a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800942e:	d10b      	bne.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
 8009430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009432:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009436:	d107      	bne.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0xdb4>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009438:	f107 0308 	add.w	r3, r7, #8
 800943c:	4618      	mov	r0, r3
 800943e:	f7fe ffbd 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	637b      	str	r3, [r7, #52]	@ 0x34
 8009446:	e034      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8009448:	4b8d      	ldr	r3, [pc, #564]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0302 	and.w	r3, r3, #2
 8009450:	2b02      	cmp	r3, #2
 8009452:	d10d      	bne.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8009454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009456:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800945a:	d109      	bne.n	8009470 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800945c:	4b88      	ldr	r3, [pc, #544]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	08db      	lsrs	r3, r3, #3
 8009462:	f003 0303 	and.w	r3, r3, #3
 8009466:	4a87      	ldr	r2, [pc, #540]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8009468:	fa22 f303 	lsr.w	r3, r2, r3
 800946c:	637b      	str	r3, [r7, #52]	@ 0x34
 800946e:	e020      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8009470:	4b83      	ldr	r3, [pc, #524]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800947c:	d106      	bne.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 800947e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009480:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009484:	d102      	bne.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
          frequency = CSI_VALUE;
 8009486:	4b80      	ldr	r3, [pc, #512]	@ (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8009488:	637b      	str	r3, [r7, #52]	@ 0x34
 800948a:	e012      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 800948c:	4b7c      	ldr	r3, [pc, #496]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800948e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009492:	f003 0302 	and.w	r3, r3, #2
 8009496:	2b02      	cmp	r3, #2
 8009498:	d107      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
 800949a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80094a0:	d103      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0xe16>
          frequency = LSE_VALUE;
 80094a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80094a8:	e003      	b.n	80094b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe1e>
          frequency = 0U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80094ae:	f001 bc3c 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80094b2:	f001 bc3a 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART7 */

#if defined(UART8)
      case RCC_PERIPHCLK_UART8:
        /* Get the current UART8 source */
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80094b6:	4b72      	ldr	r3, [pc, #456]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80094b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80094bc:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80094c0:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 80094c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d104      	bne.n	80094d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe3e>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 80094c8:	f7fc fcd4 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 80094cc:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART8 */
        else
        {
          frequency = 0U;
        }
        break;
 80094ce:	f001 bc2c 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 80094d2:	4b6b      	ldr	r3, [pc, #428]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80094da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80094de:	d10b      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 80094e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094e6:	d107      	bne.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094e8:	f107 0314 	add.w	r3, r7, #20
 80094ec:	4618      	mov	r0, r3
 80094ee:	f7fe fdf9 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094f2:	69bb      	ldr	r3, [r7, #24]
 80094f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80094f6:	e047      	b.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 80094f8:	4b61      	ldr	r3, [pc, #388]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009500:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009504:	d10b      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
 8009506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800950c:	d107      	bne.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0xe8a>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800950e:	f107 0308 	add.w	r3, r7, #8
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe ff52 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	637b      	str	r3, [r7, #52]	@ 0x34
 800951c:	e034      	b.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 800951e:	4b58      	ldr	r3, [pc, #352]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0302 	and.w	r3, r3, #2
 8009526:	2b02      	cmp	r3, #2
 8009528:	d10d      	bne.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
 800952a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800952c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009530:	d109      	bne.n	8009546 <HAL_RCCEx_GetPeriphCLKFreq+0xeb2>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009532:	4b53      	ldr	r3, [pc, #332]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	08db      	lsrs	r3, r3, #3
 8009538:	f003 0303 	and.w	r3, r3, #3
 800953c:	4a51      	ldr	r2, [pc, #324]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 800953e:	fa22 f303 	lsr.w	r3, r2, r3
 8009542:	637b      	str	r3, [r7, #52]	@ 0x34
 8009544:	e020      	b.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8009546:	4b4e      	ldr	r3, [pc, #312]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800954e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009552:	d106      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
 8009554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009556:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800955a:	d102      	bne.n	8009562 <HAL_RCCEx_GetPeriphCLKFreq+0xece>
          frequency = CSI_VALUE;
 800955c:	4b4a      	ldr	r3, [pc, #296]	@ (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 800955e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009560:	e012      	b.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8009562:	4b47      	ldr	r3, [pc, #284]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b02      	cmp	r3, #2
 800956e:	d107      	bne.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
 8009570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009572:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8009576:	d103      	bne.n	8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xeec>
          frequency = LSE_VALUE;
 8009578:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800957c:	637b      	str	r3, [r7, #52]	@ 0x34
 800957e:	e003      	b.n	8009588 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
          frequency = 0U;
 8009580:	2300      	movs	r3, #0
 8009582:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009584:	f001 bbd1 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009588:	f001 bbcf 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART8 */

#if defined(UART9)
      case RCC_PERIPHCLK_UART9:
        /* Get the current UART9 source */
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800958c:	4b3c      	ldr	r3, [pc, #240]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800958e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009592:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8009596:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8009598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959a:	2b00      	cmp	r3, #0
 800959c:	d104      	bne.n	80095a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 800959e:	f7fc fc69 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 80095a2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART9 */
        else
        {
          frequency = 0U;
        }
        break;
 80095a4:	f001 bbc1 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80095a8:	4b35      	ldr	r3, [pc, #212]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095b0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095b4:	d10b      	bne.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
 80095b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095bc:	d107      	bne.n	80095ce <HAL_RCCEx_GetPeriphCLKFreq+0xf3a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095be:	f107 0314 	add.w	r3, r7, #20
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe fd8e 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095c8:	69bb      	ldr	r3, [r7, #24]
 80095ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80095cc:	e047      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80095ce:	4b2c      	ldr	r3, [pc, #176]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095da:	d10b      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095e2:	d107      	bne.n	80095f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095e4:	f107 0308 	add.w	r3, r7, #8
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7fe fee7 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80095f2:	e034      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 80095f4:	4b22      	ldr	r3, [pc, #136]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b02      	cmp	r3, #2
 80095fe:	d10d      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
 8009600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009602:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009606:	d109      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0xf88>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009608:	4b1d      	ldr	r3, [pc, #116]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	08db      	lsrs	r3, r3, #3
 800960e:	f003 0303 	and.w	r3, r3, #3
 8009612:	4a1c      	ldr	r2, [pc, #112]	@ (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0xff0>)
 8009614:	fa22 f303 	lsr.w	r3, r2, r3
 8009618:	637b      	str	r3, [r7, #52]	@ 0x34
 800961a:	e020      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800961c:	4b18      	ldr	r3, [pc, #96]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009628:	d106      	bne.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
 800962a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800962c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009630:	d102      	bne.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0xfa4>
          frequency = CSI_VALUE;
 8009632:	4b15      	ldr	r3, [pc, #84]	@ (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8009634:	637b      	str	r3, [r7, #52]	@ 0x34
 8009636:	e012      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8009638:	4b11      	ldr	r3, [pc, #68]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 800963a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800963e:	f003 0302 	and.w	r3, r3, #2
 8009642:	2b02      	cmp	r3, #2
 8009644:	d107      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
 8009646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009648:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800964c:	d103      	bne.n	8009656 <HAL_RCCEx_GetPeriphCLKFreq+0xfc2>
          frequency = LSE_VALUE;
 800964e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009652:	637b      	str	r3, [r7, #52]	@ 0x34
 8009654:	e003      	b.n	800965e <HAL_RCCEx_GetPeriphCLKFreq+0xfca>
          frequency = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800965a:	f001 bb66 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800965e:	f001 bb64 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART9 */

#if defined(USART10)
      case RCC_PERIPHCLK_USART10:
        /* Get the current USART10 source */
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8009662:	4b07      	ldr	r3, [pc, #28]	@ (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>)
 8009664:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009668:	f003 5360 	and.w	r3, r3, #939524096	@ 0x38000000
 800966c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 800966e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10b      	bne.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0xff8>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009674:	f7fc fbfe 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 8009678:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART10 */
        else
        {
          frequency = 0U;
        }
        break;
 800967a:	f001 bb56 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800967e:	bf00      	nop
 8009680:	44020c00 	.word	0x44020c00
 8009684:	03d09000 	.word	0x03d09000
 8009688:	003d0900 	.word	0x003d0900
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 800968c:	4ba1      	ldr	r3, [pc, #644]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009694:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009698:	d10b      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
 800969a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800969c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096a0:	d107      	bne.n	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x101e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80096a2:	f107 0314 	add.w	r3, r7, #20
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe fd1c 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80096b0:	e047      	b.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80096b2:	4b98      	ldr	r3, [pc, #608]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80096ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096be:	d10b      	bne.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
 80096c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096c6:	d107      	bne.n	80096d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80096c8:	f107 0308 	add.w	r3, r7, #8
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7fe fe75 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80096d6:	e034      	b.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80096d8:	4b8e      	ldr	r3, [pc, #568]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0302 	and.w	r3, r3, #2
 80096e0:	2b02      	cmp	r3, #2
 80096e2:	d10d      	bne.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
 80096e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e6:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80096ea:	d109      	bne.n	8009700 <HAL_RCCEx_GetPeriphCLKFreq+0x106c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096ec:	4b89      	ldr	r3, [pc, #548]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	08db      	lsrs	r3, r3, #3
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	4a88      	ldr	r2, [pc, #544]	@ (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80096f8:	fa22 f303 	lsr.w	r3, r2, r3
 80096fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80096fe:	e020      	b.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8009700:	4b84      	ldr	r3, [pc, #528]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800970c:	d106      	bne.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800970e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009710:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009714:	d102      	bne.n	800971c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
          frequency = CSI_VALUE;
 8009716:	4b81      	ldr	r3, [pc, #516]	@ (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 8009718:	637b      	str	r3, [r7, #52]	@ 0x34
 800971a:	e012      	b.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800971c:	4b7d      	ldr	r3, [pc, #500]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800971e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	2b02      	cmp	r3, #2
 8009728:	d107      	bne.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 800972a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800972c:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 8009730:	d103      	bne.n	800973a <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
          frequency = LSE_VALUE;
 8009732:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009736:	637b      	str	r3, [r7, #52]	@ 0x34
 8009738:	e003      	b.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x10ae>
          frequency = 0U;
 800973a:	2300      	movs	r3, #0
 800973c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800973e:	f001 baf4 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009742:	f001 baf2 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART10 */

#if defined(USART11)
      case RCC_PERIPHCLK_USART11:
        /* Get the current USART11 source */
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8009746:	4b73      	ldr	r3, [pc, #460]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009748:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800974c:	f003 0307 	and.w	r3, r3, #7
 8009750:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8009752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009754:	2b00      	cmp	r3, #0
 8009756:	d104      	bne.n	8009762 <HAL_RCCEx_GetPeriphCLKFreq+0x10ce>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009758:	f7fc fb8c 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 800975c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for USART11 */
        else
        {
          frequency = 0U;
        }
        break;
 800975e:	f001 bae4 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8009762:	4b6c      	ldr	r3, [pc, #432]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800976a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800976e:	d10a      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
 8009770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009772:	2b01      	cmp	r3, #1
 8009774:	d107      	bne.n	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x10f2>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009776:	f107 0314 	add.w	r3, r7, #20
 800977a:	4618      	mov	r0, r3
 800977c:	f7fe fcb2 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	637b      	str	r3, [r7, #52]	@ 0x34
 8009784:	e043      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8009786:	4b63      	ldr	r3, [pc, #396]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800978e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009792:	d10a      	bne.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
 8009794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009796:	2b02      	cmp	r3, #2
 8009798:	d107      	bne.n	80097aa <HAL_RCCEx_GetPeriphCLKFreq+0x1116>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800979a:	f107 0308 	add.w	r3, r7, #8
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fe fe0c 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80097a8:	e031      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80097aa:	4b5a      	ldr	r3, [pc, #360]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0302 	and.w	r3, r3, #2
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d10c      	bne.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
 80097b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d109      	bne.n	80097d0 <HAL_RCCEx_GetPeriphCLKFreq+0x113c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097bc:	4b55      	ldr	r3, [pc, #340]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	08db      	lsrs	r3, r3, #3
 80097c2:	f003 0303 	and.w	r3, r3, #3
 80097c6:	4a54      	ldr	r2, [pc, #336]	@ (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 80097c8:	fa22 f303 	lsr.w	r3, r2, r3
 80097cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80097ce:	e01e      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80097d0:	4b50      	ldr	r3, [pc, #320]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097dc:	d105      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
 80097de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097e0:	2b04      	cmp	r3, #4
 80097e2:	d102      	bne.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x1156>
          frequency = CSI_VALUE;
 80097e4:	4b4d      	ldr	r3, [pc, #308]	@ (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80097e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80097e8:	e011      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80097ea:	4b4a      	ldr	r3, [pc, #296]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80097ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80097f0:	f003 0302 	and.w	r3, r3, #2
 80097f4:	2b02      	cmp	r3, #2
 80097f6:	d106      	bne.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
 80097f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097fa:	2b05      	cmp	r3, #5
 80097fc:	d103      	bne.n	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x1172>
          frequency = LSE_VALUE;
 80097fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009802:	637b      	str	r3, [r7, #52]	@ 0x34
 8009804:	e003      	b.n	800980e <HAL_RCCEx_GetPeriphCLKFreq+0x117a>
          frequency = 0U;
 8009806:	2300      	movs	r3, #0
 8009808:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800980a:	f001 ba8e 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800980e:	f001 ba8c 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* USART11 */

#if defined(UART12)
      case RCC_PERIPHCLK_UART12:
        /* Get the current UART12 source */
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8009812:	4b40      	ldr	r3, [pc, #256]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009814:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009818:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800981c:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 800981e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009820:	2b00      	cmp	r3, #0
 8009822:	d104      	bne.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x119a>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009824:	f7fc fb26 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 8009828:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for UART12 */
        else
        {
          frequency = 0U;
        }
        break;
 800982a:	f001 ba7e 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 800982e:	4b39      	ldr	r3, [pc, #228]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009836:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800983a:	d10a      	bne.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
 800983c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983e:	2b10      	cmp	r3, #16
 8009840:	d107      	bne.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x11be>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009842:	f107 0314 	add.w	r3, r7, #20
 8009846:	4618      	mov	r0, r3
 8009848:	f7fe fc4c 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009850:	e043      	b.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8009852:	4b30      	ldr	r3, [pc, #192]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800985a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800985e:	d10a      	bne.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
 8009860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009862:	2b20      	cmp	r3, #32
 8009864:	d107      	bne.n	8009876 <HAL_RCCEx_GetPeriphCLKFreq+0x11e2>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009866:	f107 0308 	add.w	r3, r7, #8
 800986a:	4618      	mov	r0, r3
 800986c:	f7fe fda6 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	637b      	str	r3, [r7, #52]	@ 0x34
 8009874:	e031      	b.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8009876:	4b27      	ldr	r3, [pc, #156]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f003 0302 	and.w	r3, r3, #2
 800987e:	2b02      	cmp	r3, #2
 8009880:	d10c      	bne.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
 8009882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009884:	2b30      	cmp	r3, #48	@ 0x30
 8009886:	d109      	bne.n	800989c <HAL_RCCEx_GetPeriphCLKFreq+0x1208>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009888:	4b22      	ldr	r3, [pc, #136]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	08db      	lsrs	r3, r3, #3
 800988e:	f003 0303 	and.w	r3, r3, #3
 8009892:	4a21      	ldr	r2, [pc, #132]	@ (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x1284>)
 8009894:	fa22 f303 	lsr.w	r3, r2, r3
 8009898:	637b      	str	r3, [r7, #52]	@ 0x34
 800989a:	e01e      	b.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 800989c:	4b1d      	ldr	r3, [pc, #116]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098a8:	d105      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80098aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ac:	2b40      	cmp	r3, #64	@ 0x40
 80098ae:	d102      	bne.n	80098b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
          frequency = CSI_VALUE;
 80098b0:	4b1a      	ldr	r3, [pc, #104]	@ (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x1288>)
 80098b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80098b4:	e011      	b.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80098b6:	4b17      	ldr	r3, [pc, #92]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80098b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80098bc:	f003 0302 	and.w	r3, r3, #2
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d106      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
 80098c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c6:	2b50      	cmp	r3, #80	@ 0x50
 80098c8:	d103      	bne.n	80098d2 <HAL_RCCEx_GetPeriphCLKFreq+0x123e>
          frequency = LSE_VALUE;
 80098ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80098ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80098d0:	e003      	b.n	80098da <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
          frequency = 0U;
 80098d2:	2300      	movs	r3, #0
 80098d4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80098d6:	f001 ba28 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80098da:	f001 ba26 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* UART12 */

      case RCC_PERIPHCLK_LPUART1:
        /* Get the current LPUART1 source */
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80098de:	4b0d      	ldr	r3, [pc, #52]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 80098e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80098e4:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80098e8:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80098ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d104      	bne.n	80098fa <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 80098f0:	f7fc faec 	bl	8005ecc <HAL_RCC_GetPCLK3Freq>
 80098f4:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for LPUART1 */
        else
        {
          frequency = 0U;
        }
        break;
 80098f6:	f001 ba18 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80098fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009900:	d10e      	bne.n	8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x128c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009902:	f107 0314 	add.w	r3, r7, #20
 8009906:	4618      	mov	r0, r3
 8009908:	f7fe fbec 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009910:	f001 ba0b 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009914:	44020c00 	.word	0x44020c00
 8009918:	03d09000 	.word	0x03d09000
 800991c:	003d0900 	.word	0x003d0900
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8009920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009922:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009926:	d108      	bne.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0x12a6>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009928:	f107 0308 	add.w	r3, r7, #8
 800992c:	4618      	mov	r0, r3
 800992e:	f7fe fd45 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009936:	f001 b9f8 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800993a:	4ba4      	ldr	r3, [pc, #656]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0302 	and.w	r3, r3, #2
 8009942:	2b02      	cmp	r3, #2
 8009944:	d10d      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8009946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009948:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800994c:	d109      	bne.n	8009962 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800994e:	4b9f      	ldr	r3, [pc, #636]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	08db      	lsrs	r3, r3, #3
 8009954:	f003 0303 	and.w	r3, r3, #3
 8009958:	4a9d      	ldr	r2, [pc, #628]	@ (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 800995a:	fa22 f303 	lsr.w	r3, r2, r3
 800995e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009960:	e020      	b.n	80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8009962:	4b9a      	ldr	r3, [pc, #616]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800996a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800996e:	d106      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
 8009970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009972:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009976:	d102      	bne.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x12ea>
          frequency = CSI_VALUE;
 8009978:	4b96      	ldr	r3, [pc, #600]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 800997a:	637b      	str	r3, [r7, #52]	@ 0x34
 800997c:	e012      	b.n	80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800997e:	4b93      	ldr	r3, [pc, #588]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009980:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009984:	f003 0302 	and.w	r3, r3, #2
 8009988:	2b02      	cmp	r3, #2
 800998a:	d107      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
 800998c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800998e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8009992:	d103      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x1308>
          frequency = LSE_VALUE;
 8009994:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009998:	637b      	str	r3, [r7, #52]	@ 0x34
 800999a:	e003      	b.n	80099a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1310>
          frequency = 0U;
 800999c:	2300      	movs	r3, #0
 800999e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099a0:	f001 b9c3 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 80099a4:	f001 b9c1 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_ADCDAC:
        /* Get the current ADCDAC source */
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80099a8:	4b88      	ldr	r3, [pc, #544]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80099aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80099ae:	f003 0307 	and.w	r3, r3, #7
 80099b2:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80099b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d104      	bne.n	80099c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>
        {
          frequency = HAL_RCC_GetHCLKFreq();
 80099ba:	f7fc fa3f 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 80099be:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for ADCDAC */
        else
        {
          frequency = 0U;
        }
        break;
 80099c0:	f001 b9b3 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80099c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d104      	bne.n	80099d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
          frequency = HAL_RCC_GetSysClockFreq();
 80099ca:	f7fc f90b 	bl	8005be4 <HAL_RCC_GetSysClockFreq>
 80099ce:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80099d0:	f001 b9ab 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 80099d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099d6:	2b02      	cmp	r3, #2
 80099d8:	d108      	bne.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x1358>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099da:	f107 0314 	add.w	r3, r7, #20
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe fb80 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80099e8:	f001 b99f 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80099ec:	4b77      	ldr	r3, [pc, #476]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099f8:	d105      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
 80099fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fc:	2b03      	cmp	r3, #3
 80099fe:	d102      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1372>
          frequency = HSE_VALUE;
 8009a00:	4b75      	ldr	r3, [pc, #468]	@ (8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1544>)
 8009a02:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a04:	e023      	b.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009a06:	4b71      	ldr	r3, [pc, #452]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f003 0302 	and.w	r3, r3, #2
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d10c      	bne.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
 8009a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a14:	2b04      	cmp	r3, #4
 8009a16:	d109      	bne.n	8009a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009a18:	4b6c      	ldr	r3, [pc, #432]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	08db      	lsrs	r3, r3, #3
 8009a1e:	f003 0303 	and.w	r3, r3, #3
 8009a22:	4a6b      	ldr	r2, [pc, #428]	@ (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009a24:	fa22 f303 	lsr.w	r3, r2, r3
 8009a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a2a:	e010      	b.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009a2c:	4b67      	ldr	r3, [pc, #412]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a38:	d105      	bne.n	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3c:	2b05      	cmp	r3, #5
 8009a3e:	d102      	bne.n	8009a46 <HAL_RCCEx_GetPeriphCLKFreq+0x13b2>
          frequency = CSI_VALUE;
 8009a40:	4b64      	ldr	r3, [pc, #400]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009a42:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a44:	e003      	b.n	8009a4e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
          frequency = 0U;
 8009a46:	2300      	movs	r3, #0
 8009a48:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009a4a:	f001 b96e 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009a4e:	f001 b96c 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      case RCC_PERIPHCLK_DAC_LP:
        /* Get the current DAC low-power source */
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8009a52:	4b5e      	ldr	r3, [pc, #376]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009a54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009a58:	f003 0308 	and.w	r3, r3, #8
 8009a5c:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8009a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a64:	f003 0302 	and.w	r3, r3, #2
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d106      	bne.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
 8009a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d103      	bne.n	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
        {
          frequency = LSE_VALUE;
 8009a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a76:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a78:	e012      	b.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8009a7a:	4b54      	ldr	r3, [pc, #336]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009a7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009a80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a88:	d106      	bne.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
 8009a8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a8c:	2b08      	cmp	r3, #8
 8009a8e:	d103      	bne.n	8009a98 <HAL_RCCEx_GetPeriphCLKFreq+0x1404>
        {
          frequency = LSI_VALUE;
 8009a90:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a96:	e003      	b.n	8009aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x140c>
        }

        /* Clock not enabled for DAC */
        else
        {
          frequency = 0U;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 8009a9c:	f001 b945 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009aa0:	f001 b943 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C1:
        /* Get the current I2C1 source */
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009aa4:	4b49      	ldr	r3, [pc, #292]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009aa6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009aaa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009aae:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d104      	bne.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x142c>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009ab6:	f7fc f9dd 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 8009aba:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009abc:	f001 b935 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ac6:	d108      	bne.n	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x1446>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ac8:	f107 0308 	add.w	r3, r7, #8
 8009acc:	4618      	mov	r0, r3
 8009ace:	f7fe fc75 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ad6:	f001 b928 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009ada:	4b3c      	ldr	r3, [pc, #240]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 0302 	and.w	r3, r3, #2
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d10d      	bne.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ae8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009aec:	d109      	bne.n	8009b02 <HAL_RCCEx_GetPeriphCLKFreq+0x146e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009aee:	4b37      	ldr	r3, [pc, #220]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	08db      	lsrs	r3, r3, #3
 8009af4:	f003 0303 	and.w	r3, r3, #3
 8009af8:	4a35      	ldr	r2, [pc, #212]	@ (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009afa:	fa22 f303 	lsr.w	r3, r2, r3
 8009afe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b00:	e011      	b.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8009b02:	4b32      	ldr	r3, [pc, #200]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b0e:	d106      	bne.n	8009b1e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
 8009b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b12:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009b16:	d102      	bne.n	8009b1e <HAL_RCCEx_GetPeriphCLKFreq+0x148a>
          frequency = CSI_VALUE;
 8009b18:	4b2e      	ldr	r3, [pc, #184]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009b1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b1c:	e003      	b.n	8009b26 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
          frequency = 0U;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b22:	f001 b902 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009b26:	f001 b900 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_I2C2:
        /* Get the current I2C2 source */
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009b2a:	4b28      	ldr	r3, [pc, #160]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009b2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009b30:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8009b34:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d104      	bne.n	8009b46 <HAL_RCCEx_GetPeriphCLKFreq+0x14b2>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009b3c:	f7fc f99a 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 8009b40:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C2 */
        else
        {
          frequency = 0U;
        }
        break;
 8009b42:	f001 b8f2 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8009b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b48:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009b4c:	d108      	bne.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x14cc>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b4e:	f107 0308 	add.w	r3, r7, #8
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe fc32 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009b5c:	f001 b8e5 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009b60:	4b1a      	ldr	r3, [pc, #104]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0302 	and.w	r3, r3, #2
 8009b68:	2b02      	cmp	r3, #2
 8009b6a:	d10d      	bne.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009b72:	d109      	bne.n	8009b88 <HAL_RCCEx_GetPeriphCLKFreq+0x14f4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b74:	4b15      	ldr	r3, [pc, #84]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	08db      	lsrs	r3, r3, #3
 8009b7a:	f003 0303 	and.w	r3, r3, #3
 8009b7e:	4a14      	ldr	r2, [pc, #80]	@ (8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x153c>)
 8009b80:	fa22 f303 	lsr.w	r3, r2, r3
 8009b84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b86:	e011      	b.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8009b88:	4b10      	ldr	r3, [pc, #64]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b94:	d106      	bne.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
 8009b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b98:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009b9c:	d102      	bne.n	8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1510>
          frequency = CSI_VALUE;
 8009b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8009bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>)
 8009ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ba2:	e003      	b.n	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x1518>
          frequency = 0U;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009ba8:	f001 b8bf 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009bac:	f001 b8bd 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(I2C3)
      case RCC_PERIPHCLK_I2C3:
        /* Get the current I2C3 source */
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009bb0:	4b06      	ldr	r3, [pc, #24]	@ (8009bcc <HAL_RCCEx_GetPeriphCLKFreq+0x1538>)
 8009bb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009bb6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8009bba:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8009bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10c      	bne.n	8009bdc <HAL_RCCEx_GetPeriphCLKFreq+0x1548>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009bc2:	f7fc f983 	bl	8005ecc <HAL_RCC_GetPCLK3Freq>
 8009bc6:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C3 */
        else
        {
          frequency = 0U;
        }
        break;
 8009bc8:	f001 b8af 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009bcc:	44020c00 	.word	0x44020c00
 8009bd0:	03d09000 	.word	0x03d09000
 8009bd4:	003d0900 	.word	0x003d0900
 8009bd8:	007a1200 	.word	0x007a1200
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8009bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009be2:	d108      	bne.n	8009bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1562>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009be4:	f107 0308 	add.w	r3, r7, #8
 8009be8:	4618      	mov	r0, r3
 8009bea:	f7fe fbe7 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009bee:	693b      	ldr	r3, [r7, #16]
 8009bf0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009bf2:	f001 b89a 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8009bf6:	4b9f      	ldr	r3, [pc, #636]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 0302 	and.w	r3, r3, #2
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d10d      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
 8009c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c08:	d109      	bne.n	8009c1e <HAL_RCCEx_GetPeriphCLKFreq+0x158a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c0a:	4b9a      	ldr	r3, [pc, #616]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	08db      	lsrs	r3, r3, #3
 8009c10:	f003 0303 	and.w	r3, r3, #3
 8009c14:	4a98      	ldr	r2, [pc, #608]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009c16:	fa22 f303 	lsr.w	r3, r2, r3
 8009c1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c1c:	e011      	b.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8009c1e:	4b95      	ldr	r3, [pc, #596]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c2a:	d106      	bne.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
 8009c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009c32:	d102      	bne.n	8009c3a <HAL_RCCEx_GetPeriphCLKFreq+0x15a6>
          frequency = CSI_VALUE;
 8009c34:	4b91      	ldr	r3, [pc, #580]	@ (8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009c36:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c38:	e003      	b.n	8009c42 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
          frequency = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c3e:	f001 b874 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009c42:	f001 b872 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C3 */

#if defined(I2C4)
      case RCC_PERIPHCLK_I2C4:
        /* Get the current I2C4 source */
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009c46:	4b8b      	ldr	r3, [pc, #556]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009c48:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009c4c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8009c50:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8009c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d104      	bne.n	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x15ce>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 8009c58:	f7fc f938 	bl	8005ecc <HAL_RCC_GetPCLK3Freq>
 8009c5c:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I2C4 */
        else
        {
          frequency = 0U;
        }
        break;
 8009c5e:	f001 b864 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8009c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c68:	d108      	bne.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x15e8>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c6a:	f107 0308 	add.w	r3, r7, #8
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fe fba4 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009c78:	f001 b857 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009c7c:	4b7d      	ldr	r3, [pc, #500]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f003 0302 	and.w	r3, r3, #2
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d10d      	bne.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
 8009c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c8e:	d109      	bne.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c90:	4b78      	ldr	r3, [pc, #480]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	08db      	lsrs	r3, r3, #3
 8009c96:	f003 0303 	and.w	r3, r3, #3
 8009c9a:	4a77      	ldr	r2, [pc, #476]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca0:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca2:	e011      	b.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8009ca4:	4b73      	ldr	r3, [pc, #460]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009cb0:	d106      	bne.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
 8009cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009cb8:	d102      	bne.n	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x162c>
          frequency = CSI_VALUE;
 8009cba:	4b70      	ldr	r3, [pc, #448]	@ (8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009cbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cbe:	e003      	b.n	8009cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1634>
          frequency = 0U;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cc4:	f001 b831 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009cc8:	f001 b82f 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* I2C4 */

      case RCC_PERIPHCLK_I3C1:
        /* Get the current I3C1 source */
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8009ccc:	4b69      	ldr	r3, [pc, #420]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009cce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009cd2:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8009cd6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8009cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d104      	bne.n	8009ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x1654>
        {
          frequency = HAL_RCC_GetPCLK1Freq();
 8009cde:	f7fc f8c9 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 8009ce2:	6378      	str	r0, [r7, #52]	@ 0x34
        /* Clock not enabled for I3C1 */
        else
        {
          frequency = 0U;
        }
        break;
 8009ce4:	f001 b821 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cee:	d108      	bne.n	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x166e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cf0:	f107 0308 	add.w	r3, r7, #8
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fe fb61 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009cfe:	f001 b814 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8009d02:	4b5c      	ldr	r3, [pc, #368]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0302 	and.w	r3, r3, #2
 8009d0a:	2b02      	cmp	r3, #2
 8009d0c:	d10e      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009d14:	d10a      	bne.n	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1698>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009d16:	4b57      	ldr	r3, [pc, #348]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	08db      	lsrs	r3, r3, #3
 8009d1c:	f003 0303 	and.w	r3, r3, #3
 8009d20:	4a55      	ldr	r2, [pc, #340]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009d22:	fa22 f303 	lsr.w	r3, r2, r3
 8009d26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d28:	f000 bfff 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8009d30:	f000 bffb 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        break;
#endif /* I3C2*/

      case RCC_PERIPHCLK_LPTIM1:
        /* Get the current LPTIM1 source */
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009d34:	4b4f      	ldr	r3, [pc, #316]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009d36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009d3a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009d3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d42:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009d46:	d056      	beq.n	8009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x1762>
 8009d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8009d4e:	f200 808b 	bhi.w	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d58:	d03e      	beq.n	8009dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1744>
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d60:	f200 8082 	bhi.w	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d6a:	d027      	beq.n	8009dbc <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009d72:	d879      	bhi.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d7a:	d017      	beq.n	8009dac <HAL_RCCEx_GetPeriphCLKFreq+0x1718>
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009d82:	d871      	bhi.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>
 8009d84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d004      	beq.n	8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1700>
 8009d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d90:	d004      	beq.n	8009d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1708>
 8009d92:	e069      	b.n	8009e68 <HAL_RCCEx_GetPeriphCLKFreq+0x17d4>

        switch (srcclk)
        {
          case RCC_LPTIM1CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 8009d94:	f7fc f89a 	bl	8005ecc <HAL_RCC_GetPCLK3Freq>
 8009d98:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009d9a:	e068      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d9c:	f107 0314 	add.w	r3, r7, #20
 8009da0:	4618      	mov	r0, r3
 8009da2:	f7fe f99f 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009daa:	e060      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#if defined(RCC_LPTIM1CLKSOURCE_PLL3R)
          case RCC_LPTIM1CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dac:	f107 0308 	add.w	r3, r7, #8
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe fb03 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dba:	e058      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
#endif /* RCC_LPTIM1CLKSOURCE_PLL3R */
          case RCC_LPTIM1CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009dbc:	4b2d      	ldr	r3, [pc, #180]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009dbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dc2:	f003 0302 	and.w	r3, r3, #2
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d103      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x173e>
            {
              frequency = LSE_VALUE;
 8009dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009dce:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009dd0:	e04d      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009dd6:	e04a      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009dd8:	4b26      	ldr	r3, [pc, #152]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009dde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009de2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009de6:	d103      	bne.n	8009df0 <HAL_RCCEx_GetPeriphCLKFreq+0x175c>
            {
              frequency = LSI_VALUE;
 8009de8:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009dec:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009dee:	e03e      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
              frequency = 0;
 8009df0:	2300      	movs	r3, #0
 8009df2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009df4:	e03b      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          case RCC_LPTIM1CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM1 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009df6:	4b1f      	ldr	r3, [pc, #124]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009df8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009dfc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009e00:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e02:	4b1c      	ldr	r3, [pc, #112]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 0302 	and.w	r3, r3, #2
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d10c      	bne.n	8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
 8009e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d109      	bne.n	8009e28 <HAL_RCCEx_GetPeriphCLKFreq+0x1794>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009e14:	4b17      	ldr	r3, [pc, #92]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	08db      	lsrs	r3, r3, #3
 8009e1a:	f003 0303 	and.w	r3, r3, #3
 8009e1e:	4a16      	ldr	r2, [pc, #88]	@ (8009e78 <HAL_RCCEx_GetPeriphCLKFreq+0x17e4>)
 8009e20:	fa22 f303 	lsr.w	r3, r2, r3
 8009e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e26:	e01e      	b.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e28:	4b12      	ldr	r3, [pc, #72]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009e30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e34:	d106      	bne.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
 8009e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e3c:	d102      	bne.n	8009e44 <HAL_RCCEx_GetPeriphCLKFreq+0x17b0>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8009e7c <HAL_RCCEx_GetPeriphCLKFreq+0x17e8>)
 8009e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e42:	e010      	b.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e44:	4b0b      	ldr	r3, [pc, #44]	@ (8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x17e0>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e50:	d106      	bne.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
 8009e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e58:	d102      	bne.n	8009e60 <HAL_RCCEx_GetPeriphCLKFreq+0x17cc>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009e5a:	4b09      	ldr	r3, [pc, #36]	@ (8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0x17ec>)
 8009e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e5e:	e002      	b.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x17d2>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009e60:	2300      	movs	r3, #0
 8009e62:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009e64:	e003      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
 8009e66:	e002      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x17da>
          }
          default :
          {
            frequency = 0U;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009e6c:	bf00      	nop
          }
        }
        break;
 8009e6e:	f000 bf5c 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 8009e72:	bf00      	nop
 8009e74:	44020c00 	.word	0x44020c00
 8009e78:	03d09000 	.word	0x03d09000
 8009e7c:	003d0900 	.word	0x003d0900
 8009e80:	007a1200 	.word	0x007a1200

      case RCC_PERIPHCLK_LPTIM2:
        /* Get the current LPTIM2 source */
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009e84:	4b9e      	ldr	r3, [pc, #632]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009e86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009e8a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8009e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e92:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009e96:	d056      	beq.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x18b2>
 8009e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8009e9e:	f200 808b 	bhi.w	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ea8:	d03e      	beq.n	8009f28 <HAL_RCCEx_GetPeriphCLKFreq+0x1894>
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009eb0:	f200 8082 	bhi.w	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009eba:	d027      	beq.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1878>
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009ec2:	d879      	bhi.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009eca:	d017      	beq.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0x1868>
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ed2:	d871      	bhi.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d004      	beq.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x1850>
 8009eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009edc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ee0:	d004      	beq.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0x1858>
 8009ee2:	e069      	b.n	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x1924>

        switch (srcclk)
        {
          case RCC_LPTIM2CLKSOURCE_PCLK1:
          {
            frequency = HAL_RCC_GetPCLK1Freq();
 8009ee4:	f7fb ffc6 	bl	8005e74 <HAL_RCC_GetPCLK1Freq>
 8009ee8:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 8009eea:	e068      	b.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eec:	f107 0314 	add.w	r3, r7, #20
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fe f8f7 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009ef6:	697b      	ldr	r3, [r7, #20]
 8009ef8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009efa:	e060      	b.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#if defined(RCC_LPTIM2CLKSOURCE_PLL3R)
          case RCC_LPTIM2CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009efc:	f107 0308 	add.w	r3, r7, #8
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7fe fa5b 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f0a:	e058      	b.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
#endif /* RCC_LPTIM2CLKSOURCE_PLL3R */
          case RCC_LPTIM2CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009f0c:	4b7c      	ldr	r3, [pc, #496]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009f0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f12:	f003 0302 	and.w	r3, r3, #2
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d103      	bne.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x188e>
            {
              frequency = LSE_VALUE;
 8009f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f1e:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009f20:	e04d      	b.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f26:	e04a      	b.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009f28:	4b75      	ldr	r3, [pc, #468]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009f2e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f36:	d103      	bne.n	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x18ac>
            {
              frequency = LSI_VALUE;
 8009f38:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8009f3c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 8009f3e:	e03e      	b.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
              frequency = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009f44:	e03b      	b.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          case RCC_LPTIM2CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM2 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f46:	4b6e      	ldr	r3, [pc, #440]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8009f4c:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009f50:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f52:	4b6b      	ldr	r3, [pc, #428]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0302 	and.w	r3, r3, #2
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d10c      	bne.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
 8009f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d109      	bne.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0x18e4>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009f64:	4b66      	ldr	r3, [pc, #408]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	08db      	lsrs	r3, r3, #3
 8009f6a:	f003 0303 	and.w	r3, r3, #3
 8009f6e:	4a65      	ldr	r2, [pc, #404]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 8009f70:	fa22 f303 	lsr.w	r3, r2, r3
 8009f74:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f76:	e01e      	b.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f78:	4b61      	ldr	r3, [pc, #388]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f84:	d106      	bne.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
 8009f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f8c:	d102      	bne.n	8009f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1900>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 8009f8e:	4b5e      	ldr	r3, [pc, #376]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 8009f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f92:	e010      	b.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f94:	4b5a      	ldr	r3, [pc, #360]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fa0:	d106      	bne.n	8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
 8009fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fa8:	d102      	bne.n	8009fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x191c>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 8009faa:	4b58      	ldr	r3, [pc, #352]	@ (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 8009fac:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fae:	e002      	b.n	8009fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1922>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 8009fb4:	e003      	b.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
 8009fb6:	e002      	b.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x192a>
          }
          default :
          {
            frequency = 0U;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 8009fbc:	bf00      	nop
          }
        }
        break;
 8009fbe:	f000 beb4 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(LPTIM3)
      case RCC_PERIPHCLK_LPTIM3:
        /* Get the current LPTIM3 source */
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009fc2:	4b4f      	ldr	r3, [pc, #316]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 8009fc4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009fc8:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8009fcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8009fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009fd4:	d056      	beq.n	800a084 <HAL_RCCEx_GetPeriphCLKFreq+0x19f0>
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009fdc:	f200 808b 	bhi.w	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fe2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009fe6:	d03e      	beq.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x19d2>
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fea:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009fee:	f200 8082 	bhi.w	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ff4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009ff8:	d027      	beq.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x19b6>
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ffc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a000:	d879      	bhi.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a004:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a008:	d017      	beq.n	800a03a <HAL_RCCEx_GetPeriphCLKFreq+0x19a6>
 800a00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a00c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a010:	d871      	bhi.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>
 800a012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a014:	2b00      	cmp	r3, #0
 800a016:	d004      	beq.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x198e>
 800a018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a01e:	d004      	beq.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0x1996>
 800a020:	e069      	b.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a62>

        switch (srcclk)
        {
          case RCC_LPTIM3CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a022:	f7fb ff53 	bl	8005ecc <HAL_RCC_GetPCLK3Freq>
 800a026:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a028:	e068      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a02a:	f107 0314 	add.w	r3, r7, #20
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fe f858 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a038:	e060      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a03a:	f107 0308 	add.w	r3, r7, #8
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe f9bc 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a048:	e058      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a04a:	4b2d      	ldr	r3, [pc, #180]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a04c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a050:	f003 0302 	and.w	r3, r3, #2
 800a054:	2b02      	cmp	r3, #2
 800a056:	d103      	bne.n	800a060 <HAL_RCCEx_GetPeriphCLKFreq+0x19cc>
            {
              frequency = LSE_VALUE;
 800a058:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a05c:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a05e:	e04d      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800a060:	2300      	movs	r3, #0
 800a062:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a064:	e04a      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a066:	4b26      	ldr	r3, [pc, #152]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a068:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a06c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a070:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a074:	d103      	bne.n	800a07e <HAL_RCCEx_GetPeriphCLKFreq+0x19ea>
            {
              frequency = LSI_VALUE;
 800a076:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a07a:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a07c:	e03e      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
              frequency = 0;
 800a07e:	2300      	movs	r3, #0
 800a080:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a082:	e03b      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          case RCC_LPTIM3CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM3 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a084:	4b1e      	ldr	r3, [pc, #120]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a086:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a08a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a08e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a090:	4b1b      	ldr	r3, [pc, #108]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f003 0302 	and.w	r3, r3, #2
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d10c      	bne.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
 800a09c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d109      	bne.n	800a0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a22>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0a2:	4b17      	ldr	r3, [pc, #92]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	08db      	lsrs	r3, r3, #3
 800a0a8:	f003 0303 	and.w	r3, r3, #3
 800a0ac:	4a15      	ldr	r2, [pc, #84]	@ (800a104 <HAL_RCCEx_GetPeriphCLKFreq+0x1a70>)
 800a0ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a0b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0b4:	e01e      	b.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0b6:	4b12      	ldr	r3, [pc, #72]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0c2:	d106      	bne.n	800a0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
 800a0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0ca:	d102      	bne.n	800a0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a3e>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a0cc:	4b0e      	ldr	r3, [pc, #56]	@ (800a108 <HAL_RCCEx_GetPeriphCLKFreq+0x1a74>)
 800a0ce:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0d0:	e010      	b.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0d2:	4b0b      	ldr	r3, [pc, #44]	@ (800a100 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0de:	d106      	bne.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
 800a0e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a0e6:	d102      	bne.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x1a5a>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a0e8:	4b08      	ldr	r3, [pc, #32]	@ (800a10c <HAL_RCCEx_GetPeriphCLKFreq+0x1a78>)
 800a0ea:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0ec:	e002      	b.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a60>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a0f2:	e003      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
 800a0f4:	e002      	b.n	800a0fc <HAL_RCCEx_GetPeriphCLKFreq+0x1a68>
          }
          default :
          {
            frequency = 0U;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a0fa:	bf00      	nop
          }
        }
        break;
 800a0fc:	f000 be15 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a100:	44020c00 	.word	0x44020c00
 800a104:	03d09000 	.word	0x03d09000
 800a108:	003d0900 	.word	0x003d0900
 800a10c:	007a1200 	.word	0x007a1200
#endif /* LPTIM3 */

#if defined(LPTIM4)
      case RCC_PERIPHCLK_LPTIM4:
        /* Get the current LPTIM4 source */
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800a110:	4b9e      	ldr	r3, [pc, #632]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a112:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a116:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 800a11a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a11e:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800a122:	d056      	beq.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b3e>
 800a124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a126:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 800a12a:	f200 808b 	bhi.w	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a12e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a130:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a134:	d03e      	beq.n	800a1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b20>
 800a136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a138:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a13c:	f200 8082 	bhi.w	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a142:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a146:	d027      	beq.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x1b04>
 800a148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a14a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a14e:	d879      	bhi.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a152:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a156:	d017      	beq.n	800a188 <HAL_RCCEx_GetPeriphCLKFreq+0x1af4>
 800a158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a15e:	d871      	bhi.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>
 800a160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a162:	2b00      	cmp	r3, #0
 800a164:	d004      	beq.n	800a170 <HAL_RCCEx_GetPeriphCLKFreq+0x1adc>
 800a166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a168:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a16c:	d004      	beq.n	800a178 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae4>
 800a16e:	e069      	b.n	800a244 <HAL_RCCEx_GetPeriphCLKFreq+0x1bb0>

        switch (srcclk)
        {
          case RCC_LPTIM4CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a170:	f7fb feac 	bl	8005ecc <HAL_RCC_GetPCLK3Freq>
 800a174:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a176:	e068      	b.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a178:	f107 0314 	add.w	r3, r7, #20
 800a17c:	4618      	mov	r0, r3
 800a17e:	f7fd ffb1 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a186:	e060      	b.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a188:	f107 0308 	add.w	r3, r7, #8
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fe f915 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a196:	e058      	b.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a198:	4b7c      	ldr	r3, [pc, #496]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a19a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a19e:	f003 0302 	and.w	r3, r3, #2
 800a1a2:	2b02      	cmp	r3, #2
 800a1a4:	d103      	bne.n	800a1ae <HAL_RCCEx_GetPeriphCLKFreq+0x1b1a>
            {
              frequency = LSE_VALUE;
 800a1a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a1aa:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a1ac:	e04d      	b.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1b2:	e04a      	b.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a1b4:	4b75      	ldr	r3, [pc, #468]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a1b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a1ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1c2:	d103      	bne.n	800a1cc <HAL_RCCEx_GetPeriphCLKFreq+0x1b38>
            {
              frequency = LSI_VALUE;
 800a1c4:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a1c8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a1ca:	e03e      	b.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
              frequency = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a1d0:	e03b      	b.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          case RCC_LPTIM4CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM4 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1d2:	4b6e      	ldr	r3, [pc, #440]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a1d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a1d8:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a1dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1de:	4b6b      	ldr	r3, [pc, #428]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d10c      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
 800a1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d109      	bne.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x1b70>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a1f0:	4b66      	ldr	r3, [pc, #408]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	08db      	lsrs	r3, r3, #3
 800a1f6:	f003 0303 	and.w	r3, r3, #3
 800a1fa:	4a65      	ldr	r2, [pc, #404]	@ (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800a1fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a200:	637b      	str	r3, [r7, #52]	@ 0x34
 800a202:	e01e      	b.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a204:	4b61      	ldr	r3, [pc, #388]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a20c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a210:	d106      	bne.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
 800a212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a218:	d102      	bne.n	800a220 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8c>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a21a:	4b5e      	ldr	r3, [pc, #376]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800a21c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a21e:	e010      	b.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a220:	4b5a      	ldr	r3, [pc, #360]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a22c:	d106      	bne.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
 800a22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a234:	d102      	bne.n	800a23c <HAL_RCCEx_GetPeriphCLKFreq+0x1ba8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a236:	4b58      	ldr	r3, [pc, #352]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800a238:	637b      	str	r3, [r7, #52]	@ 0x34
 800a23a:	e002      	b.n	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0x1bae>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a240:	e003      	b.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
 800a242:	e002      	b.n	800a24a <HAL_RCCEx_GetPeriphCLKFreq+0x1bb6>
          }
          default :
          {
            frequency = 0U;
 800a244:	2300      	movs	r3, #0
 800a246:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a248:	bf00      	nop
          }
        }
        break;
 800a24a:	f000 bd6e 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM4 */

#if defined(LPTIM5)
      case RCC_PERIPHCLK_LPTIM5:
        /* Get the current LPTIM5 source */
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 800a24e:	4b4f      	ldr	r3, [pc, #316]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a250:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a254:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a258:	633b      	str	r3, [r7, #48]	@ 0x30
 800a25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a260:	d056      	beq.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x1c7c>
 800a262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a264:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800a268:	f200 808b 	bhi.w	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a26e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a272:	d03e      	beq.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c5e>
 800a274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a276:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a27a:	f200 8082 	bhi.w	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a280:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a284:	d027      	beq.n	800a2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c42>
 800a286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a288:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a28c:	d879      	bhi.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a290:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a294:	d017      	beq.n	800a2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c32>
 800a296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a29c:	d871      	bhi.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>
 800a29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d004      	beq.n	800a2ae <HAL_RCCEx_GetPeriphCLKFreq+0x1c1a>
 800a2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2aa:	d004      	beq.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c22>
 800a2ac:	e069      	b.n	800a382 <HAL_RCCEx_GetPeriphCLKFreq+0x1cee>

        switch (srcclk)
        {
          case RCC_LPTIM5CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a2ae:	f7fb fe0d 	bl	8005ecc <HAL_RCC_GetPCLK3Freq>
 800a2b2:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a2b4:	e068      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2b6:	f107 0314 	add.w	r3, r7, #20
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fd ff12 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2c4:	e060      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2c6:	f107 0308 	add.w	r3, r7, #8
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7fe f876 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2d4:	e058      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a2d6:	4b2d      	ldr	r3, [pc, #180]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a2d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2dc:	f003 0302 	and.w	r3, r3, #2
 800a2e0:	2b02      	cmp	r3, #2
 800a2e2:	d103      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x1c58>
            {
              frequency = LSE_VALUE;
 800a2e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a2e8:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a2ea:	e04d      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a2f0:	e04a      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a2f2:	4b26      	ldr	r3, [pc, #152]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a2f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a2f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a300:	d103      	bne.n	800a30a <HAL_RCCEx_GetPeriphCLKFreq+0x1c76>
            {
              frequency = LSI_VALUE;
 800a302:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a306:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a308:	e03e      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
              frequency = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a30e:	e03b      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          case RCC_LPTIM5CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM5 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a310:	4b1e      	ldr	r3, [pc, #120]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a316:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a31a:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a31c:	4b1b      	ldr	r3, [pc, #108]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0302 	and.w	r3, r3, #2
 800a324:	2b02      	cmp	r3, #2
 800a326:	d10c      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
 800a328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d109      	bne.n	800a342 <HAL_RCCEx_GetPeriphCLKFreq+0x1cae>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a32e:	4b17      	ldr	r3, [pc, #92]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	08db      	lsrs	r3, r3, #3
 800a334:	f003 0303 	and.w	r3, r3, #3
 800a338:	4a15      	ldr	r2, [pc, #84]	@ (800a390 <HAL_RCCEx_GetPeriphCLKFreq+0x1cfc>)
 800a33a:	fa22 f303 	lsr.w	r3, r2, r3
 800a33e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a340:	e01e      	b.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a342:	4b12      	ldr	r3, [pc, #72]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a34a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a34e:	d106      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
 800a350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a356:	d102      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x1cca>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a358:	4b0e      	ldr	r3, [pc, #56]	@ (800a394 <HAL_RCCEx_GetPeriphCLKFreq+0x1d00>)
 800a35a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a35c:	e010      	b.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a35e:	4b0b      	ldr	r3, [pc, #44]	@ (800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x1cf8>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a366:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a36a:	d106      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
 800a36c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a36e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a372:	d102      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce6>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a374:	4b08      	ldr	r3, [pc, #32]	@ (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x1d04>)
 800a376:	637b      	str	r3, [r7, #52]	@ 0x34
 800a378:	e002      	b.n	800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x1cec>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a37a:	2300      	movs	r3, #0
 800a37c:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a37e:	e003      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
 800a380:	e002      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x1cf4>
          }
          default :
          {
            frequency = 0U;
 800a382:	2300      	movs	r3, #0
 800a384:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a386:	bf00      	nop
          }
        }
        break;
 800a388:	f000 bccf 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a38c:	44020c00 	.word	0x44020c00
 800a390:	03d09000 	.word	0x03d09000
 800a394:	003d0900 	.word	0x003d0900
 800a398:	007a1200 	.word	0x007a1200
#endif /* LPTIM5 */

#if defined(LPTIM6)
      case RCC_PERIPHCLK_LPTIM6:
        /* Get the current LPTIM6 source */
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 800a39c:	4b9e      	ldr	r3, [pc, #632]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a39e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a3a2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a3a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3ae:	d056      	beq.n	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x1dca>
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3b6:	f200 808b 	bhi.w	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3c0:	d03e      	beq.n	800a440 <HAL_RCCEx_GetPeriphCLKFreq+0x1dac>
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3c8:	f200 8082 	bhi.w	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a3d2:	d027      	beq.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x1d90>
 800a3d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a3da:	d879      	bhi.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3e2:	d017      	beq.n	800a414 <HAL_RCCEx_GetPeriphCLKFreq+0x1d80>
 800a3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3ea:	d871      	bhi.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>
 800a3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d004      	beq.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x1d68>
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3f8:	d004      	beq.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0x1d70>
 800a3fa:	e069      	b.n	800a4d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e3c>

        switch (srcclk)
        {
          case RCC_LPTIM6CLKSOURCE_PCLK3:
          {
            frequency = HAL_RCC_GetPCLK3Freq();
 800a3fc:	f7fb fd66 	bl	8005ecc <HAL_RCC_GetPCLK3Freq>
 800a400:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800a402:	e068      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a404:	f107 0314 	add.w	r3, r7, #20
 800a408:	4618      	mov	r0, r3
 800a40a:	f7fd fe6b 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a412:	e060      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_PLL3R:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a414:	f107 0308 	add.w	r3, r7, #8
 800a418:	4618      	mov	r0, r3
 800a41a:	f7fd ffcf 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a422:	e058      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSE:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a424:	4b7c      	ldr	r3, [pc, #496]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a42a:	f003 0302 	and.w	r3, r3, #2
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d103      	bne.n	800a43a <HAL_RCCEx_GetPeriphCLKFreq+0x1da6>
            {
              frequency = LSE_VALUE;
 800a432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a436:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a438:	e04d      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800a43a:	2300      	movs	r3, #0
 800a43c:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a43e:	e04a      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_LSI:
          {
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a440:	4b75      	ldr	r3, [pc, #468]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a446:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a44a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a44e:	d103      	bne.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc4>
            {
              frequency = LSI_VALUE;
 800a450:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800a454:	637b      	str	r3, [r7, #52]	@ 0x34
            }
            else
            {
              frequency = 0;
            }
            break;
 800a456:	e03e      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
              frequency = 0;
 800a458:	2300      	movs	r3, #0
 800a45a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a45c:	e03b      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          case RCC_LPTIM6CLKSOURCE_CLKP: /* CLKP is the clock source for LPTIM6 */
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a45e:	4b6e      	ldr	r3, [pc, #440]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a460:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a464:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a468:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a46a:	4b6b      	ldr	r3, [pc, #428]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 0302 	and.w	r3, r3, #2
 800a472:	2b02      	cmp	r3, #2
 800a474:	d10c      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
 800a476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d109      	bne.n	800a490 <HAL_RCCEx_GetPeriphCLKFreq+0x1dfc>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a47c:	4b66      	ldr	r3, [pc, #408]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	08db      	lsrs	r3, r3, #3
 800a482:	f003 0303 	and.w	r3, r3, #3
 800a486:	4a65      	ldr	r2, [pc, #404]	@ (800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800a488:	fa22 f303 	lsr.w	r3, r2, r3
 800a48c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a48e:	e01e      	b.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a490:	4b61      	ldr	r3, [pc, #388]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a49c:	d106      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
 800a49e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4a4:	d102      	bne.n	800a4ac <HAL_RCCEx_GetPeriphCLKFreq+0x1e18>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a4a6:	4b5e      	ldr	r3, [pc, #376]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800a4a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4aa:	e010      	b.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4ac:	4b5a      	ldr	r3, [pc, #360]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4b8:	d106      	bne.n	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
 800a4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4c0:	d102      	bne.n	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e34>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a4c2:	4b58      	ldr	r3, [pc, #352]	@ (800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800a4c4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4c6:	e002      	b.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e3a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a4cc:	e003      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
 800a4ce:	e002      	b.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e42>
          }
          default :
          {
            frequency = 0U;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a4d4:	bf00      	nop
          }
        }
        break;
 800a4d6:	f000 bc28 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* LPTIM6 */

      case RCC_PERIPHCLK_FDCAN:
        /* Get the current FDCAN kernel source */
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a4da:	4b4f      	ldr	r3, [pc, #316]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a4dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a4e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a4e4:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800a4e6:	4b4c      	ldr	r3, [pc, #304]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4f2:	d106      	bne.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d103      	bne.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6e>
        {
          frequency = HSE_VALUE;
 800a4fa:	4b4a      	ldr	r3, [pc, #296]	@ (800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800a4fc:	637b      	str	r3, [r7, #52]	@ 0x34
        /* Clock not enabled for FDCAN */
        else
        {
          frequency = 0U;
        }
        break;
 800a4fe:	f000 bc14 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 800a502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a508:	d108      	bne.n	800a51c <HAL_RCCEx_GetPeriphCLKFreq+0x1e88>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a50a:	f107 0320 	add.w	r3, r7, #32
 800a50e:	4618      	mov	r0, r3
 800a510:	f7fd fc7c 	bl	8007e0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a516:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a518:	f000 bc07 	b.w	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a522:	d107      	bne.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea0>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a524:	f107 0314 	add.w	r3, r7, #20
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fd fddb 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a532:	e3fa      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
          frequency = 0U;
 800a534:	2300      	movs	r3, #0
 800a536:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a538:	e3f7      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI1:
        /* Get the current SPI1 kernel source */
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800a53a:	4b37      	ldr	r3, [pc, #220]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a53c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a540:	f003 0307 	and.w	r3, r3, #7
 800a544:	633b      	str	r3, [r7, #48]	@ 0x30
 800a546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a548:	2b04      	cmp	r3, #4
 800a54a:	d861      	bhi.n	800a610 <HAL_RCCEx_GetPeriphCLKFreq+0x1f7c>
 800a54c:	a201      	add	r2, pc, #4	@ (adr r2, 800a554 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec0>)
 800a54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a552:	bf00      	nop
 800a554:	0800a569 	.word	0x0800a569
 800a558:	0800a579 	.word	0x0800a579
 800a55c:	0800a589 	.word	0x0800a589
 800a560:	0800a599 	.word	0x0800a599
 800a564:	0800a59f 	.word	0x0800a59f
        switch (srcclk)
        {
          case RCC_SPI1CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a568:	f107 0320 	add.w	r3, r7, #32
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fd fc4d 	bl	8007e0c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a574:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a576:	e04e      	b.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a578:	f107 0314 	add.w	r3, r7, #20
 800a57c:	4618      	mov	r0, r3
 800a57e:	f7fd fdb1 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a586:	e046      	b.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#if defined(RCC_SPI1CLKSOURCE_PLL3P)
          case RCC_SPI1CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a588:	f107 0308 	add.w	r3, r7, #8
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7fd ff15 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a596:	e03e      	b.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
#endif /* RCC_SPI1CLKSOURCE_PLL3P */
          case RCC_SPI1CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a598:	4b23      	ldr	r3, [pc, #140]	@ (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x1f94>)
 800a59a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a59c:	e03b      	b.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          case RCC_SPI1CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a59e:	4b1e      	ldr	r3, [pc, #120]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a5a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a5a4:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a5a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5aa:	4b1b      	ldr	r3, [pc, #108]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 0302 	and.w	r3, r3, #2
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d10c      	bne.n	800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
 800a5b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d109      	bne.n	800a5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f3c>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a5bc:	4b16      	ldr	r3, [pc, #88]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	08db      	lsrs	r3, r3, #3
 800a5c2:	f003 0303 	and.w	r3, r3, #3
 800a5c6:	4a15      	ldr	r2, [pc, #84]	@ (800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x1f88>)
 800a5c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5ce:	e01e      	b.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5d0:	4b11      	ldr	r3, [pc, #68]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a5d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5dc:	d106      	bne.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
 800a5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5e4:	d102      	bne.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f58>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a5e6:	4b0e      	ldr	r3, [pc, #56]	@ (800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8c>)
 800a5e8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5ea:	e010      	b.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a5ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x1f84>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5f8:	d106      	bne.n	800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
 800a5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a600:	d102      	bne.n	800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x1f74>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a602:	4b08      	ldr	r3, [pc, #32]	@ (800a624 <HAL_RCCEx_GetPeriphCLKFreq+0x1f90>)
 800a604:	637b      	str	r3, [r7, #52]	@ 0x34
 800a606:	e002      	b.n	800a60e <HAL_RCCEx_GetPeriphCLKFreq+0x1f7a>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a608:	2300      	movs	r3, #0
 800a60a:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a60c:	e003      	b.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
 800a60e:	e002      	b.n	800a616 <HAL_RCCEx_GetPeriphCLKFreq+0x1f82>
          }
          default:
          {
            frequency = 0;
 800a610:	2300      	movs	r3, #0
 800a612:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a614:	bf00      	nop
          }
        }
        break;
 800a616:	e388      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a618:	44020c00 	.word	0x44020c00
 800a61c:	03d09000 	.word	0x03d09000
 800a620:	003d0900 	.word	0x003d0900
 800a624:	007a1200 	.word	0x007a1200
 800a628:	00bb8000 	.word	0x00bb8000

      case RCC_PERIPHCLK_SPI2:
        /* Get the current SPI2 kernel source */
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800a62c:	4ba9      	ldr	r3, [pc, #676]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a62e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a632:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a636:	633b      	str	r3, [r7, #48]	@ 0x30
 800a638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a63a:	2b20      	cmp	r3, #32
 800a63c:	f200 809a 	bhi.w	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x20e0>
 800a640:	a201      	add	r2, pc, #4	@ (adr r2, 800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x1fb4>)
 800a642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a646:	bf00      	nop
 800a648:	0800a6cd 	.word	0x0800a6cd
 800a64c:	0800a775 	.word	0x0800a775
 800a650:	0800a775 	.word	0x0800a775
 800a654:	0800a775 	.word	0x0800a775
 800a658:	0800a775 	.word	0x0800a775
 800a65c:	0800a775 	.word	0x0800a775
 800a660:	0800a775 	.word	0x0800a775
 800a664:	0800a775 	.word	0x0800a775
 800a668:	0800a6dd 	.word	0x0800a6dd
 800a66c:	0800a775 	.word	0x0800a775
 800a670:	0800a775 	.word	0x0800a775
 800a674:	0800a775 	.word	0x0800a775
 800a678:	0800a775 	.word	0x0800a775
 800a67c:	0800a775 	.word	0x0800a775
 800a680:	0800a775 	.word	0x0800a775
 800a684:	0800a775 	.word	0x0800a775
 800a688:	0800a6ed 	.word	0x0800a6ed
 800a68c:	0800a775 	.word	0x0800a775
 800a690:	0800a775 	.word	0x0800a775
 800a694:	0800a775 	.word	0x0800a775
 800a698:	0800a775 	.word	0x0800a775
 800a69c:	0800a775 	.word	0x0800a775
 800a6a0:	0800a775 	.word	0x0800a775
 800a6a4:	0800a775 	.word	0x0800a775
 800a6a8:	0800a6fd 	.word	0x0800a6fd
 800a6ac:	0800a775 	.word	0x0800a775
 800a6b0:	0800a775 	.word	0x0800a775
 800a6b4:	0800a775 	.word	0x0800a775
 800a6b8:	0800a775 	.word	0x0800a775
 800a6bc:	0800a775 	.word	0x0800a775
 800a6c0:	0800a775 	.word	0x0800a775
 800a6c4:	0800a775 	.word	0x0800a775
 800a6c8:	0800a703 	.word	0x0800a703
        switch (srcclk)
        {
          case RCC_SPI2CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6cc:	f107 0320 	add.w	r3, r7, #32
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fd fb9b 	bl	8007e0c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a6da:	e04e      	b.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6dc:	f107 0314 	add.w	r3, r7, #20
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7fd fcff 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a6ea:	e046      	b.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#if defined(RCC_SPI2CLKSOURCE_PLL3P)
          case RCC_SPI2CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6ec:	f107 0308 	add.w	r3, r7, #8
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	f7fd fe63 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a6fa:	e03e      	b.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
#endif /* RCC_SPI2CLKSOURCE_PLL3P */
          case RCC_SPI2CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a6fc:	4b76      	ldr	r3, [pc, #472]	@ (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a6fe:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a700:	e03b      	b.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          case RCC_SPI2CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a702:	4b74      	ldr	r3, [pc, #464]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a708:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a70c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a70e:	4b71      	ldr	r3, [pc, #452]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0302 	and.w	r3, r3, #2
 800a716:	2b02      	cmp	r3, #2
 800a718:	d10c      	bne.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
 800a71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d109      	bne.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x20a0>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a720:	4b6c      	ldr	r3, [pc, #432]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	08db      	lsrs	r3, r3, #3
 800a726:	f003 0303 	and.w	r3, r3, #3
 800a72a:	4a6c      	ldr	r2, [pc, #432]	@ (800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a72c:	fa22 f303 	lsr.w	r3, r2, r3
 800a730:	637b      	str	r3, [r7, #52]	@ 0x34
 800a732:	e01e      	b.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a734:	4b67      	ldr	r3, [pc, #412]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a73c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a740:	d106      	bne.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
 800a742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a744:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a748:	d102      	bne.n	800a750 <HAL_RCCEx_GetPeriphCLKFreq+0x20bc>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a74a:	4b65      	ldr	r3, [pc, #404]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a74c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a74e:	e010      	b.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a750:	4b60      	ldr	r3, [pc, #384]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a758:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a75c:	d106      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
 800a75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a760:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a764:	d102      	bne.n	800a76c <HAL_RCCEx_GetPeriphCLKFreq+0x20d8>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a766:	4b5f      	ldr	r3, [pc, #380]	@ (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a768:	637b      	str	r3, [r7, #52]	@ 0x34
 800a76a:	e002      	b.n	800a772 <HAL_RCCEx_GetPeriphCLKFreq+0x20de>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a76c:	2300      	movs	r3, #0
 800a76e:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a770:	e003      	b.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
 800a772:	e002      	b.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x20e6>
          }
          default:
          {
            frequency = 0;
 800a774:	2300      	movs	r3, #0
 800a776:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a778:	bf00      	nop
          }
        }
        break;
 800a77a:	e2d6      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

      case RCC_PERIPHCLK_SPI3:
        /* Get the current SPI3 kernel source */
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a77c:	4b55      	ldr	r3, [pc, #340]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a77e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a782:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a786:	633b      	str	r3, [r7, #48]	@ 0x30
 800a788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a78e:	d031      	beq.n	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2160>
 800a790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a796:	d866      	bhi.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79a:	2bc0      	cmp	r3, #192	@ 0xc0
 800a79c:	d027      	beq.n	800a7ee <HAL_RCCEx_GetPeriphCLKFreq+0x215a>
 800a79e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a0:	2bc0      	cmp	r3, #192	@ 0xc0
 800a7a2:	d860      	bhi.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a6:	2b80      	cmp	r3, #128	@ 0x80
 800a7a8:	d019      	beq.n	800a7de <HAL_RCCEx_GetPeriphCLKFreq+0x214a>
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ac:	2b80      	cmp	r3, #128	@ 0x80
 800a7ae:	d85a      	bhi.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d003      	beq.n	800a7be <HAL_RCCEx_GetPeriphCLKFreq+0x212a>
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b8:	2b40      	cmp	r3, #64	@ 0x40
 800a7ba:	d008      	beq.n	800a7ce <HAL_RCCEx_GetPeriphCLKFreq+0x213a>
 800a7bc:	e053      	b.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x21d2>
        switch (srcclk)
        {
          case RCC_SPI3CLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7be:	f107 0320 	add.w	r3, r7, #32
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	f7fd fb22 	bl	8007e0c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ca:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a7cc:	e04e      	b.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_PLL2P:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7ce:	f107 0314 	add.w	r3, r7, #20
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7fd fc86 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a7dc:	e046      	b.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#if defined(RCC_SPI3CLKSOURCE_PLL3P)
          case RCC_SPI3CLKSOURCE_PLL3P:
          {
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7de:	f107 0308 	add.w	r3, r7, #8
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fd fdea 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a7ec:	e03e      	b.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
#endif /* RCC_SPI3CLKSOURCE_PLL3P */
          case RCC_SPI3CLKSOURCE_PIN:
          {
            frequency = EXTERNAL_CLOCK_VALUE;
 800a7ee:	4b3a      	ldr	r3, [pc, #232]	@ (800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2244>)
 800a7f0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a7f2:	e03b      	b.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          case RCC_SPI3CLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7f4:	4b37      	ldr	r3, [pc, #220]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a7f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800a7fa:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800a7fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a800:	4b34      	ldr	r3, [pc, #208]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f003 0302 	and.w	r3, r3, #2
 800a808:	2b02      	cmp	r3, #2
 800a80a:	d10c      	bne.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
 800a80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d109      	bne.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0x2192>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a812:	4b30      	ldr	r3, [pc, #192]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	08db      	lsrs	r3, r3, #3
 800a818:	f003 0303 	and.w	r3, r3, #3
 800a81c:	4a2f      	ldr	r2, [pc, #188]	@ (800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x2248>)
 800a81e:	fa22 f303 	lsr.w	r3, r2, r3
 800a822:	637b      	str	r3, [r7, #52]	@ 0x34
 800a824:	e01e      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a826:	4b2b      	ldr	r3, [pc, #172]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a82e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a832:	d106      	bne.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
 800a834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a83a:	d102      	bne.n	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x21ae>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800a83c:	4b28      	ldr	r3, [pc, #160]	@ (800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x224c>)
 800a83e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a840:	e010      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a842:	4b24      	ldr	r3, [pc, #144]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a84a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a84e:	d106      	bne.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
 800a850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a852:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a856:	d102      	bne.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x21ca>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800a858:	4b22      	ldr	r3, [pc, #136]	@ (800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2250>)
 800a85a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a85c:	e002      	b.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x21d0>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0;
 800a85e:	2300      	movs	r3, #0
 800a860:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800a862:	e003      	b.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
 800a864:	e002      	b.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x21d8>
          }
          default:
          {
            frequency = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800a86a:	bf00      	nop
          }
        }
        break;
 800a86c:	e25d      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(SPI4)
      case RCC_PERIPHCLK_SPI4:
        /* Get the current SPI4 kernel source */
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800a86e:	4b19      	ldr	r3, [pc, #100]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a874:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800a878:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800a87a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d103      	bne.n	800a888 <HAL_RCCEx_GetPeriphCLKFreq+0x21f4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800a880:	f7fb fb0e 	bl	8005ea0 <HAL_RCC_GetPCLK2Freq>
 800a884:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a886:	e250      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800a888:	4b12      	ldr	r3, [pc, #72]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a890:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a894:	d10b      	bne.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
 800a896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a898:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a89c:	d107      	bne.n	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x221a>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a89e:	f107 0314 	add.w	r3, r7, #20
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fd fc1e 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a8a8:	69bb      	ldr	r3, [r7, #24]
 800a8aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8ac:	e04f      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800a8ae:	4b09      	ldr	r3, [pc, #36]	@ (800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x2240>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a8b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8ba:	d115      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
 800a8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8c2:	d111      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2254>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8c4:	f107 0308 	add.w	r3, r7, #8
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7fd fd77 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a8d2:	e03c      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
 800a8d4:	44020c00 	.word	0x44020c00
 800a8d8:	00bb8000 	.word	0x00bb8000
 800a8dc:	03d09000 	.word	0x03d09000
 800a8e0:	003d0900 	.word	0x003d0900
 800a8e4:	007a1200 	.word	0x007a1200
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 800a8e8:	4b94      	ldr	r3, [pc, #592]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0302 	and.w	r3, r3, #2
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	d10d      	bne.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a8fa:	d109      	bne.n	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x227c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a8fc:	4b8f      	ldr	r3, [pc, #572]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	08db      	lsrs	r3, r3, #3
 800a902:	f003 0303 	and.w	r3, r3, #3
 800a906:	4a8e      	ldr	r2, [pc, #568]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a908:	fa22 f303 	lsr.w	r3, r2, r3
 800a90c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a90e:	e01e      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 800a910:	4b8a      	ldr	r3, [pc, #552]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a91c:	d106      	bne.n	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
 800a91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a920:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a924:	d102      	bne.n	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x2298>
          frequency = CSI_VALUE;
 800a926:	4b87      	ldr	r3, [pc, #540]	@ (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a928:	637b      	str	r3, [r7, #52]	@ 0x34
 800a92a:	e010      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 800a92c:	4b83      	ldr	r3, [pc, #524]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a934:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a938:	d106      	bne.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
 800a93a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a93c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800a940:	d102      	bne.n	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x22b4>
          frequency = HSE_VALUE;
 800a942:	4b81      	ldr	r3, [pc, #516]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800a944:	637b      	str	r3, [r7, #52]	@ 0x34
 800a946:	e002      	b.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x22ba>
          frequency = 0U;
 800a948:	2300      	movs	r3, #0
 800a94a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800a94c:	e1ed      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800a94e:	e1ec      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI4 */

#if defined(SPI5)
      case RCC_PERIPHCLK_SPI5:
        /* Get the current SPI5 kernel source */
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800a950:	4b7a      	ldr	r3, [pc, #488]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a956:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a95a:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800a95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d103      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0x22d6>
        {
          frequency = HAL_RCC_GetPCLK3Freq();
 800a962:	f7fb fab3 	bl	8005ecc <HAL_RCC_GetPCLK3Freq>
 800a966:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800a968:	e1df      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800a96a:	4b74      	ldr	r3, [pc, #464]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a972:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a976:	d10b      	bne.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
 800a978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a97e:	d107      	bne.n	800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x22fc>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a980:	f107 0314 	add.w	r3, r7, #20
 800a984:	4618      	mov	r0, r3
 800a986:	f7fd fbad 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a98e:	e045      	b.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800a990:	4b6a      	ldr	r3, [pc, #424]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a99c:	d10b      	bne.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
 800a99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a9a4:	d107      	bne.n	800a9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2322>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9a6:	f107 0308 	add.w	r3, r7, #8
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7fd fd06 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9b4:	e032      	b.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800a9b6:	4b61      	ldr	r3, [pc, #388]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f003 0302 	and.w	r3, r3, #2
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d10d      	bne.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
 800a9c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a9c8:	d109      	bne.n	800a9de <HAL_RCCEx_GetPeriphCLKFreq+0x234a>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9ca:	4b5c      	ldr	r3, [pc, #368]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	08db      	lsrs	r3, r3, #3
 800a9d0:	f003 0303 	and.w	r3, r3, #3
 800a9d4:	4a5a      	ldr	r2, [pc, #360]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800a9d6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9dc:	e01e      	b.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800a9de:	4b57      	ldr	r3, [pc, #348]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9ea:	d106      	bne.n	800a9fa <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
 800a9ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9f2:	d102      	bne.n	800a9fa <HAL_RCCEx_GetPeriphCLKFreq+0x2366>
          frequency = CSI_VALUE;
 800a9f4:	4b53      	ldr	r3, [pc, #332]	@ (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800a9f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9f8:	e010      	b.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800a9fa:	4b50      	ldr	r3, [pc, #320]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aa06:	d106      	bne.n	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
 800aa08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa0a:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 800aa0e:	d102      	bne.n	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x2382>
          frequency = HSE_VALUE;
 800aa10:	4b4d      	ldr	r3, [pc, #308]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800aa12:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa14:	e002      	b.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x2388>
          frequency = 0U;
 800aa16:	2300      	movs	r3, #0
 800aa18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aa1a:	e186      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aa1c:	e185      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI5 */

#if defined(SPI6)
      case RCC_PERIPHCLK_SPI6:
        /* Get the current SPI6 kernel source */
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800aa1e:	4b47      	ldr	r3, [pc, #284]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aa20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800aa24:	f403 3360 	and.w	r3, r3, #229376	@ 0x38000
 800aa28:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d103      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x23a4>
        {
          frequency = HAL_RCC_GetPCLK2Freq();
 800aa30:	f7fb fa36 	bl	8005ea0 <HAL_RCC_GetPCLK2Freq>
 800aa34:	6378      	str	r0, [r7, #52]	@ 0x34
        else
        {
          frequency = 0U;
        }

        break;
 800aa36:	e178      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800aa38:	4b40      	ldr	r3, [pc, #256]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa44:	d10b      	bne.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
 800aa46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aa4c:	d107      	bne.n	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x23ca>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa4e:	f107 0314 	add.w	r3, r7, #20
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7fd fb46 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa5c:	e045      	b.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800aa5e:	4b37      	ldr	r3, [pc, #220]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa6a:	d10b      	bne.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa72:	d107      	bne.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x23f0>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa74:	f107 0308 	add.w	r3, r7, #8
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7fd fc9f 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa82:	e032      	b.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800aa84:	4b2d      	ldr	r3, [pc, #180]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	f003 0302 	and.w	r3, r3, #2
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d10d      	bne.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
 800aa90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa92:	f5b3 3fc0 	cmp.w	r3, #98304	@ 0x18000
 800aa96:	d109      	bne.n	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x2418>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa98:	4b28      	ldr	r3, [pc, #160]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	08db      	lsrs	r3, r3, #3
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	4a27      	ldr	r2, [pc, #156]	@ (800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x24ac>)
 800aaa4:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa8:	637b      	str	r3, [r7, #52]	@ 0x34
 800aaaa:	e01e      	b.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800aaac:	4b23      	ldr	r3, [pc, #140]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aab8:	d106      	bne.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
 800aaba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aabc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aac0:	d102      	bne.n	800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x2434>
          frequency = CSI_VALUE;
 800aac2:	4b20      	ldr	r3, [pc, #128]	@ (800ab44 <HAL_RCCEx_GetPeriphCLKFreq+0x24b0>)
 800aac4:	637b      	str	r3, [r7, #52]	@ 0x34
 800aac6:	e010      	b.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800aac8:	4b1c      	ldr	r3, [pc, #112]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aad0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aad4:	d106      	bne.n	800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
 800aad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad8:	f5b3 3f20 	cmp.w	r3, #163840	@ 0x28000
 800aadc:	d102      	bne.n	800aae4 <HAL_RCCEx_GetPeriphCLKFreq+0x2450>
          frequency = HSE_VALUE;
 800aade:	4b1a      	ldr	r3, [pc, #104]	@ (800ab48 <HAL_RCCEx_GetPeriphCLKFreq+0x24b4>)
 800aae0:	637b      	str	r3, [r7, #52]	@ 0x34
 800aae2:	e002      	b.n	800aaea <HAL_RCCEx_GetPeriphCLKFreq+0x2456>
          frequency = 0U;
 800aae4:	2300      	movs	r3, #0
 800aae6:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800aae8:	e11f      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800aaea:	e11e      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* SPI6 */

#if defined(OCTOSPI1)
      case RCC_PERIPHCLK_OSPI:
        /* Get the current OSPI kernel source */
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800aaec:	4b13      	ldr	r3, [pc, #76]	@ (800ab3c <HAL_RCCEx_GetPeriphCLKFreq+0x24a8>)
 800aaee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800aaf2:	f003 0303 	and.w	r3, r3, #3
 800aaf6:	633b      	str	r3, [r7, #48]	@ 0x30
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	d85f      	bhi.n	800abbe <HAL_RCCEx_GetPeriphCLKFreq+0x252a>
 800aafe:	a201      	add	r2, pc, #4	@ (adr r2, 800ab04 <HAL_RCCEx_GetPeriphCLKFreq+0x2470>)
 800ab00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab04:	0800ab15 	.word	0x0800ab15
 800ab08:	0800ab1d 	.word	0x0800ab1d
 800ab0c:	0800ab2d 	.word	0x0800ab2d
 800ab10:	0800ab4d 	.word	0x0800ab4d

        switch (srcclk)
        {
          case RCC_OSPICLKSOURCE_HCLK:
          {
            frequency = HAL_RCC_GetHCLKFreq();
 800ab14:	f7fb f992 	bl	8005e3c <HAL_RCC_GetHCLKFreq>
 800ab18:	6378      	str	r0, [r7, #52]	@ 0x34
            break;
 800ab1a:	e053      	b.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL1Q:
          {
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab1c:	f107 0320 	add.w	r3, r7, #32
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7fd f973 	bl	8007e0c <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab28:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab2a:	e04b      	b.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          case RCC_OSPICLKSOURCE_PLL2R:
          {
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab2c:	f107 0314 	add.w	r3, r7, #20
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fd fad7 	bl	80080e4 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800ab36:	69fb      	ldr	r3, [r7, #28]
 800ab38:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800ab3a:	e043      	b.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800ab3c:	44020c00 	.word	0x44020c00
 800ab40:	03d09000 	.word	0x03d09000
 800ab44:	003d0900 	.word	0x003d0900
 800ab48:	007a1200 	.word	0x007a1200
          }
          case RCC_OSPICLKSOURCE_CLKP:
          {
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab4c:	4b79      	ldr	r3, [pc, #484]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ab4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ab52:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800ab56:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab58:	4b76      	ldr	r3, [pc, #472]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f003 0302 	and.w	r3, r3, #2
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d10c      	bne.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
 800ab64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d109      	bne.n	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x24ea>
            {
              /* In Case the CKPER Source is HSI */
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800ab6a:	4b72      	ldr	r3, [pc, #456]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	08db      	lsrs	r3, r3, #3
 800ab70:	f003 0303 	and.w	r3, r3, #3
 800ab74:	4a70      	ldr	r2, [pc, #448]	@ (800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x26a4>)
 800ab76:	fa22 f303 	lsr.w	r3, r2, r3
 800ab7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab7c:	e01e      	b.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab7e:	4b6d      	ldr	r3, [pc, #436]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ab86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab8a:	d106      	bne.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
 800ab8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab92:	d102      	bne.n	800ab9a <HAL_RCCEx_GetPeriphCLKFreq+0x2506>
            {
              /* In Case the CKPER Source is CSI */
              frequency = CSI_VALUE;
 800ab94:	4b69      	ldr	r3, [pc, #420]	@ (800ad3c <HAL_RCCEx_GetPeriphCLKFreq+0x26a8>)
 800ab96:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab98:	e010      	b.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab9a:	4b66      	ldr	r3, [pc, #408]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aba2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aba6:	d106      	bne.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
 800aba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800abae:	d102      	bne.n	800abb6 <HAL_RCCEx_GetPeriphCLKFreq+0x2522>
            {
              /* In Case the CKPER Source is HSE */
              frequency = HSE_VALUE;
 800abb0:	4b63      	ldr	r3, [pc, #396]	@ (800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x26ac>)
 800abb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800abb4:	e002      	b.n	800abbc <HAL_RCCEx_GetPeriphCLKFreq+0x2528>
            }

            else
            {
              /* In Case the CKPER is disabled*/
              frequency = 0U;
 800abb6:	2300      	movs	r3, #0
 800abb8:	637b      	str	r3, [r7, #52]	@ 0x34
            }

            break;
 800abba:	e003      	b.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
 800abbc:	e002      	b.n	800abc4 <HAL_RCCEx_GetPeriphCLKFreq+0x2530>
          }
          default:
          {
            frequency = 0U;
 800abbe:	2300      	movs	r3, #0
 800abc0:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800abc2:	bf00      	nop
          }
        }
        break;
 800abc4:	e0b1      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* OCTOSPI1*/

#if defined(CEC)
      case RCC_PERIPHCLK_CEC:
        /* Get the current CEC source */
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800abc6:	4b5b      	ldr	r3, [pc, #364]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800abc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800abcc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800abd0:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 800abd2:	4b58      	ldr	r3, [pc, #352]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800abd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abd8:	f003 0302 	and.w	r3, r3, #2
 800abdc:	2b02      	cmp	r3, #2
 800abde:	d106      	bne.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
 800abe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d103      	bne.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x255a>
        {
          frequency = LSE_VALUE;
 800abe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800abea:	637b      	str	r3, [r7, #52]	@ 0x34
 800abec:	e01f      	b.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 800abee:	4b51      	ldr	r3, [pc, #324]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800abf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800abf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800abf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800abfc:	d106      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
 800abfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac00:	2b40      	cmp	r3, #64	@ 0x40
 800ac02:	d103      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x2578>
        {
          frequency = LSI_VALUE;
 800ac04:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800ac08:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac0a:	e010      	b.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 800ac0c:	4b49      	ldr	r3, [pc, #292]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ac14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac18:	d106      	bne.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac1c:	2b80      	cmp	r3, #128	@ 0x80
 800ac1e:	d103      	bne.n	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x2594>
        {
          frequency = CSI_VALUE / 122U;
 800ac20:	f248 0312 	movw	r3, #32786	@ 0x8012
 800ac24:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac26:	e002      	b.n	800ac2e <HAL_RCCEx_GetPeriphCLKFreq+0x259a>
        }

        /* Clock not enabled for CEC */
        else
        {
          frequency = 0U;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800ac2c:	e07d      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ac2e:	e07c      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
#endif /* CEC */

      case RCC_PERIPHCLK_RNG:
        /* Get the current RNG source */
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800ac30:	4b40      	ldr	r3, [pc, #256]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ac32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800ac36:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ac3a:	633b      	str	r3, [r7, #48]	@ 0x30

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800ac3c:	4b3d      	ldr	r3, [pc, #244]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ac44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac48:	d105      	bne.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
 800ac4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d102      	bne.n	800ac56 <HAL_RCCEx_GetPeriphCLKFreq+0x25c2>
        {
          frequency = HSI48_VALUE;
 800ac50:	4b3c      	ldr	r3, [pc, #240]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800ac52:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac54:	e031      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 800ac56:	4b37      	ldr	r3, [pc, #220]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ac5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ac62:	d10a      	bne.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
 800ac64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac66:	2b10      	cmp	r3, #16
 800ac68:	d107      	bne.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x25e6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac6a:	f107 0320 	add.w	r3, r7, #32
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7fd f8cc 	bl	8007e0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac76:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac78:	e01f      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 800ac7a:	4b2e      	ldr	r3, [pc, #184]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ac7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac80:	f003 0302 	and.w	r3, r3, #2
 800ac84:	2b02      	cmp	r3, #2
 800ac86:	d106      	bne.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
 800ac88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8a:	2b20      	cmp	r3, #32
 800ac8c:	d103      	bne.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x2602>
        {
          frequency = LSE_VALUE;
 800ac8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac92:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac94:	e011      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 800ac96:	4b27      	ldr	r3, [pc, #156]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ac98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800ac9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aca0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aca4:	d106      	bne.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
 800aca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca8:	2b30      	cmp	r3, #48	@ 0x30
 800acaa:	d103      	bne.n	800acb4 <HAL_RCCEx_GetPeriphCLKFreq+0x2620>
        {
          frequency = LSI_VALUE;
 800acac:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800acb0:	637b      	str	r3, [r7, #52]	@ 0x34
 800acb2:	e002      	b.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x2626>
        }

        /* Clock not enabled for RNG */
        else
        {
          frequency = 0U;
 800acb4:	2300      	movs	r3, #0
 800acb6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        break;
 800acb8:	e037      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800acba:	e036      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>

#if defined(USB_DRD_FS)
      case RCC_PERIPHCLK_USB:
        /* Get the current USB kernel source */
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800acbc:	4b1d      	ldr	r3, [pc, #116]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800acbe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800acc2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800acc6:	633b      	str	r3, [r7, #48]	@ 0x30

        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800acc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acca:	2b10      	cmp	r3, #16
 800accc:	d107      	bne.n	800acde <HAL_RCCEx_GetPeriphCLKFreq+0x264a>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800acce:	f107 0320 	add.w	r3, r7, #32
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fd f89a 	bl	8007e0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800acd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acda:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800acdc:	e025      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
        }
#if defined(RCC_USBCLKSOURCE_PLL3Q)
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800acde:	4b15      	ldr	r3, [pc, #84]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ace6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acea:	d10a      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
 800acec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acee:	2b20      	cmp	r3, #32
 800acf0:	d107      	bne.n	800ad02 <HAL_RCCEx_GetPeriphCLKFreq+0x266e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acf2:	f107 0308 	add.w	r3, r7, #8
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7fd fb60 	bl	80083bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad00:	e00f      	b.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
          frequency = pll2_clocks.PLL2_Q_Frequency;
        }
#endif /* RCC_USBCLKSOURCE_PLL3 */
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800ad02:	4b0c      	ldr	r3, [pc, #48]	@ (800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0x26a0>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad0e:	d105      	bne.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
 800ad10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad12:	2b30      	cmp	r3, #48	@ 0x30
 800ad14:	d102      	bne.n	800ad1c <HAL_RCCEx_GetPeriphCLKFreq+0x2688>
        {
          frequency = HSI48_VALUE;
 800ad16:	4b0b      	ldr	r3, [pc, #44]	@ (800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x26b0>)
 800ad18:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad1a:	e002      	b.n	800ad22 <HAL_RCCEx_GetPeriphCLKFreq+0x268e>
        }
        /* Clock not enabled for USB */
        else
        {
          frequency = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        break;
 800ad20:	e003      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>
 800ad22:	e002      	b.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x2696>


      default:
        frequency = 0U;
 800ad24:	2300      	movs	r3, #0
 800ad26:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800ad28:	bf00      	nop
#endif /* USB_DRD_FS */
    }
  }
  return (frequency);
 800ad2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	373c      	adds	r7, #60	@ 0x3c
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd90      	pop	{r4, r7, pc}
 800ad34:	44020c00 	.word	0x44020c00
 800ad38:	03d09000 	.word	0x03d09000
 800ad3c:	003d0900 	.word	0x003d0900
 800ad40:	007a1200 	.word	0x007a1200
 800ad44:	02dc6c00 	.word	0x02dc6c00

0800ad48 <RCCEx_PLL2_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL2_VCIRGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2_VCORGE_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLL2_FRACN_VALUE(pll2->PLL2FRACN));

  /* Disable  PLL2. */
  __HAL_RCC_PLL2_DISABLE();
 800ad50:	4b48      	ldr	r3, [pc, #288]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a47      	ldr	r2, [pc, #284]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ad56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800ad5a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ad5c:	f7f7 ff18 	bl	8002b90 <HAL_GetTick>
 800ad60:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad62:	e008      	b.n	800ad76 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ad64:	f7f7 ff14 	bl	8002b90 <HAL_GetTick>
 800ad68:	4602      	mov	r2, r0
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d901      	bls.n	800ad76 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800ad72:	2303      	movs	r3, #3
 800ad74:	e07a      	b.n	800ae6c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ad76:	4b3f      	ldr	r3, [pc, #252]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d1f0      	bne.n	800ad64 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800ad82:	4b3c      	ldr	r3, [pc, #240]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ad84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad86:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800ad8a:	f023 0303 	bic.w	r3, r3, #3
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	6811      	ldr	r1, [r2, #0]
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	6852      	ldr	r2, [r2, #4]
 800ad96:	0212      	lsls	r2, r2, #8
 800ad98:	430a      	orrs	r2, r1
 800ad9a:	4936      	ldr	r1, [pc, #216]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	3b01      	subs	r3, #1
 800ada6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	3b01      	subs	r3, #1
 800adb0:	025b      	lsls	r3, r3, #9
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	431a      	orrs	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	3b01      	subs	r3, #1
 800adbc:	041b      	lsls	r3, r3, #16
 800adbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800adc2:	431a      	orrs	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	695b      	ldr	r3, [r3, #20]
 800adc8:	3b01      	subs	r3, #1
 800adca:	061b      	lsls	r3, r3, #24
 800adcc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800add0:	4928      	ldr	r1, [pc, #160]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800add2:	4313      	orrs	r3, r2
 800add4:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800add6:	4b27      	ldr	r3, [pc, #156]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800add8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adda:	f023 020c 	bic.w	r2, r3, #12
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	4924      	ldr	r1, [pc, #144]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ade4:	4313      	orrs	r3, r2
 800ade6:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800ade8:	4b22      	ldr	r3, [pc, #136]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800adea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adec:	f023 0220 	bic.w	r2, r3, #32
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	69db      	ldr	r3, [r3, #28]
 800adf4:	491f      	ldr	r1, [pc, #124]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800adf6:	4313      	orrs	r3, r2
 800adf8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800adfa:	4b1e      	ldr	r3, [pc, #120]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800adfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae02:	491c      	ldr	r1, [pc, #112]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ae04:	4313      	orrs	r3, r2
 800ae06:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800ae08:	4b1a      	ldr	r3, [pc, #104]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ae0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae0c:	4a19      	ldr	r2, [pc, #100]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ae0e:	f023 0310 	bic.w	r3, r3, #16
 800ae12:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800ae14:	4b17      	ldr	r3, [pc, #92]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ae16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae18:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ae1c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	6a12      	ldr	r2, [r2, #32]
 800ae24:	00d2      	lsls	r2, r2, #3
 800ae26:	4913      	ldr	r1, [pc, #76]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800ae2c:	4b11      	ldr	r3, [pc, #68]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ae2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae30:	4a10      	ldr	r2, [pc, #64]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ae32:	f043 0310 	orr.w	r3, r3, #16
 800ae36:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 800ae38:	4b0e      	ldr	r3, [pc, #56]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a0d      	ldr	r2, [pc, #52]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ae3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ae42:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ae44:	f7f7 fea4 	bl	8002b90 <HAL_GetTick>
 800ae48:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae4a:	e008      	b.n	800ae5e <RCCEx_PLL2_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ae4c:	f7f7 fea0 	bl	8002b90 <HAL_GetTick>
 800ae50:	4602      	mov	r2, r0
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	2b02      	cmp	r3, #2
 800ae58:	d901      	bls.n	800ae5e <RCCEx_PLL2_Config+0x116>
    {
      return HAL_TIMEOUT;
 800ae5a:	2303      	movs	r3, #3
 800ae5c:	e006      	b.n	800ae6c <RCCEx_PLL2_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ae5e:	4b05      	ldr	r3, [pc, #20]	@ (800ae74 <RCCEx_PLL2_Config+0x12c>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d0f0      	beq.n	800ae4c <RCCEx_PLL2_Config+0x104>
    }
  }
  return HAL_OK;
 800ae6a:	2300      	movs	r3, #0

}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	44020c00 	.word	0x44020c00

0800ae78 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLL3_VCIRGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3_VCORGE_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLL3_FRACN_VALUE(pll3->PLL3FRACN));

  /* Disable  PLL3. */
  __HAL_RCC_PLL3_DISABLE();
 800ae80:	4b48      	ldr	r3, [pc, #288]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	4a47      	ldr	r2, [pc, #284]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800ae86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae8a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ae8c:	f7f7 fe80 	bl	8002b90 <HAL_GetTick>
 800ae90:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is disabled */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ae92:	e008      	b.n	800aea6 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ae94:	f7f7 fe7c 	bl	8002b90 <HAL_GetTick>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	1ad3      	subs	r3, r2, r3
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d901      	bls.n	800aea6 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800aea2:	2303      	movs	r3, #3
 800aea4:	e07a      	b.n	800af9c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800aea6:	4b3f      	ldr	r3, [pc, #252]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1f0      	bne.n	800ae94 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800aeb2:	4b3c      	ldr	r3, [pc, #240]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800aeb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeb6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800aeba:	f023 0303 	bic.w	r3, r3, #3
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	6811      	ldr	r1, [r2, #0]
 800aec2:	687a      	ldr	r2, [r7, #4]
 800aec4:	6852      	ldr	r2, [r2, #4]
 800aec6:	0212      	lsls	r2, r2, #8
 800aec8:	430a      	orrs	r2, r1
 800aeca:	4936      	ldr	r1, [pc, #216]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800aecc:	4313      	orrs	r3, r2
 800aece:	630b      	str	r3, [r1, #48]	@ 0x30
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	3b01      	subs	r3, #1
 800aed6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	68db      	ldr	r3, [r3, #12]
 800aede:	3b01      	subs	r3, #1
 800aee0:	025b      	lsls	r3, r3, #9
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	431a      	orrs	r2, r3
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	691b      	ldr	r3, [r3, #16]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	041b      	lsls	r3, r3, #16
 800aeee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800aef2:	431a      	orrs	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	695b      	ldr	r3, [r3, #20]
 800aef8:	3b01      	subs	r3, #1
 800aefa:	061b      	lsls	r3, r3, #24
 800aefc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800af00:	4928      	ldr	r1, [pc, #160]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af02:	4313      	orrs	r3, r2
 800af04:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800af06:	4b27      	ldr	r3, [pc, #156]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af0a:	f023 020c 	bic.w	r2, r3, #12
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	699b      	ldr	r3, [r3, #24]
 800af12:	4924      	ldr	r1, [pc, #144]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af14:	4313      	orrs	r3, r2
 800af16:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 800af18:	4b22      	ldr	r3, [pc, #136]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af1c:	f023 0220 	bic.w	r2, r3, #32
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	69db      	ldr	r3, [r3, #28]
 800af24:	491f      	ldr	r1, [pc, #124]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af26:	4313      	orrs	r3, r2
 800af28:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800af2a:	4b1e      	ldr	r3, [pc, #120]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af32:	491c      	ldr	r1, [pc, #112]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af34:	4313      	orrs	r3, r2
 800af36:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800af38:	4b1a      	ldr	r3, [pc, #104]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af3c:	4a19      	ldr	r2, [pc, #100]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af3e:	f023 0310 	bic.w	r3, r3, #16
 800af42:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800af44:	4b17      	ldr	r3, [pc, #92]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af48:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800af4c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	6a12      	ldr	r2, [r2, #32]
 800af54:	00d2      	lsls	r2, r2, #3
 800af56:	4913      	ldr	r1, [pc, #76]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af58:	4313      	orrs	r3, r2
 800af5a:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800af5c:	4b11      	ldr	r3, [pc, #68]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af60:	4a10      	ldr	r2, [pc, #64]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af62:	f043 0310 	orr.w	r3, r3, #16
 800af66:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800af68:	4b0e      	ldr	r3, [pc, #56]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a0d      	ldr	r2, [pc, #52]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af72:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800af74:	f7f7 fe0c 	bl	8002b90 <HAL_GetTick>
 800af78:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af7a:	e008      	b.n	800af8e <RCCEx_PLL3_Config+0x116>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800af7c:	f7f7 fe08 	bl	8002b90 <HAL_GetTick>
 800af80:	4602      	mov	r2, r0
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	1ad3      	subs	r3, r2, r3
 800af86:	2b02      	cmp	r3, #2
 800af88:	d901      	bls.n	800af8e <RCCEx_PLL3_Config+0x116>
    {
      return HAL_TIMEOUT;
 800af8a:	2303      	movs	r3, #3
 800af8c:	e006      	b.n	800af9c <RCCEx_PLL3_Config+0x124>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800af8e:	4b05      	ldr	r3, [pc, #20]	@ (800afa4 <RCCEx_PLL3_Config+0x12c>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af96:	2b00      	cmp	r3, #0
 800af98:	d0f0      	beq.n	800af7c <RCCEx_PLL3_Config+0x104>
    }
  }
  return HAL_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	44020c00 	.word	0x44020c00

0800afa8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b084      	sub	sp, #16
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d101      	bne.n	800afba <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	e08c      	b.n	800b0d4 <HAL_RNG_Init+0x12c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	7a5b      	ldrb	r3, [r3, #9]
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d105      	bne.n	800afd0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2200      	movs	r2, #0
 800afc8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7f6 fdf4 	bl	8001bb8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2202      	movs	r2, #2
 800afd4:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f022 0204 	bic.w	r2, r2, #4
 800afe4:	601a      	str	r2, [r3, #0]

#if defined(RNG_CR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->CR, RNG_CR_NIST_VALUE | RNG_CR_CONDRST | hrng->Init.ClockErrorDetection);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6859      	ldr	r1, [r3, #4]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	4b3b      	ldr	r3, [pc, #236]	@ (800b0dc <HAL_RNG_Init+0x134>)
 800aff0:	430b      	orrs	r3, r1
 800aff2:	6013      	str	r3, [r2, #0]
  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
#endif /* RNG_CR_NIST_VALUE */
#if defined(RNG_HTCR_NIST_VALUE)
  /* Recommended value for NIST compliance, refer to application note AN4230 */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCR_NIST_VALUE);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f646 2291 	movw	r2, #27281	@ 0x6a91
 800affc:	611a      	str	r2, [r3, #16]
#endif /* RNG_HTCR_NIST_VALUE */
#if defined(RNG_NSCR_NIST_VALUE)
  WRITE_REG(hrng->Instance->NSCR, RNG_NSCR_NIST_VALUE);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a37      	ldr	r2, [pc, #220]	@ (800b0e0 <HAL_RNG_Init+0x138>)
 800b004:	60da      	str	r2, [r3, #12]
#endif /* RNG_NSCR_NIST_VALUE */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800b014:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b016:	f7f7 fdbb 	bl	8002b90 <HAL_GetTick>
 800b01a:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800b01c:	e016      	b.n	800b04c <HAL_RNG_Init+0xa4>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b01e:	f7f7 fdb7 	bl	8002b90 <HAL_GetTick>
 800b022:	4602      	mov	r2, r0
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	1ad3      	subs	r3, r2, r3
 800b028:	2b04      	cmp	r3, #4
 800b02a:	d90f      	bls.n	800b04c <HAL_RNG_Init+0xa4>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b03a:	d107      	bne.n	800b04c <HAL_RNG_Init+0xa4>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2202      	movs	r2, #2
 800b046:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800b048:	2301      	movs	r3, #1
 800b04a:	e043      	b.n	800b0d4 <HAL_RNG_Init+0x12c>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b05a:	d0e0      	beq.n	800b01e <HAL_RNG_Init+0x76>
      }
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f042 0204 	orr.w	r2, r2, #4
 800b06a:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	685b      	ldr	r3, [r3, #4]
 800b072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b076:	2b40      	cmp	r3, #64	@ 0x40
 800b078:	d104      	bne.n	800b084 <HAL_RNG_Init+0xdc>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2204      	movs	r2, #4
 800b07e:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e027      	b.n	800b0d4 <HAL_RNG_Init+0x12c>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800b084:	f7f7 fd84 	bl	8002b90 <HAL_GetTick>
 800b088:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800b08a:	e015      	b.n	800b0b8 <HAL_RNG_Init+0x110>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b08c:	f7f7 fd80 	bl	8002b90 <HAL_GetTick>
 800b090:	4602      	mov	r2, r0
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	2b04      	cmp	r3, #4
 800b098:	d90e      	bls.n	800b0b8 <HAL_RNG_Init+0x110>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	f003 0301 	and.w	r3, r3, #1
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	d007      	beq.n	800b0b8 <HAL_RNG_Init+0x110>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2204      	movs	r2, #4
 800b0ac:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2202      	movs	r2, #2
 800b0b2:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e00d      	b.n	800b0d4 <HAL_RNG_Init+0x12c>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	f003 0301 	and.w	r3, r3, #1
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d1e2      	bne.n	800b08c <HAL_RNG_Init+0xe4>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3710      	adds	r7, #16
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	40f00e00 	.word	0x40f00e00
 800b0e0:	0003af66 	.word	0x0003af66

0800b0e4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	7a1b      	ldrb	r3, [r3, #8]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d101      	bne.n	800b0fe <HAL_RNG_GenerateRandomNumber+0x1a>
 800b0fa:	2302      	movs	r3, #2
 800b0fc:	e068      	b.n	800b1d0 <HAL_RNG_GenerateRandomNumber+0xec>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2201      	movs	r2, #1
 800b102:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	7a5b      	ldrb	r3, [r3, #9]
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d157      	bne.n	800b1be <HAL_RNG_GenerateRandomNumber+0xda>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2202      	movs	r2, #2
 800b112:	725a      	strb	r2, [r3, #9]
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b11e:	2b40      	cmp	r3, #64	@ 0x40
 800b120:	d10f      	bne.n	800b142 <HAL_RNG_GenerateRandomNumber+0x5e>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2208      	movs	r2, #8
 800b126:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 f85f 	bl	800b1ec <RNG_RecoverSeedError>
 800b12e:	4603      	mov	r3, r0
 800b130:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800b132:	7bfb      	ldrb	r3, [r7, #15]
 800b134:	2b01      	cmp	r3, #1
 800b136:	d104      	bne.n	800b142 <HAL_RNG_GenerateRandomNumber+0x5e>
      {
        /* Update the error code */
        hrng->ErrorCode = HAL_RNG_ERROR_RECOVERSEED;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2220      	movs	r2, #32
 800b13c:	60da      	str	r2, [r3, #12]
        return status;
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
 800b140:	e046      	b.n	800b1d0 <HAL_RNG_GenerateRandomNumber+0xec>
      }
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800b142:	f7f7 fd25 	bl	8002b90 <HAL_GetTick>
 800b146:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b148:	e018      	b.n	800b17c <HAL_RNG_GenerateRandomNumber+0x98>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b14a:	f7f7 fd21 	bl	8002b90 <HAL_GetTick>
 800b14e:	4602      	mov	r2, r0
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	2b04      	cmp	r3, #4
 800b156:	d911      	bls.n	800b17c <HAL_RNG_GenerateRandomNumber+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b01      	cmp	r3, #1
 800b164:	d00a      	beq.n	800b17c <HAL_RNG_GenerateRandomNumber+0x98>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2202      	movs	r2, #2
 800b170:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800b178:	2301      	movs	r3, #1
 800b17a:	e029      	b.n	800b1d0 <HAL_RNG_GenerateRandomNumber+0xec>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	f003 0301 	and.w	r3, r3, #1
 800b186:	2b01      	cmp	r3, #1
 800b188:	d1df      	bne.n	800b14a <HAL_RNG_GenerateRandomNumber+0x66>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	689a      	ldr	r2, [r3, #8]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	611a      	str	r2, [r3, #16]
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b19e:	2b40      	cmp	r3, #64	@ 0x40
 800b1a0:	d105      	bne.n	800b1ae <HAL_RNG_GenerateRandomNumber+0xca>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2208      	movs	r2, #8
 800b1a6:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	73fb      	strb	r3, [r7, #15]
 800b1ac:	e003      	b.n	800b1b6 <HAL_RNG_GenerateRandomNumber+0xd2>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	691a      	ldr	r2, [r3, #16]
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	601a      	str	r2, [r3, #0]
    }
    hrng->State = HAL_RNG_STATE_READY;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	725a      	strb	r2, [r3, #9]
 800b1bc:	e004      	b.n	800b1c8 <HAL_RNG_GenerateRandomNumber+0xe4>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2204      	movs	r2, #4
 800b1c2:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	721a      	strb	r2, [r3, #8]

  return status;
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3710      	adds	r7, #16
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b083      	sub	sp, #12
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	f003 0304 	and.w	r3, r3, #4
 800b202:	2b04      	cmp	r3, #4
 800b204:	d008      	beq.n	800b218 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	685a      	ldr	r2, [r3, #4]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b214:	605a      	str	r2, [r3, #4]
 800b216:	e05f      	b.n	800b2d8 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800b226:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800b236:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800b238:	2304      	movs	r3, #4
 800b23a:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	3b01      	subs	r3, #1
 800b240:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d110      	bne.n	800b26a <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	f043 0202 	orr.w	r2, r3, #2
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2200      	movs	r2, #0
 800b25e:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f7ff ffb9 	bl	800b1d8 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e03d      	b.n	800b2e6 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b274:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b278:	d0e0      	beq.n	800b23c <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b284:	2b40      	cmp	r3, #64	@ 0x40
 800b286:	d107      	bne.n	800b298 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	685a      	ldr	r2, [r3, #4]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b296:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800b298:	2304      	movs	r3, #4
 800b29a:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d110      	bne.n	800b2ca <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	f043 0202 	orr.w	r2, r3, #2
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f7ff ff89 	bl	800b1d8 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	e00d      	b.n	800b2e6 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	f003 0304 	and.w	r3, r3, #4
 800b2d4:	2b04      	cmp	r3, #4
 800b2d6:	d0e1      	beq.n	800b29c <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	f023 0208 	bic.w	r2, r3, #8
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d071      	beq.n	800b3e6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d106      	bne.n	800b31c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f7f6 fca6 	bl	8001c68 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2202      	movs	r2, #2
 800b320:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800b324:	4b32      	ldr	r3, [pc, #200]	@ (800b3f0 <HAL_RTC_Init+0x100>)
 800b326:	68db      	ldr	r3, [r3, #12]
 800b328:	f003 0310 	and.w	r3, r3, #16
 800b32c:	2b10      	cmp	r3, #16
 800b32e:	d051      	beq.n	800b3d4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b330:	4b2f      	ldr	r3, [pc, #188]	@ (800b3f0 <HAL_RTC_Init+0x100>)
 800b332:	22ca      	movs	r2, #202	@ 0xca
 800b334:	625a      	str	r2, [r3, #36]	@ 0x24
 800b336:	4b2e      	ldr	r3, [pc, #184]	@ (800b3f0 <HAL_RTC_Init+0x100>)
 800b338:	2253      	movs	r2, #83	@ 0x53
 800b33a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 f9a3 	bl	800b688 <RTC_EnterInitMode>
 800b342:	4603      	mov	r3, r0
 800b344:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800b346:	7bfb      	ldrb	r3, [r7, #15]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d13f      	bne.n	800b3cc <HAL_RTC_Init+0xdc>
      {
#if defined(RTC_CR_OSEL)
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800b34c:	4b28      	ldr	r3, [pc, #160]	@ (800b3f0 <HAL_RTC_Init+0x100>)
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	4a27      	ldr	r2, [pc, #156]	@ (800b3f0 <HAL_RTC_Init+0x100>)
 800b352:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 800b356:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b35a:	6193      	str	r3, [r2, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800b35c:	4b24      	ldr	r3, [pc, #144]	@ (800b3f0 <HAL_RTC_Init+0x100>)
 800b35e:	699a      	ldr	r2, [r3, #24]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6859      	ldr	r1, [r3, #4]
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	4319      	orrs	r1, r3
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	699b      	ldr	r3, [r3, #24]
 800b36e:	430b      	orrs	r3, r1
 800b370:	491f      	ldr	r1, [pc, #124]	@ (800b3f0 <HAL_RTC_Init+0x100>)
 800b372:	4313      	orrs	r3, r2
 800b374:	618b      	str	r3, [r1, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, hrtc->Init.HourFormat);
#endif /* RTC_CR_OSEL */

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	68da      	ldr	r2, [r3, #12]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	041b      	lsls	r3, r3, #16
 800b380:	491b      	ldr	r1, [pc, #108]	@ (800b3f0 <HAL_RTC_Init+0x100>)
 800b382:	4313      	orrs	r3, r2
 800b384:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800b386:	4b1a      	ldr	r3, [pc, #104]	@ (800b3f0 <HAL_RTC_Init+0x100>)
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b396:	430b      	orrs	r3, r1
 800b398:	4915      	ldr	r1, [pc, #84]	@ (800b3f0 <HAL_RTC_Init+0x100>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 f9ae 	bl	800b700 <RTC_ExitInitMode>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	73fb      	strb	r3, [r7, #15]

#if defined(RTC_CR_OSEL)
        if (status == HAL_OK)
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d10e      	bne.n	800b3cc <HAL_RTC_Init+0xdc>
        {
#if defined(RTC_CR_OUT2EN)
          MODIFY_REG(RTC->CR, \
 800b3ae:	4b10      	ldr	r3, [pc, #64]	@ (800b3f0 <HAL_RTC_Init+0x100>)
 800b3b0:	699b      	ldr	r3, [r3, #24]
 800b3b2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a19      	ldr	r1, [r3, #32]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	69db      	ldr	r3, [r3, #28]
 800b3be:	4319      	orrs	r1, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	695b      	ldr	r3, [r3, #20]
 800b3c4:	430b      	orrs	r3, r1
 800b3c6:	490a      	ldr	r1, [pc, #40]	@ (800b3f0 <HAL_RTC_Init+0x100>)
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	618b      	str	r3, [r1, #24]
        }
#endif /* RTC_CR_OSEL */
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b3cc:	4b08      	ldr	r3, [pc, #32]	@ (800b3f0 <HAL_RTC_Init+0x100>)
 800b3ce:	22ff      	movs	r2, #255	@ 0xff
 800b3d0:	625a      	str	r2, [r3, #36]	@ 0x24
 800b3d2:	e001      	b.n	800b3d8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800b3d8:	7bfb      	ldrb	r3, [r7, #15]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d103      	bne.n	800b3e6 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800b3e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	44007800 	.word	0x44007800

0800b3f4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b3f4:	b590      	push	{r4, r7, lr}
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b406:	2b01      	cmp	r3, #1
 800b408:	d101      	bne.n	800b40e <HAL_RTC_SetTime+0x1a>
 800b40a:	2302      	movs	r3, #2
 800b40c:	e07e      	b.n	800b50c <HAL_RTC_SetTime+0x118>
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2201      	movs	r2, #1
 800b412:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2202      	movs	r2, #2
 800b41a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b41e:	4b3d      	ldr	r3, [pc, #244]	@ (800b514 <HAL_RTC_SetTime+0x120>)
 800b420:	22ca      	movs	r2, #202	@ 0xca
 800b422:	625a      	str	r2, [r3, #36]	@ 0x24
 800b424:	4b3b      	ldr	r3, [pc, #236]	@ (800b514 <HAL_RTC_SetTime+0x120>)
 800b426:	2253      	movs	r2, #83	@ 0x53
 800b428:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f000 f92c 	bl	800b688 <RTC_EnterInitMode>
 800b430:	4603      	mov	r3, r0
 800b432:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b434:	7cfb      	ldrb	r3, [r7, #19]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d159      	bne.n	800b4ee <HAL_RTC_SetTime+0xfa>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800b43a:	4b36      	ldr	r3, [pc, #216]	@ (800b514 <HAL_RTC_SetTime+0x120>)
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b446:	d04d      	beq.n	800b4e4 <HAL_RTC_SetTime+0xf0>
    {
      if (Format == RTC_FORMAT_BIN)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d125      	bne.n	800b49a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b44e:	4b31      	ldr	r3, [pc, #196]	@ (800b514 <HAL_RTC_SetTime+0x120>)
 800b450:	699b      	ldr	r3, [r3, #24]
 800b452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b456:	2b00      	cmp	r3, #0
 800b458:	d102      	bne.n	800b460 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	2200      	movs	r2, #0
 800b45e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	4618      	mov	r0, r3
 800b466:	f000 f989 	bl	800b77c <RTC_ByteToBcd2>
 800b46a:	4603      	mov	r3, r0
 800b46c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	785b      	ldrb	r3, [r3, #1]
 800b472:	4618      	mov	r0, r3
 800b474:	f000 f982 	bl	800b77c <RTC_ByteToBcd2>
 800b478:	4603      	mov	r3, r0
 800b47a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b47c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	789b      	ldrb	r3, [r3, #2]
 800b482:	4618      	mov	r0, r3
 800b484:	f000 f97a 	bl	800b77c <RTC_ByteToBcd2>
 800b488:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b48a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	78db      	ldrb	r3, [r3, #3]
 800b492:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b494:	4313      	orrs	r3, r2
 800b496:	617b      	str	r3, [r7, #20]
 800b498:	e017      	b.n	800b4ca <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800b49a:	4b1e      	ldr	r3, [pc, #120]	@ (800b514 <HAL_RTC_SetTime+0x120>)
 800b49c:	699b      	ldr	r3, [r3, #24]
 800b49e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d102      	bne.n	800b4ac <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	785b      	ldrb	r3, [r3, #1]
 800b4b6:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b4b8:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800b4ba:	68ba      	ldr	r2, [r7, #8]
 800b4bc:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800b4be:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	78db      	ldrb	r3, [r3, #3]
 800b4c4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800b4c6:	4313      	orrs	r3, r2
 800b4c8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800b4ca:	4a12      	ldr	r2, [pc, #72]	@ (800b514 <HAL_RTC_SetTime+0x120>)
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800b4d2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800b4d6:	6013      	str	r3, [r2, #0]

      /* Clear the bits to be configured */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800b4d8:	4b0e      	ldr	r3, [pc, #56]	@ (800b514 <HAL_RTC_SetTime+0x120>)
 800b4da:	699b      	ldr	r3, [r3, #24]
 800b4dc:	4a0d      	ldr	r2, [pc, #52]	@ (800b514 <HAL_RTC_SetTime+0x120>)
 800b4de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b4e2:	6193      	str	r3, [r2, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 f90b 	bl	800b700 <RTC_ExitInitMode>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b4ee:	4b09      	ldr	r3, [pc, #36]	@ (800b514 <HAL_RTC_SetTime+0x120>)
 800b4f0:	22ff      	movs	r2, #255	@ 0xff
 800b4f2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800b4f4:	7cfb      	ldrb	r3, [r7, #19]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d103      	bne.n	800b502 <HAL_RTC_SetTime+0x10e>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	2200      	movs	r2, #0
 800b506:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800b50a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	371c      	adds	r7, #28
 800b510:	46bd      	mov	sp, r7
 800b512:	bd90      	pop	{r4, r7, pc}
 800b514:	44007800 	.word	0x44007800

0800b518 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b518:	b590      	push	{r4, r7, lr}
 800b51a:	b087      	sub	sp, #28
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d101      	bne.n	800b532 <HAL_RTC_SetDate+0x1a>
 800b52e:	2302      	movs	r3, #2
 800b530:	e071      	b.n	800b616 <HAL_RTC_SetDate+0xfe>
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2201      	movs	r2, #1
 800b536:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2202      	movs	r2, #2
 800b53e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10e      	bne.n	800b566 <HAL_RTC_SetDate+0x4e>
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	785b      	ldrb	r3, [r3, #1]
 800b54c:	f003 0310 	and.w	r3, r3, #16
 800b550:	2b00      	cmp	r3, #0
 800b552:	d008      	beq.n	800b566 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	785b      	ldrb	r3, [r3, #1]
 800b558:	f023 0310 	bic.w	r3, r3, #16
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	330a      	adds	r3, #10
 800b560:	b2da      	uxtb	r2, r3
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d11c      	bne.n	800b5a6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	78db      	ldrb	r3, [r3, #3]
 800b570:	4618      	mov	r0, r3
 800b572:	f000 f903 	bl	800b77c <RTC_ByteToBcd2>
 800b576:	4603      	mov	r3, r0
 800b578:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	785b      	ldrb	r3, [r3, #1]
 800b57e:	4618      	mov	r0, r3
 800b580:	f000 f8fc 	bl	800b77c <RTC_ByteToBcd2>
 800b584:	4603      	mov	r3, r0
 800b586:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b588:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	789b      	ldrb	r3, [r3, #2]
 800b58e:	4618      	mov	r0, r3
 800b590:	f000 f8f4 	bl	800b77c <RTC_ByteToBcd2>
 800b594:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800b596:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800b5a0:	4313      	orrs	r3, r2
 800b5a2:	617b      	str	r3, [r7, #20]
 800b5a4:	e00e      	b.n	800b5c4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	78db      	ldrb	r3, [r3, #3]
 800b5aa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	785b      	ldrb	r3, [r3, #1]
 800b5b0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b5b2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800b5b4:	68ba      	ldr	r2, [r7, #8]
 800b5b6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800b5b8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b5c4:	4b16      	ldr	r3, [pc, #88]	@ (800b620 <HAL_RTC_SetDate+0x108>)
 800b5c6:	22ca      	movs	r2, #202	@ 0xca
 800b5c8:	625a      	str	r2, [r3, #36]	@ 0x24
 800b5ca:	4b15      	ldr	r3, [pc, #84]	@ (800b620 <HAL_RTC_SetDate+0x108>)
 800b5cc:	2253      	movs	r2, #83	@ 0x53
 800b5ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	f000 f859 	bl	800b688 <RTC_EnterInitMode>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800b5da:	7cfb      	ldrb	r3, [r7, #19]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d10b      	bne.n	800b5f8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800b5e0:	4a0f      	ldr	r2, [pc, #60]	@ (800b620 <HAL_RTC_SetDate+0x108>)
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b5e8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b5ec:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b5ee:	68f8      	ldr	r0, [r7, #12]
 800b5f0:	f000 f886 	bl	800b700 <RTC_ExitInitMode>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b5f8:	4b09      	ldr	r3, [pc, #36]	@ (800b620 <HAL_RTC_SetDate+0x108>)
 800b5fa:	22ff      	movs	r2, #255	@ 0xff
 800b5fc:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800b5fe:	7cfb      	ldrb	r3, [r7, #19]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d103      	bne.n	800b60c <HAL_RTC_SetDate+0xf4>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2201      	movs	r2, #1
 800b608:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2200      	movs	r2, #0
 800b610:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800b614:	7cfb      	ldrb	r3, [r7, #19]
}
 800b616:	4618      	mov	r0, r3
 800b618:	371c      	adds	r7, #28
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd90      	pop	{r4, r7, pc}
 800b61e:	bf00      	nop
 800b620:	44007800 	.word	0x44007800

0800b624 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b084      	sub	sp, #16
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800b62c:	4b15      	ldr	r3, [pc, #84]	@ (800b684 <HAL_RTC_WaitForSynchro+0x60>)
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	4a14      	ldr	r2, [pc, #80]	@ (800b684 <HAL_RTC_WaitForSynchro+0x60>)
 800b632:	f023 0320 	bic.w	r3, r3, #32
 800b636:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800b638:	f7f7 faaa 	bl	8002b90 <HAL_GetTick>
 800b63c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b63e:	e013      	b.n	800b668 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b640:	f7f7 faa6 	bl	8002b90 <HAL_GetTick>
 800b644:	4602      	mov	r2, r0
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	1ad3      	subs	r3, r2, r3
 800b64a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b64e:	d90b      	bls.n	800b668 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b650:	4b0c      	ldr	r3, [pc, #48]	@ (800b684 <HAL_RTC_WaitForSynchro+0x60>)
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	f003 0320 	and.w	r3, r3, #32
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10c      	bne.n	800b676 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2203      	movs	r2, #3
 800b660:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
        return HAL_TIMEOUT;
 800b664:	2303      	movs	r3, #3
 800b666:	e008      	b.n	800b67a <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800b668:	4b06      	ldr	r3, [pc, #24]	@ (800b684 <HAL_RTC_WaitForSynchro+0x60>)
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	f003 0320 	and.w	r3, r3, #32
 800b670:	2b00      	cmp	r3, #0
 800b672:	d0e5      	beq.n	800b640 <HAL_RTC_WaitForSynchro+0x1c>
 800b674:	e000      	b.n	800b678 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800b676:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800b678:	2300      	movs	r3, #0
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	44007800 	.word	0x44007800

0800b688 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b690:	2300      	movs	r3, #0
 800b692:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800b694:	4b19      	ldr	r3, [pc, #100]	@ (800b6fc <RTC_EnterInitMode+0x74>)
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d128      	bne.n	800b6f2 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b6a0:	4b16      	ldr	r3, [pc, #88]	@ (800b6fc <RTC_EnterInitMode+0x74>)
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	4a15      	ldr	r2, [pc, #84]	@ (800b6fc <RTC_EnterInitMode+0x74>)
 800b6a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6aa:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800b6ac:	f7f7 fa70 	bl	8002b90 <HAL_GetTick>
 800b6b0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b6b2:	e013      	b.n	800b6dc <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800b6b4:	f7f7 fa6c 	bl	8002b90 <HAL_GetTick>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	1ad3      	subs	r3, r2, r3
 800b6be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b6c2:	d90b      	bls.n	800b6dc <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800b6c4:	4b0d      	ldr	r3, [pc, #52]	@ (800b6fc <RTC_EnterInitMode+0x74>)
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d10f      	bne.n	800b6f0 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800b6d0:	2303      	movs	r3, #3
 800b6d2:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2203      	movs	r2, #3
 800b6d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800b6dc:	4b07      	ldr	r3, [pc, #28]	@ (800b6fc <RTC_EnterInitMode+0x74>)
 800b6de:	68db      	ldr	r3, [r3, #12]
 800b6e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d104      	bne.n	800b6f2 <RTC_EnterInitMode+0x6a>
 800b6e8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ea:	2b03      	cmp	r3, #3
 800b6ec:	d1e2      	bne.n	800b6b4 <RTC_EnterInitMode+0x2c>
 800b6ee:	e000      	b.n	800b6f2 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800b6f0:	bf00      	nop
        }
      }
    }
  }

  return status;
 800b6f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	3710      	adds	r7, #16
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	44007800 	.word	0x44007800

0800b700 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800b70c:	4b1a      	ldr	r3, [pc, #104]	@ (800b778 <RTC_ExitInitMode+0x78>)
 800b70e:	68db      	ldr	r3, [r3, #12]
 800b710:	4a19      	ldr	r2, [pc, #100]	@ (800b778 <RTC_ExitInitMode+0x78>)
 800b712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b716:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800b718:	4b17      	ldr	r3, [pc, #92]	@ (800b778 <RTC_ExitInitMode+0x78>)
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	f003 0320 	and.w	r3, r3, #32
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10c      	bne.n	800b73e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f7ff ff7d 	bl	800b624 <HAL_RTC_WaitForSynchro>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d01e      	beq.n	800b76e <RTC_ExitInitMode+0x6e>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2203      	movs	r2, #3
 800b734:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800b738:	2303      	movs	r3, #3
 800b73a:	73fb      	strb	r3, [r7, #15]
 800b73c:	e017      	b.n	800b76e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b73e:	4b0e      	ldr	r3, [pc, #56]	@ (800b778 <RTC_ExitInitMode+0x78>)
 800b740:	699b      	ldr	r3, [r3, #24]
 800b742:	4a0d      	ldr	r2, [pc, #52]	@ (800b778 <RTC_ExitInitMode+0x78>)
 800b744:	f023 0320 	bic.w	r3, r3, #32
 800b748:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f7ff ff6a 	bl	800b624 <HAL_RTC_WaitForSynchro>
 800b750:	4603      	mov	r3, r0
 800b752:	2b00      	cmp	r3, #0
 800b754:	d005      	beq.n	800b762 <RTC_ExitInitMode+0x62>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2203      	movs	r2, #3
 800b75a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 800b75e:	2303      	movs	r3, #3
 800b760:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800b762:	4b05      	ldr	r3, [pc, #20]	@ (800b778 <RTC_ExitInitMode+0x78>)
 800b764:	699b      	ldr	r3, [r3, #24]
 800b766:	4a04      	ldr	r2, [pc, #16]	@ (800b778 <RTC_ExitInitMode+0x78>)
 800b768:	f043 0320 	orr.w	r3, r3, #32
 800b76c:	6193      	str	r3, [r2, #24]
  }
  return status;
 800b76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b770:	4618      	mov	r0, r3
 800b772:	3710      	adds	r7, #16
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}
 800b778:	44007800 	.word	0x44007800

0800b77c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	4603      	mov	r3, r0
 800b784:	71fb      	strb	r3, [r7, #7]
  uint32_t bcd_high = 0U;
 800b786:	2300      	movs	r3, #0
 800b788:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_value = Value;
 800b78a:	79fb      	ldrb	r3, [r7, #7]
 800b78c:	72fb      	strb	r3, [r7, #11]

  while (tmp_value >= 10U)
 800b78e:	e005      	b.n	800b79c <RTC_ByteToBcd2+0x20>
  {
    bcd_high++;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	3301      	adds	r3, #1
 800b794:	60fb      	str	r3, [r7, #12]
    tmp_value -= 10U;
 800b796:	7afb      	ldrb	r3, [r7, #11]
 800b798:	3b0a      	subs	r3, #10
 800b79a:	72fb      	strb	r3, [r7, #11]
  while (tmp_value >= 10U)
 800b79c:	7afb      	ldrb	r3, [r7, #11]
 800b79e:	2b09      	cmp	r3, #9
 800b7a0:	d8f6      	bhi.n	800b790 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcd_high << 4U) | tmp_value);
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	b2db      	uxtb	r3, r3
 800b7a6:	011b      	lsls	r3, r3, #4
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	7afb      	ldrb	r3, [r7, #11]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	b2db      	uxtb	r3, r3
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3714      	adds	r7, #20
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(const RTC_HandleTypeDef *hrtc,
                                             const RTC_PrivilegeStateTypeDef *privilegeState)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	4910      	ldr	r1, [pc, #64]	@ (800b810 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800b7d0:	4313      	orrs	r3, r2
 800b7d2:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	689a      	ldr	r2, [r3, #8]
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	68db      	ldr	r3, [r3, #12]
 800b7dc:	431a      	orrs	r2, r3
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	699b      	ldr	r3, [r3, #24]
 800b7e2:	490c      	ldr	r1, [pc, #48]	@ (800b814 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800b7e4:	4313      	orrs	r3, r2
 800b7e6:	624b      	str	r3, [r1, #36]	@ 0x24
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
               (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
#if defined(TAMP_SECCFGR_BKPWSEC)
  MODIFY_REG(TAMP->SECCFGR,
 800b7e8:	4b0a      	ldr	r3, [pc, #40]	@ (800b814 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800b7ea:	6a1b      	ldr	r3, [r3, #32]
 800b7ec:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 800b7f0:	683b      	ldr	r3, [r7, #0]
 800b7f2:	6919      	ldr	r1, [r3, #16]
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	041b      	lsls	r3, r3, #16
 800b7fa:	430b      	orrs	r3, r1
 800b7fc:	4905      	ldr	r1, [pc, #20]	@ (800b814 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800b7fe:	4313      	orrs	r3, r2
 800b800:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));
#endif /* TAMP_SECCFGR_BKPWSEC */

  return HAL_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	44007800 	.word	0x44007800
 800b814:	44007c00 	.word	0x44007c00

0800b818 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b084      	sub	sp, #16
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d101      	bne.n	800b82a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e162      	b.n	800baf0 <HAL_SPI_Init+0x2d8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4a70      	ldr	r2, [pc, #448]	@ (800b9f0 <HAL_SPI_Init+0x1d8>)
 800b830:	4293      	cmp	r3, r2
 800b832:	d018      	beq.n	800b866 <HAL_SPI_Init+0x4e>
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4a6e      	ldr	r2, [pc, #440]	@ (800b9f4 <HAL_SPI_Init+0x1dc>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d013      	beq.n	800b866 <HAL_SPI_Init+0x4e>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4a6d      	ldr	r2, [pc, #436]	@ (800b9f8 <HAL_SPI_Init+0x1e0>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d00e      	beq.n	800b866 <HAL_SPI_Init+0x4e>
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a6b      	ldr	r2, [pc, #428]	@ (800b9fc <HAL_SPI_Init+0x1e4>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d009      	beq.n	800b866 <HAL_SPI_Init+0x4e>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4a6a      	ldr	r2, [pc, #424]	@ (800ba00 <HAL_SPI_Init+0x1e8>)
 800b858:	4293      	cmp	r3, r2
 800b85a:	d004      	beq.n	800b866 <HAL_SPI_Init+0x4e>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a68      	ldr	r2, [pc, #416]	@ (800ba04 <HAL_SPI_Init+0x1ec>)
 800b862:	4293      	cmp	r3, r2
 800b864:	e000      	b.n	800b868 <HAL_SPI_Init+0x50>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800b866:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a5f      	ldr	r2, [pc, #380]	@ (800b9f0 <HAL_SPI_Init+0x1d8>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d018      	beq.n	800b8aa <HAL_SPI_Init+0x92>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a5d      	ldr	r2, [pc, #372]	@ (800b9f4 <HAL_SPI_Init+0x1dc>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d013      	beq.n	800b8aa <HAL_SPI_Init+0x92>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a5c      	ldr	r2, [pc, #368]	@ (800b9f8 <HAL_SPI_Init+0x1e0>)
 800b888:	4293      	cmp	r3, r2
 800b88a:	d00e      	beq.n	800b8aa <HAL_SPI_Init+0x92>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a5a      	ldr	r2, [pc, #360]	@ (800b9fc <HAL_SPI_Init+0x1e4>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d009      	beq.n	800b8aa <HAL_SPI_Init+0x92>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a59      	ldr	r2, [pc, #356]	@ (800ba00 <HAL_SPI_Init+0x1e8>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d004      	beq.n	800b8aa <HAL_SPI_Init+0x92>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a57      	ldr	r2, [pc, #348]	@ (800ba04 <HAL_SPI_Init+0x1ec>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d105      	bne.n	800b8b6 <HAL_SPI_Init+0x9e>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	2b0f      	cmp	r3, #15
 800b8b0:	d901      	bls.n	800b8b6 <HAL_SPI_Init+0x9e>
  {
    return HAL_ERROR;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	e11c      	b.n	800baf0 <HAL_SPI_Init+0x2d8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f91e 	bl	800baf8 <SPI_GetPacketSize>
 800b8bc:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a4b      	ldr	r2, [pc, #300]	@ (800b9f0 <HAL_SPI_Init+0x1d8>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d018      	beq.n	800b8fa <HAL_SPI_Init+0xe2>
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	4a49      	ldr	r2, [pc, #292]	@ (800b9f4 <HAL_SPI_Init+0x1dc>)
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d013      	beq.n	800b8fa <HAL_SPI_Init+0xe2>
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	4a48      	ldr	r2, [pc, #288]	@ (800b9f8 <HAL_SPI_Init+0x1e0>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d00e      	beq.n	800b8fa <HAL_SPI_Init+0xe2>
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4a46      	ldr	r2, [pc, #280]	@ (800b9fc <HAL_SPI_Init+0x1e4>)
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	d009      	beq.n	800b8fa <HAL_SPI_Init+0xe2>
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	4a45      	ldr	r2, [pc, #276]	@ (800ba00 <HAL_SPI_Init+0x1e8>)
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	d004      	beq.n	800b8fa <HAL_SPI_Init+0xe2>
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a43      	ldr	r2, [pc, #268]	@ (800ba04 <HAL_SPI_Init+0x1ec>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d102      	bne.n	800b900 <HAL_SPI_Init+0xe8>
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	2b08      	cmp	r3, #8
 800b8fe:	d820      	bhi.n	800b942 <HAL_SPI_Init+0x12a>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b904:	4a40      	ldr	r2, [pc, #256]	@ (800ba08 <HAL_SPI_Init+0x1f0>)
 800b906:	4293      	cmp	r3, r2
 800b908:	d018      	beq.n	800b93c <HAL_SPI_Init+0x124>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	4a3f      	ldr	r2, [pc, #252]	@ (800ba0c <HAL_SPI_Init+0x1f4>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d013      	beq.n	800b93c <HAL_SPI_Init+0x124>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a3d      	ldr	r2, [pc, #244]	@ (800ba10 <HAL_SPI_Init+0x1f8>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d00e      	beq.n	800b93c <HAL_SPI_Init+0x124>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	4a3c      	ldr	r2, [pc, #240]	@ (800ba14 <HAL_SPI_Init+0x1fc>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d009      	beq.n	800b93c <HAL_SPI_Init+0x124>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a3a      	ldr	r2, [pc, #232]	@ (800ba18 <HAL_SPI_Init+0x200>)
 800b92e:	4293      	cmp	r3, r2
 800b930:	d004      	beq.n	800b93c <HAL_SPI_Init+0x124>
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a39      	ldr	r2, [pc, #228]	@ (800ba1c <HAL_SPI_Init+0x204>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d104      	bne.n	800b946 <HAL_SPI_Init+0x12e>
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	2b10      	cmp	r3, #16
 800b940:	d901      	bls.n	800b946 <HAL_SPI_Init+0x12e>
  {
    return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e0d4      	b.n	800baf0 <HAL_SPI_Init+0x2d8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d106      	bne.n	800b960 <HAL_SPI_Init+0x148>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f7f6 f9e4 	bl	8001d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2202      	movs	r2, #2
 800b964:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f022 0201 	bic.w	r2, r2, #1
 800b976:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	689b      	ldr	r3, [r3, #8]
 800b97e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800b982:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	699b      	ldr	r3, [r3, #24]
 800b988:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b98c:	d119      	bne.n	800b9c2 <HAL_SPI_Init+0x1aa>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	685b      	ldr	r3, [r3, #4]
 800b992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b996:	d103      	bne.n	800b9a0 <HAL_SPI_Init+0x188>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d008      	beq.n	800b9b2 <HAL_SPI_Init+0x19a>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10c      	bne.n	800b9c2 <HAL_SPI_Init+0x1aa>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b9ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9b0:	d107      	bne.n	800b9c2 <HAL_SPI_Init+0x1aa>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800b9c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d028      	beq.n	800ba20 <HAL_SPI_Init+0x208>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	68db      	ldr	r3, [r3, #12]
 800b9d2:	2b06      	cmp	r3, #6
 800b9d4:	d924      	bls.n	800ba20 <HAL_SPI_Init+0x208>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	430a      	orrs	r2, r1
 800b9ea:	601a      	str	r2, [r3, #0]
 800b9ec:	e020      	b.n	800ba30 <HAL_SPI_Init+0x218>
 800b9ee:	bf00      	nop
 800b9f0:	40014c00 	.word	0x40014c00
 800b9f4:	50014c00 	.word	0x50014c00
 800b9f8:	44002000 	.word	0x44002000
 800b9fc:	54002000 	.word	0x54002000
 800ba00:	40015000 	.word	0x40015000
 800ba04:	50015000 	.word	0x50015000
 800ba08:	40013000 	.word	0x40013000
 800ba0c:	50013000 	.word	0x50013000
 800ba10:	40003800 	.word	0x40003800
 800ba14:	50003800 	.word	0x50003800
 800ba18:	40003c00 	.word	0x40003c00
 800ba1c:	50003c00 	.word	0x50003c00
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681a      	ldr	r2, [r3, #0]
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ba2e:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	69da      	ldr	r2, [r3, #28]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba38:	431a      	orrs	r2, r3
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	431a      	orrs	r2, r3
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba42:	ea42 0103 	orr.w	r1, r2, r3
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	68da      	ldr	r2, [r3, #12]
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	430a      	orrs	r2, r1
 800ba50:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba5a:	431a      	orrs	r2, r3
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba60:	431a      	orrs	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	699b      	ldr	r3, [r3, #24]
 800ba66:	431a      	orrs	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	691b      	ldr	r3, [r3, #16]
 800ba6c:	431a      	orrs	r2, r3
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	695b      	ldr	r3, [r3, #20]
 800ba72:	431a      	orrs	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a1b      	ldr	r3, [r3, #32]
 800ba78:	431a      	orrs	r2, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	431a      	orrs	r2, r3
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba84:	431a      	orrs	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	431a      	orrs	r2, r3
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba90:	431a      	orrs	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba96:	431a      	orrs	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba9c:	ea42 0103 	orr.w	r1, r2, r3
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	430a      	orrs	r2, r1
 800baaa:	60da      	str	r2, [r3, #12]
#endif /* USE_SPI_CRC */
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f022 0201 	bic.w	r2, r2, #1
 800baba:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	685b      	ldr	r3, [r3, #4]
 800bac0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00a      	beq.n	800bade <HAL_SPI_Init+0x2c6>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	68db      	ldr	r3, [r3, #12]
 800bace:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	430a      	orrs	r2, r1
 800badc:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2201      	movs	r2, #1
 800baea:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 800baee:	2300      	movs	r3, #0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3710      	adds	r7, #16
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb04:	095b      	lsrs	r3, r3, #5
 800bb06:	3301      	adds	r3, #1
 800bb08:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	68db      	ldr	r3, [r3, #12]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	3307      	adds	r3, #7
 800bb16:	08db      	lsrs	r3, r3, #3
 800bb18:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	fb02 f303 	mul.w	r3, r2, r3
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	3714      	adds	r7, #20
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b082      	sub	sp, #8
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d101      	bne.n	800bb40 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e042      	b.n	800bbc6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d106      	bne.n	800bb58 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f7f6 f9a4 	bl	8001ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2224      	movs	r2, #36	@ 0x24
 800bb5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f022 0201 	bic.w	r2, r2, #1
 800bb6e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d002      	beq.n	800bb7e <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fab5 	bl	800c0e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f8c4 	bl	800bd0c <UART_SetConfig>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d101      	bne.n	800bb8e <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	e01b      	b.n	800bbc6 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	685a      	ldr	r2, [r3, #4]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bb9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689a      	ldr	r2, [r3, #8]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bbac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f042 0201 	orr.w	r2, r2, #1
 800bbbc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fb34 	bl	800c22c <UART_CheckIdleState>
 800bbc4:	4603      	mov	r3, r0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b08a      	sub	sp, #40	@ 0x28
 800bbd2:	af02      	add	r7, sp, #8
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	603b      	str	r3, [r7, #0]
 800bbda:	4613      	mov	r3, r2
 800bbdc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbe4:	2b20      	cmp	r3, #32
 800bbe6:	f040 808b 	bne.w	800bd00 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d002      	beq.n	800bbf6 <HAL_UART_Transmit+0x28>
 800bbf0:	88fb      	ldrh	r3, [r7, #6]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d101      	bne.n	800bbfa <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	e083      	b.n	800bd02 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	689b      	ldr	r3, [r3, #8]
 800bc00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc04:	2b80      	cmp	r3, #128	@ 0x80
 800bc06:	d107      	bne.n	800bc18 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	689a      	ldr	r2, [r3, #8]
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bc16:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2221      	movs	r2, #33	@ 0x21
 800bc24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc28:	f7f6 ffb2 	bl	8002b90 <HAL_GetTick>
 800bc2c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	88fa      	ldrh	r2, [r7, #6]
 800bc32:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	88fa      	ldrh	r2, [r7, #6]
 800bc3a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc46:	d108      	bne.n	800bc5a <HAL_UART_Transmit+0x8c>
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d104      	bne.n	800bc5a <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800bc50:	2300      	movs	r3, #0
 800bc52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	61bb      	str	r3, [r7, #24]
 800bc58:	e003      	b.n	800bc62 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bc62:	e030      	b.n	800bcc6 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	9300      	str	r3, [sp, #0]
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	2180      	movs	r1, #128	@ 0x80
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f000 fb86 	bl	800c380 <UART_WaitOnFlagUntilTimeout>
 800bc74:	4603      	mov	r3, r0
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d005      	beq.n	800bc86 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2220      	movs	r2, #32
 800bc7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800bc82:	2303      	movs	r3, #3
 800bc84:	e03d      	b.n	800bd02 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d10b      	bne.n	800bca4 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bc8c:	69bb      	ldr	r3, [r7, #24]
 800bc8e:	881b      	ldrh	r3, [r3, #0]
 800bc90:	461a      	mov	r2, r3
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc9a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	3302      	adds	r3, #2
 800bca0:	61bb      	str	r3, [r7, #24]
 800bca2:	e007      	b.n	800bcb4 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	781a      	ldrb	r2, [r3, #0]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	3b01      	subs	r3, #1
 800bcbe:	b29a      	uxth	r2, r3
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d1c8      	bne.n	800bc64 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	2140      	movs	r1, #64	@ 0x40
 800bcdc:	68f8      	ldr	r0, [r7, #12]
 800bcde:	f000 fb4f 	bl	800c380 <UART_WaitOnFlagUntilTimeout>
 800bce2:	4603      	mov	r3, r0
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d005      	beq.n	800bcf4 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2220      	movs	r2, #32
 800bcec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	e006      	b.n	800bd02 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	2220      	movs	r2, #32
 800bcf8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	e000      	b.n	800bd02 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800bd00:	2302      	movs	r3, #2
  }
}
 800bd02:	4618      	mov	r0, r3
 800bd04:	3720      	adds	r7, #32
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
	...

0800bd0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bd0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd10:	b094      	sub	sp, #80	@ 0x50
 800bd12:	af00      	add	r7, sp, #0
 800bd14:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd16:	2300      	movs	r3, #0
 800bd18:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd1e:	681a      	ldr	r2, [r3, #0]
 800bd20:	4b78      	ldr	r3, [pc, #480]	@ (800bf04 <UART_SetConfig+0x1f8>)
 800bd22:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bd24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd26:	689a      	ldr	r2, [r3, #8]
 800bd28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd2a:	691b      	ldr	r3, [r3, #16]
 800bd2c:	431a      	orrs	r2, r3
 800bd2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd30:	695b      	ldr	r3, [r3, #20]
 800bd32:	431a      	orrs	r2, r3
 800bd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd36:	69db      	ldr	r3, [r3, #28]
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4971      	ldr	r1, [pc, #452]	@ (800bf08 <UART_SetConfig+0x1fc>)
 800bd44:	4019      	ands	r1, r3
 800bd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd48:	681a      	ldr	r2, [r3, #0]
 800bd4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd4c:	430b      	orrs	r3, r1
 800bd4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bd50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800bd5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd5c:	68d9      	ldr	r1, [r3, #12]
 800bd5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	ea40 0301 	orr.w	r3, r0, r1
 800bd66:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd6a:	699b      	ldr	r3, [r3, #24]
 800bd6c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	4b64      	ldr	r3, [pc, #400]	@ (800bf04 <UART_SetConfig+0x1f8>)
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d009      	beq.n	800bd8c <UART_SetConfig+0x80>
 800bd78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd7a:	681a      	ldr	r2, [r3, #0]
 800bd7c:	4b63      	ldr	r3, [pc, #396]	@ (800bf0c <UART_SetConfig+0x200>)
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d004      	beq.n	800bd8c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd84:	6a1a      	ldr	r2, [r3, #32]
 800bd86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 800bd96:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 800bd9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bda0:	430b      	orrs	r3, r1
 800bda2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bda4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdaa:	f023 000f 	bic.w	r0, r3, #15
 800bdae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bdb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	ea40 0301 	orr.w	r3, r0, r1
 800bdba:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bdbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdbe:	681a      	ldr	r2, [r3, #0]
 800bdc0:	4b53      	ldr	r3, [pc, #332]	@ (800bf10 <UART_SetConfig+0x204>)
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d102      	bne.n	800bdcc <UART_SetConfig+0xc0>
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdca:	e066      	b.n	800be9a <UART_SetConfig+0x18e>
 800bdcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdce:	681a      	ldr	r2, [r3, #0]
 800bdd0:	4b50      	ldr	r3, [pc, #320]	@ (800bf14 <UART_SetConfig+0x208>)
 800bdd2:	429a      	cmp	r2, r3
 800bdd4:	d102      	bne.n	800bddc <UART_SetConfig+0xd0>
 800bdd6:	2302      	movs	r3, #2
 800bdd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdda:	e05e      	b.n	800be9a <UART_SetConfig+0x18e>
 800bddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	4b4d      	ldr	r3, [pc, #308]	@ (800bf18 <UART_SetConfig+0x20c>)
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d102      	bne.n	800bdec <UART_SetConfig+0xe0>
 800bde6:	2304      	movs	r3, #4
 800bde8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdea:	e056      	b.n	800be9a <UART_SetConfig+0x18e>
 800bdec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	4b4a      	ldr	r3, [pc, #296]	@ (800bf1c <UART_SetConfig+0x210>)
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d102      	bne.n	800bdfc <UART_SetConfig+0xf0>
 800bdf6:	2308      	movs	r3, #8
 800bdf8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bdfa:	e04e      	b.n	800be9a <UART_SetConfig+0x18e>
 800bdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	4b47      	ldr	r3, [pc, #284]	@ (800bf20 <UART_SetConfig+0x214>)
 800be02:	429a      	cmp	r2, r3
 800be04:	d102      	bne.n	800be0c <UART_SetConfig+0x100>
 800be06:	2310      	movs	r3, #16
 800be08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be0a:	e046      	b.n	800be9a <UART_SetConfig+0x18e>
 800be0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	4b44      	ldr	r3, [pc, #272]	@ (800bf24 <UART_SetConfig+0x218>)
 800be12:	429a      	cmp	r2, r3
 800be14:	d102      	bne.n	800be1c <UART_SetConfig+0x110>
 800be16:	2320      	movs	r3, #32
 800be18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be1a:	e03e      	b.n	800be9a <UART_SetConfig+0x18e>
 800be1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	4b41      	ldr	r3, [pc, #260]	@ (800bf28 <UART_SetConfig+0x21c>)
 800be22:	429a      	cmp	r2, r3
 800be24:	d102      	bne.n	800be2c <UART_SetConfig+0x120>
 800be26:	2340      	movs	r3, #64	@ 0x40
 800be28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be2a:	e036      	b.n	800be9a <UART_SetConfig+0x18e>
 800be2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	4b3e      	ldr	r3, [pc, #248]	@ (800bf2c <UART_SetConfig+0x220>)
 800be32:	429a      	cmp	r2, r3
 800be34:	d102      	bne.n	800be3c <UART_SetConfig+0x130>
 800be36:	2380      	movs	r3, #128	@ 0x80
 800be38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be3a:	e02e      	b.n	800be9a <UART_SetConfig+0x18e>
 800be3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be3e:	681a      	ldr	r2, [r3, #0]
 800be40:	4b3b      	ldr	r3, [pc, #236]	@ (800bf30 <UART_SetConfig+0x224>)
 800be42:	429a      	cmp	r2, r3
 800be44:	d103      	bne.n	800be4e <UART_SetConfig+0x142>
 800be46:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800be4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be4c:	e025      	b.n	800be9a <UART_SetConfig+0x18e>
 800be4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be50:	681a      	ldr	r2, [r3, #0]
 800be52:	4b38      	ldr	r3, [pc, #224]	@ (800bf34 <UART_SetConfig+0x228>)
 800be54:	429a      	cmp	r2, r3
 800be56:	d103      	bne.n	800be60 <UART_SetConfig+0x154>
 800be58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be5e:	e01c      	b.n	800be9a <UART_SetConfig+0x18e>
 800be60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	4b34      	ldr	r3, [pc, #208]	@ (800bf38 <UART_SetConfig+0x22c>)
 800be66:	429a      	cmp	r2, r3
 800be68:	d103      	bne.n	800be72 <UART_SetConfig+0x166>
 800be6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be70:	e013      	b.n	800be9a <UART_SetConfig+0x18e>
 800be72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	4b31      	ldr	r3, [pc, #196]	@ (800bf3c <UART_SetConfig+0x230>)
 800be78:	429a      	cmp	r2, r3
 800be7a:	d103      	bne.n	800be84 <UART_SetConfig+0x178>
 800be7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800be80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be82:	e00a      	b.n	800be9a <UART_SetConfig+0x18e>
 800be84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	4b1e      	ldr	r3, [pc, #120]	@ (800bf04 <UART_SetConfig+0x1f8>)
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d103      	bne.n	800be96 <UART_SetConfig+0x18a>
 800be8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800be92:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be94:	e001      	b.n	800be9a <UART_SetConfig+0x18e>
 800be96:	2300      	movs	r3, #0
 800be98:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800be9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	4b19      	ldr	r3, [pc, #100]	@ (800bf04 <UART_SetConfig+0x1f8>)
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d005      	beq.n	800beb0 <UART_SetConfig+0x1a4>
 800bea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	4b18      	ldr	r3, [pc, #96]	@ (800bf0c <UART_SetConfig+0x200>)
 800beaa:	429a      	cmp	r2, r3
 800beac:	f040 8094 	bne.w	800bfd8 <UART_SetConfig+0x2cc>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800beb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800beb2:	2200      	movs	r2, #0
 800beb4:	623b      	str	r3, [r7, #32]
 800beb6:	627a      	str	r2, [r7, #36]	@ 0x24
 800beb8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bebc:	f7fc fbea 	bl	8008694 <HAL_RCCEx_GetPeriphCLKFreq>
 800bec0:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	f000 80f7 	beq.w	800c0b8 <UART_SetConfig+0x3ac>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800beca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800becc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bece:	4a1c      	ldr	r2, [pc, #112]	@ (800bf40 <UART_SetConfig+0x234>)
 800bed0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bed4:	461a      	mov	r2, r3
 800bed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bed8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bedc:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee0:	685a      	ldr	r2, [r3, #4]
 800bee2:	4613      	mov	r3, r2
 800bee4:	005b      	lsls	r3, r3, #1
 800bee6:	4413      	add	r3, r2
 800bee8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800beea:	429a      	cmp	r2, r3
 800beec:	d305      	bcc.n	800befa <UART_SetConfig+0x1ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800beee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d924      	bls.n	800bf44 <UART_SetConfig+0x238>
      {
        ret = HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800bf00:	e069      	b.n	800bfd6 <UART_SetConfig+0x2ca>
 800bf02:	bf00      	nop
 800bf04:	44002400 	.word	0x44002400
 800bf08:	cfff69f3 	.word	0xcfff69f3
 800bf0c:	54002400 	.word	0x54002400
 800bf10:	40013800 	.word	0x40013800
 800bf14:	40004400 	.word	0x40004400
 800bf18:	40004800 	.word	0x40004800
 800bf1c:	40004c00 	.word	0x40004c00
 800bf20:	40005000 	.word	0x40005000
 800bf24:	40006400 	.word	0x40006400
 800bf28:	40007800 	.word	0x40007800
 800bf2c:	40007c00 	.word	0x40007c00
 800bf30:	40008000 	.word	0x40008000
 800bf34:	40006800 	.word	0x40006800
 800bf38:	40006c00 	.word	0x40006c00
 800bf3c:	40008400 	.word	0x40008400
 800bf40:	08012b04 	.word	0x08012b04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bf46:	2200      	movs	r2, #0
 800bf48:	61bb      	str	r3, [r7, #24]
 800bf4a:	61fa      	str	r2, [r7, #28]
 800bf4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf50:	4a64      	ldr	r2, [pc, #400]	@ (800c0e4 <UART_SetConfig+0x3d8>)
 800bf52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	2200      	movs	r2, #0
 800bf5a:	613b      	str	r3, [r7, #16]
 800bf5c:	617a      	str	r2, [r7, #20]
 800bf5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bf62:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bf66:	f7f4 f991 	bl	800028c <__aeabi_uldivmod>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	4610      	mov	r0, r2
 800bf70:	4619      	mov	r1, r3
 800bf72:	f04f 0200 	mov.w	r2, #0
 800bf76:	f04f 0300 	mov.w	r3, #0
 800bf7a:	020b      	lsls	r3, r1, #8
 800bf7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf80:	0202      	lsls	r2, r0, #8
 800bf82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf84:	6849      	ldr	r1, [r1, #4]
 800bf86:	0849      	lsrs	r1, r1, #1
 800bf88:	2000      	movs	r0, #0
 800bf8a:	460c      	mov	r4, r1
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	eb12 0804 	adds.w	r8, r2, r4
 800bf92:	eb43 0905 	adc.w	r9, r3, r5
 800bf96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	60bb      	str	r3, [r7, #8]
 800bf9e:	60fa      	str	r2, [r7, #12]
 800bfa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bfa4:	4640      	mov	r0, r8
 800bfa6:	4649      	mov	r1, r9
 800bfa8:	f7f4 f970 	bl	800028c <__aeabi_uldivmod>
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	4613      	mov	r3, r2
 800bfb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bfb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bfba:	d308      	bcc.n	800bfce <UART_SetConfig+0x2c2>
 800bfbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfbe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bfc2:	d204      	bcs.n	800bfce <UART_SetConfig+0x2c2>
        {
          huart->Instance->BRR = usartdiv;
 800bfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800bfca:	60da      	str	r2, [r3, #12]
 800bfcc:	e003      	b.n	800bfd6 <UART_SetConfig+0x2ca>
        }
        else
        {
          ret = HAL_ERROR;
 800bfce:	2301      	movs	r3, #1
 800bfd0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 800bfd4:	e070      	b.n	800c0b8 <UART_SetConfig+0x3ac>
 800bfd6:	e06f      	b.n	800c0b8 <UART_SetConfig+0x3ac>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfda:	69db      	ldr	r3, [r3, #28]
 800bfdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bfe0:	d13c      	bne.n	800c05c <UART_SetConfig+0x350>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bfe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	603b      	str	r3, [r7, #0]
 800bfe8:	607a      	str	r2, [r7, #4]
 800bfea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bfee:	f7fc fb51 	bl	8008694 <HAL_RCCEx_GetPeriphCLKFreq>
 800bff2:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d05e      	beq.n	800c0b8 <UART_SetConfig+0x3ac>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bffa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bffe:	4a39      	ldr	r2, [pc, #228]	@ (800c0e4 <UART_SetConfig+0x3d8>)
 800c000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c004:	461a      	mov	r2, r3
 800c006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c008:	fbb3 f3f2 	udiv	r3, r3, r2
 800c00c:	005a      	lsls	r2, r3, #1
 800c00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	085b      	lsrs	r3, r3, #1
 800c014:	441a      	add	r2, r3
 800c016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c01e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c022:	2b0f      	cmp	r3, #15
 800c024:	d916      	bls.n	800c054 <UART_SetConfig+0x348>
 800c026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c02c:	d212      	bcs.n	800c054 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c02e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c030:	b29b      	uxth	r3, r3
 800c032:	f023 030f 	bic.w	r3, r3, #15
 800c036:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c038:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c03a:	085b      	lsrs	r3, r3, #1
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	f003 0307 	and.w	r3, r3, #7
 800c042:	b29a      	uxth	r2, r3
 800c044:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c046:	4313      	orrs	r3, r2
 800c048:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 800c04a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800c050:	60da      	str	r2, [r3, #12]
 800c052:	e031      	b.n	800c0b8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c05a:	e02d      	b.n	800c0b8 <UART_SetConfig+0x3ac>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800c05c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c05e:	2200      	movs	r2, #0
 800c060:	469a      	mov	sl, r3
 800c062:	4693      	mov	fp, r2
 800c064:	4650      	mov	r0, sl
 800c066:	4659      	mov	r1, fp
 800c068:	f7fc fb14 	bl	8008694 <HAL_RCCEx_GetPeriphCLKFreq>
 800c06c:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800c06e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c070:	2b00      	cmp	r3, #0
 800c072:	d021      	beq.n	800c0b8 <UART_SetConfig+0x3ac>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c078:	4a1a      	ldr	r2, [pc, #104]	@ (800c0e4 <UART_SetConfig+0x3d8>)
 800c07a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c07e:	461a      	mov	r2, r3
 800c080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c082:	fbb3 f2f2 	udiv	r2, r3, r2
 800c086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	085b      	lsrs	r3, r3, #1
 800c08c:	441a      	add	r2, r3
 800c08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	fbb2 f3f3 	udiv	r3, r2, r3
 800c096:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c09a:	2b0f      	cmp	r3, #15
 800c09c:	d909      	bls.n	800c0b2 <UART_SetConfig+0x3a6>
 800c09e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c0a4:	d205      	bcs.n	800c0b2 <UART_SetConfig+0x3a6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c0a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	60da      	str	r2, [r3, #12]
 800c0b0:	e002      	b.n	800c0b8 <UART_SetConfig+0x3ac>
      }
      else
      {
        ret = HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c0c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0c2:	2201      	movs	r2, #1
 800c0c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c0c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c0ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c0d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3750      	adds	r7, #80	@ 0x50
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0e2:	bf00      	nop
 800c0e4:	08012b04 	.word	0x08012b04

0800c0e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0f4:	f003 0308 	and.w	r3, r3, #8
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d00a      	beq.n	800c112 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	430a      	orrs	r2, r1
 800c110:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c116:	f003 0301 	and.w	r3, r3, #1
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00a      	beq.n	800c134 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	430a      	orrs	r2, r1
 800c132:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c138:	f003 0302 	and.w	r3, r3, #2
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d00a      	beq.n	800c156 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	430a      	orrs	r2, r1
 800c154:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c15a:	f003 0304 	and.w	r3, r3, #4
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00a      	beq.n	800c178 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	430a      	orrs	r2, r1
 800c176:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c17c:	f003 0310 	and.w	r3, r3, #16
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00a      	beq.n	800c19a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	689b      	ldr	r3, [r3, #8]
 800c18a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	430a      	orrs	r2, r1
 800c198:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c19e:	f003 0320 	and.w	r3, r3, #32
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00a      	beq.n	800c1bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	430a      	orrs	r2, r1
 800c1ba:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d01a      	beq.n	800c1fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	430a      	orrs	r2, r1
 800c1dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c1e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1e6:	d10a      	bne.n	800c1fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	430a      	orrs	r2, r1
 800c1fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00a      	beq.n	800c220 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	430a      	orrs	r2, r1
 800c21e:	605a      	str	r2, [r3, #4]
  }
}
 800c220:	bf00      	nop
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b098      	sub	sp, #96	@ 0x60
 800c230:	af02      	add	r7, sp, #8
 800c232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c23c:	f7f6 fca8 	bl	8002b90 <HAL_GetTick>
 800c240:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f003 0308 	and.w	r3, r3, #8
 800c24c:	2b08      	cmp	r3, #8
 800c24e:	d12f      	bne.n	800c2b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c250:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c254:	9300      	str	r3, [sp, #0]
 800c256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c258:	2200      	movs	r2, #0
 800c25a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f000 f88e 	bl	800c380 <UART_WaitOnFlagUntilTimeout>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d022      	beq.n	800c2b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c272:	e853 3f00 	ldrex	r3, [r3]
 800c276:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c27a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c27e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	461a      	mov	r2, r3
 800c286:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c288:	647b      	str	r3, [r7, #68]	@ 0x44
 800c28a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c28c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c28e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c290:	e841 2300 	strex	r3, r2, [r1]
 800c294:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1e6      	bne.n	800c26a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2220      	movs	r2, #32
 800c2a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	e063      	b.n	800c378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 0304 	and.w	r3, r3, #4
 800c2ba:	2b04      	cmp	r3, #4
 800c2bc:	d149      	bne.n	800c352 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c2be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c2c2:	9300      	str	r3, [sp, #0]
 800c2c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2c6:	2200      	movs	r2, #0
 800c2c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 f857 	bl	800c380 <UART_WaitOnFlagUntilTimeout>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d03c      	beq.n	800c352 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e0:	e853 3f00 	ldrex	r3, [r3]
 800c2e4:	623b      	str	r3, [r7, #32]
   return(result);
 800c2e6:	6a3b      	ldr	r3, [r7, #32]
 800c2e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c2f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c2fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2fe:	e841 2300 	strex	r3, r2, [r1]
 800c302:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c306:	2b00      	cmp	r3, #0
 800c308:	d1e6      	bne.n	800c2d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3308      	adds	r3, #8
 800c310:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c312:	693b      	ldr	r3, [r7, #16]
 800c314:	e853 3f00 	ldrex	r3, [r3]
 800c318:	60fb      	str	r3, [r7, #12]
   return(result);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	f023 0301 	bic.w	r3, r3, #1
 800c320:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3308      	adds	r3, #8
 800c328:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c32a:	61fa      	str	r2, [r7, #28]
 800c32c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32e:	69b9      	ldr	r1, [r7, #24]
 800c330:	69fa      	ldr	r2, [r7, #28]
 800c332:	e841 2300 	strex	r3, r2, [r1]
 800c336:	617b      	str	r3, [r7, #20]
   return(result);
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d1e5      	bne.n	800c30a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	2220      	movs	r2, #32
 800c342:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2200      	movs	r2, #0
 800c34a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c34e:	2303      	movs	r3, #3
 800c350:	e012      	b.n	800c378 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	2220      	movs	r2, #32
 800c356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	2220      	movs	r2, #32
 800c35e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2200      	movs	r2, #0
 800c366:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2200      	movs	r2, #0
 800c372:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c376:	2300      	movs	r3, #0
}
 800c378:	4618      	mov	r0, r3
 800c37a:	3758      	adds	r7, #88	@ 0x58
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b084      	sub	sp, #16
 800c384:	af00      	add	r7, sp, #0
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	603b      	str	r3, [r7, #0]
 800c38c:	4613      	mov	r3, r2
 800c38e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c390:	e04f      	b.n	800c432 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c398:	d04b      	beq.n	800c432 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c39a:	f7f6 fbf9 	bl	8002b90 <HAL_GetTick>
 800c39e:	4602      	mov	r2, r0
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	1ad3      	subs	r3, r2, r3
 800c3a4:	69ba      	ldr	r2, [r7, #24]
 800c3a6:	429a      	cmp	r2, r3
 800c3a8:	d302      	bcc.n	800c3b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c3aa:	69bb      	ldr	r3, [r7, #24]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d101      	bne.n	800c3b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c3b0:	2303      	movs	r3, #3
 800c3b2:	e04e      	b.n	800c452 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	f003 0304 	and.w	r3, r3, #4
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d037      	beq.n	800c432 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	2b80      	cmp	r3, #128	@ 0x80
 800c3c6:	d034      	beq.n	800c432 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	2b40      	cmp	r3, #64	@ 0x40
 800c3cc:	d031      	beq.n	800c432 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	69db      	ldr	r3, [r3, #28]
 800c3d4:	f003 0308 	and.w	r3, r3, #8
 800c3d8:	2b08      	cmp	r3, #8
 800c3da:	d110      	bne.n	800c3fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2208      	movs	r2, #8
 800c3e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c3e4:	68f8      	ldr	r0, [r7, #12]
 800c3e6:	f000 f838 	bl	800c45a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2208      	movs	r2, #8
 800c3ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e029      	b.n	800c452 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	69db      	ldr	r3, [r3, #28]
 800c404:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c408:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c40c:	d111      	bne.n	800c432 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c418:	68f8      	ldr	r0, [r7, #12]
 800c41a:	f000 f81e 	bl	800c45a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2220      	movs	r2, #32
 800c422:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2200      	movs	r2, #0
 800c42a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c42e:	2303      	movs	r3, #3
 800c430:	e00f      	b.n	800c452 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	69da      	ldr	r2, [r3, #28]
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	4013      	ands	r3, r2
 800c43c:	68ba      	ldr	r2, [r7, #8]
 800c43e:	429a      	cmp	r2, r3
 800c440:	bf0c      	ite	eq
 800c442:	2301      	moveq	r3, #1
 800c444:	2300      	movne	r3, #0
 800c446:	b2db      	uxtb	r3, r3
 800c448:	461a      	mov	r2, r3
 800c44a:	79fb      	ldrb	r3, [r7, #7]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d0a0      	beq.n	800c392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c450:	2300      	movs	r3, #0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b095      	sub	sp, #84	@ 0x54
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c46a:	e853 3f00 	ldrex	r3, [r3]
 800c46e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	461a      	mov	r2, r3
 800c47e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c480:	643b      	str	r3, [r7, #64]	@ 0x40
 800c482:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c484:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c486:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c488:	e841 2300 	strex	r3, r2, [r1]
 800c48c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1e6      	bne.n	800c462 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	3308      	adds	r3, #8
 800c49a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49c:	6a3b      	ldr	r3, [r7, #32]
 800c49e:	e853 3f00 	ldrex	r3, [r3]
 800c4a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c4aa:	f023 0301 	bic.w	r3, r3, #1
 800c4ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	3308      	adds	r3, #8
 800c4b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c4b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c4ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c4be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4c0:	e841 2300 	strex	r3, r2, [r1]
 800c4c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d1e3      	bne.n	800c494 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c4d0:	2b01      	cmp	r3, #1
 800c4d2:	d118      	bne.n	800c506 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	e853 3f00 	ldrex	r3, [r3]
 800c4e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	f023 0310 	bic.w	r3, r3, #16
 800c4e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4f2:	61bb      	str	r3, [r7, #24]
 800c4f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f6:	6979      	ldr	r1, [r7, #20]
 800c4f8:	69ba      	ldr	r2, [r7, #24]
 800c4fa:	e841 2300 	strex	r3, r2, [r1]
 800c4fe:	613b      	str	r3, [r7, #16]
   return(result);
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1e6      	bne.n	800c4d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2220      	movs	r2, #32
 800c50a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c51a:	bf00      	nop
 800c51c:	3754      	adds	r7, #84	@ 0x54
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c526:	b480      	push	{r7}
 800c528:	b085      	sub	sp, #20
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c534:	2b01      	cmp	r3, #1
 800c536:	d101      	bne.n	800c53c <HAL_UARTEx_DisableFifoMode+0x16>
 800c538:	2302      	movs	r3, #2
 800c53a:	e027      	b.n	800c58c <HAL_UARTEx_DisableFifoMode+0x66>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2201      	movs	r2, #1
 800c540:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2224      	movs	r2, #36	@ 0x24
 800c548:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f022 0201 	bic.w	r2, r2, #1
 800c562:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c56a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2200      	movs	r2, #0
 800c570:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	68fa      	ldr	r2, [r7, #12]
 800c578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2220      	movs	r2, #32
 800c57e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3714      	adds	r7, #20
 800c590:	46bd      	mov	sp, r7
 800c592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c596:	4770      	bx	lr

0800c598 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c5a8:	2b01      	cmp	r3, #1
 800c5aa:	d101      	bne.n	800c5b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c5ac:	2302      	movs	r3, #2
 800c5ae:	e02d      	b.n	800c60c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	2224      	movs	r2, #36	@ 0x24
 800c5bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	681a      	ldr	r2, [r3, #0]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f022 0201 	bic.w	r2, r2, #1
 800c5d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	689b      	ldr	r3, [r3, #8]
 800c5de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	683a      	ldr	r2, [r7, #0]
 800c5e8:	430a      	orrs	r2, r1
 800c5ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 f84f 	bl	800c690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	68fa      	ldr	r2, [r7, #12]
 800c5f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2220      	movs	r2, #32
 800c5fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	2200      	movs	r2, #0
 800c606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3710      	adds	r7, #16
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c624:	2b01      	cmp	r3, #1
 800c626:	d101      	bne.n	800c62c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c628:	2302      	movs	r3, #2
 800c62a:	e02d      	b.n	800c688 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2201      	movs	r2, #1
 800c630:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2224      	movs	r2, #36	@ 0x24
 800c638:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	681a      	ldr	r2, [r3, #0]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f022 0201 	bic.w	r2, r2, #1
 800c652:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	683a      	ldr	r2, [r7, #0]
 800c664:	430a      	orrs	r2, r1
 800c666:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f811 	bl	800c690 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	68fa      	ldr	r2, [r7, #12]
 800c674:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2220      	movs	r2, #32
 800c67a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2200      	movs	r2, #0
 800c682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c686:	2300      	movs	r3, #0
}
 800c688:	4618      	mov	r0, r3
 800c68a:	3710      	adds	r7, #16
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c690:	b480      	push	{r7}
 800c692:	b085      	sub	sp, #20
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d108      	bne.n	800c6b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c6b0:	e031      	b.n	800c716 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c6b2:	2308      	movs	r3, #8
 800c6b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c6b6:	2308      	movs	r3, #8
 800c6b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	0e5b      	lsrs	r3, r3, #25
 800c6c2:	b2db      	uxtb	r3, r3
 800c6c4:	f003 0307 	and.w	r3, r3, #7
 800c6c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	689b      	ldr	r3, [r3, #8]
 800c6d0:	0f5b      	lsrs	r3, r3, #29
 800c6d2:	b2db      	uxtb	r3, r3
 800c6d4:	f003 0307 	and.w	r3, r3, #7
 800c6d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6da:	7bbb      	ldrb	r3, [r7, #14]
 800c6dc:	7b3a      	ldrb	r2, [r7, #12]
 800c6de:	4911      	ldr	r1, [pc, #68]	@ (800c724 <UARTEx_SetNbDataToProcess+0x94>)
 800c6e0:	5c8a      	ldrb	r2, [r1, r2]
 800c6e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c6e6:	7b3a      	ldrb	r2, [r7, #12]
 800c6e8:	490f      	ldr	r1, [pc, #60]	@ (800c728 <UARTEx_SetNbDataToProcess+0x98>)
 800c6ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c6ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6f0:	b29a      	uxth	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
 800c6fa:	7b7a      	ldrb	r2, [r7, #13]
 800c6fc:	4909      	ldr	r1, [pc, #36]	@ (800c724 <UARTEx_SetNbDataToProcess+0x94>)
 800c6fe:	5c8a      	ldrb	r2, [r1, r2]
 800c700:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c704:	7b7a      	ldrb	r2, [r7, #13]
 800c706:	4908      	ldr	r1, [pc, #32]	@ (800c728 <UARTEx_SetNbDataToProcess+0x98>)
 800c708:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c70a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c70e:	b29a      	uxth	r2, r3
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c716:	bf00      	nop
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	08012b1c 	.word	0x08012b1c
 800c728:	08012b24 	.word	0x08012b24

0800c72c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 800c72c:	b480      	push	{r7}
 800c72e:	b083      	sub	sp, #12
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c738:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c744:	f043 0201 	orr.w	r2, r3, #1
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c74c:	2300      	movs	r3, #0
}
 800c74e:	4618      	mov	r0, r3
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c75a:	b084      	sub	sp, #16
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	f107 001c 	add.w	r0, r7, #28
 800c768:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d101      	bne.n	800c776 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 800c772:	2301      	movs	r3, #1
 800c774:	e008      	b.n	800c788 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f7ff ffd8 	bl	800c72c <USB_CoreReset>
 800c77c:	4603      	mov	r3, r0
 800c77e:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800c786:	7bfb      	ldrb	r3, [r7, #15]
}
 800c788:	4618      	mov	r0, r3
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c792:	b004      	add	sp, #16
 800c794:	4770      	bx	lr

0800c796 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800c796:	b480      	push	{r7}
 800c798:	b085      	sub	sp, #20
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c7a4:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c7a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3714      	adds	r7, #20
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800c7be:	b480      	push	{r7}
 800c7c0:	b085      	sub	sp, #20
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c7c6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c7ca:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	43db      	mvns	r3, r3
 800c7d4:	401a      	ands	r2, r3
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3714      	adds	r7, #20
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e6:	4770      	bx	lr

0800c7e8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800c7e8:	b480      	push	{r7}
 800c7ea:	b083      	sub	sp, #12
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 800c7f4:	78fb      	ldrb	r3, [r7, #3]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d106      	bne.n	800c808 <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	641a      	str	r2, [r3, #64]	@ 0x40
 800c806:	e00b      	b.n	800c820 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800c808:	78fb      	ldrb	r3, [r7, #3]
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d106      	bne.n	800c81c <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c812:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	641a      	str	r2, [r3, #64]	@ 0x40
 800c81a:	e001      	b.n	800c820 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	e000      	b.n	800c822 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	370c      	adds	r7, #12
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr

0800c82e <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c82e:	b084      	sub	sp, #16
 800c830:	b580      	push	{r7, lr}
 800c832:	b084      	sub	sp, #16
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	f107 001c 	add.w	r0, r7, #28
 800c83c:	e880 000e 	stmia.w	r0, {r1, r2, r3}

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c84a:	f023 0201 	bic.w	r2, r3, #1
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800c852:	2100      	movs	r1, #0
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7ff ffc7 	bl	800c7e8 <USB_SetCurrentMode>
 800c85a:	4603      	mov	r3, r0
 800c85c:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800c864:	7bfb      	ldrb	r3, [r7, #15]
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c870:	b004      	add	sp, #16
 800c872:	4770      	bx	lr

0800c874 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c874:	b480      	push	{r7}
 800c876:	b09f      	sub	sp, #124	@ 0x7c
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	4413      	add	r3, r2
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	4ba0      	ldr	r3, [pc, #640]	@ (800cb14 <USB_ActivateEndpoint+0x2a0>)
 800c892:	4013      	ands	r3, r2
 800c894:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	78db      	ldrb	r3, [r3, #3]
 800c89a:	2b03      	cmp	r3, #3
 800c89c:	d819      	bhi.n	800c8d2 <USB_ActivateEndpoint+0x5e>
 800c89e:	a201      	add	r2, pc, #4	@ (adr r2, 800c8a4 <USB_ActivateEndpoint+0x30>)
 800c8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8a4:	0800c8b5 	.word	0x0800c8b5
 800c8a8:	0800c8c9 	.word	0x0800c8c9
 800c8ac:	0800c8db 	.word	0x0800c8db
 800c8b0:	0800c8bf 	.word	0x0800c8bf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c8b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c8ba:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c8bc:	e00e      	b.n	800c8dc <USB_ActivateEndpoint+0x68>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c8be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8c0:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c8c4:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c8c6:	e009      	b.n	800c8dc <USB_ActivateEndpoint+0x68>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c8c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c8ce:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800c8d0:	e004      	b.n	800c8dc <USB_ActivateEndpoint+0x68>

    default:
      ret = HAL_ERROR;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
      break;
 800c8d8:	e000      	b.n	800c8dc <USB_ActivateEndpoint+0x68>
      break;
 800c8da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	009b      	lsls	r3, r3, #2
 800c8e4:	441a      	add	r2, r3
 800c8e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8f0:	6013      	str	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	4413      	add	r3, r2
 800c8fc:	681a      	ldr	r2, [r3, #0]
 800c8fe:	4b86      	ldr	r3, [pc, #536]	@ (800cb18 <USB_ActivateEndpoint+0x2a4>)
 800c900:	4013      	ands	r3, r2
 800c902:	683a      	ldr	r2, [r7, #0]
 800c904:	7812      	ldrb	r2, [r2, #0]
 800c906:	4313      	orrs	r3, r2
 800c908:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	009b      	lsls	r3, r3, #2
 800c912:	441a      	add	r2, r3
 800c914:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c91a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c91e:	6013      	str	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	7b1b      	ldrb	r3, [r3, #12]
 800c924:	2b00      	cmp	r3, #0
 800c926:	f040 8177 	bne.w	800cc18 <USB_ActivateEndpoint+0x3a4>
  {
    if (ep->is_in != 0U)
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	785b      	ldrb	r3, [r3, #1]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d079      	beq.n	800ca26 <USB_ActivateEndpoint+0x1b2>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	00db      	lsls	r3, r3, #3
 800c938:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c93c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	781b      	ldrb	r3, [r3, #0]
 800c946:	00db      	lsls	r3, r3, #3
 800c948:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c94c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c950:	0c12      	lsrs	r2, r2, #16
 800c952:	0412      	lsls	r2, r2, #16
 800c954:	601a      	str	r2, [r3, #0]
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	00db      	lsls	r3, r3, #3
 800c95c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c960:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c964:	6819      	ldr	r1, [r3, #0]
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	88db      	ldrh	r3, [r3, #6]
 800c96a:	089b      	lsrs	r3, r3, #2
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	009a      	lsls	r2, r3, #2
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	781b      	ldrb	r3, [r3, #0]
 800c974:	00db      	lsls	r3, r3, #3
 800c976:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c97a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800c97e:	430a      	orrs	r2, r1
 800c980:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	781b      	ldrb	r3, [r3, #0]
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4413      	add	r3, r2
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	61bb      	str	r3, [r7, #24]
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c996:	2b00      	cmp	r3, #0
 800c998:	d013      	beq.n	800c9c2 <USB_ActivateEndpoint+0x14e>
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	4413      	add	r3, r2
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	4b5c      	ldr	r3, [pc, #368]	@ (800cb18 <USB_ActivateEndpoint+0x2a4>)
 800c9a8:	4013      	ands	r3, r2
 800c9aa:	617b      	str	r3, [r7, #20]
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	441a      	add	r2, r3
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c9c0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	78db      	ldrb	r3, [r3, #3]
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d018      	beq.n	800c9fc <USB_ActivateEndpoint+0x188>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c9ca:	687a      	ldr	r2, [r7, #4]
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	009b      	lsls	r3, r3, #2
 800c9d2:	4413      	add	r3, r2
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	4b51      	ldr	r3, [pc, #324]	@ (800cb1c <USB_ActivateEndpoint+0x2a8>)
 800c9d8:	4013      	ands	r3, r2
 800c9da:	60fb      	str	r3, [r7, #12]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f083 0320 	eor.w	r3, r3, #32
 800c9e2:	60fb      	str	r3, [r7, #12]
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	441a      	add	r2, r3
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9f8:	6013      	str	r3, [r2, #0]
 800c9fa:	e28c      	b.n	800cf16 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c9fc:	687a      	ldr	r2, [r7, #4]
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	4413      	add	r3, r2
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	4b44      	ldr	r3, [pc, #272]	@ (800cb1c <USB_ActivateEndpoint+0x2a8>)
 800ca0a:	4013      	ands	r3, r2
 800ca0c:	613b      	str	r3, [r7, #16]
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	441a      	add	r2, r3
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca22:	6013      	str	r3, [r2, #0]
 800ca24:	e277      	b.n	800cf16 <USB_ActivateEndpoint+0x6a2>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	781b      	ldrb	r3, [r3, #0]
 800ca2a:	00db      	lsls	r3, r3, #3
 800ca2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca34:	685a      	ldr	r2, [r3, #4]
 800ca36:	683b      	ldr	r3, [r7, #0]
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca40:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca44:	0c12      	lsrs	r2, r2, #16
 800ca46:	0412      	lsls	r2, r2, #16
 800ca48:	605a      	str	r2, [r3, #4]
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	00db      	lsls	r3, r3, #3
 800ca50:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca54:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca58:	6859      	ldr	r1, [r3, #4]
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	88db      	ldrh	r3, [r3, #6]
 800ca5e:	089b      	lsrs	r3, r3, #2
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	009a      	lsls	r2, r3, #2
 800ca64:	683b      	ldr	r3, [r7, #0]
 800ca66:	781b      	ldrb	r3, [r3, #0]
 800ca68:	00db      	lsls	r3, r3, #3
 800ca6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca72:	430a      	orrs	r2, r1
 800ca74:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	781b      	ldrb	r3, [r3, #0]
 800ca7a:	00db      	lsls	r3, r3, #3
 800ca7c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca80:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca84:	685a      	ldr	r2, [r3, #4]
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	00db      	lsls	r3, r3, #3
 800ca8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ca90:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ca94:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800ca98:	605a      	str	r2, [r3, #4]
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	691b      	ldr	r3, [r3, #16]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d112      	bne.n	800cac8 <USB_ActivateEndpoint+0x254>
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	781b      	ldrb	r3, [r3, #0]
 800caa6:	00db      	lsls	r3, r3, #3
 800caa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cab0:	685a      	ldr	r2, [r3, #4]
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	00db      	lsls	r3, r3, #3
 800cab8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cabc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cac0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cac4:	605a      	str	r2, [r3, #4]
 800cac6:	e04d      	b.n	800cb64 <USB_ActivateEndpoint+0x2f0>
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	691b      	ldr	r3, [r3, #16]
 800cacc:	2b3e      	cmp	r3, #62	@ 0x3e
 800cace:	d827      	bhi.n	800cb20 <USB_ActivateEndpoint+0x2ac>
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	085b      	lsrs	r3, r3, #1
 800cad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	691b      	ldr	r3, [r3, #16]
 800cadc:	f003 0301 	and.w	r3, r3, #1
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <USB_ActivateEndpoint+0x276>
 800cae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cae6:	3301      	adds	r3, #1
 800cae8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	00db      	lsls	r3, r3, #3
 800caf0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800caf4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800caf8:	6859      	ldr	r1, [r3, #4]
 800cafa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cafc:	069a      	lsls	r2, r3, #26
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	781b      	ldrb	r3, [r3, #0]
 800cb02:	00db      	lsls	r3, r3, #3
 800cb04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb08:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb0c:	430a      	orrs	r2, r1
 800cb0e:	605a      	str	r2, [r3, #4]
 800cb10:	e028      	b.n	800cb64 <USB_ActivateEndpoint+0x2f0>
 800cb12:	bf00      	nop
 800cb14:	07ff898f 	.word	0x07ff898f
 800cb18:	07ff8f8f 	.word	0x07ff8f8f
 800cb1c:	07ff8fbf 	.word	0x07ff8fbf
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	691b      	ldr	r3, [r3, #16]
 800cb24:	095b      	lsrs	r3, r3, #5
 800cb26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	f003 031f 	and.w	r3, r3, #31
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d102      	bne.n	800cb3a <USB_ActivateEndpoint+0x2c6>
 800cb34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb36:	3b01      	subs	r3, #1
 800cb38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	781b      	ldrb	r3, [r3, #0]
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb48:	685a      	ldr	r2, [r3, #4]
 800cb4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb4c:	069b      	lsls	r3, r3, #26
 800cb4e:	431a      	orrs	r2, r3
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	00db      	lsls	r3, r3, #3
 800cb56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cb5a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cb5e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800cb62:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb64:	687a      	ldr	r2, [r7, #4]
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	4413      	add	r3, r2
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d013      	beq.n	800cba4 <USB_ActivateEndpoint+0x330>
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	009b      	lsls	r3, r3, #2
 800cb84:	4413      	add	r3, r2
 800cb86:	681a      	ldr	r2, [r3, #0]
 800cb88:	4b9c      	ldr	r3, [pc, #624]	@ (800cdfc <USB_ActivateEndpoint+0x588>)
 800cb8a:	4013      	ands	r3, r2
 800cb8c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	441a      	add	r2, r3
 800cb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb9a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cb9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cba2:	6013      	str	r3, [r2, #0]

      if (ep->num == 0U)
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d11c      	bne.n	800cbe6 <USB_ActivateEndpoint+0x372>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4413      	add	r3, r2
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	4b91      	ldr	r3, [pc, #580]	@ (800ce00 <USB_ActivateEndpoint+0x58c>)
 800cbba:	4013      	ands	r3, r2
 800cbbc:	61fb      	str	r3, [r7, #28]
 800cbbe:	69fb      	ldr	r3, [r7, #28]
 800cbc0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cbc4:	61fb      	str	r3, [r7, #28]
 800cbc6:	69fb      	ldr	r3, [r7, #28]
 800cbc8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cbcc:	61fb      	str	r3, [r7, #28]
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	009b      	lsls	r3, r3, #2
 800cbd6:	441a      	add	r2, r3
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbe2:	6013      	str	r3, [r2, #0]
 800cbe4:	e197      	b.n	800cf16 <USB_ActivateEndpoint+0x6a2>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	781b      	ldrb	r3, [r3, #0]
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	4413      	add	r3, r2
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	4b83      	ldr	r3, [pc, #524]	@ (800ce00 <USB_ActivateEndpoint+0x58c>)
 800cbf4:	4013      	ands	r3, r2
 800cbf6:	623b      	str	r3, [r7, #32]
 800cbf8:	6a3b      	ldr	r3, [r7, #32]
 800cbfa:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cbfe:	623b      	str	r3, [r7, #32]
 800cc00:	687a      	ldr	r2, [r7, #4]
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	441a      	add	r2, r3
 800cc0a:	6a3b      	ldr	r3, [r7, #32]
 800cc0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc14:	6013      	str	r3, [r2, #0]
 800cc16:	e17e      	b.n	800cf16 <USB_ActivateEndpoint+0x6a2>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	78db      	ldrb	r3, [r3, #3]
 800cc1c:	2b02      	cmp	r3, #2
 800cc1e:	d114      	bne.n	800cc4a <USB_ActivateEndpoint+0x3d6>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4413      	add	r3, r2
 800cc2a:	681a      	ldr	r2, [r3, #0]
 800cc2c:	4b73      	ldr	r3, [pc, #460]	@ (800cdfc <USB_ActivateEndpoint+0x588>)
 800cc2e:	4013      	ands	r3, r2
 800cc30:	663b      	str	r3, [r7, #96]	@ 0x60
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	441a      	add	r2, r3
 800cc3c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc3e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cc42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc46:	6013      	str	r3, [r2, #0]
 800cc48:	e013      	b.n	800cc72 <USB_ActivateEndpoint+0x3fe>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	4413      	add	r3, r2
 800cc54:	681a      	ldr	r2, [r3, #0]
 800cc56:	4b6b      	ldr	r3, [pc, #428]	@ (800ce04 <USB_ActivateEndpoint+0x590>)
 800cc58:	4013      	ands	r3, r2
 800cc5a:	667b      	str	r3, [r7, #100]	@ 0x64
 800cc5c:	687a      	ldr	r2, [r7, #4]
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	441a      	add	r2, r3
 800cc66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc70:	6013      	str	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800cc72:	683b      	ldr	r3, [r7, #0]
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	00db      	lsls	r3, r3, #3
 800cc78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc7c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	00db      	lsls	r3, r3, #3
 800cc88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cc8c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cc90:	0c12      	lsrs	r2, r2, #16
 800cc92:	0412      	lsls	r2, r2, #16
 800cc94:	601a      	str	r2, [r3, #0]
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	00db      	lsls	r3, r3, #3
 800cc9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cca0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cca4:	6819      	ldr	r1, [r3, #0]
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	891b      	ldrh	r3, [r3, #8]
 800ccaa:	089b      	lsrs	r3, r3, #2
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	009a      	lsls	r2, r3, #2
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	00db      	lsls	r3, r3, #3
 800ccb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccbe:	430a      	orrs	r2, r1
 800ccc0:	601a      	str	r2, [r3, #0]
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	00db      	lsls	r3, r3, #3
 800ccc8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cccc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccd0:	685a      	ldr	r2, [r3, #4]
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	781b      	ldrb	r3, [r3, #0]
 800ccd6:	00db      	lsls	r3, r3, #3
 800ccd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccdc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cce0:	0c12      	lsrs	r2, r2, #16
 800cce2:	0412      	lsls	r2, r2, #16
 800cce4:	605a      	str	r2, [r3, #4]
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	00db      	lsls	r3, r3, #3
 800ccec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ccf0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ccf4:	6859      	ldr	r1, [r3, #4]
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	895b      	ldrh	r3, [r3, #10]
 800ccfa:	089b      	lsrs	r3, r3, #2
 800ccfc:	b29b      	uxth	r3, r3
 800ccfe:	009a      	lsls	r2, r3, #2
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	00db      	lsls	r3, r3, #3
 800cd06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cd0a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800cd0e:	430a      	orrs	r2, r1
 800cd10:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	785b      	ldrb	r3, [r3, #1]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d178      	bne.n	800ce0c <USB_ActivateEndpoint+0x598>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cd1a:	687a      	ldr	r2, [r7, #4]
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4413      	add	r3, r2
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d013      	beq.n	800cd5a <USB_ActivateEndpoint+0x4e6>
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	009b      	lsls	r3, r3, #2
 800cd3a:	4413      	add	r3, r2
 800cd3c:	681a      	ldr	r2, [r3, #0]
 800cd3e:	4b2f      	ldr	r3, [pc, #188]	@ (800cdfc <USB_ActivateEndpoint+0x588>)
 800cd40:	4013      	ands	r3, r2
 800cd42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	441a      	add	r2, r3
 800cd4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cd54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd58:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd5a:	687a      	ldr	r2, [r7, #4]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	4413      	add	r3, r2
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d013      	beq.n	800cd9a <USB_ActivateEndpoint+0x526>
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	4413      	add	r3, r2
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	4b1f      	ldr	r3, [pc, #124]	@ (800cdfc <USB_ActivateEndpoint+0x588>)
 800cd80:	4013      	ands	r3, r2
 800cd82:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	441a      	add	r2, r3
 800cd8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cd98:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	4413      	add	r3, r2
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	4b16      	ldr	r3, [pc, #88]	@ (800ce00 <USB_ActivateEndpoint+0x58c>)
 800cda8:	4013      	ands	r3, r2
 800cdaa:	633b      	str	r3, [r7, #48]	@ 0x30
 800cdac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdae:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cdb2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cdb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdb6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cdba:	633b      	str	r3, [r7, #48]	@ 0x30
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	441a      	add	r2, r3
 800cdc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdd0:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	4413      	add	r3, r2
 800cddc:	681a      	ldr	r2, [r3, #0]
 800cdde:	4b0a      	ldr	r3, [pc, #40]	@ (800ce08 <USB_ActivateEndpoint+0x594>)
 800cde0:	4013      	ands	r3, r2
 800cde2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	781b      	ldrb	r3, [r3, #0]
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	441a      	add	r2, r3
 800cdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdf8:	6013      	str	r3, [r2, #0]
 800cdfa:	e08c      	b.n	800cf16 <USB_ActivateEndpoint+0x6a2>
 800cdfc:	07ff8f8f 	.word	0x07ff8f8f
 800ce00:	07ffbf8f 	.word	0x07ffbf8f
 800ce04:	07ff8e8f 	.word	0x07ff8e8f
 800ce08:	07ff8fbf 	.word	0x07ff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	009b      	lsls	r3, r3, #2
 800ce14:	4413      	add	r3, r2
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ce1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ce1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d013      	beq.n	800ce4c <USB_ActivateEndpoint+0x5d8>
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	009b      	lsls	r3, r3, #2
 800ce2c:	4413      	add	r3, r2
 800ce2e:	681a      	ldr	r2, [r3, #0]
 800ce30:	4b3d      	ldr	r3, [pc, #244]	@ (800cf28 <USB_ActivateEndpoint+0x6b4>)
 800ce32:	4013      	ands	r3, r2
 800ce34:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	683b      	ldr	r3, [r7, #0]
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	441a      	add	r2, r3
 800ce40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ce42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ce46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce4a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	781b      	ldrb	r3, [r3, #0]
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	4413      	add	r3, r2
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	657b      	str	r3, [r7, #84]	@ 0x54
 800ce5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d013      	beq.n	800ce8c <USB_ActivateEndpoint+0x618>
 800ce64:	687a      	ldr	r2, [r7, #4]
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	4413      	add	r3, r2
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	4b2d      	ldr	r3, [pc, #180]	@ (800cf28 <USB_ActivateEndpoint+0x6b4>)
 800ce72:	4013      	ands	r3, r2
 800ce74:	653b      	str	r3, [r7, #80]	@ 0x50
 800ce76:	687a      	ldr	r2, [r7, #4]
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	441a      	add	r2, r3
 800ce80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce86:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ce8a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	78db      	ldrb	r3, [r3, #3]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d018      	beq.n	800cec6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	4413      	add	r3, r2
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	4b22      	ldr	r3, [pc, #136]	@ (800cf2c <USB_ActivateEndpoint+0x6b8>)
 800cea2:	4013      	ands	r3, r2
 800cea4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cea8:	f083 0320 	eor.w	r3, r3, #32
 800ceac:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	441a      	add	r2, r3
 800ceb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ceba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cec2:	6013      	str	r3, [r2, #0]
 800cec4:	e013      	b.n	800ceee <USB_ActivateEndpoint+0x67a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4413      	add	r3, r2
 800ced0:	681a      	ldr	r2, [r3, #0]
 800ced2:	4b16      	ldr	r3, [pc, #88]	@ (800cf2c <USB_ActivateEndpoint+0x6b8>)
 800ced4:	4013      	ands	r3, r2
 800ced6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	441a      	add	r2, r3
 800cee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ceec:	6013      	str	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	009b      	lsls	r3, r3, #2
 800cef6:	4413      	add	r3, r2
 800cef8:	681a      	ldr	r2, [r3, #0]
 800cefa:	4b0d      	ldr	r3, [pc, #52]	@ (800cf30 <USB_ActivateEndpoint+0x6bc>)
 800cefc:	4013      	ands	r3, r2
 800cefe:	647b      	str	r3, [r7, #68]	@ 0x44
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	441a      	add	r2, r3
 800cf0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf14:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800cf16:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	377c      	adds	r7, #124	@ 0x7c
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
 800cf26:	bf00      	nop
 800cf28:	07ff8f8f 	.word	0x07ff8f8f
 800cf2c:	07ff8fbf 	.word	0x07ff8fbf
 800cf30:	07ffbf8f 	.word	0x07ffbf8f

0800cf34 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800cf34:	b480      	push	{r7}
 800cf36:	b097      	sub	sp, #92	@ 0x5c
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cf3e:	683b      	ldr	r3, [r7, #0]
 800cf40:	7b1b      	ldrb	r3, [r3, #12]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d16d      	bne.n	800d022 <USB_DeactivateEndpoint+0xee>
  {
    if (ep->is_in != 0U)
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	785b      	ldrb	r3, [r3, #1]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d034      	beq.n	800cfb8 <USB_DeactivateEndpoint+0x84>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf4e:	687a      	ldr	r2, [r7, #4]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4413      	add	r3, r2
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	613b      	str	r3, [r7, #16]
 800cf5c:	693b      	ldr	r3, [r7, #16]
 800cf5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d013      	beq.n	800cf8e <USB_DeactivateEndpoint+0x5a>
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	009b      	lsls	r3, r3, #2
 800cf6e:	4413      	add	r3, r2
 800cf70:	681a      	ldr	r2, [r3, #0]
 800cf72:	4b6d      	ldr	r3, [pc, #436]	@ (800d128 <USB_DeactivateEndpoint+0x1f4>)
 800cf74:	4013      	ands	r3, r2
 800cf76:	60fb      	str	r3, [r7, #12]
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	781b      	ldrb	r3, [r3, #0]
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	441a      	add	r2, r3
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf88:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cf8c:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cf8e:	687a      	ldr	r2, [r7, #4]
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4413      	add	r3, r2
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	4b64      	ldr	r3, [pc, #400]	@ (800d12c <USB_DeactivateEndpoint+0x1f8>)
 800cf9c:	4013      	ands	r3, r2
 800cf9e:	60bb      	str	r3, [r7, #8]
 800cfa0:	687a      	ldr	r2, [r7, #4]
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	441a      	add	r2, r3
 800cfaa:	68bb      	ldr	r3, [r7, #8]
 800cfac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfb4:	6013      	str	r3, [r2, #0]
 800cfb6:	e139      	b.n	800d22c <USB_DeactivateEndpoint+0x2f8>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	4413      	add	r3, r2
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	61fb      	str	r3, [r7, #28]
 800cfc6:	69fb      	ldr	r3, [r7, #28]
 800cfc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d013      	beq.n	800cff8 <USB_DeactivateEndpoint+0xc4>
 800cfd0:	687a      	ldr	r2, [r7, #4]
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	4413      	add	r3, r2
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	4b52      	ldr	r3, [pc, #328]	@ (800d128 <USB_DeactivateEndpoint+0x1f4>)
 800cfde:	4013      	ands	r3, r2
 800cfe0:	61bb      	str	r3, [r7, #24]
 800cfe2:	687a      	ldr	r2, [r7, #4]
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	441a      	add	r2, r3
 800cfec:	69bb      	ldr	r3, [r7, #24]
 800cfee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cff6:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4413      	add	r3, r2
 800d002:	681a      	ldr	r2, [r3, #0]
 800d004:	4b4a      	ldr	r3, [pc, #296]	@ (800d130 <USB_DeactivateEndpoint+0x1fc>)
 800d006:	4013      	ands	r3, r2
 800d008:	617b      	str	r3, [r7, #20]
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	441a      	add	r2, r3
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d01a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d01e:	6013      	str	r3, [r2, #0]
 800d020:	e104      	b.n	800d22c <USB_DeactivateEndpoint+0x2f8>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	785b      	ldrb	r3, [r3, #1]
 800d026:	2b00      	cmp	r3, #0
 800d028:	f040 8084 	bne.w	800d134 <USB_DeactivateEndpoint+0x200>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	4413      	add	r3, r2
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d03a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d03c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d013      	beq.n	800d06c <USB_DeactivateEndpoint+0x138>
 800d044:	687a      	ldr	r2, [r7, #4]
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	009b      	lsls	r3, r3, #2
 800d04c:	4413      	add	r3, r2
 800d04e:	681a      	ldr	r2, [r3, #0]
 800d050:	4b35      	ldr	r3, [pc, #212]	@ (800d128 <USB_DeactivateEndpoint+0x1f4>)
 800d052:	4013      	ands	r3, r2
 800d054:	637b      	str	r3, [r7, #52]	@ 0x34
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	781b      	ldrb	r3, [r3, #0]
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	441a      	add	r2, r3
 800d060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d062:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d06a:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	009b      	lsls	r3, r3, #2
 800d074:	4413      	add	r3, r2
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	633b      	str	r3, [r7, #48]	@ 0x30
 800d07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d07c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d080:	2b00      	cmp	r3, #0
 800d082:	d013      	beq.n	800d0ac <USB_DeactivateEndpoint+0x178>
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	781b      	ldrb	r3, [r3, #0]
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	4413      	add	r3, r2
 800d08e:	681a      	ldr	r2, [r3, #0]
 800d090:	4b25      	ldr	r3, [pc, #148]	@ (800d128 <USB_DeactivateEndpoint+0x1f4>)
 800d092:	4013      	ands	r3, r2
 800d094:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	009b      	lsls	r3, r3, #2
 800d09e:	441a      	add	r2, r3
 800d0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d0aa:	6013      	str	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	4413      	add	r3, r2
 800d0b6:	681a      	ldr	r2, [r3, #0]
 800d0b8:	4b1b      	ldr	r3, [pc, #108]	@ (800d128 <USB_DeactivateEndpoint+0x1f4>)
 800d0ba:	4013      	ands	r3, r2
 800d0bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	009b      	lsls	r3, r3, #2
 800d0c6:	441a      	add	r2, r3
 800d0c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0ce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d0d2:	6013      	str	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4413      	add	r3, r2
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	4b13      	ldr	r3, [pc, #76]	@ (800d130 <USB_DeactivateEndpoint+0x1fc>)
 800d0e2:	4013      	ands	r3, r2
 800d0e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0e6:	687a      	ldr	r2, [r7, #4]
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	441a      	add	r2, r3
 800d0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0fa:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	4413      	add	r3, r2
 800d106:	681a      	ldr	r2, [r3, #0]
 800d108:	4b08      	ldr	r3, [pc, #32]	@ (800d12c <USB_DeactivateEndpoint+0x1f8>)
 800d10a:	4013      	ands	r3, r2
 800d10c:	623b      	str	r3, [r7, #32]
 800d10e:	687a      	ldr	r2, [r7, #4]
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	781b      	ldrb	r3, [r3, #0]
 800d114:	009b      	lsls	r3, r3, #2
 800d116:	441a      	add	r2, r3
 800d118:	6a3b      	ldr	r3, [r7, #32]
 800d11a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d11e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d122:	6013      	str	r3, [r2, #0]
 800d124:	e082      	b.n	800d22c <USB_DeactivateEndpoint+0x2f8>
 800d126:	bf00      	nop
 800d128:	07ff8f8f 	.word	0x07ff8f8f
 800d12c:	07ff8fbf 	.word	0x07ff8fbf
 800d130:	07ffbf8f 	.word	0x07ffbf8f
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d134:	687a      	ldr	r2, [r7, #4]
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	4413      	add	r3, r2
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	657b      	str	r3, [r7, #84]	@ 0x54
 800d142:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d144:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d013      	beq.n	800d174 <USB_DeactivateEndpoint+0x240>
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	781b      	ldrb	r3, [r3, #0]
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	4413      	add	r3, r2
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	4b38      	ldr	r3, [pc, #224]	@ (800d23c <USB_DeactivateEndpoint+0x308>)
 800d15a:	4013      	ands	r3, r2
 800d15c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d15e:	687a      	ldr	r2, [r7, #4]
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	441a      	add	r2, r3
 800d168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d16a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d16e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d172:	6013      	str	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d174:	687a      	ldr	r2, [r7, #4]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	4413      	add	r3, r2
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d013      	beq.n	800d1b4 <USB_DeactivateEndpoint+0x280>
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	781b      	ldrb	r3, [r3, #0]
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	4413      	add	r3, r2
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	4b28      	ldr	r3, [pc, #160]	@ (800d23c <USB_DeactivateEndpoint+0x308>)
 800d19a:	4013      	ands	r3, r2
 800d19c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	441a      	add	r2, r3
 800d1a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d1b2:	6013      	str	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	4413      	add	r3, r2
 800d1be:	681a      	ldr	r2, [r3, #0]
 800d1c0:	4b1e      	ldr	r3, [pc, #120]	@ (800d23c <USB_DeactivateEndpoint+0x308>)
 800d1c2:	4013      	ands	r3, r2
 800d1c4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d1c6:	687a      	ldr	r2, [r7, #4]
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	781b      	ldrb	r3, [r3, #0]
 800d1cc:	009b      	lsls	r3, r3, #2
 800d1ce:	441a      	add	r2, r3
 800d1d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1da:	6013      	str	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	4413      	add	r3, r2
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	4b15      	ldr	r3, [pc, #84]	@ (800d240 <USB_DeactivateEndpoint+0x30c>)
 800d1ea:	4013      	ands	r3, r2
 800d1ec:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1ee:	687a      	ldr	r2, [r7, #4]
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	009b      	lsls	r3, r3, #2
 800d1f6:	441a      	add	r2, r3
 800d1f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d202:	6013      	str	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	009b      	lsls	r3, r3, #2
 800d20c:	4413      	add	r3, r2
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	4b0c      	ldr	r3, [pc, #48]	@ (800d244 <USB_DeactivateEndpoint+0x310>)
 800d212:	4013      	ands	r3, r2
 800d214:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	441a      	add	r2, r3
 800d220:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d22a:	6013      	str	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d22c:	2300      	movs	r3, #0
}
 800d22e:	4618      	mov	r0, r3
 800d230:	375c      	adds	r7, #92	@ 0x5c
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	07ff8f8f 	.word	0x07ff8f8f
 800d240:	07ff8fbf 	.word	0x07ff8fbf
 800d244:	07ffbf8f 	.word	0x07ffbf8f

0800d248 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b096      	sub	sp, #88	@ 0x58
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	785b      	ldrb	r3, [r3, #1]
 800d256:	2b01      	cmp	r3, #1
 800d258:	f040 84ed 	bne.w	800dc36 <USB_EPStartXfer+0x9ee>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	699a      	ldr	r2, [r3, #24]
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	691b      	ldr	r3, [r3, #16]
 800d264:	429a      	cmp	r2, r3
 800d266:	d903      	bls.n	800d270 <USB_EPStartXfer+0x28>
    {
      len = ep->maxpacket;
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	691b      	ldr	r3, [r3, #16]
 800d26c:	657b      	str	r3, [r7, #84]	@ 0x54
 800d26e:	e002      	b.n	800d276 <USB_EPStartXfer+0x2e>
    }
    else
    {
      len = ep->xfer_len;
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	699b      	ldr	r3, [r3, #24]
 800d274:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	7b1b      	ldrb	r3, [r3, #12]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d12e      	bne.n	800d2dc <USB_EPStartXfer+0x94>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	6959      	ldr	r1, [r3, #20]
 800d282:	683b      	ldr	r3, [r7, #0]
 800d284:	88da      	ldrh	r2, [r3, #6]
 800d286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d288:	b29b      	uxth	r3, r3
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f001 f963 	bl	800e556 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	00db      	lsls	r3, r3, #3
 800d296:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d29a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	00db      	lsls	r3, r3, #3
 800d2a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2ae:	b292      	uxth	r2, r2
 800d2b0:	601a      	str	r2, [r3, #0]
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	00db      	lsls	r3, r3, #3
 800d2b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2c0:	6819      	ldr	r1, [r3, #0]
 800d2c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2c4:	041a      	lsls	r2, r3, #16
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	00db      	lsls	r3, r3, #3
 800d2cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d2d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d2d4:	430a      	orrs	r2, r1
 800d2d6:	601a      	str	r2, [r3, #0]
 800d2d8:	f000 bc90 	b.w	800dbfc <USB_EPStartXfer+0x9b4>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	78db      	ldrb	r3, [r3, #3]
 800d2e0:	2b02      	cmp	r3, #2
 800d2e2:	f040 8332 	bne.w	800d94a <USB_EPStartXfer+0x702>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	6a1a      	ldr	r2, [r3, #32]
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	f240 82e4 	bls.w	800d8bc <USB_EPStartXfer+0x674>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	781b      	ldrb	r3, [r3, #0]
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	4413      	add	r3, r2
 800d2fe:	681a      	ldr	r2, [r3, #0]
 800d300:	4ba4      	ldr	r3, [pc, #656]	@ (800d594 <USB_EPStartXfer+0x34c>)
 800d302:	4013      	ands	r3, r2
 800d304:	613b      	str	r3, [r7, #16]
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	441a      	add	r2, r3
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d31a:	6013      	str	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d31c:	683b      	ldr	r3, [r7, #0]
 800d31e:	6a1a      	ldr	r2, [r3, #32]
 800d320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d322:	1ad2      	subs	r2, r2, r3
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	4413      	add	r3, r2
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f000 8161 	beq.w	800d600 <USB_EPStartXfer+0x3b8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	785b      	ldrb	r3, [r3, #1]
 800d342:	2b00      	cmp	r3, #0
 800d344:	d16a      	bne.n	800d41c <USB_EPStartXfer+0x1d4>
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	781b      	ldrb	r3, [r3, #0]
 800d34a:	00db      	lsls	r3, r3, #3
 800d34c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d350:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d354:	685a      	ldr	r2, [r3, #4]
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	00db      	lsls	r3, r3, #3
 800d35c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d360:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d364:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d368:	605a      	str	r2, [r3, #4]
 800d36a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d112      	bne.n	800d396 <USB_EPStartXfer+0x14e>
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	00db      	lsls	r3, r3, #3
 800d376:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d37a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d37e:	685a      	ldr	r2, [r3, #4]
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	00db      	lsls	r3, r3, #3
 800d386:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d38a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d38e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d392:	605a      	str	r2, [r3, #4]
 800d394:	e06a      	b.n	800d46c <USB_EPStartXfer+0x224>
 800d396:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d398:	2b3e      	cmp	r3, #62	@ 0x3e
 800d39a:	d81e      	bhi.n	800d3da <USB_EPStartXfer+0x192>
 800d39c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d39e:	085b      	lsrs	r3, r3, #1
 800d3a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3a4:	f003 0301 	and.w	r3, r3, #1
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d002      	beq.n	800d3b2 <USB_EPStartXfer+0x16a>
 800d3ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	00db      	lsls	r3, r3, #3
 800d3b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3c0:	6859      	ldr	r1, [r3, #4]
 800d3c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3c4:	069a      	lsls	r2, r3, #26
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	00db      	lsls	r3, r3, #3
 800d3cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3d0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3d4:	430a      	orrs	r2, r1
 800d3d6:	605a      	str	r2, [r3, #4]
 800d3d8:	e048      	b.n	800d46c <USB_EPStartXfer+0x224>
 800d3da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3dc:	095b      	lsrs	r3, r3, #5
 800d3de:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3e2:	f003 031f 	and.w	r3, r3, #31
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d102      	bne.n	800d3f0 <USB_EPStartXfer+0x1a8>
 800d3ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	00db      	lsls	r3, r3, #3
 800d3f6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d3fa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d3fe:	685a      	ldr	r2, [r3, #4]
 800d400:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d402:	069b      	lsls	r3, r3, #26
 800d404:	431a      	orrs	r2, r3
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	00db      	lsls	r3, r3, #3
 800d40c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d410:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d414:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d418:	605a      	str	r2, [r3, #4]
 800d41a:	e027      	b.n	800d46c <USB_EPStartXfer+0x224>
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	785b      	ldrb	r3, [r3, #1]
 800d420:	2b01      	cmp	r3, #1
 800d422:	d123      	bne.n	800d46c <USB_EPStartXfer+0x224>
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	00db      	lsls	r3, r3, #3
 800d42a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d42e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d432:	685a      	ldr	r2, [r3, #4]
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	00db      	lsls	r3, r3, #3
 800d43a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d43e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d442:	b292      	uxth	r2, r2
 800d444:	605a      	str	r2, [r3, #4]
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	00db      	lsls	r3, r3, #3
 800d44c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d450:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d454:	6859      	ldr	r1, [r3, #4]
 800d456:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d458:	041a      	lsls	r2, r3, #16
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	00db      	lsls	r3, r3, #3
 800d460:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d464:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d468:	430a      	orrs	r2, r1
 800d46a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	895b      	ldrh	r3, [r3, #10]
 800d470:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	6959      	ldr	r1, [r3, #20]
 800d476:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d478:	b29b      	uxth	r3, r3
 800d47a:	8b7a      	ldrh	r2, [r7, #26]
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f001 f86a 	bl	800e556 <USB_WritePMA>
            ep->xfer_buff += len;
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	695a      	ldr	r2, [r3, #20]
 800d486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d488:	441a      	add	r2, r3
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	6a1a      	ldr	r2, [r3, #32]
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	691b      	ldr	r3, [r3, #16]
 800d496:	429a      	cmp	r2, r3
 800d498:	d906      	bls.n	800d4a8 <USB_EPStartXfer+0x260>
            {
              ep->xfer_len_db -= len;
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	6a1a      	ldr	r2, [r3, #32]
 800d49e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4a0:	1ad2      	subs	r2, r2, r3
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	621a      	str	r2, [r3, #32]
 800d4a6:	e005      	b.n	800d4b4 <USB_EPStartXfer+0x26c>
            }
            else
            {
              len = ep->xfer_len_db;
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	6a1b      	ldr	r3, [r3, #32]
 800d4ac:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	785b      	ldrb	r3, [r3, #1]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d16d      	bne.n	800d598 <USB_EPStartXfer+0x350>
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	00db      	lsls	r3, r3, #3
 800d4c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4c6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4ca:	681a      	ldr	r2, [r3, #0]
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	00db      	lsls	r3, r3, #3
 800d4d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4d6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4da:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d4de:	601a      	str	r2, [r3, #0]
 800d4e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d112      	bne.n	800d50c <USB_EPStartXfer+0x2c4>
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	00db      	lsls	r3, r3, #3
 800d4ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d4f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d4f4:	681a      	ldr	r2, [r3, #0]
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	00db      	lsls	r3, r3, #3
 800d4fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d500:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d504:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d508:	601a      	str	r2, [r3, #0]
 800d50a:	e06d      	b.n	800d5e8 <USB_EPStartXfer+0x3a0>
 800d50c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d50e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d510:	d81e      	bhi.n	800d550 <USB_EPStartXfer+0x308>
 800d512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d514:	085b      	lsrs	r3, r3, #1
 800d516:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d51a:	f003 0301 	and.w	r3, r3, #1
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d002      	beq.n	800d528 <USB_EPStartXfer+0x2e0>
 800d522:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d524:	3301      	adds	r3, #1
 800d526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	781b      	ldrb	r3, [r3, #0]
 800d52c:	00db      	lsls	r3, r3, #3
 800d52e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d532:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d536:	6819      	ldr	r1, [r3, #0]
 800d538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d53a:	069a      	lsls	r2, r3, #26
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	00db      	lsls	r3, r3, #3
 800d542:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d546:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d54a:	430a      	orrs	r2, r1
 800d54c:	601a      	str	r2, [r3, #0]
 800d54e:	e04b      	b.n	800d5e8 <USB_EPStartXfer+0x3a0>
 800d550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d552:	095b      	lsrs	r3, r3, #5
 800d554:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d558:	f003 031f 	and.w	r3, r3, #31
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d102      	bne.n	800d566 <USB_EPStartXfer+0x31e>
 800d560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d562:	3b01      	subs	r3, #1
 800d564:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	00db      	lsls	r3, r3, #3
 800d56c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d570:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d578:	069b      	lsls	r3, r3, #26
 800d57a:	431a      	orrs	r2, r3
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	00db      	lsls	r3, r3, #3
 800d582:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d586:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d58a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d58e:	601a      	str	r2, [r3, #0]
 800d590:	e02a      	b.n	800d5e8 <USB_EPStartXfer+0x3a0>
 800d592:	bf00      	nop
 800d594:	07ff8f8f 	.word	0x07ff8f8f
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	785b      	ldrb	r3, [r3, #1]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d123      	bne.n	800d5e8 <USB_EPStartXfer+0x3a0>
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	00db      	lsls	r3, r3, #3
 800d5a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5ae:	681a      	ldr	r2, [r3, #0]
 800d5b0:	683b      	ldr	r3, [r7, #0]
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	00db      	lsls	r3, r3, #3
 800d5b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5be:	b292      	uxth	r2, r2
 800d5c0:	601a      	str	r2, [r3, #0]
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	00db      	lsls	r3, r3, #3
 800d5c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5cc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5d0:	6819      	ldr	r1, [r3, #0]
 800d5d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5d4:	041a      	lsls	r2, r3, #16
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	00db      	lsls	r3, r3, #3
 800d5dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d5e0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d5e4:	430a      	orrs	r2, r1
 800d5e6:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	891b      	ldrh	r3, [r3, #8]
 800d5ec:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	6959      	ldr	r1, [r3, #20]
 800d5f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5f4:	b29b      	uxth	r3, r3
 800d5f6:	8b7a      	ldrh	r2, [r7, #26]
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 ffac 	bl	800e556 <USB_WritePMA>
 800d5fe:	e2fd      	b.n	800dbfc <USB_EPStartXfer+0x9b4>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d600:	683b      	ldr	r3, [r7, #0]
 800d602:	785b      	ldrb	r3, [r3, #1]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d16a      	bne.n	800d6de <USB_EPStartXfer+0x496>
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	00db      	lsls	r3, r3, #3
 800d60e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d612:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	00db      	lsls	r3, r3, #3
 800d61e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d622:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d626:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d62a:	601a      	str	r2, [r3, #0]
 800d62c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d112      	bne.n	800d658 <USB_EPStartXfer+0x410>
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	00db      	lsls	r3, r3, #3
 800d638:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d63c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	00db      	lsls	r3, r3, #3
 800d648:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d64c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d650:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d654:	601a      	str	r2, [r3, #0]
 800d656:	e06a      	b.n	800d72e <USB_EPStartXfer+0x4e6>
 800d658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d65a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d65c:	d81e      	bhi.n	800d69c <USB_EPStartXfer+0x454>
 800d65e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d660:	085b      	lsrs	r3, r3, #1
 800d662:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d666:	f003 0301 	and.w	r3, r3, #1
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d002      	beq.n	800d674 <USB_EPStartXfer+0x42c>
 800d66e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d670:	3301      	adds	r3, #1
 800d672:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	00db      	lsls	r3, r3, #3
 800d67a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d67e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d682:	6819      	ldr	r1, [r3, #0]
 800d684:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d686:	069a      	lsls	r2, r3, #26
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	00db      	lsls	r3, r3, #3
 800d68e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d692:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d696:	430a      	orrs	r2, r1
 800d698:	601a      	str	r2, [r3, #0]
 800d69a:	e048      	b.n	800d72e <USB_EPStartXfer+0x4e6>
 800d69c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d69e:	095b      	lsrs	r3, r3, #5
 800d6a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6a4:	f003 031f 	and.w	r3, r3, #31
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d102      	bne.n	800d6b2 <USB_EPStartXfer+0x46a>
 800d6ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6ae:	3b01      	subs	r3, #1
 800d6b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	00db      	lsls	r3, r3, #3
 800d6b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6bc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6c4:	069b      	lsls	r3, r3, #26
 800d6c6:	431a      	orrs	r2, r3
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	00db      	lsls	r3, r3, #3
 800d6ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6d2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d6da:	601a      	str	r2, [r3, #0]
 800d6dc:	e027      	b.n	800d72e <USB_EPStartXfer+0x4e6>
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	785b      	ldrb	r3, [r3, #1]
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d123      	bne.n	800d72e <USB_EPStartXfer+0x4e6>
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	00db      	lsls	r3, r3, #3
 800d6ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d6f0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	781b      	ldrb	r3, [r3, #0]
 800d6fa:	00db      	lsls	r3, r3, #3
 800d6fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d700:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d704:	b292      	uxth	r2, r2
 800d706:	601a      	str	r2, [r3, #0]
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	00db      	lsls	r3, r3, #3
 800d70e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d712:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d716:	6819      	ldr	r1, [r3, #0]
 800d718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d71a:	041a      	lsls	r2, r3, #16
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	00db      	lsls	r3, r3, #3
 800d722:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d726:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d72a:	430a      	orrs	r2, r1
 800d72c:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	891b      	ldrh	r3, [r3, #8]
 800d732:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	6959      	ldr	r1, [r3, #20]
 800d738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d73a:	b29b      	uxth	r3, r3
 800d73c:	8b7a      	ldrh	r2, [r7, #26]
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 ff09 	bl	800e556 <USB_WritePMA>
            ep->xfer_buff += len;
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	695a      	ldr	r2, [r3, #20]
 800d748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d74a:	441a      	add	r2, r3
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	6a1a      	ldr	r2, [r3, #32]
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	691b      	ldr	r3, [r3, #16]
 800d758:	429a      	cmp	r2, r3
 800d75a:	d906      	bls.n	800d76a <USB_EPStartXfer+0x522>
            {
              ep->xfer_len_db -= len;
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	6a1a      	ldr	r2, [r3, #32]
 800d760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d762:	1ad2      	subs	r2, r2, r3
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	621a      	str	r2, [r3, #32]
 800d768:	e005      	b.n	800d776 <USB_EPStartXfer+0x52e>
            }
            else
            {
              len = ep->xfer_len_db;
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	6a1b      	ldr	r3, [r3, #32]
 800d76e:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800d770:	683b      	ldr	r3, [r7, #0]
 800d772:	2200      	movs	r2, #0
 800d774:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	785b      	ldrb	r3, [r3, #1]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d16a      	bne.n	800d854 <USB_EPStartXfer+0x60c>
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	00db      	lsls	r3, r3, #3
 800d784:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d788:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d78c:	685a      	ldr	r2, [r3, #4]
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	00db      	lsls	r3, r3, #3
 800d794:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d798:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d79c:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d7a0:	605a      	str	r2, [r3, #4]
 800d7a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d112      	bne.n	800d7ce <USB_EPStartXfer+0x586>
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	781b      	ldrb	r3, [r3, #0]
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7b2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7b6:	685a      	ldr	r2, [r3, #4]
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	00db      	lsls	r3, r3, #3
 800d7be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7c2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7c6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d7ca:	605a      	str	r2, [r3, #4]
 800d7cc:	e06a      	b.n	800d8a4 <USB_EPStartXfer+0x65c>
 800d7ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7d0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d7d2:	d81e      	bhi.n	800d812 <USB_EPStartXfer+0x5ca>
 800d7d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7d6:	085b      	lsrs	r3, r3, #1
 800d7d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7dc:	f003 0301 	and.w	r3, r3, #1
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d002      	beq.n	800d7ea <USB_EPStartXfer+0x5a2>
 800d7e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	781b      	ldrb	r3, [r3, #0]
 800d7ee:	00db      	lsls	r3, r3, #3
 800d7f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d7f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d7f8:	6859      	ldr	r1, [r3, #4]
 800d7fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7fc:	069a      	lsls	r2, r3, #26
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	00db      	lsls	r3, r3, #3
 800d804:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d808:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d80c:	430a      	orrs	r2, r1
 800d80e:	605a      	str	r2, [r3, #4]
 800d810:	e048      	b.n	800d8a4 <USB_EPStartXfer+0x65c>
 800d812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d814:	095b      	lsrs	r3, r3, #5
 800d816:	647b      	str	r3, [r7, #68]	@ 0x44
 800d818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d81a:	f003 031f 	and.w	r3, r3, #31
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d102      	bne.n	800d828 <USB_EPStartXfer+0x5e0>
 800d822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d824:	3b01      	subs	r3, #1
 800d826:	647b      	str	r3, [r7, #68]	@ 0x44
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	00db      	lsls	r3, r3, #3
 800d82e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d832:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d836:	685a      	ldr	r2, [r3, #4]
 800d838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d83a:	069b      	lsls	r3, r3, #26
 800d83c:	431a      	orrs	r2, r3
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	00db      	lsls	r3, r3, #3
 800d844:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d848:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d84c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d850:	605a      	str	r2, [r3, #4]
 800d852:	e027      	b.n	800d8a4 <USB_EPStartXfer+0x65c>
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	785b      	ldrb	r3, [r3, #1]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d123      	bne.n	800d8a4 <USB_EPStartXfer+0x65c>
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	00db      	lsls	r3, r3, #3
 800d862:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d866:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d86a:	685a      	ldr	r2, [r3, #4]
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	00db      	lsls	r3, r3, #3
 800d872:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d876:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d87a:	b292      	uxth	r2, r2
 800d87c:	605a      	str	r2, [r3, #4]
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	00db      	lsls	r3, r3, #3
 800d884:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d888:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d88c:	6859      	ldr	r1, [r3, #4]
 800d88e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d890:	041a      	lsls	r2, r3, #16
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	00db      	lsls	r3, r3, #3
 800d898:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d89c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8a0:	430a      	orrs	r2, r1
 800d8a2:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	895b      	ldrh	r3, [r3, #10]
 800d8a8:	837b      	strh	r3, [r7, #26]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	6959      	ldr	r1, [r3, #20]
 800d8ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8b0:	b29b      	uxth	r3, r3
 800d8b2:	8b7a      	ldrh	r2, [r7, #26]
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 fe4e 	bl	800e556 <USB_WritePMA>
 800d8ba:	e19f      	b.n	800dbfc <USB_EPStartXfer+0x9b4>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	6a1b      	ldr	r3, [r3, #32]
 800d8c0:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d8c2:	687a      	ldr	r2, [r7, #4]
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	009b      	lsls	r3, r3, #2
 800d8ca:	4413      	add	r3, r2
 800d8cc:	681a      	ldr	r2, [r3, #0]
 800d8ce:	4ba0      	ldr	r3, [pc, #640]	@ (800db50 <USB_EPStartXfer+0x908>)
 800d8d0:	4013      	ands	r3, r2
 800d8d2:	617b      	str	r3, [r7, #20]
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	441a      	add	r2, r3
 800d8de:	697b      	ldr	r3, [r7, #20]
 800d8e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8e8:	6013      	str	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	00db      	lsls	r3, r3, #3
 800d8f0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d8f4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	00db      	lsls	r3, r3, #3
 800d900:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d904:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d908:	b292      	uxth	r2, r2
 800d90a:	601a      	str	r2, [r3, #0]
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	781b      	ldrb	r3, [r3, #0]
 800d910:	00db      	lsls	r3, r3, #3
 800d912:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d916:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d91a:	6819      	ldr	r1, [r3, #0]
 800d91c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d91e:	041a      	lsls	r2, r3, #16
 800d920:	683b      	ldr	r3, [r7, #0]
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	00db      	lsls	r3, r3, #3
 800d926:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d92a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d92e:	430a      	orrs	r2, r1
 800d930:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	891b      	ldrh	r3, [r3, #8]
 800d936:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	6959      	ldr	r1, [r3, #20]
 800d93c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d93e:	b29b      	uxth	r3, r3
 800d940:	8b7a      	ldrh	r2, [r7, #26]
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 fe07 	bl	800e556 <USB_WritePMA>
 800d948:	e158      	b.n	800dbfc <USB_EPStartXfer+0x9b4>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	6a1a      	ldr	r2, [r3, #32]
 800d94e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d950:	1ad2      	subs	r2, r2, r3
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	4413      	add	r3, r2
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d966:	2b00      	cmp	r3, #0
 800d968:	f000 80a3 	beq.w	800dab2 <USB_EPStartXfer+0x86a>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	785b      	ldrb	r3, [r3, #1]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d16a      	bne.n	800da4a <USB_EPStartXfer+0x802>
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	00db      	lsls	r3, r3, #3
 800d97a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d97e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d982:	685a      	ldr	r2, [r3, #4]
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	00db      	lsls	r3, r3, #3
 800d98a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d98e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d992:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800d996:	605a      	str	r2, [r3, #4]
 800d998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d112      	bne.n	800d9c4 <USB_EPStartXfer+0x77c>
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	781b      	ldrb	r3, [r3, #0]
 800d9a2:	00db      	lsls	r3, r3, #3
 800d9a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9a8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9ac:	685a      	ldr	r2, [r3, #4]
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	00db      	lsls	r3, r3, #3
 800d9b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9b8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9bc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800d9c0:	605a      	str	r2, [r3, #4]
 800d9c2:	e06a      	b.n	800da9a <USB_EPStartXfer+0x852>
 800d9c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d9c8:	d81e      	bhi.n	800da08 <USB_EPStartXfer+0x7c0>
 800d9ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9cc:	085b      	lsrs	r3, r3, #1
 800d9ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800d9d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d002      	beq.n	800d9e0 <USB_EPStartXfer+0x798>
 800d9da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9dc:	3301      	adds	r3, #1
 800d9de:	643b      	str	r3, [r7, #64]	@ 0x40
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	781b      	ldrb	r3, [r3, #0]
 800d9e4:	00db      	lsls	r3, r3, #3
 800d9e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9ea:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800d9ee:	6859      	ldr	r1, [r3, #4]
 800d9f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9f2:	069a      	lsls	r2, r3, #26
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	00db      	lsls	r3, r3, #3
 800d9fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800d9fe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da02:	430a      	orrs	r2, r1
 800da04:	605a      	str	r2, [r3, #4]
 800da06:	e048      	b.n	800da9a <USB_EPStartXfer+0x852>
 800da08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da0a:	095b      	lsrs	r3, r3, #5
 800da0c:	643b      	str	r3, [r7, #64]	@ 0x40
 800da0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da10:	f003 031f 	and.w	r3, r3, #31
 800da14:	2b00      	cmp	r3, #0
 800da16:	d102      	bne.n	800da1e <USB_EPStartXfer+0x7d6>
 800da18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da1a:	3b01      	subs	r3, #1
 800da1c:	643b      	str	r3, [r7, #64]	@ 0x40
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	781b      	ldrb	r3, [r3, #0]
 800da22:	00db      	lsls	r3, r3, #3
 800da24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da2c:	685a      	ldr	r2, [r3, #4]
 800da2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da30:	069b      	lsls	r3, r3, #26
 800da32:	431a      	orrs	r2, r3
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	781b      	ldrb	r3, [r3, #0]
 800da38:	00db      	lsls	r3, r3, #3
 800da3a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da3e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da42:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800da46:	605a      	str	r2, [r3, #4]
 800da48:	e027      	b.n	800da9a <USB_EPStartXfer+0x852>
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	785b      	ldrb	r3, [r3, #1]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d123      	bne.n	800da9a <USB_EPStartXfer+0x852>
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	781b      	ldrb	r3, [r3, #0]
 800da56:	00db      	lsls	r3, r3, #3
 800da58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da5c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da60:	685a      	ldr	r2, [r3, #4]
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	00db      	lsls	r3, r3, #3
 800da68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da70:	b292      	uxth	r2, r2
 800da72:	605a      	str	r2, [r3, #4]
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	00db      	lsls	r3, r3, #3
 800da7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da7e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da82:	6859      	ldr	r1, [r3, #4]
 800da84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da86:	041a      	lsls	r2, r3, #16
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	00db      	lsls	r3, r3, #3
 800da8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800da92:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800da96:	430a      	orrs	r2, r1
 800da98:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	895b      	ldrh	r3, [r3, #10]
 800da9e:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	6959      	ldr	r1, [r3, #20]
 800daa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	8b7a      	ldrh	r2, [r7, #26]
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f000 fd53 	bl	800e556 <USB_WritePMA>
 800dab0:	e0a4      	b.n	800dbfc <USB_EPStartXfer+0x9b4>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	785b      	ldrb	r3, [r3, #1]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d16d      	bne.n	800db96 <USB_EPStartXfer+0x94e>
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	00db      	lsls	r3, r3, #3
 800dac0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dac4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	00db      	lsls	r3, r3, #3
 800dad0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dad4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dad8:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800dadc:	601a      	str	r2, [r3, #0]
 800dade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d112      	bne.n	800db0a <USB_EPStartXfer+0x8c2>
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	00db      	lsls	r3, r3, #3
 800daea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800daee:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	00db      	lsls	r3, r3, #3
 800dafa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dafe:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db02:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800db06:	601a      	str	r2, [r3, #0]
 800db08:	e06d      	b.n	800dbe6 <USB_EPStartXfer+0x99e>
 800db0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db0c:	2b3e      	cmp	r3, #62	@ 0x3e
 800db0e:	d821      	bhi.n	800db54 <USB_EPStartXfer+0x90c>
 800db10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db12:	085b      	lsrs	r3, r3, #1
 800db14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db18:	f003 0301 	and.w	r3, r3, #1
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d002      	beq.n	800db26 <USB_EPStartXfer+0x8de>
 800db20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db22:	3301      	adds	r3, #1
 800db24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	00db      	lsls	r3, r3, #3
 800db2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db30:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db34:	6819      	ldr	r1, [r3, #0]
 800db36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db38:	069a      	lsls	r2, r3, #26
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	00db      	lsls	r3, r3, #3
 800db40:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db44:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db48:	430a      	orrs	r2, r1
 800db4a:	601a      	str	r2, [r3, #0]
 800db4c:	e04b      	b.n	800dbe6 <USB_EPStartXfer+0x99e>
 800db4e:	bf00      	nop
 800db50:	07ff8e8f 	.word	0x07ff8e8f
 800db54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db56:	095b      	lsrs	r3, r3, #5
 800db58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db5c:	f003 031f 	and.w	r3, r3, #31
 800db60:	2b00      	cmp	r3, #0
 800db62:	d102      	bne.n	800db6a <USB_EPStartXfer+0x922>
 800db64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db66:	3b01      	subs	r3, #1
 800db68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	00db      	lsls	r3, r3, #3
 800db70:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db74:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db78:	681a      	ldr	r2, [r3, #0]
 800db7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db7c:	069b      	lsls	r3, r3, #26
 800db7e:	431a      	orrs	r2, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	00db      	lsls	r3, r3, #3
 800db86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800db8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800db8e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800db92:	601a      	str	r2, [r3, #0]
 800db94:	e027      	b.n	800dbe6 <USB_EPStartXfer+0x99e>
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	785b      	ldrb	r3, [r3, #1]
 800db9a:	2b01      	cmp	r3, #1
 800db9c:	d123      	bne.n	800dbe6 <USB_EPStartXfer+0x99e>
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	781b      	ldrb	r3, [r3, #0]
 800dba2:	00db      	lsls	r3, r3, #3
 800dba4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dba8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	781b      	ldrb	r3, [r3, #0]
 800dbb2:	00db      	lsls	r3, r3, #3
 800dbb4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dbb8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dbbc:	b292      	uxth	r2, r2
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	781b      	ldrb	r3, [r3, #0]
 800dbc4:	00db      	lsls	r3, r3, #3
 800dbc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dbca:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dbce:	6819      	ldr	r1, [r3, #0]
 800dbd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbd2:	041a      	lsls	r2, r3, #16
 800dbd4:	683b      	ldr	r3, [r7, #0]
 800dbd6:	781b      	ldrb	r3, [r3, #0]
 800dbd8:	00db      	lsls	r3, r3, #3
 800dbda:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dbde:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dbe2:	430a      	orrs	r2, r1
 800dbe4:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	891b      	ldrh	r3, [r3, #8]
 800dbea:	837b      	strh	r3, [r7, #26]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	6959      	ldr	r1, [r3, #20]
 800dbf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	8b7a      	ldrh	r2, [r7, #26]
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 fcad 	bl	800e556 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	4413      	add	r3, r2
 800dc06:	681a      	ldr	r2, [r3, #0]
 800dc08:	4b8b      	ldr	r3, [pc, #556]	@ (800de38 <USB_EPStartXfer+0xbf0>)
 800dc0a:	4013      	ands	r3, r2
 800dc0c:	60fb      	str	r3, [r7, #12]
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	f083 0310 	eor.w	r3, r3, #16
 800dc14:	60fb      	str	r3, [r7, #12]
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f083 0320 	eor.w	r3, r3, #32
 800dc1c:	60fb      	str	r3, [r7, #12]
 800dc1e:	687a      	ldr	r2, [r7, #4]
 800dc20:	683b      	ldr	r3, [r7, #0]
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	009b      	lsls	r3, r3, #2
 800dc26:	441a      	add	r2, r3
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc32:	6013      	str	r3, [r2, #0]
 800dc34:	e36b      	b.n	800e30e <USB_EPStartXfer+0x10c6>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	7b1b      	ldrb	r3, [r3, #12]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	f040 8081 	bne.w	800dd42 <USB_EPStartXfer+0xafa>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800dc40:	683b      	ldr	r3, [r7, #0]
 800dc42:	699a      	ldr	r2, [r3, #24]
 800dc44:	683b      	ldr	r3, [r7, #0]
 800dc46:	691b      	ldr	r3, [r3, #16]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d909      	bls.n	800dc60 <USB_EPStartXfer+0xa18>
      {
        len = ep->maxpacket;
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	691b      	ldr	r3, [r3, #16]
 800dc50:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	699a      	ldr	r2, [r3, #24]
 800dc56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc58:	1ad2      	subs	r2, r2, r3
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	619a      	str	r2, [r3, #24]
 800dc5e:	e005      	b.n	800dc6c <USB_EPStartXfer+0xa24>
      }
      else
      {
        len = ep->xfer_len;
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	699b      	ldr	r3, [r3, #24]
 800dc64:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	781b      	ldrb	r3, [r3, #0]
 800dc70:	00db      	lsls	r3, r3, #3
 800dc72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc76:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc7a:	685a      	ldr	r2, [r3, #4]
 800dc7c:	683b      	ldr	r3, [r7, #0]
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	00db      	lsls	r3, r3, #3
 800dc82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dc8a:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800dc8e:	605a      	str	r2, [r3, #4]
 800dc90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d112      	bne.n	800dcbc <USB_EPStartXfer+0xa74>
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	00db      	lsls	r3, r3, #3
 800dc9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dca0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dca4:	685a      	ldr	r2, [r3, #4]
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	00db      	lsls	r3, r3, #3
 800dcac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dcb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dcb4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dcb8:	605a      	str	r2, [r3, #4]
 800dcba:	e30c      	b.n	800e2d6 <USB_EPStartXfer+0x108e>
 800dcbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcbe:	2b3e      	cmp	r3, #62	@ 0x3e
 800dcc0:	d81e      	bhi.n	800dd00 <USB_EPStartXfer+0xab8>
 800dcc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcc4:	085b      	lsrs	r3, r3, #1
 800dcc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dcc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcca:	f003 0301 	and.w	r3, r3, #1
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d002      	beq.n	800dcd8 <USB_EPStartXfer+0xa90>
 800dcd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcd4:	3301      	adds	r3, #1
 800dcd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	00db      	lsls	r3, r3, #3
 800dcde:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dce2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dce6:	6859      	ldr	r1, [r3, #4]
 800dce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcea:	069a      	lsls	r2, r3, #26
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	00db      	lsls	r3, r3, #3
 800dcf2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dcf6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dcfa:	430a      	orrs	r2, r1
 800dcfc:	605a      	str	r2, [r3, #4]
 800dcfe:	e2ea      	b.n	800e2d6 <USB_EPStartXfer+0x108e>
 800dd00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd02:	095b      	lsrs	r3, r3, #5
 800dd04:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd08:	f003 031f 	and.w	r3, r3, #31
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d102      	bne.n	800dd16 <USB_EPStartXfer+0xace>
 800dd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd12:	3b01      	subs	r3, #1
 800dd14:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	00db      	lsls	r3, r3, #3
 800dd1c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd20:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd24:	685a      	ldr	r2, [r3, #4]
 800dd26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd28:	069b      	lsls	r3, r3, #26
 800dd2a:	431a      	orrs	r2, r3
 800dd2c:	683b      	ldr	r3, [r7, #0]
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	00db      	lsls	r3, r3, #3
 800dd32:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd36:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd3a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dd3e:	605a      	str	r2, [r3, #4]
 800dd40:	e2c9      	b.n	800e2d6 <USB_EPStartXfer+0x108e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	78db      	ldrb	r3, [r3, #3]
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	f040 8176 	bne.w	800e038 <USB_EPStartXfer+0xdf0>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	785b      	ldrb	r3, [r3, #1]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d173      	bne.n	800de3c <USB_EPStartXfer+0xbf4>
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	00db      	lsls	r3, r3, #3
 800dd5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	683b      	ldr	r3, [r7, #0]
 800dd66:	781b      	ldrb	r3, [r3, #0]
 800dd68:	00db      	lsls	r3, r3, #3
 800dd6a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd6e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd72:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800dd76:	601a      	str	r2, [r3, #0]
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	691b      	ldr	r3, [r3, #16]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d112      	bne.n	800dda6 <USB_EPStartXfer+0xb5e>
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	00db      	lsls	r3, r3, #3
 800dd86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd8e:	681a      	ldr	r2, [r3, #0]
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	00db      	lsls	r3, r3, #3
 800dd96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dd9e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dda2:	601a      	str	r2, [r3, #0]
 800dda4:	e073      	b.n	800de8e <USB_EPStartXfer+0xc46>
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	2b3e      	cmp	r3, #62	@ 0x3e
 800ddac:	d820      	bhi.n	800ddf0 <USB_EPStartXfer+0xba8>
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	085b      	lsrs	r3, r3, #1
 800ddb4:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	691b      	ldr	r3, [r3, #16]
 800ddba:	f003 0301 	and.w	r3, r3, #1
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <USB_EPStartXfer+0xb80>
 800ddc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	781b      	ldrb	r3, [r3, #0]
 800ddcc:	00db      	lsls	r3, r3, #3
 800ddce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ddd2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ddd6:	6819      	ldr	r1, [r3, #0]
 800ddd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ddda:	069a      	lsls	r2, r3, #26
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	00db      	lsls	r3, r3, #3
 800dde2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dde6:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ddea:	430a      	orrs	r2, r1
 800ddec:	601a      	str	r2, [r3, #0]
 800ddee:	e04e      	b.n	800de8e <USB_EPStartXfer+0xc46>
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	691b      	ldr	r3, [r3, #16]
 800ddf4:	095b      	lsrs	r3, r3, #5
 800ddf6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	691b      	ldr	r3, [r3, #16]
 800ddfc:	f003 031f 	and.w	r3, r3, #31
 800de00:	2b00      	cmp	r3, #0
 800de02:	d102      	bne.n	800de0a <USB_EPStartXfer+0xbc2>
 800de04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de06:	3b01      	subs	r3, #1
 800de08:	637b      	str	r3, [r7, #52]	@ 0x34
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	00db      	lsls	r3, r3, #3
 800de10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de1c:	069b      	lsls	r3, r3, #26
 800de1e:	431a      	orrs	r2, r3
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	00db      	lsls	r3, r3, #3
 800de26:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de2a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de2e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800de32:	601a      	str	r2, [r3, #0]
 800de34:	e02b      	b.n	800de8e <USB_EPStartXfer+0xc46>
 800de36:	bf00      	nop
 800de38:	07ff8fbf 	.word	0x07ff8fbf
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	785b      	ldrb	r3, [r3, #1]
 800de40:	2b01      	cmp	r3, #1
 800de42:	d124      	bne.n	800de8e <USB_EPStartXfer+0xc46>
 800de44:	683b      	ldr	r3, [r7, #0]
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	00db      	lsls	r3, r3, #3
 800de4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de4e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de52:	681a      	ldr	r2, [r3, #0]
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	00db      	lsls	r3, r3, #3
 800de5a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de5e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de62:	b292      	uxth	r2, r2
 800de64:	601a      	str	r2, [r3, #0]
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	00db      	lsls	r3, r3, #3
 800de6c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de70:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de74:	6819      	ldr	r1, [r3, #0]
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	691b      	ldr	r3, [r3, #16]
 800de7a:	041a      	lsls	r2, r3, #16
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	00db      	lsls	r3, r3, #3
 800de82:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800de86:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800de8a:	430a      	orrs	r2, r1
 800de8c:	601a      	str	r2, [r3, #0]
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	785b      	ldrb	r3, [r3, #1]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d170      	bne.n	800df78 <USB_EPStartXfer+0xd30>
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	00db      	lsls	r3, r3, #3
 800de9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dea0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dea4:	685a      	ldr	r2, [r3, #4]
 800dea6:	683b      	ldr	r3, [r7, #0]
 800dea8:	781b      	ldrb	r3, [r3, #0]
 800deaa:	00db      	lsls	r3, r3, #3
 800deac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800deb0:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800deb4:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800deb8:	605a      	str	r2, [r3, #4]
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d112      	bne.n	800dee8 <USB_EPStartXfer+0xca0>
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	781b      	ldrb	r3, [r3, #0]
 800dec6:	00db      	lsls	r3, r3, #3
 800dec8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800decc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800ded0:	685a      	ldr	r2, [r3, #4]
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	00db      	lsls	r3, r3, #3
 800ded8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dedc:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dee0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800dee4:	605a      	str	r2, [r3, #4]
 800dee6:	e070      	b.n	800dfca <USB_EPStartXfer+0xd82>
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	691b      	ldr	r3, [r3, #16]
 800deec:	2b3e      	cmp	r3, #62	@ 0x3e
 800deee:	d820      	bhi.n	800df32 <USB_EPStartXfer+0xcea>
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	085b      	lsrs	r3, r3, #1
 800def6:	633b      	str	r3, [r7, #48]	@ 0x30
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	691b      	ldr	r3, [r3, #16]
 800defc:	f003 0301 	and.w	r3, r3, #1
 800df00:	2b00      	cmp	r3, #0
 800df02:	d002      	beq.n	800df0a <USB_EPStartXfer+0xcc2>
 800df04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df06:	3301      	adds	r3, #1
 800df08:	633b      	str	r3, [r7, #48]	@ 0x30
 800df0a:	683b      	ldr	r3, [r7, #0]
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	00db      	lsls	r3, r3, #3
 800df10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df14:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df18:	6859      	ldr	r1, [r3, #4]
 800df1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df1c:	069a      	lsls	r2, r3, #26
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	00db      	lsls	r3, r3, #3
 800df24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df28:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df2c:	430a      	orrs	r2, r1
 800df2e:	605a      	str	r2, [r3, #4]
 800df30:	e04b      	b.n	800dfca <USB_EPStartXfer+0xd82>
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	691b      	ldr	r3, [r3, #16]
 800df36:	095b      	lsrs	r3, r3, #5
 800df38:	633b      	str	r3, [r7, #48]	@ 0x30
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	691b      	ldr	r3, [r3, #16]
 800df3e:	f003 031f 	and.w	r3, r3, #31
 800df42:	2b00      	cmp	r3, #0
 800df44:	d102      	bne.n	800df4c <USB_EPStartXfer+0xd04>
 800df46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df48:	3b01      	subs	r3, #1
 800df4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	00db      	lsls	r3, r3, #3
 800df52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df56:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df5a:	685a      	ldr	r2, [r3, #4]
 800df5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df5e:	069b      	lsls	r3, r3, #26
 800df60:	431a      	orrs	r2, r3
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	781b      	ldrb	r3, [r3, #0]
 800df66:	00db      	lsls	r3, r3, #3
 800df68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df6c:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df70:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800df74:	605a      	str	r2, [r3, #4]
 800df76:	e028      	b.n	800dfca <USB_EPStartXfer+0xd82>
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	785b      	ldrb	r3, [r3, #1]
 800df7c:	2b01      	cmp	r3, #1
 800df7e:	d124      	bne.n	800dfca <USB_EPStartXfer+0xd82>
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	00db      	lsls	r3, r3, #3
 800df86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df8a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df8e:	685a      	ldr	r2, [r3, #4]
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	781b      	ldrb	r3, [r3, #0]
 800df94:	00db      	lsls	r3, r3, #3
 800df96:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800df9a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800df9e:	b292      	uxth	r2, r2
 800dfa0:	605a      	str	r2, [r3, #4]
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	00db      	lsls	r3, r3, #3
 800dfa8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfac:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfb0:	6859      	ldr	r1, [r3, #4]
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	691b      	ldr	r3, [r3, #16]
 800dfb6:	041a      	lsls	r2, r3, #16
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	00db      	lsls	r3, r3, #3
 800dfbe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dfc2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800dfc6:	430a      	orrs	r2, r1
 800dfc8:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	69db      	ldr	r3, [r3, #28]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	f000 8181 	beq.w	800e2d6 <USB_EPStartXfer+0x108e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	4413      	add	r3, r2
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	84fb      	strh	r3, [r7, #38]	@ 0x26

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dfe2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d004      	beq.n	800dff6 <USB_EPStartXfer+0xdae>
 800dfec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dfee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d10b      	bne.n	800e00e <USB_EPStartXfer+0xdc6>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dff6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800dff8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	f040 816a 	bne.w	800e2d6 <USB_EPStartXfer+0x108e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e002:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e008:	2b00      	cmp	r3, #0
 800e00a:	f040 8164 	bne.w	800e2d6 <USB_EPStartXfer+0x108e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e00e:	687a      	ldr	r2, [r7, #4]
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	4413      	add	r3, r2
 800e018:	681a      	ldr	r2, [r3, #0]
 800e01a:	4b98      	ldr	r3, [pc, #608]	@ (800e27c <USB_EPStartXfer+0x1034>)
 800e01c:	4013      	ands	r3, r2
 800e01e:	623b      	str	r3, [r7, #32]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	441a      	add	r2, r3
 800e02a:	6a3b      	ldr	r3, [r7, #32]
 800e02c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e030:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e034:	6013      	str	r3, [r2, #0]
 800e036:	e14e      	b.n	800e2d6 <USB_EPStartXfer+0x108e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	78db      	ldrb	r3, [r3, #3]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	f040 8148 	bne.w	800e2d2 <USB_EPStartXfer+0x108a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	699a      	ldr	r2, [r3, #24]
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d909      	bls.n	800e062 <USB_EPStartXfer+0xe1a>
        {
          len = ep->maxpacket;
 800e04e:	683b      	ldr	r3, [r7, #0]
 800e050:	691b      	ldr	r3, [r3, #16]
 800e052:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	699a      	ldr	r2, [r3, #24]
 800e058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e05a:	1ad2      	subs	r2, r2, r3
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	619a      	str	r2, [r3, #24]
 800e060:	e005      	b.n	800e06e <USB_EPStartXfer+0xe26>
        }
        else
        {
          len = ep->xfer_len;
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	699b      	ldr	r3, [r3, #24]
 800e066:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	2200      	movs	r2, #0
 800e06c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	785b      	ldrb	r3, [r3, #1]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d16a      	bne.n	800e14c <USB_EPStartXfer+0xf04>
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	00db      	lsls	r3, r3, #3
 800e07c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e080:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	00db      	lsls	r3, r3, #3
 800e08c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e090:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e094:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e098:	601a      	str	r2, [r3, #0]
 800e09a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d112      	bne.n	800e0c6 <USB_EPStartXfer+0xe7e>
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	781b      	ldrb	r3, [r3, #0]
 800e0a4:	00db      	lsls	r3, r3, #3
 800e0a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0aa:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	683b      	ldr	r3, [r7, #0]
 800e0b2:	781b      	ldrb	r3, [r3, #0]
 800e0b4:	00db      	lsls	r3, r3, #3
 800e0b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0ba:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0be:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e0c2:	601a      	str	r2, [r3, #0]
 800e0c4:	e06a      	b.n	800e19c <USB_EPStartXfer+0xf54>
 800e0c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0c8:	2b3e      	cmp	r3, #62	@ 0x3e
 800e0ca:	d81e      	bhi.n	800e10a <USB_EPStartXfer+0xec2>
 800e0cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0ce:	085b      	lsrs	r3, r3, #1
 800e0d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0d4:	f003 0301 	and.w	r3, r3, #1
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d002      	beq.n	800e0e2 <USB_EPStartXfer+0xe9a>
 800e0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0de:	3301      	adds	r3, #1
 800e0e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	00db      	lsls	r3, r3, #3
 800e0e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e0ec:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e0f0:	6819      	ldr	r1, [r3, #0]
 800e0f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f4:	069a      	lsls	r2, r3, #26
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	00db      	lsls	r3, r3, #3
 800e0fc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e100:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e104:	430a      	orrs	r2, r1
 800e106:	601a      	str	r2, [r3, #0]
 800e108:	e048      	b.n	800e19c <USB_EPStartXfer+0xf54>
 800e10a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e10c:	095b      	lsrs	r3, r3, #5
 800e10e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e112:	f003 031f 	and.w	r3, r3, #31
 800e116:	2b00      	cmp	r3, #0
 800e118:	d102      	bne.n	800e120 <USB_EPStartXfer+0xed8>
 800e11a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e11c:	3b01      	subs	r3, #1
 800e11e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	00db      	lsls	r3, r3, #3
 800e126:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e12a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e132:	069b      	lsls	r3, r3, #26
 800e134:	431a      	orrs	r2, r3
 800e136:	683b      	ldr	r3, [r7, #0]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	00db      	lsls	r3, r3, #3
 800e13c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e140:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e144:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e148:	601a      	str	r2, [r3, #0]
 800e14a:	e027      	b.n	800e19c <USB_EPStartXfer+0xf54>
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	785b      	ldrb	r3, [r3, #1]
 800e150:	2b01      	cmp	r3, #1
 800e152:	d123      	bne.n	800e19c <USB_EPStartXfer+0xf54>
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	00db      	lsls	r3, r3, #3
 800e15a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e15e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	781b      	ldrb	r3, [r3, #0]
 800e168:	00db      	lsls	r3, r3, #3
 800e16a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e16e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e172:	b292      	uxth	r2, r2
 800e174:	601a      	str	r2, [r3, #0]
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	00db      	lsls	r3, r3, #3
 800e17c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e180:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e184:	6819      	ldr	r1, [r3, #0]
 800e186:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e188:	041a      	lsls	r2, r3, #16
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	00db      	lsls	r3, r3, #3
 800e190:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e194:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e198:	430a      	orrs	r2, r1
 800e19a:	601a      	str	r2, [r3, #0]
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	785b      	ldrb	r3, [r3, #1]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d16d      	bne.n	800e280 <USB_EPStartXfer+0x1038>
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	00db      	lsls	r3, r3, #3
 800e1aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1ae:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1b2:	685a      	ldr	r2, [r3, #4]
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	00db      	lsls	r3, r3, #3
 800e1ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1be:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1c2:	f022 427c 	bic.w	r2, r2, #4227858432	@ 0xfc000000
 800e1c6:	605a      	str	r2, [r3, #4]
 800e1c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d112      	bne.n	800e1f4 <USB_EPStartXfer+0xfac>
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	00db      	lsls	r3, r3, #3
 800e1d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1d8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1dc:	685a      	ldr	r2, [r3, #4]
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	00db      	lsls	r3, r3, #3
 800e1e4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e1e8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e1ec:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e1f0:	605a      	str	r2, [r3, #4]
 800e1f2:	e070      	b.n	800e2d6 <USB_EPStartXfer+0x108e>
 800e1f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1f6:	2b3e      	cmp	r3, #62	@ 0x3e
 800e1f8:	d81e      	bhi.n	800e238 <USB_EPStartXfer+0xff0>
 800e1fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1fc:	085b      	lsrs	r3, r3, #1
 800e1fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e202:	f003 0301 	and.w	r3, r3, #1
 800e206:	2b00      	cmp	r3, #0
 800e208:	d002      	beq.n	800e210 <USB_EPStartXfer+0xfc8>
 800e20a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e20c:	3301      	adds	r3, #1
 800e20e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	00db      	lsls	r3, r3, #3
 800e216:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e21a:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e21e:	6859      	ldr	r1, [r3, #4]
 800e220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e222:	069a      	lsls	r2, r3, #26
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	781b      	ldrb	r3, [r3, #0]
 800e228:	00db      	lsls	r3, r3, #3
 800e22a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e22e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e232:	430a      	orrs	r2, r1
 800e234:	605a      	str	r2, [r3, #4]
 800e236:	e04e      	b.n	800e2d6 <USB_EPStartXfer+0x108e>
 800e238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e23a:	095b      	lsrs	r3, r3, #5
 800e23c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e23e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e240:	f003 031f 	and.w	r3, r3, #31
 800e244:	2b00      	cmp	r3, #0
 800e246:	d102      	bne.n	800e24e <USB_EPStartXfer+0x1006>
 800e248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e24a:	3b01      	subs	r3, #1
 800e24c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	00db      	lsls	r3, r3, #3
 800e254:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e258:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e25c:	685a      	ldr	r2, [r3, #4]
 800e25e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e260:	069b      	lsls	r3, r3, #26
 800e262:	431a      	orrs	r2, r3
 800e264:	683b      	ldr	r3, [r7, #0]
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	00db      	lsls	r3, r3, #3
 800e26a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e26e:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e272:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800e276:	605a      	str	r2, [r3, #4]
 800e278:	e02d      	b.n	800e2d6 <USB_EPStartXfer+0x108e>
 800e27a:	bf00      	nop
 800e27c:	07ff8f8f 	.word	0x07ff8f8f
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	785b      	ldrb	r3, [r3, #1]
 800e284:	2b01      	cmp	r3, #1
 800e286:	d126      	bne.n	800e2d6 <USB_EPStartXfer+0x108e>
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	00db      	lsls	r3, r3, #3
 800e28e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e292:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e296:	685a      	ldr	r2, [r3, #4]
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	00db      	lsls	r3, r3, #3
 800e29e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e2a2:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e2a6:	b292      	uxth	r2, r2
 800e2a8:	605a      	str	r2, [r3, #4]
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	00db      	lsls	r3, r3, #3
 800e2b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e2b4:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e2b8:	6859      	ldr	r1, [r3, #4]
 800e2ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2bc:	041a      	lsls	r2, r3, #16
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	00db      	lsls	r3, r3, #3
 800e2c4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e2c8:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e2cc:	430a      	orrs	r2, r1
 800e2ce:	605a      	str	r2, [r3, #4]
 800e2d0:	e001      	b.n	800e2d6 <USB_EPStartXfer+0x108e>
      }
      else
      {
        return HAL_ERROR;
 800e2d2:	2301      	movs	r3, #1
 800e2d4:	e01c      	b.n	800e310 <USB_EPStartXfer+0x10c8>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	4413      	add	r3, r2
 800e2e0:	681a      	ldr	r2, [r3, #0]
 800e2e2:	4b0d      	ldr	r3, [pc, #52]	@ (800e318 <USB_EPStartXfer+0x10d0>)
 800e2e4:	4013      	ands	r3, r2
 800e2e6:	61fb      	str	r3, [r7, #28]
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e2ee:	61fb      	str	r3, [r7, #28]
 800e2f0:	69fb      	ldr	r3, [r7, #28]
 800e2f2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e2f6:	61fb      	str	r3, [r7, #28]
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	009b      	lsls	r3, r3, #2
 800e300:	441a      	add	r2, r3
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e30c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e30e:	2300      	movs	r3, #0
}
 800e310:	4618      	mov	r0, r3
 800e312:	3758      	adds	r7, #88	@ 0x58
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}
 800e318:	07ffbf8f 	.word	0x07ffbf8f

0800e31c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b085      	sub	sp, #20
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e326:	683b      	ldr	r3, [r7, #0]
 800e328:	785b      	ldrb	r3, [r3, #1]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d018      	beq.n	800e360 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e32e:	687a      	ldr	r2, [r7, #4]
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	781b      	ldrb	r3, [r3, #0]
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4413      	add	r3, r2
 800e338:	681a      	ldr	r2, [r3, #0]
 800e33a:	4b19      	ldr	r3, [pc, #100]	@ (800e3a0 <USB_EPSetStall+0x84>)
 800e33c:	4013      	ands	r3, r2
 800e33e:	60bb      	str	r3, [r7, #8]
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	f083 0310 	eor.w	r3, r3, #16
 800e346:	60bb      	str	r3, [r7, #8]
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	441a      	add	r2, r3
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e358:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e35c:	6013      	str	r3, [r2, #0]
 800e35e:	e017      	b.n	800e390 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e360:	687a      	ldr	r2, [r7, #4]
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	4413      	add	r3, r2
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	4b0d      	ldr	r3, [pc, #52]	@ (800e3a4 <USB_EPSetStall+0x88>)
 800e36e:	4013      	ands	r3, r2
 800e370:	60fb      	str	r3, [r7, #12]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e378:	60fb      	str	r3, [r7, #12]
 800e37a:	687a      	ldr	r2, [r7, #4]
 800e37c:	683b      	ldr	r3, [r7, #0]
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	009b      	lsls	r3, r3, #2
 800e382:	441a      	add	r2, r3
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e38e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e390:	2300      	movs	r3, #0
}
 800e392:	4618      	mov	r0, r3
 800e394:	3714      	adds	r7, #20
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop
 800e3a0:	07ff8fbf 	.word	0x07ff8fbf
 800e3a4:	07ffbf8f 	.word	0x07ffbf8f

0800e3a8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800e3a8:	b480      	push	{r7}
 800e3aa:	b089      	sub	sp, #36	@ 0x24
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	7b1b      	ldrb	r3, [r3, #12]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d17c      	bne.n	800e4b4 <USB_EPClearStall+0x10c>
  {
    if (ep->is_in != 0U)
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	785b      	ldrb	r3, [r3, #1]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d03c      	beq.n	800e43c <USB_EPClearStall+0x94>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e3c2:	687a      	ldr	r2, [r7, #4]
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	4413      	add	r3, r2
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	613b      	str	r3, [r7, #16]
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d013      	beq.n	800e402 <USB_EPClearStall+0x5a>
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	781b      	ldrb	r3, [r3, #0]
 800e3e0:	009b      	lsls	r3, r3, #2
 800e3e2:	4413      	add	r3, r2
 800e3e4:	681a      	ldr	r2, [r3, #0]
 800e3e6:	4b37      	ldr	r3, [pc, #220]	@ (800e4c4 <USB_EPClearStall+0x11c>)
 800e3e8:	4013      	ands	r3, r2
 800e3ea:	60fb      	str	r3, [r7, #12]
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	441a      	add	r2, r3
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e3fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e400:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	78db      	ldrb	r3, [r3, #3]
 800e406:	2b01      	cmp	r3, #1
 800e408:	d054      	beq.n	800e4b4 <USB_EPClearStall+0x10c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	781b      	ldrb	r3, [r3, #0]
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	4413      	add	r3, r2
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	4b2c      	ldr	r3, [pc, #176]	@ (800e4c8 <USB_EPClearStall+0x120>)
 800e418:	4013      	ands	r3, r2
 800e41a:	60bb      	str	r3, [r7, #8]
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	f083 0320 	eor.w	r3, r3, #32
 800e422:	60bb      	str	r3, [r7, #8]
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	781b      	ldrb	r3, [r3, #0]
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	441a      	add	r2, r3
 800e42e:	68bb      	ldr	r3, [r7, #8]
 800e430:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e438:	6013      	str	r3, [r2, #0]
 800e43a:	e03b      	b.n	800e4b4 <USB_EPClearStall+0x10c>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e43c:	687a      	ldr	r2, [r7, #4]
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	781b      	ldrb	r3, [r3, #0]
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	4413      	add	r3, r2
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	61fb      	str	r3, [r7, #28]
 800e44a:	69fb      	ldr	r3, [r7, #28]
 800e44c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e450:	2b00      	cmp	r3, #0
 800e452:	d013      	beq.n	800e47c <USB_EPClearStall+0xd4>
 800e454:	687a      	ldr	r2, [r7, #4]
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	009b      	lsls	r3, r3, #2
 800e45c:	4413      	add	r3, r2
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	4b18      	ldr	r3, [pc, #96]	@ (800e4c4 <USB_EPClearStall+0x11c>)
 800e462:	4013      	ands	r3, r2
 800e464:	61bb      	str	r3, [r7, #24]
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	009b      	lsls	r3, r3, #2
 800e46e:	441a      	add	r2, r3
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e476:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e47a:	6013      	str	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	4413      	add	r3, r2
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	4b10      	ldr	r3, [pc, #64]	@ (800e4cc <USB_EPClearStall+0x124>)
 800e48a:	4013      	ands	r3, r2
 800e48c:	617b      	str	r3, [r7, #20]
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e494:	617b      	str	r3, [r7, #20]
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e49c:	617b      	str	r3, [r7, #20]
 800e49e:	687a      	ldr	r2, [r7, #4]
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	441a      	add	r2, r3
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e4ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4b2:	6013      	str	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e4b4:	2300      	movs	r3, #0
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3724      	adds	r7, #36	@ 0x24
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c0:	4770      	bx	lr
 800e4c2:	bf00      	nop
 800e4c4:	07ff8f8f 	.word	0x07ff8f8f
 800e4c8:	07ff8fbf 	.word	0x07ff8fbf
 800e4cc:	07ffbf8f 	.word	0x07ffbf8f

0800e4d0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	b083      	sub	sp, #12
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	460b      	mov	r3, r1
 800e4da:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e4dc:	78fb      	ldrb	r3, [r7, #3]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d102      	bne.n	800e4e8 <USB_SetDevAddress+0x18>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2280      	movs	r2, #128	@ 0x80
 800e4e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e4e8:	2300      	movs	r3, #0
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	370c      	adds	r7, #12
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr

0800e4f6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800e4f6:	b480      	push	{r7}
 800e4f8:	b083      	sub	sp, #12
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e502:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e50a:	2300      	movs	r3, #0
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	370c      	adds	r7, #12
 800e510:	46bd      	mov	sp, r7
 800e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e516:	4770      	bx	lr

0800e518 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800e518:	b480      	push	{r7}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e524:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e52c:	2300      	movs	r3, #0
}
 800e52e:	4618      	mov	r0, r3
 800e530:	370c      	adds	r7, #12
 800e532:	46bd      	mov	sp, r7
 800e534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e538:	4770      	bx	lr

0800e53a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800e53a:	b480      	push	{r7}
 800e53c:	b085      	sub	sp, #20
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e546:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e548:	68fb      	ldr	r3, [r7, #12]
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3714      	adds	r7, #20
 800e54e:	46bd      	mov	sp, r7
 800e550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e554:	4770      	bx	lr

0800e556 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e556:	b480      	push	{r7}
 800e558:	b08b      	sub	sp, #44	@ 0x2c
 800e55a:	af00      	add	r7, sp, #0
 800e55c:	60f8      	str	r0, [r7, #12]
 800e55e:	60b9      	str	r1, [r7, #8]
 800e560:	4611      	mov	r1, r2
 800e562:	461a      	mov	r2, r3
 800e564:	460b      	mov	r3, r1
 800e566:	80fb      	strh	r3, [r7, #6]
 800e568:	4613      	mov	r3, r2
 800e56a:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800e56c:	88bb      	ldrh	r3, [r7, #4]
 800e56e:	3303      	adds	r3, #3
 800e570:	089b      	lsrs	r3, r3, #2
 800e572:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800e574:	88bb      	ldrh	r3, [r7, #4]
 800e576:	f003 0303 	and.w	r3, r3, #3
 800e57a:	82fb      	strh	r3, [r7, #22]
  uint8_t *pBuf = pbUsrBuf;
 800e57c:	68bb      	ldr	r3, [r7, #8]
 800e57e:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800e580:	8afb      	ldrh	r3, [r7, #22]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d002      	beq.n	800e58c <USB_WritePMA+0x36>
  {
    NbWords--;
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	3b01      	subs	r3, #1
 800e58a:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800e58c:	88fb      	ldrh	r3, [r7, #6]
 800e58e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e592:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e596:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800e598:	69bb      	ldr	r3, [r7, #24]
 800e59a:	623b      	str	r3, [r7, #32]
 800e59c:	e015      	b.n	800e5ca <USB_WritePMA+0x74>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	681a      	ldr	r2, [r3, #0]
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800e5a6:	69fb      	ldr	r3, [r7, #28]
 800e5a8:	3304      	adds	r3, #4
 800e5aa:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800e5ac:	693b      	ldr	r3, [r7, #16]
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	613b      	str	r3, [r7, #16]
    pBuf++;
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	3301      	adds	r3, #1
 800e5b6:	613b      	str	r3, [r7, #16]
    pBuf++;
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	613b      	str	r3, [r7, #16]
    pBuf++;
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800e5c4:	6a3b      	ldr	r3, [r7, #32]
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	623b      	str	r3, [r7, #32]
 800e5ca:	6a3b      	ldr	r3, [r7, #32]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d1e6      	bne.n	800e59e <USB_WritePMA+0x48>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800e5d0:	8afb      	ldrh	r3, [r7, #22]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d01a      	beq.n	800e60c <USB_WritePMA+0xb6>
  {
    WrVal = 0U;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	461a      	mov	r2, r3
 800e5e0:	6a3b      	ldr	r3, [r7, #32]
 800e5e2:	00db      	lsls	r3, r3, #3
 800e5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800e5e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5ea:	4313      	orrs	r3, r2
 800e5ec:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800e5ee:	6a3b      	ldr	r3, [r7, #32]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	623b      	str	r3, [r7, #32]
      pBuf++;
 800e5f4:	693b      	ldr	r3, [r7, #16]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800e5fa:	8afb      	ldrh	r3, [r7, #22]
 800e5fc:	3b01      	subs	r3, #1
 800e5fe:	82fb      	strh	r3, [r7, #22]
    } while (remaining_bytes != 0U);
 800e600:	8afb      	ldrh	r3, [r7, #22]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1e9      	bne.n	800e5da <USB_WritePMA+0x84>

    *pdwVal = WrVal;
 800e606:	69fb      	ldr	r3, [r7, #28]
 800e608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e60a:	601a      	str	r2, [r3, #0]
  }
}
 800e60c:	bf00      	nop
 800e60e:	372c      	adds	r7, #44	@ 0x2c
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e618:	b480      	push	{r7}
 800e61a:	b08b      	sub	sp, #44	@ 0x2c
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	4611      	mov	r1, r2
 800e624:	461a      	mov	r2, r3
 800e626:	460b      	mov	r3, r1
 800e628:	80fb      	strh	r3, [r7, #6]
 800e62a:	4613      	mov	r3, r2
 800e62c:	80bb      	strh	r3, [r7, #4]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800e62e:	88bb      	ldrh	r3, [r7, #4]
 800e630:	3303      	adds	r3, #3
 800e632:	089b      	lsrs	r3, r3, #2
 800e634:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800e636:	88bb      	ldrh	r3, [r7, #4]
 800e638:	f003 0303 	and.w	r3, r3, #3
 800e63c:	837b      	strh	r3, [r7, #26]
  uint8_t *pBuf = pbUsrBuf;
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800e642:	88fb      	ldrh	r3, [r7, #6]
 800e644:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e648:	f503 33b2 	add.w	r3, r3, #91136	@ 0x16400
 800e64c:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800e64e:	8b7b      	ldrh	r3, [r7, #26]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d002      	beq.n	800e65a <USB_ReadPMA+0x42>
  {
    NbWords--;
 800e654:	69fb      	ldr	r3, [r7, #28]
 800e656:	3b01      	subs	r3, #1
 800e658:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	627b      	str	r3, [r7, #36]	@ 0x24
 800e65e:	e015      	b.n	800e68c <USB_ReadPMA+0x74>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800e660:	6a3b      	ldr	r3, [r7, #32]
 800e662:	681a      	ldr	r2, [r3, #0]
 800e664:	697b      	ldr	r3, [r7, #20]
 800e666:	601a      	str	r2, [r3, #0]

    pdwVal++;
 800e668:	6a3b      	ldr	r3, [r7, #32]
 800e66a:	3304      	adds	r3, #4
 800e66c:	623b      	str	r3, [r7, #32]
    pBuf++;
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	3301      	adds	r3, #1
 800e672:	617b      	str	r3, [r7, #20]
    pBuf++;
 800e674:	697b      	ldr	r3, [r7, #20]
 800e676:	3301      	adds	r3, #1
 800e678:	617b      	str	r3, [r7, #20]
    pBuf++;
 800e67a:	697b      	ldr	r3, [r7, #20]
 800e67c:	3301      	adds	r3, #1
 800e67e:	617b      	str	r3, [r7, #20]
    pBuf++;
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	3301      	adds	r3, #1
 800e684:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800e686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e688:	3b01      	subs	r3, #1
 800e68a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d1e6      	bne.n	800e660 <USB_ReadPMA+0x48>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800e692:	8b7b      	ldrh	r3, [r7, #26]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d017      	beq.n	800e6c8 <USB_ReadPMA+0xb0>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800e698:	6a3b      	ldr	r3, [r7, #32]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800e69e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	00db      	lsls	r3, r3, #3
 800e6a4:	693a      	ldr	r2, [r7, #16]
 800e6a6:	fa22 f303 	lsr.w	r3, r2, r3
 800e6aa:	b2da      	uxtb	r2, r3
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	701a      	strb	r2, [r3, #0]
      count++;
 800e6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	3301      	adds	r3, #1
 800e6ba:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800e6bc:	8b7b      	ldrh	r3, [r7, #26]
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	837b      	strh	r3, [r7, #26]
    } while (remaining_bytes != 0U);
 800e6c2:	8b7b      	ldrh	r3, [r7, #26]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d1ea      	bne.n	800e69e <USB_ReadPMA+0x86>
  }
}
 800e6c8:	bf00      	nop
 800e6ca:	372c      	adds	r7, #44	@ 0x2c
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr

0800e6d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b084      	sub	sp, #16
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	460b      	mov	r3, r1
 800e6de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e6e0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e6e4:	f001 f8fa 	bl	800f8dc <USBD_static_malloc>
 800e6e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d109      	bne.n	800e704 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	32b0      	adds	r2, #176	@ 0xb0
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e700:	2302      	movs	r3, #2
 800e702:	e0d4      	b.n	800e8ae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e704:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e708:	2100      	movs	r1, #0
 800e70a:	68f8      	ldr	r0, [r7, #12]
 800e70c:	f002 fe0c 	bl	8011328 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	32b0      	adds	r2, #176	@ 0xb0
 800e71a:	68f9      	ldr	r1, [r7, #12]
 800e71c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	32b0      	adds	r2, #176	@ 0xb0
 800e72a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	7c1b      	ldrb	r3, [r3, #16]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d138      	bne.n	800e7ae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e73c:	4b5e      	ldr	r3, [pc, #376]	@ (800e8b8 <USBD_CDC_Init+0x1e4>)
 800e73e:	7819      	ldrb	r1, [r3, #0]
 800e740:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e744:	2202      	movs	r2, #2
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 ffcf 	bl	800f6ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e74c:	4b5a      	ldr	r3, [pc, #360]	@ (800e8b8 <USBD_CDC_Init+0x1e4>)
 800e74e:	781b      	ldrb	r3, [r3, #0]
 800e750:	f003 020f 	and.w	r2, r3, #15
 800e754:	6879      	ldr	r1, [r7, #4]
 800e756:	4613      	mov	r3, r2
 800e758:	009b      	lsls	r3, r3, #2
 800e75a:	4413      	add	r3, r2
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	440b      	add	r3, r1
 800e760:	3324      	adds	r3, #36	@ 0x24
 800e762:	2201      	movs	r2, #1
 800e764:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e766:	4b55      	ldr	r3, [pc, #340]	@ (800e8bc <USBD_CDC_Init+0x1e8>)
 800e768:	7819      	ldrb	r1, [r3, #0]
 800e76a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e76e:	2202      	movs	r2, #2
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 ffba 	bl	800f6ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e776:	4b51      	ldr	r3, [pc, #324]	@ (800e8bc <USBD_CDC_Init+0x1e8>)
 800e778:	781b      	ldrb	r3, [r3, #0]
 800e77a:	f003 020f 	and.w	r2, r3, #15
 800e77e:	6879      	ldr	r1, [r7, #4]
 800e780:	4613      	mov	r3, r2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4413      	add	r3, r2
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	440b      	add	r3, r1
 800e78a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e78e:	2201      	movs	r2, #1
 800e790:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e792:	4b4b      	ldr	r3, [pc, #300]	@ (800e8c0 <USBD_CDC_Init+0x1ec>)
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	f003 020f 	and.w	r2, r3, #15
 800e79a:	6879      	ldr	r1, [r7, #4]
 800e79c:	4613      	mov	r3, r2
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	4413      	add	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	440b      	add	r3, r1
 800e7a6:	3326      	adds	r3, #38	@ 0x26
 800e7a8:	2210      	movs	r2, #16
 800e7aa:	801a      	strh	r2, [r3, #0]
 800e7ac:	e035      	b.n	800e81a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e7ae:	4b42      	ldr	r3, [pc, #264]	@ (800e8b8 <USBD_CDC_Init+0x1e4>)
 800e7b0:	7819      	ldrb	r1, [r3, #0]
 800e7b2:	2340      	movs	r3, #64	@ 0x40
 800e7b4:	2202      	movs	r2, #2
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f000 ff97 	bl	800f6ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e7bc:	4b3e      	ldr	r3, [pc, #248]	@ (800e8b8 <USBD_CDC_Init+0x1e4>)
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	f003 020f 	and.w	r2, r3, #15
 800e7c4:	6879      	ldr	r1, [r7, #4]
 800e7c6:	4613      	mov	r3, r2
 800e7c8:	009b      	lsls	r3, r3, #2
 800e7ca:	4413      	add	r3, r2
 800e7cc:	009b      	lsls	r3, r3, #2
 800e7ce:	440b      	add	r3, r1
 800e7d0:	3324      	adds	r3, #36	@ 0x24
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e7d6:	4b39      	ldr	r3, [pc, #228]	@ (800e8bc <USBD_CDC_Init+0x1e8>)
 800e7d8:	7819      	ldrb	r1, [r3, #0]
 800e7da:	2340      	movs	r3, #64	@ 0x40
 800e7dc:	2202      	movs	r2, #2
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 ff83 	bl	800f6ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e7e4:	4b35      	ldr	r3, [pc, #212]	@ (800e8bc <USBD_CDC_Init+0x1e8>)
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	f003 020f 	and.w	r2, r3, #15
 800e7ec:	6879      	ldr	r1, [r7, #4]
 800e7ee:	4613      	mov	r3, r2
 800e7f0:	009b      	lsls	r3, r3, #2
 800e7f2:	4413      	add	r3, r2
 800e7f4:	009b      	lsls	r3, r3, #2
 800e7f6:	440b      	add	r3, r1
 800e7f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e800:	4b2f      	ldr	r3, [pc, #188]	@ (800e8c0 <USBD_CDC_Init+0x1ec>)
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	f003 020f 	and.w	r2, r3, #15
 800e808:	6879      	ldr	r1, [r7, #4]
 800e80a:	4613      	mov	r3, r2
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	4413      	add	r3, r2
 800e810:	009b      	lsls	r3, r3, #2
 800e812:	440b      	add	r3, r1
 800e814:	3326      	adds	r3, #38	@ 0x26
 800e816:	2210      	movs	r2, #16
 800e818:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e81a:	4b29      	ldr	r3, [pc, #164]	@ (800e8c0 <USBD_CDC_Init+0x1ec>)
 800e81c:	7819      	ldrb	r1, [r3, #0]
 800e81e:	2308      	movs	r3, #8
 800e820:	2203      	movs	r2, #3
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f000 ff61 	bl	800f6ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e828:	4b25      	ldr	r3, [pc, #148]	@ (800e8c0 <USBD_CDC_Init+0x1ec>)
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	f003 020f 	and.w	r2, r3, #15
 800e830:	6879      	ldr	r1, [r7, #4]
 800e832:	4613      	mov	r3, r2
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	4413      	add	r3, r2
 800e838:	009b      	lsls	r3, r3, #2
 800e83a:	440b      	add	r3, r1
 800e83c:	3324      	adds	r3, #36	@ 0x24
 800e83e:	2201      	movs	r2, #1
 800e840:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	2200      	movs	r2, #0
 800e846:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	33b0      	adds	r3, #176	@ 0xb0
 800e854:	009b      	lsls	r3, r3, #2
 800e856:	4413      	add	r3, r2
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2200      	movs	r2, #0
 800e862:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2200      	movs	r2, #0
 800e86a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e874:	2b00      	cmp	r3, #0
 800e876:	d101      	bne.n	800e87c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e878:	2302      	movs	r3, #2
 800e87a:	e018      	b.n	800e8ae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	7c1b      	ldrb	r3, [r3, #16]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d10a      	bne.n	800e89a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e884:	4b0d      	ldr	r3, [pc, #52]	@ (800e8bc <USBD_CDC_Init+0x1e8>)
 800e886:	7819      	ldrb	r1, [r3, #0]
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e88e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 fff4 	bl	800f880 <USBD_LL_PrepareReceive>
 800e898:	e008      	b.n	800e8ac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e89a:	4b08      	ldr	r3, [pc, #32]	@ (800e8bc <USBD_CDC_Init+0x1e8>)
 800e89c:	7819      	ldrb	r1, [r3, #0]
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e8a4:	2340      	movs	r3, #64	@ 0x40
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f000 ffea 	bl	800f880 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	200000b3 	.word	0x200000b3
 800e8bc:	200000b4 	.word	0x200000b4
 800e8c0:	200000b5 	.word	0x200000b5

0800e8c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b082      	sub	sp, #8
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e8d0:	4b3a      	ldr	r3, [pc, #232]	@ (800e9bc <USBD_CDC_DeInit+0xf8>)
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 ff27 	bl	800f72a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e8dc:	4b37      	ldr	r3, [pc, #220]	@ (800e9bc <USBD_CDC_DeInit+0xf8>)
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	f003 020f 	and.w	r2, r3, #15
 800e8e4:	6879      	ldr	r1, [r7, #4]
 800e8e6:	4613      	mov	r3, r2
 800e8e8:	009b      	lsls	r3, r3, #2
 800e8ea:	4413      	add	r3, r2
 800e8ec:	009b      	lsls	r3, r3, #2
 800e8ee:	440b      	add	r3, r1
 800e8f0:	3324      	adds	r3, #36	@ 0x24
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e8f6:	4b32      	ldr	r3, [pc, #200]	@ (800e9c0 <USBD_CDC_DeInit+0xfc>)
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	6878      	ldr	r0, [r7, #4]
 800e8fe:	f000 ff14 	bl	800f72a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e902:	4b2f      	ldr	r3, [pc, #188]	@ (800e9c0 <USBD_CDC_DeInit+0xfc>)
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	f003 020f 	and.w	r2, r3, #15
 800e90a:	6879      	ldr	r1, [r7, #4]
 800e90c:	4613      	mov	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4413      	add	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	440b      	add	r3, r1
 800e916:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e91a:	2200      	movs	r2, #0
 800e91c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e91e:	4b29      	ldr	r3, [pc, #164]	@ (800e9c4 <USBD_CDC_DeInit+0x100>)
 800e920:	781b      	ldrb	r3, [r3, #0]
 800e922:	4619      	mov	r1, r3
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f000 ff00 	bl	800f72a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e92a:	4b26      	ldr	r3, [pc, #152]	@ (800e9c4 <USBD_CDC_DeInit+0x100>)
 800e92c:	781b      	ldrb	r3, [r3, #0]
 800e92e:	f003 020f 	and.w	r2, r3, #15
 800e932:	6879      	ldr	r1, [r7, #4]
 800e934:	4613      	mov	r3, r2
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	4413      	add	r3, r2
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	440b      	add	r3, r1
 800e93e:	3324      	adds	r3, #36	@ 0x24
 800e940:	2200      	movs	r2, #0
 800e942:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e944:	4b1f      	ldr	r3, [pc, #124]	@ (800e9c4 <USBD_CDC_DeInit+0x100>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	f003 020f 	and.w	r2, r3, #15
 800e94c:	6879      	ldr	r1, [r7, #4]
 800e94e:	4613      	mov	r3, r2
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	4413      	add	r3, r2
 800e954:	009b      	lsls	r3, r3, #2
 800e956:	440b      	add	r3, r1
 800e958:	3326      	adds	r3, #38	@ 0x26
 800e95a:	2200      	movs	r2, #0
 800e95c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	32b0      	adds	r2, #176	@ 0xb0
 800e968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d01f      	beq.n	800e9b0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	33b0      	adds	r3, #176	@ 0xb0
 800e97a:	009b      	lsls	r3, r3, #2
 800e97c:	4413      	add	r3, r2
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	685b      	ldr	r3, [r3, #4]
 800e982:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	32b0      	adds	r2, #176	@ 0xb0
 800e98e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e992:	4618      	mov	r0, r3
 800e994:	f000 ffb0 	bl	800f8f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	32b0      	adds	r2, #176	@ 0xb0
 800e9a2:	2100      	movs	r1, #0
 800e9a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e9b0:	2300      	movs	r3, #0
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	200000b3 	.word	0x200000b3
 800e9c0:	200000b4 	.word	0x200000b4
 800e9c4:	200000b5 	.word	0x200000b5

0800e9c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b086      	sub	sp, #24
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	32b0      	adds	r2, #176	@ 0xb0
 800e9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d101      	bne.n	800e9f8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e9f4:	2303      	movs	r3, #3
 800e9f6:	e0bf      	b.n	800eb78 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d050      	beq.n	800eaa6 <USBD_CDC_Setup+0xde>
 800ea04:	2b20      	cmp	r3, #32
 800ea06:	f040 80af 	bne.w	800eb68 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	88db      	ldrh	r3, [r3, #6]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d03a      	beq.n	800ea88 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	b25b      	sxtb	r3, r3
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	da1b      	bge.n	800ea54 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ea22:	687a      	ldr	r2, [r7, #4]
 800ea24:	33b0      	adds	r3, #176	@ 0xb0
 800ea26:	009b      	lsls	r3, r3, #2
 800ea28:	4413      	add	r3, r2
 800ea2a:	685b      	ldr	r3, [r3, #4]
 800ea2c:	689b      	ldr	r3, [r3, #8]
 800ea2e:	683a      	ldr	r2, [r7, #0]
 800ea30:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ea32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ea34:	683a      	ldr	r2, [r7, #0]
 800ea36:	88d2      	ldrh	r2, [r2, #6]
 800ea38:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	88db      	ldrh	r3, [r3, #6]
 800ea3e:	2b07      	cmp	r3, #7
 800ea40:	bf28      	it	cs
 800ea42:	2307      	movcs	r3, #7
 800ea44:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ea46:	693b      	ldr	r3, [r7, #16]
 800ea48:	89fa      	ldrh	r2, [r7, #14]
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f002 fa46 	bl	8010ede <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ea52:	e090      	b.n	800eb76 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	785a      	ldrb	r2, [r3, #1]
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	88db      	ldrh	r3, [r3, #6]
 800ea62:	2b3f      	cmp	r3, #63	@ 0x3f
 800ea64:	d803      	bhi.n	800ea6e <USBD_CDC_Setup+0xa6>
 800ea66:	683b      	ldr	r3, [r7, #0]
 800ea68:	88db      	ldrh	r3, [r3, #6]
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	e000      	b.n	800ea70 <USBD_CDC_Setup+0xa8>
 800ea6e:	2240      	movs	r2, #64	@ 0x40
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ea76:	6939      	ldr	r1, [r7, #16]
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ea7e:	461a      	mov	r2, r3
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f002 fa58 	bl	8010f36 <USBD_CtlPrepareRx>
      break;
 800ea86:	e076      	b.n	800eb76 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ea8e:	687a      	ldr	r2, [r7, #4]
 800ea90:	33b0      	adds	r3, #176	@ 0xb0
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4413      	add	r3, r2
 800ea96:	685b      	ldr	r3, [r3, #4]
 800ea98:	689b      	ldr	r3, [r3, #8]
 800ea9a:	683a      	ldr	r2, [r7, #0]
 800ea9c:	7850      	ldrb	r0, [r2, #1]
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	6839      	ldr	r1, [r7, #0]
 800eaa2:	4798      	blx	r3
      break;
 800eaa4:	e067      	b.n	800eb76 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eaa6:	683b      	ldr	r3, [r7, #0]
 800eaa8:	785b      	ldrb	r3, [r3, #1]
 800eaaa:	2b0b      	cmp	r3, #11
 800eaac:	d851      	bhi.n	800eb52 <USBD_CDC_Setup+0x18a>
 800eaae:	a201      	add	r2, pc, #4	@ (adr r2, 800eab4 <USBD_CDC_Setup+0xec>)
 800eab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab4:	0800eae5 	.word	0x0800eae5
 800eab8:	0800eb61 	.word	0x0800eb61
 800eabc:	0800eb53 	.word	0x0800eb53
 800eac0:	0800eb53 	.word	0x0800eb53
 800eac4:	0800eb53 	.word	0x0800eb53
 800eac8:	0800eb53 	.word	0x0800eb53
 800eacc:	0800eb53 	.word	0x0800eb53
 800ead0:	0800eb53 	.word	0x0800eb53
 800ead4:	0800eb53 	.word	0x0800eb53
 800ead8:	0800eb53 	.word	0x0800eb53
 800eadc:	0800eb0f 	.word	0x0800eb0f
 800eae0:	0800eb39 	.word	0x0800eb39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eaea:	b2db      	uxtb	r3, r3
 800eaec:	2b03      	cmp	r3, #3
 800eaee:	d107      	bne.n	800eb00 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800eaf0:	f107 030a 	add.w	r3, r7, #10
 800eaf4:	2202      	movs	r2, #2
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f002 f9f0 	bl	8010ede <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eafe:	e032      	b.n	800eb66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800eb00:	6839      	ldr	r1, [r7, #0]
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f002 f86d 	bl	8010be2 <USBD_CtlError>
            ret = USBD_FAIL;
 800eb08:	2303      	movs	r3, #3
 800eb0a:	75fb      	strb	r3, [r7, #23]
          break;
 800eb0c:	e02b      	b.n	800eb66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	2b03      	cmp	r3, #3
 800eb18:	d107      	bne.n	800eb2a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800eb1a:	f107 030d 	add.w	r3, r7, #13
 800eb1e:	2201      	movs	r2, #1
 800eb20:	4619      	mov	r1, r3
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f002 f9db 	bl	8010ede <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eb28:	e01d      	b.n	800eb66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800eb2a:	6839      	ldr	r1, [r7, #0]
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f002 f858 	bl	8010be2 <USBD_CtlError>
            ret = USBD_FAIL;
 800eb32:	2303      	movs	r3, #3
 800eb34:	75fb      	strb	r3, [r7, #23]
          break;
 800eb36:	e016      	b.n	800eb66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	2b03      	cmp	r3, #3
 800eb42:	d00f      	beq.n	800eb64 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800eb44:	6839      	ldr	r1, [r7, #0]
 800eb46:	6878      	ldr	r0, [r7, #4]
 800eb48:	f002 f84b 	bl	8010be2 <USBD_CtlError>
            ret = USBD_FAIL;
 800eb4c:	2303      	movs	r3, #3
 800eb4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800eb50:	e008      	b.n	800eb64 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800eb52:	6839      	ldr	r1, [r7, #0]
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f002 f844 	bl	8010be2 <USBD_CtlError>
          ret = USBD_FAIL;
 800eb5a:	2303      	movs	r3, #3
 800eb5c:	75fb      	strb	r3, [r7, #23]
          break;
 800eb5e:	e002      	b.n	800eb66 <USBD_CDC_Setup+0x19e>
          break;
 800eb60:	bf00      	nop
 800eb62:	e008      	b.n	800eb76 <USBD_CDC_Setup+0x1ae>
          break;
 800eb64:	bf00      	nop
      }
      break;
 800eb66:	e006      	b.n	800eb76 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800eb68:	6839      	ldr	r1, [r7, #0]
 800eb6a:	6878      	ldr	r0, [r7, #4]
 800eb6c:	f002 f839 	bl	8010be2 <USBD_CtlError>
      ret = USBD_FAIL;
 800eb70:	2303      	movs	r3, #3
 800eb72:	75fb      	strb	r3, [r7, #23]
      break;
 800eb74:	bf00      	nop
  }

  return (uint8_t)ret;
 800eb76:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3718      	adds	r7, #24
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b084      	sub	sp, #16
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	460b      	mov	r3, r1
 800eb8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eb92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	32b0      	adds	r2, #176	@ 0xb0
 800eb9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d101      	bne.n	800ebaa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800eba6:	2303      	movs	r3, #3
 800eba8:	e065      	b.n	800ec76 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	32b0      	adds	r2, #176	@ 0xb0
 800ebb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ebba:	78fb      	ldrb	r3, [r7, #3]
 800ebbc:	f003 020f 	and.w	r2, r3, #15
 800ebc0:	6879      	ldr	r1, [r7, #4]
 800ebc2:	4613      	mov	r3, r2
 800ebc4:	009b      	lsls	r3, r3, #2
 800ebc6:	4413      	add	r3, r2
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	440b      	add	r3, r1
 800ebcc:	3318      	adds	r3, #24
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d02f      	beq.n	800ec34 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ebd4:	78fb      	ldrb	r3, [r7, #3]
 800ebd6:	f003 020f 	and.w	r2, r3, #15
 800ebda:	6879      	ldr	r1, [r7, #4]
 800ebdc:	4613      	mov	r3, r2
 800ebde:	009b      	lsls	r3, r3, #2
 800ebe0:	4413      	add	r3, r2
 800ebe2:	009b      	lsls	r3, r3, #2
 800ebe4:	440b      	add	r3, r1
 800ebe6:	3318      	adds	r3, #24
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	78fb      	ldrb	r3, [r7, #3]
 800ebec:	f003 010f 	and.w	r1, r3, #15
 800ebf0:	68f8      	ldr	r0, [r7, #12]
 800ebf2:	460b      	mov	r3, r1
 800ebf4:	009b      	lsls	r3, r3, #2
 800ebf6:	440b      	add	r3, r1
 800ebf8:	00db      	lsls	r3, r3, #3
 800ebfa:	4403      	add	r3, r0
 800ebfc:	3324      	adds	r3, #36	@ 0x24
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	fbb2 f1f3 	udiv	r1, r2, r3
 800ec04:	fb01 f303 	mul.w	r3, r1, r3
 800ec08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d112      	bne.n	800ec34 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ec0e:	78fb      	ldrb	r3, [r7, #3]
 800ec10:	f003 020f 	and.w	r2, r3, #15
 800ec14:	6879      	ldr	r1, [r7, #4]
 800ec16:	4613      	mov	r3, r2
 800ec18:	009b      	lsls	r3, r3, #2
 800ec1a:	4413      	add	r3, r2
 800ec1c:	009b      	lsls	r3, r3, #2
 800ec1e:	440b      	add	r3, r1
 800ec20:	3318      	adds	r3, #24
 800ec22:	2200      	movs	r2, #0
 800ec24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ec26:	78f9      	ldrb	r1, [r7, #3]
 800ec28:	2300      	movs	r3, #0
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f000 fe0c 	bl	800f84a <USBD_LL_Transmit>
 800ec32:	e01f      	b.n	800ec74 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	2200      	movs	r2, #0
 800ec38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ec42:	687a      	ldr	r2, [r7, #4]
 800ec44:	33b0      	adds	r3, #176	@ 0xb0
 800ec46:	009b      	lsls	r3, r3, #2
 800ec48:	4413      	add	r3, r2
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	691b      	ldr	r3, [r3, #16]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d010      	beq.n	800ec74 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	33b0      	adds	r3, #176	@ 0xb0
 800ec5c:	009b      	lsls	r3, r3, #2
 800ec5e:	4413      	add	r3, r2
 800ec60:	685b      	ldr	r3, [r3, #4]
 800ec62:	691b      	ldr	r3, [r3, #16]
 800ec64:	68ba      	ldr	r2, [r7, #8]
 800ec66:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ec6a:	68ba      	ldr	r2, [r7, #8]
 800ec6c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ec70:	78fa      	ldrb	r2, [r7, #3]
 800ec72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ec74:	2300      	movs	r3, #0
}
 800ec76:	4618      	mov	r0, r3
 800ec78:	3710      	adds	r7, #16
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b084      	sub	sp, #16
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
 800ec86:	460b      	mov	r3, r1
 800ec88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	32b0      	adds	r2, #176	@ 0xb0
 800ec94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	32b0      	adds	r2, #176	@ 0xb0
 800eca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d101      	bne.n	800ecb0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ecac:	2303      	movs	r3, #3
 800ecae:	e01a      	b.n	800ece6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ecb0:	78fb      	ldrb	r3, [r7, #3]
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 fdfe 	bl	800f8b6 <USBD_LL_GetRxDataSize>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ecc8:	687a      	ldr	r2, [r7, #4]
 800ecca:	33b0      	adds	r3, #176	@ 0xb0
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	4413      	add	r3, r2
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ecda:	68fa      	ldr	r2, [r7, #12]
 800ecdc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ece0:	4611      	mov	r1, r2
 800ece2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ece4:	2300      	movs	r3, #0
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b084      	sub	sp, #16
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	32b0      	adds	r2, #176	@ 0xb0
 800ed00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d101      	bne.n	800ed10 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ed0c:	2303      	movs	r3, #3
 800ed0e:	e024      	b.n	800ed5a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	33b0      	adds	r3, #176	@ 0xb0
 800ed1a:	009b      	lsls	r3, r3, #2
 800ed1c:	4413      	add	r3, r2
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d019      	beq.n	800ed58 <USBD_CDC_EP0_RxReady+0x6a>
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ed2a:	2bff      	cmp	r3, #255	@ 0xff
 800ed2c:	d014      	beq.n	800ed58 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ed34:	687a      	ldr	r2, [r7, #4]
 800ed36:	33b0      	adds	r3, #176	@ 0xb0
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	4413      	add	r3, r2
 800ed3c:	685b      	ldr	r3, [r3, #4]
 800ed3e:	689b      	ldr	r3, [r3, #8]
 800ed40:	68fa      	ldr	r2, [r7, #12]
 800ed42:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ed46:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ed4e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	22ff      	movs	r2, #255	@ 0xff
 800ed54:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ed58:	2300      	movs	r3, #0
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	3710      	adds	r7, #16
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
	...

0800ed64 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ed6c:	2182      	movs	r1, #130	@ 0x82
 800ed6e:	4818      	ldr	r0, [pc, #96]	@ (800edd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ed70:	f001 f901 	bl	800ff76 <USBD_GetEpDesc>
 800ed74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ed76:	2101      	movs	r1, #1
 800ed78:	4815      	ldr	r0, [pc, #84]	@ (800edd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ed7a:	f001 f8fc 	bl	800ff76 <USBD_GetEpDesc>
 800ed7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ed80:	2181      	movs	r1, #129	@ 0x81
 800ed82:	4813      	ldr	r0, [pc, #76]	@ (800edd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ed84:	f001 f8f7 	bl	800ff76 <USBD_GetEpDesc>
 800ed88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ed90:	697b      	ldr	r3, [r7, #20]
 800ed92:	2210      	movs	r2, #16
 800ed94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d006      	beq.n	800edaa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eda4:	711a      	strb	r2, [r3, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d006      	beq.n	800edbe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800edb8:	711a      	strb	r2, [r3, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2243      	movs	r2, #67	@ 0x43
 800edc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800edc4:	4b02      	ldr	r3, [pc, #8]	@ (800edd0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3718      	adds	r7, #24
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
 800edce:	bf00      	nop
 800edd0:	20000070 	.word	0x20000070

0800edd4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b086      	sub	sp, #24
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eddc:	2182      	movs	r1, #130	@ 0x82
 800edde:	4818      	ldr	r0, [pc, #96]	@ (800ee40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ede0:	f001 f8c9 	bl	800ff76 <USBD_GetEpDesc>
 800ede4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ede6:	2101      	movs	r1, #1
 800ede8:	4815      	ldr	r0, [pc, #84]	@ (800ee40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800edea:	f001 f8c4 	bl	800ff76 <USBD_GetEpDesc>
 800edee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800edf0:	2181      	movs	r1, #129	@ 0x81
 800edf2:	4813      	ldr	r0, [pc, #76]	@ (800ee40 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800edf4:	f001 f8bf 	bl	800ff76 <USBD_GetEpDesc>
 800edf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d002      	beq.n	800ee06 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	2210      	movs	r2, #16
 800ee04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ee06:	693b      	ldr	r3, [r7, #16]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d006      	beq.n	800ee1a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	711a      	strb	r2, [r3, #4]
 800ee12:	2200      	movs	r2, #0
 800ee14:	f042 0202 	orr.w	r2, r2, #2
 800ee18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d006      	beq.n	800ee2e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	2200      	movs	r2, #0
 800ee24:	711a      	strb	r2, [r3, #4]
 800ee26:	2200      	movs	r2, #0
 800ee28:	f042 0202 	orr.w	r2, r2, #2
 800ee2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2243      	movs	r2, #67	@ 0x43
 800ee32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ee34:	4b02      	ldr	r3, [pc, #8]	@ (800ee40 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	3718      	adds	r7, #24
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}
 800ee3e:	bf00      	nop
 800ee40:	20000070 	.word	0x20000070

0800ee44 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b086      	sub	sp, #24
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ee4c:	2182      	movs	r1, #130	@ 0x82
 800ee4e:	4818      	ldr	r0, [pc, #96]	@ (800eeb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ee50:	f001 f891 	bl	800ff76 <USBD_GetEpDesc>
 800ee54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ee56:	2101      	movs	r1, #1
 800ee58:	4815      	ldr	r0, [pc, #84]	@ (800eeb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ee5a:	f001 f88c 	bl	800ff76 <USBD_GetEpDesc>
 800ee5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ee60:	2181      	movs	r1, #129	@ 0x81
 800ee62:	4813      	ldr	r0, [pc, #76]	@ (800eeb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ee64:	f001 f887 	bl	800ff76 <USBD_GetEpDesc>
 800ee68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d002      	beq.n	800ee76 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	2210      	movs	r2, #16
 800ee74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ee76:	693b      	ldr	r3, [r7, #16]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d006      	beq.n	800ee8a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ee84:	711a      	strb	r2, [r3, #4]
 800ee86:	2200      	movs	r2, #0
 800ee88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d006      	beq.n	800ee9e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2200      	movs	r2, #0
 800ee94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ee98:	711a      	strb	r2, [r3, #4]
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	2243      	movs	r2, #67	@ 0x43
 800eea2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eea4:	4b02      	ldr	r3, [pc, #8]	@ (800eeb0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3718      	adds	r7, #24
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	20000070 	.word	0x20000070

0800eeb4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	220a      	movs	r2, #10
 800eec0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800eec2:	4b03      	ldr	r3, [pc, #12]	@ (800eed0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	370c      	adds	r7, #12
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr
 800eed0:	2000002c 	.word	0x2000002c

0800eed4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d101      	bne.n	800eee8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eee4:	2303      	movs	r3, #3
 800eee6:	e009      	b.n	800eefc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	33b0      	adds	r3, #176	@ 0xb0
 800eef2:	009b      	lsls	r3, r3, #2
 800eef4:	4413      	add	r3, r2
 800eef6:	683a      	ldr	r2, [r7, #0]
 800eef8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800eefa:	2300      	movs	r3, #0
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	370c      	adds	r7, #12
 800ef00:	46bd      	mov	sp, r7
 800ef02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef06:	4770      	bx	lr

0800ef08 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b087      	sub	sp, #28
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	60f8      	str	r0, [r7, #12]
 800ef10:	60b9      	str	r1, [r7, #8]
 800ef12:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	32b0      	adds	r2, #176	@ 0xb0
 800ef1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef22:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d101      	bne.n	800ef2e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ef2a:	2303      	movs	r3, #3
 800ef2c:	e008      	b.n	800ef40 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ef2e:	697b      	ldr	r3, [r7, #20]
 800ef30:	68ba      	ldr	r2, [r7, #8]
 800ef32:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	687a      	ldr	r2, [r7, #4]
 800ef3a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ef3e:	2300      	movs	r3, #0
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	371c      	adds	r7, #28
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr

0800ef4c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b085      	sub	sp, #20
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	32b0      	adds	r2, #176	@ 0xb0
 800ef60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef64:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d101      	bne.n	800ef70 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ef6c:	2303      	movs	r3, #3
 800ef6e:	e004      	b.n	800ef7a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	683a      	ldr	r2, [r7, #0]
 800ef74:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ef78:	2300      	movs	r3, #0
}
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	3714      	adds	r7, #20
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr
	...

0800ef88 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b084      	sub	sp, #16
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	32b0      	adds	r2, #176	@ 0xb0
 800ef9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef9e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800efa0:	2301      	movs	r3, #1
 800efa2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d101      	bne.n	800efae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800efaa:	2303      	movs	r3, #3
 800efac:	e025      	b.n	800effa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800efae:	68bb      	ldr	r3, [r7, #8]
 800efb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d11f      	bne.n	800eff8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	2201      	movs	r2, #1
 800efbc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800efc0:	4b10      	ldr	r3, [pc, #64]	@ (800f004 <USBD_CDC_TransmitPacket+0x7c>)
 800efc2:	781b      	ldrb	r3, [r3, #0]
 800efc4:	f003 020f 	and.w	r2, r3, #15
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	4613      	mov	r3, r2
 800efd2:	009b      	lsls	r3, r3, #2
 800efd4:	4413      	add	r3, r2
 800efd6:	009b      	lsls	r3, r3, #2
 800efd8:	4403      	add	r3, r0
 800efda:	3318      	adds	r3, #24
 800efdc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800efde:	4b09      	ldr	r3, [pc, #36]	@ (800f004 <USBD_CDC_TransmitPacket+0x7c>)
 800efe0:	7819      	ldrb	r1, [r3, #0]
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f000 fc2b 	bl	800f84a <USBD_LL_Transmit>

    ret = USBD_OK;
 800eff4:	2300      	movs	r3, #0
 800eff6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800eff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800effa:	4618      	mov	r0, r3
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	200000b3 	.word	0x200000b3

0800f008 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b084      	sub	sp, #16
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	32b0      	adds	r2, #176	@ 0xb0
 800f01a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f01e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	32b0      	adds	r2, #176	@ 0xb0
 800f02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d101      	bne.n	800f036 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800f032:	2303      	movs	r3, #3
 800f034:	e018      	b.n	800f068 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	7c1b      	ldrb	r3, [r3, #16]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d10a      	bne.n	800f054 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f03e:	4b0c      	ldr	r3, [pc, #48]	@ (800f070 <USBD_CDC_ReceivePacket+0x68>)
 800f040:	7819      	ldrb	r1, [r3, #0]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f048:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 fc17 	bl	800f880 <USBD_LL_PrepareReceive>
 800f052:	e008      	b.n	800f066 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f054:	4b06      	ldr	r3, [pc, #24]	@ (800f070 <USBD_CDC_ReceivePacket+0x68>)
 800f056:	7819      	ldrb	r1, [r3, #0]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f05e:	2340      	movs	r3, #64	@ 0x40
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f000 fc0d 	bl	800f880 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f066:	2300      	movs	r3, #0
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	200000b4 	.word	0x200000b4

0800f074 <TEMPLATE_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Init(void)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	af00      	add	r7, sp, #0
      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f078:	2200      	movs	r2, #0
 800f07a:	4905      	ldr	r1, [pc, #20]	@ (800f090 <TEMPLATE_Init+0x1c>)
 800f07c:	4805      	ldr	r0, [pc, #20]	@ (800f094 <TEMPLATE_Init+0x20>)
 800f07e:	f7ff ff43 	bl	800ef08 <USBD_CDC_SetTxBuffer>
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f082:	4905      	ldr	r1, [pc, #20]	@ (800f098 <TEMPLATE_Init+0x24>)
 800f084:	4803      	ldr	r0, [pc, #12]	@ (800f094 <TEMPLATE_Init+0x20>)
 800f086:	f7ff ff61 	bl	800ef4c <USBD_CDC_SetRxBuffer>
      return (0);
 800f08a:	2300      	movs	r3, #0
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	bd80      	pop	{r7, pc}
 800f090:	20000d3c 	.word	0x20000d3c
 800f094:	200007b4 	.word	0x200007b4
 800f098:	20000b3c 	.word	0x20000b3c

0800f09c <TEMPLATE_DeInit>:
  *         DeInitializes the CDC media low layer
  * @param  None
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_DeInit(void)
{
 800f09c:	b480      	push	{r7}
 800f09e:	af00      	add	r7, sp, #0
  /*
     Add your deinitialization code here
  */
  return (0);
 800f0a0:	2300      	movs	r3, #0
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr

0800f0ac <USB_Transmit>:

uint8_t USB_Transmit(uint8_t *data, uint32_t len)
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b0a4      	sub	sp, #144	@ 0x90
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]
    uint32_t offset = 0;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    const uint32_t bytesPerLine = 16;
 800f0bc:	2310      	movs	r3, #16
 800f0be:	67bb      	str	r3, [r7, #120]	@ 0x78

    while (offset < len)
 800f0c0:	e0a4      	b.n	800f20c <USB_Transmit+0x160>
    {
        uint16_t chunk_len = ((len - offset) >= CDC_BLOCK_SIZE) ? CDC_BLOCK_SIZE : (len - offset);
 800f0c2:	683a      	ldr	r2, [r7, #0]
 800f0c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f0c8:	1ad3      	subs	r3, r2, r3
 800f0ca:	2b40      	cmp	r3, #64	@ 0x40
 800f0cc:	bf28      	it	cs
 800f0ce:	2340      	movcs	r3, #64	@ 0x40
 800f0d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        tx_complete = 0;
 800f0d4:	4b53      	ldr	r3, [pc, #332]	@ (800f224 <USB_Transmit+0x178>)
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	701a      	strb	r2, [r3, #0]
        USBD_CDC_SetTxBuffer(&hUsbDeviceFS, &data[offset], chunk_len);
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f0e0:	4413      	add	r3, r2
 800f0e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	484f      	ldr	r0, [pc, #316]	@ (800f228 <USB_Transmit+0x17c>)
 800f0ea:	f7ff ff0d 	bl	800ef08 <USBD_CDC_SetTxBuffer>

        // Log in 32-byte lines
        uint32_t printed = 0;
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 800f0f4:	e056      	b.n	800f1a4 <USB_Transmit+0xf8>
        {
            uint32_t lineLen = ((chunk_len - printed) > bytesPerLine) ? bytesPerLine : (chunk_len - printed);
 800f0f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800f0fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f0fe:	1ad3      	subs	r3, r2, r3
 800f100:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800f102:	4293      	cmp	r3, r2
 800f104:	bf28      	it	cs
 800f106:	4613      	movcs	r3, r2
 800f108:	673b      	str	r3, [r7, #112]	@ 0x70
            char log_line[BYTES_PER_LINE * 3 + 1] = {0};
 800f10a:	2300      	movs	r3, #0
 800f10c:	60bb      	str	r3, [r7, #8]
 800f10e:	f107 030c 	add.w	r3, r7, #12
 800f112:	225d      	movs	r2, #93	@ 0x5d
 800f114:	2100      	movs	r1, #0
 800f116:	4618      	mov	r0, r3
 800f118:	f002 f906 	bl	8011328 <memset>
            char *ptr = log_line;
 800f11c:	f107 0308 	add.w	r3, r7, #8
 800f120:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

            for (uint32_t i = 0; i < lineLen; i++)
 800f124:	2300      	movs	r3, #0
 800f126:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f12a:	e01c      	b.n	800f166 <USB_Transmit+0xba>
            {
                ptr += snprintf(ptr, 4, "%02X ", data[offset + printed + i]);
 800f12c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f130:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f134:	441a      	add	r2, r3
 800f136:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f13a:	4413      	add	r3, r2
 800f13c:	687a      	ldr	r2, [r7, #4]
 800f13e:	4413      	add	r3, r2
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	4a3a      	ldr	r2, [pc, #232]	@ (800f22c <USB_Transmit+0x180>)
 800f144:	2104      	movs	r1, #4
 800f146:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800f14a:	f002 f81d 	bl	8011188 <sniprintf>
 800f14e:	4603      	mov	r3, r0
 800f150:	461a      	mov	r2, r3
 800f152:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f156:	4413      	add	r3, r2
 800f158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            for (uint32_t i = 0; i < lineLen; i++)
 800f15c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800f160:	3301      	adds	r3, #1
 800f162:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800f166:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f16a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f16c:	429a      	cmp	r2, r3
 800f16e:	d3dd      	bcc.n	800f12c <USB_Transmit+0x80>
            }

            if (printed == 0)
 800f170:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f174:	2b00      	cmp	r3, #0
 800f176:	d108      	bne.n	800f18a <USB_Transmit+0xde>
            {
                log_info("USB Tx [%d bytes]: %s", chunk_len, log_line);
 800f178:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800f17c:	f107 0208 	add.w	r2, r7, #8
 800f180:	4619      	mov	r1, r3
 800f182:	482b      	ldr	r0, [pc, #172]	@ (800f230 <USB_Transmit+0x184>)
 800f184:	f7f1 ffc2 	bl	800110c <log_info>
 800f188:	e006      	b.n	800f198 <USB_Transmit+0xec>
            }
            else
            {
                log_info("%19s%s", "", log_line);
 800f18a:	f107 0308 	add.w	r3, r7, #8
 800f18e:	461a      	mov	r2, r3
 800f190:	4928      	ldr	r1, [pc, #160]	@ (800f234 <USB_Transmit+0x188>)
 800f192:	4829      	ldr	r0, [pc, #164]	@ (800f238 <USB_Transmit+0x18c>)
 800f194:	f7f1 ffba 	bl	800110c <log_info>
            }

            printed += lineLen;
 800f198:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f19c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f19e:	4413      	add	r3, r2
 800f1a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        while (printed < chunk_len)
 800f1a4:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800f1a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d3a2      	bcc.n	800f0f6 <USB_Transmit+0x4a>
        }

        if (USBD_CDC_TransmitPacket(&hUsbDeviceFS) != USBD_OK)
 800f1b0:	481d      	ldr	r0, [pc, #116]	@ (800f228 <USB_Transmit+0x17c>)
 800f1b2:	f7ff fee9 	bl	800ef88 <USBD_CDC_TransmitPacket>
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d001      	beq.n	800f1c0 <USB_Transmit+0x114>
        {
            return USBD_FAIL;
 800f1bc:	2303      	movs	r3, #3
 800f1be:	e02c      	b.n	800f21a <USB_Transmit+0x16e>
        }

        uint32_t timeout = 10000;
 800f1c0:	f242 7310 	movw	r3, #10000	@ 0x2710
 800f1c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
        while (tx_complete == 0 && timeout--);
 800f1c6:	bf00      	nop
 800f1c8:	4b16      	ldr	r3, [pc, #88]	@ (800f224 <USB_Transmit+0x178>)
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d104      	bne.n	800f1dc <USB_Transmit+0x130>
 800f1d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f1d4:	1e5a      	subs	r2, r3, #1
 800f1d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d1f5      	bne.n	800f1c8 <USB_Transmit+0x11c>
        if (timeout == 0)
 800f1dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d104      	bne.n	800f1ec <USB_Transmit+0x140>
        {
            log_error("USB TX Timeout");
 800f1e2:	4816      	ldr	r0, [pc, #88]	@ (800f23c <USB_Transmit+0x190>)
 800f1e4:	f7f1 ffc6 	bl	8001174 <log_error>
            return USBD_FAIL;
 800f1e8:	2303      	movs	r3, #3
 800f1ea:	e016      	b.n	800f21a <USB_Transmit+0x16e>
        }

        offset += chunk_len;
 800f1ec:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800f1f0:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f1f4:	4413      	add	r3, r2
 800f1f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        for (volatile int i = 0; i < 200; i++);
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f1fe:	e002      	b.n	800f206 <USB_Transmit+0x15a>
 800f200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f202:	3301      	adds	r3, #1
 800f204:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800f206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f208:	2bc7      	cmp	r3, #199	@ 0xc7
 800f20a:	ddf9      	ble.n	800f200 <USB_Transmit+0x154>
    while (offset < len)
 800f20c:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	429a      	cmp	r2, r3
 800f214:	f4ff af55 	bcc.w	800f0c2 <USB_Transmit+0x16>
    }

    return USBD_OK;
 800f218:	2300      	movs	r3, #0
}
 800f21a:	4618      	mov	r0, r3
 800f21c:	3790      	adds	r7, #144	@ 0x90
 800f21e:	46bd      	mov	sp, r7
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	200000b6 	.word	0x200000b6
 800f228:	200007b4 	.word	0x200007b4
 800f22c:	08012a30 	.word	0x08012a30
 800f230:	08012a38 	.word	0x08012a38
 800f234:	08012a50 	.word	0x08012a50
 800f238:	08012a54 	.word	0x08012a54
 800f23c:	08012a5c 	.word	0x08012a5c

0800f240 <TEMPLATE_Control>:
  * @param  Buf: Buffer containing command data (request parameters)
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Control(uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 800f240:	b480      	push	{r7}
 800f242:	b083      	sub	sp, #12
 800f244:	af00      	add	r7, sp, #0
 800f246:	4603      	mov	r3, r0
 800f248:	6039      	str	r1, [r7, #0]
 800f24a:	71fb      	strb	r3, [r7, #7]
 800f24c:	4613      	mov	r3, r2
 800f24e:	80bb      	strh	r3, [r7, #4]
  UNUSED(length);

  switch (cmd)
 800f250:	79fb      	ldrb	r3, [r7, #7]
 800f252:	2b23      	cmp	r3, #35	@ 0x23
 800f254:	f200 8098 	bhi.w	800f388 <TEMPLATE_Control+0x148>
 800f258:	a201      	add	r2, pc, #4	@ (adr r2, 800f260 <TEMPLATE_Control+0x20>)
 800f25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f25e:	bf00      	nop
 800f260:	0800f389 	.word	0x0800f389
 800f264:	0800f389 	.word	0x0800f389
 800f268:	0800f389 	.word	0x0800f389
 800f26c:	0800f389 	.word	0x0800f389
 800f270:	0800f389 	.word	0x0800f389
 800f274:	0800f389 	.word	0x0800f389
 800f278:	0800f389 	.word	0x0800f389
 800f27c:	0800f389 	.word	0x0800f389
 800f280:	0800f389 	.word	0x0800f389
 800f284:	0800f389 	.word	0x0800f389
 800f288:	0800f389 	.word	0x0800f389
 800f28c:	0800f389 	.word	0x0800f389
 800f290:	0800f389 	.word	0x0800f389
 800f294:	0800f389 	.word	0x0800f389
 800f298:	0800f389 	.word	0x0800f389
 800f29c:	0800f389 	.word	0x0800f389
 800f2a0:	0800f389 	.word	0x0800f389
 800f2a4:	0800f389 	.word	0x0800f389
 800f2a8:	0800f389 	.word	0x0800f389
 800f2ac:	0800f389 	.word	0x0800f389
 800f2b0:	0800f389 	.word	0x0800f389
 800f2b4:	0800f389 	.word	0x0800f389
 800f2b8:	0800f389 	.word	0x0800f389
 800f2bc:	0800f389 	.word	0x0800f389
 800f2c0:	0800f389 	.word	0x0800f389
 800f2c4:	0800f389 	.word	0x0800f389
 800f2c8:	0800f389 	.word	0x0800f389
 800f2cc:	0800f389 	.word	0x0800f389
 800f2d0:	0800f389 	.word	0x0800f389
 800f2d4:	0800f389 	.word	0x0800f389
 800f2d8:	0800f389 	.word	0x0800f389
 800f2dc:	0800f389 	.word	0x0800f389
 800f2e0:	0800f2f1 	.word	0x0800f2f1
 800f2e4:	0800f335 	.word	0x0800f335
 800f2e8:	0800f389 	.word	0x0800f389
 800f2ec:	0800f389 	.word	0x0800f389
    case CDC_CLEAR_COMM_FEATURE:
      /* Add your code here */
      break;

    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	461a      	mov	r2, r3
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	021b      	lsls	r3, r3, #8
 800f2fe:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	3302      	adds	r3, #2
 800f304:	781b      	ldrb	r3, [r3, #0]
 800f306:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800f308:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	3303      	adds	r3, #3
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	061b      	lsls	r3, r3, #24
 800f312:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800f314:	461a      	mov	r2, r3
 800f316:	4b20      	ldr	r3, [pc, #128]	@ (800f398 <TEMPLATE_Control+0x158>)
 800f318:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	791a      	ldrb	r2, [r3, #4]
 800f31e:	4b1e      	ldr	r3, [pc, #120]	@ (800f398 <TEMPLATE_Control+0x158>)
 800f320:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	795a      	ldrb	r2, [r3, #5]
 800f326:	4b1c      	ldr	r3, [pc, #112]	@ (800f398 <TEMPLATE_Control+0x158>)
 800f328:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	799a      	ldrb	r2, [r3, #6]
 800f32e:	4b1a      	ldr	r3, [pc, #104]	@ (800f398 <TEMPLATE_Control+0x158>)
 800f330:	719a      	strb	r2, [r3, #6]

      /* Add your code here */
      break;
 800f332:	e02a      	b.n	800f38a <TEMPLATE_Control+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800f334:	4b18      	ldr	r3, [pc, #96]	@ (800f398 <TEMPLATE_Control+0x158>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	b2da      	uxtb	r2, r3
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800f33e:	4b16      	ldr	r3, [pc, #88]	@ (800f398 <TEMPLATE_Control+0x158>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	0a1a      	lsrs	r2, r3, #8
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	3301      	adds	r3, #1
 800f348:	b2d2      	uxtb	r2, r2
 800f34a:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800f34c:	4b12      	ldr	r3, [pc, #72]	@ (800f398 <TEMPLATE_Control+0x158>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	0c1a      	lsrs	r2, r3, #16
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	3302      	adds	r3, #2
 800f356:	b2d2      	uxtb	r2, r2
 800f358:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800f35a:	4b0f      	ldr	r3, [pc, #60]	@ (800f398 <TEMPLATE_Control+0x158>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	0e1a      	lsrs	r2, r3, #24
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	3303      	adds	r3, #3
 800f364:	b2d2      	uxtb	r2, r2
 800f366:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	3304      	adds	r3, #4
 800f36c:	4a0a      	ldr	r2, [pc, #40]	@ (800f398 <TEMPLATE_Control+0x158>)
 800f36e:	7912      	ldrb	r2, [r2, #4]
 800f370:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	3305      	adds	r3, #5
 800f376:	4a08      	ldr	r2, [pc, #32]	@ (800f398 <TEMPLATE_Control+0x158>)
 800f378:	7952      	ldrb	r2, [r2, #5]
 800f37a:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	3306      	adds	r3, #6
 800f380:	4a05      	ldr	r2, [pc, #20]	@ (800f398 <TEMPLATE_Control+0x158>)
 800f382:	7992      	ldrb	r2, [r2, #6]
 800f384:	701a      	strb	r2, [r3, #0]

      /* Add your code here */
      break;
 800f386:	e000      	b.n	800f38a <TEMPLATE_Control+0x14a>
    case CDC_SEND_BREAK:
      /* Add your code here */
      break;

    default:
      break;
 800f388:	bf00      	nop
  }

  return (0);
 800f38a:	2300      	movs	r3, #0
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	370c      	adds	r7, #12
 800f390:	46bd      	mov	sp, r7
 800f392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f396:	4770      	bx	lr
 800f398:	200000cc 	.word	0x200000cc

0800f39c <TEMPLATE_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_Receive(uint8_t *Buf, uint32_t *Len)
{
 800f39c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f3a0:	b08b      	sub	sp, #44	@ 0x2c
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
 800f3a6:	6039      	str	r1, [r7, #0]
 800f3a8:	466b      	mov	r3, sp
 800f3aa:	461e      	mov	r6, r3
    const uint32_t bytesPerLine = 16;
 800f3ac:	2310      	movs	r3, #16
 800f3ae:	61bb      	str	r3, [r7, #24]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 800f3b0:	69ba      	ldr	r2, [r7, #24]
 800f3b2:	4613      	mov	r3, r2
 800f3b4:	005b      	lsls	r3, r3, #1
 800f3b6:	4413      	add	r3, r2
 800f3b8:	617b      	str	r3, [r7, #20]
 800f3ba:	69ba      	ldr	r2, [r7, #24]
 800f3bc:	4613      	mov	r3, r2
 800f3be:	005b      	lsls	r3, r3, #1
 800f3c0:	4413      	add	r3, r2
 800f3c2:	3301      	adds	r3, #1
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	4698      	mov	r8, r3
 800f3c8:	4691      	mov	r9, r2
 800f3ca:	f04f 0200 	mov.w	r2, #0
 800f3ce:	f04f 0300 	mov.w	r3, #0
 800f3d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800f3d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800f3da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800f3de:	69ba      	ldr	r2, [r7, #24]
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	005b      	lsls	r3, r3, #1
 800f3e4:	4413      	add	r3, r2
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	461c      	mov	r4, r3
 800f3ec:	4615      	mov	r5, r2
 800f3ee:	f04f 0200 	mov.w	r2, #0
 800f3f2:	f04f 0300 	mov.w	r3, #0
 800f3f6:	00eb      	lsls	r3, r5, #3
 800f3f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800f3fc:	00e2      	lsls	r2, r4, #3
 800f3fe:	69ba      	ldr	r2, [r7, #24]
 800f400:	4613      	mov	r3, r2
 800f402:	005b      	lsls	r3, r3, #1
 800f404:	4413      	add	r3, r2
 800f406:	3301      	adds	r3, #1
 800f408:	3307      	adds	r3, #7
 800f40a:	08db      	lsrs	r3, r3, #3
 800f40c:	00db      	lsls	r3, r3, #3
 800f40e:	ebad 0d03 	sub.w	sp, sp, r3
 800f412:	466b      	mov	r3, sp
 800f414:	3300      	adds	r3, #0
 800f416:	613b      	str	r3, [r7, #16]
    uint32_t totalLen = *Len;
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	60fb      	str	r3, [r7, #12]
    uint32_t printed = 0;
 800f41e:	2300      	movs	r3, #0
 800f420:	627b      	str	r3, [r7, #36]	@ 0x24

    if (*Len > CDC_DATA_FS_MAX_PACKET_SIZE) {
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b40      	cmp	r3, #64	@ 0x40
 800f428:	d944      	bls.n	800f4b4 <TEMPLATE_Receive+0x118>
        *Len = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	2240      	movs	r2, #64	@ 0x40
 800f42e:	601a      	str	r2, [r3, #0]
    }

    while (printed < *Len)
 800f430:	e040      	b.n	800f4b4 <TEMPLATE_Receive+0x118>
    {
        uint32_t lineLen = ((*Len - printed) > bytesPerLine) ? bytesPerLine : (*Len - printed);
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f438:	1ad3      	subs	r3, r2, r3
 800f43a:	69ba      	ldr	r2, [r7, #24]
 800f43c:	4293      	cmp	r3, r2
 800f43e:	bf28      	it	cs
 800f440:	4613      	movcs	r3, r2
 800f442:	60bb      	str	r3, [r7, #8]
    char hexLine[bytesPerLine * 3 + 1]; // 2 hex chars + 1 space per byte
 800f444:	69ba      	ldr	r2, [r7, #24]
 800f446:	4613      	mov	r3, r2
 800f448:	005b      	lsls	r3, r3, #1
 800f44a:	4413      	add	r3, r2
        memset(hexLine, 0, sizeof(hexLine));
 800f44c:	3301      	adds	r3, #1
 800f44e:	461a      	mov	r2, r3
 800f450:	2100      	movs	r1, #0
 800f452:	6938      	ldr	r0, [r7, #16]
 800f454:	f001 ff68 	bl	8011328 <memset>
        char *ptr = hexLine;
 800f458:	693b      	ldr	r3, [r7, #16]
 800f45a:	623b      	str	r3, [r7, #32]

        for (uint32_t i = 0; i < lineLen; ++i)
 800f45c:	2300      	movs	r3, #0
 800f45e:	61fb      	str	r3, [r7, #28]
 800f460:	e012      	b.n	800f488 <TEMPLATE_Receive+0xec>
        {
            ptr += snprintf(ptr, 4, "%02X ", Buf[printed + i]);
 800f462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f464:	69fb      	ldr	r3, [r7, #28]
 800f466:	4413      	add	r3, r2
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	4413      	add	r3, r2
 800f46c:	781b      	ldrb	r3, [r3, #0]
 800f46e:	4a2d      	ldr	r2, [pc, #180]	@ (800f524 <TEMPLATE_Receive+0x188>)
 800f470:	2104      	movs	r1, #4
 800f472:	6a38      	ldr	r0, [r7, #32]
 800f474:	f001 fe88 	bl	8011188 <sniprintf>
 800f478:	4603      	mov	r3, r0
 800f47a:	461a      	mov	r2, r3
 800f47c:	6a3b      	ldr	r3, [r7, #32]
 800f47e:	4413      	add	r3, r2
 800f480:	623b      	str	r3, [r7, #32]
        for (uint32_t i = 0; i < lineLen; ++i)
 800f482:	69fb      	ldr	r3, [r7, #28]
 800f484:	3301      	adds	r3, #1
 800f486:	61fb      	str	r3, [r7, #28]
 800f488:	69fa      	ldr	r2, [r7, #28]
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d3e8      	bcc.n	800f462 <TEMPLATE_Receive+0xc6>
        }

        if (printed == 0)
 800f490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f492:	2b00      	cmp	r3, #0
 800f494:	d105      	bne.n	800f4a2 <TEMPLATE_Receive+0x106>
        {
            // First line includes logger message
            log_info("USB Rx [%lu bytes]: %s", totalLen, hexLine);
 800f496:	693a      	ldr	r2, [r7, #16]
 800f498:	68f9      	ldr	r1, [r7, #12]
 800f49a:	4823      	ldr	r0, [pc, #140]	@ (800f528 <TEMPLATE_Receive+0x18c>)
 800f49c:	f7f1 fe36 	bl	800110c <log_info>
 800f4a0:	e004      	b.n	800f4ac <TEMPLATE_Receive+0x110>
        }
        else
        {
            // Subsequent lines have 26-space indent
            log_info("%19s%s", "", hexLine);
 800f4a2:	693a      	ldr	r2, [r7, #16]
 800f4a4:	4921      	ldr	r1, [pc, #132]	@ (800f52c <TEMPLATE_Receive+0x190>)
 800f4a6:	4822      	ldr	r0, [pc, #136]	@ (800f530 <TEMPLATE_Receive+0x194>)
 800f4a8:	f7f1 fe30 	bl	800110c <log_info>
        }

        printed += lineLen;
 800f4ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	4413      	add	r3, r2
 800f4b2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (printed < *Len)
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d3b9      	bcc.n	800f432 <TEMPLATE_Receive+0x96>
    }

    // Copy to usb_rx_buffer if space permits
    if ((usb_rx_index + *Len) < MAX_USB_DATA_SIZE)
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	681a      	ldr	r2, [r3, #0]
 800f4c2:	4b1c      	ldr	r3, [pc, #112]	@ (800f534 <TEMPLATE_Receive+0x198>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4413      	add	r3, r2
 800f4c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f4cc:	d215      	bcs.n	800f4fa <TEMPLATE_Receive+0x15e>
    {
        memcpy(&usb_rx_buffer[usb_rx_index], Buf, *Len);
 800f4ce:	4b19      	ldr	r3, [pc, #100]	@ (800f534 <TEMPLATE_Receive+0x198>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	4a19      	ldr	r2, [pc, #100]	@ (800f538 <TEMPLATE_Receive+0x19c>)
 800f4d4:	1898      	adds	r0, r3, r2
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	461a      	mov	r2, r3
 800f4dc:	6879      	ldr	r1, [r7, #4]
 800f4de:	f001 ff9e 	bl	801141e <memcpy>
        usb_rx_index += *Len;
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	681a      	ldr	r2, [r3, #0]
 800f4e6:	4b13      	ldr	r3, [pc, #76]	@ (800f534 <TEMPLATE_Receive+0x198>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	4a11      	ldr	r2, [pc, #68]	@ (800f534 <TEMPLATE_Receive+0x198>)
 800f4ee:	6013      	str	r3, [r2, #0]
        log_error("USB buffer overflow");
        return USBD_FAIL;
    }

    // If this was the last packet
    if (*Len < CDC_DATA_FS_MAX_PACKET_SIZE)
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	2b3f      	cmp	r3, #63	@ 0x3f
 800f4f6:	d80b      	bhi.n	800f510 <TEMPLATE_Receive+0x174>
 800f4f8:	e007      	b.n	800f50a <TEMPLATE_Receive+0x16e>
        usb_rx_index = 0;
 800f4fa:	4b0e      	ldr	r3, [pc, #56]	@ (800f534 <TEMPLATE_Receive+0x198>)
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	601a      	str	r2, [r3, #0]
        log_error("USB buffer overflow");
 800f500:	480e      	ldr	r0, [pc, #56]	@ (800f53c <TEMPLATE_Receive+0x1a0>)
 800f502:	f7f1 fe37 	bl	8001174 <log_error>
        return USBD_FAIL;
 800f506:	2303      	movs	r3, #3
 800f508:	e006      	b.n	800f518 <TEMPLATE_Receive+0x17c>
    {
        usb_rx_complete = true;
 800f50a:	4b0d      	ldr	r3, [pc, #52]	@ (800f540 <TEMPLATE_Receive+0x1a4>)
 800f50c:	2201      	movs	r2, #1
 800f50e:	701a      	strb	r2, [r3, #0]
    }

    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f510:	480c      	ldr	r0, [pc, #48]	@ (800f544 <TEMPLATE_Receive+0x1a8>)
 800f512:	f7ff fd79 	bl	800f008 <USBD_CDC_ReceivePacket>
    return USBD_OK;
 800f516:	2300      	movs	r3, #0
 800f518:	46b5      	mov	sp, r6
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	372c      	adds	r7, #44	@ 0x2c
 800f51e:	46bd      	mov	sp, r7
 800f520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f524:	08012a30 	.word	0x08012a30
 800f528:	08012a6c 	.word	0x08012a6c
 800f52c:	08012a50 	.word	0x08012a50
 800f530:	08012a54 	.word	0x08012a54
 800f534:	20010f3c 	.word	0x20010f3c
 800f538:	20000f3c 	.word	0x20000f3c
 800f53c:	08012a84 	.word	0x08012a84
 800f540:	20010f40 	.word	0x20010f40
 800f544:	200007b4 	.word	0x200007b4

0800f548 <TEMPLATE_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t TEMPLATE_TransmitCplt(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	60f8      	str	r0, [r7, #12]
 800f550:	60b9      	str	r1, [r7, #8]
 800f552:	4613      	mov	r3, r2
 800f554:	71fb      	strb	r3, [r7, #7]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);

  return 0;
 800f556:	2300      	movs	r3, #0

}
 800f558:	4618      	mov	r0, r3
 800f55a:	3714      	adds	r7, #20
 800f55c:	46bd      	mov	sp, r7
 800f55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f562:	4770      	bx	lr

0800f564 <HAL_PCD_SetupStageCallback>:
extern PCD_HandleTypeDef hpcd_USB_DRD_FS;
/* Private function prototypes -----------------------------------------------*/
static USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status);
/* Private functions ---------------------------------------------------------*/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800f564:	b580      	push	{r7, lr}
 800f566:	b082      	sub	sp, #8
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 22e0 	ldr.w	r2, [r3, #736]	@ 0x2e0
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	f503 7327 	add.w	r3, r3, #668	@ 0x29c
 800f578:	4619      	mov	r1, r3
 800f57a:	4610      	mov	r0, r2
 800f57c:	f000 faa5 	bl	800faca <USBD_LL_SetupStage>
}
 800f580:	bf00      	nop
 800f582:	3708      	adds	r7, #8
 800f584:	46bd      	mov	sp, r7
 800f586:	bd80      	pop	{r7, pc}

0800f588 <HAL_PCD_DataOutStageCallback>:

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b082      	sub	sp, #8
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	460b      	mov	r3, r1
 800f592:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800f59a:	78fa      	ldrb	r2, [r7, #3]
 800f59c:	6879      	ldr	r1, [r7, #4]
 800f59e:	4613      	mov	r3, r2
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	4413      	add	r3, r2
 800f5a4:	00db      	lsls	r3, r3, #3
 800f5a6:	440b      	add	r3, r1
 800f5a8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800f5ac:	681a      	ldr	r2, [r3, #0]
 800f5ae:	78fb      	ldrb	r3, [r7, #3]
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	f000 fadf 	bl	800fb74 <USBD_LL_DataOutStage>
}
 800f5b6:	bf00      	nop
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b082      	sub	sp, #8
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f8d3 02e0 	ldr.w	r0, [r3, #736]	@ 0x2e0
 800f5d0:	78fa      	ldrb	r2, [r7, #3]
 800f5d2:	6879      	ldr	r1, [r7, #4]
 800f5d4:	4613      	mov	r3, r2
 800f5d6:	009b      	lsls	r3, r3, #2
 800f5d8:	4413      	add	r3, r2
 800f5da:	00db      	lsls	r3, r3, #3
 800f5dc:	440b      	add	r3, r1
 800f5de:	3328      	adds	r3, #40	@ 0x28
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	78fb      	ldrb	r3, [r7, #3]
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	f000 fb78 	bl	800fcda <USBD_LL_DataInStage>
}
 800f5ea:	bf00      	nop
 800f5ec:	3708      	adds	r7, #8
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <HAL_PCD_SOFCallback>:

void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b082      	sub	sp, #8
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800f600:	4618      	mov	r0, r3
 800f602:	f000 fc7e 	bl	800ff02 <USBD_LL_SOF>
}
 800f606:	bf00      	nop
 800f608:	3708      	adds	r7, #8
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}

0800f60e <HAL_PCD_ResetCallback>:

void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800f60e:	b580      	push	{r7, lr}
 800f610:	b084      	sub	sp, #16
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f616:	2301      	movs	r3, #1
 800f618:	73fb      	strb	r3, [r7, #15]
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	79db      	ldrb	r3, [r3, #7]
 800f61e:	2b02      	cmp	r3, #2
 800f620:	d001      	beq.n	800f626 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f622:	f7f2 fa11 	bl	8001a48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800f62c:	7bfa      	ldrb	r2, [r7, #15]
 800f62e:	4611      	mov	r1, r2
 800f630:	4618      	mov	r0, r3
 800f632:	f000 fc56 	bl	800fee2 <USBD_LL_SetSpeed>
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8d3 32e0 	ldr.w	r3, [r3, #736]	@ 0x2e0
 800f63c:	4618      	mov	r0, r3
 800f63e:	f000 fbfe 	bl	800fe3e <USBD_LL_Reset>
}
 800f642:	bf00      	nop
 800f644:	3710      	adds	r7, #16
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
	...

0800f64c <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b082      	sub	sp, #8
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
      pdev->pData  = &hpcd_USB_DRD_FS;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4a19      	ldr	r2, [pc, #100]	@ (800f6bc <USBD_LL_Init+0x70>)
 800f658:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f662:	2340      	movs	r3, #64	@ 0x40
 800f664:	2200      	movs	r2, #0
 800f666:	2100      	movs	r1, #0
 800f668:	f7f5 fc48 	bl	8004efc <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f672:	2380      	movs	r3, #128	@ 0x80
 800f674:	2200      	movs	r2, #0
 800f676:	2180      	movs	r1, #128	@ 0x80
 800f678:	f7f5 fc40 	bl	8004efc <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f682:	23c0      	movs	r3, #192	@ 0xc0
 800f684:	2200      	movs	r2, #0
 800f686:	2181      	movs	r1, #129	@ 0x81
 800f688:	f7f5 fc38 	bl	8004efc <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x100);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f692:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f696:	2200      	movs	r2, #0
 800f698:	2101      	movs	r1, #1
 800f69a:	f7f5 fc2f 	bl	8004efc <HAL_PCDEx_PMAConfig>
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x140);
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f6a4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	2182      	movs	r1, #130	@ 0x82
 800f6ac:	f7f5 fc26 	bl	8004efc <HAL_PCDEx_PMAConfig>
      return USBD_OK;
 800f6b0:	2300      	movs	r3, #0
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3708      	adds	r7, #8
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	200004d0 	.word	0x200004d0

0800f6c0 <USBD_LL_Start>:
      hal_status = HAL_PCD_DeInit(pdev->pData);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_Start(pdev->pData);
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7f4 f8f8 	bl	80038c4 <HAL_PCD_Start>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	73fb      	strb	r3, [r7, #15]
      return  USBD_Get_USB_Status(hal_status);
 800f6d8:	7bfb      	ldrb	r3, [r7, #15]
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f000 f916 	bl	800f90c <USBD_Get_USB_Status>
 800f6e0:	4603      	mov	r3, r0
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	3710      	adds	r7, #16
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}

0800f6ea <USBD_LL_OpenEP>:
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t ep_type, uint16_t ep_mps)
{
 800f6ea:	b580      	push	{r7, lr}
 800f6ec:	b084      	sub	sp, #16
 800f6ee:	af00      	add	r7, sp, #0
 800f6f0:	6078      	str	r0, [r7, #4]
 800f6f2:	4608      	mov	r0, r1
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	461a      	mov	r2, r3
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	70fb      	strb	r3, [r7, #3]
 800f6fc:	460b      	mov	r3, r1
 800f6fe:	70bb      	strb	r3, [r7, #2]
 800f700:	4613      	mov	r3, r2
 800f702:	803b      	strh	r3, [r7, #0]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f70a:	78bb      	ldrb	r3, [r7, #2]
 800f70c:	883a      	ldrh	r2, [r7, #0]
 800f70e:	78f9      	ldrb	r1, [r7, #3]
 800f710:	f7f4 fa27 	bl	8003b62 <HAL_PCD_EP_Open>
 800f714:	4603      	mov	r3, r0
 800f716:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800f718:	7bfb      	ldrb	r3, [r7, #15]
 800f71a:	4618      	mov	r0, r3
 800f71c:	f000 f8f6 	bl	800f90c <USBD_Get_USB_Status>
 800f720:	4603      	mov	r3, r0
}
 800f722:	4618      	mov	r0, r3
 800f724:	3710      	adds	r7, #16
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}

0800f72a <USBD_LL_CloseEP>:

USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f72a:	b580      	push	{r7, lr}
 800f72c:	b084      	sub	sp, #16
 800f72e:	af00      	add	r7, sp, #0
 800f730:	6078      	str	r0, [r7, #4]
 800f732:	460b      	mov	r3, r1
 800f734:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f73c:	78fa      	ldrb	r2, [r7, #3]
 800f73e:	4611      	mov	r1, r2
 800f740:	4618      	mov	r0, r3
 800f742:	f7f4 fa6f 	bl	8003c24 <HAL_PCD_EP_Close>
 800f746:	4603      	mov	r3, r0
 800f748:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800f74a:	7bfb      	ldrb	r3, [r7, #15]
 800f74c:	4618      	mov	r0, r3
 800f74e:	f000 f8dd 	bl	800f90c <USBD_Get_USB_Status>
 800f752:	4603      	mov	r3, r0
}
 800f754:	4618      	mov	r0, r3
 800f756:	3710      	adds	r7, #16
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <USBD_LL_StallEP>:
      hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
      return USBD_Get_USB_Status(hal_status);
}

USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f75c:	b580      	push	{r7, lr}
 800f75e:	b084      	sub	sp, #16
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
 800f764:	460b      	mov	r3, r1
 800f766:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f76e:	78fa      	ldrb	r2, [r7, #3]
 800f770:	4611      	mov	r1, r2
 800f772:	4618      	mov	r0, r3
 800f774:	f7f4 fb22 	bl	8003dbc <HAL_PCD_EP_SetStall>
 800f778:	4603      	mov	r3, r0
 800f77a:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800f77c:	7bfb      	ldrb	r3, [r7, #15]
 800f77e:	4618      	mov	r0, r3
 800f780:	f000 f8c4 	bl	800f90c <USBD_Get_USB_Status>
 800f784:	4603      	mov	r3, r0
}
 800f786:	4618      	mov	r0, r3
 800f788:	3710      	adds	r7, #16
 800f78a:	46bd      	mov	sp, r7
 800f78c:	bd80      	pop	{r7, pc}

0800f78e <USBD_LL_ClearStallEP>:

USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr)
{
 800f78e:	b580      	push	{r7, lr}
 800f790:	b084      	sub	sp, #16
 800f792:	af00      	add	r7, sp, #0
 800f794:	6078      	str	r0, [r7, #4]
 800f796:	460b      	mov	r3, r1
 800f798:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f7a0:	78fa      	ldrb	r2, [r7, #3]
 800f7a2:	4611      	mov	r1, r2
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7f4 fb5d 	bl	8003e64 <HAL_PCD_EP_ClrStall>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800f7ae:	7bfb      	ldrb	r3, [r7, #15]
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f000 f8ab 	bl	800f90c <USBD_Get_USB_Status>
 800f7b6:	4603      	mov	r3, r0
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3710      	adds	r7, #16
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <USBD_LL_IsStallEP>:

uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	b085      	sub	sp, #20
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	70fb      	strb	r3, [r7, #3]
      PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f7d2:	60fb      	str	r3, [r7, #12]
      if((ep_addr & 0x80) == 0x80)
 800f7d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	da0b      	bge.n	800f7f4 <USBD_LL_IsStallEP+0x34>
      {
             return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f7dc:	78fb      	ldrb	r3, [r7, #3]
 800f7de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f7e2:	68f9      	ldr	r1, [r7, #12]
 800f7e4:	4613      	mov	r3, r2
 800f7e6:	009b      	lsls	r3, r3, #2
 800f7e8:	4413      	add	r3, r2
 800f7ea:	00db      	lsls	r3, r3, #3
 800f7ec:	440b      	add	r3, r1
 800f7ee:	3316      	adds	r3, #22
 800f7f0:	781b      	ldrb	r3, [r3, #0]
 800f7f2:	e00b      	b.n	800f80c <USBD_LL_IsStallEP+0x4c>
      }
      else
      {
             return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f7f4:	78fb      	ldrb	r3, [r7, #3]
 800f7f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f7fa:	68f9      	ldr	r1, [r7, #12]
 800f7fc:	4613      	mov	r3, r2
 800f7fe:	009b      	lsls	r3, r3, #2
 800f800:	4413      	add	r3, r2
 800f802:	00db      	lsls	r3, r3, #3
 800f804:	440b      	add	r3, r1
 800f806:	f503 73ab 	add.w	r3, r3, #342	@ 0x156
 800f80a:	781b      	ldrb	r3, [r3, #0]
      }
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3714      	adds	r7, #20
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr

0800f818 <USBD_LL_SetUSBAddress>:

USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev,
             uint8_t dev_addr)
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b084      	sub	sp, #16
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	460b      	mov	r3, r1
 800f822:	70fb      	strb	r3, [r7, #3]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f82a:	78fa      	ldrb	r2, [r7, #3]
 800f82c:	4611      	mov	r1, r2
 800f82e:	4618      	mov	r0, r3
 800f830:	f7f4 f973 	bl	8003b1a <HAL_PCD_SetAddress>
 800f834:	4603      	mov	r3, r0
 800f836:	73fb      	strb	r3, [r7, #15]
      return USBD_Get_USB_Status(hal_status);
 800f838:	7bfb      	ldrb	r3, [r7, #15]
 800f83a:	4618      	mov	r0, r3
 800f83c:	f000 f866 	bl	800f90c <USBD_Get_USB_Status>
 800f840:	4603      	mov	r3, r0
}
 800f842:	4618      	mov	r0, r3
 800f844:	3710      	adds	r7, #16
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}

0800f84a <USBD_LL_Transmit>:

USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr,
             uint8_t *pbuf, uint32_t size)
{
 800f84a:	b580      	push	{r7, lr}
 800f84c:	b086      	sub	sp, #24
 800f84e:	af00      	add	r7, sp, #0
 800f850:	60f8      	str	r0, [r7, #12]
 800f852:	607a      	str	r2, [r7, #4]
 800f854:	603b      	str	r3, [r7, #0]
 800f856:	460b      	mov	r3, r1
 800f858:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f860:	7af9      	ldrb	r1, [r7, #11]
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	f7f4 fa71 	bl	8003d4c <HAL_PCD_EP_Transmit>
 800f86a:	4603      	mov	r3, r0
 800f86c:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800f86e:	7dfb      	ldrb	r3, [r7, #23]
 800f870:	4618      	mov	r0, r3
 800f872:	f000 f84b 	bl	800f90c <USBD_Get_USB_Status>
 800f876:	4603      	mov	r3, r0
}
 800f878:	4618      	mov	r0, r3
 800f87a:	3718      	adds	r7, #24
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <USBD_LL_PrepareReceive>:

USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev,
             uint8_t ep_addr, uint8_t *pbuf,
             uint32_t size)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b086      	sub	sp, #24
 800f884:	af00      	add	r7, sp, #0
 800f886:	60f8      	str	r0, [r7, #12]
 800f888:	607a      	str	r2, [r7, #4]
 800f88a:	603b      	str	r3, [r7, #0]
 800f88c:	460b      	mov	r3, r1
 800f88e:	72fb      	strb	r3, [r7, #11]
      HAL_StatusTypeDef hal_status;
      hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f896:	7af9      	ldrb	r1, [r7, #11]
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	687a      	ldr	r2, [r7, #4]
 800f89c:	f7f4 fa0c 	bl	8003cb8 <HAL_PCD_EP_Receive>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	75fb      	strb	r3, [r7, #23]
      return USBD_Get_USB_Status(hal_status);
 800f8a4:	7dfb      	ldrb	r3, [r7, #23]
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f000 f830 	bl	800f90c <USBD_Get_USB_Status>
 800f8ac:	4603      	mov	r3, r0
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3718      	adds	r7, #24
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <USBD_LL_GetRxDataSize>:

uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b082      	sub	sp, #8
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
 800f8be:	460b      	mov	r3, r1
 800f8c0:	70fb      	strb	r3, [r7, #3]
      return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f8c8:	78fa      	ldrb	r2, [r7, #3]
 800f8ca:	4611      	mov	r1, r2
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	f7f4 fa25 	bl	8003d1c <HAL_PCD_EP_GetRxCount>
 800f8d2:	4603      	mov	r3, r0
}
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3708      	adds	r7, #8
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bd80      	pop	{r7, pc}

0800f8dc <USBD_static_malloc>:

void *USBD_static_malloc(uint32_t size)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b083      	sub	sp, #12
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
      UNUSED(size);
      static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef) / 4) + 1]; /* On 32-bit boundary */
      return mem;
 800f8e4:	4b03      	ldr	r3, [pc, #12]	@ (800f8f4 <USBD_static_malloc+0x18>)
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	370c      	adds	r7, #12
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
 800f8f2:	bf00      	nop
 800f8f4:	20010f44 	.word	0x20010f44

0800f8f8 <USBD_static_free>:

void USBD_static_free(void *p)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b083      	sub	sp, #12
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
      UNUSED(p);
}
 800f900:	bf00      	nop
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <USBD_Get_USB_Status>:
{
      HAL_Delay(Delay);
}

USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f90c:	b480      	push	{r7}
 800f90e:	b085      	sub	sp, #20
 800f910:	af00      	add	r7, sp, #0
 800f912:	4603      	mov	r3, r0
 800f914:	71fb      	strb	r3, [r7, #7]
      USBD_StatusTypeDef usb_status = USBD_OK;
 800f916:	2300      	movs	r3, #0
 800f918:	73fb      	strb	r3, [r7, #15]
      switch (hal_status)
 800f91a:	79fb      	ldrb	r3, [r7, #7]
 800f91c:	2b03      	cmp	r3, #3
 800f91e:	d817      	bhi.n	800f950 <USBD_Get_USB_Status+0x44>
 800f920:	a201      	add	r2, pc, #4	@ (adr r2, 800f928 <USBD_Get_USB_Status+0x1c>)
 800f922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f926:	bf00      	nop
 800f928:	0800f939 	.word	0x0800f939
 800f92c:	0800f93f 	.word	0x0800f93f
 800f930:	0800f945 	.word	0x0800f945
 800f934:	0800f94b 	.word	0x0800f94b
      {
      case HAL_OK :
             usb_status = USBD_OK;
 800f938:	2300      	movs	r3, #0
 800f93a:	73fb      	strb	r3, [r7, #15]
             break;
 800f93c:	e00b      	b.n	800f956 <USBD_Get_USB_Status+0x4a>
      case HAL_ERROR :
             usb_status = USBD_FAIL;
 800f93e:	2303      	movs	r3, #3
 800f940:	73fb      	strb	r3, [r7, #15]
             break;
 800f942:	e008      	b.n	800f956 <USBD_Get_USB_Status+0x4a>
      case HAL_BUSY :
             usb_status = USBD_BUSY;
 800f944:	2301      	movs	r3, #1
 800f946:	73fb      	strb	r3, [r7, #15]
             break;
 800f948:	e005      	b.n	800f956 <USBD_Get_USB_Status+0x4a>
      case HAL_TIMEOUT :
             usb_status = USBD_FAIL;
 800f94a:	2303      	movs	r3, #3
 800f94c:	73fb      	strb	r3, [r7, #15]
             break;
 800f94e:	e002      	b.n	800f956 <USBD_Get_USB_Status+0x4a>
      default :
             usb_status = USBD_FAIL;
 800f950:	2303      	movs	r3, #3
 800f952:	73fb      	strb	r3, [r7, #15]
             break;
 800f954:	bf00      	nop
      }
      return usb_status;
 800f956:	7bfb      	ldrb	r3, [r7, #15]
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3714      	adds	r7, #20
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b086      	sub	sp, #24
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	4613      	mov	r3, r2
 800f970:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	2b00      	cmp	r3, #0
 800f976:	d101      	bne.n	800f97c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f978:	2303      	movs	r3, #3
 800f97a:	e01f      	b.n	800f9bc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	2200      	movs	r2, #0
 800f980:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2200      	movs	r2, #0
 800f988:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	2200      	movs	r2, #0
 800f990:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d003      	beq.n	800f9a2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	68ba      	ldr	r2, [r7, #8]
 800f99e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	2201      	movs	r2, #1
 800f9a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	79fa      	ldrb	r2, [r7, #7]
 800f9ae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f9b0:	68f8      	ldr	r0, [r7, #12]
 800f9b2:	f7ff fe4b 	bl	800f64c <USBD_LL_Init>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f9ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3718      	adds	r7, #24
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bd80      	pop	{r7, pc}

0800f9c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d101      	bne.n	800f9dc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800f9d8:	2303      	movs	r3, #3
 800f9da:	e025      	b.n	800fa28 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	683a      	ldr	r2, [r7, #0]
 800f9e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	32ae      	adds	r2, #174	@ 0xae
 800f9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d00f      	beq.n	800fa18 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	32ae      	adds	r2, #174	@ 0xae
 800fa02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa08:	f107 020e 	add.w	r2, r7, #14
 800fa0c:	4610      	mov	r0, r2
 800fa0e:	4798      	blx	r3
 800fa10:	4602      	mov	r2, r0
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fa1e:	1c5a      	adds	r2, r3, #1
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fa26:	2300      	movs	r3, #0
}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3710      	adds	r7, #16
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f7ff fe41 	bl	800f6c0 <USBD_LL_Start>
 800fa3e:	4603      	mov	r3, r0
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}

0800fa48 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fa48:	b480      	push	{r7}
 800fa4a:	b083      	sub	sp, #12
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fa50:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	370c      	adds	r7, #12
 800fa56:	46bd      	mov	sp, r7
 800fa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5c:	4770      	bx	lr

0800fa5e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b084      	sub	sp, #16
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
 800fa66:	460b      	mov	r3, r1
 800fa68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d009      	beq.n	800fa8c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	78fa      	ldrb	r2, [r7, #3]
 800fa82:	4611      	mov	r1, r2
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	4798      	blx	r3
 800fa88:	4603      	mov	r3, r0
 800fa8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3710      	adds	r7, #16
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}

0800fa96 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fa96:	b580      	push	{r7, lr}
 800fa98:	b084      	sub	sp, #16
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	6078      	str	r0, [r7, #4]
 800fa9e:	460b      	mov	r3, r1
 800faa0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800faa2:	2300      	movs	r3, #0
 800faa4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800faac:	685b      	ldr	r3, [r3, #4]
 800faae:	78fa      	ldrb	r2, [r7, #3]
 800fab0:	4611      	mov	r1, r2
 800fab2:	6878      	ldr	r0, [r7, #4]
 800fab4:	4798      	blx	r3
 800fab6:	4603      	mov	r3, r0
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d001      	beq.n	800fac0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fabc:	2303      	movs	r3, #3
 800fabe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3710      	adds	r7, #16
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800faca:	b580      	push	{r7, lr}
 800facc:	b084      	sub	sp, #16
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
 800fad2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fada:	6839      	ldr	r1, [r7, #0]
 800fadc:	4618      	mov	r0, r3
 800fade:	f001 f846 	bl	8010b6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2201      	movs	r2, #1
 800fae6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800faf0:	461a      	mov	r2, r3
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fafe:	f003 031f 	and.w	r3, r3, #31
 800fb02:	2b02      	cmp	r3, #2
 800fb04:	d01a      	beq.n	800fb3c <USBD_LL_SetupStage+0x72>
 800fb06:	2b02      	cmp	r3, #2
 800fb08:	d822      	bhi.n	800fb50 <USBD_LL_SetupStage+0x86>
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d002      	beq.n	800fb14 <USBD_LL_SetupStage+0x4a>
 800fb0e:	2b01      	cmp	r3, #1
 800fb10:	d00a      	beq.n	800fb28 <USBD_LL_SetupStage+0x5e>
 800fb12:	e01d      	b.n	800fb50 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb1a:	4619      	mov	r1, r3
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 fa9d 	bl	801005c <USBD_StdDevReq>
 800fb22:	4603      	mov	r3, r0
 800fb24:	73fb      	strb	r3, [r7, #15]
      break;
 800fb26:	e020      	b.n	800fb6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb2e:	4619      	mov	r1, r3
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 fb05 	bl	8010140 <USBD_StdItfReq>
 800fb36:	4603      	mov	r3, r0
 800fb38:	73fb      	strb	r3, [r7, #15]
      break;
 800fb3a:	e016      	b.n	800fb6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fb42:	4619      	mov	r1, r3
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f000 fb67 	bl	8010218 <USBD_StdEPReq>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	73fb      	strb	r3, [r7, #15]
      break;
 800fb4e:	e00c      	b.n	800fb6a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fb56:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fb5a:	b2db      	uxtb	r3, r3
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	6878      	ldr	r0, [r7, #4]
 800fb60:	f7ff fdfc 	bl	800f75c <USBD_LL_StallEP>
 800fb64:	4603      	mov	r3, r0
 800fb66:	73fb      	strb	r3, [r7, #15]
      break;
 800fb68:	bf00      	nop
  }

  return ret;
 800fb6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3710      	adds	r7, #16
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b086      	sub	sp, #24
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	60f8      	str	r0, [r7, #12]
 800fb7c:	460b      	mov	r3, r1
 800fb7e:	607a      	str	r2, [r7, #4]
 800fb80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fb82:	2300      	movs	r3, #0
 800fb84:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800fb86:	7afb      	ldrb	r3, [r7, #11]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d16e      	bne.n	800fc6a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800fb92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fb9a:	2b03      	cmp	r3, #3
 800fb9c:	f040 8098 	bne.w	800fcd0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	689a      	ldr	r2, [r3, #8]
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	429a      	cmp	r2, r3
 800fbaa:	d913      	bls.n	800fbd4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800fbac:	693b      	ldr	r3, [r7, #16]
 800fbae:	689a      	ldr	r2, [r3, #8]
 800fbb0:	693b      	ldr	r3, [r7, #16]
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	1ad2      	subs	r2, r2, r3
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800fbba:	693b      	ldr	r3, [r7, #16]
 800fbbc:	68da      	ldr	r2, [r3, #12]
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	689b      	ldr	r3, [r3, #8]
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	bf28      	it	cs
 800fbc6:	4613      	movcs	r3, r2
 800fbc8:	461a      	mov	r2, r3
 800fbca:	6879      	ldr	r1, [r7, #4]
 800fbcc:	68f8      	ldr	r0, [r7, #12]
 800fbce:	f001 f9cf 	bl	8010f70 <USBD_CtlContinueRx>
 800fbd2:	e07d      	b.n	800fcd0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fbda:	f003 031f 	and.w	r3, r3, #31
 800fbde:	2b02      	cmp	r3, #2
 800fbe0:	d014      	beq.n	800fc0c <USBD_LL_DataOutStage+0x98>
 800fbe2:	2b02      	cmp	r3, #2
 800fbe4:	d81d      	bhi.n	800fc22 <USBD_LL_DataOutStage+0xae>
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d002      	beq.n	800fbf0 <USBD_LL_DataOutStage+0x7c>
 800fbea:	2b01      	cmp	r3, #1
 800fbec:	d003      	beq.n	800fbf6 <USBD_LL_DataOutStage+0x82>
 800fbee:	e018      	b.n	800fc22 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	75bb      	strb	r3, [r7, #22]
            break;
 800fbf4:	e018      	b.n	800fc28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fbfc:	b2db      	uxtb	r3, r3
 800fbfe:	4619      	mov	r1, r3
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f000 f99e 	bl	800ff42 <USBD_CoreFindIF>
 800fc06:	4603      	mov	r3, r0
 800fc08:	75bb      	strb	r3, [r7, #22]
            break;
 800fc0a:	e00d      	b.n	800fc28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	4619      	mov	r1, r3
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f000 f9a0 	bl	800ff5c <USBD_CoreFindEP>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	75bb      	strb	r3, [r7, #22]
            break;
 800fc20:	e002      	b.n	800fc28 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800fc22:	2300      	movs	r3, #0
 800fc24:	75bb      	strb	r3, [r7, #22]
            break;
 800fc26:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fc28:	7dbb      	ldrb	r3, [r7, #22]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d119      	bne.n	800fc62 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc34:	b2db      	uxtb	r3, r3
 800fc36:	2b03      	cmp	r3, #3
 800fc38:	d113      	bne.n	800fc62 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800fc3a:	7dba      	ldrb	r2, [r7, #22]
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	32ae      	adds	r2, #174	@ 0xae
 800fc40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc44:	691b      	ldr	r3, [r3, #16]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d00b      	beq.n	800fc62 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800fc4a:	7dba      	ldrb	r2, [r7, #22]
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800fc52:	7dba      	ldrb	r2, [r7, #22]
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	32ae      	adds	r2, #174	@ 0xae
 800fc58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc5c:	691b      	ldr	r3, [r3, #16]
 800fc5e:	68f8      	ldr	r0, [r7, #12]
 800fc60:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800fc62:	68f8      	ldr	r0, [r7, #12]
 800fc64:	f001 f995 	bl	8010f92 <USBD_CtlSendStatus>
 800fc68:	e032      	b.n	800fcd0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800fc6a:	7afb      	ldrb	r3, [r7, #11]
 800fc6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	4619      	mov	r1, r3
 800fc74:	68f8      	ldr	r0, [r7, #12]
 800fc76:	f000 f971 	bl	800ff5c <USBD_CoreFindEP>
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fc7e:	7dbb      	ldrb	r3, [r7, #22]
 800fc80:	2bff      	cmp	r3, #255	@ 0xff
 800fc82:	d025      	beq.n	800fcd0 <USBD_LL_DataOutStage+0x15c>
 800fc84:	7dbb      	ldrb	r3, [r7, #22]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d122      	bne.n	800fcd0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc90:	b2db      	uxtb	r3, r3
 800fc92:	2b03      	cmp	r3, #3
 800fc94:	d117      	bne.n	800fcc6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800fc96:	7dba      	ldrb	r2, [r7, #22]
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	32ae      	adds	r2, #174	@ 0xae
 800fc9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fca0:	699b      	ldr	r3, [r3, #24]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d00f      	beq.n	800fcc6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fca6:	7dba      	ldrb	r2, [r7, #22]
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800fcae:	7dba      	ldrb	r2, [r7, #22]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	32ae      	adds	r2, #174	@ 0xae
 800fcb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcb8:	699b      	ldr	r3, [r3, #24]
 800fcba:	7afa      	ldrb	r2, [r7, #11]
 800fcbc:	4611      	mov	r1, r2
 800fcbe:	68f8      	ldr	r0, [r7, #12]
 800fcc0:	4798      	blx	r3
 800fcc2:	4603      	mov	r3, r0
 800fcc4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800fcc6:	7dfb      	ldrb	r3, [r7, #23]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d001      	beq.n	800fcd0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800fccc:	7dfb      	ldrb	r3, [r7, #23]
 800fcce:	e000      	b.n	800fcd2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800fcd0:	2300      	movs	r3, #0
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3718      	adds	r7, #24
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b086      	sub	sp, #24
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	60f8      	str	r0, [r7, #12]
 800fce2:	460b      	mov	r3, r1
 800fce4:	607a      	str	r2, [r7, #4]
 800fce6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800fce8:	7afb      	ldrb	r3, [r7, #11]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d16f      	bne.n	800fdce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	3314      	adds	r3, #20
 800fcf2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800fcfa:	2b02      	cmp	r3, #2
 800fcfc:	d15a      	bne.n	800fdb4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	689a      	ldr	r2, [r3, #8]
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	68db      	ldr	r3, [r3, #12]
 800fd06:	429a      	cmp	r2, r3
 800fd08:	d914      	bls.n	800fd34 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	689a      	ldr	r2, [r3, #8]
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	68db      	ldr	r3, [r3, #12]
 800fd12:	1ad2      	subs	r2, r2, r3
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800fd18:	693b      	ldr	r3, [r7, #16]
 800fd1a:	689b      	ldr	r3, [r3, #8]
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	6879      	ldr	r1, [r7, #4]
 800fd20:	68f8      	ldr	r0, [r7, #12]
 800fd22:	f001 f8f7 	bl	8010f14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd26:	2300      	movs	r3, #0
 800fd28:	2200      	movs	r2, #0
 800fd2a:	2100      	movs	r1, #0
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f7ff fda7 	bl	800f880 <USBD_LL_PrepareReceive>
 800fd32:	e03f      	b.n	800fdb4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800fd34:	693b      	ldr	r3, [r7, #16]
 800fd36:	68da      	ldr	r2, [r3, #12]
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	689b      	ldr	r3, [r3, #8]
 800fd3c:	429a      	cmp	r2, r3
 800fd3e:	d11c      	bne.n	800fd7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800fd40:	693b      	ldr	r3, [r7, #16]
 800fd42:	685a      	ldr	r2, [r3, #4]
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d316      	bcc.n	800fd7a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	685a      	ldr	r2, [r3, #4]
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800fd56:	429a      	cmp	r2, r3
 800fd58:	d20f      	bcs.n	800fd7a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	2100      	movs	r1, #0
 800fd5e:	68f8      	ldr	r0, [r7, #12]
 800fd60:	f001 f8d8 	bl	8010f14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2200      	movs	r2, #0
 800fd68:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	2200      	movs	r2, #0
 800fd70:	2100      	movs	r1, #0
 800fd72:	68f8      	ldr	r0, [r7, #12]
 800fd74:	f7ff fd84 	bl	800f880 <USBD_LL_PrepareReceive>
 800fd78:	e01c      	b.n	800fdb4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	2b03      	cmp	r3, #3
 800fd84:	d10f      	bne.n	800fda6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd8c:	68db      	ldr	r3, [r3, #12]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d009      	beq.n	800fda6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2200      	movs	r2, #0
 800fd96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fda0:	68db      	ldr	r3, [r3, #12]
 800fda2:	68f8      	ldr	r0, [r7, #12]
 800fda4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fda6:	2180      	movs	r1, #128	@ 0x80
 800fda8:	68f8      	ldr	r0, [r7, #12]
 800fdaa:	f7ff fcd7 	bl	800f75c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800fdae:	68f8      	ldr	r0, [r7, #12]
 800fdb0:	f001 f902 	bl	8010fb8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d03a      	beq.n	800fe34 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800fdbe:	68f8      	ldr	r0, [r7, #12]
 800fdc0:	f7ff fe42 	bl	800fa48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800fdcc:	e032      	b.n	800fe34 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800fdce:	7afb      	ldrb	r3, [r7, #11]
 800fdd0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	4619      	mov	r1, r3
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f000 f8bf 	bl	800ff5c <USBD_CoreFindEP>
 800fdde:	4603      	mov	r3, r0
 800fde0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800fde2:	7dfb      	ldrb	r3, [r7, #23]
 800fde4:	2bff      	cmp	r3, #255	@ 0xff
 800fde6:	d025      	beq.n	800fe34 <USBD_LL_DataInStage+0x15a>
 800fde8:	7dfb      	ldrb	r3, [r7, #23]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d122      	bne.n	800fe34 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fdf4:	b2db      	uxtb	r3, r3
 800fdf6:	2b03      	cmp	r3, #3
 800fdf8:	d11c      	bne.n	800fe34 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800fdfa:	7dfa      	ldrb	r2, [r7, #23]
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	32ae      	adds	r2, #174	@ 0xae
 800fe00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe04:	695b      	ldr	r3, [r3, #20]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d014      	beq.n	800fe34 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800fe0a:	7dfa      	ldrb	r2, [r7, #23]
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800fe12:	7dfa      	ldrb	r2, [r7, #23]
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	32ae      	adds	r2, #174	@ 0xae
 800fe18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe1c:	695b      	ldr	r3, [r3, #20]
 800fe1e:	7afa      	ldrb	r2, [r7, #11]
 800fe20:	4611      	mov	r1, r2
 800fe22:	68f8      	ldr	r0, [r7, #12]
 800fe24:	4798      	blx	r3
 800fe26:	4603      	mov	r3, r0
 800fe28:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800fe2a:	7dbb      	ldrb	r3, [r7, #22]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d001      	beq.n	800fe34 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800fe30:	7dbb      	ldrb	r3, [r7, #22]
 800fe32:	e000      	b.n	800fe36 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800fe34:	2300      	movs	r3, #0
}
 800fe36:	4618      	mov	r0, r3
 800fe38:	3718      	adds	r7, #24
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	bd80      	pop	{r7, pc}

0800fe3e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fe3e:	b580      	push	{r7, lr}
 800fe40:	b084      	sub	sp, #16
 800fe42:	af00      	add	r7, sp, #0
 800fe44:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe46:	2300      	movs	r3, #0
 800fe48:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2200      	movs	r2, #0
 800fe56:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2200      	movs	r2, #0
 800fe64:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d014      	beq.n	800fea4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d00e      	beq.n	800fea4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe8c:	685b      	ldr	r3, [r3, #4]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	6852      	ldr	r2, [r2, #4]
 800fe92:	b2d2      	uxtb	r2, r2
 800fe94:	4611      	mov	r1, r2
 800fe96:	6878      	ldr	r0, [r7, #4]
 800fe98:	4798      	blx	r3
 800fe9a:	4603      	mov	r3, r0
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d001      	beq.n	800fea4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800fea0:	2303      	movs	r3, #3
 800fea2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fea4:	2340      	movs	r3, #64	@ 0x40
 800fea6:	2200      	movs	r2, #0
 800fea8:	2100      	movs	r1, #0
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	f7ff fc1d 	bl	800f6ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2201      	movs	r2, #1
 800feb4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2240      	movs	r2, #64	@ 0x40
 800febc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fec0:	2340      	movs	r3, #64	@ 0x40
 800fec2:	2200      	movs	r2, #0
 800fec4:	2180      	movs	r1, #128	@ 0x80
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7ff fc0f 	bl	800f6ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	2201      	movs	r2, #1
 800fed0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	2240      	movs	r2, #64	@ 0x40
 800fed6:	621a      	str	r2, [r3, #32]

  return ret;
 800fed8:	7bfb      	ldrb	r3, [r7, #15]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3710      	adds	r7, #16
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}

0800fee2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fee2:	b480      	push	{r7}
 800fee4:	b083      	sub	sp, #12
 800fee6:	af00      	add	r7, sp, #0
 800fee8:	6078      	str	r0, [r7, #4]
 800feea:	460b      	mov	r3, r1
 800feec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	78fa      	ldrb	r2, [r7, #3]
 800fef2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fef4:	2300      	movs	r3, #0
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	370c      	adds	r7, #12
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr

0800ff02 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b082      	sub	sp, #8
 800ff06:	af00      	add	r7, sp, #0
 800ff08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	2b03      	cmp	r3, #3
 800ff14:	d110      	bne.n	800ff38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d00b      	beq.n	800ff38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff26:	69db      	ldr	r3, [r3, #28]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d005      	beq.n	800ff38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff32:	69db      	ldr	r3, [r3, #28]
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ff38:	2300      	movs	r3, #0
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3708      	adds	r7, #8
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ff42:	b480      	push	{r7}
 800ff44:	b083      	sub	sp, #12
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	6078      	str	r0, [r7, #4]
 800ff4a:	460b      	mov	r3, r1
 800ff4c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ff4e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ff50:	4618      	mov	r0, r3
 800ff52:	370c      	adds	r7, #12
 800ff54:	46bd      	mov	sp, r7
 800ff56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5a:	4770      	bx	lr

0800ff5c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b083      	sub	sp, #12
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
 800ff64:	460b      	mov	r3, r1
 800ff66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ff68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	370c      	adds	r7, #12
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr

0800ff76 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ff76:	b580      	push	{r7, lr}
 800ff78:	b086      	sub	sp, #24
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
 800ff7e:	460b      	mov	r3, r1
 800ff80:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	885b      	ldrh	r3, [r3, #2]
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	68fa      	ldr	r2, [r7, #12]
 800ff96:	7812      	ldrb	r2, [r2, #0]
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d91f      	bls.n	800ffdc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ffa2:	e013      	b.n	800ffcc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ffa4:	f107 030a 	add.w	r3, r7, #10
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	6978      	ldr	r0, [r7, #20]
 800ffac:	f000 f81b 	bl	800ffe6 <USBD_GetNextDesc>
 800ffb0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	785b      	ldrb	r3, [r3, #1]
 800ffb6:	2b05      	cmp	r3, #5
 800ffb8:	d108      	bne.n	800ffcc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ffba:	697b      	ldr	r3, [r7, #20]
 800ffbc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	789b      	ldrb	r3, [r3, #2]
 800ffc2:	78fa      	ldrb	r2, [r7, #3]
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d008      	beq.n	800ffda <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	885b      	ldrh	r3, [r3, #2]
 800ffd0:	b29a      	uxth	r2, r3
 800ffd2:	897b      	ldrh	r3, [r7, #10]
 800ffd4:	429a      	cmp	r2, r3
 800ffd6:	d8e5      	bhi.n	800ffa4 <USBD_GetEpDesc+0x2e>
 800ffd8:	e000      	b.n	800ffdc <USBD_GetEpDesc+0x66>
          break;
 800ffda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ffdc:	693b      	ldr	r3, [r7, #16]
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3718      	adds	r7, #24
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}

0800ffe6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ffe6:	b480      	push	{r7}
 800ffe8:	b085      	sub	sp, #20
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
 800ffee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800fff4:	683b      	ldr	r3, [r7, #0]
 800fff6:	881b      	ldrh	r3, [r3, #0]
 800fff8:	68fa      	ldr	r2, [r7, #12]
 800fffa:	7812      	ldrb	r2, [r2, #0]
 800fffc:	4413      	add	r3, r2
 800fffe:	b29a      	uxth	r2, r3
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	781b      	ldrb	r3, [r3, #0]
 8010008:	461a      	mov	r2, r3
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	4413      	add	r3, r2
 801000e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010010:	68fb      	ldr	r3, [r7, #12]
}
 8010012:	4618      	mov	r0, r3
 8010014:	3714      	adds	r7, #20
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr

0801001e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801001e:	b480      	push	{r7}
 8010020:	b087      	sub	sp, #28
 8010022:	af00      	add	r7, sp, #0
 8010024:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	3301      	adds	r3, #1
 8010034:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801003c:	8a3b      	ldrh	r3, [r7, #16]
 801003e:	021b      	lsls	r3, r3, #8
 8010040:	b21a      	sxth	r2, r3
 8010042:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010046:	4313      	orrs	r3, r2
 8010048:	b21b      	sxth	r3, r3
 801004a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801004c:	89fb      	ldrh	r3, [r7, #14]
}
 801004e:	4618      	mov	r0, r3
 8010050:	371c      	adds	r7, #28
 8010052:	46bd      	mov	sp, r7
 8010054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010058:	4770      	bx	lr
	...

0801005c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801005c:	b580      	push	{r7, lr}
 801005e:	b084      	sub	sp, #16
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
 8010064:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010066:	2300      	movs	r3, #0
 8010068:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010072:	2b40      	cmp	r3, #64	@ 0x40
 8010074:	d005      	beq.n	8010082 <USBD_StdDevReq+0x26>
 8010076:	2b40      	cmp	r3, #64	@ 0x40
 8010078:	d857      	bhi.n	801012a <USBD_StdDevReq+0xce>
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00f      	beq.n	801009e <USBD_StdDevReq+0x42>
 801007e:	2b20      	cmp	r3, #32
 8010080:	d153      	bne.n	801012a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	32ae      	adds	r2, #174	@ 0xae
 801008c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010090:	689b      	ldr	r3, [r3, #8]
 8010092:	6839      	ldr	r1, [r7, #0]
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	4798      	blx	r3
 8010098:	4603      	mov	r3, r0
 801009a:	73fb      	strb	r3, [r7, #15]
      break;
 801009c:	e04a      	b.n	8010134 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	785b      	ldrb	r3, [r3, #1]
 80100a2:	2b09      	cmp	r3, #9
 80100a4:	d83b      	bhi.n	801011e <USBD_StdDevReq+0xc2>
 80100a6:	a201      	add	r2, pc, #4	@ (adr r2, 80100ac <USBD_StdDevReq+0x50>)
 80100a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100ac:	08010101 	.word	0x08010101
 80100b0:	08010115 	.word	0x08010115
 80100b4:	0801011f 	.word	0x0801011f
 80100b8:	0801010b 	.word	0x0801010b
 80100bc:	0801011f 	.word	0x0801011f
 80100c0:	080100df 	.word	0x080100df
 80100c4:	080100d5 	.word	0x080100d5
 80100c8:	0801011f 	.word	0x0801011f
 80100cc:	080100f7 	.word	0x080100f7
 80100d0:	080100e9 	.word	0x080100e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80100d4:	6839      	ldr	r1, [r7, #0]
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	f000 fa3c 	bl	8010554 <USBD_GetDescriptor>
          break;
 80100dc:	e024      	b.n	8010128 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80100de:	6839      	ldr	r1, [r7, #0]
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f000 fba1 	bl	8010828 <USBD_SetAddress>
          break;
 80100e6:	e01f      	b.n	8010128 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80100e8:	6839      	ldr	r1, [r7, #0]
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f000 fbe0 	bl	80108b0 <USBD_SetConfig>
 80100f0:	4603      	mov	r3, r0
 80100f2:	73fb      	strb	r3, [r7, #15]
          break;
 80100f4:	e018      	b.n	8010128 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80100f6:	6839      	ldr	r1, [r7, #0]
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 fc83 	bl	8010a04 <USBD_GetConfig>
          break;
 80100fe:	e013      	b.n	8010128 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010100:	6839      	ldr	r1, [r7, #0]
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 fcb4 	bl	8010a70 <USBD_GetStatus>
          break;
 8010108:	e00e      	b.n	8010128 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801010a:	6839      	ldr	r1, [r7, #0]
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f000 fce3 	bl	8010ad8 <USBD_SetFeature>
          break;
 8010112:	e009      	b.n	8010128 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010114:	6839      	ldr	r1, [r7, #0]
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f000 fd07 	bl	8010b2a <USBD_ClrFeature>
          break;
 801011c:	e004      	b.n	8010128 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801011e:	6839      	ldr	r1, [r7, #0]
 8010120:	6878      	ldr	r0, [r7, #4]
 8010122:	f000 fd5e 	bl	8010be2 <USBD_CtlError>
          break;
 8010126:	bf00      	nop
      }
      break;
 8010128:	e004      	b.n	8010134 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801012a:	6839      	ldr	r1, [r7, #0]
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f000 fd58 	bl	8010be2 <USBD_CtlError>
      break;
 8010132:	bf00      	nop
  }

  return ret;
 8010134:	7bfb      	ldrb	r3, [r7, #15]
}
 8010136:	4618      	mov	r0, r3
 8010138:	3710      	adds	r7, #16
 801013a:	46bd      	mov	sp, r7
 801013c:	bd80      	pop	{r7, pc}
 801013e:	bf00      	nop

08010140 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b084      	sub	sp, #16
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
 8010148:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801014a:	2300      	movs	r3, #0
 801014c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801014e:	683b      	ldr	r3, [r7, #0]
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010156:	2b40      	cmp	r3, #64	@ 0x40
 8010158:	d005      	beq.n	8010166 <USBD_StdItfReq+0x26>
 801015a:	2b40      	cmp	r3, #64	@ 0x40
 801015c:	d852      	bhi.n	8010204 <USBD_StdItfReq+0xc4>
 801015e:	2b00      	cmp	r3, #0
 8010160:	d001      	beq.n	8010166 <USBD_StdItfReq+0x26>
 8010162:	2b20      	cmp	r3, #32
 8010164:	d14e      	bne.n	8010204 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801016c:	b2db      	uxtb	r3, r3
 801016e:	3b01      	subs	r3, #1
 8010170:	2b02      	cmp	r3, #2
 8010172:	d840      	bhi.n	80101f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	889b      	ldrh	r3, [r3, #4]
 8010178:	b2db      	uxtb	r3, r3
 801017a:	2b01      	cmp	r3, #1
 801017c:	d836      	bhi.n	80101ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801017e:	683b      	ldr	r3, [r7, #0]
 8010180:	889b      	ldrh	r3, [r3, #4]
 8010182:	b2db      	uxtb	r3, r3
 8010184:	4619      	mov	r1, r3
 8010186:	6878      	ldr	r0, [r7, #4]
 8010188:	f7ff fedb 	bl	800ff42 <USBD_CoreFindIF>
 801018c:	4603      	mov	r3, r0
 801018e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010190:	7bbb      	ldrb	r3, [r7, #14]
 8010192:	2bff      	cmp	r3, #255	@ 0xff
 8010194:	d01d      	beq.n	80101d2 <USBD_StdItfReq+0x92>
 8010196:	7bbb      	ldrb	r3, [r7, #14]
 8010198:	2b00      	cmp	r3, #0
 801019a:	d11a      	bne.n	80101d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801019c:	7bba      	ldrb	r2, [r7, #14]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	32ae      	adds	r2, #174	@ 0xae
 80101a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101a6:	689b      	ldr	r3, [r3, #8]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d00f      	beq.n	80101cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80101ac:	7bba      	ldrb	r2, [r7, #14]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80101b4:	7bba      	ldrb	r2, [r7, #14]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	32ae      	adds	r2, #174	@ 0xae
 80101ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101be:	689b      	ldr	r3, [r3, #8]
 80101c0:	6839      	ldr	r1, [r7, #0]
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	4798      	blx	r3
 80101c6:	4603      	mov	r3, r0
 80101c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80101ca:	e004      	b.n	80101d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80101cc:	2303      	movs	r3, #3
 80101ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80101d0:	e001      	b.n	80101d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80101d2:	2303      	movs	r3, #3
 80101d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80101d6:	683b      	ldr	r3, [r7, #0]
 80101d8:	88db      	ldrh	r3, [r3, #6]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d110      	bne.n	8010200 <USBD_StdItfReq+0xc0>
 80101de:	7bfb      	ldrb	r3, [r7, #15]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d10d      	bne.n	8010200 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80101e4:	6878      	ldr	r0, [r7, #4]
 80101e6:	f000 fed4 	bl	8010f92 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80101ea:	e009      	b.n	8010200 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80101ec:	6839      	ldr	r1, [r7, #0]
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f000 fcf7 	bl	8010be2 <USBD_CtlError>
          break;
 80101f4:	e004      	b.n	8010200 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80101f6:	6839      	ldr	r1, [r7, #0]
 80101f8:	6878      	ldr	r0, [r7, #4]
 80101fa:	f000 fcf2 	bl	8010be2 <USBD_CtlError>
          break;
 80101fe:	e000      	b.n	8010202 <USBD_StdItfReq+0xc2>
          break;
 8010200:	bf00      	nop
      }
      break;
 8010202:	e004      	b.n	801020e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010204:	6839      	ldr	r1, [r7, #0]
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f000 fceb 	bl	8010be2 <USBD_CtlError>
      break;
 801020c:	bf00      	nop
  }

  return ret;
 801020e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010210:	4618      	mov	r0, r3
 8010212:	3710      	adds	r7, #16
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b084      	sub	sp, #16
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
 8010220:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010222:	2300      	movs	r3, #0
 8010224:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010226:	683b      	ldr	r3, [r7, #0]
 8010228:	889b      	ldrh	r3, [r3, #4]
 801022a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801022c:	683b      	ldr	r3, [r7, #0]
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010234:	2b40      	cmp	r3, #64	@ 0x40
 8010236:	d007      	beq.n	8010248 <USBD_StdEPReq+0x30>
 8010238:	2b40      	cmp	r3, #64	@ 0x40
 801023a:	f200 817f 	bhi.w	801053c <USBD_StdEPReq+0x324>
 801023e:	2b00      	cmp	r3, #0
 8010240:	d02a      	beq.n	8010298 <USBD_StdEPReq+0x80>
 8010242:	2b20      	cmp	r3, #32
 8010244:	f040 817a 	bne.w	801053c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010248:	7bbb      	ldrb	r3, [r7, #14]
 801024a:	4619      	mov	r1, r3
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f7ff fe85 	bl	800ff5c <USBD_CoreFindEP>
 8010252:	4603      	mov	r3, r0
 8010254:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010256:	7b7b      	ldrb	r3, [r7, #13]
 8010258:	2bff      	cmp	r3, #255	@ 0xff
 801025a:	f000 8174 	beq.w	8010546 <USBD_StdEPReq+0x32e>
 801025e:	7b7b      	ldrb	r3, [r7, #13]
 8010260:	2b00      	cmp	r3, #0
 8010262:	f040 8170 	bne.w	8010546 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010266:	7b7a      	ldrb	r2, [r7, #13]
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801026e:	7b7a      	ldrb	r2, [r7, #13]
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	32ae      	adds	r2, #174	@ 0xae
 8010274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010278:	689b      	ldr	r3, [r3, #8]
 801027a:	2b00      	cmp	r3, #0
 801027c:	f000 8163 	beq.w	8010546 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010280:	7b7a      	ldrb	r2, [r7, #13]
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	32ae      	adds	r2, #174	@ 0xae
 8010286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801028a:	689b      	ldr	r3, [r3, #8]
 801028c:	6839      	ldr	r1, [r7, #0]
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	4798      	blx	r3
 8010292:	4603      	mov	r3, r0
 8010294:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010296:	e156      	b.n	8010546 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	785b      	ldrb	r3, [r3, #1]
 801029c:	2b03      	cmp	r3, #3
 801029e:	d008      	beq.n	80102b2 <USBD_StdEPReq+0x9a>
 80102a0:	2b03      	cmp	r3, #3
 80102a2:	f300 8145 	bgt.w	8010530 <USBD_StdEPReq+0x318>
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f000 809b 	beq.w	80103e2 <USBD_StdEPReq+0x1ca>
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d03c      	beq.n	801032a <USBD_StdEPReq+0x112>
 80102b0:	e13e      	b.n	8010530 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102b8:	b2db      	uxtb	r3, r3
 80102ba:	2b02      	cmp	r3, #2
 80102bc:	d002      	beq.n	80102c4 <USBD_StdEPReq+0xac>
 80102be:	2b03      	cmp	r3, #3
 80102c0:	d016      	beq.n	80102f0 <USBD_StdEPReq+0xd8>
 80102c2:	e02c      	b.n	801031e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80102c4:	7bbb      	ldrb	r3, [r7, #14]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d00d      	beq.n	80102e6 <USBD_StdEPReq+0xce>
 80102ca:	7bbb      	ldrb	r3, [r7, #14]
 80102cc:	2b80      	cmp	r3, #128	@ 0x80
 80102ce:	d00a      	beq.n	80102e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80102d0:	7bbb      	ldrb	r3, [r7, #14]
 80102d2:	4619      	mov	r1, r3
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f7ff fa41 	bl	800f75c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80102da:	2180      	movs	r1, #128	@ 0x80
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f7ff fa3d 	bl	800f75c <USBD_LL_StallEP>
 80102e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80102e4:	e020      	b.n	8010328 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80102e6:	6839      	ldr	r1, [r7, #0]
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f000 fc7a 	bl	8010be2 <USBD_CtlError>
              break;
 80102ee:	e01b      	b.n	8010328 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	885b      	ldrh	r3, [r3, #2]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d10e      	bne.n	8010316 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80102f8:	7bbb      	ldrb	r3, [r7, #14]
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d00b      	beq.n	8010316 <USBD_StdEPReq+0xfe>
 80102fe:	7bbb      	ldrb	r3, [r7, #14]
 8010300:	2b80      	cmp	r3, #128	@ 0x80
 8010302:	d008      	beq.n	8010316 <USBD_StdEPReq+0xfe>
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	88db      	ldrh	r3, [r3, #6]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d104      	bne.n	8010316 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801030c:	7bbb      	ldrb	r3, [r7, #14]
 801030e:	4619      	mov	r1, r3
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f7ff fa23 	bl	800f75c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f000 fe3b 	bl	8010f92 <USBD_CtlSendStatus>

              break;
 801031c:	e004      	b.n	8010328 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801031e:	6839      	ldr	r1, [r7, #0]
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 fc5e 	bl	8010be2 <USBD_CtlError>
              break;
 8010326:	bf00      	nop
          }
          break;
 8010328:	e107      	b.n	801053a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010330:	b2db      	uxtb	r3, r3
 8010332:	2b02      	cmp	r3, #2
 8010334:	d002      	beq.n	801033c <USBD_StdEPReq+0x124>
 8010336:	2b03      	cmp	r3, #3
 8010338:	d016      	beq.n	8010368 <USBD_StdEPReq+0x150>
 801033a:	e04b      	b.n	80103d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801033c:	7bbb      	ldrb	r3, [r7, #14]
 801033e:	2b00      	cmp	r3, #0
 8010340:	d00d      	beq.n	801035e <USBD_StdEPReq+0x146>
 8010342:	7bbb      	ldrb	r3, [r7, #14]
 8010344:	2b80      	cmp	r3, #128	@ 0x80
 8010346:	d00a      	beq.n	801035e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010348:	7bbb      	ldrb	r3, [r7, #14]
 801034a:	4619      	mov	r1, r3
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f7ff fa05 	bl	800f75c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010352:	2180      	movs	r1, #128	@ 0x80
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f7ff fa01 	bl	800f75c <USBD_LL_StallEP>
 801035a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801035c:	e040      	b.n	80103e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801035e:	6839      	ldr	r1, [r7, #0]
 8010360:	6878      	ldr	r0, [r7, #4]
 8010362:	f000 fc3e 	bl	8010be2 <USBD_CtlError>
              break;
 8010366:	e03b      	b.n	80103e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	885b      	ldrh	r3, [r3, #2]
 801036c:	2b00      	cmp	r3, #0
 801036e:	d136      	bne.n	80103de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010370:	7bbb      	ldrb	r3, [r7, #14]
 8010372:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010376:	2b00      	cmp	r3, #0
 8010378:	d004      	beq.n	8010384 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801037a:	7bbb      	ldrb	r3, [r7, #14]
 801037c:	4619      	mov	r1, r3
 801037e:	6878      	ldr	r0, [r7, #4]
 8010380:	f7ff fa05 	bl	800f78e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010384:	6878      	ldr	r0, [r7, #4]
 8010386:	f000 fe04 	bl	8010f92 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801038a:	7bbb      	ldrb	r3, [r7, #14]
 801038c:	4619      	mov	r1, r3
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f7ff fde4 	bl	800ff5c <USBD_CoreFindEP>
 8010394:	4603      	mov	r3, r0
 8010396:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010398:	7b7b      	ldrb	r3, [r7, #13]
 801039a:	2bff      	cmp	r3, #255	@ 0xff
 801039c:	d01f      	beq.n	80103de <USBD_StdEPReq+0x1c6>
 801039e:	7b7b      	ldrb	r3, [r7, #13]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d11c      	bne.n	80103de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80103a4:	7b7a      	ldrb	r2, [r7, #13]
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80103ac:	7b7a      	ldrb	r2, [r7, #13]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	32ae      	adds	r2, #174	@ 0xae
 80103b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d010      	beq.n	80103de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80103bc:	7b7a      	ldrb	r2, [r7, #13]
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	32ae      	adds	r2, #174	@ 0xae
 80103c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	6839      	ldr	r1, [r7, #0]
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	4798      	blx	r3
 80103ce:	4603      	mov	r3, r0
 80103d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80103d2:	e004      	b.n	80103de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80103d4:	6839      	ldr	r1, [r7, #0]
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f000 fc03 	bl	8010be2 <USBD_CtlError>
              break;
 80103dc:	e000      	b.n	80103e0 <USBD_StdEPReq+0x1c8>
              break;
 80103de:	bf00      	nop
          }
          break;
 80103e0:	e0ab      	b.n	801053a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	2b02      	cmp	r3, #2
 80103ec:	d002      	beq.n	80103f4 <USBD_StdEPReq+0x1dc>
 80103ee:	2b03      	cmp	r3, #3
 80103f0:	d032      	beq.n	8010458 <USBD_StdEPReq+0x240>
 80103f2:	e097      	b.n	8010524 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80103f4:	7bbb      	ldrb	r3, [r7, #14]
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d007      	beq.n	801040a <USBD_StdEPReq+0x1f2>
 80103fa:	7bbb      	ldrb	r3, [r7, #14]
 80103fc:	2b80      	cmp	r3, #128	@ 0x80
 80103fe:	d004      	beq.n	801040a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010400:	6839      	ldr	r1, [r7, #0]
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f000 fbed 	bl	8010be2 <USBD_CtlError>
                break;
 8010408:	e091      	b.n	801052e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801040a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801040e:	2b00      	cmp	r3, #0
 8010410:	da0b      	bge.n	801042a <USBD_StdEPReq+0x212>
 8010412:	7bbb      	ldrb	r3, [r7, #14]
 8010414:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010418:	4613      	mov	r3, r2
 801041a:	009b      	lsls	r3, r3, #2
 801041c:	4413      	add	r3, r2
 801041e:	009b      	lsls	r3, r3, #2
 8010420:	3310      	adds	r3, #16
 8010422:	687a      	ldr	r2, [r7, #4]
 8010424:	4413      	add	r3, r2
 8010426:	3304      	adds	r3, #4
 8010428:	e00b      	b.n	8010442 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801042a:	7bbb      	ldrb	r3, [r7, #14]
 801042c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010430:	4613      	mov	r3, r2
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	4413      	add	r3, r2
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801043c:	687a      	ldr	r2, [r7, #4]
 801043e:	4413      	add	r3, r2
 8010440:	3304      	adds	r3, #4
 8010442:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	2200      	movs	r2, #0
 8010448:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	2202      	movs	r2, #2
 801044e:	4619      	mov	r1, r3
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f000 fd44 	bl	8010ede <USBD_CtlSendData>
              break;
 8010456:	e06a      	b.n	801052e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010458:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801045c:	2b00      	cmp	r3, #0
 801045e:	da11      	bge.n	8010484 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010460:	7bbb      	ldrb	r3, [r7, #14]
 8010462:	f003 020f 	and.w	r2, r3, #15
 8010466:	6879      	ldr	r1, [r7, #4]
 8010468:	4613      	mov	r3, r2
 801046a:	009b      	lsls	r3, r3, #2
 801046c:	4413      	add	r3, r2
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	440b      	add	r3, r1
 8010472:	3324      	adds	r3, #36	@ 0x24
 8010474:	881b      	ldrh	r3, [r3, #0]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d117      	bne.n	80104aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801047a:	6839      	ldr	r1, [r7, #0]
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f000 fbb0 	bl	8010be2 <USBD_CtlError>
                  break;
 8010482:	e054      	b.n	801052e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010484:	7bbb      	ldrb	r3, [r7, #14]
 8010486:	f003 020f 	and.w	r2, r3, #15
 801048a:	6879      	ldr	r1, [r7, #4]
 801048c:	4613      	mov	r3, r2
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	4413      	add	r3, r2
 8010492:	009b      	lsls	r3, r3, #2
 8010494:	440b      	add	r3, r1
 8010496:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801049a:	881b      	ldrh	r3, [r3, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d104      	bne.n	80104aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80104a0:	6839      	ldr	r1, [r7, #0]
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f000 fb9d 	bl	8010be2 <USBD_CtlError>
                  break;
 80104a8:	e041      	b.n	801052e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80104aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	da0b      	bge.n	80104ca <USBD_StdEPReq+0x2b2>
 80104b2:	7bbb      	ldrb	r3, [r7, #14]
 80104b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80104b8:	4613      	mov	r3, r2
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	4413      	add	r3, r2
 80104be:	009b      	lsls	r3, r3, #2
 80104c0:	3310      	adds	r3, #16
 80104c2:	687a      	ldr	r2, [r7, #4]
 80104c4:	4413      	add	r3, r2
 80104c6:	3304      	adds	r3, #4
 80104c8:	e00b      	b.n	80104e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80104ca:	7bbb      	ldrb	r3, [r7, #14]
 80104cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80104d0:	4613      	mov	r3, r2
 80104d2:	009b      	lsls	r3, r3, #2
 80104d4:	4413      	add	r3, r2
 80104d6:	009b      	lsls	r3, r3, #2
 80104d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80104dc:	687a      	ldr	r2, [r7, #4]
 80104de:	4413      	add	r3, r2
 80104e0:	3304      	adds	r3, #4
 80104e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80104e4:	7bbb      	ldrb	r3, [r7, #14]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d002      	beq.n	80104f0 <USBD_StdEPReq+0x2d8>
 80104ea:	7bbb      	ldrb	r3, [r7, #14]
 80104ec:	2b80      	cmp	r3, #128	@ 0x80
 80104ee:	d103      	bne.n	80104f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	2200      	movs	r2, #0
 80104f4:	601a      	str	r2, [r3, #0]
 80104f6:	e00e      	b.n	8010516 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80104f8:	7bbb      	ldrb	r3, [r7, #14]
 80104fa:	4619      	mov	r1, r3
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f7ff f95f 	bl	800f7c0 <USBD_LL_IsStallEP>
 8010502:	4603      	mov	r3, r0
 8010504:	2b00      	cmp	r3, #0
 8010506:	d003      	beq.n	8010510 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	2201      	movs	r2, #1
 801050c:	601a      	str	r2, [r3, #0]
 801050e:	e002      	b.n	8010516 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010510:	68bb      	ldr	r3, [r7, #8]
 8010512:	2200      	movs	r2, #0
 8010514:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	2202      	movs	r2, #2
 801051a:	4619      	mov	r1, r3
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f000 fcde 	bl	8010ede <USBD_CtlSendData>
              break;
 8010522:	e004      	b.n	801052e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010524:	6839      	ldr	r1, [r7, #0]
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 fb5b 	bl	8010be2 <USBD_CtlError>
              break;
 801052c:	bf00      	nop
          }
          break;
 801052e:	e004      	b.n	801053a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010530:	6839      	ldr	r1, [r7, #0]
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f000 fb55 	bl	8010be2 <USBD_CtlError>
          break;
 8010538:	bf00      	nop
      }
      break;
 801053a:	e005      	b.n	8010548 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801053c:	6839      	ldr	r1, [r7, #0]
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f000 fb4f 	bl	8010be2 <USBD_CtlError>
      break;
 8010544:	e000      	b.n	8010548 <USBD_StdEPReq+0x330>
      break;
 8010546:	bf00      	nop
  }

  return ret;
 8010548:	7bfb      	ldrb	r3, [r7, #15]
}
 801054a:	4618      	mov	r0, r3
 801054c:	3710      	adds	r7, #16
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}
	...

08010554 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801055e:	2300      	movs	r3, #0
 8010560:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010562:	2300      	movs	r3, #0
 8010564:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010566:	2300      	movs	r3, #0
 8010568:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801056a:	683b      	ldr	r3, [r7, #0]
 801056c:	885b      	ldrh	r3, [r3, #2]
 801056e:	0a1b      	lsrs	r3, r3, #8
 8010570:	b29b      	uxth	r3, r3
 8010572:	3b01      	subs	r3, #1
 8010574:	2b06      	cmp	r3, #6
 8010576:	f200 8128 	bhi.w	80107ca <USBD_GetDescriptor+0x276>
 801057a:	a201      	add	r2, pc, #4	@ (adr r2, 8010580 <USBD_GetDescriptor+0x2c>)
 801057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010580:	0801059d 	.word	0x0801059d
 8010584:	080105b5 	.word	0x080105b5
 8010588:	080105f5 	.word	0x080105f5
 801058c:	080107cb 	.word	0x080107cb
 8010590:	080107cb 	.word	0x080107cb
 8010594:	0801076b 	.word	0x0801076b
 8010598:	08010797 	.word	0x08010797
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	7c12      	ldrb	r2, [r2, #16]
 80105a8:	f107 0108 	add.w	r1, r7, #8
 80105ac:	4610      	mov	r0, r2
 80105ae:	4798      	blx	r3
 80105b0:	60f8      	str	r0, [r7, #12]
      break;
 80105b2:	e112      	b.n	80107da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	7c1b      	ldrb	r3, [r3, #16]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d10d      	bne.n	80105d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80105c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80105c4:	f107 0208 	add.w	r2, r7, #8
 80105c8:	4610      	mov	r0, r2
 80105ca:	4798      	blx	r3
 80105cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	3301      	adds	r3, #1
 80105d2:	2202      	movs	r2, #2
 80105d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80105d6:	e100      	b.n	80107da <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80105de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105e0:	f107 0208 	add.w	r2, r7, #8
 80105e4:	4610      	mov	r0, r2
 80105e6:	4798      	blx	r3
 80105e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	3301      	adds	r3, #1
 80105ee:	2202      	movs	r2, #2
 80105f0:	701a      	strb	r2, [r3, #0]
      break;
 80105f2:	e0f2      	b.n	80107da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	885b      	ldrh	r3, [r3, #2]
 80105f8:	b2db      	uxtb	r3, r3
 80105fa:	2b05      	cmp	r3, #5
 80105fc:	f200 80ac 	bhi.w	8010758 <USBD_GetDescriptor+0x204>
 8010600:	a201      	add	r2, pc, #4	@ (adr r2, 8010608 <USBD_GetDescriptor+0xb4>)
 8010602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010606:	bf00      	nop
 8010608:	08010621 	.word	0x08010621
 801060c:	08010655 	.word	0x08010655
 8010610:	08010689 	.word	0x08010689
 8010614:	080106bd 	.word	0x080106bd
 8010618:	080106f1 	.word	0x080106f1
 801061c:	08010725 	.word	0x08010725
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010626:	685b      	ldr	r3, [r3, #4]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d00b      	beq.n	8010644 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010632:	685b      	ldr	r3, [r3, #4]
 8010634:	687a      	ldr	r2, [r7, #4]
 8010636:	7c12      	ldrb	r2, [r2, #16]
 8010638:	f107 0108 	add.w	r1, r7, #8
 801063c:	4610      	mov	r0, r2
 801063e:	4798      	blx	r3
 8010640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010642:	e091      	b.n	8010768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010644:	6839      	ldr	r1, [r7, #0]
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f000 facb 	bl	8010be2 <USBD_CtlError>
            err++;
 801064c:	7afb      	ldrb	r3, [r7, #11]
 801064e:	3301      	adds	r3, #1
 8010650:	72fb      	strb	r3, [r7, #11]
          break;
 8010652:	e089      	b.n	8010768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801065a:	689b      	ldr	r3, [r3, #8]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d00b      	beq.n	8010678 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010666:	689b      	ldr	r3, [r3, #8]
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	7c12      	ldrb	r2, [r2, #16]
 801066c:	f107 0108 	add.w	r1, r7, #8
 8010670:	4610      	mov	r0, r2
 8010672:	4798      	blx	r3
 8010674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010676:	e077      	b.n	8010768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010678:	6839      	ldr	r1, [r7, #0]
 801067a:	6878      	ldr	r0, [r7, #4]
 801067c:	f000 fab1 	bl	8010be2 <USBD_CtlError>
            err++;
 8010680:	7afb      	ldrb	r3, [r7, #11]
 8010682:	3301      	adds	r3, #1
 8010684:	72fb      	strb	r3, [r7, #11]
          break;
 8010686:	e06f      	b.n	8010768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d00b      	beq.n	80106ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801069a:	68db      	ldr	r3, [r3, #12]
 801069c:	687a      	ldr	r2, [r7, #4]
 801069e:	7c12      	ldrb	r2, [r2, #16]
 80106a0:	f107 0108 	add.w	r1, r7, #8
 80106a4:	4610      	mov	r0, r2
 80106a6:	4798      	blx	r3
 80106a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80106aa:	e05d      	b.n	8010768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80106ac:	6839      	ldr	r1, [r7, #0]
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f000 fa97 	bl	8010be2 <USBD_CtlError>
            err++;
 80106b4:	7afb      	ldrb	r3, [r7, #11]
 80106b6:	3301      	adds	r3, #1
 80106b8:	72fb      	strb	r3, [r7, #11]
          break;
 80106ba:	e055      	b.n	8010768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80106c2:	691b      	ldr	r3, [r3, #16]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d00b      	beq.n	80106e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80106ce:	691b      	ldr	r3, [r3, #16]
 80106d0:	687a      	ldr	r2, [r7, #4]
 80106d2:	7c12      	ldrb	r2, [r2, #16]
 80106d4:	f107 0108 	add.w	r1, r7, #8
 80106d8:	4610      	mov	r0, r2
 80106da:	4798      	blx	r3
 80106dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80106de:	e043      	b.n	8010768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80106e0:	6839      	ldr	r1, [r7, #0]
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f000 fa7d 	bl	8010be2 <USBD_CtlError>
            err++;
 80106e8:	7afb      	ldrb	r3, [r7, #11]
 80106ea:	3301      	adds	r3, #1
 80106ec:	72fb      	strb	r3, [r7, #11]
          break;
 80106ee:	e03b      	b.n	8010768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80106f6:	695b      	ldr	r3, [r3, #20]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d00b      	beq.n	8010714 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010702:	695b      	ldr	r3, [r3, #20]
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	7c12      	ldrb	r2, [r2, #16]
 8010708:	f107 0108 	add.w	r1, r7, #8
 801070c:	4610      	mov	r0, r2
 801070e:	4798      	blx	r3
 8010710:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010712:	e029      	b.n	8010768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010714:	6839      	ldr	r1, [r7, #0]
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f000 fa63 	bl	8010be2 <USBD_CtlError>
            err++;
 801071c:	7afb      	ldrb	r3, [r7, #11]
 801071e:	3301      	adds	r3, #1
 8010720:	72fb      	strb	r3, [r7, #11]
          break;
 8010722:	e021      	b.n	8010768 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801072a:	699b      	ldr	r3, [r3, #24]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d00b      	beq.n	8010748 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010736:	699b      	ldr	r3, [r3, #24]
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	7c12      	ldrb	r2, [r2, #16]
 801073c:	f107 0108 	add.w	r1, r7, #8
 8010740:	4610      	mov	r0, r2
 8010742:	4798      	blx	r3
 8010744:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010746:	e00f      	b.n	8010768 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010748:	6839      	ldr	r1, [r7, #0]
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f000 fa49 	bl	8010be2 <USBD_CtlError>
            err++;
 8010750:	7afb      	ldrb	r3, [r7, #11]
 8010752:	3301      	adds	r3, #1
 8010754:	72fb      	strb	r3, [r7, #11]
          break;
 8010756:	e007      	b.n	8010768 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010758:	6839      	ldr	r1, [r7, #0]
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f000 fa41 	bl	8010be2 <USBD_CtlError>
          err++;
 8010760:	7afb      	ldrb	r3, [r7, #11]
 8010762:	3301      	adds	r3, #1
 8010764:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010766:	bf00      	nop
      }
      break;
 8010768:	e037      	b.n	80107da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	7c1b      	ldrb	r3, [r3, #16]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d109      	bne.n	8010786 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801077a:	f107 0208 	add.w	r2, r7, #8
 801077e:	4610      	mov	r0, r2
 8010780:	4798      	blx	r3
 8010782:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010784:	e029      	b.n	80107da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8010786:	6839      	ldr	r1, [r7, #0]
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 fa2a 	bl	8010be2 <USBD_CtlError>
        err++;
 801078e:	7afb      	ldrb	r3, [r7, #11]
 8010790:	3301      	adds	r3, #1
 8010792:	72fb      	strb	r3, [r7, #11]
      break;
 8010794:	e021      	b.n	80107da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	7c1b      	ldrb	r3, [r3, #16]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d10d      	bne.n	80107ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80107a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80107a6:	f107 0208 	add.w	r2, r7, #8
 80107aa:	4610      	mov	r0, r2
 80107ac:	4798      	blx	r3
 80107ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	3301      	adds	r3, #1
 80107b4:	2207      	movs	r2, #7
 80107b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80107b8:	e00f      	b.n	80107da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80107ba:	6839      	ldr	r1, [r7, #0]
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f000 fa10 	bl	8010be2 <USBD_CtlError>
        err++;
 80107c2:	7afb      	ldrb	r3, [r7, #11]
 80107c4:	3301      	adds	r3, #1
 80107c6:	72fb      	strb	r3, [r7, #11]
      break;
 80107c8:	e007      	b.n	80107da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80107ca:	6839      	ldr	r1, [r7, #0]
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f000 fa08 	bl	8010be2 <USBD_CtlError>
      err++;
 80107d2:	7afb      	ldrb	r3, [r7, #11]
 80107d4:	3301      	adds	r3, #1
 80107d6:	72fb      	strb	r3, [r7, #11]
      break;
 80107d8:	bf00      	nop
  }

  if (err != 0U)
 80107da:	7afb      	ldrb	r3, [r7, #11]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d11e      	bne.n	801081e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	88db      	ldrh	r3, [r3, #6]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d016      	beq.n	8010816 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80107e8:	893b      	ldrh	r3, [r7, #8]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00e      	beq.n	801080c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	88da      	ldrh	r2, [r3, #6]
 80107f2:	893b      	ldrh	r3, [r7, #8]
 80107f4:	4293      	cmp	r3, r2
 80107f6:	bf28      	it	cs
 80107f8:	4613      	movcs	r3, r2
 80107fa:	b29b      	uxth	r3, r3
 80107fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80107fe:	893b      	ldrh	r3, [r7, #8]
 8010800:	461a      	mov	r2, r3
 8010802:	68f9      	ldr	r1, [r7, #12]
 8010804:	6878      	ldr	r0, [r7, #4]
 8010806:	f000 fb6a 	bl	8010ede <USBD_CtlSendData>
 801080a:	e009      	b.n	8010820 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801080c:	6839      	ldr	r1, [r7, #0]
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f000 f9e7 	bl	8010be2 <USBD_CtlError>
 8010814:	e004      	b.n	8010820 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010816:	6878      	ldr	r0, [r7, #4]
 8010818:	f000 fbbb 	bl	8010f92 <USBD_CtlSendStatus>
 801081c:	e000      	b.n	8010820 <USBD_GetDescriptor+0x2cc>
    return;
 801081e:	bf00      	nop
  }
}
 8010820:	3710      	adds	r7, #16
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop

08010828 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	889b      	ldrh	r3, [r3, #4]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d131      	bne.n	801089e <USBD_SetAddress+0x76>
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	88db      	ldrh	r3, [r3, #6]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d12d      	bne.n	801089e <USBD_SetAddress+0x76>
 8010842:	683b      	ldr	r3, [r7, #0]
 8010844:	885b      	ldrh	r3, [r3, #2]
 8010846:	2b7f      	cmp	r3, #127	@ 0x7f
 8010848:	d829      	bhi.n	801089e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	885b      	ldrh	r3, [r3, #2]
 801084e:	b2db      	uxtb	r3, r3
 8010850:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010854:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801085c:	b2db      	uxtb	r3, r3
 801085e:	2b03      	cmp	r3, #3
 8010860:	d104      	bne.n	801086c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010862:	6839      	ldr	r1, [r7, #0]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 f9bc 	bl	8010be2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801086a:	e01d      	b.n	80108a8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	7bfa      	ldrb	r2, [r7, #15]
 8010870:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010874:	7bfb      	ldrb	r3, [r7, #15]
 8010876:	4619      	mov	r1, r3
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f7fe ffcd 	bl	800f818 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f000 fb87 	bl	8010f92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010884:	7bfb      	ldrb	r3, [r7, #15]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d004      	beq.n	8010894 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2202      	movs	r2, #2
 801088e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010892:	e009      	b.n	80108a8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2201      	movs	r2, #1
 8010898:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801089c:	e004      	b.n	80108a8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801089e:	6839      	ldr	r1, [r7, #0]
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f000 f99e 	bl	8010be2 <USBD_CtlError>
  }
}
 80108a6:	bf00      	nop
 80108a8:	bf00      	nop
 80108aa:	3710      	adds	r7, #16
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b084      	sub	sp, #16
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80108ba:	2300      	movs	r3, #0
 80108bc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	885b      	ldrh	r3, [r3, #2]
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	4b4e      	ldr	r3, [pc, #312]	@ (8010a00 <USBD_SetConfig+0x150>)
 80108c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80108c8:	4b4d      	ldr	r3, [pc, #308]	@ (8010a00 <USBD_SetConfig+0x150>)
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	2b01      	cmp	r3, #1
 80108ce:	d905      	bls.n	80108dc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80108d0:	6839      	ldr	r1, [r7, #0]
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f000 f985 	bl	8010be2 <USBD_CtlError>
    return USBD_FAIL;
 80108d8:	2303      	movs	r3, #3
 80108da:	e08c      	b.n	80109f6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108e2:	b2db      	uxtb	r3, r3
 80108e4:	2b02      	cmp	r3, #2
 80108e6:	d002      	beq.n	80108ee <USBD_SetConfig+0x3e>
 80108e8:	2b03      	cmp	r3, #3
 80108ea:	d029      	beq.n	8010940 <USBD_SetConfig+0x90>
 80108ec:	e075      	b.n	80109da <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80108ee:	4b44      	ldr	r3, [pc, #272]	@ (8010a00 <USBD_SetConfig+0x150>)
 80108f0:	781b      	ldrb	r3, [r3, #0]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d020      	beq.n	8010938 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80108f6:	4b42      	ldr	r3, [pc, #264]	@ (8010a00 <USBD_SetConfig+0x150>)
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	461a      	mov	r2, r3
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010900:	4b3f      	ldr	r3, [pc, #252]	@ (8010a00 <USBD_SetConfig+0x150>)
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	4619      	mov	r1, r3
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f7ff f8a9 	bl	800fa5e <USBD_SetClassConfig>
 801090c:	4603      	mov	r3, r0
 801090e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010910:	7bfb      	ldrb	r3, [r7, #15]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d008      	beq.n	8010928 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010916:	6839      	ldr	r1, [r7, #0]
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f000 f962 	bl	8010be2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2202      	movs	r2, #2
 8010922:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010926:	e065      	b.n	80109f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010928:	6878      	ldr	r0, [r7, #4]
 801092a:	f000 fb32 	bl	8010f92 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	2203      	movs	r2, #3
 8010932:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010936:	e05d      	b.n	80109f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010938:	6878      	ldr	r0, [r7, #4]
 801093a:	f000 fb2a 	bl	8010f92 <USBD_CtlSendStatus>
      break;
 801093e:	e059      	b.n	80109f4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010940:	4b2f      	ldr	r3, [pc, #188]	@ (8010a00 <USBD_SetConfig+0x150>)
 8010942:	781b      	ldrb	r3, [r3, #0]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d112      	bne.n	801096e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2202      	movs	r2, #2
 801094c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010950:	4b2b      	ldr	r3, [pc, #172]	@ (8010a00 <USBD_SetConfig+0x150>)
 8010952:	781b      	ldrb	r3, [r3, #0]
 8010954:	461a      	mov	r2, r3
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801095a:	4b29      	ldr	r3, [pc, #164]	@ (8010a00 <USBD_SetConfig+0x150>)
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	4619      	mov	r1, r3
 8010960:	6878      	ldr	r0, [r7, #4]
 8010962:	f7ff f898 	bl	800fa96 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f000 fb13 	bl	8010f92 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801096c:	e042      	b.n	80109f4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801096e:	4b24      	ldr	r3, [pc, #144]	@ (8010a00 <USBD_SetConfig+0x150>)
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	461a      	mov	r2, r3
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	429a      	cmp	r2, r3
 801097a:	d02a      	beq.n	80109d2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	685b      	ldr	r3, [r3, #4]
 8010980:	b2db      	uxtb	r3, r3
 8010982:	4619      	mov	r1, r3
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f7ff f886 	bl	800fa96 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801098a:	4b1d      	ldr	r3, [pc, #116]	@ (8010a00 <USBD_SetConfig+0x150>)
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	461a      	mov	r2, r3
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010994:	4b1a      	ldr	r3, [pc, #104]	@ (8010a00 <USBD_SetConfig+0x150>)
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	4619      	mov	r1, r3
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f7ff f85f 	bl	800fa5e <USBD_SetClassConfig>
 80109a0:	4603      	mov	r3, r0
 80109a2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80109a4:	7bfb      	ldrb	r3, [r7, #15]
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	d00f      	beq.n	80109ca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80109aa:	6839      	ldr	r1, [r7, #0]
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f000 f918 	bl	8010be2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	b2db      	uxtb	r3, r3
 80109b8:	4619      	mov	r1, r3
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f7ff f86b 	bl	800fa96 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	2202      	movs	r2, #2
 80109c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80109c8:	e014      	b.n	80109f4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f000 fae1 	bl	8010f92 <USBD_CtlSendStatus>
      break;
 80109d0:	e010      	b.n	80109f4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80109d2:	6878      	ldr	r0, [r7, #4]
 80109d4:	f000 fadd 	bl	8010f92 <USBD_CtlSendStatus>
      break;
 80109d8:	e00c      	b.n	80109f4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80109da:	6839      	ldr	r1, [r7, #0]
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f000 f900 	bl	8010be2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80109e2:	4b07      	ldr	r3, [pc, #28]	@ (8010a00 <USBD_SetConfig+0x150>)
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	4619      	mov	r1, r3
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f7ff f854 	bl	800fa96 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80109ee:	2303      	movs	r3, #3
 80109f0:	73fb      	strb	r3, [r7, #15]
      break;
 80109f2:	bf00      	nop
  }

  return ret;
 80109f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80109f6:	4618      	mov	r0, r3
 80109f8:	3710      	adds	r7, #16
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
 80109fe:	bf00      	nop
 8010a00:	20011164 	.word	0x20011164

08010a04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010a0e:	683b      	ldr	r3, [r7, #0]
 8010a10:	88db      	ldrh	r3, [r3, #6]
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	d004      	beq.n	8010a20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010a16:	6839      	ldr	r1, [r7, #0]
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f000 f8e2 	bl	8010be2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010a1e:	e023      	b.n	8010a68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	2b02      	cmp	r3, #2
 8010a2a:	dc02      	bgt.n	8010a32 <USBD_GetConfig+0x2e>
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	dc03      	bgt.n	8010a38 <USBD_GetConfig+0x34>
 8010a30:	e015      	b.n	8010a5e <USBD_GetConfig+0x5a>
 8010a32:	2b03      	cmp	r3, #3
 8010a34:	d00b      	beq.n	8010a4e <USBD_GetConfig+0x4a>
 8010a36:	e012      	b.n	8010a5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	3308      	adds	r3, #8
 8010a42:	2201      	movs	r2, #1
 8010a44:	4619      	mov	r1, r3
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f000 fa49 	bl	8010ede <USBD_CtlSendData>
        break;
 8010a4c:	e00c      	b.n	8010a68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	3304      	adds	r3, #4
 8010a52:	2201      	movs	r2, #1
 8010a54:	4619      	mov	r1, r3
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f000 fa41 	bl	8010ede <USBD_CtlSendData>
        break;
 8010a5c:	e004      	b.n	8010a68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010a5e:	6839      	ldr	r1, [r7, #0]
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f000 f8be 	bl	8010be2 <USBD_CtlError>
        break;
 8010a66:	bf00      	nop
}
 8010a68:	bf00      	nop
 8010a6a:	3708      	adds	r7, #8
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}

08010a70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b082      	sub	sp, #8
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a80:	b2db      	uxtb	r3, r3
 8010a82:	3b01      	subs	r3, #1
 8010a84:	2b02      	cmp	r3, #2
 8010a86:	d81e      	bhi.n	8010ac6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	88db      	ldrh	r3, [r3, #6]
 8010a8c:	2b02      	cmp	r3, #2
 8010a8e:	d004      	beq.n	8010a9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010a90:	6839      	ldr	r1, [r7, #0]
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f000 f8a5 	bl	8010be2 <USBD_CtlError>
        break;
 8010a98:	e01a      	b.n	8010ad0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d005      	beq.n	8010ab6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	68db      	ldr	r3, [r3, #12]
 8010aae:	f043 0202 	orr.w	r2, r3, #2
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	330c      	adds	r3, #12
 8010aba:	2202      	movs	r2, #2
 8010abc:	4619      	mov	r1, r3
 8010abe:	6878      	ldr	r0, [r7, #4]
 8010ac0:	f000 fa0d 	bl	8010ede <USBD_CtlSendData>
      break;
 8010ac4:	e004      	b.n	8010ad0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010ac6:	6839      	ldr	r1, [r7, #0]
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f000 f88a 	bl	8010be2 <USBD_CtlError>
      break;
 8010ace:	bf00      	nop
  }
}
 8010ad0:	bf00      	nop
 8010ad2:	3708      	adds	r7, #8
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}

08010ad8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
 8010ae0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	885b      	ldrh	r3, [r3, #2]
 8010ae6:	2b01      	cmp	r3, #1
 8010ae8:	d107      	bne.n	8010afa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	2201      	movs	r2, #1
 8010aee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010af2:	6878      	ldr	r0, [r7, #4]
 8010af4:	f000 fa4d 	bl	8010f92 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010af8:	e013      	b.n	8010b22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010afa:	683b      	ldr	r3, [r7, #0]
 8010afc:	885b      	ldrh	r3, [r3, #2]
 8010afe:	2b02      	cmp	r3, #2
 8010b00:	d10b      	bne.n	8010b1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8010b02:	683b      	ldr	r3, [r7, #0]
 8010b04:	889b      	ldrh	r3, [r3, #4]
 8010b06:	0a1b      	lsrs	r3, r3, #8
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	b2da      	uxtb	r2, r3
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8010b12:	6878      	ldr	r0, [r7, #4]
 8010b14:	f000 fa3d 	bl	8010f92 <USBD_CtlSendStatus>
}
 8010b18:	e003      	b.n	8010b22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010b1a:	6839      	ldr	r1, [r7, #0]
 8010b1c:	6878      	ldr	r0, [r7, #4]
 8010b1e:	f000 f860 	bl	8010be2 <USBD_CtlError>
}
 8010b22:	bf00      	nop
 8010b24:	3708      	adds	r7, #8
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}

08010b2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b2a:	b580      	push	{r7, lr}
 8010b2c:	b082      	sub	sp, #8
 8010b2e:	af00      	add	r7, sp, #0
 8010b30:	6078      	str	r0, [r7, #4]
 8010b32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010b3a:	b2db      	uxtb	r3, r3
 8010b3c:	3b01      	subs	r3, #1
 8010b3e:	2b02      	cmp	r3, #2
 8010b40:	d80b      	bhi.n	8010b5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010b42:	683b      	ldr	r3, [r7, #0]
 8010b44:	885b      	ldrh	r3, [r3, #2]
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d10c      	bne.n	8010b64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010b52:	6878      	ldr	r0, [r7, #4]
 8010b54:	f000 fa1d 	bl	8010f92 <USBD_CtlSendStatus>
      }
      break;
 8010b58:	e004      	b.n	8010b64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010b5a:	6839      	ldr	r1, [r7, #0]
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f000 f840 	bl	8010be2 <USBD_CtlError>
      break;
 8010b62:	e000      	b.n	8010b66 <USBD_ClrFeature+0x3c>
      break;
 8010b64:	bf00      	nop
  }
}
 8010b66:	bf00      	nop
 8010b68:	3708      	adds	r7, #8
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b084      	sub	sp, #16
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
 8010b76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	781a      	ldrb	r2, [r3, #0]
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	3301      	adds	r3, #1
 8010b88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	781a      	ldrb	r2, [r3, #0]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	3301      	adds	r3, #1
 8010b96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010b98:	68f8      	ldr	r0, [r7, #12]
 8010b9a:	f7ff fa40 	bl	801001e <SWAPBYTE>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	461a      	mov	r2, r3
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	3301      	adds	r3, #1
 8010baa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010bac:	68fb      	ldr	r3, [r7, #12]
 8010bae:	3301      	adds	r3, #1
 8010bb0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010bb2:	68f8      	ldr	r0, [r7, #12]
 8010bb4:	f7ff fa33 	bl	801001e <SWAPBYTE>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	461a      	mov	r2, r3
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	3301      	adds	r3, #1
 8010bca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010bcc:	68f8      	ldr	r0, [r7, #12]
 8010bce:	f7ff fa26 	bl	801001e <SWAPBYTE>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	80da      	strh	r2, [r3, #6]
}
 8010bda:	bf00      	nop
 8010bdc:	3710      	adds	r7, #16
 8010bde:	46bd      	mov	sp, r7
 8010be0:	bd80      	pop	{r7, pc}

08010be2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010be2:	b580      	push	{r7, lr}
 8010be4:	b082      	sub	sp, #8
 8010be6:	af00      	add	r7, sp, #0
 8010be8:	6078      	str	r0, [r7, #4]
 8010bea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010bec:	2180      	movs	r1, #128	@ 0x80
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f7fe fdb4 	bl	800f75c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010bf4:	2100      	movs	r1, #0
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f7fe fdb0 	bl	800f75c <USBD_LL_StallEP>
}
 8010bfc:	bf00      	nop
 8010bfe:	3708      	adds	r7, #8
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b086      	sub	sp, #24
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	60f8      	str	r0, [r7, #12]
 8010c0c:	60b9      	str	r1, [r7, #8]
 8010c0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010c10:	2300      	movs	r3, #0
 8010c12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d036      	beq.n	8010c88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010c1e:	6938      	ldr	r0, [r7, #16]
 8010c20:	f000 f836 	bl	8010c90 <USBD_GetLen>
 8010c24:	4603      	mov	r3, r0
 8010c26:	3301      	adds	r3, #1
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	005b      	lsls	r3, r3, #1
 8010c2c:	b29a      	uxth	r2, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010c32:	7dfb      	ldrb	r3, [r7, #23]
 8010c34:	68ba      	ldr	r2, [r7, #8]
 8010c36:	4413      	add	r3, r2
 8010c38:	687a      	ldr	r2, [r7, #4]
 8010c3a:	7812      	ldrb	r2, [r2, #0]
 8010c3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8010c3e:	7dfb      	ldrb	r3, [r7, #23]
 8010c40:	3301      	adds	r3, #1
 8010c42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010c44:	7dfb      	ldrb	r3, [r7, #23]
 8010c46:	68ba      	ldr	r2, [r7, #8]
 8010c48:	4413      	add	r3, r2
 8010c4a:	2203      	movs	r2, #3
 8010c4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8010c4e:	7dfb      	ldrb	r3, [r7, #23]
 8010c50:	3301      	adds	r3, #1
 8010c52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010c54:	e013      	b.n	8010c7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010c56:	7dfb      	ldrb	r3, [r7, #23]
 8010c58:	68ba      	ldr	r2, [r7, #8]
 8010c5a:	4413      	add	r3, r2
 8010c5c:	693a      	ldr	r2, [r7, #16]
 8010c5e:	7812      	ldrb	r2, [r2, #0]
 8010c60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	3301      	adds	r3, #1
 8010c66:	613b      	str	r3, [r7, #16]
    idx++;
 8010c68:	7dfb      	ldrb	r3, [r7, #23]
 8010c6a:	3301      	adds	r3, #1
 8010c6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010c6e:	7dfb      	ldrb	r3, [r7, #23]
 8010c70:	68ba      	ldr	r2, [r7, #8]
 8010c72:	4413      	add	r3, r2
 8010c74:	2200      	movs	r2, #0
 8010c76:	701a      	strb	r2, [r3, #0]
    idx++;
 8010c78:	7dfb      	ldrb	r3, [r7, #23]
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010c7e:	693b      	ldr	r3, [r7, #16]
 8010c80:	781b      	ldrb	r3, [r3, #0]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d1e7      	bne.n	8010c56 <USBD_GetString+0x52>
 8010c86:	e000      	b.n	8010c8a <USBD_GetString+0x86>
    return;
 8010c88:	bf00      	nop
  }
}
 8010c8a:	3718      	adds	r7, #24
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	bd80      	pop	{r7, pc}

08010c90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010c90:	b480      	push	{r7}
 8010c92:	b085      	sub	sp, #20
 8010c94:	af00      	add	r7, sp, #0
 8010c96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010ca0:	e005      	b.n	8010cae <USBD_GetLen+0x1e>
  {
    len++;
 8010ca2:	7bfb      	ldrb	r3, [r7, #15]
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010ca8:	68bb      	ldr	r3, [r7, #8]
 8010caa:	3301      	adds	r3, #1
 8010cac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	781b      	ldrb	r3, [r3, #0]
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	d1f5      	bne.n	8010ca2 <USBD_GetLen+0x12>
  }

  return len;
 8010cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3714      	adds	r7, #20
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr

08010cc4 <USBD_Class_DeviceDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b083      	sub	sp, #12
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	4603      	mov	r3, r0
 8010ccc:	6039      	str	r1, [r7, #0]
 8010cce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_DeviceDesc);
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	2212      	movs	r2, #18
 8010cd4:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_DeviceDesc;
 8010cd6:	4b03      	ldr	r3, [pc, #12]	@ (8010ce4 <USBD_Class_DeviceDescriptor+0x20>)
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	370c      	adds	r7, #12
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr
 8010ce4:	200000f0 	.word	0x200000f0

08010ce8 <USBD_Class_LangIDStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	4603      	mov	r3, r0
 8010cf0:	6039      	str	r1, [r7, #0]
 8010cf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = sizeof(USBD_LangIDDesc);
 8010cf4:	683b      	ldr	r3, [r7, #0]
 8010cf6:	2204      	movs	r2, #4
 8010cf8:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)USBD_LangIDDesc;
 8010cfa:	4b03      	ldr	r3, [pc, #12]	@ (8010d08 <USBD_Class_LangIDStrDescriptor+0x20>)
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	370c      	adds	r7, #12
 8010d00:	46bd      	mov	sp, r7
 8010d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d06:	4770      	bx	lr
 8010d08:	20000104 	.word	0x20000104

08010d0c <USBD_Class_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	4603      	mov	r3, r0
 8010d14:	6039      	str	r1, [r7, #0]
 8010d16:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8010d18:	79fb      	ldrb	r3, [r7, #7]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d105      	bne.n	8010d2a <USBD_Class_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8010d1e:	683a      	ldr	r2, [r7, #0]
 8010d20:	4907      	ldr	r1, [pc, #28]	@ (8010d40 <USBD_Class_ProductStrDescriptor+0x34>)
 8010d22:	4808      	ldr	r0, [pc, #32]	@ (8010d44 <USBD_Class_ProductStrDescriptor+0x38>)
 8010d24:	f7ff ff6e 	bl	8010c04 <USBD_GetString>
 8010d28:	e004      	b.n	8010d34 <USBD_Class_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8010d2a:	683a      	ldr	r2, [r7, #0]
 8010d2c:	4904      	ldr	r1, [pc, #16]	@ (8010d40 <USBD_Class_ProductStrDescriptor+0x34>)
 8010d2e:	4805      	ldr	r0, [pc, #20]	@ (8010d44 <USBD_Class_ProductStrDescriptor+0x38>)
 8010d30:	f7ff ff68 	bl	8010c04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010d34:	4b02      	ldr	r3, [pc, #8]	@ (8010d40 <USBD_Class_ProductStrDescriptor+0x34>)
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3708      	adds	r7, #8
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	20011168 	.word	0x20011168
 8010d44:	08012a98 	.word	0x08012a98

08010d48 <USBD_Class_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	4603      	mov	r3, r0
 8010d50:	6039      	str	r1, [r7, #0]
 8010d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010d54:	683a      	ldr	r2, [r7, #0]
 8010d56:	4904      	ldr	r1, [pc, #16]	@ (8010d68 <USBD_Class_ManufacturerStrDescriptor+0x20>)
 8010d58:	4804      	ldr	r0, [pc, #16]	@ (8010d6c <USBD_Class_ManufacturerStrDescriptor+0x24>)
 8010d5a:	f7ff ff53 	bl	8010c04 <USBD_GetString>
  return USBD_StrDesc;
 8010d5e:	4b02      	ldr	r3, [pc, #8]	@ (8010d68 <USBD_Class_ManufacturerStrDescriptor+0x20>)
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3708      	adds	r7, #8
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	20011168 	.word	0x20011168
 8010d6c:	08012ab0 	.word	0x08012ab0

08010d70 <USBD_Class_SerialStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	4603      	mov	r3, r0
 8010d78:	6039      	str	r1, [r7, #0]
 8010d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);

  *length = USB_SIZ_STRING_SERIAL;
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	221a      	movs	r2, #26
 8010d80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
 8010d82:	f000 f843 	bl	8010e0c <Get_SerialNum>

  return (uint8_t *)USBD_StringSerial;
 8010d86:	4b02      	ldr	r3, [pc, #8]	@ (8010d90 <USBD_Class_SerialStrDescriptor+0x20>)
}
 8010d88:	4618      	mov	r0, r3
 8010d8a:	3708      	adds	r7, #8
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}
 8010d90:	20000108 	.word	0x20000108

08010d94 <USBD_Class_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	6039      	str	r1, [r7, #0]
 8010d9e:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8010da0:	79fb      	ldrb	r3, [r7, #7]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d105      	bne.n	8010db2 <USBD_Class_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 8010da6:	683a      	ldr	r2, [r7, #0]
 8010da8:	4907      	ldr	r1, [pc, #28]	@ (8010dc8 <USBD_Class_ConfigStrDescriptor+0x34>)
 8010daa:	4808      	ldr	r0, [pc, #32]	@ (8010dcc <USBD_Class_ConfigStrDescriptor+0x38>)
 8010dac:	f7ff ff2a 	bl	8010c04 <USBD_GetString>
 8010db0:	e004      	b.n	8010dbc <USBD_Class_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
 8010db2:	683a      	ldr	r2, [r7, #0]
 8010db4:	4904      	ldr	r1, [pc, #16]	@ (8010dc8 <USBD_Class_ConfigStrDescriptor+0x34>)
 8010db6:	4805      	ldr	r0, [pc, #20]	@ (8010dcc <USBD_Class_ConfigStrDescriptor+0x38>)
 8010db8:	f7ff ff24 	bl	8010c04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010dbc:	4b02      	ldr	r3, [pc, #8]	@ (8010dc8 <USBD_Class_ConfigStrDescriptor+0x34>)
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	20011168 	.word	0x20011168
 8010dcc:	08012ac4 	.word	0x08012ac4

08010dd0 <USBD_Class_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_Class_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b082      	sub	sp, #8
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	6039      	str	r1, [r7, #0]
 8010dda:	71fb      	strb	r3, [r7, #7]
  if (speed == USBD_SPEED_HIGH)
 8010ddc:	79fb      	ldrb	r3, [r7, #7]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d105      	bne.n	8010dee <USBD_Class_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 8010de2:	683a      	ldr	r2, [r7, #0]
 8010de4:	4907      	ldr	r1, [pc, #28]	@ (8010e04 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8010de6:	4808      	ldr	r0, [pc, #32]	@ (8010e08 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8010de8:	f7ff ff0c 	bl	8010c04 <USBD_GetString>
 8010dec:	e004      	b.n	8010df8 <USBD_Class_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8010dee:	683a      	ldr	r2, [r7, #0]
 8010df0:	4904      	ldr	r1, [pc, #16]	@ (8010e04 <USBD_Class_InterfaceStrDescriptor+0x34>)
 8010df2:	4805      	ldr	r0, [pc, #20]	@ (8010e08 <USBD_Class_InterfaceStrDescriptor+0x38>)
 8010df4:	f7ff ff06 	bl	8010c04 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010df8:	4b02      	ldr	r3, [pc, #8]	@ (8010e04 <USBD_Class_InterfaceStrDescriptor+0x34>)
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3708      	adds	r7, #8
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}
 8010e02:	bf00      	nop
 8010e04:	20011168 	.word	0x20011168
 8010e08:	08012ad0 	.word	0x08012ad0

08010e0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *)DEVICE_ID1;
 8010e12:	4b0f      	ldr	r3, [pc, #60]	@ (8010e50 <Get_SerialNum+0x44>)
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *)DEVICE_ID2;
 8010e18:	4b0e      	ldr	r3, [pc, #56]	@ (8010e54 <Get_SerialNum+0x48>)
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *)DEVICE_ID3;
 8010e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8010e58 <Get_SerialNum+0x4c>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010e24:	68fa      	ldr	r2, [r7, #12]
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	4413      	add	r3, r2
 8010e2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0U)
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d009      	beq.n	8010e46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8U);
 8010e32:	2208      	movs	r2, #8
 8010e34:	4909      	ldr	r1, [pc, #36]	@ (8010e5c <Get_SerialNum+0x50>)
 8010e36:	68f8      	ldr	r0, [r7, #12]
 8010e38:	f000 f814 	bl	8010e64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4U);
 8010e3c:	2204      	movs	r2, #4
 8010e3e:	4908      	ldr	r1, [pc, #32]	@ (8010e60 <Get_SerialNum+0x54>)
 8010e40:	68b8      	ldr	r0, [r7, #8]
 8010e42:	f000 f80f 	bl	8010e64 <IntToUnicode>
  }
}
 8010e46:	bf00      	nop
 8010e48:	3710      	adds	r7, #16
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	08fff800 	.word	0x08fff800
 8010e54:	08fff804 	.word	0x08fff804
 8010e58:	08fff808 	.word	0x08fff808
 8010e5c:	2000010a 	.word	0x2000010a
 8010e60:	2000011a 	.word	0x2000011a

08010e64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t *pbuf, uint8_t len)
{
 8010e64:	b480      	push	{r7}
 8010e66:	b087      	sub	sp, #28
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	60f8      	str	r0, [r7, #12]
 8010e6c:	60b9      	str	r1, [r7, #8]
 8010e6e:	4613      	mov	r3, r2
 8010e70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0U;
 8010e72:	2300      	movs	r3, #0
 8010e74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0U ; idx < len ; idx ++)
 8010e76:	2300      	movs	r3, #0
 8010e78:	75fb      	strb	r3, [r7, #23]
 8010e7a:	e025      	b.n	8010ec8 <IntToUnicode+0x64>
  {
    if (((value >> 28)) < 0xAU)
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	0f1b      	lsrs	r3, r3, #28
 8010e80:	2b09      	cmp	r3, #9
 8010e82:	d80a      	bhi.n	8010e9a <IntToUnicode+0x36>
    {
      pbuf[ 2U * idx] = (value >> 28) + '0';
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	0f1b      	lsrs	r3, r3, #28
 8010e88:	b2da      	uxtb	r2, r3
 8010e8a:	7dfb      	ldrb	r3, [r7, #23]
 8010e8c:	005b      	lsls	r3, r3, #1
 8010e8e:	68b9      	ldr	r1, [r7, #8]
 8010e90:	440b      	add	r3, r1
 8010e92:	3230      	adds	r2, #48	@ 0x30
 8010e94:	b2d2      	uxtb	r2, r2
 8010e96:	701a      	strb	r2, [r3, #0]
 8010e98:	e009      	b.n	8010eae <IntToUnicode+0x4a>
    }
    else
    {
      pbuf[2U * idx] = (value >> 28) + 'A' - 10U;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	0f1b      	lsrs	r3, r3, #28
 8010e9e:	b2da      	uxtb	r2, r3
 8010ea0:	7dfb      	ldrb	r3, [r7, #23]
 8010ea2:	005b      	lsls	r3, r3, #1
 8010ea4:	68b9      	ldr	r1, [r7, #8]
 8010ea6:	440b      	add	r3, r1
 8010ea8:	3237      	adds	r2, #55	@ 0x37
 8010eaa:	b2d2      	uxtb	r2, r2
 8010eac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	011b      	lsls	r3, r3, #4
 8010eb2:	60fb      	str	r3, [r7, #12]

    pbuf[2U * idx + 1] = 0U;
 8010eb4:	7dfb      	ldrb	r3, [r7, #23]
 8010eb6:	005b      	lsls	r3, r3, #1
 8010eb8:	3301      	adds	r3, #1
 8010eba:	68ba      	ldr	r2, [r7, #8]
 8010ebc:	4413      	add	r3, r2
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	701a      	strb	r2, [r3, #0]
  for (idx = 0U ; idx < len ; idx ++)
 8010ec2:	7dfb      	ldrb	r3, [r7, #23]
 8010ec4:	3301      	adds	r3, #1
 8010ec6:	75fb      	strb	r3, [r7, #23]
 8010ec8:	7dfa      	ldrb	r2, [r7, #23]
 8010eca:	79fb      	ldrb	r3, [r7, #7]
 8010ecc:	429a      	cmp	r2, r3
 8010ece:	d3d5      	bcc.n	8010e7c <IntToUnicode+0x18>
  }
}
 8010ed0:	bf00      	nop
 8010ed2:	bf00      	nop
 8010ed4:	371c      	adds	r7, #28
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010edc:	4770      	bx	lr

08010ede <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010ede:	b580      	push	{r7, lr}
 8010ee0:	b084      	sub	sp, #16
 8010ee2:	af00      	add	r7, sp, #0
 8010ee4:	60f8      	str	r0, [r7, #12]
 8010ee6:	60b9      	str	r1, [r7, #8]
 8010ee8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	2202      	movs	r2, #2
 8010eee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	687a      	ldr	r2, [r7, #4]
 8010ef6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	687a      	ldr	r2, [r7, #4]
 8010efc:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	68ba      	ldr	r2, [r7, #8]
 8010f02:	2100      	movs	r1, #0
 8010f04:	68f8      	ldr	r0, [r7, #12]
 8010f06:	f7fe fca0 	bl	800f84a <USBD_LL_Transmit>

  return USBD_OK;
 8010f0a:	2300      	movs	r3, #0
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3710      	adds	r7, #16
 8010f10:	46bd      	mov	sp, r7
 8010f12:	bd80      	pop	{r7, pc}

08010f14 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010f14:	b580      	push	{r7, lr}
 8010f16:	b084      	sub	sp, #16
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	60f8      	str	r0, [r7, #12]
 8010f1c:	60b9      	str	r1, [r7, #8]
 8010f1e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	68ba      	ldr	r2, [r7, #8]
 8010f24:	2100      	movs	r1, #0
 8010f26:	68f8      	ldr	r0, [r7, #12]
 8010f28:	f7fe fc8f 	bl	800f84a <USBD_LL_Transmit>

  return USBD_OK;
 8010f2c:	2300      	movs	r3, #0
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3710      	adds	r7, #16
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}

08010f36 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010f36:	b580      	push	{r7, lr}
 8010f38:	b084      	sub	sp, #16
 8010f3a:	af00      	add	r7, sp, #0
 8010f3c:	60f8      	str	r0, [r7, #12]
 8010f3e:	60b9      	str	r1, [r7, #8]
 8010f40:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	2203      	movs	r2, #3
 8010f46:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010f4a:	68fb      	ldr	r3, [r7, #12]
 8010f4c:	687a      	ldr	r2, [r7, #4]
 8010f4e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	68ba      	ldr	r2, [r7, #8]
 8010f5e:	2100      	movs	r1, #0
 8010f60:	68f8      	ldr	r0, [r7, #12]
 8010f62:	f7fe fc8d 	bl	800f880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010f66:	2300      	movs	r3, #0
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	3710      	adds	r7, #16
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	bd80      	pop	{r7, pc}

08010f70 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	60f8      	str	r0, [r7, #12]
 8010f78:	60b9      	str	r1, [r7, #8]
 8010f7a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	68ba      	ldr	r2, [r7, #8]
 8010f80:	2100      	movs	r1, #0
 8010f82:	68f8      	ldr	r0, [r7, #12]
 8010f84:	f7fe fc7c 	bl	800f880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010f88:	2300      	movs	r3, #0
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}

08010f92 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010f92:	b580      	push	{r7, lr}
 8010f94:	b082      	sub	sp, #8
 8010f96:	af00      	add	r7, sp, #0
 8010f98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2204      	movs	r2, #4
 8010f9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	2100      	movs	r1, #0
 8010fa8:	6878      	ldr	r0, [r7, #4]
 8010faa:	f7fe fc4e 	bl	800f84a <USBD_LL_Transmit>

  return USBD_OK;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3708      	adds	r7, #8
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2205      	movs	r2, #5
 8010fc4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010fc8:	2300      	movs	r3, #0
 8010fca:	2200      	movs	r2, #0
 8010fcc:	2100      	movs	r1, #0
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f7fe fc56 	bl	800f880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010fd4:	2300      	movs	r3, #0
}
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	3708      	adds	r7, #8
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	bd80      	pop	{r7, pc}
	...

08010fe0 <std>:
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	b510      	push	{r4, lr}
 8010fe4:	4604      	mov	r4, r0
 8010fe6:	6083      	str	r3, [r0, #8]
 8010fe8:	8181      	strh	r1, [r0, #12]
 8010fea:	4619      	mov	r1, r3
 8010fec:	6643      	str	r3, [r0, #100]	@ 0x64
 8010fee:	81c2      	strh	r2, [r0, #14]
 8010ff0:	2208      	movs	r2, #8
 8010ff2:	6183      	str	r3, [r0, #24]
 8010ff4:	e9c0 3300 	strd	r3, r3, [r0]
 8010ff8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010ffc:	305c      	adds	r0, #92	@ 0x5c
 8010ffe:	f000 f993 	bl	8011328 <memset>
 8011002:	4b0d      	ldr	r3, [pc, #52]	@ (8011038 <std+0x58>)
 8011004:	6224      	str	r4, [r4, #32]
 8011006:	6263      	str	r3, [r4, #36]	@ 0x24
 8011008:	4b0c      	ldr	r3, [pc, #48]	@ (801103c <std+0x5c>)
 801100a:	62a3      	str	r3, [r4, #40]	@ 0x28
 801100c:	4b0c      	ldr	r3, [pc, #48]	@ (8011040 <std+0x60>)
 801100e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011010:	4b0c      	ldr	r3, [pc, #48]	@ (8011044 <std+0x64>)
 8011012:	6323      	str	r3, [r4, #48]	@ 0x30
 8011014:	4b0c      	ldr	r3, [pc, #48]	@ (8011048 <std+0x68>)
 8011016:	429c      	cmp	r4, r3
 8011018:	d006      	beq.n	8011028 <std+0x48>
 801101a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801101e:	4294      	cmp	r4, r2
 8011020:	d002      	beq.n	8011028 <std+0x48>
 8011022:	33d0      	adds	r3, #208	@ 0xd0
 8011024:	429c      	cmp	r4, r3
 8011026:	d105      	bne.n	8011034 <std+0x54>
 8011028:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801102c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011030:	f000 b9f2 	b.w	8011418 <__retarget_lock_init_recursive>
 8011034:	bd10      	pop	{r4, pc}
 8011036:	bf00      	nop
 8011038:	08011231 	.word	0x08011231
 801103c:	08011253 	.word	0x08011253
 8011040:	0801128b 	.word	0x0801128b
 8011044:	080112af 	.word	0x080112af
 8011048:	20011268 	.word	0x20011268

0801104c <stdio_exit_handler>:
 801104c:	4a02      	ldr	r2, [pc, #8]	@ (8011058 <stdio_exit_handler+0xc>)
 801104e:	4903      	ldr	r1, [pc, #12]	@ (801105c <stdio_exit_handler+0x10>)
 8011050:	4803      	ldr	r0, [pc, #12]	@ (8011060 <stdio_exit_handler+0x14>)
 8011052:	f000 b869 	b.w	8011128 <_fwalk_sglue>
 8011056:	bf00      	nop
 8011058:	20000124 	.word	0x20000124
 801105c:	08011f89 	.word	0x08011f89
 8011060:	20000134 	.word	0x20000134

08011064 <cleanup_stdio>:
 8011064:	6841      	ldr	r1, [r0, #4]
 8011066:	4b0c      	ldr	r3, [pc, #48]	@ (8011098 <cleanup_stdio+0x34>)
 8011068:	4299      	cmp	r1, r3
 801106a:	b510      	push	{r4, lr}
 801106c:	4604      	mov	r4, r0
 801106e:	d001      	beq.n	8011074 <cleanup_stdio+0x10>
 8011070:	f000 ff8a 	bl	8011f88 <_fflush_r>
 8011074:	68a1      	ldr	r1, [r4, #8]
 8011076:	4b09      	ldr	r3, [pc, #36]	@ (801109c <cleanup_stdio+0x38>)
 8011078:	4299      	cmp	r1, r3
 801107a:	d002      	beq.n	8011082 <cleanup_stdio+0x1e>
 801107c:	4620      	mov	r0, r4
 801107e:	f000 ff83 	bl	8011f88 <_fflush_r>
 8011082:	68e1      	ldr	r1, [r4, #12]
 8011084:	4b06      	ldr	r3, [pc, #24]	@ (80110a0 <cleanup_stdio+0x3c>)
 8011086:	4299      	cmp	r1, r3
 8011088:	d004      	beq.n	8011094 <cleanup_stdio+0x30>
 801108a:	4620      	mov	r0, r4
 801108c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011090:	f000 bf7a 	b.w	8011f88 <_fflush_r>
 8011094:	bd10      	pop	{r4, pc}
 8011096:	bf00      	nop
 8011098:	20011268 	.word	0x20011268
 801109c:	200112d0 	.word	0x200112d0
 80110a0:	20011338 	.word	0x20011338

080110a4 <global_stdio_init.part.0>:
 80110a4:	b510      	push	{r4, lr}
 80110a6:	4b0b      	ldr	r3, [pc, #44]	@ (80110d4 <global_stdio_init.part.0+0x30>)
 80110a8:	2104      	movs	r1, #4
 80110aa:	4c0b      	ldr	r4, [pc, #44]	@ (80110d8 <global_stdio_init.part.0+0x34>)
 80110ac:	4a0b      	ldr	r2, [pc, #44]	@ (80110dc <global_stdio_init.part.0+0x38>)
 80110ae:	4620      	mov	r0, r4
 80110b0:	601a      	str	r2, [r3, #0]
 80110b2:	2200      	movs	r2, #0
 80110b4:	f7ff ff94 	bl	8010fe0 <std>
 80110b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80110bc:	2201      	movs	r2, #1
 80110be:	2109      	movs	r1, #9
 80110c0:	f7ff ff8e 	bl	8010fe0 <std>
 80110c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80110c8:	2202      	movs	r2, #2
 80110ca:	2112      	movs	r1, #18
 80110cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80110d0:	f7ff bf86 	b.w	8010fe0 <std>
 80110d4:	200113a0 	.word	0x200113a0
 80110d8:	20011268 	.word	0x20011268
 80110dc:	0801104d 	.word	0x0801104d

080110e0 <__sfp_lock_acquire>:
 80110e0:	4801      	ldr	r0, [pc, #4]	@ (80110e8 <__sfp_lock_acquire+0x8>)
 80110e2:	f000 b99a 	b.w	801141a <__retarget_lock_acquire_recursive>
 80110e6:	bf00      	nop
 80110e8:	200113a9 	.word	0x200113a9

080110ec <__sfp_lock_release>:
 80110ec:	4801      	ldr	r0, [pc, #4]	@ (80110f4 <__sfp_lock_release+0x8>)
 80110ee:	f000 b995 	b.w	801141c <__retarget_lock_release_recursive>
 80110f2:	bf00      	nop
 80110f4:	200113a9 	.word	0x200113a9

080110f8 <__sinit>:
 80110f8:	b510      	push	{r4, lr}
 80110fa:	4604      	mov	r4, r0
 80110fc:	f7ff fff0 	bl	80110e0 <__sfp_lock_acquire>
 8011100:	6a23      	ldr	r3, [r4, #32]
 8011102:	b11b      	cbz	r3, 801110c <__sinit+0x14>
 8011104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011108:	f7ff bff0 	b.w	80110ec <__sfp_lock_release>
 801110c:	4b04      	ldr	r3, [pc, #16]	@ (8011120 <__sinit+0x28>)
 801110e:	6223      	str	r3, [r4, #32]
 8011110:	4b04      	ldr	r3, [pc, #16]	@ (8011124 <__sinit+0x2c>)
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d1f5      	bne.n	8011104 <__sinit+0xc>
 8011118:	f7ff ffc4 	bl	80110a4 <global_stdio_init.part.0>
 801111c:	e7f2      	b.n	8011104 <__sinit+0xc>
 801111e:	bf00      	nop
 8011120:	08011065 	.word	0x08011065
 8011124:	200113a0 	.word	0x200113a0

08011128 <_fwalk_sglue>:
 8011128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801112c:	4607      	mov	r7, r0
 801112e:	4688      	mov	r8, r1
 8011130:	4614      	mov	r4, r2
 8011132:	2600      	movs	r6, #0
 8011134:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011138:	f1b9 0901 	subs.w	r9, r9, #1
 801113c:	d505      	bpl.n	801114a <_fwalk_sglue+0x22>
 801113e:	6824      	ldr	r4, [r4, #0]
 8011140:	2c00      	cmp	r4, #0
 8011142:	d1f7      	bne.n	8011134 <_fwalk_sglue+0xc>
 8011144:	4630      	mov	r0, r6
 8011146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801114a:	89ab      	ldrh	r3, [r5, #12]
 801114c:	2b01      	cmp	r3, #1
 801114e:	d907      	bls.n	8011160 <_fwalk_sglue+0x38>
 8011150:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011154:	3301      	adds	r3, #1
 8011156:	d003      	beq.n	8011160 <_fwalk_sglue+0x38>
 8011158:	4629      	mov	r1, r5
 801115a:	4638      	mov	r0, r7
 801115c:	47c0      	blx	r8
 801115e:	4306      	orrs	r6, r0
 8011160:	3568      	adds	r5, #104	@ 0x68
 8011162:	e7e9      	b.n	8011138 <_fwalk_sglue+0x10>

08011164 <iprintf>:
 8011164:	b40f      	push	{r0, r1, r2, r3}
 8011166:	b507      	push	{r0, r1, r2, lr}
 8011168:	4906      	ldr	r1, [pc, #24]	@ (8011184 <iprintf+0x20>)
 801116a:	ab04      	add	r3, sp, #16
 801116c:	6808      	ldr	r0, [r1, #0]
 801116e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011172:	6881      	ldr	r1, [r0, #8]
 8011174:	9301      	str	r3, [sp, #4]
 8011176:	f000 fbd9 	bl	801192c <_vfiprintf_r>
 801117a:	b003      	add	sp, #12
 801117c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011180:	b004      	add	sp, #16
 8011182:	4770      	bx	lr
 8011184:	20000130 	.word	0x20000130

08011188 <sniprintf>:
 8011188:	b40c      	push	{r2, r3}
 801118a:	4b18      	ldr	r3, [pc, #96]	@ (80111ec <sniprintf+0x64>)
 801118c:	b530      	push	{r4, r5, lr}
 801118e:	1e0c      	subs	r4, r1, #0
 8011190:	b09d      	sub	sp, #116	@ 0x74
 8011192:	681d      	ldr	r5, [r3, #0]
 8011194:	da08      	bge.n	80111a8 <sniprintf+0x20>
 8011196:	238b      	movs	r3, #139	@ 0x8b
 8011198:	f04f 30ff 	mov.w	r0, #4294967295
 801119c:	602b      	str	r3, [r5, #0]
 801119e:	b01d      	add	sp, #116	@ 0x74
 80111a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80111a4:	b002      	add	sp, #8
 80111a6:	4770      	bx	lr
 80111a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80111ac:	9002      	str	r0, [sp, #8]
 80111ae:	9006      	str	r0, [sp, #24]
 80111b0:	a902      	add	r1, sp, #8
 80111b2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80111b6:	bf14      	ite	ne
 80111b8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80111bc:	4623      	moveq	r3, r4
 80111be:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80111c0:	4628      	mov	r0, r5
 80111c2:	9304      	str	r3, [sp, #16]
 80111c4:	9307      	str	r3, [sp, #28]
 80111c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80111ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80111ce:	ab21      	add	r3, sp, #132	@ 0x84
 80111d0:	9301      	str	r3, [sp, #4]
 80111d2:	f000 fa85 	bl	80116e0 <_svfiprintf_r>
 80111d6:	1c43      	adds	r3, r0, #1
 80111d8:	bfbc      	itt	lt
 80111da:	238b      	movlt	r3, #139	@ 0x8b
 80111dc:	602b      	strlt	r3, [r5, #0]
 80111de:	2c00      	cmp	r4, #0
 80111e0:	d0dd      	beq.n	801119e <sniprintf+0x16>
 80111e2:	9b02      	ldr	r3, [sp, #8]
 80111e4:	2200      	movs	r2, #0
 80111e6:	701a      	strb	r2, [r3, #0]
 80111e8:	e7d9      	b.n	801119e <sniprintf+0x16>
 80111ea:	bf00      	nop
 80111ec:	20000130 	.word	0x20000130

080111f0 <siprintf>:
 80111f0:	b40e      	push	{r1, r2, r3}
 80111f2:	b500      	push	{lr}
 80111f4:	b09c      	sub	sp, #112	@ 0x70
 80111f6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80111fa:	ab1d      	add	r3, sp, #116	@ 0x74
 80111fc:	9002      	str	r0, [sp, #8]
 80111fe:	9006      	str	r0, [sp, #24]
 8011200:	9107      	str	r1, [sp, #28]
 8011202:	9104      	str	r1, [sp, #16]
 8011204:	4808      	ldr	r0, [pc, #32]	@ (8011228 <siprintf+0x38>)
 8011206:	4909      	ldr	r1, [pc, #36]	@ (801122c <siprintf+0x3c>)
 8011208:	f853 2b04 	ldr.w	r2, [r3], #4
 801120c:	9105      	str	r1, [sp, #20]
 801120e:	a902      	add	r1, sp, #8
 8011210:	6800      	ldr	r0, [r0, #0]
 8011212:	9301      	str	r3, [sp, #4]
 8011214:	f000 fa64 	bl	80116e0 <_svfiprintf_r>
 8011218:	9b02      	ldr	r3, [sp, #8]
 801121a:	2200      	movs	r2, #0
 801121c:	701a      	strb	r2, [r3, #0]
 801121e:	b01c      	add	sp, #112	@ 0x70
 8011220:	f85d eb04 	ldr.w	lr, [sp], #4
 8011224:	b003      	add	sp, #12
 8011226:	4770      	bx	lr
 8011228:	20000130 	.word	0x20000130
 801122c:	ffff0208 	.word	0xffff0208

08011230 <__sread>:
 8011230:	b510      	push	{r4, lr}
 8011232:	460c      	mov	r4, r1
 8011234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011238:	f000 f8a0 	bl	801137c <_read_r>
 801123c:	2800      	cmp	r0, #0
 801123e:	bfab      	itete	ge
 8011240:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011242:	89a3      	ldrhlt	r3, [r4, #12]
 8011244:	181b      	addge	r3, r3, r0
 8011246:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801124a:	bfac      	ite	ge
 801124c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801124e:	81a3      	strhlt	r3, [r4, #12]
 8011250:	bd10      	pop	{r4, pc}

08011252 <__swrite>:
 8011252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011256:	461f      	mov	r7, r3
 8011258:	898b      	ldrh	r3, [r1, #12]
 801125a:	4605      	mov	r5, r0
 801125c:	460c      	mov	r4, r1
 801125e:	05db      	lsls	r3, r3, #23
 8011260:	4616      	mov	r6, r2
 8011262:	d505      	bpl.n	8011270 <__swrite+0x1e>
 8011264:	2302      	movs	r3, #2
 8011266:	2200      	movs	r2, #0
 8011268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801126c:	f000 f874 	bl	8011358 <_lseek_r>
 8011270:	89a3      	ldrh	r3, [r4, #12]
 8011272:	4632      	mov	r2, r6
 8011274:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011278:	4628      	mov	r0, r5
 801127a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801127e:	81a3      	strh	r3, [r4, #12]
 8011280:	463b      	mov	r3, r7
 8011282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011286:	f000 b88b 	b.w	80113a0 <_write_r>

0801128a <__sseek>:
 801128a:	b510      	push	{r4, lr}
 801128c:	460c      	mov	r4, r1
 801128e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011292:	f000 f861 	bl	8011358 <_lseek_r>
 8011296:	1c43      	adds	r3, r0, #1
 8011298:	89a3      	ldrh	r3, [r4, #12]
 801129a:	bf15      	itete	ne
 801129c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801129e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80112a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80112a6:	81a3      	strheq	r3, [r4, #12]
 80112a8:	bf18      	it	ne
 80112aa:	81a3      	strhne	r3, [r4, #12]
 80112ac:	bd10      	pop	{r4, pc}

080112ae <__sclose>:
 80112ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80112b2:	f000 b841 	b.w	8011338 <_close_r>

080112b6 <_vsniprintf_r>:
 80112b6:	b530      	push	{r4, r5, lr}
 80112b8:	4614      	mov	r4, r2
 80112ba:	b09b      	sub	sp, #108	@ 0x6c
 80112bc:	4605      	mov	r5, r0
 80112be:	461a      	mov	r2, r3
 80112c0:	2c00      	cmp	r4, #0
 80112c2:	da05      	bge.n	80112d0 <_vsniprintf_r+0x1a>
 80112c4:	238b      	movs	r3, #139	@ 0x8b
 80112c6:	6003      	str	r3, [r0, #0]
 80112c8:	f04f 30ff 	mov.w	r0, #4294967295
 80112cc:	b01b      	add	sp, #108	@ 0x6c
 80112ce:	bd30      	pop	{r4, r5, pc}
 80112d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80112d4:	9100      	str	r1, [sp, #0]
 80112d6:	9104      	str	r1, [sp, #16]
 80112d8:	4669      	mov	r1, sp
 80112da:	f8ad 300c 	strh.w	r3, [sp, #12]
 80112de:	bf14      	ite	ne
 80112e0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80112e4:	4623      	moveq	r3, r4
 80112e6:	9302      	str	r3, [sp, #8]
 80112e8:	9305      	str	r3, [sp, #20]
 80112ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80112ee:	f8ad 300e 	strh.w	r3, [sp, #14]
 80112f2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80112f4:	f000 f9f4 	bl	80116e0 <_svfiprintf_r>
 80112f8:	1c43      	adds	r3, r0, #1
 80112fa:	bfbc      	itt	lt
 80112fc:	238b      	movlt	r3, #139	@ 0x8b
 80112fe:	602b      	strlt	r3, [r5, #0]
 8011300:	2c00      	cmp	r4, #0
 8011302:	d0e3      	beq.n	80112cc <_vsniprintf_r+0x16>
 8011304:	9b00      	ldr	r3, [sp, #0]
 8011306:	2200      	movs	r2, #0
 8011308:	701a      	strb	r2, [r3, #0]
 801130a:	e7df      	b.n	80112cc <_vsniprintf_r+0x16>

0801130c <vsniprintf>:
 801130c:	b507      	push	{r0, r1, r2, lr}
 801130e:	9300      	str	r3, [sp, #0]
 8011310:	4613      	mov	r3, r2
 8011312:	460a      	mov	r2, r1
 8011314:	4601      	mov	r1, r0
 8011316:	4803      	ldr	r0, [pc, #12]	@ (8011324 <vsniprintf+0x18>)
 8011318:	6800      	ldr	r0, [r0, #0]
 801131a:	f7ff ffcc 	bl	80112b6 <_vsniprintf_r>
 801131e:	b003      	add	sp, #12
 8011320:	f85d fb04 	ldr.w	pc, [sp], #4
 8011324:	20000130 	.word	0x20000130

08011328 <memset>:
 8011328:	4402      	add	r2, r0
 801132a:	4603      	mov	r3, r0
 801132c:	4293      	cmp	r3, r2
 801132e:	d100      	bne.n	8011332 <memset+0xa>
 8011330:	4770      	bx	lr
 8011332:	f803 1b01 	strb.w	r1, [r3], #1
 8011336:	e7f9      	b.n	801132c <memset+0x4>

08011338 <_close_r>:
 8011338:	b538      	push	{r3, r4, r5, lr}
 801133a:	2300      	movs	r3, #0
 801133c:	4d05      	ldr	r5, [pc, #20]	@ (8011354 <_close_r+0x1c>)
 801133e:	4604      	mov	r4, r0
 8011340:	4608      	mov	r0, r1
 8011342:	602b      	str	r3, [r5, #0]
 8011344:	f7f1 f847 	bl	80023d6 <_close>
 8011348:	1c43      	adds	r3, r0, #1
 801134a:	d102      	bne.n	8011352 <_close_r+0x1a>
 801134c:	682b      	ldr	r3, [r5, #0]
 801134e:	b103      	cbz	r3, 8011352 <_close_r+0x1a>
 8011350:	6023      	str	r3, [r4, #0]
 8011352:	bd38      	pop	{r3, r4, r5, pc}
 8011354:	200113a4 	.word	0x200113a4

08011358 <_lseek_r>:
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	4604      	mov	r4, r0
 801135c:	4d06      	ldr	r5, [pc, #24]	@ (8011378 <_lseek_r+0x20>)
 801135e:	4608      	mov	r0, r1
 8011360:	4611      	mov	r1, r2
 8011362:	2200      	movs	r2, #0
 8011364:	602a      	str	r2, [r5, #0]
 8011366:	461a      	mov	r2, r3
 8011368:	f7f1 f85c 	bl	8002424 <_lseek>
 801136c:	1c43      	adds	r3, r0, #1
 801136e:	d102      	bne.n	8011376 <_lseek_r+0x1e>
 8011370:	682b      	ldr	r3, [r5, #0]
 8011372:	b103      	cbz	r3, 8011376 <_lseek_r+0x1e>
 8011374:	6023      	str	r3, [r4, #0]
 8011376:	bd38      	pop	{r3, r4, r5, pc}
 8011378:	200113a4 	.word	0x200113a4

0801137c <_read_r>:
 801137c:	b538      	push	{r3, r4, r5, lr}
 801137e:	4604      	mov	r4, r0
 8011380:	4d06      	ldr	r5, [pc, #24]	@ (801139c <_read_r+0x20>)
 8011382:	4608      	mov	r0, r1
 8011384:	4611      	mov	r1, r2
 8011386:	2200      	movs	r2, #0
 8011388:	602a      	str	r2, [r5, #0]
 801138a:	461a      	mov	r2, r3
 801138c:	f7f0 ffea 	bl	8002364 <_read>
 8011390:	1c43      	adds	r3, r0, #1
 8011392:	d102      	bne.n	801139a <_read_r+0x1e>
 8011394:	682b      	ldr	r3, [r5, #0]
 8011396:	b103      	cbz	r3, 801139a <_read_r+0x1e>
 8011398:	6023      	str	r3, [r4, #0]
 801139a:	bd38      	pop	{r3, r4, r5, pc}
 801139c:	200113a4 	.word	0x200113a4

080113a0 <_write_r>:
 80113a0:	b538      	push	{r3, r4, r5, lr}
 80113a2:	4604      	mov	r4, r0
 80113a4:	4d06      	ldr	r5, [pc, #24]	@ (80113c0 <_write_r+0x20>)
 80113a6:	4608      	mov	r0, r1
 80113a8:	4611      	mov	r1, r2
 80113aa:	2200      	movs	r2, #0
 80113ac:	602a      	str	r2, [r5, #0]
 80113ae:	461a      	mov	r2, r3
 80113b0:	f7f0 fff5 	bl	800239e <_write>
 80113b4:	1c43      	adds	r3, r0, #1
 80113b6:	d102      	bne.n	80113be <_write_r+0x1e>
 80113b8:	682b      	ldr	r3, [r5, #0]
 80113ba:	b103      	cbz	r3, 80113be <_write_r+0x1e>
 80113bc:	6023      	str	r3, [r4, #0]
 80113be:	bd38      	pop	{r3, r4, r5, pc}
 80113c0:	200113a4 	.word	0x200113a4

080113c4 <__errno>:
 80113c4:	4b01      	ldr	r3, [pc, #4]	@ (80113cc <__errno+0x8>)
 80113c6:	6818      	ldr	r0, [r3, #0]
 80113c8:	4770      	bx	lr
 80113ca:	bf00      	nop
 80113cc:	20000130 	.word	0x20000130

080113d0 <__libc_init_array>:
 80113d0:	b570      	push	{r4, r5, r6, lr}
 80113d2:	4d0d      	ldr	r5, [pc, #52]	@ (8011408 <__libc_init_array+0x38>)
 80113d4:	2600      	movs	r6, #0
 80113d6:	4c0d      	ldr	r4, [pc, #52]	@ (801140c <__libc_init_array+0x3c>)
 80113d8:	1b64      	subs	r4, r4, r5
 80113da:	10a4      	asrs	r4, r4, #2
 80113dc:	42a6      	cmp	r6, r4
 80113de:	d109      	bne.n	80113f4 <__libc_init_array+0x24>
 80113e0:	4d0b      	ldr	r5, [pc, #44]	@ (8011410 <__libc_init_array+0x40>)
 80113e2:	2600      	movs	r6, #0
 80113e4:	4c0b      	ldr	r4, [pc, #44]	@ (8011414 <__libc_init_array+0x44>)
 80113e6:	f000 ff7d 	bl	80122e4 <_init>
 80113ea:	1b64      	subs	r4, r4, r5
 80113ec:	10a4      	asrs	r4, r4, #2
 80113ee:	42a6      	cmp	r6, r4
 80113f0:	d105      	bne.n	80113fe <__libc_init_array+0x2e>
 80113f2:	bd70      	pop	{r4, r5, r6, pc}
 80113f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80113f8:	3601      	adds	r6, #1
 80113fa:	4798      	blx	r3
 80113fc:	e7ee      	b.n	80113dc <__libc_init_array+0xc>
 80113fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8011402:	3601      	adds	r6, #1
 8011404:	4798      	blx	r3
 8011406:	e7f2      	b.n	80113ee <__libc_init_array+0x1e>
 8011408:	08012b68 	.word	0x08012b68
 801140c:	08012b68 	.word	0x08012b68
 8011410:	08012b68 	.word	0x08012b68
 8011414:	08012b6c 	.word	0x08012b6c

08011418 <__retarget_lock_init_recursive>:
 8011418:	4770      	bx	lr

0801141a <__retarget_lock_acquire_recursive>:
 801141a:	4770      	bx	lr

0801141c <__retarget_lock_release_recursive>:
 801141c:	4770      	bx	lr

0801141e <memcpy>:
 801141e:	440a      	add	r2, r1
 8011420:	1e43      	subs	r3, r0, #1
 8011422:	4291      	cmp	r1, r2
 8011424:	d100      	bne.n	8011428 <memcpy+0xa>
 8011426:	4770      	bx	lr
 8011428:	b510      	push	{r4, lr}
 801142a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801142e:	4291      	cmp	r1, r2
 8011430:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011434:	d1f9      	bne.n	801142a <memcpy+0xc>
 8011436:	bd10      	pop	{r4, pc}

08011438 <_free_r>:
 8011438:	b538      	push	{r3, r4, r5, lr}
 801143a:	4605      	mov	r5, r0
 801143c:	2900      	cmp	r1, #0
 801143e:	d041      	beq.n	80114c4 <_free_r+0x8c>
 8011440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011444:	1f0c      	subs	r4, r1, #4
 8011446:	2b00      	cmp	r3, #0
 8011448:	bfb8      	it	lt
 801144a:	18e4      	addlt	r4, r4, r3
 801144c:	f000 f8e0 	bl	8011610 <__malloc_lock>
 8011450:	4a1d      	ldr	r2, [pc, #116]	@ (80114c8 <_free_r+0x90>)
 8011452:	6813      	ldr	r3, [r2, #0]
 8011454:	b933      	cbnz	r3, 8011464 <_free_r+0x2c>
 8011456:	6063      	str	r3, [r4, #4]
 8011458:	6014      	str	r4, [r2, #0]
 801145a:	4628      	mov	r0, r5
 801145c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011460:	f000 b8dc 	b.w	801161c <__malloc_unlock>
 8011464:	42a3      	cmp	r3, r4
 8011466:	d908      	bls.n	801147a <_free_r+0x42>
 8011468:	6820      	ldr	r0, [r4, #0]
 801146a:	1821      	adds	r1, r4, r0
 801146c:	428b      	cmp	r3, r1
 801146e:	bf01      	itttt	eq
 8011470:	6819      	ldreq	r1, [r3, #0]
 8011472:	685b      	ldreq	r3, [r3, #4]
 8011474:	1809      	addeq	r1, r1, r0
 8011476:	6021      	streq	r1, [r4, #0]
 8011478:	e7ed      	b.n	8011456 <_free_r+0x1e>
 801147a:	461a      	mov	r2, r3
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	b10b      	cbz	r3, 8011484 <_free_r+0x4c>
 8011480:	42a3      	cmp	r3, r4
 8011482:	d9fa      	bls.n	801147a <_free_r+0x42>
 8011484:	6811      	ldr	r1, [r2, #0]
 8011486:	1850      	adds	r0, r2, r1
 8011488:	42a0      	cmp	r0, r4
 801148a:	d10b      	bne.n	80114a4 <_free_r+0x6c>
 801148c:	6820      	ldr	r0, [r4, #0]
 801148e:	4401      	add	r1, r0
 8011490:	1850      	adds	r0, r2, r1
 8011492:	6011      	str	r1, [r2, #0]
 8011494:	4283      	cmp	r3, r0
 8011496:	d1e0      	bne.n	801145a <_free_r+0x22>
 8011498:	6818      	ldr	r0, [r3, #0]
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	4408      	add	r0, r1
 801149e:	6053      	str	r3, [r2, #4]
 80114a0:	6010      	str	r0, [r2, #0]
 80114a2:	e7da      	b.n	801145a <_free_r+0x22>
 80114a4:	d902      	bls.n	80114ac <_free_r+0x74>
 80114a6:	230c      	movs	r3, #12
 80114a8:	602b      	str	r3, [r5, #0]
 80114aa:	e7d6      	b.n	801145a <_free_r+0x22>
 80114ac:	6820      	ldr	r0, [r4, #0]
 80114ae:	1821      	adds	r1, r4, r0
 80114b0:	428b      	cmp	r3, r1
 80114b2:	bf02      	ittt	eq
 80114b4:	6819      	ldreq	r1, [r3, #0]
 80114b6:	685b      	ldreq	r3, [r3, #4]
 80114b8:	1809      	addeq	r1, r1, r0
 80114ba:	6063      	str	r3, [r4, #4]
 80114bc:	bf08      	it	eq
 80114be:	6021      	streq	r1, [r4, #0]
 80114c0:	6054      	str	r4, [r2, #4]
 80114c2:	e7ca      	b.n	801145a <_free_r+0x22>
 80114c4:	bd38      	pop	{r3, r4, r5, pc}
 80114c6:	bf00      	nop
 80114c8:	200113b0 	.word	0x200113b0

080114cc <sbrk_aligned>:
 80114cc:	b570      	push	{r4, r5, r6, lr}
 80114ce:	4e0f      	ldr	r6, [pc, #60]	@ (801150c <sbrk_aligned+0x40>)
 80114d0:	460c      	mov	r4, r1
 80114d2:	4605      	mov	r5, r0
 80114d4:	6831      	ldr	r1, [r6, #0]
 80114d6:	b911      	cbnz	r1, 80114de <sbrk_aligned+0x12>
 80114d8:	f000 fe2c 	bl	8012134 <_sbrk_r>
 80114dc:	6030      	str	r0, [r6, #0]
 80114de:	4621      	mov	r1, r4
 80114e0:	4628      	mov	r0, r5
 80114e2:	f000 fe27 	bl	8012134 <_sbrk_r>
 80114e6:	1c43      	adds	r3, r0, #1
 80114e8:	d103      	bne.n	80114f2 <sbrk_aligned+0x26>
 80114ea:	f04f 34ff 	mov.w	r4, #4294967295
 80114ee:	4620      	mov	r0, r4
 80114f0:	bd70      	pop	{r4, r5, r6, pc}
 80114f2:	1cc4      	adds	r4, r0, #3
 80114f4:	f024 0403 	bic.w	r4, r4, #3
 80114f8:	42a0      	cmp	r0, r4
 80114fa:	d0f8      	beq.n	80114ee <sbrk_aligned+0x22>
 80114fc:	1a21      	subs	r1, r4, r0
 80114fe:	4628      	mov	r0, r5
 8011500:	f000 fe18 	bl	8012134 <_sbrk_r>
 8011504:	3001      	adds	r0, #1
 8011506:	d1f2      	bne.n	80114ee <sbrk_aligned+0x22>
 8011508:	e7ef      	b.n	80114ea <sbrk_aligned+0x1e>
 801150a:	bf00      	nop
 801150c:	200113ac 	.word	0x200113ac

08011510 <_malloc_r>:
 8011510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011514:	1ccd      	adds	r5, r1, #3
 8011516:	4606      	mov	r6, r0
 8011518:	f025 0503 	bic.w	r5, r5, #3
 801151c:	3508      	adds	r5, #8
 801151e:	2d0c      	cmp	r5, #12
 8011520:	bf38      	it	cc
 8011522:	250c      	movcc	r5, #12
 8011524:	2d00      	cmp	r5, #0
 8011526:	db01      	blt.n	801152c <_malloc_r+0x1c>
 8011528:	42a9      	cmp	r1, r5
 801152a:	d904      	bls.n	8011536 <_malloc_r+0x26>
 801152c:	230c      	movs	r3, #12
 801152e:	6033      	str	r3, [r6, #0]
 8011530:	2000      	movs	r0, #0
 8011532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011536:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801160c <_malloc_r+0xfc>
 801153a:	f000 f869 	bl	8011610 <__malloc_lock>
 801153e:	f8d8 3000 	ldr.w	r3, [r8]
 8011542:	461c      	mov	r4, r3
 8011544:	bb44      	cbnz	r4, 8011598 <_malloc_r+0x88>
 8011546:	4629      	mov	r1, r5
 8011548:	4630      	mov	r0, r6
 801154a:	f7ff ffbf 	bl	80114cc <sbrk_aligned>
 801154e:	1c43      	adds	r3, r0, #1
 8011550:	4604      	mov	r4, r0
 8011552:	d158      	bne.n	8011606 <_malloc_r+0xf6>
 8011554:	f8d8 4000 	ldr.w	r4, [r8]
 8011558:	4627      	mov	r7, r4
 801155a:	2f00      	cmp	r7, #0
 801155c:	d143      	bne.n	80115e6 <_malloc_r+0xd6>
 801155e:	2c00      	cmp	r4, #0
 8011560:	d04b      	beq.n	80115fa <_malloc_r+0xea>
 8011562:	6823      	ldr	r3, [r4, #0]
 8011564:	4639      	mov	r1, r7
 8011566:	4630      	mov	r0, r6
 8011568:	eb04 0903 	add.w	r9, r4, r3
 801156c:	f000 fde2 	bl	8012134 <_sbrk_r>
 8011570:	4581      	cmp	r9, r0
 8011572:	d142      	bne.n	80115fa <_malloc_r+0xea>
 8011574:	6821      	ldr	r1, [r4, #0]
 8011576:	4630      	mov	r0, r6
 8011578:	1a6d      	subs	r5, r5, r1
 801157a:	4629      	mov	r1, r5
 801157c:	f7ff ffa6 	bl	80114cc <sbrk_aligned>
 8011580:	3001      	adds	r0, #1
 8011582:	d03a      	beq.n	80115fa <_malloc_r+0xea>
 8011584:	6823      	ldr	r3, [r4, #0]
 8011586:	442b      	add	r3, r5
 8011588:	6023      	str	r3, [r4, #0]
 801158a:	f8d8 3000 	ldr.w	r3, [r8]
 801158e:	685a      	ldr	r2, [r3, #4]
 8011590:	bb62      	cbnz	r2, 80115ec <_malloc_r+0xdc>
 8011592:	f8c8 7000 	str.w	r7, [r8]
 8011596:	e00f      	b.n	80115b8 <_malloc_r+0xa8>
 8011598:	6822      	ldr	r2, [r4, #0]
 801159a:	1b52      	subs	r2, r2, r5
 801159c:	d420      	bmi.n	80115e0 <_malloc_r+0xd0>
 801159e:	2a0b      	cmp	r2, #11
 80115a0:	d917      	bls.n	80115d2 <_malloc_r+0xc2>
 80115a2:	1961      	adds	r1, r4, r5
 80115a4:	42a3      	cmp	r3, r4
 80115a6:	6025      	str	r5, [r4, #0]
 80115a8:	bf18      	it	ne
 80115aa:	6059      	strne	r1, [r3, #4]
 80115ac:	6863      	ldr	r3, [r4, #4]
 80115ae:	bf08      	it	eq
 80115b0:	f8c8 1000 	streq.w	r1, [r8]
 80115b4:	5162      	str	r2, [r4, r5]
 80115b6:	604b      	str	r3, [r1, #4]
 80115b8:	4630      	mov	r0, r6
 80115ba:	f000 f82f 	bl	801161c <__malloc_unlock>
 80115be:	f104 000b 	add.w	r0, r4, #11
 80115c2:	1d23      	adds	r3, r4, #4
 80115c4:	f020 0007 	bic.w	r0, r0, #7
 80115c8:	1ac2      	subs	r2, r0, r3
 80115ca:	bf1c      	itt	ne
 80115cc:	1a1b      	subne	r3, r3, r0
 80115ce:	50a3      	strne	r3, [r4, r2]
 80115d0:	e7af      	b.n	8011532 <_malloc_r+0x22>
 80115d2:	6862      	ldr	r2, [r4, #4]
 80115d4:	42a3      	cmp	r3, r4
 80115d6:	bf0c      	ite	eq
 80115d8:	f8c8 2000 	streq.w	r2, [r8]
 80115dc:	605a      	strne	r2, [r3, #4]
 80115de:	e7eb      	b.n	80115b8 <_malloc_r+0xa8>
 80115e0:	4623      	mov	r3, r4
 80115e2:	6864      	ldr	r4, [r4, #4]
 80115e4:	e7ae      	b.n	8011544 <_malloc_r+0x34>
 80115e6:	463c      	mov	r4, r7
 80115e8:	687f      	ldr	r7, [r7, #4]
 80115ea:	e7b6      	b.n	801155a <_malloc_r+0x4a>
 80115ec:	461a      	mov	r2, r3
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	42a3      	cmp	r3, r4
 80115f2:	d1fb      	bne.n	80115ec <_malloc_r+0xdc>
 80115f4:	2300      	movs	r3, #0
 80115f6:	6053      	str	r3, [r2, #4]
 80115f8:	e7de      	b.n	80115b8 <_malloc_r+0xa8>
 80115fa:	230c      	movs	r3, #12
 80115fc:	4630      	mov	r0, r6
 80115fe:	6033      	str	r3, [r6, #0]
 8011600:	f000 f80c 	bl	801161c <__malloc_unlock>
 8011604:	e794      	b.n	8011530 <_malloc_r+0x20>
 8011606:	6005      	str	r5, [r0, #0]
 8011608:	e7d6      	b.n	80115b8 <_malloc_r+0xa8>
 801160a:	bf00      	nop
 801160c:	200113b0 	.word	0x200113b0

08011610 <__malloc_lock>:
 8011610:	4801      	ldr	r0, [pc, #4]	@ (8011618 <__malloc_lock+0x8>)
 8011612:	f7ff bf02 	b.w	801141a <__retarget_lock_acquire_recursive>
 8011616:	bf00      	nop
 8011618:	200113a8 	.word	0x200113a8

0801161c <__malloc_unlock>:
 801161c:	4801      	ldr	r0, [pc, #4]	@ (8011624 <__malloc_unlock+0x8>)
 801161e:	f7ff befd 	b.w	801141c <__retarget_lock_release_recursive>
 8011622:	bf00      	nop
 8011624:	200113a8 	.word	0x200113a8

08011628 <__ssputs_r>:
 8011628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801162c:	461f      	mov	r7, r3
 801162e:	688e      	ldr	r6, [r1, #8]
 8011630:	4682      	mov	sl, r0
 8011632:	460c      	mov	r4, r1
 8011634:	42be      	cmp	r6, r7
 8011636:	4690      	mov	r8, r2
 8011638:	680b      	ldr	r3, [r1, #0]
 801163a:	d82d      	bhi.n	8011698 <__ssputs_r+0x70>
 801163c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011640:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011644:	d026      	beq.n	8011694 <__ssputs_r+0x6c>
 8011646:	6965      	ldr	r5, [r4, #20]
 8011648:	6909      	ldr	r1, [r1, #16]
 801164a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801164e:	eba3 0901 	sub.w	r9, r3, r1
 8011652:	1c7b      	adds	r3, r7, #1
 8011654:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011658:	444b      	add	r3, r9
 801165a:	106d      	asrs	r5, r5, #1
 801165c:	429d      	cmp	r5, r3
 801165e:	bf38      	it	cc
 8011660:	461d      	movcc	r5, r3
 8011662:	0553      	lsls	r3, r2, #21
 8011664:	d527      	bpl.n	80116b6 <__ssputs_r+0x8e>
 8011666:	4629      	mov	r1, r5
 8011668:	f7ff ff52 	bl	8011510 <_malloc_r>
 801166c:	4606      	mov	r6, r0
 801166e:	b360      	cbz	r0, 80116ca <__ssputs_r+0xa2>
 8011670:	464a      	mov	r2, r9
 8011672:	6921      	ldr	r1, [r4, #16]
 8011674:	f7ff fed3 	bl	801141e <memcpy>
 8011678:	89a3      	ldrh	r3, [r4, #12]
 801167a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801167e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011682:	81a3      	strh	r3, [r4, #12]
 8011684:	6126      	str	r6, [r4, #16]
 8011686:	444e      	add	r6, r9
 8011688:	6165      	str	r5, [r4, #20]
 801168a:	eba5 0509 	sub.w	r5, r5, r9
 801168e:	6026      	str	r6, [r4, #0]
 8011690:	463e      	mov	r6, r7
 8011692:	60a5      	str	r5, [r4, #8]
 8011694:	42be      	cmp	r6, r7
 8011696:	d900      	bls.n	801169a <__ssputs_r+0x72>
 8011698:	463e      	mov	r6, r7
 801169a:	4632      	mov	r2, r6
 801169c:	4641      	mov	r1, r8
 801169e:	6820      	ldr	r0, [r4, #0]
 80116a0:	f000 fd2e 	bl	8012100 <memmove>
 80116a4:	68a3      	ldr	r3, [r4, #8]
 80116a6:	2000      	movs	r0, #0
 80116a8:	1b9b      	subs	r3, r3, r6
 80116aa:	60a3      	str	r3, [r4, #8]
 80116ac:	6823      	ldr	r3, [r4, #0]
 80116ae:	4433      	add	r3, r6
 80116b0:	6023      	str	r3, [r4, #0]
 80116b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116b6:	462a      	mov	r2, r5
 80116b8:	f000 fd5a 	bl	8012170 <_realloc_r>
 80116bc:	4606      	mov	r6, r0
 80116be:	2800      	cmp	r0, #0
 80116c0:	d1e0      	bne.n	8011684 <__ssputs_r+0x5c>
 80116c2:	6921      	ldr	r1, [r4, #16]
 80116c4:	4650      	mov	r0, sl
 80116c6:	f7ff feb7 	bl	8011438 <_free_r>
 80116ca:	230c      	movs	r3, #12
 80116cc:	f04f 30ff 	mov.w	r0, #4294967295
 80116d0:	f8ca 3000 	str.w	r3, [sl]
 80116d4:	89a3      	ldrh	r3, [r4, #12]
 80116d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80116da:	81a3      	strh	r3, [r4, #12]
 80116dc:	e7e9      	b.n	80116b2 <__ssputs_r+0x8a>
	...

080116e0 <_svfiprintf_r>:
 80116e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116e4:	4698      	mov	r8, r3
 80116e6:	898b      	ldrh	r3, [r1, #12]
 80116e8:	b09d      	sub	sp, #116	@ 0x74
 80116ea:	4607      	mov	r7, r0
 80116ec:	061b      	lsls	r3, r3, #24
 80116ee:	460d      	mov	r5, r1
 80116f0:	4614      	mov	r4, r2
 80116f2:	d510      	bpl.n	8011716 <_svfiprintf_r+0x36>
 80116f4:	690b      	ldr	r3, [r1, #16]
 80116f6:	b973      	cbnz	r3, 8011716 <_svfiprintf_r+0x36>
 80116f8:	2140      	movs	r1, #64	@ 0x40
 80116fa:	f7ff ff09 	bl	8011510 <_malloc_r>
 80116fe:	6028      	str	r0, [r5, #0]
 8011700:	6128      	str	r0, [r5, #16]
 8011702:	b930      	cbnz	r0, 8011712 <_svfiprintf_r+0x32>
 8011704:	230c      	movs	r3, #12
 8011706:	603b      	str	r3, [r7, #0]
 8011708:	f04f 30ff 	mov.w	r0, #4294967295
 801170c:	b01d      	add	sp, #116	@ 0x74
 801170e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011712:	2340      	movs	r3, #64	@ 0x40
 8011714:	616b      	str	r3, [r5, #20]
 8011716:	2300      	movs	r3, #0
 8011718:	f8cd 800c 	str.w	r8, [sp, #12]
 801171c:	f04f 0901 	mov.w	r9, #1
 8011720:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 80118c4 <_svfiprintf_r+0x1e4>
 8011724:	9309      	str	r3, [sp, #36]	@ 0x24
 8011726:	2320      	movs	r3, #32
 8011728:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801172c:	2330      	movs	r3, #48	@ 0x30
 801172e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011732:	4623      	mov	r3, r4
 8011734:	469a      	mov	sl, r3
 8011736:	f813 2b01 	ldrb.w	r2, [r3], #1
 801173a:	b10a      	cbz	r2, 8011740 <_svfiprintf_r+0x60>
 801173c:	2a25      	cmp	r2, #37	@ 0x25
 801173e:	d1f9      	bne.n	8011734 <_svfiprintf_r+0x54>
 8011740:	ebba 0b04 	subs.w	fp, sl, r4
 8011744:	d00b      	beq.n	801175e <_svfiprintf_r+0x7e>
 8011746:	465b      	mov	r3, fp
 8011748:	4622      	mov	r2, r4
 801174a:	4629      	mov	r1, r5
 801174c:	4638      	mov	r0, r7
 801174e:	f7ff ff6b 	bl	8011628 <__ssputs_r>
 8011752:	3001      	adds	r0, #1
 8011754:	f000 80a7 	beq.w	80118a6 <_svfiprintf_r+0x1c6>
 8011758:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801175a:	445a      	add	r2, fp
 801175c:	9209      	str	r2, [sp, #36]	@ 0x24
 801175e:	f89a 3000 	ldrb.w	r3, [sl]
 8011762:	2b00      	cmp	r3, #0
 8011764:	f000 809f 	beq.w	80118a6 <_svfiprintf_r+0x1c6>
 8011768:	2300      	movs	r3, #0
 801176a:	f04f 32ff 	mov.w	r2, #4294967295
 801176e:	f10a 0a01 	add.w	sl, sl, #1
 8011772:	9304      	str	r3, [sp, #16]
 8011774:	9307      	str	r3, [sp, #28]
 8011776:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801177a:	931a      	str	r3, [sp, #104]	@ 0x68
 801177c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011780:	4654      	mov	r4, sl
 8011782:	2205      	movs	r2, #5
 8011784:	484f      	ldr	r0, [pc, #316]	@ (80118c4 <_svfiprintf_r+0x1e4>)
 8011786:	f814 1b01 	ldrb.w	r1, [r4], #1
 801178a:	f000 fce3 	bl	8012154 <memchr>
 801178e:	9a04      	ldr	r2, [sp, #16]
 8011790:	b9d8      	cbnz	r0, 80117ca <_svfiprintf_r+0xea>
 8011792:	06d0      	lsls	r0, r2, #27
 8011794:	bf44      	itt	mi
 8011796:	2320      	movmi	r3, #32
 8011798:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801179c:	0711      	lsls	r1, r2, #28
 801179e:	bf44      	itt	mi
 80117a0:	232b      	movmi	r3, #43	@ 0x2b
 80117a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80117a6:	f89a 3000 	ldrb.w	r3, [sl]
 80117aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80117ac:	d015      	beq.n	80117da <_svfiprintf_r+0xfa>
 80117ae:	9a07      	ldr	r2, [sp, #28]
 80117b0:	4654      	mov	r4, sl
 80117b2:	2000      	movs	r0, #0
 80117b4:	f04f 0c0a 	mov.w	ip, #10
 80117b8:	4621      	mov	r1, r4
 80117ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80117be:	3b30      	subs	r3, #48	@ 0x30
 80117c0:	2b09      	cmp	r3, #9
 80117c2:	d94b      	bls.n	801185c <_svfiprintf_r+0x17c>
 80117c4:	b1b0      	cbz	r0, 80117f4 <_svfiprintf_r+0x114>
 80117c6:	9207      	str	r2, [sp, #28]
 80117c8:	e014      	b.n	80117f4 <_svfiprintf_r+0x114>
 80117ca:	eba0 0308 	sub.w	r3, r0, r8
 80117ce:	46a2      	mov	sl, r4
 80117d0:	fa09 f303 	lsl.w	r3, r9, r3
 80117d4:	4313      	orrs	r3, r2
 80117d6:	9304      	str	r3, [sp, #16]
 80117d8:	e7d2      	b.n	8011780 <_svfiprintf_r+0xa0>
 80117da:	9b03      	ldr	r3, [sp, #12]
 80117dc:	1d19      	adds	r1, r3, #4
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	9103      	str	r1, [sp, #12]
 80117e4:	bfbb      	ittet	lt
 80117e6:	425b      	neglt	r3, r3
 80117e8:	f042 0202 	orrlt.w	r2, r2, #2
 80117ec:	9307      	strge	r3, [sp, #28]
 80117ee:	9307      	strlt	r3, [sp, #28]
 80117f0:	bfb8      	it	lt
 80117f2:	9204      	strlt	r2, [sp, #16]
 80117f4:	7823      	ldrb	r3, [r4, #0]
 80117f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80117f8:	d10a      	bne.n	8011810 <_svfiprintf_r+0x130>
 80117fa:	7863      	ldrb	r3, [r4, #1]
 80117fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80117fe:	d132      	bne.n	8011866 <_svfiprintf_r+0x186>
 8011800:	9b03      	ldr	r3, [sp, #12]
 8011802:	3402      	adds	r4, #2
 8011804:	1d1a      	adds	r2, r3, #4
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801180c:	9203      	str	r2, [sp, #12]
 801180e:	9305      	str	r3, [sp, #20]
 8011810:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80118d4 <_svfiprintf_r+0x1f4>
 8011814:	2203      	movs	r2, #3
 8011816:	7821      	ldrb	r1, [r4, #0]
 8011818:	4650      	mov	r0, sl
 801181a:	f000 fc9b 	bl	8012154 <memchr>
 801181e:	b138      	cbz	r0, 8011830 <_svfiprintf_r+0x150>
 8011820:	eba0 000a 	sub.w	r0, r0, sl
 8011824:	2240      	movs	r2, #64	@ 0x40
 8011826:	9b04      	ldr	r3, [sp, #16]
 8011828:	3401      	adds	r4, #1
 801182a:	4082      	lsls	r2, r0
 801182c:	4313      	orrs	r3, r2
 801182e:	9304      	str	r3, [sp, #16]
 8011830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011834:	2206      	movs	r2, #6
 8011836:	4824      	ldr	r0, [pc, #144]	@ (80118c8 <_svfiprintf_r+0x1e8>)
 8011838:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801183c:	f000 fc8a 	bl	8012154 <memchr>
 8011840:	2800      	cmp	r0, #0
 8011842:	d036      	beq.n	80118b2 <_svfiprintf_r+0x1d2>
 8011844:	4b21      	ldr	r3, [pc, #132]	@ (80118cc <_svfiprintf_r+0x1ec>)
 8011846:	bb1b      	cbnz	r3, 8011890 <_svfiprintf_r+0x1b0>
 8011848:	9b03      	ldr	r3, [sp, #12]
 801184a:	3307      	adds	r3, #7
 801184c:	f023 0307 	bic.w	r3, r3, #7
 8011850:	3308      	adds	r3, #8
 8011852:	9303      	str	r3, [sp, #12]
 8011854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011856:	4433      	add	r3, r6
 8011858:	9309      	str	r3, [sp, #36]	@ 0x24
 801185a:	e76a      	b.n	8011732 <_svfiprintf_r+0x52>
 801185c:	fb0c 3202 	mla	r2, ip, r2, r3
 8011860:	460c      	mov	r4, r1
 8011862:	2001      	movs	r0, #1
 8011864:	e7a8      	b.n	80117b8 <_svfiprintf_r+0xd8>
 8011866:	2300      	movs	r3, #0
 8011868:	3401      	adds	r4, #1
 801186a:	f04f 0c0a 	mov.w	ip, #10
 801186e:	4619      	mov	r1, r3
 8011870:	9305      	str	r3, [sp, #20]
 8011872:	4620      	mov	r0, r4
 8011874:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011878:	3a30      	subs	r2, #48	@ 0x30
 801187a:	2a09      	cmp	r2, #9
 801187c:	d903      	bls.n	8011886 <_svfiprintf_r+0x1a6>
 801187e:	2b00      	cmp	r3, #0
 8011880:	d0c6      	beq.n	8011810 <_svfiprintf_r+0x130>
 8011882:	9105      	str	r1, [sp, #20]
 8011884:	e7c4      	b.n	8011810 <_svfiprintf_r+0x130>
 8011886:	fb0c 2101 	mla	r1, ip, r1, r2
 801188a:	4604      	mov	r4, r0
 801188c:	2301      	movs	r3, #1
 801188e:	e7f0      	b.n	8011872 <_svfiprintf_r+0x192>
 8011890:	ab03      	add	r3, sp, #12
 8011892:	462a      	mov	r2, r5
 8011894:	a904      	add	r1, sp, #16
 8011896:	4638      	mov	r0, r7
 8011898:	9300      	str	r3, [sp, #0]
 801189a:	4b0d      	ldr	r3, [pc, #52]	@ (80118d0 <_svfiprintf_r+0x1f0>)
 801189c:	f3af 8000 	nop.w
 80118a0:	1c42      	adds	r2, r0, #1
 80118a2:	4606      	mov	r6, r0
 80118a4:	d1d6      	bne.n	8011854 <_svfiprintf_r+0x174>
 80118a6:	89ab      	ldrh	r3, [r5, #12]
 80118a8:	065b      	lsls	r3, r3, #25
 80118aa:	f53f af2d 	bmi.w	8011708 <_svfiprintf_r+0x28>
 80118ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80118b0:	e72c      	b.n	801170c <_svfiprintf_r+0x2c>
 80118b2:	ab03      	add	r3, sp, #12
 80118b4:	462a      	mov	r2, r5
 80118b6:	a904      	add	r1, sp, #16
 80118b8:	4638      	mov	r0, r7
 80118ba:	9300      	str	r3, [sp, #0]
 80118bc:	4b04      	ldr	r3, [pc, #16]	@ (80118d0 <_svfiprintf_r+0x1f0>)
 80118be:	f000 f9bf 	bl	8011c40 <_printf_i>
 80118c2:	e7ed      	b.n	80118a0 <_svfiprintf_r+0x1c0>
 80118c4:	08012b2c 	.word	0x08012b2c
 80118c8:	08012b36 	.word	0x08012b36
 80118cc:	00000000 	.word	0x00000000
 80118d0:	08011629 	.word	0x08011629
 80118d4:	08012b32 	.word	0x08012b32

080118d8 <__sfputc_r>:
 80118d8:	6893      	ldr	r3, [r2, #8]
 80118da:	3b01      	subs	r3, #1
 80118dc:	2b00      	cmp	r3, #0
 80118de:	6093      	str	r3, [r2, #8]
 80118e0:	b410      	push	{r4}
 80118e2:	da08      	bge.n	80118f6 <__sfputc_r+0x1e>
 80118e4:	6994      	ldr	r4, [r2, #24]
 80118e6:	42a3      	cmp	r3, r4
 80118e8:	db01      	blt.n	80118ee <__sfputc_r+0x16>
 80118ea:	290a      	cmp	r1, #10
 80118ec:	d103      	bne.n	80118f6 <__sfputc_r+0x1e>
 80118ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118f2:	f000 bb71 	b.w	8011fd8 <__swbuf_r>
 80118f6:	6813      	ldr	r3, [r2, #0]
 80118f8:	1c58      	adds	r0, r3, #1
 80118fa:	6010      	str	r0, [r2, #0]
 80118fc:	4608      	mov	r0, r1
 80118fe:	7019      	strb	r1, [r3, #0]
 8011900:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011904:	4770      	bx	lr

08011906 <__sfputs_r>:
 8011906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011908:	4606      	mov	r6, r0
 801190a:	460f      	mov	r7, r1
 801190c:	4614      	mov	r4, r2
 801190e:	18d5      	adds	r5, r2, r3
 8011910:	42ac      	cmp	r4, r5
 8011912:	d101      	bne.n	8011918 <__sfputs_r+0x12>
 8011914:	2000      	movs	r0, #0
 8011916:	e007      	b.n	8011928 <__sfputs_r+0x22>
 8011918:	463a      	mov	r2, r7
 801191a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801191e:	4630      	mov	r0, r6
 8011920:	f7ff ffda 	bl	80118d8 <__sfputc_r>
 8011924:	1c43      	adds	r3, r0, #1
 8011926:	d1f3      	bne.n	8011910 <__sfputs_r+0xa>
 8011928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801192c <_vfiprintf_r>:
 801192c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011930:	460d      	mov	r5, r1
 8011932:	b09d      	sub	sp, #116	@ 0x74
 8011934:	4614      	mov	r4, r2
 8011936:	4698      	mov	r8, r3
 8011938:	4606      	mov	r6, r0
 801193a:	b118      	cbz	r0, 8011944 <_vfiprintf_r+0x18>
 801193c:	6a03      	ldr	r3, [r0, #32]
 801193e:	b90b      	cbnz	r3, 8011944 <_vfiprintf_r+0x18>
 8011940:	f7ff fbda 	bl	80110f8 <__sinit>
 8011944:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011946:	07d9      	lsls	r1, r3, #31
 8011948:	d405      	bmi.n	8011956 <_vfiprintf_r+0x2a>
 801194a:	89ab      	ldrh	r3, [r5, #12]
 801194c:	059a      	lsls	r2, r3, #22
 801194e:	d402      	bmi.n	8011956 <_vfiprintf_r+0x2a>
 8011950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011952:	f7ff fd62 	bl	801141a <__retarget_lock_acquire_recursive>
 8011956:	89ab      	ldrh	r3, [r5, #12]
 8011958:	071b      	lsls	r3, r3, #28
 801195a:	d501      	bpl.n	8011960 <_vfiprintf_r+0x34>
 801195c:	692b      	ldr	r3, [r5, #16]
 801195e:	b99b      	cbnz	r3, 8011988 <_vfiprintf_r+0x5c>
 8011960:	4629      	mov	r1, r5
 8011962:	4630      	mov	r0, r6
 8011964:	f000 fb76 	bl	8012054 <__swsetup_r>
 8011968:	b170      	cbz	r0, 8011988 <_vfiprintf_r+0x5c>
 801196a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801196c:	07dc      	lsls	r4, r3, #31
 801196e:	d504      	bpl.n	801197a <_vfiprintf_r+0x4e>
 8011970:	f04f 30ff 	mov.w	r0, #4294967295
 8011974:	b01d      	add	sp, #116	@ 0x74
 8011976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801197a:	89ab      	ldrh	r3, [r5, #12]
 801197c:	0598      	lsls	r0, r3, #22
 801197e:	d4f7      	bmi.n	8011970 <_vfiprintf_r+0x44>
 8011980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011982:	f7ff fd4b 	bl	801141c <__retarget_lock_release_recursive>
 8011986:	e7f3      	b.n	8011970 <_vfiprintf_r+0x44>
 8011988:	2300      	movs	r3, #0
 801198a:	f8cd 800c 	str.w	r8, [sp, #12]
 801198e:	f04f 0901 	mov.w	r9, #1
 8011992:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8011b48 <_vfiprintf_r+0x21c>
 8011996:	9309      	str	r3, [sp, #36]	@ 0x24
 8011998:	2320      	movs	r3, #32
 801199a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801199e:	2330      	movs	r3, #48	@ 0x30
 80119a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80119a4:	4623      	mov	r3, r4
 80119a6:	469a      	mov	sl, r3
 80119a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80119ac:	b10a      	cbz	r2, 80119b2 <_vfiprintf_r+0x86>
 80119ae:	2a25      	cmp	r2, #37	@ 0x25
 80119b0:	d1f9      	bne.n	80119a6 <_vfiprintf_r+0x7a>
 80119b2:	ebba 0b04 	subs.w	fp, sl, r4
 80119b6:	d00b      	beq.n	80119d0 <_vfiprintf_r+0xa4>
 80119b8:	465b      	mov	r3, fp
 80119ba:	4622      	mov	r2, r4
 80119bc:	4629      	mov	r1, r5
 80119be:	4630      	mov	r0, r6
 80119c0:	f7ff ffa1 	bl	8011906 <__sfputs_r>
 80119c4:	3001      	adds	r0, #1
 80119c6:	f000 80a7 	beq.w	8011b18 <_vfiprintf_r+0x1ec>
 80119ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80119cc:	445a      	add	r2, fp
 80119ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80119d0:	f89a 3000 	ldrb.w	r3, [sl]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	f000 809f 	beq.w	8011b18 <_vfiprintf_r+0x1ec>
 80119da:	2300      	movs	r3, #0
 80119dc:	f04f 32ff 	mov.w	r2, #4294967295
 80119e0:	f10a 0a01 	add.w	sl, sl, #1
 80119e4:	9304      	str	r3, [sp, #16]
 80119e6:	9307      	str	r3, [sp, #28]
 80119e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80119ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80119ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80119f2:	4654      	mov	r4, sl
 80119f4:	2205      	movs	r2, #5
 80119f6:	4854      	ldr	r0, [pc, #336]	@ (8011b48 <_vfiprintf_r+0x21c>)
 80119f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119fc:	f000 fbaa 	bl	8012154 <memchr>
 8011a00:	9a04      	ldr	r2, [sp, #16]
 8011a02:	b9d8      	cbnz	r0, 8011a3c <_vfiprintf_r+0x110>
 8011a04:	06d1      	lsls	r1, r2, #27
 8011a06:	bf44      	itt	mi
 8011a08:	2320      	movmi	r3, #32
 8011a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a0e:	0713      	lsls	r3, r2, #28
 8011a10:	bf44      	itt	mi
 8011a12:	232b      	movmi	r3, #43	@ 0x2b
 8011a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011a18:	f89a 3000 	ldrb.w	r3, [sl]
 8011a1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a1e:	d015      	beq.n	8011a4c <_vfiprintf_r+0x120>
 8011a20:	9a07      	ldr	r2, [sp, #28]
 8011a22:	4654      	mov	r4, sl
 8011a24:	2000      	movs	r0, #0
 8011a26:	f04f 0c0a 	mov.w	ip, #10
 8011a2a:	4621      	mov	r1, r4
 8011a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011a30:	3b30      	subs	r3, #48	@ 0x30
 8011a32:	2b09      	cmp	r3, #9
 8011a34:	d94b      	bls.n	8011ace <_vfiprintf_r+0x1a2>
 8011a36:	b1b0      	cbz	r0, 8011a66 <_vfiprintf_r+0x13a>
 8011a38:	9207      	str	r2, [sp, #28]
 8011a3a:	e014      	b.n	8011a66 <_vfiprintf_r+0x13a>
 8011a3c:	eba0 0308 	sub.w	r3, r0, r8
 8011a40:	46a2      	mov	sl, r4
 8011a42:	fa09 f303 	lsl.w	r3, r9, r3
 8011a46:	4313      	orrs	r3, r2
 8011a48:	9304      	str	r3, [sp, #16]
 8011a4a:	e7d2      	b.n	80119f2 <_vfiprintf_r+0xc6>
 8011a4c:	9b03      	ldr	r3, [sp, #12]
 8011a4e:	1d19      	adds	r1, r3, #4
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	9103      	str	r1, [sp, #12]
 8011a56:	bfbb      	ittet	lt
 8011a58:	425b      	neglt	r3, r3
 8011a5a:	f042 0202 	orrlt.w	r2, r2, #2
 8011a5e:	9307      	strge	r3, [sp, #28]
 8011a60:	9307      	strlt	r3, [sp, #28]
 8011a62:	bfb8      	it	lt
 8011a64:	9204      	strlt	r2, [sp, #16]
 8011a66:	7823      	ldrb	r3, [r4, #0]
 8011a68:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a6a:	d10a      	bne.n	8011a82 <_vfiprintf_r+0x156>
 8011a6c:	7863      	ldrb	r3, [r4, #1]
 8011a6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a70:	d132      	bne.n	8011ad8 <_vfiprintf_r+0x1ac>
 8011a72:	9b03      	ldr	r3, [sp, #12]
 8011a74:	3402      	adds	r4, #2
 8011a76:	1d1a      	adds	r2, r3, #4
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011a7e:	9203      	str	r2, [sp, #12]
 8011a80:	9305      	str	r3, [sp, #20]
 8011a82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011b58 <_vfiprintf_r+0x22c>
 8011a86:	2203      	movs	r2, #3
 8011a88:	7821      	ldrb	r1, [r4, #0]
 8011a8a:	4650      	mov	r0, sl
 8011a8c:	f000 fb62 	bl	8012154 <memchr>
 8011a90:	b138      	cbz	r0, 8011aa2 <_vfiprintf_r+0x176>
 8011a92:	eba0 000a 	sub.w	r0, r0, sl
 8011a96:	2240      	movs	r2, #64	@ 0x40
 8011a98:	9b04      	ldr	r3, [sp, #16]
 8011a9a:	3401      	adds	r4, #1
 8011a9c:	4082      	lsls	r2, r0
 8011a9e:	4313      	orrs	r3, r2
 8011aa0:	9304      	str	r3, [sp, #16]
 8011aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011aa6:	2206      	movs	r2, #6
 8011aa8:	4828      	ldr	r0, [pc, #160]	@ (8011b4c <_vfiprintf_r+0x220>)
 8011aaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011aae:	f000 fb51 	bl	8012154 <memchr>
 8011ab2:	2800      	cmp	r0, #0
 8011ab4:	d03f      	beq.n	8011b36 <_vfiprintf_r+0x20a>
 8011ab6:	4b26      	ldr	r3, [pc, #152]	@ (8011b50 <_vfiprintf_r+0x224>)
 8011ab8:	bb1b      	cbnz	r3, 8011b02 <_vfiprintf_r+0x1d6>
 8011aba:	9b03      	ldr	r3, [sp, #12]
 8011abc:	3307      	adds	r3, #7
 8011abe:	f023 0307 	bic.w	r3, r3, #7
 8011ac2:	3308      	adds	r3, #8
 8011ac4:	9303      	str	r3, [sp, #12]
 8011ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ac8:	443b      	add	r3, r7
 8011aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8011acc:	e76a      	b.n	80119a4 <_vfiprintf_r+0x78>
 8011ace:	fb0c 3202 	mla	r2, ip, r2, r3
 8011ad2:	460c      	mov	r4, r1
 8011ad4:	2001      	movs	r0, #1
 8011ad6:	e7a8      	b.n	8011a2a <_vfiprintf_r+0xfe>
 8011ad8:	2300      	movs	r3, #0
 8011ada:	3401      	adds	r4, #1
 8011adc:	f04f 0c0a 	mov.w	ip, #10
 8011ae0:	4619      	mov	r1, r3
 8011ae2:	9305      	str	r3, [sp, #20]
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011aea:	3a30      	subs	r2, #48	@ 0x30
 8011aec:	2a09      	cmp	r2, #9
 8011aee:	d903      	bls.n	8011af8 <_vfiprintf_r+0x1cc>
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d0c6      	beq.n	8011a82 <_vfiprintf_r+0x156>
 8011af4:	9105      	str	r1, [sp, #20]
 8011af6:	e7c4      	b.n	8011a82 <_vfiprintf_r+0x156>
 8011af8:	fb0c 2101 	mla	r1, ip, r1, r2
 8011afc:	4604      	mov	r4, r0
 8011afe:	2301      	movs	r3, #1
 8011b00:	e7f0      	b.n	8011ae4 <_vfiprintf_r+0x1b8>
 8011b02:	ab03      	add	r3, sp, #12
 8011b04:	462a      	mov	r2, r5
 8011b06:	a904      	add	r1, sp, #16
 8011b08:	4630      	mov	r0, r6
 8011b0a:	9300      	str	r3, [sp, #0]
 8011b0c:	4b11      	ldr	r3, [pc, #68]	@ (8011b54 <_vfiprintf_r+0x228>)
 8011b0e:	f3af 8000 	nop.w
 8011b12:	4607      	mov	r7, r0
 8011b14:	1c78      	adds	r0, r7, #1
 8011b16:	d1d6      	bne.n	8011ac6 <_vfiprintf_r+0x19a>
 8011b18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b1a:	07d9      	lsls	r1, r3, #31
 8011b1c:	d405      	bmi.n	8011b2a <_vfiprintf_r+0x1fe>
 8011b1e:	89ab      	ldrh	r3, [r5, #12]
 8011b20:	059a      	lsls	r2, r3, #22
 8011b22:	d402      	bmi.n	8011b2a <_vfiprintf_r+0x1fe>
 8011b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b26:	f7ff fc79 	bl	801141c <__retarget_lock_release_recursive>
 8011b2a:	89ab      	ldrh	r3, [r5, #12]
 8011b2c:	065b      	lsls	r3, r3, #25
 8011b2e:	f53f af1f 	bmi.w	8011970 <_vfiprintf_r+0x44>
 8011b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011b34:	e71e      	b.n	8011974 <_vfiprintf_r+0x48>
 8011b36:	ab03      	add	r3, sp, #12
 8011b38:	462a      	mov	r2, r5
 8011b3a:	a904      	add	r1, sp, #16
 8011b3c:	4630      	mov	r0, r6
 8011b3e:	9300      	str	r3, [sp, #0]
 8011b40:	4b04      	ldr	r3, [pc, #16]	@ (8011b54 <_vfiprintf_r+0x228>)
 8011b42:	f000 f87d 	bl	8011c40 <_printf_i>
 8011b46:	e7e4      	b.n	8011b12 <_vfiprintf_r+0x1e6>
 8011b48:	08012b2c 	.word	0x08012b2c
 8011b4c:	08012b36 	.word	0x08012b36
 8011b50:	00000000 	.word	0x00000000
 8011b54:	08011907 	.word	0x08011907
 8011b58:	08012b32 	.word	0x08012b32

08011b5c <_printf_common>:
 8011b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b60:	4616      	mov	r6, r2
 8011b62:	4698      	mov	r8, r3
 8011b64:	688a      	ldr	r2, [r1, #8]
 8011b66:	4607      	mov	r7, r0
 8011b68:	690b      	ldr	r3, [r1, #16]
 8011b6a:	460c      	mov	r4, r1
 8011b6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011b70:	4293      	cmp	r3, r2
 8011b72:	bfb8      	it	lt
 8011b74:	4613      	movlt	r3, r2
 8011b76:	6033      	str	r3, [r6, #0]
 8011b78:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011b7c:	b10a      	cbz	r2, 8011b82 <_printf_common+0x26>
 8011b7e:	3301      	adds	r3, #1
 8011b80:	6033      	str	r3, [r6, #0]
 8011b82:	6823      	ldr	r3, [r4, #0]
 8011b84:	0699      	lsls	r1, r3, #26
 8011b86:	bf42      	ittt	mi
 8011b88:	6833      	ldrmi	r3, [r6, #0]
 8011b8a:	3302      	addmi	r3, #2
 8011b8c:	6033      	strmi	r3, [r6, #0]
 8011b8e:	6825      	ldr	r5, [r4, #0]
 8011b90:	f015 0506 	ands.w	r5, r5, #6
 8011b94:	d106      	bne.n	8011ba4 <_printf_common+0x48>
 8011b96:	f104 0a19 	add.w	sl, r4, #25
 8011b9a:	68e3      	ldr	r3, [r4, #12]
 8011b9c:	6832      	ldr	r2, [r6, #0]
 8011b9e:	1a9b      	subs	r3, r3, r2
 8011ba0:	42ab      	cmp	r3, r5
 8011ba2:	dc2b      	bgt.n	8011bfc <_printf_common+0xa0>
 8011ba4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011ba8:	6822      	ldr	r2, [r4, #0]
 8011baa:	3b00      	subs	r3, #0
 8011bac:	bf18      	it	ne
 8011bae:	2301      	movne	r3, #1
 8011bb0:	0692      	lsls	r2, r2, #26
 8011bb2:	d430      	bmi.n	8011c16 <_printf_common+0xba>
 8011bb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011bb8:	4641      	mov	r1, r8
 8011bba:	4638      	mov	r0, r7
 8011bbc:	47c8      	blx	r9
 8011bbe:	3001      	adds	r0, #1
 8011bc0:	d023      	beq.n	8011c0a <_printf_common+0xae>
 8011bc2:	6823      	ldr	r3, [r4, #0]
 8011bc4:	341a      	adds	r4, #26
 8011bc6:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8011bca:	f003 0306 	and.w	r3, r3, #6
 8011bce:	2b04      	cmp	r3, #4
 8011bd0:	bf0a      	itet	eq
 8011bd2:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8011bd6:	2500      	movne	r5, #0
 8011bd8:	6833      	ldreq	r3, [r6, #0]
 8011bda:	f04f 0600 	mov.w	r6, #0
 8011bde:	bf08      	it	eq
 8011be0:	1aed      	subeq	r5, r5, r3
 8011be2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8011be6:	bf08      	it	eq
 8011be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011bec:	4293      	cmp	r3, r2
 8011bee:	bfc4      	itt	gt
 8011bf0:	1a9b      	subgt	r3, r3, r2
 8011bf2:	18ed      	addgt	r5, r5, r3
 8011bf4:	42b5      	cmp	r5, r6
 8011bf6:	d11a      	bne.n	8011c2e <_printf_common+0xd2>
 8011bf8:	2000      	movs	r0, #0
 8011bfa:	e008      	b.n	8011c0e <_printf_common+0xb2>
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	4652      	mov	r2, sl
 8011c00:	4641      	mov	r1, r8
 8011c02:	4638      	mov	r0, r7
 8011c04:	47c8      	blx	r9
 8011c06:	3001      	adds	r0, #1
 8011c08:	d103      	bne.n	8011c12 <_printf_common+0xb6>
 8011c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8011c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c12:	3501      	adds	r5, #1
 8011c14:	e7c1      	b.n	8011b9a <_printf_common+0x3e>
 8011c16:	18e1      	adds	r1, r4, r3
 8011c18:	1c5a      	adds	r2, r3, #1
 8011c1a:	2030      	movs	r0, #48	@ 0x30
 8011c1c:	3302      	adds	r3, #2
 8011c1e:	4422      	add	r2, r4
 8011c20:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011c24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011c2c:	e7c2      	b.n	8011bb4 <_printf_common+0x58>
 8011c2e:	2301      	movs	r3, #1
 8011c30:	4622      	mov	r2, r4
 8011c32:	4641      	mov	r1, r8
 8011c34:	4638      	mov	r0, r7
 8011c36:	47c8      	blx	r9
 8011c38:	3001      	adds	r0, #1
 8011c3a:	d0e6      	beq.n	8011c0a <_printf_common+0xae>
 8011c3c:	3601      	adds	r6, #1
 8011c3e:	e7d9      	b.n	8011bf4 <_printf_common+0x98>

08011c40 <_printf_i>:
 8011c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c44:	7e0f      	ldrb	r7, [r1, #24]
 8011c46:	4691      	mov	r9, r2
 8011c48:	4680      	mov	r8, r0
 8011c4a:	460c      	mov	r4, r1
 8011c4c:	2f78      	cmp	r7, #120	@ 0x78
 8011c4e:	469a      	mov	sl, r3
 8011c50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011c52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011c56:	d807      	bhi.n	8011c68 <_printf_i+0x28>
 8011c58:	2f62      	cmp	r7, #98	@ 0x62
 8011c5a:	d80a      	bhi.n	8011c72 <_printf_i+0x32>
 8011c5c:	2f00      	cmp	r7, #0
 8011c5e:	f000 80d2 	beq.w	8011e06 <_printf_i+0x1c6>
 8011c62:	2f58      	cmp	r7, #88	@ 0x58
 8011c64:	f000 80b9 	beq.w	8011dda <_printf_i+0x19a>
 8011c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011c70:	e03a      	b.n	8011ce8 <_printf_i+0xa8>
 8011c72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011c76:	2b15      	cmp	r3, #21
 8011c78:	d8f6      	bhi.n	8011c68 <_printf_i+0x28>
 8011c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8011c80 <_printf_i+0x40>)
 8011c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c80:	08011cd9 	.word	0x08011cd9
 8011c84:	08011ced 	.word	0x08011ced
 8011c88:	08011c69 	.word	0x08011c69
 8011c8c:	08011c69 	.word	0x08011c69
 8011c90:	08011c69 	.word	0x08011c69
 8011c94:	08011c69 	.word	0x08011c69
 8011c98:	08011ced 	.word	0x08011ced
 8011c9c:	08011c69 	.word	0x08011c69
 8011ca0:	08011c69 	.word	0x08011c69
 8011ca4:	08011c69 	.word	0x08011c69
 8011ca8:	08011c69 	.word	0x08011c69
 8011cac:	08011ded 	.word	0x08011ded
 8011cb0:	08011d17 	.word	0x08011d17
 8011cb4:	08011da7 	.word	0x08011da7
 8011cb8:	08011c69 	.word	0x08011c69
 8011cbc:	08011c69 	.word	0x08011c69
 8011cc0:	08011e0f 	.word	0x08011e0f
 8011cc4:	08011c69 	.word	0x08011c69
 8011cc8:	08011d17 	.word	0x08011d17
 8011ccc:	08011c69 	.word	0x08011c69
 8011cd0:	08011c69 	.word	0x08011c69
 8011cd4:	08011daf 	.word	0x08011daf
 8011cd8:	6833      	ldr	r3, [r6, #0]
 8011cda:	1d1a      	adds	r2, r3, #4
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	6032      	str	r2, [r6, #0]
 8011ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011ce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011ce8:	2301      	movs	r3, #1
 8011cea:	e09d      	b.n	8011e28 <_printf_i+0x1e8>
 8011cec:	6833      	ldr	r3, [r6, #0]
 8011cee:	6820      	ldr	r0, [r4, #0]
 8011cf0:	1d19      	adds	r1, r3, #4
 8011cf2:	6031      	str	r1, [r6, #0]
 8011cf4:	0606      	lsls	r6, r0, #24
 8011cf6:	d501      	bpl.n	8011cfc <_printf_i+0xbc>
 8011cf8:	681d      	ldr	r5, [r3, #0]
 8011cfa:	e003      	b.n	8011d04 <_printf_i+0xc4>
 8011cfc:	0645      	lsls	r5, r0, #25
 8011cfe:	d5fb      	bpl.n	8011cf8 <_printf_i+0xb8>
 8011d00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011d04:	2d00      	cmp	r5, #0
 8011d06:	da03      	bge.n	8011d10 <_printf_i+0xd0>
 8011d08:	232d      	movs	r3, #45	@ 0x2d
 8011d0a:	426d      	negs	r5, r5
 8011d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011d10:	4859      	ldr	r0, [pc, #356]	@ (8011e78 <_printf_i+0x238>)
 8011d12:	230a      	movs	r3, #10
 8011d14:	e011      	b.n	8011d3a <_printf_i+0xfa>
 8011d16:	6821      	ldr	r1, [r4, #0]
 8011d18:	6833      	ldr	r3, [r6, #0]
 8011d1a:	0608      	lsls	r0, r1, #24
 8011d1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8011d20:	d402      	bmi.n	8011d28 <_printf_i+0xe8>
 8011d22:	0649      	lsls	r1, r1, #25
 8011d24:	bf48      	it	mi
 8011d26:	b2ad      	uxthmi	r5, r5
 8011d28:	2f6f      	cmp	r7, #111	@ 0x6f
 8011d2a:	6033      	str	r3, [r6, #0]
 8011d2c:	4852      	ldr	r0, [pc, #328]	@ (8011e78 <_printf_i+0x238>)
 8011d2e:	bf14      	ite	ne
 8011d30:	230a      	movne	r3, #10
 8011d32:	2308      	moveq	r3, #8
 8011d34:	2100      	movs	r1, #0
 8011d36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011d3a:	6866      	ldr	r6, [r4, #4]
 8011d3c:	2e00      	cmp	r6, #0
 8011d3e:	60a6      	str	r6, [r4, #8]
 8011d40:	bfa2      	ittt	ge
 8011d42:	6821      	ldrge	r1, [r4, #0]
 8011d44:	f021 0104 	bicge.w	r1, r1, #4
 8011d48:	6021      	strge	r1, [r4, #0]
 8011d4a:	b90d      	cbnz	r5, 8011d50 <_printf_i+0x110>
 8011d4c:	2e00      	cmp	r6, #0
 8011d4e:	d04b      	beq.n	8011de8 <_printf_i+0x1a8>
 8011d50:	4616      	mov	r6, r2
 8011d52:	fbb5 f1f3 	udiv	r1, r5, r3
 8011d56:	fb03 5711 	mls	r7, r3, r1, r5
 8011d5a:	5dc7      	ldrb	r7, [r0, r7]
 8011d5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011d60:	462f      	mov	r7, r5
 8011d62:	460d      	mov	r5, r1
 8011d64:	42bb      	cmp	r3, r7
 8011d66:	d9f4      	bls.n	8011d52 <_printf_i+0x112>
 8011d68:	2b08      	cmp	r3, #8
 8011d6a:	d10b      	bne.n	8011d84 <_printf_i+0x144>
 8011d6c:	6823      	ldr	r3, [r4, #0]
 8011d6e:	07df      	lsls	r7, r3, #31
 8011d70:	d508      	bpl.n	8011d84 <_printf_i+0x144>
 8011d72:	6923      	ldr	r3, [r4, #16]
 8011d74:	6861      	ldr	r1, [r4, #4]
 8011d76:	4299      	cmp	r1, r3
 8011d78:	bfde      	ittt	le
 8011d7a:	2330      	movle	r3, #48	@ 0x30
 8011d7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011d80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011d84:	1b92      	subs	r2, r2, r6
 8011d86:	6122      	str	r2, [r4, #16]
 8011d88:	464b      	mov	r3, r9
 8011d8a:	aa03      	add	r2, sp, #12
 8011d8c:	4621      	mov	r1, r4
 8011d8e:	4640      	mov	r0, r8
 8011d90:	f8cd a000 	str.w	sl, [sp]
 8011d94:	f7ff fee2 	bl	8011b5c <_printf_common>
 8011d98:	3001      	adds	r0, #1
 8011d9a:	d14a      	bne.n	8011e32 <_printf_i+0x1f2>
 8011d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8011da0:	b004      	add	sp, #16
 8011da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011da6:	6823      	ldr	r3, [r4, #0]
 8011da8:	f043 0320 	orr.w	r3, r3, #32
 8011dac:	6023      	str	r3, [r4, #0]
 8011dae:	2778      	movs	r7, #120	@ 0x78
 8011db0:	4832      	ldr	r0, [pc, #200]	@ (8011e7c <_printf_i+0x23c>)
 8011db2:	6823      	ldr	r3, [r4, #0]
 8011db4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011db8:	061f      	lsls	r7, r3, #24
 8011dba:	6831      	ldr	r1, [r6, #0]
 8011dbc:	f851 5b04 	ldr.w	r5, [r1], #4
 8011dc0:	d402      	bmi.n	8011dc8 <_printf_i+0x188>
 8011dc2:	065f      	lsls	r7, r3, #25
 8011dc4:	bf48      	it	mi
 8011dc6:	b2ad      	uxthmi	r5, r5
 8011dc8:	6031      	str	r1, [r6, #0]
 8011dca:	07d9      	lsls	r1, r3, #31
 8011dcc:	bf44      	itt	mi
 8011dce:	f043 0320 	orrmi.w	r3, r3, #32
 8011dd2:	6023      	strmi	r3, [r4, #0]
 8011dd4:	b11d      	cbz	r5, 8011dde <_printf_i+0x19e>
 8011dd6:	2310      	movs	r3, #16
 8011dd8:	e7ac      	b.n	8011d34 <_printf_i+0xf4>
 8011dda:	4827      	ldr	r0, [pc, #156]	@ (8011e78 <_printf_i+0x238>)
 8011ddc:	e7e9      	b.n	8011db2 <_printf_i+0x172>
 8011dde:	6823      	ldr	r3, [r4, #0]
 8011de0:	f023 0320 	bic.w	r3, r3, #32
 8011de4:	6023      	str	r3, [r4, #0]
 8011de6:	e7f6      	b.n	8011dd6 <_printf_i+0x196>
 8011de8:	4616      	mov	r6, r2
 8011dea:	e7bd      	b.n	8011d68 <_printf_i+0x128>
 8011dec:	6833      	ldr	r3, [r6, #0]
 8011dee:	6825      	ldr	r5, [r4, #0]
 8011df0:	1d18      	adds	r0, r3, #4
 8011df2:	6961      	ldr	r1, [r4, #20]
 8011df4:	6030      	str	r0, [r6, #0]
 8011df6:	062e      	lsls	r6, r5, #24
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	d501      	bpl.n	8011e00 <_printf_i+0x1c0>
 8011dfc:	6019      	str	r1, [r3, #0]
 8011dfe:	e002      	b.n	8011e06 <_printf_i+0x1c6>
 8011e00:	0668      	lsls	r0, r5, #25
 8011e02:	d5fb      	bpl.n	8011dfc <_printf_i+0x1bc>
 8011e04:	8019      	strh	r1, [r3, #0]
 8011e06:	2300      	movs	r3, #0
 8011e08:	4616      	mov	r6, r2
 8011e0a:	6123      	str	r3, [r4, #16]
 8011e0c:	e7bc      	b.n	8011d88 <_printf_i+0x148>
 8011e0e:	6833      	ldr	r3, [r6, #0]
 8011e10:	2100      	movs	r1, #0
 8011e12:	1d1a      	adds	r2, r3, #4
 8011e14:	6032      	str	r2, [r6, #0]
 8011e16:	681e      	ldr	r6, [r3, #0]
 8011e18:	6862      	ldr	r2, [r4, #4]
 8011e1a:	4630      	mov	r0, r6
 8011e1c:	f000 f99a 	bl	8012154 <memchr>
 8011e20:	b108      	cbz	r0, 8011e26 <_printf_i+0x1e6>
 8011e22:	1b80      	subs	r0, r0, r6
 8011e24:	6060      	str	r0, [r4, #4]
 8011e26:	6863      	ldr	r3, [r4, #4]
 8011e28:	6123      	str	r3, [r4, #16]
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011e30:	e7aa      	b.n	8011d88 <_printf_i+0x148>
 8011e32:	6923      	ldr	r3, [r4, #16]
 8011e34:	4632      	mov	r2, r6
 8011e36:	4649      	mov	r1, r9
 8011e38:	4640      	mov	r0, r8
 8011e3a:	47d0      	blx	sl
 8011e3c:	3001      	adds	r0, #1
 8011e3e:	d0ad      	beq.n	8011d9c <_printf_i+0x15c>
 8011e40:	6823      	ldr	r3, [r4, #0]
 8011e42:	079b      	lsls	r3, r3, #30
 8011e44:	d413      	bmi.n	8011e6e <_printf_i+0x22e>
 8011e46:	68e0      	ldr	r0, [r4, #12]
 8011e48:	9b03      	ldr	r3, [sp, #12]
 8011e4a:	4298      	cmp	r0, r3
 8011e4c:	bfb8      	it	lt
 8011e4e:	4618      	movlt	r0, r3
 8011e50:	e7a6      	b.n	8011da0 <_printf_i+0x160>
 8011e52:	2301      	movs	r3, #1
 8011e54:	4632      	mov	r2, r6
 8011e56:	4649      	mov	r1, r9
 8011e58:	4640      	mov	r0, r8
 8011e5a:	47d0      	blx	sl
 8011e5c:	3001      	adds	r0, #1
 8011e5e:	d09d      	beq.n	8011d9c <_printf_i+0x15c>
 8011e60:	3501      	adds	r5, #1
 8011e62:	68e3      	ldr	r3, [r4, #12]
 8011e64:	9903      	ldr	r1, [sp, #12]
 8011e66:	1a5b      	subs	r3, r3, r1
 8011e68:	42ab      	cmp	r3, r5
 8011e6a:	dcf2      	bgt.n	8011e52 <_printf_i+0x212>
 8011e6c:	e7eb      	b.n	8011e46 <_printf_i+0x206>
 8011e6e:	2500      	movs	r5, #0
 8011e70:	f104 0619 	add.w	r6, r4, #25
 8011e74:	e7f5      	b.n	8011e62 <_printf_i+0x222>
 8011e76:	bf00      	nop
 8011e78:	08012b3d 	.word	0x08012b3d
 8011e7c:	08012b4e 	.word	0x08012b4e

08011e80 <__sflush_r>:
 8011e80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e88:	0716      	lsls	r6, r2, #28
 8011e8a:	4605      	mov	r5, r0
 8011e8c:	460c      	mov	r4, r1
 8011e8e:	d454      	bmi.n	8011f3a <__sflush_r+0xba>
 8011e90:	684b      	ldr	r3, [r1, #4]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	dc02      	bgt.n	8011e9c <__sflush_r+0x1c>
 8011e96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	dd48      	ble.n	8011f2e <__sflush_r+0xae>
 8011e9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e9e:	2e00      	cmp	r6, #0
 8011ea0:	d045      	beq.n	8011f2e <__sflush_r+0xae>
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011ea8:	682f      	ldr	r7, [r5, #0]
 8011eaa:	6a21      	ldr	r1, [r4, #32]
 8011eac:	602b      	str	r3, [r5, #0]
 8011eae:	d030      	beq.n	8011f12 <__sflush_r+0x92>
 8011eb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011eb2:	89a3      	ldrh	r3, [r4, #12]
 8011eb4:	0759      	lsls	r1, r3, #29
 8011eb6:	d505      	bpl.n	8011ec4 <__sflush_r+0x44>
 8011eb8:	6863      	ldr	r3, [r4, #4]
 8011eba:	1ad2      	subs	r2, r2, r3
 8011ebc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011ebe:	b10b      	cbz	r3, 8011ec4 <__sflush_r+0x44>
 8011ec0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011ec2:	1ad2      	subs	r2, r2, r3
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011ec8:	6a21      	ldr	r1, [r4, #32]
 8011eca:	4628      	mov	r0, r5
 8011ecc:	47b0      	blx	r6
 8011ece:	1c43      	adds	r3, r0, #1
 8011ed0:	89a3      	ldrh	r3, [r4, #12]
 8011ed2:	d106      	bne.n	8011ee2 <__sflush_r+0x62>
 8011ed4:	6829      	ldr	r1, [r5, #0]
 8011ed6:	291d      	cmp	r1, #29
 8011ed8:	d82b      	bhi.n	8011f32 <__sflush_r+0xb2>
 8011eda:	4a2a      	ldr	r2, [pc, #168]	@ (8011f84 <__sflush_r+0x104>)
 8011edc:	410a      	asrs	r2, r1
 8011ede:	07d6      	lsls	r6, r2, #31
 8011ee0:	d427      	bmi.n	8011f32 <__sflush_r+0xb2>
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	04d9      	lsls	r1, r3, #19
 8011ee6:	6062      	str	r2, [r4, #4]
 8011ee8:	6922      	ldr	r2, [r4, #16]
 8011eea:	6022      	str	r2, [r4, #0]
 8011eec:	d504      	bpl.n	8011ef8 <__sflush_r+0x78>
 8011eee:	1c42      	adds	r2, r0, #1
 8011ef0:	d101      	bne.n	8011ef6 <__sflush_r+0x76>
 8011ef2:	682b      	ldr	r3, [r5, #0]
 8011ef4:	b903      	cbnz	r3, 8011ef8 <__sflush_r+0x78>
 8011ef6:	6560      	str	r0, [r4, #84]	@ 0x54
 8011ef8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011efa:	602f      	str	r7, [r5, #0]
 8011efc:	b1b9      	cbz	r1, 8011f2e <__sflush_r+0xae>
 8011efe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011f02:	4299      	cmp	r1, r3
 8011f04:	d002      	beq.n	8011f0c <__sflush_r+0x8c>
 8011f06:	4628      	mov	r0, r5
 8011f08:	f7ff fa96 	bl	8011438 <_free_r>
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011f10:	e00d      	b.n	8011f2e <__sflush_r+0xae>
 8011f12:	2301      	movs	r3, #1
 8011f14:	4628      	mov	r0, r5
 8011f16:	47b0      	blx	r6
 8011f18:	4602      	mov	r2, r0
 8011f1a:	1c50      	adds	r0, r2, #1
 8011f1c:	d1c9      	bne.n	8011eb2 <__sflush_r+0x32>
 8011f1e:	682b      	ldr	r3, [r5, #0]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d0c6      	beq.n	8011eb2 <__sflush_r+0x32>
 8011f24:	2b1d      	cmp	r3, #29
 8011f26:	d001      	beq.n	8011f2c <__sflush_r+0xac>
 8011f28:	2b16      	cmp	r3, #22
 8011f2a:	d11d      	bne.n	8011f68 <__sflush_r+0xe8>
 8011f2c:	602f      	str	r7, [r5, #0]
 8011f2e:	2000      	movs	r0, #0
 8011f30:	e021      	b.n	8011f76 <__sflush_r+0xf6>
 8011f32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f36:	b21b      	sxth	r3, r3
 8011f38:	e01a      	b.n	8011f70 <__sflush_r+0xf0>
 8011f3a:	690f      	ldr	r7, [r1, #16]
 8011f3c:	2f00      	cmp	r7, #0
 8011f3e:	d0f6      	beq.n	8011f2e <__sflush_r+0xae>
 8011f40:	0793      	lsls	r3, r2, #30
 8011f42:	680e      	ldr	r6, [r1, #0]
 8011f44:	600f      	str	r7, [r1, #0]
 8011f46:	bf0c      	ite	eq
 8011f48:	694b      	ldreq	r3, [r1, #20]
 8011f4a:	2300      	movne	r3, #0
 8011f4c:	eba6 0807 	sub.w	r8, r6, r7
 8011f50:	608b      	str	r3, [r1, #8]
 8011f52:	f1b8 0f00 	cmp.w	r8, #0
 8011f56:	ddea      	ble.n	8011f2e <__sflush_r+0xae>
 8011f58:	4643      	mov	r3, r8
 8011f5a:	463a      	mov	r2, r7
 8011f5c:	6a21      	ldr	r1, [r4, #32]
 8011f5e:	4628      	mov	r0, r5
 8011f60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011f62:	47b0      	blx	r6
 8011f64:	2800      	cmp	r0, #0
 8011f66:	dc08      	bgt.n	8011f7a <__sflush_r+0xfa>
 8011f68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f70:	f04f 30ff 	mov.w	r0, #4294967295
 8011f74:	81a3      	strh	r3, [r4, #12]
 8011f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f7a:	4407      	add	r7, r0
 8011f7c:	eba8 0800 	sub.w	r8, r8, r0
 8011f80:	e7e7      	b.n	8011f52 <__sflush_r+0xd2>
 8011f82:	bf00      	nop
 8011f84:	dfbffffe 	.word	0xdfbffffe

08011f88 <_fflush_r>:
 8011f88:	b538      	push	{r3, r4, r5, lr}
 8011f8a:	690b      	ldr	r3, [r1, #16]
 8011f8c:	4605      	mov	r5, r0
 8011f8e:	460c      	mov	r4, r1
 8011f90:	b913      	cbnz	r3, 8011f98 <_fflush_r+0x10>
 8011f92:	2500      	movs	r5, #0
 8011f94:	4628      	mov	r0, r5
 8011f96:	bd38      	pop	{r3, r4, r5, pc}
 8011f98:	b118      	cbz	r0, 8011fa2 <_fflush_r+0x1a>
 8011f9a:	6a03      	ldr	r3, [r0, #32]
 8011f9c:	b90b      	cbnz	r3, 8011fa2 <_fflush_r+0x1a>
 8011f9e:	f7ff f8ab 	bl	80110f8 <__sinit>
 8011fa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d0f3      	beq.n	8011f92 <_fflush_r+0xa>
 8011faa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011fac:	07d0      	lsls	r0, r2, #31
 8011fae:	d404      	bmi.n	8011fba <_fflush_r+0x32>
 8011fb0:	0599      	lsls	r1, r3, #22
 8011fb2:	d402      	bmi.n	8011fba <_fflush_r+0x32>
 8011fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011fb6:	f7ff fa30 	bl	801141a <__retarget_lock_acquire_recursive>
 8011fba:	4628      	mov	r0, r5
 8011fbc:	4621      	mov	r1, r4
 8011fbe:	f7ff ff5f 	bl	8011e80 <__sflush_r>
 8011fc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011fc4:	4605      	mov	r5, r0
 8011fc6:	07da      	lsls	r2, r3, #31
 8011fc8:	d4e4      	bmi.n	8011f94 <_fflush_r+0xc>
 8011fca:	89a3      	ldrh	r3, [r4, #12]
 8011fcc:	059b      	lsls	r3, r3, #22
 8011fce:	d4e1      	bmi.n	8011f94 <_fflush_r+0xc>
 8011fd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011fd2:	f7ff fa23 	bl	801141c <__retarget_lock_release_recursive>
 8011fd6:	e7dd      	b.n	8011f94 <_fflush_r+0xc>

08011fd8 <__swbuf_r>:
 8011fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fda:	460e      	mov	r6, r1
 8011fdc:	4614      	mov	r4, r2
 8011fde:	4605      	mov	r5, r0
 8011fe0:	b118      	cbz	r0, 8011fea <__swbuf_r+0x12>
 8011fe2:	6a03      	ldr	r3, [r0, #32]
 8011fe4:	b90b      	cbnz	r3, 8011fea <__swbuf_r+0x12>
 8011fe6:	f7ff f887 	bl	80110f8 <__sinit>
 8011fea:	69a3      	ldr	r3, [r4, #24]
 8011fec:	60a3      	str	r3, [r4, #8]
 8011fee:	89a3      	ldrh	r3, [r4, #12]
 8011ff0:	071a      	lsls	r2, r3, #28
 8011ff2:	d501      	bpl.n	8011ff8 <__swbuf_r+0x20>
 8011ff4:	6923      	ldr	r3, [r4, #16]
 8011ff6:	b943      	cbnz	r3, 801200a <__swbuf_r+0x32>
 8011ff8:	4621      	mov	r1, r4
 8011ffa:	4628      	mov	r0, r5
 8011ffc:	f000 f82a 	bl	8012054 <__swsetup_r>
 8012000:	b118      	cbz	r0, 801200a <__swbuf_r+0x32>
 8012002:	f04f 37ff 	mov.w	r7, #4294967295
 8012006:	4638      	mov	r0, r7
 8012008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801200a:	6823      	ldr	r3, [r4, #0]
 801200c:	b2f6      	uxtb	r6, r6
 801200e:	6922      	ldr	r2, [r4, #16]
 8012010:	4637      	mov	r7, r6
 8012012:	1a98      	subs	r0, r3, r2
 8012014:	6963      	ldr	r3, [r4, #20]
 8012016:	4283      	cmp	r3, r0
 8012018:	dc05      	bgt.n	8012026 <__swbuf_r+0x4e>
 801201a:	4621      	mov	r1, r4
 801201c:	4628      	mov	r0, r5
 801201e:	f7ff ffb3 	bl	8011f88 <_fflush_r>
 8012022:	2800      	cmp	r0, #0
 8012024:	d1ed      	bne.n	8012002 <__swbuf_r+0x2a>
 8012026:	68a3      	ldr	r3, [r4, #8]
 8012028:	3b01      	subs	r3, #1
 801202a:	60a3      	str	r3, [r4, #8]
 801202c:	6823      	ldr	r3, [r4, #0]
 801202e:	1c5a      	adds	r2, r3, #1
 8012030:	6022      	str	r2, [r4, #0]
 8012032:	701e      	strb	r6, [r3, #0]
 8012034:	1c43      	adds	r3, r0, #1
 8012036:	6962      	ldr	r2, [r4, #20]
 8012038:	429a      	cmp	r2, r3
 801203a:	d004      	beq.n	8012046 <__swbuf_r+0x6e>
 801203c:	89a3      	ldrh	r3, [r4, #12]
 801203e:	07db      	lsls	r3, r3, #31
 8012040:	d5e1      	bpl.n	8012006 <__swbuf_r+0x2e>
 8012042:	2e0a      	cmp	r6, #10
 8012044:	d1df      	bne.n	8012006 <__swbuf_r+0x2e>
 8012046:	4621      	mov	r1, r4
 8012048:	4628      	mov	r0, r5
 801204a:	f7ff ff9d 	bl	8011f88 <_fflush_r>
 801204e:	2800      	cmp	r0, #0
 8012050:	d0d9      	beq.n	8012006 <__swbuf_r+0x2e>
 8012052:	e7d6      	b.n	8012002 <__swbuf_r+0x2a>

08012054 <__swsetup_r>:
 8012054:	b538      	push	{r3, r4, r5, lr}
 8012056:	4b29      	ldr	r3, [pc, #164]	@ (80120fc <__swsetup_r+0xa8>)
 8012058:	4605      	mov	r5, r0
 801205a:	460c      	mov	r4, r1
 801205c:	6818      	ldr	r0, [r3, #0]
 801205e:	b118      	cbz	r0, 8012068 <__swsetup_r+0x14>
 8012060:	6a03      	ldr	r3, [r0, #32]
 8012062:	b90b      	cbnz	r3, 8012068 <__swsetup_r+0x14>
 8012064:	f7ff f848 	bl	80110f8 <__sinit>
 8012068:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801206c:	0719      	lsls	r1, r3, #28
 801206e:	d422      	bmi.n	80120b6 <__swsetup_r+0x62>
 8012070:	06da      	lsls	r2, r3, #27
 8012072:	d407      	bmi.n	8012084 <__swsetup_r+0x30>
 8012074:	2209      	movs	r2, #9
 8012076:	602a      	str	r2, [r5, #0]
 8012078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801207c:	f04f 30ff 	mov.w	r0, #4294967295
 8012080:	81a3      	strh	r3, [r4, #12]
 8012082:	e033      	b.n	80120ec <__swsetup_r+0x98>
 8012084:	0758      	lsls	r0, r3, #29
 8012086:	d512      	bpl.n	80120ae <__swsetup_r+0x5a>
 8012088:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801208a:	b141      	cbz	r1, 801209e <__swsetup_r+0x4a>
 801208c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012090:	4299      	cmp	r1, r3
 8012092:	d002      	beq.n	801209a <__swsetup_r+0x46>
 8012094:	4628      	mov	r0, r5
 8012096:	f7ff f9cf 	bl	8011438 <_free_r>
 801209a:	2300      	movs	r3, #0
 801209c:	6363      	str	r3, [r4, #52]	@ 0x34
 801209e:	89a3      	ldrh	r3, [r4, #12]
 80120a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80120a4:	81a3      	strh	r3, [r4, #12]
 80120a6:	2300      	movs	r3, #0
 80120a8:	6063      	str	r3, [r4, #4]
 80120aa:	6923      	ldr	r3, [r4, #16]
 80120ac:	6023      	str	r3, [r4, #0]
 80120ae:	89a3      	ldrh	r3, [r4, #12]
 80120b0:	f043 0308 	orr.w	r3, r3, #8
 80120b4:	81a3      	strh	r3, [r4, #12]
 80120b6:	6923      	ldr	r3, [r4, #16]
 80120b8:	b94b      	cbnz	r3, 80120ce <__swsetup_r+0x7a>
 80120ba:	89a3      	ldrh	r3, [r4, #12]
 80120bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80120c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80120c4:	d003      	beq.n	80120ce <__swsetup_r+0x7a>
 80120c6:	4621      	mov	r1, r4
 80120c8:	4628      	mov	r0, r5
 80120ca:	f000 f8a4 	bl	8012216 <__smakebuf_r>
 80120ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120d2:	f013 0201 	ands.w	r2, r3, #1
 80120d6:	d00a      	beq.n	80120ee <__swsetup_r+0x9a>
 80120d8:	2200      	movs	r2, #0
 80120da:	60a2      	str	r2, [r4, #8]
 80120dc:	6962      	ldr	r2, [r4, #20]
 80120de:	4252      	negs	r2, r2
 80120e0:	61a2      	str	r2, [r4, #24]
 80120e2:	6922      	ldr	r2, [r4, #16]
 80120e4:	b942      	cbnz	r2, 80120f8 <__swsetup_r+0xa4>
 80120e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80120ea:	d1c5      	bne.n	8012078 <__swsetup_r+0x24>
 80120ec:	bd38      	pop	{r3, r4, r5, pc}
 80120ee:	0799      	lsls	r1, r3, #30
 80120f0:	bf58      	it	pl
 80120f2:	6962      	ldrpl	r2, [r4, #20]
 80120f4:	60a2      	str	r2, [r4, #8]
 80120f6:	e7f4      	b.n	80120e2 <__swsetup_r+0x8e>
 80120f8:	2000      	movs	r0, #0
 80120fa:	e7f7      	b.n	80120ec <__swsetup_r+0x98>
 80120fc:	20000130 	.word	0x20000130

08012100 <memmove>:
 8012100:	4288      	cmp	r0, r1
 8012102:	b510      	push	{r4, lr}
 8012104:	eb01 0402 	add.w	r4, r1, r2
 8012108:	d902      	bls.n	8012110 <memmove+0x10>
 801210a:	4284      	cmp	r4, r0
 801210c:	4623      	mov	r3, r4
 801210e:	d807      	bhi.n	8012120 <memmove+0x20>
 8012110:	1e43      	subs	r3, r0, #1
 8012112:	42a1      	cmp	r1, r4
 8012114:	d008      	beq.n	8012128 <memmove+0x28>
 8012116:	f811 2b01 	ldrb.w	r2, [r1], #1
 801211a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801211e:	e7f8      	b.n	8012112 <memmove+0x12>
 8012120:	4402      	add	r2, r0
 8012122:	4601      	mov	r1, r0
 8012124:	428a      	cmp	r2, r1
 8012126:	d100      	bne.n	801212a <memmove+0x2a>
 8012128:	bd10      	pop	{r4, pc}
 801212a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801212e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012132:	e7f7      	b.n	8012124 <memmove+0x24>

08012134 <_sbrk_r>:
 8012134:	b538      	push	{r3, r4, r5, lr}
 8012136:	2300      	movs	r3, #0
 8012138:	4d05      	ldr	r5, [pc, #20]	@ (8012150 <_sbrk_r+0x1c>)
 801213a:	4604      	mov	r4, r0
 801213c:	4608      	mov	r0, r1
 801213e:	602b      	str	r3, [r5, #0]
 8012140:	f7f0 f97e 	bl	8002440 <_sbrk>
 8012144:	1c43      	adds	r3, r0, #1
 8012146:	d102      	bne.n	801214e <_sbrk_r+0x1a>
 8012148:	682b      	ldr	r3, [r5, #0]
 801214a:	b103      	cbz	r3, 801214e <_sbrk_r+0x1a>
 801214c:	6023      	str	r3, [r4, #0]
 801214e:	bd38      	pop	{r3, r4, r5, pc}
 8012150:	200113a4 	.word	0x200113a4

08012154 <memchr>:
 8012154:	b2c9      	uxtb	r1, r1
 8012156:	4603      	mov	r3, r0
 8012158:	4402      	add	r2, r0
 801215a:	b510      	push	{r4, lr}
 801215c:	4293      	cmp	r3, r2
 801215e:	4618      	mov	r0, r3
 8012160:	d101      	bne.n	8012166 <memchr+0x12>
 8012162:	2000      	movs	r0, #0
 8012164:	e003      	b.n	801216e <memchr+0x1a>
 8012166:	7804      	ldrb	r4, [r0, #0]
 8012168:	3301      	adds	r3, #1
 801216a:	428c      	cmp	r4, r1
 801216c:	d1f6      	bne.n	801215c <memchr+0x8>
 801216e:	bd10      	pop	{r4, pc}

08012170 <_realloc_r>:
 8012170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012174:	4680      	mov	r8, r0
 8012176:	4615      	mov	r5, r2
 8012178:	460c      	mov	r4, r1
 801217a:	b921      	cbnz	r1, 8012186 <_realloc_r+0x16>
 801217c:	4611      	mov	r1, r2
 801217e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012182:	f7ff b9c5 	b.w	8011510 <_malloc_r>
 8012186:	b92a      	cbnz	r2, 8012194 <_realloc_r+0x24>
 8012188:	f7ff f956 	bl	8011438 <_free_r>
 801218c:	2400      	movs	r4, #0
 801218e:	4620      	mov	r0, r4
 8012190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012194:	f000 f89e 	bl	80122d4 <_malloc_usable_size_r>
 8012198:	4285      	cmp	r5, r0
 801219a:	4606      	mov	r6, r0
 801219c:	d802      	bhi.n	80121a4 <_realloc_r+0x34>
 801219e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80121a2:	d8f4      	bhi.n	801218e <_realloc_r+0x1e>
 80121a4:	4629      	mov	r1, r5
 80121a6:	4640      	mov	r0, r8
 80121a8:	f7ff f9b2 	bl	8011510 <_malloc_r>
 80121ac:	4607      	mov	r7, r0
 80121ae:	2800      	cmp	r0, #0
 80121b0:	d0ec      	beq.n	801218c <_realloc_r+0x1c>
 80121b2:	42b5      	cmp	r5, r6
 80121b4:	462a      	mov	r2, r5
 80121b6:	4621      	mov	r1, r4
 80121b8:	bf28      	it	cs
 80121ba:	4632      	movcs	r2, r6
 80121bc:	f7ff f92f 	bl	801141e <memcpy>
 80121c0:	4621      	mov	r1, r4
 80121c2:	4640      	mov	r0, r8
 80121c4:	463c      	mov	r4, r7
 80121c6:	f7ff f937 	bl	8011438 <_free_r>
 80121ca:	e7e0      	b.n	801218e <_realloc_r+0x1e>

080121cc <__swhatbuf_r>:
 80121cc:	b570      	push	{r4, r5, r6, lr}
 80121ce:	460c      	mov	r4, r1
 80121d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80121d4:	b096      	sub	sp, #88	@ 0x58
 80121d6:	4615      	mov	r5, r2
 80121d8:	2900      	cmp	r1, #0
 80121da:	461e      	mov	r6, r3
 80121dc:	da0c      	bge.n	80121f8 <__swhatbuf_r+0x2c>
 80121de:	89a3      	ldrh	r3, [r4, #12]
 80121e0:	2100      	movs	r1, #0
 80121e2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80121e6:	bf14      	ite	ne
 80121e8:	2340      	movne	r3, #64	@ 0x40
 80121ea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80121ee:	2000      	movs	r0, #0
 80121f0:	6031      	str	r1, [r6, #0]
 80121f2:	602b      	str	r3, [r5, #0]
 80121f4:	b016      	add	sp, #88	@ 0x58
 80121f6:	bd70      	pop	{r4, r5, r6, pc}
 80121f8:	466a      	mov	r2, sp
 80121fa:	f000 f849 	bl	8012290 <_fstat_r>
 80121fe:	2800      	cmp	r0, #0
 8012200:	dbed      	blt.n	80121de <__swhatbuf_r+0x12>
 8012202:	9901      	ldr	r1, [sp, #4]
 8012204:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8012208:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801220c:	4259      	negs	r1, r3
 801220e:	4159      	adcs	r1, r3
 8012210:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012214:	e7eb      	b.n	80121ee <__swhatbuf_r+0x22>

08012216 <__smakebuf_r>:
 8012216:	898b      	ldrh	r3, [r1, #12]
 8012218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801221a:	079d      	lsls	r5, r3, #30
 801221c:	4606      	mov	r6, r0
 801221e:	460c      	mov	r4, r1
 8012220:	d507      	bpl.n	8012232 <__smakebuf_r+0x1c>
 8012222:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012226:	6023      	str	r3, [r4, #0]
 8012228:	6123      	str	r3, [r4, #16]
 801222a:	2301      	movs	r3, #1
 801222c:	6163      	str	r3, [r4, #20]
 801222e:	b003      	add	sp, #12
 8012230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012232:	ab01      	add	r3, sp, #4
 8012234:	466a      	mov	r2, sp
 8012236:	f7ff ffc9 	bl	80121cc <__swhatbuf_r>
 801223a:	9f00      	ldr	r7, [sp, #0]
 801223c:	4605      	mov	r5, r0
 801223e:	4630      	mov	r0, r6
 8012240:	4639      	mov	r1, r7
 8012242:	f7ff f965 	bl	8011510 <_malloc_r>
 8012246:	b948      	cbnz	r0, 801225c <__smakebuf_r+0x46>
 8012248:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801224c:	059a      	lsls	r2, r3, #22
 801224e:	d4ee      	bmi.n	801222e <__smakebuf_r+0x18>
 8012250:	f023 0303 	bic.w	r3, r3, #3
 8012254:	f043 0302 	orr.w	r3, r3, #2
 8012258:	81a3      	strh	r3, [r4, #12]
 801225a:	e7e2      	b.n	8012222 <__smakebuf_r+0xc>
 801225c:	89a3      	ldrh	r3, [r4, #12]
 801225e:	6020      	str	r0, [r4, #0]
 8012260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012264:	81a3      	strh	r3, [r4, #12]
 8012266:	9b01      	ldr	r3, [sp, #4]
 8012268:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801226c:	b15b      	cbz	r3, 8012286 <__smakebuf_r+0x70>
 801226e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012272:	4630      	mov	r0, r6
 8012274:	f000 f81e 	bl	80122b4 <_isatty_r>
 8012278:	b128      	cbz	r0, 8012286 <__smakebuf_r+0x70>
 801227a:	89a3      	ldrh	r3, [r4, #12]
 801227c:	f023 0303 	bic.w	r3, r3, #3
 8012280:	f043 0301 	orr.w	r3, r3, #1
 8012284:	81a3      	strh	r3, [r4, #12]
 8012286:	89a3      	ldrh	r3, [r4, #12]
 8012288:	431d      	orrs	r5, r3
 801228a:	81a5      	strh	r5, [r4, #12]
 801228c:	e7cf      	b.n	801222e <__smakebuf_r+0x18>
	...

08012290 <_fstat_r>:
 8012290:	b538      	push	{r3, r4, r5, lr}
 8012292:	2300      	movs	r3, #0
 8012294:	4d06      	ldr	r5, [pc, #24]	@ (80122b0 <_fstat_r+0x20>)
 8012296:	4604      	mov	r4, r0
 8012298:	4608      	mov	r0, r1
 801229a:	4611      	mov	r1, r2
 801229c:	602b      	str	r3, [r5, #0]
 801229e:	f7f0 f8a6 	bl	80023ee <_fstat>
 80122a2:	1c43      	adds	r3, r0, #1
 80122a4:	d102      	bne.n	80122ac <_fstat_r+0x1c>
 80122a6:	682b      	ldr	r3, [r5, #0]
 80122a8:	b103      	cbz	r3, 80122ac <_fstat_r+0x1c>
 80122aa:	6023      	str	r3, [r4, #0]
 80122ac:	bd38      	pop	{r3, r4, r5, pc}
 80122ae:	bf00      	nop
 80122b0:	200113a4 	.word	0x200113a4

080122b4 <_isatty_r>:
 80122b4:	b538      	push	{r3, r4, r5, lr}
 80122b6:	2300      	movs	r3, #0
 80122b8:	4d05      	ldr	r5, [pc, #20]	@ (80122d0 <_isatty_r+0x1c>)
 80122ba:	4604      	mov	r4, r0
 80122bc:	4608      	mov	r0, r1
 80122be:	602b      	str	r3, [r5, #0]
 80122c0:	f7f0 f8a5 	bl	800240e <_isatty>
 80122c4:	1c43      	adds	r3, r0, #1
 80122c6:	d102      	bne.n	80122ce <_isatty_r+0x1a>
 80122c8:	682b      	ldr	r3, [r5, #0]
 80122ca:	b103      	cbz	r3, 80122ce <_isatty_r+0x1a>
 80122cc:	6023      	str	r3, [r4, #0]
 80122ce:	bd38      	pop	{r3, r4, r5, pc}
 80122d0:	200113a4 	.word	0x200113a4

080122d4 <_malloc_usable_size_r>:
 80122d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80122d8:	1f18      	subs	r0, r3, #4
 80122da:	2b00      	cmp	r3, #0
 80122dc:	bfbc      	itt	lt
 80122de:	580b      	ldrlt	r3, [r1, r0]
 80122e0:	18c0      	addlt	r0, r0, r3
 80122e2:	4770      	bx	lr

080122e4 <_init>:
 80122e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122e6:	bf00      	nop
 80122e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122ea:	bc08      	pop	{r3}
 80122ec:	469e      	mov	lr, r3
 80122ee:	4770      	bx	lr

080122f0 <_fini>:
 80122f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80122f2:	bf00      	nop
 80122f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80122f6:	bc08      	pop	{r3}
 80122f8:	469e      	mov	lr, r3
 80122fa:	4770      	bx	lr
